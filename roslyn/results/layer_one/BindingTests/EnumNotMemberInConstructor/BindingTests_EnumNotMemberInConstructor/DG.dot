digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 677278"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 677279"];
3 [label="param BindingTests(this) 677280"];
4 [label="'C' 677281"];
5 [label="DefaultTypeName = 'C' 677282"];
6 [label="'M' 677283"];
7 [label="DefaultMethodName = 'M' 677284"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 677285"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 677286"];
10 [label="param CompilingTestBase(this) 677287"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 677288"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 677289"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 677290"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 677291"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 677292"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 677293"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 677294"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 677295"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 677296"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 677297"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 677298"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 677299"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 677300"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 677301"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 677302"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 677303"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 677304"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 677305"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 677306"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 677307"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 677308"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 677309"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 677310"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 677311"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 677312"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 677313"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 677314"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 677315"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 677316"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 677317"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 677318"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 677319"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 677320"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 677321"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 677322"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 677323"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 677324"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 677325"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 677326"];
50 [label="LazyThreadSafetyMode.PublicationOnly 677327"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 677328"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 677329"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 677330"];
54 [label="LazyThreadSafetyMode.PublicationOnly 677331"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 677332"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 677333"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 677334"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 677335"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 677336"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 677337"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 677338"];
62 [label="LazyThreadSafetyMode.PublicationOnly 677339"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 677340"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 677341"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 677342"];
66 [label="LazyThreadSafetyMode.PublicationOnly 677343"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 677344"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 677345"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 677346"];
70 [label="LazyThreadSafetyMode.PublicationOnly 677347"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 677348"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 677349"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 677350"];
74 [label="LazyThreadSafetyMode.PublicationOnly 677351"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677352"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677353"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 677354"];
78 [label="LazyThreadSafetyMode.PublicationOnly 677355"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677356"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677357"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 677358"];
82 [label="LazyThreadSafetyMode.PublicationOnly 677359"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677360"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677361"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 677362"];
86 [label="LazyThreadSafetyMode.PublicationOnly 677363"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677364"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677365"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 677366"];
90 [label="LazyThreadSafetyMode.PublicationOnly 677367"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677368"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677369"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 677370"];
94 [label="LazyThreadSafetyMode.PublicationOnly 677371"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677372"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677373"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 677374"];
98 [label="LazyThreadSafetyMode.PublicationOnly 677375"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677376"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677377"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 677378"];
102 [label="LazyThreadSafetyMode.PublicationOnly 677379"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 677380"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 677381"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 677382"];
106 [label="LazyThreadSafetyMode.PublicationOnly 677383"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 677384"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 677385"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 677386"];
110 [label="LazyThreadSafetyMode.PublicationOnly 677387"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677388"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677389"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 677390"];
114 [label="LazyThreadSafetyMode.PublicationOnly 677391"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677392"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677393"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 677394"];
118 [label="LazyThreadSafetyMode.PublicationOnly 677395"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677396"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677397"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 677398"];
122 [label="LazyThreadSafetyMode.PublicationOnly 677399"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677400"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677401"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 677402"];
126 [label="LazyThreadSafetyMode.PublicationOnly 677403"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 677404"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 677405"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 677406"];
130 [label="LazyThreadSafetyMode.PublicationOnly 677407"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677408"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677409"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 677410"];
134 [label="LazyThreadSafetyMode.PublicationOnly 677411"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677412"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677413"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 677414"];
138 [label="LazyThreadSafetyMode.PublicationOnly 677415"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677416"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677417"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 677418"];
142 [label="LazyThreadSafetyMode.PublicationOnly 677419"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677420"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677421"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 677422"];
146 [label="LazyThreadSafetyMode.PublicationOnly 677423"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677424"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677425"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 677426"];
150 [label="LazyThreadSafetyMode.PublicationOnly 677427"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677428"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677429"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 677430"];
154 [label="LazyThreadSafetyMode.PublicationOnly 677431"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677432"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677433"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 677434"];
158 [label="LazyThreadSafetyMode.PublicationOnly 677435"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677436"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677437"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 677438"];
162 [label="LazyThreadSafetyMode.PublicationOnly 677439"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677440"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677441"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 677442"];
166 [label="LazyThreadSafetyMode.PublicationOnly 677443"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677444"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677445"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 677446"];
170 [label="LazyThreadSafetyMode.PublicationOnly 677447"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677448"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677449"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 677450"];
174 [label="LazyThreadSafetyMode.PublicationOnly 677451"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677452"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677453"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 677454"];
178 [label="LazyThreadSafetyMode.PublicationOnly 677455"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677456"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 677457"];
181 [label="@'R:\\Invalid.dll' 677458"];
182 [label="fullPath: @'R:\\Invalid.dll' 677459"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 677460"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 677461"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 677462"];
186 [label="MscorlibRef_v4_0_30316_17626 677463"];
187 [label="Net451.mscorlib 677464"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 677465"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 677466"];
190 [label="'/*<bind>*/' 677467"];
191 [label="StartString = '/*<bind>*/' 677468"];
192 [label="'/*</bind>*/' 677469"];
193 [label="EndString = '/*</bind>*/' 677470"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 677471"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 677472"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 677473"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 677474"];
198 [label="param CSharpTestBase(this) 677475"];
199 [label="param CommonTestBase(this) 677476"];
200 [label="param TestBase(this) 677477"];
201 [label="_temp 677478"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 677479"];
203 [label="param EnumNotMemberInConstructor(this) 677480"];
204 [label="var source =\n@'enum E { A }\nclass C\n{\n    public C(E e = E.A) { }\n    public E E { get { return E.A; } }\n}'; 677481"];
205 [label="CreateCompilation(source).VerifyDiagnostics(); 677482"];
206 [label="source 677483"];
207 [label="param operator(string source) 677484"];
208 [label="source 677485"];
209 [label="new CSharpTestSource(source) 677486"];
210 [label="param CSharpTestSource(object value) 677487"];
211 [label="param CSharpTestSource(this) 677488"];
212 [label="Value 677489"];
213 [label="CreateCompilation(source).VerifyDiagnostics(); 677490"];
214 [label="CreateCompilation(source).VerifyDiagnostics(); 677491"];
215 [label="CreateCompilation(source) 677492"];
216 [label="param CreateCompilation(CSharpTestSource source) 677493"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 677494"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 677495"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 677496"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 677497"];
221 [label="param CreateCompilation(string assemblyName = '') 677498"];
222 [label="param CreateCompilation(string sourceFileName = '') 677499"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 677500"];
224 [label="source 677501"];
225 [label="targetFramework 677502"];
226 [label="references 677503"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 677504"];
228 [label="param GetReferences(TargetFramework tf) 677505"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 677506"];
230 [label="var references = GetReferences(tf); 677507"];
231 [label="GetReferences(tf) 677508"];
232 [label="param GetReferences(TargetFramework targetFramework) 677509"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 677510"];
234 [label="StandardReferences 677511"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 677512"];
236 [label="Mscorlib46ExtendedReferences 677513"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 677514"];
238 [label="TestBase.ValueTupleRef 677515"];
239 [label="TestReferences.NetFx.ValueTuple.tuplelib 677516"];
240 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 677517"];
241 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 677518"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 677519"];
243 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 677520"];
244 [label="return references; 677521"];
245 [label="options 677522"];
246 [label="parseOptions 677523"];
247 [label="assemblyName 677524"];
248 [label="sourceFileName 677525"];
249 [label="skipUsesIsNullable 677526"];
250 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 677527"];
251 [label="param CreateEmptyCompilation(CSharpTestSource source) 677528"];
252 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 677529"];
253 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 677530"];
254 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 677531"];
255 [label="param CreateEmptyCompilation(string assemblyName = '') 677532"];
256 [label="param CreateEmptyCompilation(string sourceFileName = '') 677533"];
257 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 677534"];
258 [label="source 677535"];
259 [label="references 677536"];
260 [label="options 677537"];
261 [label="parseOptions 677538"];
262 [label="assemblyName 677539"];
263 [label="sourceFileName 677540"];
264 [label="skipUsesIsNullable 677541"];
265 [label="null 677542"];
266 [label="experimentalFeature: null 677543"];
267 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 677544"];
268 [label="param CreateCompilationCore(CSharpTestSource source) 677545"];
269 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 677546"];
270 [label="param CreateCompilationCore(CSharpCompilationOptions options) 677547"];
271 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 677548"];
272 [label="param CreateCompilationCore(string assemblyName) 677549"];
273 [label="param CreateCompilationCore(string sourceFileName) 677550"];
274 [label="param CreateCompilationCore(bool skipUsesIsNullable) 677551"];
275 [label="param CreateCompilationCore(MessageID? experimentalFeature) 677552"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 677553"];
277 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 677554"];
278 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 677555"];
279 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 677556"];
280 [label="param GetSyntaxTrees(string sourceFileName = '') 677557"];
281 [label="param GetSyntaxTrees(this) 677558"];
282 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 677559"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 677560"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 677561"];
285 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 677562"];
286 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 677563"];
287 [label="param Parse(string text) 677564"];
288 [label="param Parse(string filename = '') 677565"];
289 [label="param Parse(CSharpParseOptions options = null) 677566"];
290 [label="param Parse(Encoding encoding = null) 677567"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 677568"];
292 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 677569"];
293 [label="kind: SourceCodeKind.Regular 677570"];
294 [label="documentationMode: DocumentationMode.Parse 677571"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 677572"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 677573"];
297 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 677574"];
298 [label="SourceCodeKind.Script 677575"];
299 [label="Regular.WithKind(SourceCodeKind.Script) 677576"];
300 [label="Script = Regular.WithKind(SourceCodeKind.Script) 677577"];
301 [label="LanguageVersion.CSharp6 677578"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 677579"];
303 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 677580"];
304 [label="LanguageVersion.CSharp7 677581"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 677582"];
306 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 677583"];
307 [label="LanguageVersion.CSharp7_1 677584"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 677585"];
309 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 677586"];
310 [label="LanguageVersion.CSharp7_2 677587"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 677588"];
312 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 677589"];
313 [label="LanguageVersion.CSharp7_3 677590"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 677591"];
315 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 677592"];
316 [label="LanguageVersion.Default 677593"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 677594"];
318 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 677595"];
319 [label="LanguageVersion.Preview 677596"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 677597"];
321 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 677598"];
322 [label="LanguageVersion.CSharp8 677599"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 677600"];
324 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 677601"];
325 [label="LanguageVersion.CSharp9 677602"];
326 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 677603"];
327 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 677604"];
328 [label="DocumentationMode.Diagnose 677605"];
329 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 677606"];
330 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 677607"];
331 [label="Regular 677608"];
332 [label="'UseLegacyStrongNameProvider' 677609"];
333 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 677610"];
334 [label="param WithFeature(this CSharpParseOptions options) 677611"];
335 [label="param WithFeature(string feature) 677612"];
336 [label="param WithFeature(string value = 'true') 677613"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 677614"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 677615"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 677616"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 677617"];
341 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 677618"];
342 [label="new[] { new KeyValuePair<string, string>(feature, value) } 677619"];
343 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 677620"];
344 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 677621"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 677622"];
346 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 677623"];
347 [label="1 677624"];
348 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 677625"];
349 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 677626"];
350 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 677627"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 677628"];
352 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 677629"];
353 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 677630"];
354 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 677631"];
355 [label="LanguageVersion.CSharp8 677632"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 677633"];
357 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 677634"];
358 [label="RegularWithExtendedPartialMethods = RegularPreview 677635"];
359 [label="new SmallDictionary<string, string> { } 677636"];
360 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 677637"];
361 [label="kind: SourceCodeKind.Regular 677638"];
362 [label="documentationMode: DocumentationMode.None 677639"];
363 [label="languageVersion: LanguageVersion.Preview 677640"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 677641"];
365 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 677642"];
366 [label="s_experimentalFeatures 677643"];
367 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 677644"];
368 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 677645"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 677646"];
370 [label="'testV7SwitchBinder' 677647"];
371 [label="'true' 677648"];
372 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 677649"];
373 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 677650"];
374 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 677651"];
375 [label="RegularWithoutRecursivePatterns = Regular7_3 677652"];
376 [label="RegularWithRecursivePatterns = Regular8 677653"];
377 [label="RegularWithoutPatternCombinators = Regular8 677654"];
378 [label="RegularWithPatternCombinators = RegularPreview 677655"];
379 [label="OutputKind.DynamicallyLinkedLibrary 677656"];
380 [label="OptimizationLevel.Release 677657"];
381 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 677658"];
382 [label="param CreateTestOptions(OutputKind outputKind) 677659"];
383 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 677660"];
384 [label="param CreateTestOptions(bool allowUnsafe = false) 677661"];
385 [label="outputKind 677662"];
386 [label="optimizationLevel: optimizationLevel 677663"];
387 [label="warningLevel: Diagnostic.MaxWarningLevel 677664"];
388 [label="allowUnsafe: allowUnsafe 677665"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677666"];
390 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677667"];
391 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 677668"];
392 [label="OutputKind.ConsoleApplication 677669"];
393 [label="OptimizationLevel.Release 677670"];
394 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 677671"];
395 [label="param CreateTestOptions(OutputKind outputKind) 677672"];
396 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 677673"];
397 [label="param CreateTestOptions(bool allowUnsafe = false) 677674"];
398 [label="outputKind 677675"];
399 [label="optimizationLevel: optimizationLevel 677676"];
400 [label="warningLevel: Diagnostic.MaxWarningLevel 677677"];
401 [label="allowUnsafe: allowUnsafe 677678"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677679"];
403 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677680"];
404 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 677681"];
405 [label="true 677682"];
406 [label="ReleaseDll.WithDebugPlusMode(true) 677683"];
407 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 677684"];
408 [label="true 677685"];
409 [label="ReleaseExe.WithDebugPlusMode(true) 677686"];
410 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 677687"];
411 [label="OutputKind.DynamicallyLinkedLibrary 677688"];
412 [label="OptimizationLevel.Debug 677689"];
413 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 677690"];
414 [label="param CreateTestOptions(OutputKind outputKind) 677691"];
415 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 677692"];
416 [label="param CreateTestOptions(bool allowUnsafe = false) 677693"];
417 [label="outputKind 677694"];
418 [label="optimizationLevel: optimizationLevel 677695"];
419 [label="warningLevel: Diagnostic.MaxWarningLevel 677696"];
420 [label="allowUnsafe: allowUnsafe 677697"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677698"];
422 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677699"];
423 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 677700"];
424 [label="OutputKind.ConsoleApplication 677701"];
425 [label="OptimizationLevel.Debug 677702"];
426 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 677703"];
427 [label="param CreateTestOptions(OutputKind outputKind) 677704"];
428 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 677705"];
429 [label="param CreateTestOptions(bool allowUnsafe = false) 677706"];
430 [label="outputKind 677707"];
431 [label="optimizationLevel: optimizationLevel 677708"];
432 [label="warningLevel: Diagnostic.MaxWarningLevel 677709"];
433 [label="allowUnsafe: allowUnsafe 677710"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677711"];
435 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677712"];
436 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 677713"];
437 [label="OutputKind.WindowsRuntimeMetadata 677714"];
438 [label="OptimizationLevel.Release 677715"];
439 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 677716"];
440 [label="param CreateTestOptions(OutputKind outputKind) 677717"];
441 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 677718"];
442 [label="param CreateTestOptions(bool allowUnsafe = false) 677719"];
443 [label="outputKind 677720"];
444 [label="optimizationLevel: optimizationLevel 677721"];
445 [label="warningLevel: Diagnostic.MaxWarningLevel 677722"];
446 [label="allowUnsafe: allowUnsafe 677723"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677724"];
448 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677725"];
449 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 677726"];
450 [label="OutputKind.WindowsRuntimeMetadata 677727"];
451 [label="OptimizationLevel.Debug 677728"];
452 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 677729"];
453 [label="param CreateTestOptions(OutputKind outputKind) 677730"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 677731"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 677732"];
456 [label="outputKind 677733"];
457 [label="optimizationLevel: optimizationLevel 677734"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 677735"];
459 [label="allowUnsafe: allowUnsafe 677736"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677737"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677738"];
462 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 677739"];
463 [label="OutputKind.NetModule 677740"];
464 [label="OptimizationLevel.Release 677741"];
465 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 677742"];
466 [label="param CreateTestOptions(OutputKind outputKind) 677743"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 677744"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 677745"];
469 [label="outputKind 677746"];
470 [label="optimizationLevel: optimizationLevel 677747"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 677748"];
472 [label="allowUnsafe: allowUnsafe 677749"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677750"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677751"];
475 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 677752"];
476 [label="OutputKind.NetModule 677753"];
477 [label="OptimizationLevel.Debug 677754"];
478 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 677755"];
479 [label="param CreateTestOptions(OutputKind outputKind) 677756"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 677757"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 677758"];
482 [label="outputKind 677759"];
483 [label="optimizationLevel: optimizationLevel 677760"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 677761"];
485 [label="allowUnsafe: allowUnsafe 677762"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677763"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 677764"];
488 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 677765"];
489 [label="true 677766"];
490 [label="ReleaseDll.WithAllowUnsafe(true) 677767"];
491 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 677768"];
492 [label="true 677769"];
493 [label="ReleaseExe.WithAllowUnsafe(true) 677770"];
494 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 677771"];
495 [label="true 677772"];
496 [label="DebugDll.WithAllowUnsafe(true) 677773"];
497 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 677774"];
498 [label="true 677775"];
499 [label="DebugExe.WithAllowUnsafe(true) 677776"];
500 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 677777"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 677778"];
502 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 677779"];
503 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 677780"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 677781"];
505 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 677782"];
506 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 677783"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 677784"];
508 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 677785"];
509 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 677786"];
510 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 677787"];
511 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 677788"];
512 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 677789"];
513 [label="DebugInformationFormat.Pdb 677790"];
514 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 677791"];
515 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 677792"];
516 [label="options = TestOptions.Regular; 677793"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 677794"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 677795"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 677796"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 677797"];
521 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 677798"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 677799"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 677800"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 677801"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 677802"];
526 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 677803"];
527 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 677804"];
528 [label="param CheckSerializable(SyntaxTree tree) 677805"];
529 [label="var stream = new MemoryStream(); 677806"];
530 [label="var root = tree.GetRoot(); 677807"];
531 [label="var root = tree.GetRoot(); 677808"];
532 [label="root.SerializeTo(stream); 677809"];
533 [label="root.SerializeTo(stream); 677810"];
534 [label="root.SerializeTo(stream); 677811"];
535 [label="stream.Position = 0; 677812"];
536 [label="stream.Position 677813"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 677814"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 677815"];
539 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 677816"];
540 [label="return tree; 677817"];
541 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 677818"];
542 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 677819"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 677820"];
544 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 677821"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 677822"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 677823"];
547 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 677824"];
548 [label="hasTopLevelStatements 677825"];
549 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 677826"];
550 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 677827"];
551 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 677828"];
552 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 677829"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 677830"];
554 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 677831"];
555 [label="param ValidateIOperations(Func<Compilation> createCompilation) 677832"];
556 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 677833"];
557 [label="return; 677834"];
558 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 677835"];
559 [label="var compilation = createCompilationLambda(); 677836"];
560 [label="var compilation = createCompilationLambda(); 677837"];
561 [label="return Guid.NewGuid().ToString('D'); 677838"];
562 [label="var compilation = createCompilationLambda(); 677839"];
563 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 677840"];
564 [label="IsNullableEnabled(compilation) 677841"];
565 [label="param IsNullableEnabled(CSharpCompilation compilation) 677842"];
566 [label="var trees = compilation.SyntaxTrees; 677843"];
567 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 677844"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 677845"];
569 [label="var options = (CSharpParseOptions)trees[0].Options; 677846"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 677847"];
571 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 677848"];
572 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 677849"];
573 [label="return compilation; 677850"];
574 [label="CreateCompilation(source).VerifyDiagnostics() 677851"];
575 [label="param VerifyDiagnostics(this TCompilation c) 677852"];
576 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 677853"];
577 [label="var diagnostics = c.GetDiagnostics(); 677854"];
578 [label="null 677855"];
579 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 677856"];
580 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 677857"];
581 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 677858"];
582 [label="null 677859"];
583 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 677860"];
584 [label="param Imports(CSharpCompilation compilation) 677861"];
585 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 677862"];
586 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 677863"];
587 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 677864"];
588 [label="param Imports(DiagnosticBag diagnostics) 677865"];
589 [label="param Imports(this) 677866"];
590 [label="_compilation 677867"];
591 [label="_diagnostics 677868"];
592 [label="UsingAliases 677869"];
593 [label="Debug.Assert(usingAliases != null); 677870"];
594 [label="Debug.Assert(usingAliases != null); 677871"];
595 [label="Debug.Assert(!usings.IsDefault); 677872"];
596 [label="Debug.Assert(!externs.IsDefault); 677873"];
597 [label="_compilation 677874"];
598 [label="this.UsingAliases 677875"];
599 [label="this.Usings 677876"];
600 [label="_diagnostics 677877"];
601 [label="this.ExternAliases 677878"];
602 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 677879"];
603 [label="var diagnostics = c.GetDiagnostics(); 677880"];
604 [label="param FromGlobalUsings(CSharpCompilation compilation) 677881"];
605 [label="var usings = compilation.Options.Usings; 677882"];
606 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 677883"];
607 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 677884"];
608 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 677885"];
609 [label="return Empty; 677886"];
610 [label="var diagnostics = c.GetDiagnostics(); 677887"];
611 [label="param Complete(CancellationToken cancellationToken) 677888"];
612 [label="param Complete(this) 677889"];
613 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 677890"];
614 [label="cancellationToken.ThrowIfCancellationRequested(); 677891"];
615 [label="var incompletePart = _state.NextIncompletePart; 677892"];
616 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 677893"];
617 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 677894"];
618 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 677895"];
619 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 677896"];
620 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 677897"];
621 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 677898"];
622 [label="Validate() 677899"];
623 [label="param Validate(this) 677900"];
624 [label="if (this == Empty)\n            {\n                return;\n            } 677901"];
625 [label="return; 677902"];
626 [label="Validate(); 677903"];
627 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 677904"];
628 [label="return; 677905"];
629 [label="param Includes(this BinderFlags self) 677906"];
630 [label="param Includes(BinderFlags other) 677907"];
631 [label="return (self & other) == other; 677908"];
632 [label="var diagnostics = c.GetDiagnostics(); 677909"];
633 [label="0 677910"];
634 [label="ExternalScope = 0 677911"];
635 [label="1 677912"];
636 [label="TopLevelScope = 1 677913"];
637 [label="2 677914"];
638 [label="ValueKindInsignificantBits = 2 677915"];
639 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 677916"];
640 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 677917"];
641 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 677918"];
642 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 677919"];
643 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 677920"];
644 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 677921"];
645 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 677922"];
646 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 677923"];
647 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 677924"];
648 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 677925"];
649 [label="10 677926"];
650 [label="MaxParameterListsForErrorRecovery = 10 677927"];
651 [label="'<>h__TransparentIdentifier' 677928"];
652 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 677929"];
653 [label="s => (MethodSymbol)s 677930"];
654 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 677931"];
655 [label="s => (PropertySymbol)s 677932"];
656 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 677933"];
657 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 677934"];
658 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 677935"];
659 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 677936"];
660 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 677937"];
661 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 677938"];
662 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 677939"];
663 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 677940"];
664 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 677941"];
665 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 677942"];
666 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 677943"];
667 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 677944"];
668 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 677945"];
669 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 677946"];
670 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 677947"];
671 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 677948"];
672 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 677949"];
673 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 677950"];
674 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 677951"];
675 [label="param GetWellKnownTypeMember(WellKnownMember member) 677952"];
676 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 677953"];
677 [label="param GetWellKnownTypeMember(Location location = null) 677954"];
678 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 677955"];
679 [label="param GetWellKnownTypeMember(bool isOptional = false) 677956"];
680 [label="Debug.Assert((syntax != null) ^ (location != null)); 677957"];
681 [label="Debug.Assert((syntax != null) ^ (location != null)); 677958"];
682 [label="Debug.Assert((syntax != null) ^ (location != null)); 677959"];
683 [label="Debug.Assert((syntax != null) ^ (location != null)); 677960"];
684 [label="DiagnosticInfo useSiteDiagnostic; 677961"];
685 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 677962"];
686 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 677963"];
687 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 677964"];
688 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 677965"];
689 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 677966"];
690 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 677967"];
691 [label="param GetWellKnownTypeMember(WellKnownMember member) 677968"];
692 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 677969"];
693 [label="param GetWellKnownTypeMember(bool isOptional = false) 677970"];
694 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 677971"];
695 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 677972"];
696 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 677973"];
697 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 677974"];
698 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 677975"];
699 [label="Debug.Assert(symbol is object); 677976"];
700 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 677977"];
701 [label="isInternal = false; 677978"];
702 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 677979"];
703 [label="symbol = symbol.ContainingType; 677980"];
704 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 677981"];
705 [label="return true; 677982"];
706 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 677983"];
707 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 677984"];
708 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 677985"];
709 [label="Debug.Assert(symbol is object); 677986"];
710 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 677987"];
711 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 677988"];
712 [label="symbol = symbol.ContainingType; 677989"];
713 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 677990"];
714 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 677991"];
715 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 677992"];
716 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 677993"];
717 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 677994"];
718 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 677995"];
719 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 677996"];
720 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 677997"];
721 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 677998"];
722 [label="Debug.Assert(symbol is object); 677999"];
723 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 678000"];
724 [label="isInternal = false; 678001"];
725 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 678002"];
726 [label="symbol = symbol.ContainingType; 678003"];
727 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 678004"];
728 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 678005"];
729 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 678006"];
730 [label="Debug.Assert(symbol is object); 678007"];
731 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 678008"];
732 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 678009"];
733 [label="symbol = symbol.ContainingType; 678010"];
734 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 678011"];
735 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 678012"];
736 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 678013"];
737 [label="return memberSymbol; 678014"];
738 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 678015"];
739 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 678016"];
740 [label="return memberSymbol; 678017"];
741 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 678018"];
742 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 678019"];
743 [label="Debug.Assert(symbol is object); 678020"];
744 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 678021"];
745 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 678022"];
746 [label="symbol = symbol.ContainingType; 678023"];
747 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 678024"];
748 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 678025"];
749 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 678026"];
750 [label="Debug.Assert(symbol is object); 678027"];
751 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 678028"];
752 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 678029"];
753 [label="symbol = symbol.ContainingType; 678030"];
754 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 678031"];
755 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 678032"];
756 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 678033"];
757 [label="return memberSymbol; 678034"];
758 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 678035"];
759 [label="return memberSymbol; 678036"];
760 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 678037"];
761 [label="return memberSymbol; 678038"];
762 [label="return memberSymbol; 678039"];
763 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 678040"];
764 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 678041"];
765 [label="Debug.Assert(symbol is object); 678042"];
766 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 678043"];
767 [label="isInternal = false; 678044"];
768 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 678045"];
769 [label="symbol = symbol.ContainingType; 678046"];
770 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 678047"];
771 [label="return true; 678048"];
772 [label="var diagnostics = c.GetDiagnostics(); 678049"];
773 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 678050"];
774 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 678051"];
775 [label="Debug.Assert(symbol is object); 678052"];
776 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 678053"];
777 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 678054"];
778 [label="symbol = symbol.ContainingType; 678055"];
779 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 678056"];
780 [label="param ReportUseSiteDiagnostics(Symbol symbol) 678057"];
781 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 678058"];
782 [label="param ReportUseSiteDiagnostics(Location location) 678059"];
783 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 678060"];
784 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, location); 678061"];
785 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, location); 678062"];
786 [label="param IsSymbolAccessible(Symbol symbol) 678063"];
787 [label="param IsSymbolAccessible(NamedTypeSymbol within) 678064"];
788 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 678065"];
789 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 678066"];
790 [label="bool failedThroughTypeCheck; 678067"];
791 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 678068"];
792 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 678069"];
793 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 678070"];
794 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 678071"];
795 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 678072"];
796 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics); 678073"];
797 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics) 678074"];
798 [label="param IsSymbolAccessibleCore(Symbol symbol) 678075"];
799 [label="param IsSymbolAccessibleCore(Symbol within) 678076"];
800 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 678077"];
801 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 678078"];
802 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 678079"];
803 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 678080"];
804 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 678081"];
805 [label="Debug.Assert((object)symbol != null); 678082"];
806 [label="Debug.Assert((object)symbol != null); 678083"];
807 [label="Debug.Assert((object)within != null); 678084"];
808 [label="Debug.Assert((object)within != null); 678085"];
809 [label="Debug.Assert(within.IsDefinition); 678086"];
810 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678087"];
811 [label="failedThroughTypeCheck = false; 678088"];
812 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 678089"];
813 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 678090"];
814 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 678091"];
815 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678092"];
816 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678093"];
817 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678094"];
818 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678095"];
819 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678096"];
820 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678097"];
821 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678098"];
822 [label="IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics) 678099"];
823 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 678100"];
824 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 678101"];
825 [label="param IsMemberAccessible(Symbol within) 678102"];
826 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 678103"];
827 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 678104"];
828 [label="param IsMemberAccessible(CSharpCompilation compilation) 678105"];
829 [label="param IsMemberAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 678106"];
830 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 678107"];
831 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678108"];
832 [label="Debug.Assert((object)containingType != null); 678109"];
833 [label="Debug.Assert((object)containingType != null); 678110"];
834 [label="failedThroughTypeCheck = false; 678111"];
835 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 678112"];
836 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 678113"];
837 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 678114"];
838 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 678115"];
839 [label="if (!IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved))\n            {\n                return false;\n            } 678116"];
840 [label="IsNamedTypeAccessible(containingType, within, ref useSiteDiagnostics, basesBeingResolved) 678117"];
841 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 678118"];
842 [label="param IsNamedTypeAccessible(Symbol within) 678119"];
843 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 678120"];
844 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 678121"];
845 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678122"];
846 [label="Debug.Assert((object)type != null); 678123"];
847 [label="Debug.Assert((object)type != null); 678124"];
848 [label="var compilation = within.DeclaringCompilation; 678125"];
849 [label="bool unused; 678126"];
850 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 678127"];
851 [label="var containingType = type.ContainingType; 678128"];
852 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678129"];
853 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678130"];
854 [label="(object)containingType == null 678131"];
855 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678132"];
856 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 678133"];
857 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 678134"];
858 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 678135"];
859 [label="param IsNonNestedTypeAccessible(Symbol within) 678136"];
860 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678137"];
861 [label="Debug.Assert((object)assembly != null); 678138"];
862 [label="Debug.Assert((object)assembly != null); 678139"];
863 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 678140"];
864 [label="return true; 678141"];
865 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 678142"];
866 [label="return true; 678143"];
867 [label="var diagnostics = c.GetDiagnostics(); 678144"];
868 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 678145"];
869 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 678146"];
870 [label="Debug.Assert(symbol is object); 678147"];
871 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 678148"];
872 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 678149"];
873 [label="symbol = symbol.ContainingType; 678150"];
874 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 678151"];
875 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 678152"];
876 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 678153"];
877 [label="param IsSymbolAccessible(NamedTypeSymbol within) 678154"];
878 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 678155"];
879 [label="param IsSymbolAccessibleCore(Symbol within) 678156"];
880 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 678157"];
881 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 678158"];
882 [label="Debug.Assert((object)symbol != null); 678159"];
883 [label="Debug.Assert((object)within != null); 678160"];
884 [label="Debug.Assert(within.IsDefinition); 678161"];
885 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678162"];
886 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 678163"];
887 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678164"];
888 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 678165"];
889 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 678166"];
890 [label="param IsMemberAccessible(Symbol within) 678167"];
891 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 678168"];
892 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 678169"];
893 [label="param IsMemberAccessible(CSharpCompilation compilation) 678170"];
894 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 678171"];
895 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678172"];
896 [label="Debug.Assert((object)containingType != null); 678173"];
897 [label="Debug.Assert((object)containingType != null); 678174"];
898 [label="failedThroughTypeCheck = false; 678175"];
899 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 678176"];
900 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 678177"];
901 [label="param IsNamedTypeAccessible(Symbol within) 678178"];
902 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 678179"];
903 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678180"];
904 [label="Debug.Assert((object)type != null); 678181"];
905 [label="Debug.Assert((object)type != null); 678182"];
906 [label="var compilation = within.DeclaringCompilation; 678183"];
907 [label="bool unused; 678184"];
908 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 678185"];
909 [label="var containingType = type.ContainingType; 678186"];
910 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678187"];
911 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678188"];
912 [label="(object)containingType == null 678189"];
913 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678190"];
914 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 678191"];
915 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 678192"];
916 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 678193"];
917 [label="param IsNonNestedTypeAccessible(Symbol within) 678194"];
918 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678195"];
919 [label="Debug.Assert((object)assembly != null); 678196"];
920 [label="Debug.Assert((object)assembly != null); 678197"];
921 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 678198"];
922 [label="return true; 678199"];
923 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 678200"];
924 [label="return true; 678201"];
925 [label="var diagnostics = c.GetDiagnostics(); 678202"];
926 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt = null) 678203"];
927 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 678204"];
928 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 678205"];
929 [label="Debug.Assert((object)symbol != null); 678206"];
930 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 678207"];
931 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678208"];
932 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 678209"];
933 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 678210"];
934 [label="param IsMemberAccessible(Symbol within) 678211"];
935 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 678212"];
936 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 678213"];
937 [label="param IsMemberAccessible(CSharpCompilation compilation) 678214"];
938 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 678215"];
939 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678216"];
940 [label="Debug.Assert((object)containingType != null); 678217"];
941 [label="Debug.Assert((object)containingType != null); 678218"];
942 [label="failedThroughTypeCheck = false; 678219"];
943 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 678220"];
944 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 678221"];
945 [label="param IsNamedTypeAccessible(Symbol within) 678222"];
946 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 678223"];
947 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678224"];
948 [label="Debug.Assert((object)type != null); 678225"];
949 [label="Debug.Assert((object)type != null); 678226"];
950 [label="var compilation = within.DeclaringCompilation; 678227"];
951 [label="bool unused; 678228"];
952 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 678229"];
953 [label="var containingType = type.ContainingType; 678230"];
954 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678231"];
955 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678232"];
956 [label="(object)containingType == null 678233"];
957 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678234"];
958 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 678235"];
959 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 678236"];
960 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 678237"];
961 [label="param IsNonNestedTypeAccessible(Symbol within) 678238"];
962 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678239"];
963 [label="Debug.Assert((object)assembly != null); 678240"];
964 [label="Debug.Assert((object)assembly != null); 678241"];
965 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 678242"];
966 [label="return true; 678243"];
967 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 678244"];
968 [label="return true; 678245"];
969 [label="var diagnostics = c.GetDiagnostics(); 678246"];
970 [label="param IsSymbolAccessibleCore(Symbol within) 678247"];
971 [label="Debug.Assert((object)symbol != null); 678248"];
972 [label="Debug.Assert((object)within != null); 678249"];
973 [label="Debug.Assert(within.IsDefinition); 678250"];
974 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678251"];
975 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 678252"];
976 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678253"];
977 [label="param IsMemberAccessible(NamedTypeSymbol containingType) 678254"];
978 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 678255"];
979 [label="param IsMemberAccessible(Symbol within) 678256"];
980 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 678257"];
981 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 678258"];
982 [label="param IsMemberAccessible(CSharpCompilation compilation) 678259"];
983 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 678260"];
984 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678261"];
985 [label="Debug.Assert((object)containingType != null); 678262"];
986 [label="Debug.Assert((object)containingType != null); 678263"];
987 [label="failedThroughTypeCheck = false; 678264"];
988 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 678265"];
989 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 678266"];
990 [label="param IsNamedTypeAccessible(Symbol within) 678267"];
991 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 678268"];
992 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678269"];
993 [label="Debug.Assert((object)type != null); 678270"];
994 [label="Debug.Assert((object)type != null); 678271"];
995 [label="var compilation = within.DeclaringCompilation; 678272"];
996 [label="bool unused; 678273"];
997 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 678274"];
998 [label="var containingType = type.ContainingType; 678275"];
999 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678276"];
1000 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678277"];
1001 [label="(object)containingType == null 678278"];
1002 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678279"];
1003 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 678280"];
1004 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 678281"];
1005 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 678282"];
1006 [label="param IsNonNestedTypeAccessible(Symbol within) 678283"];
1007 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678284"];
1008 [label="Debug.Assert((object)assembly != null); 678285"];
1009 [label="Debug.Assert((object)assembly != null); 678286"];
1010 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 678287"];
1011 [label="return true; 678288"];
1012 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 678289"];
1013 [label="return true; 678290"];
1014 [label="var diagnostics = c.GetDiagnostics(); 678291"];
1015 [label="param IsSymbolAccessibleCore(Symbol within) 678292"];
1016 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 678293"];
1017 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 678294"];
1018 [label="Debug.Assert((object)symbol != null); 678295"];
1019 [label="Debug.Assert((object)within != null); 678296"];
1020 [label="Debug.Assert(within.IsDefinition); 678297"];
1021 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678298"];
1022 [label="if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    } 678299"];
1023 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678300"];
1024 [label="param IsMemberAccessible(Accessibility declaredAccessibility) 678301"];
1025 [label="param IsMemberAccessible(Symbol within) 678302"];
1026 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 678303"];
1027 [label="param IsMemberAccessible(out bool failedThroughTypeCheck) 678304"];
1028 [label="param IsMemberAccessible(CSharpCompilation compilation) 678305"];
1029 [label="param IsMemberAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 678306"];
1030 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678307"];
1031 [label="Debug.Assert((object)containingType != null); 678308"];
1032 [label="failedThroughTypeCheck = false; 678309"];
1033 [label="if ((object)containingType == (object)within)\n            {\n                return true;\n            } 678310"];
1034 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 678311"];
1035 [label="param IsNamedTypeAccessible(Symbol within) 678312"];
1036 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 678313"];
1037 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678314"];
1038 [label="Debug.Assert((object)type != null); 678315"];
1039 [label="Debug.Assert((object)type != null); 678316"];
1040 [label="var compilation = within.DeclaringCompilation; 678317"];
1041 [label="bool unused; 678318"];
1042 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 678319"];
1043 [label="var containingType = type.ContainingType; 678320"];
1044 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678321"];
1045 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678322"];
1046 [label="(object)containingType == null 678323"];
1047 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 678324"];
1048 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 678325"];
1049 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 678326"];
1050 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 678327"];
1051 [label="param IsNonNestedTypeAccessible(Symbol within) 678328"];
1052 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 678329"];
1053 [label="Debug.Assert((object)assembly != null); 678330"];
1054 [label="Debug.Assert((object)assembly != null); 678331"];
1055 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 678332"];
1056 [label="return true; 678333"];
1057 [label="if (declaredAccessibility == Accessibility.Public)\n            {\n                return true;\n            } 678334"];
1058 [label="return true; 678335"];
1059 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 678336"];
1060 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 678337"];
1061 [label="Debug.Assert(symbol is object); 678338"];
1062 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 678339"];
1063 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 678340"];
1064 [label="symbol = symbol.ContainingType; 678341"];
1065 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 678342"];
1066 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 678343"];
1067 [label="throughTypeOpt = null; 678344"];
1068 [label="return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics); 678345"];
1069 [label="param IsMemberAccessible(TypeSymbol throughTypeOpt) 678346"];
1070 [label="param TypeConversions(AssemblySymbol corLibrary) 678347"];
1071 [label="param TypeConversions(bool includeNullability = false) 678348"];
1072 [label="param TypeConversions(this) 678349"];
1073 [label="corLibrary 678350"];
1074 [label="0 678351"];
1075 [label="includeNullability 678352"];
1076 [label="null 678353"];
1077 [label="param TypeConversions(this) 678354"];
1078 [label="param TypeConversions(AssemblySymbol corLibrary) 678355"];
1079 [label="param TypeConversions(int currentRecursionDepth) 678356"];
1080 [label="param TypeConversions(bool includeNullability) 678357"];
1081 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 678358"];
1082 [label="param TypeConversions(this) 678359"];
1083 [label="50 678360"];
1084 [label="MaximumRecursionDepth = 50 678361"];
1085 [label="false 678362"];
1086 [label="F = false 678363"];
1087 [label="true 678364"];
1088 [label="T = true 678365"];
1089 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 678366"];
1090 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 678367"];
1091 [label="{ F, F, T, F, T, F, T, F, F, T, T, T } 678368"];
1092 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 678369"];
1093 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 678370"];
1094 [label="{ F, F, T, T, T, T, T, T, F, T, T, T } 678371"];
1095 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 678372"];
1096 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 678373"];
1097 [label="{ F, F, F, F, T, F, T, F, F, T, T, T } 678374"];
1098 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 678375"];
1099 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 678376"];
1100 [label="{ F, F, F, F, T, T, T, T, F, T, T, T } 678377"];
1101 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 678378"];
1102 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 678379"];
1103 [label="{ F, F, F, F, F, F, T, F, F, T, T, T } 678380"];
1104 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 678381"];
1105 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 678382"];
1106 [label="{ F, F, F, F, F, F, T, T, F, T, T, T } 678383"];
1107 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 678384"];
1108 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 678385"];
1109 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 678386"];
1110 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 678387"];
1111 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 678388"];
1112 [label="{ F, F, F, F, F, F, F, F, F, T, T, T } 678389"];
1113 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 678390"];
1114 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 678391"];
1115 [label="{ F, F, F, T, T, T, T, T, F, T, T, T } 678392"];
1116 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 678393"];
1117 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 678394"];
1118 [label="{ F, F, F, F, F, F, F, F, F, F, T, F } 678395"];
1119 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 678396"];
1120 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 678397"];
1121 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 678398"];
1122 [label="{ F, F, F, F, F, F, F, F, F, F, F, F } 678399"];
1123 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678400"];
1124 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678401"];
1125 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678402"];
1126 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678403"];
1127 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678404"];
1128 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678405"];
1129 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678406"];
1130 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678407"];
1131 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678408"];
1132 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678409"];
1133 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678410"];
1134 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678411"];
1135 [label="{\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678412"];
1136 [label="s_implicitNumericConversions =\n        {\n            // to     sb  b  s  us i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, F, T, F, T, F, T, F, F, T, T, T },\n            /*  b */\n         { F, F, T, T, T, T, T, T, F, T, T, T },\n            /*  s */\n         { F, F, F, F, T, F, T, F, F, T, T, T },\n            /* us */\n         { F, F, F, F, T, T, T, T, F, T, T, T },\n            /*  i */\n         { F, F, F, F, F, F, T, F, F, T, T, T },\n            /* ui */\n         { F, F, F, F, F, F, T, T, F, T, T, T },\n            /*  l */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /* ul */\n         { F, F, F, F, F, F, F, F, F, T, T, T },\n            /*  c */\n         { F, F, F, T, T, T, T, T, F, T, T, T },\n            /*  f */\n         { F, F, F, F, F, F, F, F, F, F, T, F },\n            /*  d */\n         { F, F, F, F, F, F, F, F, F, F, F, F },\n            /*  m */\n         { F, F, F, F, F, F, F, F, F, F, F, F }\n        } 678413"];
1137 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 678414"];
1138 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 678415"];
1139 [label="{ F, T, F, T, F, T, F, T, T, F, F, F } 678416"];
1140 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 678417"];
1141 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 678418"];
1142 [label="{ T, F, F, F, F, F, F, F, T, F, F, F } 678419"];
1143 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 678420"];
1144 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 678421"];
1145 [label="{ T, T, F, T, F, T, F, T, T, F, F, F } 678422"];
1146 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 678423"];
1147 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 678424"];
1148 [label="{ T, T, T, F, F, F, F, F, T, F, F, F } 678425"];
1149 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 678426"];
1150 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 678427"];
1151 [label="{ T, T, T, T, F, T, F, T, T, F, F, F } 678428"];
1152 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 678429"];
1153 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 678430"];
1154 [label="{ T, T, T, T, T, F, F, F, T, F, F, F } 678431"];
1155 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 678432"];
1156 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 678433"];
1157 [label="{ T, T, T, T, T, T, F, T, T, F, F, F } 678434"];
1158 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 678435"];
1159 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 678436"];
1160 [label="{ T, T, T, T, T, T, T, F, T, F, F, F } 678437"];
1161 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 678438"];
1162 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 678439"];
1163 [label="{ T, T, T, F, F, F, F, F, F, F, F, F } 678440"];
1164 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 678441"];
1165 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 678442"];
1166 [label="{ T, T, T, T, T, T, T, T, T, F, F, T } 678443"];
1167 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 678444"];
1168 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 678445"];
1169 [label="{ T, T, T, T, T, T, T, T, T, T, F, T } 678446"];
1170 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 678447"];
1171 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 678448"];
1172 [label="{ T, T, T, T, T, T, T, T, T, T, T, F } 678449"];
1173 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678450"];
1174 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678451"];
1175 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678452"];
1176 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678453"];
1177 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678454"];
1178 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678455"];
1179 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678456"];
1180 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678457"];
1181 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678458"];
1182 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678459"];
1183 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678460"];
1184 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678461"];
1185 [label="{\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678462"];
1186 [label="s_explicitNumericConversions =\n        {\n            // to     sb  b  s us  i ui  l ul  c  f  d  m\n            // from\n            /* sb */\n         { F, T, F, T, F, T, F, T, T, F, F, F },\n            /*  b */\n         { T, F, F, F, F, F, F, F, T, F, F, F },\n            /*  s */\n         { T, T, F, T, F, T, F, T, T, F, F, F },\n            /* us */\n         { T, T, T, F, F, F, F, F, T, F, F, F },\n            /*  i */\n         { T, T, T, T, F, T, F, T, T, F, F, F },\n            /* ui */\n         { T, T, T, T, T, F, F, F, T, F, F, F },\n            /*  l */\n         { T, T, T, T, T, T, F, T, T, F, F, F },\n            /* ul */\n         { T, T, T, T, T, T, T, F, T, F, F, F },\n            /*  c */\n         { T, T, T, F, F, F, F, F, F, F, F, F },\n            /*  f */\n         { T, T, T, T, T, T, T, T, T, F, F, T },\n            /*  d */\n         { T, T, T, T, T, T, T, T, T, T, F, T },\n            /*  m */\n         { T, T, T, T, T, T, T, T, T, T, T, F }\n        } 678463"];
1187 [label="corLibrary 678464"];
1188 [label="currentRecursionDepth 678465"];
1189 [label="includeNullability 678466"];
1190 [label="otherNullabilityOpt 678467"];
1191 [label="param TypeConversions(this) 678468"];
1192 [label="param ConversionsBase(AssemblySymbol corLibrary) 678469"];
1193 [label="param ConversionsBase(int currentRecursionDepth) 678470"];
1194 [label="param ConversionsBase(bool includeNullability) 678471"];
1195 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 678472"];
1196 [label="param ConversionsBase(this) 678473"];
1197 [label="corLibrary 678474"];
1198 [label="currentRecursionDepth 678475"];
1199 [label="IncludeNullability 678476"];
1200 [label="_lazyOtherNullability 678477"];
1201 [label="Debug.Assert((object)corLibrary != null); 678478"];
1202 [label="Debug.Assert((object)corLibrary != null); 678479"];
1203 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 678480"];
1204 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 678481"];
1205 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 678482"];
1206 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 678483"];
1207 [label="this.corLibrary 678484"];
1208 [label="this.currentRecursionDepth 678485"];
1209 [label="IncludeNullability 678486"];
1210 [label="_lazyOtherNullability 678487"];
1211 [label="var diagnostics = c.GetDiagnostics(); 678488"];
1212 [label="null 678489"];
1213 [label="null 678490"];
1214 [label="new ConstantFieldsInProgress(null, null) 678491"];
1215 [label="param ConstantFieldsInProgress(SourceFieldSymbol fieldOpt) 678492"];
1216 [label="param ConstantFieldsInProgress(HashSet<SourceFieldSymbolWithSyntaxReference> dependencies) 678493"];
1217 [label="param ConstantFieldsInProgress(this) 678494"];
1218 [label="_fieldOpt 678495"];
1219 [label="_dependencies 678496"];
1220 [label="_fieldOpt 678497"];
1221 [label="_dependencies 678498"];
1222 [label="Empty = new ConstantFieldsInProgress(null, null) 678499"];
1223 [label="get { return (object)_fieldOpt == null; } 678500"];
1224 [label="return (object)_fieldOpt == null; 678501"];
1225 [label="return (object)_fieldOpt == null; 678502"];
1226 [label="var diagnostics = c.GetDiagnostics(); 678503"];
1227 [label="diagnostics.Verify(expected); 678504"];
1228 [label="diagnostics.Verify(expected); 678505"];
1229 [label="diagnostics.Verify(expected) 678506"];
1230 [label="param Verify(this ImmutableArray<Diagnostic> actual) 678507"];
1231 [label="param Verify(params DiagnosticDescription[] expected) 678508"];
1232 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 678509"];
1233 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 678510"];
1234 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 678511"];
1235 [label="param Verify(this IEnumerable<Diagnostic> actual) 678512"];
1236 [label="param Verify(params DiagnosticDescription[] expected) 678513"];
1237 [label="Verify(actual, expected, errorCodeOnly: false); 678514"];
1238 [label="Verify(actual, expected, errorCodeOnly: false); 678515"];
1239 [label="Verify(actual, expected, errorCodeOnly: false); 678516"];
1240 [label="Verify(actual, expected, errorCodeOnly: false) 678517"];
1241 [label="param Verify(IEnumerable<Diagnostic> actual) 678518"];
1242 [label="param Verify(DiagnosticDescription[] expected) 678519"];
1243 [label="param Verify(bool errorCodeOnly) 678520"];
1244 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 678521"];
1245 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 678522"];
1246 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 678523"];
1247 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 678524"];
1248 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 678525"];
1249 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 678526"];
1250 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 678527"];
1251 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 678528"];
1252 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 678529"];
1253 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 678530"];
1254 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 678531"];
1255 [label="{ } 678532"];
1256 [label="None = { } 678533"];
1257 [label="null 678534"];
1258 [label="Any = null 678535"];
1259 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 678536"];
1260 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 678537"];
1261 [label="DiagnosticDescription.GetAssertText(expected, actual) 678538"];
1262 [label="param GetAssertText(DiagnosticDescription[] expected) 678539"];
1263 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 678540"];
1264 [label="const int CSharp = 1; 678541"];
1265 [label="const int VisualBasic = 2; 678542"];
1266 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 678543"];
1267 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 678544"];
1268 [label="actual.Any() && actual.First() is CSDiagnostic 678545"];
1269 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 678546"];
1270 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 678547"];
1271 [label="int indentDepth = (language == CSharp) ? 4 : 1; 678548"];
1272 [label="(language == CSharp) 678549"];
1273 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 678550"];
1274 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 678551"];
1275 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 678552"];
1276 [label="IsSortedOrEmpty(expected) 678553"];
1277 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 678554"];
1278 [label="new LinePositionComparer() 678555"];
1279 [label="param LinePositionComparer(this) 678556"];
1280 [label="Instance = new LinePositionComparer() 678557"];
1281 [label="var comparer = LinePositionComparer.Instance; 678558"];
1282 [label="DiagnosticDescription last = null; 678559"];
1283 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 678560"];
1284 [label="return true; 678561"];
1285 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 678562"];
1286 [label="actual = Sort(actual); 678563"];
1287 [label="Sort(actual) 678564"];
1288 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 678565"];
1289 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 678566"];
1290 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 678567"];
1291 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 678568"];
1292 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 678569"];
1293 [label="var assertText = new StringBuilder(); 678570"];
1294 [label="assertText.AppendLine(); 678571"];
1295 [label="int i; 678572"];
1296 [label="assertText.AppendLine('Expected:'); 678573"];
1297 [label="assertText.AppendLine('Expected:'); 678574"];
1298 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 678575"];
1299 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 678576"];
1300 [label="GetCommaSeparatedLines(assertText, expectedText); 678577"];
1301 [label="GetCommaSeparatedLines(assertText, expectedText); 678578"];
1302 [label="GetCommaSeparatedLines(assertText, expectedText) 678579"];
1303 [label="param GetCommaSeparatedLines(StringBuilder sb) 678580"];
1304 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 678581"];
1305 [label="int n = lines.Count; 678582"];
1306 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 678583"];
1307 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 678584"];
1308 [label="GetCommaSeparatedLines(assertText, expectedText); 678585"];
1309 [label="assertText.AppendLine('Actual:'); 678586"];
1310 [label="assertText.AppendLine('Actual:'); 678587"];
1311 [label="var actualText = ArrayBuilder<string>.GetInstance(); 678588"];
1312 [label="var e = actual.GetEnumerator(); 678589"];
1313 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 678590"];
1314 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 678591"];
1315 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 678592"];
1316 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 678593"];
1317 [label="assertText.AppendLine('Diff:'); 678594"];
1318 [label="assertText.AppendLine('Diff:'); 678595"];
1319 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 678596"];
1320 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 678597"];
1321 [label="new[] { '\\r', '\\n' } 678598"];
1322 [label="'\\r' 678599"];
1323 [label="'\\n' 678600"];
1324 [label="new[] { '\\r', '\\n' } 678601"];
1325 [label="new[] { '\\r', '\\n' } 678602"];
1326 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 678603"];
1327 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 678604"];
1328 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 678605"];
1329 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 678606"];
1330 [label="param DiffReport(IEnumerable<T> expected) 678607"];
1331 [label="param DiffReport(IEnumerable<T> actual) 678608"];
1332 [label="param DiffReport(string separator) 678609"];
1333 [label="param DiffReport(IEqualityComparer<T> comparer = null) 678610"];
1334 [label="param DiffReport(Func<T, string> toString = null) 678611"];
1335 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 678612"];
1336 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 678613"];
1337 [label="(comparer != null) 678614"];
1338 [label="EqualityComparer<T>.Default 678615"];
1339 [label="new LCS<T>(EqualityComparer<T>.Default) 678616"];
1340 [label="param LCS(IEqualityComparer<T> comparer) 678617"];
1341 [label="param LCS(this) 678618"];
1342 [label="1 678619"];
1343 [label="DeleteCost = 1 678620"];
1344 [label="1 678621"];
1345 [label="InsertCost = 1 678622"];
1346 [label="2 678623"];
1347 [label="UpdateCost = 2 678624"];
1348 [label="param LongestCommonSubsequence(this) 678625"];
1349 [label="_comparer 678626"];
1350 [label="_comparer 678627"];
1351 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 678628"];
1352 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 678629"];
1353 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 678630"];
1354 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 678631"];
1355 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 678632"];
1356 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 678633"];
1357 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 678634"];
1358 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 678635"];
1359 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 678636"];
1360 [label="lcs.CalculateDiff(expectedList, actualList, toString) 678637"];
1361 [label="param CalculateDiff(IList<T> sequenceA) 678638"];
1362 [label="param CalculateDiff(IList<T> sequenceB) 678639"];
1363 [label="param CalculateDiff(Func<T, string> toString) 678640"];
1364 [label="param CalculateDiff(this) 678641"];
1365 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 678642"];
1366 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 678643"];
1367 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 678644"];
1368 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 678645"];
1369 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 678646"];
1370 [label="param GetEdits(TSequence sequenceA) 678647"];
1371 [label="param GetEdits(int lengthA) 678648"];
1372 [label="param GetEdits(TSequence sequenceB) 678649"];
1373 [label="param GetEdits(int lengthB) 678650"];
1374 [label="param GetEdits(this) 678651"];
1375 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 678652"];
1376 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 678653"];
1377 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 678654"];
1378 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 678655"];
1379 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 678656"];
1380 [label="param ComputeCostMatrix(TSequence sequenceA) 678657"];
1381 [label="param ComputeCostMatrix(int lengthA) 678658"];
1382 [label="param ComputeCostMatrix(TSequence sequenceB) 678659"];
1383 [label="param ComputeCostMatrix(int lengthB) 678660"];
1384 [label="param ComputeCostMatrix(this) 678661"];
1385 [label="var la = lengthA + 1; 678662"];
1386 [label="var la = lengthA + 1; 678663"];
1387 [label="var lb = lengthB + 1; 678664"];
1388 [label="var lb = lengthB + 1; 678665"];
1389 [label="var d = new int[la, lb]; 678666"];
1390 [label="d[0, 0] = 0; 678667"];
1391 [label="d[0, 0] 678668"];
1392 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 678669"];
1393 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 678670"];
1394 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 678671"];
1395 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 678672"];
1396 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 678673"];
1397 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 678674"];
1398 [label="return d; 678675"];
1399 [label="int i = lengthA; 678676"];
1400 [label="int j = lengthB; 678677"];
1401 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 678678"];
1402 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 678679"];
1403 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 678680"];
1404 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 678681"];
1405 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 678682"];
1406 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 678683"];
1407 [label="param GetEdits(this) 678684"];
1408 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 678685"];
1409 [label="param CalculateDiff(this) 678686"];
1410 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 678687"];
1411 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 678688"];
1412 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 678689"];
1413 [label="actualText.Free(); 678690"];
1414 [label="expectedText.Free(); 678691"];
1415 [label="return assertText.ToString(); 678692"];
1416 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 678693"];
1417 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 678694"];
1418 [label="diagnostics.Verify(expected); 678695"];
1419 [label="VerifyAssemblyIds(c, diagnostics); 678696"];
1420 [label="VerifyAssemblyIds(c, diagnostics); 678697"];
1421 [label="VerifyAssemblyIds(c, diagnostics) 678698"];
1422 [label="param VerifyAssemblyIds(TCompilation c) 678699"];
1423 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 678700"];
1424 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 678701"];
1425 [label="VerifyAssemblyIds(c, diagnostics); 678702"];
1426 [label="return c; 678703"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 236;
239 -> 0;
239 -> 238;
240 -> 239;
240 -> 237;
240 -> 236;
241 -> 240;
241 -> 234;
242 -> 227;
243 -> 229;
243 -> 242;
243 -> 227;
244 -> 241;
244 -> 243;
245 -> 218;
245 -> 215;
246 -> 219;
246 -> 215;
247 -> 221;
247 -> 215;
248 -> 222;
248 -> 215;
249 -> 223;
249 -> 215;
250 -> 215;
251 -> 224;
251 -> 250;
252 -> 244;
252 -> 250;
253 -> 245;
253 -> 250;
254 -> 246;
254 -> 250;
255 -> 247;
255 -> 250;
256 -> 248;
256 -> 250;
257 -> 249;
257 -> 250;
258 -> 251;
258 -> 250;
259 -> 252;
259 -> 250;
260 -> 253;
260 -> 250;
261 -> 254;
261 -> 250;
262 -> 255;
262 -> 250;
263 -> 256;
263 -> 250;
264 -> 257;
264 -> 250;
265 -> 250;
266 -> 265;
266 -> 250;
267 -> 250;
268 -> 258;
268 -> 267;
269 -> 259;
269 -> 267;
270 -> 260;
270 -> 267;
271 -> 261;
271 -> 267;
272 -> 262;
272 -> 267;
273 -> 263;
273 -> 267;
274 -> 264;
274 -> 267;
275 -> 266;
275 -> 267;
276 -> 271;
276 -> 267;
277 -> 273;
277 -> 267;
278 -> 267;
279 -> 276;
279 -> 278;
280 -> 277;
280 -> 278;
281 -> 268;
281 -> 278;
282 -> 281;
282 -> 212;
282 -> 278;
283 -> 282;
284 -> 280;
284 -> 282;
285 -> 279;
285 -> 282;
286 -> 282;
287 -> 283;
287 -> 286;
288 -> 284;
288 -> 286;
289 -> 285;
289 -> 286;
290 -> 283;
290 -> 286;
291 -> 286;
292 -> 289;
292 -> 291;
292 -> 286;
293 -> 0;
294 -> 0;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 297;
299 -> 296;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 297;
302 -> 296;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 297;
305 -> 296;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 297;
308 -> 296;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 297;
311 -> 296;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 297;
314 -> 296;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 297;
317 -> 296;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 297;
320 -> 296;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 297;
323 -> 296;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 297;
326 -> 296;
326 -> 325;
327 -> 326;
328 -> 0;
329 -> 297;
329 -> 296;
329 -> 328;
330 -> 329;
331 -> 297;
334 -> 331;
334 -> 333;
335 -> 332;
335 -> 333;
336 -> 333;
337 -> 334;
337 -> 296;
337 -> 333;
338 -> 333;
339 -> 335;
339 -> 333;
340 -> 336;
340 -> 333;
341 -> 339;
341 -> 340;
341 -> 333;
342 -> 341;
342 -> 338;
342 -> 333;
343 -> 337;
343 -> 338;
343 -> 296;
343 -> 342;
343 -> 341;
343 -> 333;
344 -> 343;
345 -> 0;
346 -> 345;
348 -> 346;
348 -> 347;
349 -> 297;
349 -> 296;
349 -> 348;
350 -> 349;
351 -> 0;
352 -> 351;
353 -> 297;
353 -> 296;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 297;
356 -> 296;
356 -> 355;
357 -> 356;
358 -> 321;
360 -> 359;
361 -> 0;
362 -> 0;
363 -> 0;
365 -> 361;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 360;
367 -> 365;
367 -> 366;
367 -> 359;
368 -> 367;
372 -> 369;
372 -> 370;
372 -> 371;
373 -> 303;
373 -> 296;
373 -> 302;
373 -> 369;
373 -> 372;
374 -> 373;
375 -> 315;
376 -> 324;
377 -> 324;
378 -> 321;
379 -> 0;
380 -> 0;
382 -> 379;
382 -> 381;
383 -> 380;
383 -> 381;
384 -> 381;
385 -> 382;
385 -> 381;
386 -> 383;
386 -> 381;
387 -> 0;
387 -> 381;
388 -> 384;
388 -> 381;
389 -> 381;
390 -> 385;
390 -> 386;
390 -> 387;
390 -> 388;
390 -> 389;
390 -> 381;
391 -> 390;
392 -> 0;
393 -> 0;
395 -> 392;
395 -> 394;
396 -> 393;
396 -> 394;
397 -> 394;
398 -> 395;
398 -> 394;
399 -> 396;
399 -> 394;
400 -> 0;
400 -> 394;
401 -> 397;
401 -> 394;
402 -> 394;
403 -> 398;
403 -> 399;
403 -> 400;
403 -> 401;
403 -> 402;
403 -> 394;
404 -> 403;
406 -> 391;
406 -> 390;
406 -> 405;
407 -> 406;
409 -> 404;
409 -> 403;
409 -> 408;
410 -> 409;
411 -> 0;
412 -> 0;
414 -> 411;
414 -> 413;
415 -> 412;
415 -> 413;
416 -> 413;
417 -> 414;
417 -> 413;
418 -> 415;
418 -> 413;
419 -> 0;
419 -> 413;
420 -> 416;
420 -> 413;
421 -> 413;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 420;
422 -> 421;
422 -> 413;
423 -> 422;
424 -> 0;
425 -> 0;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 426;
430 -> 427;
430 -> 426;
431 -> 428;
431 -> 426;
432 -> 0;
432 -> 426;
433 -> 429;
433 -> 426;
434 -> 426;
435 -> 430;
435 -> 431;
435 -> 432;
435 -> 433;
435 -> 434;
435 -> 426;
436 -> 435;
437 -> 0;
438 -> 0;
440 -> 437;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 439;
443 -> 440;
443 -> 439;
444 -> 441;
444 -> 439;
445 -> 0;
445 -> 439;
446 -> 442;
446 -> 439;
447 -> 439;
448 -> 443;
448 -> 444;
448 -> 445;
448 -> 446;
448 -> 447;
448 -> 439;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
490 -> 391;
490 -> 390;
490 -> 489;
491 -> 490;
493 -> 404;
493 -> 403;
493 -> 492;
494 -> 493;
496 -> 423;
496 -> 422;
496 -> 495;
497 -> 496;
499 -> 436;
499 -> 435;
499 -> 498;
500 -> 499;
501 -> 0;
502 -> 391;
502 -> 390;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 404;
505 -> 403;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 475;
508 -> 474;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 423;
511 -> 422;
511 -> 510;
511 -> 0;
512 -> 511;
513 -> 0;
514 -> 0;
514 -> 513;
515 -> 514;
516 -> 297;
516 -> 292;
517 -> 287;
517 -> 286;
518 -> 0;
518 -> 286;
519 -> 518;
519 -> 290;
519 -> 286;
520 -> 286;
521 -> 517;
521 -> 519;
521 -> 520;
521 -> 0;
521 -> 286;
522 -> 521;
522 -> 286;
523 -> 516;
523 -> 286;
524 -> 288;
524 -> 286;
525 -> 286;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 521;
526 -> 296;
526 -> 286;
527 -> 286;
528 -> 526;
528 -> 527;
529 -> 527;
530 -> 527;
531 -> 528;
531 -> 526;
531 -> 530;
531 -> 527;
532 -> 529;
532 -> 527;
533 -> 527;
534 -> 531;
534 -> 526;
534 -> 530;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 527;
535 -> 527;
536 -> 535;
536 -> 529;
536 -> 527;
537 -> 529;
537 -> 527;
538 -> 527;
539 -> 537;
539 -> 538;
539 -> 529;
539 -> 536;
539 -> 527;
540 -> 528;
540 -> 527;
541 -> 540;
541 -> 283;
541 -> 282;
542 -> 283;
542 -> 267;
543 -> 267;
544 -> 270;
544 -> 543;
544 -> 267;
545 -> 542;
545 -> 544;
546 -> 544;
547 -> 545;
547 -> 546;
547 -> 283;
547 -> 541;
547 -> 526;
547 -> 544;
548 -> 547;
548 -> 544;
549 -> 391;
549 -> 548;
550 -> 0;
550 -> 267;
551 -> 275;
551 -> 267;
552 -> 272;
552 -> 542;
552 -> 269;
552 -> 549;
552 -> 267;
553 -> 552;
553 -> 267;
554 -> 267;
555 -> 553;
555 -> 554;
556 -> 0;
556 -> 554;
557 -> 556;
558 -> 267;
559 -> 552;
559 -> 283;
559 -> 541;
559 -> 526;
559 -> 240;
559 -> 0;
559 -> 390;
559 -> 237;
559 -> 267;
560 -> 267;
561 -> 560;
562 -> 559;
562 -> 561;
562 -> 267;
563 -> 562;
563 -> 267;
564 -> 267;
565 -> 563;
565 -> 564;
566 -> 565;
566 -> 562;
566 -> 564;
567 -> 566;
567 -> 562;
567 -> 564;
568 -> 564;
569 -> 566;
569 -> 568;
569 -> 562;
569 -> 564;
570 -> 0;
570 -> 564;
571 -> 569;
571 -> 570;
571 -> 564;
572 -> 274;
572 -> 571;
572 -> 267;
573 -> 562;
573 -> 267;
574 -> 1;
575 -> 573;
575 -> 574;
576 -> 214;
576 -> 574;
577 -> 574;
579 -> 0;
580 -> 0;
581 -> 0;
584 -> 578;
584 -> 583;
585 -> 579;
585 -> 583;
586 -> 580;
586 -> 583;
587 -> 581;
587 -> 583;
588 -> 582;
588 -> 583;
589 -> 583;
590 -> 589;
590 -> 583;
591 -> 589;
591 -> 583;
592 -> 589;
592 -> 583;
593 -> 583;
594 -> 585;
594 -> 593;
594 -> 583;
595 -> 586;
595 -> 0;
595 -> 583;
596 -> 587;
596 -> 0;
596 -> 583;
597 -> 584;
597 -> 589;
597 -> 583;
598 -> 585;
598 -> 589;
598 -> 583;
599 -> 586;
599 -> 589;
599 -> 583;
600 -> 588;
600 -> 589;
600 -> 583;
601 -> 587;
601 -> 589;
601 -> 583;
602 -> 583;
603 -> 577;
603 -> 575;
603 -> 571;
603 -> 574;
604 -> 603;
604 -> 577;
605 -> 604;
605 -> 603;
605 -> 577;
606 -> 577;
607 -> 605;
607 -> 603;
607 -> 606;
607 -> 577;
608 -> 604;
608 -> 603;
608 -> 606;
608 -> 577;
609 -> 602;
609 -> 607;
610 -> 603;
610 -> 609;
610 -> 597;
610 -> 600;
610 -> 598;
610 -> 599;
610 -> 601;
610 -> 0;
610 -> 574;
611 -> 603;
611 -> 577;
612 -> 603;
612 -> 577;
613 -> 577;
614 -> 611;
614 -> 610;
614 -> 613;
615 -> 612;
615 -> 614;
615 -> 613;
616 -> 615;
616 -> 613;
617 -> 0;
617 -> 616;
618 -> 615;
618 -> 613;
619 -> 611;
619 -> 613;
620 -> 612;
620 -> 617;
620 -> 618;
620 -> 619;
620 -> 613;
621 -> 0;
621 -> 620;
622 -> 621;
623 -> 612;
623 -> 622;
624 -> 623;
624 -> 602;
624 -> 622;
625 -> 624;
626 -> 621;
627 -> 0;
627 -> 621;
628 -> 627;
629 -> 603;
629 -> 577;
630 -> 603;
630 -> 577;
631 -> 629;
631 -> 630;
631 -> 577;
632 -> 603;
632 -> 631;
632 -> 627;
632 -> 574;
634 -> 633;
636 -> 635;
638 -> 637;
641 -> 640;
642 -> 0;
643 -> 0;
644 -> 0;
645 -> 644;
647 -> 642;
647 -> 643;
647 -> 645;
647 -> 646;
648 -> 647;
650 -> 649;
652 -> 651;
654 -> 653;
656 -> 655;
657 -> 603;
657 -> 577;
658 -> 603;
658 -> 577;
659 -> 603;
659 -> 577;
660 -> 603;
660 -> 577;
661 -> 603;
661 -> 577;
662 -> 577;
663 -> 660;
663 -> 662;
663 -> 577;
664 -> 661;
664 -> 662;
664 -> 577;
665 -> 663;
665 -> 664;
665 -> 577;
666 -> 658;
666 -> 577;
667 -> 657;
667 -> 577;
668 -> 658;
668 -> 577;
669 -> 659;
669 -> 577;
670 -> 660;
670 -> 577;
671 -> 661;
671 -> 577;
672 -> 666;
672 -> 577;
673 -> 577;
674 -> 667;
674 -> 673;
675 -> 668;
675 -> 673;
676 -> 669;
676 -> 673;
677 -> 670;
677 -> 673;
678 -> 671;
678 -> 673;
679 -> 672;
679 -> 673;
680 -> 673;
681 -> 678;
681 -> 680;
681 -> 673;
682 -> 677;
682 -> 680;
682 -> 673;
683 -> 681;
683 -> 682;
683 -> 673;
684 -> 673;
685 -> 674;
685 -> 673;
686 -> 675;
686 -> 673;
687 -> 684;
687 -> 673;
688 -> 679;
688 -> 673;
689 -> 673;
690 -> 685;
690 -> 689;
691 -> 686;
691 -> 689;
692 -> 687;
692 -> 689;
693 -> 688;
693 -> 689;
694 -> 691;
694 -> 689;
695 -> 694;
695 -> 690;
695 -> 632;
695 -> 689;
696 -> 689;
697 -> 695;
697 -> 696;
698 -> 695;
698 -> 696;
699 -> 697;
699 -> 696;
700 -> 697;
700 -> 695;
700 -> 696;
701 -> 696;
702 -> 697;
702 -> 695;
702 -> 696;
703 -> 697;
703 -> 695;
703 -> 696;
704 -> 703;
704 -> 696;
705 -> 696;
706 -> 701;
706 -> 705;
706 -> 689;
707 -> 701;
707 -> 696;
708 -> 701;
708 -> 696;
709 -> 707;
709 -> 696;
710 -> 707;
710 -> 696;
711 -> 707;
711 -> 696;
712 -> 707;
712 -> 696;
713 -> 712;
713 -> 696;
714 -> 712;
714 -> 713;
715 -> 690;
715 -> 694;
715 -> 695;
715 -> 705;
715 -> 689;
716 -> 689;
717 -> 715;
717 -> 716;
717 -> 689;
718 -> 715;
718 -> 717;
719 -> 717;
720 -> 718;
720 -> 719;
721 -> 718;
721 -> 719;
722 -> 720;
722 -> 719;
723 -> 720;
723 -> 718;
723 -> 719;
724 -> 719;
725 -> 720;
725 -> 718;
725 -> 719;
726 -> 720;
726 -> 718;
726 -> 719;
727 -> 726;
727 -> 719;
728 -> 724;
728 -> 719;
729 -> 724;
729 -> 719;
730 -> 728;
730 -> 719;
731 -> 728;
731 -> 719;
732 -> 728;
732 -> 719;
733 -> 728;
733 -> 719;
734 -> 733;
734 -> 719;
735 -> 717;
736 -> 719;
736 -> 735;
736 -> 717;
737 -> 715;
737 -> 689;
738 -> 673;
739 -> 719;
739 -> 738;
739 -> 673;
740 -> 737;
740 -> 673;
741 -> 719;
741 -> 696;
742 -> 719;
742 -> 696;
743 -> 741;
743 -> 696;
744 -> 741;
744 -> 719;
744 -> 696;
745 -> 741;
745 -> 719;
745 -> 696;
746 -> 741;
746 -> 719;
746 -> 696;
747 -> 746;
747 -> 696;
748 -> 724;
749 -> 724;
750 -> 748;
750 -> 724;
751 -> 748;
751 -> 724;
752 -> 748;
752 -> 724;
753 -> 748;
753 -> 724;
754 -> 753;
754 -> 724;
755 -> 719;
756 -> 724;
756 -> 755;
756 -> 719;
757 -> 719;
757 -> 689;
758 -> 724;
758 -> 738;
758 -> 673;
759 -> 757;
759 -> 673;
760 -> 724;
761 -> 724;
761 -> 689;
762 -> 761;
762 -> 673;
763 -> 603;
763 -> 577;
764 -> 603;
764 -> 577;
765 -> 763;
765 -> 577;
766 -> 763;
766 -> 724;
766 -> 577;
767 -> 577;
768 -> 763;
768 -> 724;
768 -> 577;
769 -> 763;
769 -> 724;
769 -> 577;
770 -> 769;
770 -> 577;
771 -> 577;
772 -> 767;
772 -> 771;
772 -> 574;
773 -> 767;
773 -> 577;
774 -> 767;
774 -> 577;
775 -> 773;
775 -> 577;
776 -> 773;
776 -> 577;
777 -> 773;
777 -> 577;
778 -> 773;
778 -> 577;
779 -> 778;
779 -> 577;
780 -> 767;
780 -> 577;
781 -> 767;
781 -> 577;
782 -> 767;
782 -> 577;
783 -> 780;
783 -> 577;
784 -> 577;
785 -> 783;
785 -> 784;
785 -> 577;
786 -> 767;
786 -> 577;
787 -> 767;
787 -> 577;
788 -> 767;
788 -> 577;
789 -> 767;
789 -> 577;
790 -> 577;
791 -> 786;
791 -> 577;
792 -> 787;
792 -> 577;
793 -> 789;
793 -> 577;
794 -> 790;
794 -> 577;
795 -> 788;
795 -> 577;
796 -> 577;
797 -> 577;
798 -> 791;
798 -> 797;
799 -> 792;
799 -> 797;
800 -> 793;
800 -> 797;
801 -> 794;
801 -> 797;
802 -> 792;
802 -> 797;
803 -> 795;
803 -> 797;
804 -> 796;
804 -> 797;
805 -> 797;
806 -> 798;
806 -> 805;
806 -> 797;
807 -> 797;
808 -> 799;
808 -> 807;
808 -> 797;
809 -> 799;
809 -> 797;
810 -> 799;
810 -> 797;
811 -> 797;
812 -> 798;
812 -> 797;
813 -> 798;
813 -> 0;
813 -> 797;
814 -> 798;
814 -> 813;
815 -> 798;
815 -> 813;
816 -> 799;
816 -> 813;
817 -> 800;
817 -> 813;
818 -> 811;
818 -> 813;
819 -> 802;
819 -> 813;
820 -> 803;
820 -> 813;
821 -> 813;
822 -> 813;
823 -> 815;
823 -> 822;
824 -> 815;
824 -> 822;
825 -> 816;
825 -> 822;
826 -> 817;
826 -> 822;
827 -> 818;
827 -> 822;
828 -> 819;
828 -> 822;
829 -> 820;
829 -> 822;
830 -> 821;
830 -> 822;
831 -> 825;
831 -> 822;
832 -> 822;
833 -> 823;
833 -> 832;
833 -> 822;
834 -> 822;
835 -> 823;
835 -> 825;
835 -> 822;
836 -> 823;
836 -> 822;
837 -> 825;
837 -> 822;
838 -> 829;
838 -> 822;
839 -> 830;
839 -> 822;
840 -> 822;
841 -> 836;
841 -> 840;
842 -> 837;
842 -> 840;
843 -> 838;
843 -> 840;
844 -> 839;
844 -> 840;
845 -> 842;
845 -> 840;
846 -> 840;
847 -> 841;
847 -> 846;
847 -> 840;
848 -> 842;
848 -> 840;
849 -> 840;
850 -> 841;
850 -> 840;
851 -> 841;
851 -> 840;
852 -> 840;
853 -> 851;
853 -> 852;
853 -> 840;
854 -> 853;
854 -> 840;
855 -> 842;
855 -> 854;
856 -> 854;
857 -> 854;
857 -> 856;
858 -> 854;
858 -> 856;
859 -> 855;
859 -> 856;
860 -> 859;
860 -> 856;
861 -> 856;
862 -> 857;
862 -> 861;
862 -> 856;
863 -> 858;
863 -> 856;
864 -> 863;
865 -> 824;
865 -> 0;
865 -> 822;
866 -> 865;
867 -> 843;
867 -> 866;
867 -> 574;
868 -> 843;
868 -> 577;
869 -> 843;
869 -> 577;
870 -> 868;
870 -> 577;
871 -> 868;
871 -> 577;
872 -> 868;
872 -> 577;
873 -> 868;
873 -> 577;
874 -> 873;
874 -> 577;
875 -> 873;
875 -> 874;
876 -> 778;
876 -> 779;
877 -> 843;
877 -> 577;
878 -> 843;
878 -> 577;
879 -> 877;
879 -> 797;
880 -> 878;
880 -> 797;
881 -> 877;
881 -> 797;
882 -> 843;
882 -> 805;
882 -> 797;
883 -> 879;
883 -> 807;
883 -> 797;
884 -> 879;
884 -> 797;
885 -> 879;
885 -> 797;
886 -> 843;
887 -> 811;
887 -> 843;
888 -> 843;
889 -> 843;
890 -> 879;
890 -> 843;
891 -> 880;
891 -> 843;
892 -> 887;
892 -> 843;
893 -> 881;
893 -> 843;
894 -> 843;
895 -> 890;
895 -> 843;
896 -> 843;
897 -> 888;
897 -> 896;
897 -> 843;
898 -> 843;
899 -> 888;
899 -> 890;
899 -> 843;
900 -> 888;
900 -> 843;
901 -> 890;
901 -> 843;
902 -> 894;
902 -> 843;
903 -> 901;
903 -> 843;
904 -> 843;
905 -> 900;
905 -> 904;
905 -> 843;
906 -> 901;
906 -> 843;
907 -> 843;
908 -> 900;
908 -> 843;
909 -> 900;
909 -> 843;
910 -> 843;
911 -> 909;
911 -> 910;
911 -> 843;
912 -> 911;
912 -> 843;
913 -> 901;
913 -> 912;
914 -> 912;
915 -> 912;
915 -> 914;
916 -> 912;
916 -> 914;
917 -> 913;
917 -> 914;
918 -> 917;
918 -> 914;
919 -> 914;
920 -> 915;
920 -> 919;
920 -> 914;
921 -> 916;
921 -> 914;
922 -> 921;
923 -> 889;
923 -> 0;
923 -> 843;
924 -> 923;
925 -> 877;
925 -> 924;
925 -> 574;
926 -> 877;
926 -> 577;
927 -> 926;
927 -> 797;
928 -> 926;
928 -> 797;
929 -> 877;
929 -> 805;
929 -> 797;
930 -> 877;
931 -> 811;
931 -> 877;
932 -> 877;
933 -> 877;
934 -> 879;
934 -> 877;
935 -> 927;
935 -> 877;
936 -> 931;
936 -> 877;
937 -> 928;
937 -> 877;
938 -> 877;
939 -> 934;
939 -> 877;
940 -> 877;
941 -> 932;
941 -> 940;
941 -> 877;
942 -> 877;
943 -> 932;
943 -> 934;
943 -> 877;
944 -> 932;
944 -> 877;
945 -> 934;
945 -> 877;
946 -> 938;
946 -> 877;
947 -> 945;
947 -> 877;
948 -> 877;
949 -> 944;
949 -> 948;
949 -> 877;
950 -> 945;
950 -> 877;
951 -> 877;
952 -> 944;
952 -> 877;
953 -> 944;
953 -> 877;
954 -> 877;
955 -> 953;
955 -> 954;
955 -> 877;
956 -> 955;
956 -> 877;
957 -> 945;
957 -> 956;
958 -> 956;
959 -> 956;
959 -> 958;
960 -> 956;
960 -> 958;
961 -> 957;
961 -> 958;
962 -> 961;
962 -> 958;
963 -> 958;
964 -> 959;
964 -> 963;
964 -> 958;
965 -> 960;
965 -> 958;
966 -> 965;
967 -> 933;
967 -> 0;
967 -> 877;
968 -> 967;
969 -> 926;
969 -> 968;
969 -> 574;
970 -> 926;
970 -> 797;
971 -> 926;
971 -> 805;
971 -> 797;
972 -> 970;
972 -> 807;
972 -> 797;
973 -> 970;
973 -> 797;
974 -> 970;
974 -> 797;
975 -> 926;
976 -> 811;
976 -> 926;
977 -> 926;
978 -> 926;
979 -> 970;
979 -> 926;
980 -> 927;
980 -> 926;
981 -> 976;
981 -> 926;
982 -> 928;
982 -> 926;
983 -> 926;
984 -> 979;
984 -> 926;
985 -> 926;
986 -> 977;
986 -> 985;
986 -> 926;
987 -> 926;
988 -> 977;
988 -> 979;
988 -> 926;
989 -> 977;
989 -> 926;
990 -> 979;
990 -> 926;
991 -> 983;
991 -> 926;
992 -> 990;
992 -> 926;
993 -> 926;
994 -> 989;
994 -> 993;
994 -> 926;
995 -> 990;
995 -> 926;
996 -> 926;
997 -> 989;
997 -> 926;
998 -> 989;
998 -> 926;
999 -> 926;
1000 -> 998;
1000 -> 999;
1000 -> 926;
1001 -> 1000;
1001 -> 926;
1002 -> 990;
1002 -> 1001;
1003 -> 1001;
1004 -> 1001;
1004 -> 1003;
1005 -> 1001;
1005 -> 1003;
1006 -> 1002;
1006 -> 1003;
1007 -> 1006;
1007 -> 1003;
1008 -> 1003;
1009 -> 1004;
1009 -> 1008;
1009 -> 1003;
1010 -> 1005;
1010 -> 1003;
1011 -> 1010;
1012 -> 978;
1012 -> 0;
1012 -> 926;
1013 -> 1012;
1014 -> 977;
1014 -> 1013;
1014 -> 574;
1015 -> 977;
1015 -> 797;
1016 -> 977;
1016 -> 797;
1017 -> 977;
1017 -> 797;
1018 -> 977;
1018 -> 805;
1018 -> 797;
1019 -> 1015;
1019 -> 807;
1019 -> 797;
1020 -> 1015;
1020 -> 797;
1021 -> 1015;
1021 -> 797;
1022 -> 977;
1023 -> 811;
1023 -> 977;
1024 -> 977;
1025 -> 1015;
1025 -> 977;
1026 -> 1016;
1026 -> 977;
1027 -> 1023;
1027 -> 977;
1028 -> 1017;
1028 -> 977;
1029 -> 977;
1030 -> 1025;
1030 -> 977;
1031 -> 977;
1032 -> 977;
1033 -> 977;
1033 -> 1025;
1034 -> 977;
1035 -> 1025;
1035 -> 977;
1036 -> 1029;
1036 -> 977;
1037 -> 1035;
1037 -> 977;
1038 -> 977;
1039 -> 1034;
1039 -> 1038;
1039 -> 977;
1040 -> 1035;
1040 -> 977;
1041 -> 977;
1042 -> 1034;
1042 -> 977;
1043 -> 1034;
1043 -> 977;
1044 -> 977;
1045 -> 1043;
1045 -> 1044;
1045 -> 977;
1046 -> 1045;
1046 -> 977;
1047 -> 1035;
1047 -> 1046;
1048 -> 1046;
1049 -> 1046;
1049 -> 1048;
1050 -> 1046;
1050 -> 1048;
1051 -> 1047;
1051 -> 1048;
1052 -> 1051;
1052 -> 1048;
1053 -> 1048;
1054 -> 1049;
1054 -> 1053;
1054 -> 1048;
1055 -> 1050;
1055 -> 1048;
1056 -> 1055;
1057 -> 1024;
1057 -> 0;
1057 -> 977;
1058 -> 1057;
1059 -> 977;
1059 -> 577;
1060 -> 977;
1060 -> 577;
1061 -> 1059;
1061 -> 577;
1062 -> 1059;
1062 -> 577;
1063 -> 1059;
1063 -> 577;
1064 -> 1059;
1064 -> 577;
1065 -> 1064;
1065 -> 577;
1066 -> 1064;
1066 -> 1065;
1067 -> 814;
1068 -> 1067;
1068 -> 813;
1069 -> 1068;
1069 -> 822;
1070 -> 843;
1070 -> 577;
1071 -> 843;
1071 -> 577;
1072 -> 843;
1072 -> 577;
1073 -> 1070;
1073 -> 577;
1074 -> 577;
1075 -> 1071;
1075 -> 577;
1076 -> 577;
1077 -> 577;
1078 -> 1073;
1078 -> 1077;
1079 -> 1074;
1079 -> 1077;
1080 -> 1075;
1080 -> 1077;
1081 -> 1076;
1081 -> 1077;
1082 -> 1072;
1082 -> 1077;
1084 -> 1083;
1086 -> 1085;
1088 -> 1087;
1090 -> 1086;
1090 -> 1089;
1091 -> 1088;
1091 -> 1089;
1093 -> 1086;
1093 -> 1092;
1094 -> 1088;
1094 -> 1092;
1096 -> 1086;
1096 -> 1095;
1097 -> 1088;
1097 -> 1095;
1099 -> 1086;
1099 -> 1098;
1100 -> 1088;
1100 -> 1098;
1102 -> 1086;
1102 -> 1101;
1103 -> 1088;
1103 -> 1101;
1105 -> 1086;
1105 -> 1104;
1106 -> 1088;
1106 -> 1104;
1108 -> 1086;
1108 -> 1107;
1109 -> 1088;
1109 -> 1107;
1111 -> 1086;
1111 -> 1110;
1112 -> 1088;
1112 -> 1110;
1114 -> 1086;
1114 -> 1113;
1115 -> 1088;
1115 -> 1113;
1117 -> 1086;
1117 -> 1116;
1118 -> 1088;
1118 -> 1116;
1120 -> 1086;
1120 -> 1119;
1122 -> 1086;
1122 -> 1121;
1124 -> 1089;
1124 -> 1123;
1125 -> 1092;
1125 -> 1123;
1126 -> 1095;
1126 -> 1123;
1127 -> 1098;
1127 -> 1123;
1128 -> 1101;
1128 -> 1123;
1129 -> 1104;
1129 -> 1123;
1130 -> 1107;
1130 -> 1123;
1131 -> 1110;
1131 -> 1123;
1132 -> 1113;
1132 -> 1123;
1133 -> 1116;
1133 -> 1123;
1134 -> 1119;
1134 -> 1123;
1135 -> 1121;
1135 -> 1123;
1136 -> 1123;
1138 -> 1086;
1138 -> 1137;
1139 -> 1088;
1139 -> 1137;
1141 -> 1088;
1141 -> 1140;
1142 -> 1086;
1142 -> 1140;
1144 -> 1088;
1144 -> 1143;
1145 -> 1086;
1145 -> 1143;
1147 -> 1088;
1147 -> 1146;
1148 -> 1086;
1148 -> 1146;
1150 -> 1088;
1150 -> 1149;
1151 -> 1086;
1151 -> 1149;
1153 -> 1088;
1153 -> 1152;
1154 -> 1086;
1154 -> 1152;
1156 -> 1088;
1156 -> 1155;
1157 -> 1086;
1157 -> 1155;
1159 -> 1088;
1159 -> 1158;
1160 -> 1086;
1160 -> 1158;
1162 -> 1088;
1162 -> 1161;
1163 -> 1086;
1163 -> 1161;
1165 -> 1088;
1165 -> 1164;
1166 -> 1086;
1166 -> 1164;
1168 -> 1088;
1168 -> 1167;
1169 -> 1086;
1169 -> 1167;
1171 -> 1088;
1171 -> 1170;
1172 -> 1086;
1172 -> 1170;
1174 -> 1137;
1174 -> 1173;
1175 -> 1140;
1175 -> 1173;
1176 -> 1143;
1176 -> 1173;
1177 -> 1146;
1177 -> 1173;
1178 -> 1149;
1178 -> 1173;
1179 -> 1152;
1179 -> 1173;
1180 -> 1155;
1180 -> 1173;
1181 -> 1158;
1181 -> 1173;
1182 -> 1161;
1182 -> 1173;
1183 -> 1164;
1183 -> 1173;
1184 -> 1167;
1184 -> 1173;
1185 -> 1170;
1185 -> 1173;
1186 -> 1173;
1187 -> 1078;
1187 -> 1077;
1188 -> 1079;
1188 -> 1077;
1189 -> 1080;
1189 -> 1077;
1190 -> 1081;
1190 -> 1077;
1191 -> 1077;
1192 -> 1187;
1192 -> 1191;
1193 -> 1188;
1193 -> 1191;
1194 -> 1189;
1194 -> 1191;
1195 -> 1190;
1195 -> 1191;
1196 -> 1082;
1196 -> 1191;
1197 -> 1196;
1197 -> 1191;
1198 -> 1196;
1198 -> 1191;
1199 -> 1196;
1199 -> 1191;
1200 -> 1196;
1200 -> 1191;
1201 -> 1191;
1202 -> 1192;
1202 -> 1201;
1202 -> 1191;
1203 -> 1191;
1204 -> 1195;
1204 -> 1203;
1204 -> 1191;
1205 -> 1191;
1206 -> 1195;
1206 -> 1205;
1206 -> 1191;
1207 -> 1192;
1207 -> 1196;
1207 -> 1191;
1208 -> 1193;
1208 -> 1196;
1208 -> 1191;
1209 -> 1194;
1209 -> 1196;
1209 -> 1191;
1210 -> 1195;
1210 -> 1196;
1210 -> 1191;
1211 -> 843;
1211 -> 1207;
1211 -> 1208;
1211 -> 1209;
1211 -> 1210;
1211 -> 574;
1215 -> 1212;
1215 -> 1214;
1216 -> 1213;
1216 -> 1214;
1217 -> 1214;
1218 -> 1217;
1218 -> 1214;
1219 -> 1217;
1219 -> 1214;
1220 -> 1215;
1220 -> 1217;
1220 -> 1214;
1221 -> 1216;
1221 -> 1217;
1221 -> 1214;
1222 -> 1214;
1223 -> 843;
1223 -> 577;
1224 -> 577;
1225 -> 1223;
1225 -> 1224;
1225 -> 577;
1226 -> 575;
1226 -> 577;
1226 -> 609;
1226 -> 631;
1226 -> 771;
1226 -> 785;
1226 -> 866;
1226 -> 924;
1226 -> 968;
1226 -> 1013;
1226 -> 1058;
1226 -> 843;
1226 -> 1225;
1226 -> 724;
1226 -> 1211;
1226 -> 574;
1227 -> 1226;
1227 -> 574;
1228 -> 576;
1228 -> 574;
1229 -> 574;
1230 -> 1227;
1230 -> 1229;
1231 -> 1228;
1231 -> 1229;
1232 -> 1230;
1232 -> 1229;
1233 -> 1231;
1233 -> 1229;
1234 -> 1229;
1235 -> 1232;
1235 -> 1234;
1236 -> 1233;
1236 -> 1234;
1237 -> 1235;
1237 -> 1234;
1238 -> 1236;
1238 -> 1234;
1239 -> 1234;
1240 -> 1234;
1241 -> 1237;
1241 -> 1240;
1242 -> 1238;
1242 -> 1240;
1243 -> 1239;
1243 -> 1240;
1244 -> 1240;
1245 -> 1242;
1245 -> 1244;
1245 -> 1240;
1246 -> 1242;
1246 -> 1240;
1247 -> 1242;
1247 -> 1240;
1248 -> 1241;
1248 -> 1240;
1249 -> 1243;
1249 -> 1246;
1249 -> 1247;
1249 -> 1240;
1250 -> 1248;
1250 -> 1249;
1250 -> 1240;
1251 -> 1242;
1251 -> 1240;
1252 -> 1240;
1253 -> 1250;
1253 -> 1252;
1253 -> 1240;
1254 -> 1240;
1256 -> 1255;
1258 -> 1257;
1259 -> 1242;
1259 -> 1240;
1260 -> 1241;
1260 -> 1240;
1261 -> 1240;
1262 -> 1259;
1262 -> 1261;
1263 -> 1260;
1263 -> 1261;
1264 -> 1261;
1265 -> 1261;
1266 -> 1263;
1266 -> 1261;
1267 -> 1266;
1267 -> 1250;
1267 -> 1261;
1268 -> 1267;
1268 -> 1261;
1269 -> 1265;
1269 -> 1268;
1270 -> 1269;
1270 -> 1264;
1270 -> 1261;
1271 -> 1269;
1271 -> 1264;
1271 -> 1261;
1272 -> 1271;
1272 -> 1261;
1273 -> 1262;
1273 -> 1261;
1274 -> 1262;
1274 -> 1261;
1275 -> 1262;
1275 -> 1261;
1276 -> 1261;
1277 -> 1275;
1277 -> 1276;
1279 -> 1278;
1280 -> 1278;
1281 -> 1280;
1281 -> 1276;
1282 -> 1276;
1283 -> 1277;
1283 -> 1276;
1284 -> 1276;
1285 -> 1284;
1285 -> 1261;
1286 -> 1263;
1286 -> 1285;
1287 -> 1285;
1288 -> 1286;
1288 -> 1287;
1289 -> 1288;
1289 -> 1287;
1290 -> 1287;
1291 -> 1280;
1291 -> 1287;
1292 -> 1289;
1292 -> 1290;
1292 -> 1291;
1292 -> 1250;
1292 -> 1287;
1293 -> 1261;
1294 -> 1293;
1294 -> 1261;
1295 -> 1261;
1296 -> 1261;
1297 -> 1293;
1297 -> 1296;
1297 -> 1294;
1297 -> 1261;
1298 -> 1261;
1299 -> 1262;
1299 -> 1261;
1300 -> 1293;
1300 -> 1261;
1301 -> 1298;
1301 -> 1261;
1302 -> 1261;
1303 -> 1300;
1303 -> 1302;
1304 -> 1301;
1304 -> 1302;
1305 -> 1304;
1305 -> 1298;
1305 -> 1302;
1306 -> 1302;
1307 -> 1306;
1307 -> 1305;
1307 -> 1302;
1308 -> 1261;
1309 -> 1261;
1310 -> 1293;
1310 -> 1309;
1310 -> 1297;
1310 -> 1261;
1311 -> 1261;
1312 -> 1292;
1312 -> 1261;
1313 -> 1261;
1314 -> 1312;
1314 -> 1261;
1315 -> 1261;
1316 -> 1313;
1316 -> 1315;
1316 -> 1261;
1317 -> 1261;
1318 -> 1293;
1318 -> 1317;
1318 -> 1310;
1318 -> 1261;
1319 -> 1298;
1319 -> 1261;
1320 -> 1311;
1320 -> 1261;
1324 -> 1322;
1324 -> 1321;
1325 -> 1323;
1325 -> 1321;
1326 -> 1321;
1327 -> 0;
1327 -> 1261;
1328 -> 1261;
1329 -> 1261;
1330 -> 1319;
1330 -> 1329;
1331 -> 1320;
1331 -> 1329;
1332 -> 1327;
1332 -> 1329;
1333 -> 1328;
1333 -> 1329;
1334 -> 1328;
1334 -> 1329;
1335 -> 1329;
1336 -> 1333;
1336 -> 1335;
1336 -> 1329;
1337 -> 1336;
1337 -> 1329;
1338 -> 0;
1340 -> 1338;
1340 -> 1339;
1341 -> 1339;
1343 -> 1342;
1345 -> 1344;
1347 -> 1346;
1348 -> 1341;
1349 -> 1341;
1349 -> 1339;
1350 -> 1340;
1350 -> 1341;
1350 -> 1339;
1351 -> 1339;
1352 -> 1329;
1353 -> 1352;
1353 -> 1334;
1353 -> 1329;
1354 -> 1330;
1354 -> 1329;
1355 -> 1331;
1355 -> 1329;
1356 -> 1332;
1356 -> 1329;
1357 -> 1354;
1357 -> 1329;
1358 -> 1355;
1358 -> 1329;
1359 -> 1353;
1359 -> 1329;
1360 -> 1329;
1361 -> 1357;
1361 -> 1360;
1362 -> 1358;
1362 -> 1360;
1363 -> 1359;
1363 -> 1360;
1364 -> 1337;
1364 -> 1360;
1365 -> 1361;
1365 -> 1360;
1366 -> 1361;
1366 -> 1354;
1366 -> 1360;
1367 -> 1362;
1367 -> 1360;
1368 -> 1362;
1368 -> 1355;
1368 -> 1360;
1369 -> 1360;
1370 -> 1365;
1370 -> 1369;
1371 -> 1366;
1371 -> 1369;
1372 -> 1367;
1372 -> 1369;
1373 -> 1368;
1373 -> 1369;
1374 -> 1364;
1374 -> 1369;
1375 -> 1370;
1375 -> 1369;
1376 -> 1371;
1376 -> 1369;
1377 -> 1372;
1377 -> 1369;
1378 -> 1373;
1378 -> 1369;
1379 -> 1369;
1380 -> 1375;
1380 -> 1379;
1381 -> 1376;
1381 -> 1379;
1382 -> 1377;
1382 -> 1379;
1383 -> 1378;
1383 -> 1379;
1384 -> 1374;
1384 -> 1379;
1385 -> 1379;
1386 -> 1381;
1386 -> 1385;
1386 -> 1379;
1387 -> 1379;
1388 -> 1383;
1388 -> 1387;
1388 -> 1379;
1389 -> 1386;
1389 -> 1388;
1389 -> 1379;
1390 -> 1379;
1391 -> 1390;
1391 -> 1389;
1391 -> 1379;
1392 -> 1379;
1393 -> 1392;
1393 -> 1381;
1393 -> 1379;
1394 -> 1379;
1395 -> 1394;
1395 -> 1383;
1395 -> 1379;
1396 -> 1379;
1397 -> 1396;
1397 -> 1381;
1397 -> 1379;
1398 -> 1389;
1398 -> 1379;
1399 -> 1371;
1399 -> 1369;
1400 -> 1373;
1400 -> 1369;
1401 -> 1369;
1402 -> 1399;
1402 -> 1401;
1402 -> 1369;
1403 -> 1369;
1404 -> 1399;
1404 -> 1403;
1404 -> 1369;
1405 -> 1369;
1406 -> 1400;
1406 -> 1405;
1406 -> 1369;
1407 -> 1369;
1408 -> 1407;
1408 -> 1360;
1409 -> 1360;
1410 -> 1409;
1410 -> 1329;
1411 -> 1356;
1411 -> 1410;
1411 -> 1329;
1412 -> 1293;
1412 -> 1411;
1412 -> 1318;
1412 -> 1261;
1413 -> 1311;
1413 -> 1261;
1414 -> 1298;
1414 -> 1261;
1415 -> 1293;
1415 -> 1412;
1415 -> 1261;
1416 -> 1415;
1416 -> 1240;
1417 -> 1229;
1418 -> 574;
1419 -> 575;
1419 -> 574;
1420 -> 1226;
1420 -> 574;
1421 -> 574;
1422 -> 1419;
1422 -> 1421;
1423 -> 1420;
1423 -> 1421;
1424 -> 1423;
1424 -> 1421;
1425 -> 574;
1426 -> 575;
1426 -> 574;
}