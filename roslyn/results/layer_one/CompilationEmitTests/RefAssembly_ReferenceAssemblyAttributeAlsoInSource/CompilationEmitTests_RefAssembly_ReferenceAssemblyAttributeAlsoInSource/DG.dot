digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 844787"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 844788"];
3 [label="param CompilationEmitTests(this) 844789"];
4 [label="param EmitMetadataTestBase(this) 844790"];
5 [label="param CSharpTestBase(this) 844791"];
6 [label="param CommonTestBase(this) 844792"];
7 [label="param TestBase(this) 844793"];
8 [label="_temp 844794"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 844795"];
10 [label="param RefAssembly_ReferenceAssemblyAttributeAlsoInSource(this) 844796"];
11 [label="var emitRefAssembly = EmitOptions.Default.WithEmitMetadataOnly(true).WithIncludePrivateMembers(false); 844797"];
12 [label="Action<PEAssembly> assemblyValidator = assembly =>\n            {\n                var reader = assembly.GetMetadataReader();\n                var attributes = reader.GetAssemblyDefinition().GetCustomAttributes();\n                AssertEx.Equal(new string[] {\n                        'MemberReference:Void System.Runtime.CompilerServices.CompilationRelaxationsAttribute..ctor(Int32)',\n                        'MemberReference:Void System.Runtime.CompilerServices.RuntimeCompatibilityAttribute..ctor()',\n                        'MemberReference:Void System.Diagnostics.DebuggableAttribute..ctor(DebuggingModes)',\n                        'MemberReference:Void System.Runtime.CompilerServices.ReferenceAssemblyAttribute..ctor()'\n                    },\n                    attributes.Select(a => MetadataReaderUtils.Dump(reader, reader.GetCustomAttribute(a).Constructor)));\n            }; 844798"];
13 [label="string source = @'[assembly:System.Runtime.CompilerServices.ReferenceAssembly()]'; 844799"];
14 [label="CompileAndVerify(source, emitOptions: emitRefAssembly, assemblyValidator: assemblyValidator); 844800"];
15 [label="source 844801"];
16 [label="param operator(string source) 844802"];
17 [label="source 844803"];
18 [label="new CSharpTestSource(source) 844804"];
19 [label="param CSharpTestSource(object value) 844805"];
20 [label="param CSharpTestSource(this) 844806"];
21 [label="Value 844807"];
22 [label="CompileAndVerify(source, emitOptions: emitRefAssembly, assemblyValidator: assemblyValidator); 844808"];
23 [label="CompileAndVerify(source, emitOptions: emitRefAssembly, assemblyValidator: assemblyValidator); 844809"];
24 [label="CompileAndVerify(source, emitOptions: emitRefAssembly, assemblyValidator: assemblyValidator); 844810"];
25 [label="CompileAndVerify(source, emitOptions: emitRefAssembly, assemblyValidator: assemblyValidator); 844811"];
26 [label="CompileAndVerify(source, emitOptions: emitRefAssembly, assemblyValidator: assemblyValidator) 844812"];
27 [label="param CompileAndVerify(CSharpTestSource source) 844813"];
28 [label="param CompileAndVerify(IEnumerable<MetadataReference> references = null) 844814"];
29 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 844815"];
30 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 844816"];
31 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 844817"];
32 [label="param CompileAndVerify(Action<PEAssembly> assemblyValidator = null) 844818"];
33 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 844819"];
34 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 844820"];
35 [label="param CompileAndVerify(string expectedOutput = null) 844821"];
36 [label="param CompileAndVerify(int? expectedReturnCode = null) 844822"];
37 [label="param CompileAndVerify(string[] args = null) 844823"];
38 [label="param CompileAndVerify(CSharpCompilationOptions options = null) 844824"];
39 [label="param CompileAndVerify(CSharpParseOptions parseOptions = null) 844825"];
40 [label="param CompileAndVerify(EmitOptions emitOptions = null) 844826"];
41 [label="param CompileAndVerify(TargetFramework targetFramework = TargetFramework.Standard) 844827"];
42 [label="param CompileAndVerify(Verification verify = Verification.Passes) 844828"];
43 [label="param CompileAndVerify(this) 844829"];
44 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 844830"];
45 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 844831"];
46 [label="(expectedOutput != null) 844832"];
47 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 844833"];
48 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 844834"];
49 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 844835"];
50 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 844836"];
51 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 844837"];
52 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 844838"];
53 [label="GetUniqueName() 844839"];
54 [label="return Guid.NewGuid().ToString('D'); 844840"];
55 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 844841"];
56 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 844842"];
57 [label="CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()) 844843"];
58 [label="param CreateCompilation(CSharpTestSource source) 844844"];
59 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 844845"];
60 [label="param CreateCompilation(CSharpCompilationOptions options = null) 844846"];
61 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 844847"];
62 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 844848"];
63 [label="param CreateCompilation(string assemblyName = '') 844849"];
64 [label="param CreateCompilation(string sourceFileName = '') 844850"];
65 [label="param CreateCompilation(bool skipUsesIsNullable = false) 844851"];
66 [label="source 844852"];
67 [label="targetFramework 844853"];
68 [label="references 844854"];
69 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 844855"];
70 [label="param GetReferences(TargetFramework tf) 844856"];
71 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 844857"];
72 [label="var references = GetReferences(tf); 844858"];
73 [label="GetReferences(tf) 844859"];
74 [label="param GetReferences(TargetFramework targetFramework) 844860"];
75 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 844861"];
76 [label="StandardReferences 844862"];
77 [label="RuntimeUtilities.IsCoreClrRuntime 844863"];
78 [label="Mscorlib46ExtendedReferences 844864"];
79 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 844865"];
80 [label="TestBase.ValueTupleRef 844866"];
81 [label="TestReferences.NetFx.ValueTuple.tuplelib 844867"];
82 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 844868"];
83 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 844869"];
84 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 844870"];
85 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 844871"];
86 [label="return references; 844872"];
87 [label="options 844873"];
88 [label="parseOptions 844874"];
89 [label="assemblyName 844875"];
90 [label="sourceFileName 844876"];
91 [label="skipUsesIsNullable 844877"];
92 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 844878"];
93 [label="param CreateEmptyCompilation(CSharpTestSource source) 844879"];
94 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 844880"];
95 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 844881"];
96 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 844882"];
97 [label="param CreateEmptyCompilation(string assemblyName = '') 844883"];
98 [label="param CreateEmptyCompilation(string sourceFileName = '') 844884"];
99 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 844885"];
100 [label="source 844886"];
101 [label="references 844887"];
102 [label="options 844888"];
103 [label="parseOptions 844889"];
104 [label="assemblyName 844890"];
105 [label="sourceFileName 844891"];
106 [label="skipUsesIsNullable 844892"];
107 [label="null 844893"];
108 [label="experimentalFeature: null 844894"];
109 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 844895"];
110 [label="param CreateCompilationCore(CSharpTestSource source) 844896"];
111 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 844897"];
112 [label="param CreateCompilationCore(CSharpCompilationOptions options) 844898"];
113 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 844899"];
114 [label="param CreateCompilationCore(string assemblyName) 844900"];
115 [label="param CreateCompilationCore(string sourceFileName) 844901"];
116 [label="param CreateCompilationCore(bool skipUsesIsNullable) 844902"];
117 [label="param CreateCompilationCore(MessageID? experimentalFeature) 844903"];
118 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 844904"];
119 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 844905"];
120 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 844906"];
121 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 844907"];
122 [label="param GetSyntaxTrees(string sourceFileName = '') 844908"];
123 [label="param GetSyntaxTrees(this) 844909"];
124 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 844910"];
125 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 844911"];
126 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 844912"];
127 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 844913"];
128 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 844914"];
129 [label="param Parse(string text) 844915"];
130 [label="param Parse(string filename = '') 844916"];
131 [label="param Parse(CSharpParseOptions options = null) 844917"];
132 [label="param Parse(Encoding encoding = null) 844918"];
133 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 844919"];
134 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 844920"];
135 [label="options = TestOptions.Regular; 844921"];
136 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 844922"];
137 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 844923"];
138 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 844924"];
139 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 844925"];
140 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 844926"];
141 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 844927"];
142 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 844928"];
143 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 844929"];
144 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 844930"];
145 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 844931"];
146 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 844932"];
147 [label="param CheckSerializable(SyntaxTree tree) 844933"];
148 [label="var stream = new MemoryStream(); 844934"];
149 [label="var root = tree.GetRoot(); 844935"];
150 [label="var root = tree.GetRoot(); 844936"];
151 [label="root.SerializeTo(stream); 844937"];
152 [label="root.SerializeTo(stream); 844938"];
153 [label="root.SerializeTo(stream); 844939"];
154 [label="stream.Position = 0; 844940"];
155 [label="stream.Position 844941"];
156 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 844942"];
157 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 844943"];
158 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 844944"];
159 [label="return tree; 844945"];
160 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 844946"];
161 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 844947"];
162 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 844948"];
163 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 844949"];
164 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 844950"];
165 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 844951"];
166 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 844952"];
167 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 844953"];
168 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 844954"];
169 [label="param ValidateIOperations(Func<Compilation> createCompilation) 844955"];
170 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 844956"];
171 [label="return; 844957"];
172 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 844958"];
173 [label="OutputKind.ConsoleApplication 844959"];
174 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 844960"];
175 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 844961"];
176 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 844962"];
177 [label="OutputKind.DynamicallyLinkedLibrary 844963"];
178 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 844964"];
179 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 844965"];
180 [label="true 844966"];
181 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 844967"];
182 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 844968"];
183 [label="var compilation = createCompilationLambda(); 844969"];
184 [label="var compilation = createCompilationLambda(); 844970"];
185 [label="param Create(string? assemblyName) 844971"];
186 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 844972"];
187 [label="param Create(IEnumerable<MetadataReference>? references = null) 844973"];
188 [label="param Create(CSharpCompilationOptions? options = null) 844974"];
189 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 844975"];
190 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 844976"];
191 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 844977"];
192 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 844978"];
193 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 844979"];
194 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 844980"];
195 [label="param Create(string? assemblyName) 844981"];
196 [label="param Create(CSharpCompilationOptions options) 844982"];
197 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 844983"];
198 [label="param Create(IEnumerable<MetadataReference>? references) 844984"];
199 [label="param Create(CSharpCompilation? previousSubmission) 844985"];
200 [label="param Create(Type? returnType) 844986"];
201 [label="param Create(Type? hostObjectType) 844987"];
202 [label="param Create(bool isSubmission) 844988"];
203 [label="RoslynDebug.Assert(options != null); 844989"];
204 [label="RoslynDebug.Assert(options != null); 844990"];
205 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 844991"];
206 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 844992"];
207 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 844993"];
208 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 844994"];
209 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 844995"];
210 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 844996"];
211 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 844997"];
212 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 844998"];
213 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 844999"];
214 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 845000"];
215 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 845001"];
216 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 845002"];
217 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 845003"];
218 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 845004"];
219 [label="param SyntaxAndDeclarationManager(string scriptClassName) 845005"];
220 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 845006"];
221 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 845007"];
222 [label="param SyntaxAndDeclarationManager(bool isSubmission) 845008"];
223 [label="param SyntaxAndDeclarationManager(State state) 845009"];
224 [label="param SyntaxAndDeclarationManager(this) 845010"];
225 [label="externalSyntaxTrees 845011"];
226 [label="scriptClassName 845012"];
227 [label="resolver 845013"];
228 [label="messageProvider 845014"];
229 [label="isSubmission 845015"];
230 [label="param SyntaxAndDeclarationManager(this) 845016"];
231 [label="param SyntaxAndDeclarationManager(this) 845017"];
232 [label="_lazyState 845018"];
233 [label="_lazyState 845019"];
234 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 845020"];
235 [label="param CSharpCompilation(string? assemblyName) 845021"];
236 [label="param CSharpCompilation(CSharpCompilationOptions options) 845022"];
237 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 845023"];
238 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 845024"];
239 [label="param CSharpCompilation(Type? submissionReturnType) 845025"];
240 [label="param CSharpCompilation(Type? hostObjectType) 845026"];
241 [label="param CSharpCompilation(bool isSubmission) 845027"];
242 [label="param CSharpCompilation(ReferenceManager? referenceManager) 845028"];
243 [label="param CSharpCompilation(bool reuseReferenceManager) 845029"];
244 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 845030"];
245 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 845031"];
246 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 845032"];
247 [label="param CSharpCompilation(this) 845033"];
248 [label="assemblyName 845034"];
249 [label="options 845035"];
250 [label="references 845036"];
251 [label="previousSubmission 845037"];
252 [label="submissionReturnType 845038"];
253 [label="hostObjectType 845039"];
254 [label="isSubmission 845040"];
255 [label="referenceManager 845041"];
256 [label="reuseReferenceManager 845042"];
257 [label="syntaxAndDeclarations 845043"];
258 [label="syntaxAndDeclarations.ExternalSyntaxTrees 845044"];
259 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 845045"];
260 [label="semanticModelProvider 845046"];
261 [label="eventQueue 845047"];
262 [label="param CSharpCompilation(this) 845048"];
263 [label="param CSharpCompilation(string? assemblyName) 845049"];
264 [label="param CSharpCompilation(CSharpCompilationOptions options) 845050"];
265 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 845051"];
266 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 845052"];
267 [label="param CSharpCompilation(Type? submissionReturnType) 845053"];
268 [label="param CSharpCompilation(Type? hostObjectType) 845054"];
269 [label="param CSharpCompilation(bool isSubmission) 845055"];
270 [label="param CSharpCompilation(ReferenceManager? referenceManager) 845056"];
271 [label="param CSharpCompilation(bool reuseReferenceManager) 845057"];
272 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 845058"];
273 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 845059"];
274 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 845060"];
275 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 845061"];
276 [label="param CSharpCompilation(this) 845062"];
277 [label="assemblyName 845063"];
278 [label="references 845064"];
279 [label="features 845065"];
280 [label="isSubmission 845066"];
281 [label="semanticModelProvider 845067"];
282 [label="eventQueue 845068"];
283 [label="param CSharpCompilation(this) 845069"];
284 [label="param CSharpCompilation(this) 845070"];
285 [label="_options 845071"];
286 [label="_globalImports 845072"];
287 [label="_previousSubmissionImports 845073"];
288 [label="_globalNamespaceAlias 845074"];
289 [label="_scriptClass 845075"];
290 [label="_lazyHostObjectTypeSymbol 845076"];
291 [label="_lazyImportInfos 845077"];
292 [label="_conversions 845078"];
293 [label="_anonymousTypeManager 845079"];
294 [label="_lazyGlobalNamespace 845080"];
295 [label="builtInOperators 845081"];
296 [label="_lazyAssemblySymbol 845082"];
297 [label="_referenceManager 845083"];
298 [label="_syntaxAndDeclarations 845084"];
299 [label="_lazyEntryPoint 845085"];
300 [label="_lazyEmitNullablePublicOnly 845086"];
301 [label="_lazyCompilationUnitCompletedTrees 845087"];
302 [label="NullableAnalysisData 845088"];
303 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 845089"];
304 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 845090"];
305 [label="_externAliasTargets 845091"];
306 [label="_moduleInitializerMethods 845092"];
307 [label="_binderFactories 845093"];
308 [label="_ignoreAccessibilityBinderFactories 845094"];
309 [label="_lazyDeclarationDiagnostics 845095"];
310 [label="_declarationDiagnosticsFrozen 845096"];
311 [label="new DiagnosticBag() 845097"];
312 [label="_additionalCodegenWarnings = new DiagnosticBag() 845098"];
313 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 845099"];
314 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 845100"];
315 [label="WellKnownMemberSignatureComparer 845101"];
316 [label="_options 845102"];
317 [label="this.builtInOperators = new BuiltInOperators(this); 845103"];
318 [label="this.builtInOperators = new BuiltInOperators(this); 845104"];
319 [label="new BuiltInOperators(this) 845105"];
320 [label="param BuiltInOperators(CSharpCompilation compilation) 845106"];
321 [label="param BuiltInOperators(this) 845107"];
322 [label="_compilation 845108"];
323 [label="_builtInUnaryOperators 845109"];
324 [label="_builtInOperators 845110"];
325 [label="_compilation 845111"];
326 [label="this.builtInOperators 845112"];
327 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 845113"];
328 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 845114"];
329 [label="_scriptClass 845115"];
330 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 845116"];
331 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 845117"];
332 [label="_globalImports 845118"];
333 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 845119"];
334 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 845120"];
335 [label="_previousSubmissionImports 845121"];
336 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 845122"];
337 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 845123"];
338 [label="_globalNamespaceAlias 845124"];
339 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 845125"];
340 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 845126"];
341 [label="_anonymousTypeManager 845127"];
342 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 845128"];
343 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 845129"];
344 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 845130"];
345 [label="LanguageVersion? result = null; 845131"];
346 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 845132"];
347 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 845133"];
348 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 845134"];
349 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 845135"];
350 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 845136"];
351 [label="this.LanguageVersion 845137"];
352 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 845138"];
353 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845139"];
354 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845140"];
355 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845141"];
356 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845142"];
357 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845143"];
358 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845144"];
359 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 845145"];
360 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 845146"];
361 [label="this.Options 845147"];
362 [label="get\n            {\n                return _options;\n            } 845148"];
363 [label="return _options; 845149"];
364 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 845150"];
365 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 845151"];
366 [label="_referenceManager 845152"];
367 [label="_syntaxAndDeclarations 845153"];
368 [label="Debug.Assert(_lazyAssemblySymbol is null); 845154"];
369 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 845155"];
370 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 845156"];
371 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 845157"];
372 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 845158"];
373 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 845159"];
374 [label="compilation.AddSyntaxTrees(syntaxTrees) 845160"];
375 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 845161"];
376 [label="param AddSyntaxTrees(this) 845162"];
377 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 845163"];
378 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 845164"];
379 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 845165"];
380 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 845166"];
381 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 845167"];
382 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 845168"];
383 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 845169"];
384 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 845170"];
385 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 845171"];
386 [label="bool reuseReferenceManager = true; 845172"];
387 [label="int i = 0; 845173"];
388 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 845174"];
389 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 845175"];
390 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 845176"];
391 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 845177"];
392 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 845178"];
393 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 845179"];
394 [label="externalSyntaxTrees.Add(tree); 845180"];
395 [label="externalSyntaxTrees.Add(tree); 845181"];
396 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 845182"];
397 [label="i++; 845183"];
398 [label="externalSyntaxTrees.Free(); 845184"];
399 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 845185"];
400 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 845186"];
401 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 845187"];
402 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 845188"];
403 [label="param AddSyntaxTrees(this) 845189"];
404 [label="var scriptClassName = this.ScriptClassName; 845190"];
405 [label="var resolver = this.Resolver; 845191"];
406 [label="var messageProvider = this.MessageProvider; 845192"];
407 [label="var isSubmission = this.IsSubmission; 845193"];
408 [label="var state = _lazyState; 845194"];
409 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 845195"];
410 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 845196"];
411 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 845197"];
412 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 845198"];
413 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 845199"];
414 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 845200"];
415 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 845201"];
416 [label="param WithExternalSyntaxTrees(this) 845202"];
417 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 845203"];
418 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 845204"];
419 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 845205"];
420 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 845206"];
421 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 845207"];
422 [label="param SyntaxAndDeclarationManager(string scriptClassName) 845208"];
423 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 845209"];
424 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 845210"];
425 [label="param SyntaxAndDeclarationManager(bool isSubmission) 845211"];
426 [label="param SyntaxAndDeclarationManager(State state) 845212"];
427 [label="param SyntaxAndDeclarationManager(this) 845213"];
428 [label="param SyntaxAndDeclarationManager(this) 845214"];
429 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 845215"];
430 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 845216"];
431 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 845217"];
432 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 845218"];
433 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 845219"];
434 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 845220"];
435 [label="param Update(ReferenceManager referenceManager) 845221"];
436 [label="param Update(bool reuseReferenceManager) 845222"];
437 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 845223"];
438 [label="param Update(this) 845224"];
439 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 845225"];
440 [label="this.PreviousSubmission 845226"];
441 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 845227"];
442 [label="ScriptCompilationInfo 845228"];
443 [label="ScriptCompilationInfo?.PreviousScriptCompilation 845229"];
444 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 845230"];
445 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 845231"];
446 [label="this.SubmissionReturnType 845232"];
447 [label="=> ScriptCompilationInfo 845233"];
448 [label="ScriptCompilationInfo 845234"];
449 [label="this.HostObjectType 845235"];
450 [label="=> ScriptCompilationInfo 845236"];
451 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 845237"];
452 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 845238"];
453 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 845239"];
454 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 845240"];
455 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 845241"];
456 [label="param CSharpCompilation(string? assemblyName) 845242"];
457 [label="param CSharpCompilation(CSharpCompilationOptions options) 845243"];
458 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 845244"];
459 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 845245"];
460 [label="param CSharpCompilation(Type? submissionReturnType) 845246"];
461 [label="param CSharpCompilation(Type? hostObjectType) 845247"];
462 [label="param CSharpCompilation(bool isSubmission) 845248"];
463 [label="param CSharpCompilation(ReferenceManager? referenceManager) 845249"];
464 [label="param CSharpCompilation(bool reuseReferenceManager) 845250"];
465 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 845251"];
466 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 845252"];
467 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 845253"];
468 [label="param CSharpCompilation(this) 845254"];
469 [label="previousSubmission 845255"];
470 [label="submissionReturnType 845256"];
471 [label="hostObjectType 845257"];
472 [label="syntaxAndDeclarations.ExternalSyntaxTrees 845258"];
473 [label="eventQueue 845259"];
474 [label="param CSharpCompilation(this) 845260"];
475 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 845261"];
476 [label="param CSharpCompilation(Type? submissionReturnType) 845262"];
477 [label="param CSharpCompilation(Type? hostObjectType) 845263"];
478 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 845264"];
479 [label="param CSharpCompilation(this) 845265"];
480 [label="eventQueue 845266"];
481 [label="param CSharpCompilation(this) 845267"];
482 [label="_options 845268"];
483 [label="_globalImports 845269"];
484 [label="_previousSubmissionImports 845270"];
485 [label="_globalNamespaceAlias 845271"];
486 [label="_scriptClass 845272"];
487 [label="_lazyHostObjectTypeSymbol 845273"];
488 [label="_lazyImportInfos 845274"];
489 [label="_conversions 845275"];
490 [label="_anonymousTypeManager 845276"];
491 [label="_lazyGlobalNamespace 845277"];
492 [label="builtInOperators 845278"];
493 [label="_lazyAssemblySymbol 845279"];
494 [label="_referenceManager 845280"];
495 [label="_syntaxAndDeclarations 845281"];
496 [label="_lazyEntryPoint 845282"];
497 [label="_lazyEmitNullablePublicOnly 845283"];
498 [label="_lazyCompilationUnitCompletedTrees 845284"];
499 [label="NullableAnalysisData 845285"];
500 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 845286"];
501 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 845287"];
502 [label="_externAliasTargets 845288"];
503 [label="_moduleInitializerMethods 845289"];
504 [label="_binderFactories 845290"];
505 [label="_ignoreAccessibilityBinderFactories 845291"];
506 [label="_lazyDeclarationDiagnostics 845292"];
507 [label="_declarationDiagnosticsFrozen 845293"];
508 [label="new DiagnosticBag() 845294"];
509 [label="_additionalCodegenWarnings = new DiagnosticBag() 845295"];
510 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 845296"];
511 [label="this.builtInOperators = new BuiltInOperators(this); 845297"];
512 [label="this.builtInOperators = new BuiltInOperators(this); 845298"];
513 [label="new BuiltInOperators(this) 845299"];
514 [label="param BuiltInOperators(CSharpCompilation compilation) 845300"];
515 [label="param BuiltInOperators(this) 845301"];
516 [label="_compilation 845302"];
517 [label="_builtInUnaryOperators 845303"];
518 [label="_builtInOperators 845304"];
519 [label="_compilation 845305"];
520 [label="this.builtInOperators 845306"];
521 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 845307"];
522 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 845308"];
523 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 845309"];
524 [label="LanguageVersion? result = null; 845310"];
525 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 845311"];
526 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 845312"];
527 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 845313"];
528 [label="result = version; 845314"];
529 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 845315"];
530 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845316"];
531 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845317"];
532 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845318"];
533 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845319"];
534 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845320"];
535 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 845321"];
536 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 845322"];
537 [label="referenceManager.AssertCanReuseForCompilation(this); 845323"];
538 [label="referenceManager.AssertCanReuseForCompilation(this); 845324"];
539 [label="_referenceManager 845325"];
540 [label="Debug.Assert(_lazyAssemblySymbol is null); 845326"];
541 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 845327"];
542 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 845328"];
543 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 845329"];
544 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 845330"];
545 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 845331"];
546 [label="return compilation; 845332"];
547 [label="var compilation = createCompilationLambda(); 845333"];
548 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 845334"];
549 [label="IsNullableEnabled(compilation) 845335"];
550 [label="param IsNullableEnabled(CSharpCompilation compilation) 845336"];
551 [label="compilation.SyntaxTrees 845337"];
552 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 845338"];
553 [label="_syntaxAndDeclarations.GetLazyState() 845339"];
554 [label="param GetLazyState(this) 845340"];
555 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 845341"];
556 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 845342"];
557 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 845343"];
558 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 845344"];
559 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 845345"];
560 [label="param CreateState(string scriptClassName) 845346"];
561 [label="param CreateState(SourceReferenceResolver resolver) 845347"];
562 [label="param CreateState(CommonMessageProvider messageProvider) 845348"];
563 [label="param CreateState(bool isSubmission) 845349"];
564 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 845350"];
565 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 845351"];
566 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 845352"];
567 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 845353"];
568 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 845354"];
569 [label="var declTable = DeclarationTable.Empty; 845355"];
570 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 845356"];
571 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 845357"];
572 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 845358"];
573 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 845359"];
574 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 845360"];
575 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 845361"];
576 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 845362"];
577 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 845363"];
578 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 845364"];
579 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 845365"];
580 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 845366"];
581 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 845367"];
582 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 845368"];
583 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 845369"];
584 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 845370"];
585 [label="param AppendAllSyntaxTrees(string scriptClassName) 845371"];
586 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 845372"];
587 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 845373"];
588 [label="param AppendAllSyntaxTrees(bool isSubmission) 845374"];
589 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 845375"];
590 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 845376"];
591 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 845377"];
592 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 845378"];
593 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 845379"];
594 [label="var sourceCodeKind = tree.Options.Kind; 845380"];
595 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 845381"];
596 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 845382"];
597 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 845383"];
598 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 845384"];
599 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 845385"];
600 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 845386"];
601 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 845387"];
602 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 845388"];
603 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 845389"];
604 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 845390"];
605 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 845391"];
606 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 845392"];
607 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 845393"];
608 [label="declMapBuilder.Add(tree, lazyRoot); 845394"];
609 [label="declMapBuilder.Add(tree, lazyRoot); 845395"];
610 [label="declMapBuilder.Add(tree, lazyRoot); 845396"];
611 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 845397"];
612 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 845398"];
613 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 845399"];
614 [label="treesBuilder.Add(tree); 845400"];
615 [label="treesBuilder.Add(tree); 845401"];
616 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 845402"];
617 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 845403"];
618 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 845404"];
619 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 845405"];
620 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 845406"];
621 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 845407"];
622 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 845408"];
623 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 845409"];
624 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 845410"];
625 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 845411"];
626 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 845412"];
627 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 845413"];
628 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 845414"];
629 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 845415"];
630 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 845416"];
631 [label="param State(DeclarationTable declarationTable) 845417"];
632 [label="param State(this) 845418"];
633 [label="OrdinalMap 845419"];
634 [label="LoadDirectiveMap 845420"];
635 [label="LoadedSyntaxTreeMap 845421"];
636 [label="RootNamespaces 845422"];
637 [label="DeclarationTable 845423"];
638 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 845424"];
639 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 845425"];
640 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 845426"];
641 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 845427"];
642 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 845428"];
643 [label="this.SyntaxTrees 845429"];
644 [label="this.OrdinalMap 845430"];
645 [label="this.LoadDirectiveMap 845431"];
646 [label="this.LoadedSyntaxTreeMap 845432"];
647 [label="this.RootNamespaces 845433"];
648 [label="this.DeclarationTable 845434"];
649 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 845435"];
650 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 845436"];
651 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 845437"];
652 [label="return _lazyState; 845438"];
653 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 845439"];
654 [label="var trees = compilation.SyntaxTrees; 845440"];
655 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 845441"];
656 [label="var options = (CSharpParseOptions)trees[0].Options; 845442"];
657 [label="var options = (CSharpParseOptions)trees[0].Options; 845443"];
658 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 845444"];
659 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 845445"];
660 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 845446"];
661 [label="return compilation; 845447"];
662 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845448"];
663 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845449"];
664 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845450"];
665 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845451"];
666 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845452"];
667 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845453"];
668 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845454"];
669 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845455"];
670 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845456"];
671 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845457"];
672 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845458"];
673 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845459"];
674 [label="CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 845460"];
675 [label="param CompileAndVerify(Compilation compilation) 845461"];
676 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 845462"];
677 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 845463"];
678 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 845464"];
679 [label="param CompileAndVerify(Action<PEAssembly> validator = null) 845465"];
680 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 845466"];
681 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 845467"];
682 [label="param CompileAndVerify(string expectedOutput = null) 845468"];
683 [label="param CompileAndVerify(int? expectedReturnCode = null) 845469"];
684 [label="param CompileAndVerify(string[] args = null) 845470"];
685 [label="param CompileAndVerify(EmitOptions emitOptions = null) 845471"];
686 [label="param CompileAndVerify(Verification verify = Verification.Passes) 845472"];
687 [label="param CompileAndVerify(this) 845473"];
688 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845474"];
689 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845475"];
690 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845476"];
691 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845477"];
692 [label="translate(sourceSymbolValidator) 845478"];
693 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 845479"];
694 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 845480"];
695 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 845481"];
696 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 845482"];
697 [label="return null; 845483"];
698 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845484"];
699 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845485"];
700 [label="translate(symbolValidator) 845486"];
701 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 845487"];
702 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 845488"];
703 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 845489"];
704 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 845490"];
705 [label="return null; 845491"];
706 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845492"];
707 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845493"];
708 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845494"];
709 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845495"];
710 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845496"];
711 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 845497"];
712 [label="CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 845498"];
713 [label="param CompileAndVerifyCommon(Compilation compilation) 845499"];
714 [label="param CompileAndVerifyCommon(IEnumerable<ResourceDescription> manifestResources = null) 845500"];
715 [label="param CompileAndVerifyCommon(IEnumerable<ModuleData> dependencies = null) 845501"];
716 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> sourceSymbolValidator = null) 845502"];
717 [label="param CompileAndVerifyCommon(Action<PEAssembly> assemblyValidator = null) 845503"];
718 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> symbolValidator = null) 845504"];
719 [label="param CompileAndVerifyCommon(SignatureDescription[] expectedSignatures = null) 845505"];
720 [label="param CompileAndVerifyCommon(string expectedOutput = null) 845506"];
721 [label="param CompileAndVerifyCommon(int? expectedReturnCode = null) 845507"];
722 [label="param CompileAndVerifyCommon(string[] args = null) 845508"];
723 [label="param CompileAndVerifyCommon(EmitOptions emitOptions = null) 845509"];
724 [label="param CompileAndVerifyCommon(Verification verify = Verification.Passes) 845510"];
725 [label="param CompileAndVerifyCommon(this) 845511"];
726 [label="CustomAssert.NotNull(compilation); 845512"];
727 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 845513"];
728 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 845514"];
729 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 845515"];
730 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 845516"];
731 [label="CompilationVerifier result = null; 845517"];
732 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845518"];
733 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845519"];
734 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845520"];
735 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845521"];
736 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845522"];
737 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845523"];
738 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845524"];
739 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845525"];
740 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845526"];
741 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845527"];
742 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845528"];
743 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 845529"];
744 [label="Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify) 845530"];
745 [label="param Emit(Compilation compilation) 845531"];
746 [label="param Emit(IEnumerable<ModuleData> dependencies) 845532"];
747 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 845533"];
748 [label="param Emit(SignatureDescription[] expectedSignatures) 845534"];
749 [label="param Emit(string expectedOutput) 845535"];
750 [label="param Emit(int? expectedReturnCode) 845536"];
751 [label="param Emit(string[] args) 845537"];
752 [label="param Emit(Action<PEAssembly> assemblyValidator) 845538"];
753 [label="param Emit(Action<IModuleSymbol> symbolValidator) 845539"];
754 [label="param Emit(EmitOptions emitOptions) 845540"];
755 [label="param Emit(Verification verify) 845541"];
756 [label="param Emit(this) 845542"];
757 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 845543"];
758 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 845544"];
759 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 845545"];
760 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 845546"];
761 [label="new CompilationVerifier(compilation, VisualizeRealIL, dependencies) 845547"];
762 [label="param CompilationVerifier(Compilation compilation) 845548"];
763 [label="param CompilationVerifier(Func<IModuleSymbol, CompilationTestData.MethodData, IReadOnlyDictionary<int, string>, bool, string> visualizeRealIL = null) 845549"];
764 [label="param CompilationVerifier(IEnumerable<ModuleData> dependencies = null) 845550"];
765 [label="param CompilationVerifier(this) 845551"];
766 [label="_compilation 845552"];
767 [label="_testData 845553"];
768 [label="_dependencies 845554"];
769 [label="_lazyModuleSymbol 845555"];
770 [label="_allModuleData 845556"];
771 [label="_visualizeRealIL 845557"];
772 [label="_compilation 845558"];
773 [label="_dependencies 845559"];
774 [label="_visualizeRealIL 845560"];
775 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 845561"];
776 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 845562"];
777 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 845563"];
778 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 845564"];
779 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 845565"];
780 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 845566"];
781 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 845567"];
782 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures) 845568"];
783 [label="param Emit(string expectedOutput) 845569"];
784 [label="param Emit(int? expectedReturnCode) 845570"];
785 [label="param Emit(string[] args) 845571"];
786 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 845572"];
787 [label="param Emit(EmitOptions emitOptions) 845573"];
788 [label="param Emit(Verification peVerify) 845574"];
789 [label="param Emit(SignatureDescription[] expectedSignatures) 845575"];
790 [label="param Emit(this) 845576"];
791 [label="RuntimeUtilities.GetRuntimeEnvironmentFactory 845577"];
792 [label="new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 845578"];
793 [label="s_lazyFactory = new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 845579"];
794 [label="using var testEnvironment = RuntimeEnvironmentFactory.Create(_dependencies); 845580"];
795 [label="RuntimeEnvironmentFactory.Create(_dependencies) 845581"];
796 [label="param Create(IEnumerable<ModuleData> additionalDependencies = null) 845582"];
797 [label="return s_lazyFactory.Value.Create(additionalDependencies); 845583"];
798 [label="return s_lazyFactory.Value.Create(additionalDependencies); 845584"];
799 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 845585"];
800 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 845586"];
801 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 845587"];
802 [label="Emit(testEnvironment, manifestResources, emitOptions) 845588"];
803 [label="param Emit(IRuntimeEnvironment testEnvironment) 845589"];
804 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 845590"];
805 [label="param Emit(EmitOptions emitOptions) 845591"];
806 [label="param Emit(this) 845592"];
807 [label="s_dumpCount 845593"];
808 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 845594"];
809 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 845595"];
810 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 845596"];
811 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 845597"];
812 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 845598"];
813 [label="param EmitCompilation(Compilation compilation) 845599"];
814 [label="param EmitCompilation(IEnumerable<ResourceDescription> manifestResources) 845600"];
815 [label="param EmitCompilation(List<ModuleData> dependencies) 845601"];
816 [label="param EmitCompilation(DiagnosticBag diagnostics) 845602"];
817 [label="param EmitCompilation(CompilationTestData testData) 845603"];
818 [label="param EmitCompilation(EmitOptions emitOptions) 845604"];
819 [label="var referencedCompilations = FindReferencedCompilations(compilation); 845605"];
820 [label="FindReferencedCompilations(compilation) 845606"];
821 [label="param FindReferencedCompilations(Compilation original) 845607"];
822 [label="var list = new List<Compilation>(); 845608"];
823 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 845609"];
824 [label="FindDirectReferencedCompilations(original) 845610"];
825 [label="param FindDirectReferencedCompilations(Compilation compilation) 845611"];
826 [label="var list = new List<Compilation>(); 845612"];
827 [label="var previousCompilation = compilation.ScriptCompilationInfo?.PreviousScriptCompilation; 845613"];
828 [label="compilation.ScriptCompilationInfo 845614"];
829 [label="=> ScriptCompilationInfo 845615"];
830 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 845616"];
831 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 845617"];
832 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 845618"];
833 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 845619"];
834 [label="get\n            {\n                return GetBoundReferenceManager().DirectiveReferences;\n            } 845620"];
835 [label="GetBoundReferenceManager() 845621"];
836 [label="param GetBoundReferenceManager(this) 845622"];
837 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 845623"];
838 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 845624"];
839 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 845625"];
840 [label="get { return this.Declarations.ReferenceDirectives; } 845626"];
841 [label="this.Declarations 845627"];
842 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 845628"];
843 [label="_syntaxAndDeclarations.GetLazyState() 845629"];
844 [label="param GetLazyState(this) 845630"];
845 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 845631"];
846 [label="return this.Declarations.ReferenceDirectives; 845632"];
847 [label="get { return _options; } 845633"];
848 [label="return _options; 845634"];
849 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 845635"];
850 [label="_syntaxAndDeclarations.GetLazyState() 845636"];
851 [label="Debug.Assert(_lazyAssemblySymbol is object); 845637"];
852 [label="return _referenceManager; 845638"];
853 [label="return GetBoundReferenceManager().DirectiveReferences; 845639"];
854 [label="return list; 845640"];
855 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 845641"];
856 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 845642"];
857 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 845643"];
858 [label="return list; 845644"];
859 [label="var referencedCompilations = FindReferencedCompilations(compilation); 845645"];
860 [label="var fullNameSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase); 845646"];
861 [label="foreach (var referencedCompilation in referencedCompilations)\n            {\n                var emitData = EmitCompilationCore(referencedCompilation, null, diagnostics, null, emitOptions);\n                if (emitData.HasValue)\n                {\n                    var moduleData = new ModuleData(referencedCompilation.Assembly.Identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    emitData.Value.Assembly,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    fullNameSet.Add(moduleData.Id.FullName);\n                    dependencies.Add(moduleData);\n                }\n            } 845647"];
862 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 845648"];
863 [label="new[] { compilation } 845649"];
864 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 845650"];
865 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 845651"];
866 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 845652"];
867 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 845653"];
868 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 845654"];
869 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 845655"];
870 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics) 845656"];
871 [label="param EmitReferences(Compilation compilation) 845657"];
872 [label="param EmitReferences(HashSet<string> fullNameSet) 845658"];
873 [label="param EmitReferences(List<ModuleData> dependencies) 845659"];
874 [label="param EmitReferences(DiagnosticBag diagnostics) 845660"];
875 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 845661"];
876 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 845662"];
877 [label="var peRef = (PortableExecutableReference)metadataReference; 845663"];
878 [label="var metadata = peRef.GetMetadataNoCopy(); 845664"];
879 [label="var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly; 845665"];
880 [label="isManifestModule 845666"];
881 [label="var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null; 845667"];
882 [label="((AssemblyMetadata)metadata).GetAssembly().Identity 845668"];
883 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 845669"];
884 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 845670"];
885 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 845671"];
886 [label="foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                } 845672"];
887 [label="EnumerateModules(metadata) 845673"];
888 [label="param EnumerateModules(Metadata metadata) 845674"];
889 [label="return (metadata.Kind == MetadataImageKind.Assembly) ? ((AssemblyMetadata)metadata).GetModules().AsEnumerable() : SpecializedCollections.SingletonEnumerable((ModuleMetadata)metadata); 845675"];
890 [label="(metadata.Kind == MetadataImageKind.Assembly) 845676"];
891 [label="ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent(); 845677"];
892 [label="ModuleData moduleData; 845678"];
893 [label="if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    } 845679"];
894 [label="fullNameSet.Add(identity.GetDisplayName()); 845680"];
895 [label="fullNameSet.Add(identity.GetDisplayName()); 845681"];
896 [label="fullNameSet.Add(identity.GetDisplayName()); 845682"];
897 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 845683"];
898 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 845684"];
899 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 845685"];
900 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 845686"];
901 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 845687"];
902 [label="dependencies.Add(moduleData); 845688"];
903 [label="dependencies.Add(moduleData); 845689"];
904 [label="isManifestModule = false; 845690"];
905 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 845691"];
906 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 845692"];
907 [label="ModuleData moduleData; 845693"];
908 [label="isManifestModule = false; 845694"];
909 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 845695"];
910 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 845696"];
911 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 845697"];
912 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 845698"];
913 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 845699"];
914 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 845700"];
915 [label="EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions) 845701"];
916 [label="param EmitCompilationCore(Compilation compilation) 845702"];
917 [label="param EmitCompilationCore(IEnumerable<ResourceDescription> manifestResources) 845703"];
918 [label="param EmitCompilationCore(DiagnosticBag diagnostics) 845704"];
919 [label="param EmitCompilationCore(CompilationTestData testData) 845705"];
920 [label="param EmitCompilationCore(EmitOptions emitOptions) 845706"];
921 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 845707"];
922 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 845708"];
923 [label="using var executableStream = new MemoryStream(); 845709"];
924 [label="var pdb = default(ImmutableArray<byte>); 845710"];
925 [label="var assembly = default(ImmutableArray<byte>); 845711"];
926 [label="var pdbStream = (emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) ? new MemoryStream() : null; 845712"];
927 [label="(emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) 845713"];
928 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 845714"];
929 [label="compilation.SyntaxTrees 845715"];
930 [label="get\n            {\n                return this.SyntaxTrees;\n            } 845716"];
931 [label="this.SyntaxTrees 845717"];
932 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 845718"];
933 [label="_syntaxAndDeclarations.GetLazyState() 845719"];
934 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 845720"];
935 [label="return this.SyntaxTrees; 845721"];
936 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 845722"];
937 [label="EmitResult result; 845723"];
938 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 845724"];
939 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 845725"];
940 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 845726"];
941 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 845727"];
942 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 845728"];
943 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 845729"];
944 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 845730"];
945 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 845731"];
946 [label="get { return _syntaxAndDeclarations.MessageProvider; } 845732"];
947 [label="return _syntaxAndDeclarations.MessageProvider; 845733"];
948 [label="param CreateModuleBuilder(EmitOptions emitOptions) 845734"];
949 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 845735"];
950 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 845736"];
951 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 845737"];
952 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 845738"];
953 [label="param CreateModuleBuilder(CompilationTestData? testData) 845739"];
954 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 845740"];
955 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 845741"];
956 [label="param CreateModuleBuilder(this) 845742"];
957 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 845743"];
958 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 845744"];
959 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 845745"];
960 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 845746"];
961 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 845747"];
962 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 845748"];
963 [label="param GetRuntimeMetadataVersion(this) 845749"];
964 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 845750"];
965 [label="GetRuntimeMetadataVersion(emitOptions) 845751"];
966 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 845752"];
967 [label="param GetRuntimeMetadataVersion(this) 845753"];
968 [label="Assembly 845754"];
969 [label="get\n            {\n                return SourceAssembly;\n            } 845755"];
970 [label="SourceAssembly 845756"];
971 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 845757"];
972 [label="GetBoundReferenceManager() 845758"];
973 [label="param GetBoundReferenceManager(this) 845759"];
974 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 845760"];
975 [label="return _referenceManager; 845761"];
976 [label="GetBoundReferenceManager(); 845762"];
977 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 845763"];
978 [label="return _lazyAssemblySymbol; 845764"];
979 [label="return SourceAssembly; 845765"];
980 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 845766"];
981 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 845767"];
982 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 845768"];
983 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 845769"];
984 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 845770"];
985 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 845771"];
986 [label="return runtimeMDVersion; 845772"];
987 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 845773"];
988 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 845774"];
989 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 845775"];
990 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 845776"];
991 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 845777"];
992 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 845778"];
993 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 845779"];
994 [label="get { return SourceAssembly.IsDelaySigned; } 845780"];
995 [label="SourceAssembly 845781"];
996 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 845782"];
997 [label="GetBoundReferenceManager() 845783"];
998 [label="param GetBoundReferenceManager(this) 845784"];
999 [label="GetBoundReferenceManager(); 845785"];
1000 [label="return SourceAssembly.IsDelaySigned; 845786"];
1001 [label="SourceAssembly.IsDelaySigned 845787"];
1002 [label="get\n            {\n                return _options;\n            } 845788"];
1003 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 845789"];
1004 [label="Declarations 845790"];
1005 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 845791"];
1006 [label="_syntaxAndDeclarations.GetLazyState() 845792"];
1007 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 845793"];
1008 [label="return Declarations.GetMergedRoot(this); 845794"];
1009 [label="return Declarations.GetMergedRoot(this); 845795"];
1010 [label="return Declarations.GetMergedRoot(this); 845796"];
1011 [label="_syntaxAndDeclarations.GetLazyState() 845797"];
1012 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 845798"];
1013 [label="param GetBinderFactory(SyntaxTree syntaxTree) 845799"];
1014 [label="param GetBinderFactory(bool ignoreAccessibility = false) 845800"];
1015 [label="param GetBinderFactory(this) 845801"];
1016 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 845802"];
1017 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 845803"];
1018 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 845804"];
1019 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 845805"];
1020 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 845806"];
1021 [label="param GetBinderFactory(SyntaxTree syntaxTree) 845807"];
1022 [label="param GetBinderFactory(bool ignoreAccessibility) 845808"];
1023 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 845809"];
1024 [label="param GetBinderFactory(this) 845810"];
1025 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 845811"];
1026 [label="ignoreAccessibility 845812"];
1027 [label="_binderFactories 845813"];
1028 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 845814"];
1029 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 845815"];
1030 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 845816"];
1031 [label="GetSyntaxTreeOrdinal(syntaxTree) 845817"];
1032 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 845818"];
1033 [label="param GetSyntaxTreeOrdinal(this) 845819"];
1034 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 845820"];
1035 [label="this.ContainsSyntaxTree(tree) 845821"];
1036 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 845822"];
1037 [label="param ContainsSyntaxTree(this) 845823"];
1038 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 845824"];
1039 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 845825"];
1040 [label="_syntaxAndDeclarations.GetLazyState() 845826"];
1041 [label="param GetLazyState(this) 845827"];
1042 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 845828"];
1043 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 845829"];
1044 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 845830"];
1045 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 845831"];
1046 [label="_syntaxAndDeclarations.GetLazyState() 845832"];
1047 [label="param GetLazyState(this) 845833"];
1048 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 845834"];
1049 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 845835"];
1050 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 845836"];
1051 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 845837"];
1052 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 845838"];
1053 [label="this.SyntaxTrees 845839"];
1054 [label="param GetLazyState(this) 845840"];
1055 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 845841"];
1056 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 845842"];
1057 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 845843"];
1058 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 845844"];
1059 [label="BinderFactory? previousFactory; 845845"];
1060 [label="var previousWeakReference = binderFactories[treeNum]; 845846"];
1061 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 845847"];
1062 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 845848"];
1063 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 845849"];
1064 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 845850"];
1065 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 845851"];
1066 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 845852"];
1067 [label="param AddNewFactory(SyntaxTree syntaxTree) 845853"];
1068 [label="param AddNewFactory(bool ignoreAccessibility) 845854"];
1069 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 845855"];
1070 [label="param AddNewFactory(this) 845856"];
1071 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 845857"];
1072 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 845858"];
1073 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 845859"];
1074 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 845860"];
1075 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 845861"];
1076 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 845862"];
1077 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 845863"];
1078 [label="BinderFactory? previousFactory; 845864"];
1079 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 845865"];
1080 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 845866"];
1081 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 845867"];
1082 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 845868"];
1083 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 845869"];
1084 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 845870"];
1085 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 845871"];
1086 [label="return newFactory; 845872"];
1087 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 845873"];
1088 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 845874"];
1089 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 845875"];
1090 [label="GetAllUnaliasedModules(modules); 845876"];
1091 [label="GetAllUnaliasedModules(modules) 845877"];
1092 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 845878"];
1093 [label="param GetAllUnaliasedModules(this) 845879"];
1094 [label="Assembly 845880"];
1095 [label="get\n            {\n                return SourceAssembly;\n            } 845881"];
1096 [label="GetBoundReferenceManager() 845882"];
1097 [label="param GetBoundReferenceManager(this) 845883"];
1098 [label="GetBoundReferenceManager(); 845884"];
1099 [label="modules.AddRange(Assembly.Modules); 845885"];
1100 [label="modules.AddRange(Assembly.Modules); 845886"];
1101 [label="GetBoundReferenceManager() 845887"];
1102 [label="param GetBoundReferenceManager(this) 845888"];
1103 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 845889"];
1104 [label="return _referenceManager; 845890"];
1105 [label="var referenceManager = GetBoundReferenceManager(); 845891"];
1106 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 845892"];
1107 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 845893"];
1108 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 845894"];
1109 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 845895"];
1110 [label="GetAllUnaliasedModules(modules); 845896"];
1111 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 845897"];
1112 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 845898"];
1113 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 845899"];
1114 [label="modules.Free(); 845900"];
1115 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 845901"];
1116 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 845902"];
1117 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 845903"];
1118 [label="return _lazyGlobalNamespace; 845904"];
1119 [label="get\n            {\n                return Assembly.Modules[0];\n            } 845905"];
1120 [label="Assembly 845906"];
1121 [label="get\n            {\n                return SourceAssembly;\n            } 845907"];
1122 [label="SourceAssembly 845908"];
1123 [label="GetBoundReferenceManager() 845909"];
1124 [label="param GetBoundReferenceManager(this) 845910"];
1125 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 845911"];
1126 [label="return _referenceManager; 845912"];
1127 [label="GetBoundReferenceManager(); 845913"];
1128 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 845914"];
1129 [label="return Assembly.Modules[0]; 845915"];
1130 [label="return Assembly.Modules[0]; 845916"];
1131 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 845917"];
1132 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 845918"];
1133 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 845919"];
1134 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 845920"];
1135 [label="var diagnostics = new DiagnosticBag(); 845921"];
1136 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 845922"];
1137 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 845923"];
1138 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 845924"];
1139 [label="return _lazyDeclarationDiagnostics; 845925"];
1140 [label="param SymbolDeclaredEvent(Symbol symbol) 845926"];
1141 [label="param SymbolDeclaredEvent(this) 845927"];
1142 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 845928"];
1143 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 845929"];
1144 [label="return _referenceManager; 845930"];
1145 [label="GetBoundReferenceManager(); 845931"];
1146 [label="get\n            {\n                return SourceAssembly;\n            } 845932"];
1147 [label="SourceAssembly 845933"];
1148 [label="GetBoundReferenceManager() 845934"];
1149 [label="param GetBoundReferenceManager(this) 845935"];
1150 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 845936"];
1151 [label="return _referenceManager; 845937"];
1152 [label="GetBoundReferenceManager(); 845938"];
1153 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 845939"];
1154 [label="param GetUnaliasedReferencedAssemblies(this) 845940"];
1155 [label="GetBoundReferenceManager() 845941"];
1156 [label="param GetBoundReferenceManager(this) 845942"];
1157 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 845943"];
1158 [label="return _referenceManager; 845944"];
1159 [label="var referenceManager = GetBoundReferenceManager(); 845945"];
1160 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 845946"];
1161 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 845947"];
1162 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 845948"];
1163 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 845949"];
1164 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 845950"];
1165 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 845951"];
1166 [label="return _additionalCodegenWarnings; 845952"];
1167 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 845953"];
1168 [label="return _referenceManager; 845954"];
1169 [label="GetBoundReferenceManager(); 845955"];
1170 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 845956"];
1171 [label="return _referenceManager; 845957"];
1172 [label="GetBoundReferenceManager(); 845958"];
1173 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 845959"];
1174 [label="param IsNullableAnalysisEnabledIn(this) 845960"];
1175 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 845961"];
1176 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 845962"];
1177 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 845963"];
1178 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 845964"];
1179 [label="param IsNullableAnalysisEnabledIn(this) 845965"];
1180 [label="GetNullableAnalysisValue() 845966"];
1181 [label="param GetNullableAnalysisValue(this) 845967"];
1182 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 845968"];
1183 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 845969"];
1184 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 845970"];
1185 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 845971"];
1186 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 845972"];
1187 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 845973"];
1188 [label="Options 845974"];
1189 [label="get\n            {\n                return _options;\n            } 845975"];
1190 [label="return _options; 845976"];
1191 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 845977"];
1192 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 845978"];
1193 [label="get\n            {\n                var value = GetNullableAnalysisValue();\n#if DEBUG\n                return value != false;\n#else\n                return value == true;\n#endif\n            } 845979"];
1194 [label="GetNullableAnalysisValue() 845980"];
1195 [label="param GetNullableAnalysisValue(this) 845981"];
1196 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 845982"];
1197 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 845983"];
1198 [label="var value = GetNullableAnalysisValue(); 845984"];
1199 [label="return value != false; 845985"];
1200 [label="return value != false; 845986"];
1201 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 845987"];
1202 [label="return _referenceManager; 845988"];
1203 [label="GetBoundReferenceManager(); 845989"];
1204 [label="get { return SourceAssembly.StrongNameKeys; } 845990"];
1205 [label="SourceAssembly 845991"];
1206 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 845992"];
1207 [label="GetBoundReferenceManager() 845993"];
1208 [label="param GetBoundReferenceManager(this) 845994"];
1209 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 845995"];
1210 [label="return _referenceManager; 845996"];
1211 [label="GetBoundReferenceManager(); 845997"];
1212 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 845998"];
1213 [label="return SourceAssembly.StrongNameKeys; 845999"];
1214 [label="SourceAssembly.StrongNameKeys 846000"];
1215 [label="get\n            {\n                return _options;\n            } 846001"];
1216 [label="=> 0x30 846002"];
1217 [label="0x30 846003"];
1218 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 846004"];
1219 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 846005"];
1220 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 846006"];
1221 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 846007"];
1222 [label="PEModuleBuilder moduleBeingBuilt; 846008"];
1223 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 846009"];
1224 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 846010"];
1225 [label="_options.OutputKind.IsValid() 846011"];
1226 [label="_options.OutputKind 846012"];
1227 [label="SourceAssembly 846013"];
1228 [label="GetBoundReferenceManager() 846014"];
1229 [label="GetBoundReferenceManager(); 846015"];
1230 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 846016"];
1231 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 846017"];
1232 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 846018"];
1233 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 846019"];
1234 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 846020"];
1235 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 846021"];
1236 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 846022"];
1237 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 846023"];
1238 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 846024"];
1239 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 846025"];
1240 [label="param PEAssemblyBuilder(OutputKind outputKind) 846026"];
1241 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 846027"];
1242 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 846028"];
1243 [label="param PEAssemblyBuilder(this) 846029"];
1244 [label="sourceAssembly 846030"];
1245 [label="emitOptions 846031"];
1246 [label="outputKind 846032"];
1247 [label="serializationProperties 846033"];
1248 [label="manifestResources 846034"];
1249 [label="ImmutableArray<NamedTypeSymbol>.Empty 846035"];
1250 [label="param PEAssemblyBuilder(this) 846036"];
1251 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 846037"];
1252 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 846038"];
1253 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 846039"];
1254 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 846040"];
1255 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 846041"];
1256 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 846042"];
1257 [label="param PEAssemblyBuilderBase(this) 846043"];
1258 [label="0 846044"];
1259 [label="sourceAssembly.Modules[0] 846045"];
1260 [label="emitOptions 846046"];
1261 [label="outputKind 846047"];
1262 [label="serializationProperties 846048"];
1263 [label="manifestResources 846049"];
1264 [label="param PEAssemblyBuilderBase(this) 846050"];
1265 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 846051"];
1266 [label="param PEModuleBuilder(EmitOptions emitOptions) 846052"];
1267 [label="param PEModuleBuilder(OutputKind outputKind) 846053"];
1268 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 846054"];
1269 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 846055"];
1270 [label="param PEModuleBuilder(this) 846056"];
1271 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 846057"];
1272 [label="sourceModule 846058"];
1273 [label="serializationProperties 846059"];
1274 [label="manifestResources 846060"];
1275 [label="outputKind 846061"];
1276 [label="emitOptions 846062"];
1277 [label="new ModuleCompilationState() 846063"];
1278 [label="param ModuleCompilationState(this) 846064"];
1279 [label="param PEModuleBuilder(this) 846065"];
1280 [label="param PEModuleBuilder(this) 846066"];
1281 [label="get\n            {\n                return true;\n            } 846067"];
1282 [label="return true; 846068"];
1283 [label="param PEModuleBuilder(this) 846069"];
1284 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 846070"];
1285 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 846071"];
1286 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 846072"];
1287 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 846073"];
1288 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 846074"];
1289 [label="new ConcurrentSet<TypeSymbol>() 846075"];
1290 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 846076"];
1291 [label="_embeddedTypesManagerOpt 846077"];
1292 [label="_metadataName 846078"];
1293 [label="_fixedImplementationTypes 846079"];
1294 [label="_needsGeneratedAttributes 846080"];
1295 [label="_needsGeneratedAttributes_IsFrozen 846081"];
1296 [label="var specifiedName = sourceModule.MetadataName; 846082"];
1297 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 846083"];
1298 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 846084"];
1299 [label="_metadataName 846085"];
1300 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 846086"];
1301 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 846087"];
1302 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 846088"];
1303 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 846089"];
1304 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 846090"];
1305 [label="_sourceAssembly 846091"];
1306 [label="_lazyEmbeddedAttribute 846092"];
1307 [label="_lazyIsReadOnlyAttribute 846093"];
1308 [label="_lazyIsByRefLikeAttribute 846094"];
1309 [label="_lazyIsUnmanagedAttribute 846095"];
1310 [label="_lazyNullableAttribute 846096"];
1311 [label="_lazyNullableContextAttribute 846097"];
1312 [label="_lazyNullablePublicOnlyAttribute 846098"];
1313 [label="_lazyNativeIntegerAttribute 846099"];
1314 [label="_metadataName 846100"];
1315 [label="Debug.Assert(sourceAssembly is object); 846101"];
1316 [label="_sourceAssembly 846102"];
1317 [label="_additionalTypes = additionalTypes.NullToEmpty(); 846103"];
1318 [label="_additionalTypes 846104"];
1319 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 846105"];
1320 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 846106"];
1321 [label="(emitOptions.OutputNameOverride == null) 846107"];
1322 [label="sourceAssembly.MetadataName 846108"];
1323 [label="_metadataName 846109"];
1324 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 846110"];
1325 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 846111"];
1326 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 846112"];
1327 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 846113"];
1328 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 846114"];
1329 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 846115"];
1330 [label="moduleBeingBuilt.SourceLinkStreamOpt 846116"];
1331 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 846117"];
1332 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 846118"];
1333 [label="moduleBeingBuilt.EmbeddedTexts 846119"];
1334 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 846120"];
1335 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 846121"];
1336 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 846122"];
1337 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 846123"];
1338 [label="testData.Module 846124"];
1339 [label="return moduleBeingBuilt; 846125"];
1340 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 846126"];
1341 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 846127"];
1342 [label="param CompileMethods(bool emittingPdb) 846128"];
1343 [label="param CompileMethods(bool emitMetadataOnly) 846129"];
1344 [label="param CompileMethods(bool emitTestCoverageData) 846130"];
1345 [label="param CompileMethods(DiagnosticBag diagnostics) 846131"];
1346 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 846132"];
1347 [label="param CompileMethods(CancellationToken cancellationToken) 846133"];
1348 [label="param CompileMethods(this) 846134"];
1349 [label="PooledHashSet<int>? excludeDiagnostics = null; 846135"];
1350 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 846136"];
1351 [label="excludeDiagnostics = PooledHashSet<int>.GetInstance(); 846137"];
1352 [label="excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody); 846138"];
1353 [label="excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody); 846139"];
1354 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 846140"];
1355 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 846141"];
1356 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 846142"];
1357 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 846143"];
1358 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 846144"];
1359 [label="param GetDiagnostics(CompilationStage stage) 846145"];
1360 [label="param GetDiagnostics(bool includeEarlierStages) 846146"];
1361 [label="param GetDiagnostics(CancellationToken cancellationToken) 846147"];
1362 [label="param GetDiagnostics(this) 846148"];
1363 [label="var diagnostics = DiagnosticBag.GetInstance(); 846149"];
1364 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 846150"];
1365 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 846151"];
1366 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 846152"];
1367 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 846153"];
1368 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 846154"];
1369 [label="param GetDiagnostics(CompilationStage stage) 846155"];
1370 [label="param GetDiagnostics(bool includeEarlierStages) 846156"];
1371 [label="param GetDiagnostics(DiagnosticBag diagnostics) 846157"];
1372 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 846158"];
1373 [label="param GetDiagnostics(this) 846159"];
1374 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 846160"];
1375 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 846161"];
1376 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 846162"];
1377 [label="this.SyntaxTrees 846163"];
1378 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 846164"];
1379 [label="_syntaxAndDeclarations.GetLazyState() 846165"];
1380 [label="param GetLazyState(this) 846166"];
1381 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 846167"];
1382 [label="var syntaxTrees = this.SyntaxTrees; 846168"];
1383 [label="this.Options 846169"];
1384 [label="get\n            {\n                return _options;\n            } 846170"];
1385 [label="return _options; 846171"];
1386 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 846172"];
1387 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 846173"];
1388 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 846174"];
1389 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 846175"];
1390 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 846176"];
1391 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 846177"];
1392 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 846178"];
1393 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 846179"];
1394 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 846180"];
1395 [label="ImmutableArray<LoadDirective> loadDirectives; 846181"];
1396 [label="loadDirectives 846182"];
1397 [label="syntaxAndDeclarations.GetLazyState() 846183"];
1398 [label="param GetLazyState(this) 846184"];
1399 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 846185"];
1400 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 846186"];
1401 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 846187"];
1402 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 846188"];
1403 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 846189"];
1404 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 846190"];
1405 [label="cancellationToken.ThrowIfCancellationRequested(); 846191"];
1406 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 846192"];
1407 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 846193"];
1408 [label="CheckAssemblyName(builder); 846194"];
1409 [label="CheckAssemblyName(builder); 846195"];
1410 [label="CheckAssemblyName(builder); 846196"];
1411 [label="Options 846197"];
1412 [label="get\n            {\n                return _options;\n            } 846198"];
1413 [label="return _options; 846199"];
1414 [label="builder.AddRange(Options.Errors); 846200"];
1415 [label="Options 846201"];
1416 [label="get\n            {\n                return _options;\n            } 846202"];
1417 [label="return _options; 846203"];
1418 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 846204"];
1419 [label="cancellationToken.ThrowIfCancellationRequested(); 846205"];
1420 [label="GetBoundReferenceManager() 846206"];
1421 [label="param GetBoundReferenceManager(this) 846207"];
1422 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 846208"];
1423 [label="return _referenceManager; 846209"];
1424 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 846210"];
1425 [label="cancellationToken.ThrowIfCancellationRequested(); 846211"];
1426 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 846212"];
1427 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 846213"];
1428 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 846214"];
1429 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 846215"];
1430 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 846216"];
1431 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 846217"];
1432 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 846218"];
1433 [label="param GetSourceDeclarationDiagnostics(this) 846219"];
1434 [label="GlobalImports 846220"];
1435 [label="=> _globalImports.Value 846221"];
1436 [label="_globalImports.Value 846222"];
1437 [label="_globalImports.Value 846223"];
1438 [label="=> Imports.FromGlobalUsings(this) 846224"];
1439 [label="this 846225"];
1440 [label="Imports.FromGlobalUsings(this) 846226"];
1441 [label="Imports.FromGlobalUsings(this) 846227"];
1442 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 846228"];
1443 [label="ScriptCompilationInfo 846229"];
1444 [label="ScriptCompilationInfo?.PreviousScriptCompilation 846230"];
1445 [label="GlobalImports.Complete(cancellationToken); 846231"];
1446 [label="GlobalImports.Complete(cancellationToken); 846232"];
1447 [label="GlobalImports.Complete(cancellationToken); 846233"];
1448 [label="SourceLocation? location = null; 846234"];
1449 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 846235"];
1450 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 846236"];
1451 [label="Assembly 846237"];
1452 [label="get\n            {\n                return SourceAssembly;\n            } 846238"];
1453 [label="SourceAssembly 846239"];
1454 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 846240"];
1455 [label="GetBoundReferenceManager() 846241"];
1456 [label="param GetBoundReferenceManager(this) 846242"];
1457 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 846243"];
1458 [label="return _referenceManager; 846244"];
1459 [label="GetBoundReferenceManager(); 846245"];
1460 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 846246"];
1461 [label="Assembly.ForceComplete(location, cancellationToken); 846247"];
1462 [label="Assembly.ForceComplete(location, cancellationToken); 846248"];
1463 [label="Assembly.ForceComplete(location, cancellationToken); 846249"];
1464 [label="Assembly.ForceComplete(location, cancellationToken); 846250"];
1465 [label="Assembly.ForceComplete(location, cancellationToken); 846251"];
1466 [label="SourceAssembly 846252"];
1467 [label="GetBoundReferenceManager() 846253"];
1468 [label="param GetBoundReferenceManager(this) 846254"];
1469 [label="GetBoundReferenceManager(); 846255"];
1470 [label="GetBoundReferenceManager() 846256"];
1471 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 846257"];
1472 [label="Declarations 846258"];
1473 [label="_syntaxAndDeclarations.GetLazyState() 846259"];
1474 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 846260"];
1475 [label="return Declarations.GetMergedRoot(this); 846261"];
1476 [label="_syntaxAndDeclarations.GetLazyState() 846262"];
1477 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 846263"];
1478 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 846264"];
1479 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 846265"];
1480 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 846266"];
1481 [label="_declarationDiagnosticsFrozen = true; 846267"];
1482 [label="_declarationDiagnosticsFrozen 846268"];
1483 [label="_needsGeneratedAttributes_IsFrozen = true; 846269"];
1484 [label="_needsGeneratedAttributes_IsFrozen 846270"];
1485 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 846271"];
1486 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 846272"];
1487 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 846273"];
1488 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 846274"];
1489 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 846275"];
1490 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 846276"];
1491 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 846277"];
1492 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 846278"];
1493 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 846279"];
1494 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 846280"];
1495 [label="param GetClsComplianceDiagnostics(this) 846281"];
1496 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 846282"];
1497 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 846283"];
1498 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 846284"];
1499 [label="var builder = DiagnosticBag.GetInstance(); 846285"];
1500 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 846286"];
1501 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 846287"];
1502 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 846288"];
1503 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 846289"];
1504 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 846290"];
1505 [label="param CheckCompliance(CSharpCompilation compilation) 846291"];
1506 [label="param CheckCompliance(DiagnosticBag diagnostics) 846292"];
1507 [label="param CheckCompliance(CancellationToken cancellationToken) 846293"];
1508 [label="param CheckCompliance(SyntaxTree filterTree = null) 846294"];
1509 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 846295"];
1510 [label="var queue = new ConcurrentQueue<Diagnostic>(); 846296"];
1511 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 846297"];
1512 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 846298"];
1513 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 846299"];
1514 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 846300"];
1515 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 846301"];
1516 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 846302"];
1517 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 846303"];
1518 [label="param ClsComplianceChecker(CSharpCompilation compilation) 846304"];
1519 [label="param ClsComplianceChecker(SyntaxTree filterTree) 846305"];
1520 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 846306"];
1521 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 846307"];
1522 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 846308"];
1523 [label="param ClsComplianceChecker(this) 846309"];
1524 [label="param ClsComplianceChecker(this) 846310"];
1525 [label="_compilation 846311"];
1526 [label="_filterTree 846312"];
1527 [label="_filterSpanWithinTree 846313"];
1528 [label="_diagnostics 846314"];
1529 [label="_declaredOrInheritedCompliance 846315"];
1530 [label="_compilerTasks 846316"];
1531 [label="_compilation 846317"];
1532 [label="_filterTree 846318"];
1533 [label="_filterSpanWithinTree 846319"];
1534 [label="_diagnostics 846320"];
1535 [label="_cancellationToken 846321"];
1536 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 846322"];
1537 [label="_declaredOrInheritedCompliance 846323"];
1538 [label="ConcurrentAnalysis 846324"];
1539 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 846325"];
1540 [label="null 846326"];
1541 [label="_filterTree == null 846327"];
1542 [label="_compilation.Options 846328"];
1543 [label="get\n            {\n                return _options;\n            } 846329"];
1544 [label="return _options; 846330"];
1545 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 846331"];
1546 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 846332"];
1547 [label="_compilerTasks = new ConcurrentStack<Task>(); 846333"];
1548 [label="_compilerTasks 846334"];
1549 [label="compilation.Assembly 846335"];
1550 [label="get\n            {\n                return SourceAssembly;\n            } 846336"];
1551 [label="GetBoundReferenceManager() 846337"];
1552 [label="param GetBoundReferenceManager(this) 846338"];
1553 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 846339"];
1554 [label="return _referenceManager; 846340"];
1555 [label="GetBoundReferenceManager(); 846341"];
1556 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 846342"];
1557 [label="checker.Visit(compilation.Assembly); 846343"];
1558 [label="checker.Visit(compilation.Assembly); 846344"];
1559 [label="checker.Visit(compilation.Assembly); 846345"];
1560 [label="param VisitAssembly(AssemblySymbol symbol) 846346"];
1561 [label="param VisitAssembly(this) 846347"];
1562 [label="_cancellationToken.ThrowIfCancellationRequested(); 846348"];
1563 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 846349"];
1564 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 846350"];
1565 [label="GetDeclaredOrInheritedCompliance(symbol) 846351"];
1566 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 846352"];
1567 [label="param GetDeclaredOrInheritedCompliance(this) 846353"];
1568 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 846354"];
1569 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 846355"];
1570 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 846356"];
1571 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 846357"];
1572 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 846358"];
1573 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 846359"];
1574 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 846360"];
1575 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 846361"];
1576 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 846362"];
1577 [label="Compliance compliance; 846363"];
1578 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 846364"];
1579 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 846365"];
1580 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 846366"];
1581 [label="Location ignoredLocation; 846367"];
1582 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 846368"];
1583 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 846369"];
1584 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 846370"];
1585 [label="param GetDeclaredCompliance(Symbol symbol) 846371"];
1586 [label="param GetDeclaredCompliance(out Location attributeLocation) 846372"];
1587 [label="param GetDeclaredCompliance(this) 846373"];
1588 [label="attributeLocation = null; 846374"];
1589 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 846375"];
1590 [label="if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                } 846376"];
1591 [label="if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                } 846377"];
1592 [label="return null; 846378"];
1593 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 846379"];
1594 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 846380"];
1595 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 846381"];
1596 [label="compliance = Compliance.ImpliedFalse; 846382"];
1597 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 846383"];
1598 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 846384"];
1599 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 846385"];
1600 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 846386"];
1601 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 846387"];
1602 [label="IsTrue(assemblyCompliance) 846388"];
1603 [label="param IsTrue(Compliance compliance) 846389"];
1604 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 846390"];
1605 [label="return false; 846391"];
1606 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 846392"];
1607 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 846393"];
1608 [label="ModuleSymbol module = symbol.Modules[i]; 846394"];
1609 [label="Location attributeLocation; 846395"];
1610 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 846396"];
1611 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 846397"];
1612 [label="GetDeclaredCompliance(module, out attributeLocation) 846398"];
1613 [label="param GetDeclaredCompliance(Symbol symbol) 846399"];
1614 [label="param GetDeclaredCompliance(out Location attributeLocation) 846400"];
1615 [label="param GetDeclaredCompliance(this) 846401"];
1616 [label="attributeLocation = null; 846402"];
1617 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 846403"];
1618 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 846404"];
1619 [label="i == 0 846405"];
1620 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 846406"];
1621 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 846407"];
1622 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 846408"];
1623 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 846409"];
1624 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 846410"];
1625 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 846411"];
1626 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 846412"];
1627 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 846413"];
1628 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 846414"];
1629 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 846415"];
1630 [label="GetDeclaredOrInheritedCompliance(sourceModule) 846416"];
1631 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 846417"];
1632 [label="param GetDeclaredOrInheritedCompliance(this) 846418"];
1633 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 846419"];
1634 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 846420"];
1635 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 846421"];
1636 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 846422"];
1637 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 846423"];
1638 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 846424"];
1639 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 846425"];
1640 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 846426"];
1641 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 846427"];
1642 [label="Compliance compliance; 846428"];
1643 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 846429"];
1644 [label="Location ignoredLocation; 846430"];
1645 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 846431"];
1646 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 846432"];
1647 [label="param GetDeclaredCompliance(out Location attributeLocation) 846433"];
1648 [label="param GetDeclaredCompliance(this) 846434"];
1649 [label="attributeLocation = null; 846435"];
1650 [label="return null; 846436"];
1651 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 846437"];
1652 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 846438"];
1653 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 846439"];
1654 [label="GetInheritedCompliance(symbol) 846440"];
1655 [label="param GetInheritedCompliance(Symbol symbol) 846441"];
1656 [label="param GetInheritedCompliance(this) 846442"];
1657 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 846443"];
1658 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 846444"];
1659 [label="System.Diagnostics.Debug.Assert((object)containing != null); 846445"];
1660 [label="System.Diagnostics.Debug.Assert((object)containing != null); 846446"];
1661 [label="return GetDeclaredOrInheritedCompliance(containing); 846447"];
1662 [label="GetDeclaredOrInheritedCompliance(containing) 846448"];
1663 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 846449"];
1664 [label="param GetDeclaredOrInheritedCompliance(this) 846450"];
1665 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 846451"];
1666 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 846452"];
1667 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 846453"];
1668 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 846454"];
1669 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 846455"];
1670 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 846456"];
1671 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 846457"];
1672 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 846458"];
1673 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 846459"];
1674 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 846460"];
1675 [label="return compliance; 846461"];
1676 [label="IsTrue(GetInheritedCompliance(symbol)) 846462"];
1677 [label="param IsTrue(Compliance compliance) 846463"];
1678 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 846464"];
1679 [label="return false; 846465"];
1680 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 846466"];
1681 [label="param IsTrue(Compliance compliance) 846467"];
1682 [label="Visit(symbol.GlobalNamespace); 846468"];
1683 [label="Visit(symbol.GlobalNamespace); 846469"];
1684 [label="param VisitNamespace(NamespaceSymbol symbol) 846470"];
1685 [label="param VisitNamespace(this) 846471"];
1686 [label="_cancellationToken.ThrowIfCancellationRequested(); 846472"];
1687 [label="if (DoNotVisit(symbol)) return; 846473"];
1688 [label="DoNotVisit(symbol) 846474"];
1689 [label="param DoNotVisit(Symbol symbol) 846475"];
1690 [label="param DoNotVisit(this) 846476"];
1691 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 846477"];
1692 [label="return false; 846478"];
1693 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 846479"];
1694 [label="GetDeclaredOrInheritedCompliance(symbol) 846480"];
1695 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 846481"];
1696 [label="param GetDeclaredOrInheritedCompliance(this) 846482"];
1697 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 846483"];
1698 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 846484"];
1699 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 846485"];
1700 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 846486"];
1701 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 846487"];
1702 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 846488"];
1703 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 846489"];
1704 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 846490"];
1705 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 846491"];
1706 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 846492"];
1707 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 846493"];
1708 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 846494"];
1709 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 846495"];
1710 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 846496"];
1711 [label="return compliance; 846497"];
1712 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 846498"];
1713 [label="param IsTrue(Compliance compliance) 846499"];
1714 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 846500"];
1715 [label="return false; 846501"];
1716 [label="ConcurrentAnalysis 846502"];
1717 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 846503"];
1718 [label="null 846504"];
1719 [label="_filterTree == null 846505"];
1720 [label="_compilation.Options 846506"];
1721 [label="get\n            {\n                return _options;\n            } 846507"];
1722 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 846508"];
1723 [label="VisitNamespaceMembersAsTasks(symbol); 846509"];
1724 [label="VisitNamespaceMembersAsTasks(symbol) 846510"];
1725 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 846511"];
1726 [label="param VisitNamespaceMembersAsTasks(this) 846512"];
1727 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 846513"];
1728 [label="VisitNamespaceMembersAsTasks(symbol); 846514"];
1729 [label="checker.WaitForWorkers() 846515"];
1730 [label="param WaitForWorkers(this) 846516"];
1731 [label="var tasks = _compilerTasks; 846517"];
1732 [label="if (tasks == null)\n            {\n                return;\n            } 846518"];
1733 [label="if (tasks == null)\n            {\n                return;\n            } 846519"];
1734 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 846520"];
1735 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 846521"];
1736 [label="checker.WaitForWorkers(); 846522"];
1737 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 846523"];
1738 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 846524"];
1739 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 846525"];
1740 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 846526"];
1741 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 846527"];
1742 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 846528"];
1743 [label="return _lazyClsComplianceDiagnostics; 846529"];
1744 [label="return result.AsImmutable().Concat(clsDiagnostics); 846530"];
1745 [label="return result.AsImmutable().Concat(clsDiagnostics); 846531"];
1746 [label="return result.AsImmutable().Concat(clsDiagnostics); 846532"];
1747 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 846533"];
1748 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 846534"];
1749 [label="cancellationToken.ThrowIfCancellationRequested(); 846535"];
1750 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 846536"];
1751 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 846537"];
1752 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 846538"];
1753 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 846539"];
1754 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 846540"];
1755 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 846541"];
1756 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 846542"];
1757 [label="return diagnostics.ToReadOnlyAndFree(); 846543"];
1758 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 846544"];
1759 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 846545"];
1760 [label="excludeDiagnostics?.Free(); 846546"];
1761 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 846547"];
1762 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 846548"];
1763 [label="if (hasDeclarationErrors)\n                {\n                    return false;\n                } 846549"];
1764 [label="if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                } 846550"];
1765 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken); 846551"];
1766 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken); 846552"];
1767 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken); 846553"];
1768 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken) 846554"];
1769 [label="param ProcessSynthesizedMembers(CSharpCompilation compilation) 846555"];
1770 [label="param ProcessSynthesizedMembers(PEModuleBuilder moduleBeingBuilt) 846556"];
1771 [label="param ProcessSynthesizedMembers(CancellationToken cancellationToken) 846557"];
1772 [label="Debug.Assert(moduleBeingBuilt != null); 846558"];
1773 [label="Debug.Assert(moduleBeingBuilt != null); 846559"];
1774 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 846560"];
1775 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 846561"];
1776 [label="var compiler = new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken); 846562"];
1777 [label="new SynthesizedMetadataCompiler(moduleBeingBuilt, cancellationToken) 846563"];
1778 [label="param SynthesizedMetadataCompiler(PEModuleBuilder moduleBeingBuilt) 846564"];
1779 [label="param SynthesizedMetadataCompiler(CancellationToken cancellationToken) 846565"];
1780 [label="param SynthesizedMetadataCompiler(this) 846566"];
1781 [label="param SynthesizedMetadataCompiler(this) 846567"];
1782 [label="_moduleBeingBuilt 846568"];
1783 [label="Debug.Assert(moduleBeingBuilt != null); 846569"];
1784 [label="Debug.Assert(moduleBeingBuilt != null); 846570"];
1785 [label="_moduleBeingBuilt 846571"];
1786 [label="_cancellationToken 846572"];
1787 [label="compilation.SourceModule 846573"];
1788 [label="get\n            {\n                return Assembly.Modules[0];\n            } 846574"];
1789 [label="Assembly 846575"];
1790 [label="get\n            {\n                return SourceAssembly;\n            } 846576"];
1791 [label="SourceAssembly 846577"];
1792 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 846578"];
1793 [label="GetBoundReferenceManager() 846579"];
1794 [label="param GetBoundReferenceManager(this) 846580"];
1795 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 846581"];
1796 [label="return _referenceManager; 846582"];
1797 [label="GetBoundReferenceManager(); 846583"];
1798 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 846584"];
1799 [label="return Assembly.Modules[0]; 846585"];
1800 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 846586"];
1801 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 846587"];
1802 [label="compiler.Visit(compilation.SourceModule.GlobalNamespace); 846588"];
1803 [label="param VisitNamespace(NamespaceSymbol symbol) 846589"];
1804 [label="param VisitNamespace(this) 846590"];
1805 [label="_cancellationToken.ThrowIfCancellationRequested(); 846591"];
1806 [label="foreach (var s in symbol.GetMembers())\n            {\n                s.Accept(this);\n            } 846592"];
1807 [label="SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken); 846593"];
1808 [label="return true; 846594"];
1809 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 846595"];
1810 [label="get { return this.SourceModule.GetPublicSymbol(); } 846596"];
1811 [label="this.SourceModule 846597"];
1812 [label="get\n            {\n                return Assembly.Modules[0];\n            } 846598"];
1813 [label="Assembly 846599"];
1814 [label="get\n            {\n                return SourceAssembly;\n            } 846600"];
1815 [label="SourceAssembly 846601"];
1816 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 846602"];
1817 [label="GetBoundReferenceManager() 846603"];
1818 [label="param GetBoundReferenceManager(this) 846604"];
1819 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 846605"];
1820 [label="return _referenceManager; 846606"];
1821 [label="GetBoundReferenceManager(); 846607"];
1822 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 846608"];
1823 [label="return Assembly.Modules[0]; 846609"];
1824 [label="return this.SourceModule.GetPublicSymbol(); 846610"];
1825 [label="get { return SourceAssembly.IsDelaySigned; } 846611"];
1826 [label="SourceAssembly 846612"];
1827 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 846613"];
1828 [label="GetBoundReferenceManager() 846614"];
1829 [label="param GetBoundReferenceManager(this) 846615"];
1830 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 846616"];
1831 [label="return _referenceManager; 846617"];
1832 [label="GetBoundReferenceManager(); 846618"];
1833 [label="SourceAssembly.IsDelaySigned 846619"];
1834 [label="get { return SourceAssembly.StrongNameKeys; } 846620"];
1835 [label="SourceAssembly 846621"];
1836 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 846622"];
1837 [label="GetBoundReferenceManager() 846623"];
1838 [label="param GetBoundReferenceManager(this) 846624"];
1839 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 846625"];
1840 [label="return _referenceManager; 846626"];
1841 [label="GetBoundReferenceManager(); 846627"];
1842 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 846628"];
1843 [label="param GetCorLibraryReferenceToEmit(this) 846629"];
1844 [label="CorLibrary 846630"];
1845 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 846631"];
1846 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 846632"];
1847 [label="AssemblySymbol corLibrary = CorLibrary; 846633"];
1848 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 846634"];
1849 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 846635"];
1850 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 846636"];
1851 [label="return Translate(corLibrary, context.Diagnostics); 846637"];
1852 [label="return Translate(corLibrary, context.Diagnostics); 846638"];
1853 [label="Translate(corLibrary, context.Diagnostics) 846639"];
1854 [label="param Translate(AssemblySymbol assembly) 846640"];
1855 [label="param Translate(DiagnosticBag diagnostics) 846641"];
1856 [label="param Translate(this) 846642"];
1857 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 846643"];
1858 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 846644"];
1859 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 846645"];
1860 [label="Cci.IModuleReference reference; 846646"];
1861 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 846647"];
1862 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 846648"];
1863 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 846649"];
1864 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 846650"];
1865 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 846651"];
1866 [label="new AssemblyReference(assembly) 846652"];
1867 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 846653"];
1868 [label="param AssemblyReference(this) 846654"];
1869 [label="_targetAssembly 846655"];
1870 [label="Debug.Assert((object)assemblySymbol != null); 846656"];
1871 [label="Debug.Assert((object)assemblySymbol != null); 846657"];
1872 [label="_targetAssembly 846658"];
1873 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 846659"];
1874 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 846660"];
1875 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 846661"];
1876 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 846662"];
1877 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 846663"];
1878 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 846664"];
1879 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 846665"];
1880 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 846666"];
1881 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 846667"];
1882 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 846668"];
1883 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 846669"];
1884 [label="param ValidateReferencedAssembly(this) 846670"];
1885 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 846671"];
1886 [label="asmRef.Identity 846672"];
1887 [label="=> _targetAssembly.Identity 846673"];
1888 [label="_targetAssembly.Identity 846674"];
1889 [label="AssemblyIdentity refIdentity = asmRef.Identity; 846675"];
1890 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 846676"];
1891 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 846677"];
1892 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 846678"];
1893 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 846679"];
1894 [label="var refMachine = assembly.Machine; 846680"];
1895 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 846681"];
1896 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 846682"];
1897 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 846683"];
1898 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 846684"];
1899 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 846685"];
1900 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 846686"];
1901 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 846687"];
1902 [label="return cachedAsmRef; 846688"];
1903 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 846689"];
1904 [label="=> _targetAssembly.Identity 846690"];
1905 [label="_targetAssembly.Identity 846691"];
1906 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 846692"];
1907 [label="param GetAssemblyReferencesFromAddedModules(this) 846693"];
1908 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 846694"];
1909 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 846695"];
1910 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 846696"];
1911 [label="param GetAssemblyReferencesFromAddedModules(this) 846697"];
1912 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 846698"];
1913 [label="param GetFiles(EmitContext context) 846699"];
1914 [label="param GetFiles(this) 846700"];
1915 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 846701"];
1916 [label="return getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly); 846702"];
1917 [label="return getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly); 846703"];
1918 [label="getFiles(ref _lazyFilesWithoutManifestResources, context, _sourceAssembly) 846704"];
1919 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 846705"];
1920 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 846706"];
1921 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 846707"];
1922 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 846708"];
1923 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 846709"];
1924 [label="var modules = sourceAssSymbol.Modules; 846710"];
1925 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 846711"];
1926 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 846712"];
1927 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 846713"];
1928 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 846714"];
1929 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 846715"];
1930 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 846716"];
1931 [label="builder.Free(); 846717"];
1932 [label="return lazyFiles; 846718"];
1933 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 846719"];
1934 [label="=> _embeddedTypesManagerOpt 846720"];
1935 [label="_embeddedTypesManagerOpt 846721"];
1936 [label="param GetAnonymousTypeDefinitions(EmitContext context) 846722"];
1937 [label="param GetAnonymousTypeDefinitions(this) 846723"];
1938 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 846724"];
1939 [label="return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>(); 846725"];
1940 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 846726"];
1941 [label="param GetAdditionalTopLevelTypeDefinitions(this) 846727"];
1942 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 846728"];
1943 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 846729"];
1944 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 846730"];
1945 [label="=> _additionalTypes 846731"];
1946 [label="_additionalTypes 846732"];
1947 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 846733"];
1948 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 846734"];
1949 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 846735"];
1950 [label="param GetEmbeddedTypeDefinitions(this) 846736"];
1951 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 846737"];
1952 [label="GetEmbeddedTypes(context.Diagnostics) 846738"];
1953 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 846739"];
1954 [label="param GetEmbeddedTypes(this) 846740"];
1955 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 846741"];
1956 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 846742"];
1957 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 846743"];
1958 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 846744"];
1959 [label="param CreateEmbeddedAttributesIfNeeded(this) 846745"];
1960 [label="GetNeedsGeneratedAttributes() 846746"];
1961 [label="param GetNeedsGeneratedAttributes(this) 846747"];
1962 [label="_needsGeneratedAttributes_IsFrozen = true; 846748"];
1963 [label="_needsGeneratedAttributes_IsFrozen 846749"];
1964 [label="GetNeedsGeneratedAttributesInternal() 846750"];
1965 [label="param GetNeedsGeneratedAttributesInternal(this) 846751"];
1966 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 846752"];
1967 [label="return GetNeedsGeneratedAttributesInternal(); 846753"];
1968 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 846754"];
1969 [label="ShouldEmitNullablePublicOnlyAttribute() 846755"];
1970 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 846756"];
1971 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 846757"];
1972 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 846758"];
1973 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 846759"];
1974 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 846760"];
1975 [label="return; 846761"];
1976 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 846762"];
1977 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 846763"];
1978 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 846764"];
1979 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 846765"];
1980 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 846766"];
1981 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 846767"];
1982 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 846768"];
1983 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 846769"];
1984 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 846770"];
1985 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 846771"];
1986 [label="builder.AddIfNotNull(_lazyNullableAttribute); 846772"];
1987 [label="builder.AddIfNotNull(_lazyNullableAttribute); 846773"];
1988 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 846774"];
1989 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 846775"];
1990 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 846776"];
1991 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 846777"];
1992 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 846778"];
1993 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 846779"];
1994 [label="return builder.ToImmutableAndFree(); 846780"];
1995 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 846781"];
1996 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 846782"];
1997 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 846783"];
1998 [label="param GetTopLevelSourceTypeDefinitions(this) 846784"];
1999 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 846785"];
2000 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 846786"];
2001 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 846787"];
2002 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 846788"];
2003 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 846789"];
2004 [label="var ns = namespacesToProcess.Pop(); 846790"];
2005 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 846791"];
2006 [label="param GetTopLevelSourceTypeDefinitions(this) 846792"];
2007 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 846793"];
2008 [label="param GetSourceAssemblyAttributes(this) 846794"];
2009 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 846795"];
2010 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 846796"];
2011 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 846797"];
2012 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 846798"];
2013 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 846799"];
2014 [label="param GetSpecialType(SpecialType specialType) 846800"];
2015 [label="param GetSpecialType(this) 846801"];
2016 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 846802"];
2017 [label="NamedTypeSymbol result; 846803"];
2018 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 846804"];
2019 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 846805"];
2020 [label="Assembly 846806"];
2021 [label="GetBoundReferenceManager() 846807"];
2022 [label="GetBoundReferenceManager(); 846808"];
2023 [label="result = Assembly.GetSpecialType(specialType); 846809"];
2024 [label="result = Assembly.GetSpecialType(specialType); 846810"];
2025 [label="Debug.Assert(result.SpecialType == specialType); 846811"];
2026 [label="return result; 846812"];
2027 [label="GetBoundReferenceManager() 846813"];
2028 [label="GetBoundReferenceManager(); 846814"];
2029 [label="Debug.Assert(result.SpecialType == specialType); 846815"];
2030 [label="SourceAssembly 846816"];
2031 [label="GetBoundReferenceManager() 846817"];
2032 [label="param GetBoundReferenceManager(this) 846818"];
2033 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 846819"];
2034 [label="return _referenceManager; 846820"];
2035 [label="GetBoundReferenceManager(); 846821"];
2036 [label="GetBoundReferenceManager() 846822"];
2037 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 846823"];
2038 [label="param Translate(MethodSymbol methodSymbol) 846824"];
2039 [label="param Translate(SyntaxNode syntaxNodeOpt) 846825"];
2040 [label="param Translate(DiagnosticBag diagnostics) 846826"];
2041 [label="param Translate(BoundArgListOperator optArgList = null) 846827"];
2042 [label="param Translate(bool needDeclaration = false) 846828"];
2043 [label="param Translate(this) 846829"];
2044 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 846830"];
2045 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 846831"];
2046 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 846832"];
2047 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 846833"];
2048 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 846834"];
2049 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 846835"];
2050 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 846836"];
2051 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 846837"];
2052 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 846838"];
2053 [label="param Translate(MethodSymbol methodSymbol) 846839"];
2054 [label="param Translate(SyntaxNode syntaxNodeOpt) 846840"];
2055 [label="param Translate(DiagnosticBag diagnostics) 846841"];
2056 [label="param Translate(bool needDeclaration) 846842"];
2057 [label="param Translate(this) 846843"];
2058 [label="object reference; 846844"];
2059 [label="Cci.IMethodReference methodRef; 846845"];
2060 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 846846"];
2061 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 846847"];
2062 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 846848"];
2063 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 846849"];
2064 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 846850"];
2065 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 846851"];
2066 [label="bool typeIsGeneric = IsGenericType(container); 846852"];
2067 [label="IsGenericType(container) 846853"];
2068 [label="param IsGenericType(NamedTypeSymbol toCheck) 846854"];
2069 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 846855"];
2070 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 846856"];
2071 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 846857"];
2072 [label="toCheck = toCheck.ContainingType; 846858"];
2073 [label="return false; 846859"];
2074 [label="bool typeIsGeneric = IsGenericType(container); 846860"];
2075 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 846861"];
2076 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 846862"];
2077 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 846863"];
2078 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 846864"];
2079 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 846865"];
2080 [label="return methodSymbol.GetCciAdapter(); 846866"];
2081 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 846867"];
2082 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 846868"];
2083 [label="return unexpandedMethodRef; 846869"];
2084 [label="param Translate(TypeSymbol typeSymbol) 846870"];
2085 [label="param Translate(SyntaxNode syntaxNodeOpt) 846871"];
2086 [label="param Translate(DiagnosticBag diagnostics) 846872"];
2087 [label="param Translate(this) 846873"];
2088 [label="Debug.Assert(diagnostics != null); 846874"];
2089 [label="Debug.Assert(diagnostics != null); 846875"];
2090 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 846876"];
2091 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 846877"];
2092 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 846878"];
2093 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 846879"];
2094 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 846880"];
2095 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 846881"];
2096 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 846882"];
2097 [label="param Translate(SyntaxNode syntaxNodeOpt) 846883"];
2098 [label="param Translate(DiagnosticBag diagnostics) 846884"];
2099 [label="param Translate(bool fromImplements = false) 846885"];
2100 [label="param Translate(bool needDeclaration = false) 846886"];
2101 [label="param Translate(this) 846887"];
2102 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 846888"];
2103 [label="Debug.Assert(diagnostics != null); 846889"];
2104 [label="Debug.Assert(diagnostics != null); 846890"];
2105 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 846891"];
2106 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 846892"];
2107 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 846893"];
2108 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 846894"];
2109 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 846895"];
2110 [label="object reference; 846896"];
2111 [label="Cci.INamedTypeReference typeRef; 846897"];
2112 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 846898"];
2113 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 846899"];
2114 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 846900"];
2115 [label="IsGenericType(container) 846901"];
2116 [label="param IsGenericType(NamedTypeSymbol toCheck) 846902"];
2117 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 846903"];
2118 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 846904"];
2119 [label="return false; 846905"];
2120 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 846906"];
2121 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 846907"];
2122 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 846908"];
2123 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 846909"];
2124 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 846910"];
2125 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 846911"];
2126 [label="param Translate(SyntaxNode syntaxNodeOpt) 846912"];
2127 [label="param Translate(DiagnosticBag diagnostics) 846913"];
2128 [label="param Translate(bool fromImplements = false) 846914"];
2129 [label="param Translate(bool needDeclaration = false) 846915"];
2130 [label="param Translate(this) 846916"];
2131 [label="Debug.Assert(diagnostics != null); 846917"];
2132 [label="Debug.Assert(diagnostics != null); 846918"];
2133 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 846919"];
2134 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 846920"];
2135 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 846921"];
2136 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 846922"];
2137 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 846923"];
2138 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 846924"];
2139 [label="param Translate(ModuleSymbol module) 846925"];
2140 [label="param Translate(DiagnosticBag diagnostics) 846926"];
2141 [label="param Translate(this) 846927"];
2142 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 846928"];
2143 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 846929"];
2144 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 846930"];
2145 [label="if ((object)module == null)\n            {\n                return null;\n            } 846931"];
2146 [label="if ((object)module == null)\n            {\n                return null;\n            } 846932"];
2147 [label="Cci.IModuleReference moduleRef; 846933"];
2148 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 846934"];
2149 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 846935"];
2150 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 846936"];
2151 [label="return moduleRef; 846937"];
2152 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 846938"];
2153 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 846939"];
2154 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 846940"];
2155 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 846941"];
2156 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 846942"];
2157 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 846943"];
2158 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 846944"];
2159 [label="param Translate(this) 846945"];
2160 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 846946"];
2161 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 846947"];
2162 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 846948"];
2163 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 846949"];
2164 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 846950"];
2165 [label="MustBeWrapped(@params.First()) 846951"];
2166 [label="param MustBeWrapped(ParameterSymbol param) 846952"];
2167 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 846953"];
2168 [label="var container = param.ContainingSymbol; 846954"];
2169 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 846955"];
2170 [label="ContainerIsGeneric(container) 846956"];
2171 [label="param ContainerIsGeneric(Symbol container) 846957"];
2172 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 846958"];
2173 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 846959"];
2174 [label="IsGenericType(container.ContainingType) 846960"];
2175 [label="param IsGenericType(NamedTypeSymbol toCheck) 846961"];
2176 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 846962"];
2177 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 846963"];
2178 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 846964"];
2179 [label="toCheck = toCheck.ContainingType; 846965"];
2180 [label="return false; 846966"];
2181 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 846967"];
2182 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 846968"];
2183 [label="return false; 846969"];
2184 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 846970"];
2185 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 846971"];
2186 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 846972"];
2187 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 846973"];
2188 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 846974"];
2189 [label="param MustBeWrapped(ParameterSymbol param) 846975"];
2190 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 846976"];
2191 [label="var container = param.ContainingSymbol; 846977"];
2192 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 846978"];
2193 [label="ContainerIsGeneric(container) 846979"];
2194 [label="param ContainerIsGeneric(Symbol container) 846980"];
2195 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 846981"];
2196 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 846982"];
2197 [label="IsGenericType(container.ContainingType) 846983"];
2198 [label="param IsGenericType(NamedTypeSymbol toCheck) 846984"];
2199 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 846985"];
2200 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 846986"];
2201 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 846987"];
2202 [label="toCheck = toCheck.ContainingType; 846988"];
2203 [label="return false; 846989"];
2204 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 846990"];
2205 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 846991"];
2206 [label="return false; 846992"];
2207 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 846993"];
2208 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 846994"];
2209 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 846995"];
2210 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 846996"];
2211 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 846997"];
2212 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 846998"];
2213 [label="param Translate(SyntaxNode syntaxNodeOpt) 846999"];
2214 [label="param Translate(DiagnosticBag diagnostics) 847000"];
2215 [label="param Translate(bool fromImplements = false) 847001"];
2216 [label="param Translate(bool needDeclaration = false) 847002"];
2217 [label="Debug.Assert(diagnostics != null); 847003"];
2218 [label="Debug.Assert(diagnostics != null); 847004"];
2219 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847005"];
2220 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847006"];
2221 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 847007"];
2222 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847008"];
2223 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847009"];
2224 [label="object reference; 847010"];
2225 [label="Cci.INamedTypeReference typeRef; 847011"];
2226 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 847012"];
2227 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847013"];
2228 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847014"];
2229 [label="IsGenericType(container) 847015"];
2230 [label="param IsGenericType(NamedTypeSymbol toCheck) 847016"];
2231 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847017"];
2232 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847018"];
2233 [label="return false; 847019"];
2234 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847020"];
2235 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847021"];
2236 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 847022"];
2237 [label="param IsPlatformType(Cci.ITypeReference typeRef) 847023"];
2238 [label="param IsPlatformType(Cci.PlatformType platformType) 847024"];
2239 [label="param IsPlatformType(this) 847025"];
2240 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 847026"];
2241 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 847027"];
2242 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 847028"];
2243 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 847029"];
2244 [label="return namedType.SpecialType == (SpecialType)platformType; 847030"];
2245 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 847031"];
2246 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 847032"];
2247 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 847033"];
2248 [label="param Translate(SyntaxNode syntaxNodeOpt) 847034"];
2249 [label="param Translate(DiagnosticBag diagnostics) 847035"];
2250 [label="param Translate(bool fromImplements = false) 847036"];
2251 [label="param Translate(bool needDeclaration = false) 847037"];
2252 [label="Debug.Assert(diagnostics != null); 847038"];
2253 [label="Debug.Assert(diagnostics != null); 847039"];
2254 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847040"];
2255 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847041"];
2256 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 847042"];
2257 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847043"];
2258 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847044"];
2259 [label="object reference; 847045"];
2260 [label="Cci.INamedTypeReference typeRef; 847046"];
2261 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 847047"];
2262 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847048"];
2263 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847049"];
2264 [label="IsGenericType(container) 847050"];
2265 [label="param IsGenericType(NamedTypeSymbol toCheck) 847051"];
2266 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847052"];
2267 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847053"];
2268 [label="return false; 847054"];
2269 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847055"];
2270 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847056"];
2271 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 847057"];
2272 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847058"];
2273 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847059"];
2274 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 847060"];
2275 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847061"];
2276 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847062"];
2277 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 847063"];
2278 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 847064"];
2279 [label="param MustBeWrapped(ParameterSymbol param) 847065"];
2280 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 847066"];
2281 [label="var container = param.ContainingSymbol; 847067"];
2282 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 847068"];
2283 [label="ContainerIsGeneric(container) 847069"];
2284 [label="param ContainerIsGeneric(Symbol container) 847070"];
2285 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847071"];
2286 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847072"];
2287 [label="IsGenericType(container.ContainingType) 847073"];
2288 [label="param IsGenericType(NamedTypeSymbol toCheck) 847074"];
2289 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847075"];
2290 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847076"];
2291 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 847077"];
2292 [label="toCheck = toCheck.ContainingType; 847078"];
2293 [label="return false; 847079"];
2294 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847080"];
2295 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847081"];
2296 [label="param MustBeWrapped(ParameterSymbol param) 847082"];
2297 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 847083"];
2298 [label="var container = param.ContainingSymbol; 847084"];
2299 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 847085"];
2300 [label="ContainerIsGeneric(container) 847086"];
2301 [label="param ContainerIsGeneric(Symbol container) 847087"];
2302 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847088"];
2303 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847089"];
2304 [label="IsGenericType(container.ContainingType) 847090"];
2305 [label="param IsGenericType(NamedTypeSymbol toCheck) 847091"];
2306 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847092"];
2307 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847093"];
2308 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 847094"];
2309 [label="toCheck = toCheck.ContainingType; 847095"];
2310 [label="return false; 847096"];
2311 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847097"];
2312 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847098"];
2313 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 847099"];
2314 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 847100"];
2315 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 847101"];
2316 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 847102"];
2317 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 847103"];
2318 [label="bool typeIsGeneric = IsGenericType(container); 847104"];
2319 [label="IsGenericType(container) 847105"];
2320 [label="param IsGenericType(NamedTypeSymbol toCheck) 847106"];
2321 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847107"];
2322 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847108"];
2323 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 847109"];
2324 [label="toCheck = toCheck.ContainingType; 847110"];
2325 [label="return false; 847111"];
2326 [label="bool typeIsGeneric = IsGenericType(container); 847112"];
2327 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 847113"];
2328 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 847114"];
2329 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 847115"];
2330 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 847116"];
2331 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 847117"];
2332 [label="toCheck = toCheck.ContainingType; 847118"];
2333 [label="param GetSourceAssemblySecurityAttributes(this) 847119"];
2334 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 847120"];
2335 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 847121"];
2336 [label="return Translate(corLibrary, context.Diagnostics); 847122"];
2337 [label="param Translate(DiagnosticBag diagnostics) 847123"];
2338 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 847124"];
2339 [label="return (Cci.IAssemblyReference)reference; 847125"];
2340 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 847126"];
2341 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 847127"];
2342 [label="param GetSourceModuleAttributes(this) 847128"];
2343 [label="return SourceModule.GetCustomAttributesToEmit(this); 847129"];
2344 [label="return SourceModule.GetCustomAttributesToEmit(this); 847130"];
2345 [label="return SourceModule.GetCustomAttributesToEmit(this); 847131"];
2346 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 847132"];
2347 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 847133"];
2348 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 847134"];
2349 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 847135"];
2350 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 847136"];
2351 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 847137"];
2352 [label="return GetNeedsGeneratedAttributesInternal(); 847138"];
2353 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 847139"];
2354 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 847140"];
2355 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 847141"];
2356 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 847142"];
2357 [label="return; 847143"];
2358 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 847144"];
2359 [label="param GetExportedTypes(DiagnosticBag diagnostics) 847145"];
2360 [label="param GetExportedTypes(this) 847146"];
2361 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 847147"];
2362 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 847148"];
2363 [label="CalculateExportedTypes() 847149"];
2364 [label="param CalculateExportedTypes(this) 847150"];
2365 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 847151"];
2366 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 847152"];
2367 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 847153"];
2368 [label="var modules = sourceAssembly.Modules; 847154"];
2369 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 847155"];
2370 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 847156"];
2371 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 847157"];
2372 [label="sourceAssembly.DeclaringCompilation.Options 847158"];
2373 [label="get\n            {\n                return _options;\n            } 847159"];
2374 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 847160"];
2375 [label="GetForwardedTypes(sourceAssembly, builder); 847161"];
2376 [label="GetForwardedTypes(sourceAssembly, builder); 847162"];
2377 [label="GetForwardedTypes(sourceAssembly, builder) 847163"];
2378 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 847164"];
2379 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 847165"];
2380 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 847166"];
2381 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 847167"];
2382 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 847168"];
2383 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 847169"];
2384 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 847170"];
2385 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 847171"];
2386 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 847172"];
2387 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 847173"];
2388 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 847174"];
2389 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 847175"];
2390 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 847176"];
2391 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 847177"];
2392 [label="sourceAssembly.DeclaringCompilation.Options 847178"];
2393 [label="get\n            {\n                return _options;\n            } 847179"];
2394 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 847180"];
2395 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 847181"];
2396 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 847182"];
2397 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 847183"];
2398 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 847184"];
2399 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 847185"];
2400 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 847186"];
2401 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 847187"];
2402 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 847188"];
2403 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 847189"];
2404 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 847190"];
2405 [label="return seenTopLevelForwardedTypes; 847191"];
2406 [label="GetForwardedTypes(sourceAssembly, builder); 847192"];
2407 [label="return builder.ToImmutableAndFree(); 847193"];
2408 [label="_lazyExportedTypes = CalculateExportedTypes(); 847194"];
2409 [label="_lazyExportedTypes 847195"];
2410 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 847196"];
2411 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 847197"];
2412 [label="return _lazyExportedTypes; 847198"];
2413 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 847199"];
2414 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 847200"];
2415 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 847201"];
2416 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 847202"];
2417 [label="=> _sourceAssembly 847203"];
2418 [label="_sourceAssembly 847204"];
2419 [label="=> _metadataName 847205"];
2420 [label="_metadataName 847206"];
2421 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 847207"];
2422 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847208"];
2423 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847209"];
2424 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 847210"];
2425 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847211"];
2426 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847212"];
2427 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 847213"];
2428 [label="get { return _metadataName; } 847214"];
2429 [label="return _metadataName; 847215"];
2430 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 847216"];
2431 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847217"];
2432 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847218"];
2433 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 847219"];
2434 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847220"];
2435 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847221"];
2436 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 847222"];
2437 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 847223"];
2438 [label="GetBoundReferenceManager() 847224"];
2439 [label="GetBoundReferenceManager(); 847225"];
2440 [label="Debug.Assert(result.SpecialType == specialType); 847226"];
2441 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 847227"];
2442 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 847228"];
2443 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 847229"];
2444 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 847230"];
2445 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 847231"];
2446 [label="bool typeIsGeneric = IsGenericType(container); 847232"];
2447 [label="IsGenericType(container) 847233"];
2448 [label="param IsGenericType(NamedTypeSymbol toCheck) 847234"];
2449 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847235"];
2450 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847236"];
2451 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 847237"];
2452 [label="toCheck = toCheck.ContainingType; 847238"];
2453 [label="return false; 847239"];
2454 [label="bool typeIsGeneric = IsGenericType(container); 847240"];
2455 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 847241"];
2456 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 847242"];
2457 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 847243"];
2458 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 847244"];
2459 [label="param MustBeWrapped(ParameterSymbol param) 847245"];
2460 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 847246"];
2461 [label="var container = param.ContainingSymbol; 847247"];
2462 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 847248"];
2463 [label="ContainerIsGeneric(container) 847249"];
2464 [label="param ContainerIsGeneric(Symbol container) 847250"];
2465 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847251"];
2466 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847252"];
2467 [label="IsGenericType(container.ContainingType) 847253"];
2468 [label="param IsGenericType(NamedTypeSymbol toCheck) 847254"];
2469 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847255"];
2470 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847256"];
2471 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 847257"];
2472 [label="toCheck = toCheck.ContainingType; 847258"];
2473 [label="return false; 847259"];
2474 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847260"];
2475 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847261"];
2476 [label="param MustBeWrapped(ParameterSymbol param) 847262"];
2477 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 847263"];
2478 [label="var container = param.ContainingSymbol; 847264"];
2479 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 847265"];
2480 [label="ContainerIsGeneric(container) 847266"];
2481 [label="param ContainerIsGeneric(Symbol container) 847267"];
2482 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847268"];
2483 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847269"];
2484 [label="IsGenericType(container.ContainingType) 847270"];
2485 [label="param IsGenericType(NamedTypeSymbol toCheck) 847271"];
2486 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847272"];
2487 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847273"];
2488 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 847274"];
2489 [label="toCheck = toCheck.ContainingType; 847275"];
2490 [label="return false; 847276"];
2491 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847277"];
2492 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847278"];
2493 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 847279"];
2494 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 847280"];
2495 [label="param Translate(SyntaxNode syntaxNodeOpt) 847281"];
2496 [label="param Translate(DiagnosticBag diagnostics) 847282"];
2497 [label="param Translate(bool fromImplements = false) 847283"];
2498 [label="param Translate(bool needDeclaration = false) 847284"];
2499 [label="Debug.Assert(diagnostics != null); 847285"];
2500 [label="Debug.Assert(diagnostics != null); 847286"];
2501 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847287"];
2502 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847288"];
2503 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 847289"];
2504 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847290"];
2505 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847291"];
2506 [label="object reference; 847292"];
2507 [label="Cci.INamedTypeReference typeRef; 847293"];
2508 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 847294"];
2509 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847295"];
2510 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847296"];
2511 [label="IsGenericType(container) 847297"];
2512 [label="param IsGenericType(NamedTypeSymbol toCheck) 847298"];
2513 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847299"];
2514 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847300"];
2515 [label="return false; 847301"];
2516 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847302"];
2517 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847303"];
2518 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 847304"];
2519 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 847305"];
2520 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 847306"];
2521 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 847307"];
2522 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 847308"];
2523 [label="GetBoundReferenceManager() 847309"];
2524 [label="param GetBoundReferenceManager(this) 847310"];
2525 [label="GetBoundReferenceManager(); 847311"];
2526 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 847312"];
2527 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 847313"];
2528 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 847314"];
2529 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 847315"];
2530 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 847316"];
2531 [label="bool typeIsGeneric = IsGenericType(container); 847317"];
2532 [label="IsGenericType(container) 847318"];
2533 [label="param IsGenericType(NamedTypeSymbol toCheck) 847319"];
2534 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847320"];
2535 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847321"];
2536 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 847322"];
2537 [label="toCheck = toCheck.ContainingType; 847323"];
2538 [label="return false; 847324"];
2539 [label="bool typeIsGeneric = IsGenericType(container); 847325"];
2540 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 847326"];
2541 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 847327"];
2542 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 847328"];
2543 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 847329"];
2544 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847330"];
2545 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847331"];
2546 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 847332"];
2547 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847333"];
2548 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847334"];
2549 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 847335"];
2550 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 847336"];
2551 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 847337"];
2552 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 847338"];
2553 [label="param Translate(SyntaxNode syntaxNodeOpt) 847339"];
2554 [label="param Translate(DiagnosticBag diagnostics) 847340"];
2555 [label="param Translate(bool fromImplements = false) 847341"];
2556 [label="param Translate(bool needDeclaration = false) 847342"];
2557 [label="Debug.Assert(diagnostics != null); 847343"];
2558 [label="Debug.Assert(diagnostics != null); 847344"];
2559 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847345"];
2560 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 847346"];
2561 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 847347"];
2562 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847348"];
2563 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 847349"];
2564 [label="object reference; 847350"];
2565 [label="Cci.INamedTypeReference typeRef; 847351"];
2566 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 847352"];
2567 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847353"];
2568 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847354"];
2569 [label="IsGenericType(container) 847355"];
2570 [label="param IsGenericType(NamedTypeSymbol toCheck) 847356"];
2571 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847357"];
2572 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847358"];
2573 [label="return false; 847359"];
2574 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847360"];
2575 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 847361"];
2576 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 847362"];
2577 [label="param MustBeWrapped(ParameterSymbol param) 847363"];
2578 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 847364"];
2579 [label="var container = param.ContainingSymbol; 847365"];
2580 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 847366"];
2581 [label="ContainerIsGeneric(container) 847367"];
2582 [label="param ContainerIsGeneric(Symbol container) 847368"];
2583 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847369"];
2584 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847370"];
2585 [label="IsGenericType(container.ContainingType) 847371"];
2586 [label="param IsGenericType(NamedTypeSymbol toCheck) 847372"];
2587 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847373"];
2588 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847374"];
2589 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 847375"];
2590 [label="toCheck = toCheck.ContainingType; 847376"];
2591 [label="return false; 847377"];
2592 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847378"];
2593 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847379"];
2594 [label="param MustBeWrapped(ParameterSymbol param) 847380"];
2595 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 847381"];
2596 [label="var container = param.ContainingSymbol; 847382"];
2597 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 847383"];
2598 [label="ContainerIsGeneric(container) 847384"];
2599 [label="param ContainerIsGeneric(Symbol container) 847385"];
2600 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847386"];
2601 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847387"];
2602 [label="IsGenericType(container.ContainingType) 847388"];
2603 [label="param IsGenericType(NamedTypeSymbol toCheck) 847389"];
2604 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847390"];
2605 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 847391"];
2606 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 847392"];
2607 [label="toCheck = toCheck.ContainingType; 847393"];
2608 [label="return false; 847394"];
2609 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847395"];
2610 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 847396"];
2611 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 847397"];
2612 [label="toCheck = toCheck.ContainingType; 847398"];
2613 [label="param GetSymbolToLocationMap(this) 847399"];
2614 [label="var result = new MultiDictionary<Cci.DebugSourceDocument, Cci.DefinitionWithLocation>(); 847400"];
2615 [label="var namespacesAndTypesToProcess = new Stack<NamespaceOrTypeSymbol>(); 847401"];
2616 [label="namespacesAndTypesToProcess.Push(SourceModule.GlobalNamespace); 847402"];
2617 [label="namespacesAndTypesToProcess.Push(SourceModule.GlobalNamespace); 847403"];
2618 [label="Location location = null; 847404"];
2619 [label="while (namespacesAndTypesToProcess.Count > 0)\n            {\n                NamespaceOrTypeSymbol symbol = namespacesAndTypesToProcess.Pop();\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n\n                        // filtering out synthesized symbols not having real source \n                        // locations such as anonymous types, etc...\n                        if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    case SymbolKind.NamedType:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n                        if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n                }\n            } 847405"];
2620 [label="while (namespacesAndTypesToProcess.Count > 0)\n            {\n                NamespaceOrTypeSymbol symbol = namespacesAndTypesToProcess.Pop();\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n\n                        // filtering out synthesized symbols not having real source \n                        // locations such as anonymous types, etc...\n                        if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    case SymbolKind.NamedType:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n                        if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n                }\n            } 847406"];
2621 [label="NamespaceOrTypeSymbol symbol = namespacesAndTypesToProcess.Pop(); 847407"];
2622 [label="switch (symbol.Kind)\n                {\n                    case SymbolKind.Namespace:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n\n                        // filtering out synthesized symbols not having real source \n                        // locations such as anonymous types, etc...\n                        if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    case SymbolKind.NamedType:\n                        location = GetSmallestSourceLocationOrNull(symbol);\n                        if (location != null)\n                        {\n                            //  add this named type location\n                            AddSymbolLocation(result, location, (Cci.IDefinition)symbol.GetCciAdapter());\n\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    case SymbolKind.Method:\n                                        // NOTE: Dev11 does not add synthesized static constructors to this map,\n                                        //       but adds synthesized instance constructors, Roslyn adds both\n                                        var method = (MethodSymbol)member;\n                                        if (!method.ShouldEmit())\n                                        {\n                                            break;\n                                        }\n\n                                        AddSymbolLocation(result, member);\n                                        break;\n\n                                    case SymbolKind.Property:\n                                        AddSymbolLocation(result, member);\n                                        break;\n                                    case SymbolKind.Field:\n                                        // NOTE: Dev11 does not add synthesized backing fields for properties,\n                                        //       but adds backing fields for events, Roslyn adds both\n                                        {\n                                            var field = (FieldSymbol)member;\n                                            AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                        }\n                                        break;\n\n                                    case SymbolKind.Event:\n                                        AddSymbolLocation(result, member);\n                                        //  event backing fields do not show up in GetMembers\n                                        {\n                                            FieldSymbol field = ((EventSymbol)member).AssociatedField;\n                                            if ((object)field != null)\n                                            {\n                                                AddSymbolLocation(result, field.TupleUnderlyingField ?? field);\n                                            }\n                                        }\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        }\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n                } 847408"];
2623 [label="location = GetSmallestSourceLocationOrNull(symbol); 847409"];
2624 [label="GetSmallestSourceLocationOrNull(symbol) 847410"];
2625 [label="param GetSmallestSourceLocationOrNull(Symbol symbol) 847411"];
2626 [label="param GetSmallestSourceLocationOrNull(this) 847412"];
2627 [label="CSharpCompilation compilation = symbol.DeclaringCompilation; 847413"];
2628 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 847414"];
2629 [label="Debug.Assert(Compilation == compilation, 'How did we get symbol from different compilation?'); 847415"];
2630 [label="Location result = null; 847416"];
2631 [label="foreach (var loc in symbol.Locations)\n            {\n                if (loc.IsInSource && (result == null || compilation.CompareSourceLocations(result, loc) > 0))\n                {\n                    result = loc;\n                }\n            } 847417"];
2632 [label="if (loc.IsInSource && (result == null || compilation.CompareSourceLocations(result, loc) > 0))\n                {\n                    result = loc;\n                } 847418"];
2633 [label="if (loc.IsInSource && (result == null || compilation.CompareSourceLocations(result, loc) > 0))\n                {\n                    result = loc;\n                } 847419"];
2634 [label="result = loc; 847420"];
2635 [label="return result; 847421"];
2636 [label="if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        } 847422"];
2637 [label="if (location != null)\n                        {\n                            foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            }\n                        } 847423"];
2638 [label="foreach (var member in symbol.GetMembers())\n                            {\n                                switch (member.Kind)\n                                {\n                                    case SymbolKind.Namespace:\n                                    case SymbolKind.NamedType:\n                                        namespacesAndTypesToProcess.Push((NamespaceOrTypeSymbol)member);\n                                        break;\n\n                                    default:\n                                        throw ExceptionUtilities.UnexpectedValue(member.Kind);\n                                }\n                            } 847424"];
2639 [label="return result; 847425"];
2640 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 847426"];
2641 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 847427"];
2642 [label="return _referenceManager; 847428"];
2643 [label="GetBoundReferenceManager(); 847429"];
2644 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 847430"];
2645 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 847431"];
2646 [label="pdb = pdbStream.ToImmutable(); 847432"];
2647 [label="pdb = pdbStream.ToImmutable(); 847433"];
2648 [label="pdbStream.Dispose(); 847434"];
2649 [label="diagnostics.AddRange(result.Diagnostics); 847435"];
2650 [label="diagnostics.AddRange(result.Diagnostics); 847436"];
2651 [label="assembly = executableStream.ToImmutable(); 847437"];
2652 [label="assembly = executableStream.ToImmutable(); 847438"];
2653 [label="if (result.Success)\n            {\n                return new EmitOutput(assembly, pdb);\n            } 847439"];
2654 [label="return new EmitOutput(assembly, pdb); 847440"];
2655 [label="return new EmitOutput(assembly, pdb); 847441"];
2656 [label="return new EmitOutput(assembly, pdb); 847442"];
2657 [label="new EmitOutput(assembly, pdb) 847443"];
2658 [label="param EmitOutput(ImmutableArray<byte> assembly) 847444"];
2659 [label="param EmitOutput(ImmutableArray<byte> pdb) 847445"];
2660 [label="param EmitOutput(this) 847446"];
2661 [label="Assembly 847447"];
2662 [label="if (pdb.IsDefault)\n            {\n                // We didn't emit a discrete PDB file, so we'll look for an embedded PDB instead.\n                using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                }\n            } 847448"];
2663 [label="Pdb 847449"];
2664 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 847450"];
2665 [label="get { return this.Assembly.GetPublicSymbol(); } 847451"];
2666 [label="this.Assembly 847452"];
2667 [label="get\n            {\n                return SourceAssembly;\n            } 847453"];
2668 [label="SourceAssembly 847454"];
2669 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 847455"];
2670 [label="GetBoundReferenceManager() 847456"];
2671 [label="param GetBoundReferenceManager(this) 847457"];
2672 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 847458"];
2673 [label="return _referenceManager; 847459"];
2674 [label="GetBoundReferenceManager(); 847460"];
2675 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 847461"];
2676 [label="return this.Assembly.GetPublicSymbol(); 847462"];
2677 [label="get { return _options; } 847463"];
2678 [label="_diagnostics = testEnvironment.GetDiagnostics(); 847464"];
2679 [label="_diagnostics 847465"];
2680 [label="EmittedAssemblyData = testEnvironment.GetMainImage(); 847466"];
2681 [label="EmittedAssemblyData 847467"];
2682 [label="EmittedAssemblyPdb = testEnvironment.GetMainPdb(); 847468"];
2683 [label="EmittedAssemblyPdb 847469"];
2684 [label="_testData = ((IInternalRuntimeEnvironment)testEnvironment).GetCompilationTestData(); 847470"];
2685 [label="_testData 847471"];
2686 [label="return _compilation.Assembly.Identity.GetDisplayName(); 847472"];
2687 [label="_compilation.Assembly 847473"];
2688 [label="get { return this.Assembly.GetPublicSymbol(); } 847474"];
2689 [label="this.Assembly 847475"];
2690 [label="SourceAssembly 847476"];
2691 [label="GetBoundReferenceManager() 847477"];
2692 [label="param GetBoundReferenceManager(this) 847478"];
2693 [label="GetBoundReferenceManager(); 847479"];
2694 [label="return _compilation.Assembly.Identity.GetDisplayName(); 847480"];
2695 [label="_allModuleData = testEnvironment.GetAllModuleData(); 847481"];
2696 [label="_allModuleData 847482"];
2697 [label="testEnvironment.Verify(peVerify); 847483"];
2698 [label="testEnvironment.Verify(peVerify); 847484"];
2699 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 847485"];
2700 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 847486"];
2701 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 847487"];
2702 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 847488"];
2703 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 847489"];
2704 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 847490"];
2705 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 847491"];
2706 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 847492"];
2707 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 847493"];
2708 [label="RunValidators(verifier, assemblyValidator, symbolValidator); 847494"];
2709 [label="RunValidators(verifier, assemblyValidator, symbolValidator); 847495"];
2710 [label="RunValidators(verifier, assemblyValidator, symbolValidator); 847496"];
2711 [label="RunValidators(verifier, assemblyValidator, symbolValidator) 847497"];
2712 [label="param RunValidators(CompilationVerifier verifier) 847498"];
2713 [label="param RunValidators(Action<PEAssembly> assemblyValidator) 847499"];
2714 [label="param RunValidators(Action<IModuleSymbol> symbolValidator) 847500"];
2715 [label="CustomAssert.True(assemblyValidator != null || symbolValidator != null); 847501"];
2716 [label="CustomAssert.True(assemblyValidator != null || symbolValidator != null); 847502"];
2717 [label="verifier.GetMetadata() 847503"];
2718 [label="param GetMetadata(this) 847504"];
2719 [label="if (EmittedAssemblyData == null)\n            {\n                throw new InvalidOperationException('You must call Emit before calling GetAllModuleMetadata.');\n            } 847505"];
2720 [label="if (EmittedAssemblyData == null)\n            {\n                throw new InvalidOperationException('You must call Emit before calling GetAllModuleMetadata.');\n            } 847506"];
2721 [label="if (_compilation.Options.OutputKind.IsNetModule())\n            {\n                var metadata = ModuleMetadata.CreateFromImage(EmittedAssemblyData);\n                metadata.Module.PretendThereArentNoPiaLocalTypes();\n                return metadata;\n            }\n            else\n            {\n                var images = new List<ImmutableArray<byte>>\n                {\n                    EmittedAssemblyData\n                };\n\n                if (_allModuleData != null)\n                {\n                    images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image));\n                }\n\n                return AssemblyMetadata.Create(images.Select(image =>\n                {\n                    var metadata = ModuleMetadata.CreateFromImage(image);\n                    metadata.Module.PretendThereArentNoPiaLocalTypes();\n                    return metadata;\n                }));\n            } 847507"];
2722 [label="_compilation.Options 847508"];
2723 [label="get { return _options; } 847509"];
2724 [label="var images = new List<ImmutableArray<byte>>\n                {\n                    EmittedAssemblyData\n                }; 847510"];
2725 [label="var images = new List<ImmutableArray<byte>>\n                {\n                    EmittedAssemblyData\n                }; 847511"];
2726 [label="if (_allModuleData != null)\n                {\n                    images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image));\n                } 847512"];
2727 [label="if (_allModuleData != null)\n                {\n                    images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image));\n                } 847513"];
2728 [label="images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image)); 847514"];
2729 [label="images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image)); 847515"];
2730 [label="images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image)); 847516"];
2731 [label="images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image)); 847517"];
2732 [label="return AssemblyMetadata.Create(images.Select(image =>\n                {\n                    var metadata = ModuleMetadata.CreateFromImage(image);\n                    metadata.Module.PretendThereArentNoPiaLocalTypes();\n                    return metadata;\n                })); 847518"];
2733 [label="return AssemblyMetadata.Create(images.Select(image =>\n                {\n                    var metadata = ModuleMetadata.CreateFromImage(image);\n                    metadata.Module.PretendThereArentNoPiaLocalTypes();\n                    return metadata;\n                })); 847519"];
2734 [label="return AssemblyMetadata.Create(images.Select(image =>\n                {\n                    var metadata = ModuleMetadata.CreateFromImage(image);\n                    metadata.Module.PretendThereArentNoPiaLocalTypes();\n                    return metadata;\n                })); 847520"];
2735 [label="var emittedMetadata = verifier.GetMetadata(); 847521"];
2736 [label="if (assemblyValidator != null)\n            {\n                CustomAssert.Equal(MetadataImageKind.Assembly, emittedMetadata.Kind);\n\n                var assembly = ((AssemblyMetadata)emittedMetadata).GetAssembly();\n                assemblyValidator(assembly);\n            } 847522"];
2737 [label="if (assemblyValidator != null)\n            {\n                CustomAssert.Equal(MetadataImageKind.Assembly, emittedMetadata.Kind);\n\n                var assembly = ((AssemblyMetadata)emittedMetadata).GetAssembly();\n                assemblyValidator(assembly);\n            } 847523"];
2738 [label="CustomAssert.Equal(MetadataImageKind.Assembly, emittedMetadata.Kind); 847524"];
2739 [label="CustomAssert.Equal(MetadataImageKind.Assembly, emittedMetadata.Kind); 847525"];
2740 [label="var assembly = ((AssemblyMetadata)emittedMetadata).GetAssembly(); 847526"];
2741 [label="assemblyValidator(assembly); 847527"];
2742 [label="assemblyValidator(assembly); 847528"];
2743 [label="param GetMetadataReader(this PEAssembly assembly) 847529"];
2744 [label="return assembly.ManifestModule.MetadataReader; 847530"];
2745 [label="'ROSLYN_DIFFTOOL' 847531"];
2746 [label="Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 847532"];
2747 [label="s_diffToolPath = Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 847533"];
2748 [label="param Equal(IEnumerable<T> expected) 847534"];
2749 [label="param Equal(IEnumerable<T> actual) 847535"];
2750 [label="param Equal(IEqualityComparer<T> comparer = null) 847536"];
2751 [label="param Equal(string message = null) 847537"];
2752 [label="param Equal(string itemSeparator = null) 847538"];
2753 [label="param Equal(Func<T, string> itemInspector = null) 847539"];
2754 [label="param Equal(string expectedValueSourcePath = null) 847540"];
2755 [label="param Equal(int expectedValueSourceLine = 0) 847541"];
2756 [label="var toReturn = true; 847542"];
2757 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 847543"];
2758 [label="if (expected == null)\n            {\n                CustomAssert.Null(actual);\n            }\n            else\n            {\n                CustomAssert.NotNull(actual);\n            } 847544"];
2759 [label="CustomAssert.NotNull(actual); 847545"];
2760 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 847546"];
2761 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 847547"];
2762 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 847548"];
2763 [label="SequenceEqual(expected, actual, comparer) 847549"];
2764 [label="param SequenceEqual(IEnumerable<T> expected) 847550"];
2765 [label="param SequenceEqual(IEnumerable<T> actual) 847551"];
2766 [label="param SequenceEqual(IEqualityComparer<T> comparer = null) 847552"];
2767 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 847553"];
2768 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 847554"];
2769 [label="if (ReferenceEquals(expected, actual))\n            {\n                return true;\n            } 847555"];
2770 [label="var enumerator1 = expected.GetEnumerator(); 847556"];
2771 [label="var enumerator2 = actual.GetEnumerator(); 847557"];
2772 [label="while (true)\n            {\n                var hasNext1 = enumerator1.MoveNext();\n                var hasNext2 = enumerator2.MoveNext();\n\n                if (hasNext1 != hasNext2)\n                {\n                    return false;\n                }\n\n                if (!hasNext1)\n                {\n                    break;\n                }\n\n                var value1 = enumerator1.Current;\n                var value2 = enumerator2.Current;\n\n                if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                }\n            } 847558"];
2773 [label="var hasNext1 = enumerator1.MoveNext(); 847559"];
2774 [label="new[] { (byte)ILOpCode.Ldnull, (byte)ILOpCode.Throw } 847560"];
2775 [label="ThrowNull = new[] { (byte)ILOpCode.Ldnull, (byte)ILOpCode.Throw } 847561"];
2776 [label="var hasNext2 = enumerator2.MoveNext(); 847562"];
2777 [label="var hasNext2 = enumerator2.MoveNext(); 847563"];
2778 [label="param Dump(this MetadataReader reader) 847564"];
2779 [label="param Dump(EntityHandle handle) 847565"];
2780 [label="string value = DumpRec(reader, handle); 847566"];
2781 [label="string value = DumpRec(reader, handle); 847567"];
2782 [label="DumpRec(reader, handle) 847568"];
2783 [label="param DumpRec(this MetadataReader reader) 847569"];
2784 [label="param DumpRec(EntityHandle handle) 847570"];
2785 [label="switch (handle.Kind)\n            {\n                case HandleKind.AssemblyReference:\n                    return reader.GetString(reader.GetAssemblyReference((AssemblyReferenceHandle)handle).Name);\n                case HandleKind.TypeDefinition:\n                    {\n                        TypeDefinition type = reader.GetTypeDefinition((TypeDefinitionHandle)handle);\n                        return getQualifiedName(type.Namespace, type.Name);\n                    }\n                case HandleKind.MethodDefinition:\n                    {\n                        MethodDefinition method = reader.GetMethodDefinition((MethodDefinitionHandle)handle);\n                        var blob = reader.GetBlobReader(method.Signature);\n                        var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null);\n                        var signature = decoder.DecodeMethodSignature(ref blob);\n                        var parameters = signature.ParameterTypes.Join(', ');\n                        return $'{signature.ReturnType} {DumpRec(reader, method.GetDeclaringType())}.{reader.GetString(method.Name)}({parameters})';\n                    }\n                case HandleKind.MemberReference:\n                    {\n                        MemberReference member = reader.GetMemberReference((MemberReferenceHandle)handle);\n                        var blob = reader.GetBlobReader(member.Signature);\n                        var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null);\n                        var signature = decoder.DecodeMethodSignature(ref blob);\n                        var parameters = signature.ParameterTypes.Join(', ');\n                        return $'{signature.ReturnType} {DumpRec(reader, member.Parent)}.{reader.GetString(member.Name)}({parameters})';\n                    }\n                case HandleKind.TypeReference:\n                    {\n                        TypeReference type = reader.GetTypeReference((TypeReferenceHandle)handle);\n                        return getQualifiedName(type.Namespace, type.Name);\n                    }\n                case HandleKind.FieldDefinition:\n                    {\n                        FieldDefinition field = reader.GetFieldDefinition((FieldDefinitionHandle)handle);\n                        var name = reader.GetString(field.Name);\n\n                        var blob = reader.GetBlobReader(field.Signature);\n                        var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null);\n                        var type = decoder.DecodeFieldSignature(ref blob);\n\n                        return $'{type} {name}';\n                    }\n                case HandleKind.TypeSpecification:\n                    {\n                        var typeSpec = reader.GetTypeSpecification((TypeSpecificationHandle)handle);\n                        var blob = reader.GetBlobReader(typeSpec.Signature);\n                        var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null);\n                        var type = decoder.DecodeType(ref blob);\n\n                        return $'{type}';\n                    }\n                default:\n                    return null;\n            } 847571"];
2786 [label="MemberReference member = reader.GetMemberReference((MemberReferenceHandle)handle); 847572"];
2787 [label="MemberReference member = reader.GetMemberReference((MemberReferenceHandle)handle); 847573"];
2788 [label="var blob = reader.GetBlobReader(member.Signature); 847574"];
2789 [label="new ConstantSignatureVisualizer() 847575"];
2790 [label="param ConstantSignatureVisualizer(this) 847576"];
2791 [label="Instance = new ConstantSignatureVisualizer() 847577"];
2792 [label="var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null); 847578"];
2793 [label="var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null); 847579"];
2794 [label="var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null); 847580"];
2795 [label="var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null); 847581"];
2796 [label="var signature = decoder.DecodeMethodSignature(ref blob); 847582"];
2797 [label="var signature = decoder.DecodeMethodSignature(ref blob); 847583"];
2798 [label="var signature = decoder.DecodeMethodSignature(ref blob); 847584"];
2799 [label="param GetPrimitiveType(PrimitiveTypeCode typeCode) 847585"];
2800 [label="=> typeCode.ToString() 847586"];
2801 [label="typeCode.ToString() 847587"];
2802 [label="var parameters = signature.ParameterTypes.Join(', '); 847588"];
2803 [label="var parameters = signature.ParameterTypes.Join(', '); 847589"];
2804 [label="return $'{signature.ReturnType} {DumpRec(reader, member.Parent)}.{reader.GetString(member.Name)}({parameters})'; 847590"];
2805 [label="return $'{signature.ReturnType} {DumpRec(reader, member.Parent)}.{reader.GetString(member.Name)}({parameters})'; 847591"];
2806 [label="return $'{signature.ReturnType} {DumpRec(reader, member.Parent)}.{reader.GetString(member.Name)}({parameters})'; 847592"];
2807 [label="DumpRec(reader, member.Parent) 847593"];
2808 [label="param DumpRec(this MetadataReader reader) 847594"];
2809 [label="param DumpRec(EntityHandle handle) 847595"];
2810 [label="switch (handle.Kind)\n            {\n                case HandleKind.AssemblyReference:\n                    return reader.GetString(reader.GetAssemblyReference((AssemblyReferenceHandle)handle).Name);\n                case HandleKind.TypeDefinition:\n                    {\n                        TypeDefinition type = reader.GetTypeDefinition((TypeDefinitionHandle)handle);\n                        return getQualifiedName(type.Namespace, type.Name);\n                    }\n                case HandleKind.MethodDefinition:\n                    {\n                        MethodDefinition method = reader.GetMethodDefinition((MethodDefinitionHandle)handle);\n                        var blob = reader.GetBlobReader(method.Signature);\n                        var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null);\n                        var signature = decoder.DecodeMethodSignature(ref blob);\n                        var parameters = signature.ParameterTypes.Join(', ');\n                        return $'{signature.ReturnType} {DumpRec(reader, method.GetDeclaringType())}.{reader.GetString(method.Name)}({parameters})';\n                    }\n                case HandleKind.MemberReference:\n                    {\n                        MemberReference member = reader.GetMemberReference((MemberReferenceHandle)handle);\n                        var blob = reader.GetBlobReader(member.Signature);\n                        var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null);\n                        var signature = decoder.DecodeMethodSignature(ref blob);\n                        var parameters = signature.ParameterTypes.Join(', ');\n                        return $'{signature.ReturnType} {DumpRec(reader, member.Parent)}.{reader.GetString(member.Name)}({parameters})';\n                    }\n                case HandleKind.TypeReference:\n                    {\n                        TypeReference type = reader.GetTypeReference((TypeReferenceHandle)handle);\n                        return getQualifiedName(type.Namespace, type.Name);\n                    }\n                case HandleKind.FieldDefinition:\n                    {\n                        FieldDefinition field = reader.GetFieldDefinition((FieldDefinitionHandle)handle);\n                        var name = reader.GetString(field.Name);\n\n                        var blob = reader.GetBlobReader(field.Signature);\n                        var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null);\n                        var type = decoder.DecodeFieldSignature(ref blob);\n\n                        return $'{type} {name}';\n                    }\n                case HandleKind.TypeSpecification:\n                    {\n                        var typeSpec = reader.GetTypeSpecification((TypeSpecificationHandle)handle);\n                        var blob = reader.GetBlobReader(typeSpec.Signature);\n                        var decoder = new SignatureDecoder<string, object>(ConstantSignatureVisualizer.Instance, reader, genericContext: null);\n                        var type = decoder.DecodeType(ref blob);\n\n                        return $'{type}';\n                    }\n                default:\n                    return null;\n            } 847596"];
2811 [label="TypeReference type = reader.GetTypeReference((TypeReferenceHandle)handle); 847597"];
2812 [label="return getQualifiedName(type.Namespace, type.Name); 847598"];
2813 [label="getQualifiedName(type.Namespace, type.Name) 847599"];
2814 [label="string getQualifiedName(StringHandle leftHandle, StringHandle rightHandle)\n            {\n                string name = reader.GetString(rightHandle);\n                if (!leftHandle.IsNil)\n                {\n                    name = reader.GetString(leftHandle) + '.' + name;\n                }\n                return name;\n            } 847600"];
2815 [label="string name = reader.GetString(rightHandle); 847601"];
2816 [label="if (!leftHandle.IsNil)\n                {\n                    name = reader.GetString(leftHandle) + '.' + name;\n                } 847602"];
2817 [label="name = reader.GetString(leftHandle) + '.' + name; 847603"];
2818 [label="name = reader.GetString(leftHandle) + '.' + name; 847604"];
2819 [label="name = reader.GetString(leftHandle) + '.' + name; 847605"];
2820 [label="return name; 847606"];
2821 [label="string kind = handle.Kind.ToString(); 847607"];
2822 [label="if (value != null)\n            {\n                return $'{kind}:{value}';\n            }\n            else\n            {\n                return kind;\n            } 847608"];
2823 [label="if (value != null)\n            {\n                return $'{kind}:{value}';\n            }\n            else\n            {\n                return kind;\n            } 847609"];
2824 [label="return $'{kind}:{value}'; 847610"];
2825 [label="return $'{kind}:{value}'; 847611"];
2826 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 847612"];
2827 [label="if (!hasNext1)\n                {\n                    break;\n                } 847613"];
2828 [label="var value1 = enumerator1.Current; 847614"];
2829 [label="var value2 = enumerator2.Current; 847615"];
2830 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 847616"];
2831 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 847617"];
2832 [label="comparer != null 847618"];
2833 [label="new AssertEqualityComparer<T>() 847619"];
2834 [label="param AssertEqualityComparer(this) 847620"];
2835 [label="s_instance = new AssertEqualityComparer<T>() 847621"];
2836 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 847622"];
2837 [label="if (!(comparer != null ? comparer.Equals(value1, value2) : AssertEqualityComparer<T>.Equals(value1, value2)))\n                {\n                    return false;\n                } 847623"];
2838 [label="AssertEqualityComparer<T>.Equals(value1, value2) 847624"];
2839 [label="param Equals(T left) 847625"];
2840 [label="param Equals(T right) 847626"];
2841 [label="return s_instance.Equals(left, right); 847627"];
2842 [label="return s_instance.Equals(left, right); 847628"];
2843 [label="s_instance.Equals(left, right) 847629"];
2844 [label="param Equals(T x) 847630"];
2845 [label="param Equals(T y) 847631"];
2846 [label="param Equals(this) 847632"];
2847 [label="CanBeNull() 847633"];
2848 [label="var type = typeof(T); 847634"];
2849 [label="return !type.GetTypeInfo().IsValueType ||\n                    (type.GetTypeInfo().IsGenericType && type.GetGenericTypeDefinition() == typeof(Nullable<>)); 847635"];
2850 [label="if (CanBeNull())\n                {\n                    if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    }\n\n                    if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    }\n                } 847636"];
2851 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 847637"];
2852 [label="if (object.Equals(x, default(T)))\n                    {\n                        return object.Equals(y, default(T));\n                    } 847638"];
2853 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 847639"];
2854 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 847640"];
2855 [label="if (object.Equals(y, default(T)))\n                    {\n                        return false;\n                    } 847641"];
2856 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 847642"];
2857 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 847643"];
2858 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 847644"];
2859 [label="if (x is IEquatable<T> equatable)\n                {\n                    return equatable.Equals(y);\n                } 847645"];
2860 [label="return equatable.Equals(y); 847646"];
2861 [label="return equatable.Equals(y); 847647"];
2862 [label="=> typeCode.ToString() 847648"];
2863 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 847649"];
2864 [label="if (!hasNext1)\n                {\n                    break;\n                } 847650"];
2865 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 847651"];
2866 [label="param GetTypeFromReference(MetadataReader reader) 847652"];
2867 [label="param GetTypeFromReference(TypeReferenceHandle handle) 847653"];
2868 [label="param GetTypeFromReference(byte rawTypeKind) 847654"];
2869 [label="param GetTypeFromReference(this) 847655"];
2870 [label="var typeRef = reader.GetTypeReference(handle); 847656"];
2871 [label="var typeRef = reader.GetTypeReference(handle); 847657"];
2872 [label="var name = reader.GetString(typeRef.Name); 847658"];
2873 [label="typeRef.Namespace.IsNil 847659"];
2874 [label="return typeRef.Namespace.IsNil ? name : reader.GetString(typeRef.Namespace) + '.' + name; 847660"];
2875 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 847661"];
2876 [label="if (x.GetType() != y.GetType())\n                {\n                    return false;\n                } 847662"];
2877 [label="=> typeCode.ToString() 847663"];
2878 [label="if (hasNext1 != hasNext2)\n                {\n                    return false;\n                } 847664"];
2879 [label="if (!hasNext1)\n                {\n                    break;\n                } 847665"];
2880 [label="return true; 847666"];
2881 [label="if (SequenceEqual(expected, actual, comparer))\n            {\n                return true;\n            } 847667"];
2882 [label="return true; 847668"];
2883 [label="assemblyValidator(assembly); 847669"];
2884 [label="if (symbolValidator != null)\n            {\n                var reference = emittedMetadata.Kind == MetadataImageKind.Assembly\n                    ? ((AssemblyMetadata)emittedMetadata).GetReference()\n                    : ((ModuleMetadata)emittedMetadata).GetReference();\n\n                var moduleSymbol = verifier.GetSymbolFromMetadata(reference, verifier.Compilation.Options.MetadataImportOptions);\n                symbolValidator(moduleSymbol);\n            } 847670"];
2885 [label="if (symbolValidator != null)\n            {\n                var reference = emittedMetadata.Kind == MetadataImageKind.Assembly\n                    ? ((AssemblyMetadata)emittedMetadata).GetReference()\n                    : ((ModuleMetadata)emittedMetadata).GetReference();\n\n                var moduleSymbol = verifier.GetSymbolFromMetadata(reference, verifier.Compilation.Options.MetadataImportOptions);\n                symbolValidator(moduleSymbol);\n            } 847671"];
2886 [label="RunValidators(verifier, assemblyValidator, symbolValidator); 847672"];
2887 [label="return verifier; 847673"];
2888 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 847674"];
2889 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 847675"];
2890 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 847676"];
2891 [label="result = verifier; 847677"];
2892 [label="CustomAssert.NotNull(result); 847678"];
2893 [label="return result; 847679"];
2894 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 847680"];
2895 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 847681"];
2896 [label="CompileAndVerify(source, emitOptions: emitRefAssembly, assemblyValidator: assemblyValidator); 847682"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 1;
13 -> 1;
14 -> 13;
14 -> 1;
15 -> 1;
16 -> 14;
16 -> 15;
17 -> 16;
17 -> 15;
18 -> 15;
19 -> 17;
19 -> 18;
20 -> 18;
21 -> 19;
21 -> 20;
21 -> 18;
22 -> 18;
22 -> 1;
23 -> 11;
23 -> 1;
24 -> 12;
24 -> 1;
25 -> 1;
26 -> 1;
27 -> 22;
27 -> 26;
28 -> 25;
28 -> 26;
29 -> 25;
29 -> 26;
30 -> 25;
30 -> 26;
31 -> 25;
31 -> 26;
32 -> 24;
32 -> 26;
33 -> 25;
33 -> 26;
34 -> 25;
34 -> 26;
35 -> 25;
35 -> 26;
36 -> 25;
36 -> 26;
37 -> 25;
37 -> 26;
38 -> 25;
38 -> 26;
39 -> 25;
39 -> 26;
40 -> 23;
40 -> 26;
41 -> 25;
41 -> 26;
42 -> 25;
42 -> 26;
43 -> 10;
43 -> 26;
44 -> 26;
45 -> 35;
45 -> 44;
45 -> 26;
46 -> 45;
46 -> 26;
47 -> 46;
47 -> 38;
47 -> 26;
48 -> 27;
48 -> 26;
49 -> 28;
49 -> 26;
50 -> 47;
50 -> 26;
51 -> 39;
51 -> 26;
52 -> 41;
52 -> 26;
53 -> 26;
54 -> 53;
55 -> 54;
55 -> 26;
56 -> 26;
57 -> 26;
58 -> 48;
58 -> 57;
59 -> 49;
59 -> 57;
60 -> 50;
60 -> 57;
61 -> 51;
61 -> 57;
62 -> 52;
62 -> 57;
63 -> 55;
63 -> 57;
64 -> 56;
64 -> 57;
65 -> 56;
65 -> 57;
66 -> 58;
66 -> 57;
67 -> 62;
67 -> 57;
68 -> 59;
68 -> 57;
69 -> 57;
70 -> 67;
70 -> 69;
71 -> 68;
71 -> 69;
72 -> 70;
72 -> 69;
73 -> 69;
74 -> 72;
74 -> 73;
75 -> 74;
75 -> 73;
76 -> 75;
77 -> 0;
77 -> 76;
78 -> 77;
79 -> 78;
80 -> 78;
81 -> 0;
81 -> 80;
82 -> 81;
82 -> 79;
82 -> 78;
83 -> 82;
83 -> 76;
84 -> 69;
85 -> 71;
85 -> 84;
85 -> 69;
86 -> 83;
86 -> 85;
87 -> 60;
87 -> 57;
88 -> 61;
88 -> 57;
89 -> 63;
89 -> 57;
90 -> 64;
90 -> 57;
91 -> 65;
91 -> 57;
92 -> 57;
93 -> 66;
93 -> 92;
94 -> 86;
94 -> 92;
95 -> 87;
95 -> 92;
96 -> 88;
96 -> 92;
97 -> 89;
97 -> 92;
98 -> 90;
98 -> 92;
99 -> 91;
99 -> 92;
100 -> 93;
100 -> 92;
101 -> 94;
101 -> 92;
102 -> 95;
102 -> 92;
103 -> 96;
103 -> 92;
104 -> 97;
104 -> 92;
105 -> 98;
105 -> 92;
106 -> 99;
106 -> 92;
107 -> 92;
108 -> 107;
108 -> 92;
109 -> 92;
110 -> 100;
110 -> 109;
111 -> 101;
111 -> 109;
112 -> 102;
112 -> 109;
113 -> 103;
113 -> 109;
114 -> 104;
114 -> 109;
115 -> 105;
115 -> 109;
116 -> 106;
116 -> 109;
117 -> 108;
117 -> 109;
118 -> 113;
118 -> 109;
119 -> 115;
119 -> 109;
120 -> 109;
121 -> 118;
121 -> 120;
122 -> 119;
122 -> 120;
123 -> 110;
123 -> 120;
124 -> 123;
124 -> 21;
124 -> 120;
125 -> 124;
126 -> 122;
126 -> 124;
127 -> 121;
127 -> 124;
128 -> 124;
129 -> 125;
129 -> 128;
130 -> 126;
130 -> 128;
131 -> 127;
131 -> 128;
132 -> 125;
132 -> 128;
133 -> 128;
134 -> 131;
134 -> 133;
134 -> 128;
135 -> 0;
135 -> 134;
136 -> 129;
136 -> 128;
137 -> 0;
137 -> 128;
138 -> 137;
138 -> 132;
138 -> 128;
139 -> 128;
140 -> 136;
140 -> 138;
140 -> 139;
140 -> 0;
140 -> 128;
141 -> 140;
141 -> 128;
142 -> 135;
142 -> 128;
143 -> 130;
143 -> 128;
144 -> 128;
145 -> 141;
145 -> 142;
145 -> 143;
145 -> 144;
145 -> 140;
145 -> 0;
145 -> 128;
146 -> 128;
147 -> 145;
147 -> 146;
148 -> 146;
149 -> 146;
150 -> 147;
150 -> 145;
150 -> 149;
150 -> 146;
151 -> 148;
151 -> 146;
152 -> 146;
153 -> 150;
153 -> 145;
153 -> 149;
153 -> 151;
153 -> 152;
153 -> 148;
153 -> 146;
154 -> 146;
155 -> 154;
155 -> 148;
155 -> 146;
156 -> 148;
156 -> 146;
157 -> 146;
158 -> 156;
158 -> 157;
158 -> 148;
158 -> 155;
158 -> 146;
159 -> 147;
159 -> 146;
160 -> 159;
160 -> 125;
160 -> 124;
161 -> 125;
161 -> 109;
162 -> 109;
163 -> 112;
163 -> 162;
163 -> 109;
164 -> 0;
164 -> 109;
165 -> 117;
165 -> 109;
166 -> 114;
166 -> 161;
166 -> 111;
166 -> 112;
166 -> 109;
167 -> 166;
167 -> 109;
168 -> 109;
169 -> 167;
169 -> 168;
170 -> 0;
170 -> 168;
171 -> 170;
172 -> 109;
173 -> 0;
175 -> 173;
175 -> 174;
176 -> 175;
177 -> 46;
179 -> 177;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
183 -> 166;
183 -> 125;
183 -> 160;
183 -> 145;
183 -> 82;
183 -> 0;
183 -> 46;
183 -> 79;
183 -> 109;
184 -> 109;
185 -> 183;
185 -> 184;
186 -> 183;
186 -> 184;
187 -> 183;
187 -> 184;
188 -> 183;
188 -> 184;
189 -> 185;
189 -> 184;
190 -> 188;
190 -> 184;
191 -> 186;
191 -> 184;
192 -> 187;
192 -> 184;
193 -> 184;
194 -> 184;
195 -> 189;
195 -> 194;
196 -> 190;
196 -> 194;
197 -> 191;
197 -> 194;
198 -> 192;
198 -> 194;
199 -> 193;
199 -> 194;
200 -> 193;
200 -> 194;
201 -> 193;
201 -> 194;
202 -> 193;
202 -> 194;
203 -> 194;
204 -> 196;
204 -> 203;
204 -> 194;
205 -> 202;
205 -> 194;
206 -> 198;
206 -> 194;
207 -> 195;
207 -> 194;
208 -> 196;
208 -> 194;
209 -> 206;
209 -> 194;
210 -> 199;
210 -> 194;
211 -> 200;
211 -> 194;
212 -> 201;
212 -> 194;
213 -> 202;
213 -> 194;
214 -> 194;
215 -> 0;
215 -> 194;
216 -> 196;
216 -> 206;
216 -> 194;
217 -> 194;
218 -> 215;
218 -> 217;
219 -> 216;
219 -> 217;
220 -> 216;
220 -> 217;
221 -> 215;
221 -> 217;
222 -> 213;
222 -> 217;
223 -> 214;
223 -> 217;
224 -> 214;
224 -> 217;
225 -> 218;
225 -> 217;
226 -> 219;
226 -> 217;
227 -> 220;
227 -> 217;
228 -> 221;
228 -> 217;
229 -> 222;
229 -> 217;
230 -> 217;
231 -> 230;
231 -> 225;
231 -> 226;
231 -> 227;
231 -> 228;
231 -> 229;
231 -> 0;
231 -> 206;
231 -> 217;
232 -> 230;
232 -> 217;
233 -> 223;
233 -> 230;
233 -> 217;
234 -> 194;
235 -> 207;
235 -> 234;
236 -> 208;
236 -> 234;
237 -> 209;
237 -> 234;
238 -> 210;
238 -> 234;
239 -> 211;
239 -> 234;
240 -> 212;
240 -> 234;
241 -> 213;
241 -> 234;
242 -> 214;
242 -> 234;
243 -> 214;
243 -> 234;
244 -> 214;
244 -> 234;
245 -> 214;
245 -> 234;
246 -> 214;
246 -> 234;
247 -> 214;
247 -> 234;
248 -> 235;
248 -> 234;
249 -> 236;
249 -> 234;
250 -> 237;
250 -> 234;
251 -> 238;
251 -> 234;
252 -> 239;
252 -> 234;
253 -> 240;
253 -> 234;
254 -> 241;
254 -> 234;
255 -> 242;
255 -> 234;
256 -> 243;
256 -> 234;
257 -> 244;
257 -> 234;
258 -> 244;
258 -> 231;
258 -> 234;
259 -> 258;
259 -> 231;
259 -> 232;
259 -> 233;
259 -> 234;
260 -> 245;
260 -> 234;
261 -> 246;
261 -> 234;
262 -> 234;
263 -> 248;
263 -> 262;
264 -> 249;
264 -> 262;
265 -> 250;
265 -> 262;
266 -> 251;
266 -> 262;
267 -> 252;
267 -> 262;
268 -> 253;
268 -> 262;
269 -> 254;
269 -> 262;
270 -> 255;
270 -> 262;
271 -> 256;
271 -> 262;
272 -> 257;
272 -> 262;
273 -> 259;
273 -> 262;
274 -> 260;
274 -> 262;
275 -> 261;
275 -> 262;
276 -> 247;
276 -> 262;
277 -> 263;
277 -> 262;
278 -> 265;
278 -> 262;
279 -> 273;
279 -> 262;
280 -> 269;
280 -> 262;
281 -> 274;
281 -> 262;
282 -> 275;
282 -> 262;
283 -> 262;
284 -> 283;
284 -> 277;
284 -> 278;
284 -> 279;
284 -> 280;
284 -> 281;
284 -> 282;
284 -> 206;
284 -> 259;
284 -> 262;
285 -> 283;
285 -> 262;
286 -> 283;
286 -> 262;
287 -> 283;
287 -> 262;
288 -> 283;
288 -> 262;
289 -> 283;
289 -> 262;
290 -> 283;
290 -> 262;
291 -> 283;
291 -> 262;
292 -> 283;
292 -> 262;
293 -> 283;
293 -> 262;
294 -> 283;
294 -> 262;
295 -> 283;
295 -> 262;
296 -> 283;
296 -> 262;
297 -> 283;
297 -> 262;
298 -> 283;
298 -> 262;
299 -> 283;
299 -> 262;
300 -> 283;
300 -> 262;
301 -> 283;
301 -> 262;
302 -> 283;
302 -> 262;
303 -> 283;
303 -> 262;
304 -> 283;
304 -> 262;
305 -> 283;
305 -> 262;
306 -> 283;
306 -> 262;
307 -> 283;
307 -> 262;
308 -> 283;
308 -> 262;
309 -> 283;
309 -> 262;
310 -> 283;
310 -> 262;
311 -> 262;
312 -> 311;
312 -> 283;
312 -> 262;
313 -> 283;
313 -> 262;
314 -> 313;
314 -> 284;
314 -> 285;
314 -> 286;
314 -> 287;
314 -> 288;
314 -> 289;
314 -> 290;
314 -> 291;
314 -> 292;
314 -> 293;
314 -> 294;
314 -> 295;
314 -> 296;
314 -> 297;
314 -> 298;
314 -> 299;
314 -> 300;
314 -> 301;
314 -> 302;
314 -> 303;
314 -> 304;
314 -> 305;
314 -> 306;
314 -> 307;
314 -> 308;
314 -> 309;
314 -> 310;
314 -> 312;
314 -> 311;
314 -> 262;
315 -> 314;
315 -> 283;
315 -> 262;
316 -> 264;
316 -> 283;
316 -> 262;
317 -> 283;
317 -> 262;
318 -> 262;
319 -> 262;
320 -> 317;
320 -> 319;
321 -> 318;
321 -> 319;
322 -> 321;
322 -> 319;
323 -> 321;
323 -> 319;
324 -> 321;
324 -> 319;
325 -> 320;
325 -> 321;
325 -> 319;
326 -> 318;
326 -> 283;
326 -> 262;
327 -> 283;
327 -> 314;
327 -> 262;
328 -> 327;
328 -> 314;
328 -> 315;
328 -> 316;
328 -> 326;
328 -> 325;
328 -> 323;
328 -> 324;
328 -> 262;
329 -> 328;
329 -> 283;
329 -> 262;
330 -> 283;
330 -> 328;
330 -> 262;
331 -> 330;
331 -> 328;
331 -> 329;
331 -> 262;
332 -> 331;
332 -> 283;
332 -> 262;
333 -> 283;
333 -> 331;
333 -> 262;
334 -> 333;
334 -> 331;
334 -> 332;
334 -> 262;
335 -> 334;
335 -> 283;
335 -> 262;
336 -> 283;
336 -> 334;
336 -> 262;
337 -> 336;
337 -> 334;
337 -> 335;
337 -> 262;
338 -> 337;
338 -> 283;
338 -> 262;
339 -> 283;
339 -> 262;
340 -> 339;
340 -> 337;
340 -> 338;
340 -> 262;
341 -> 340;
341 -> 283;
341 -> 262;
342 -> 272;
342 -> 340;
342 -> 262;
343 -> 262;
344 -> 342;
344 -> 343;
345 -> 343;
346 -> 344;
346 -> 343;
347 -> 346;
347 -> 340;
347 -> 341;
347 -> 343;
348 -> 0;
348 -> 343;
349 -> 348;
349 -> 345;
349 -> 343;
350 -> 349;
350 -> 262;
351 -> 350;
351 -> 283;
351 -> 262;
352 -> 269;
352 -> 262;
353 -> 352;
354 -> 266;
354 -> 353;
354 -> 352;
355 -> 267;
355 -> 353;
355 -> 352;
356 -> 354;
356 -> 355;
356 -> 352;
357 -> 268;
357 -> 353;
357 -> 352;
358 -> 356;
358 -> 357;
358 -> 352;
359 -> 271;
359 -> 262;
360 -> 283;
360 -> 340;
360 -> 341;
360 -> 351;
360 -> 359;
361 -> 359;
362 -> 283;
362 -> 361;
363 -> 362;
363 -> 360;
363 -> 361;
364 -> 270;
364 -> 359;
365 -> 360;
365 -> 363;
365 -> 364;
365 -> 359;
366 -> 365;
366 -> 283;
366 -> 359;
367 -> 272;
367 -> 283;
367 -> 262;
368 -> 283;
368 -> 365;
368 -> 262;
369 -> 262;
370 -> 283;
370 -> 365;
370 -> 369;
370 -> 262;
371 -> 194;
372 -> 197;
372 -> 371;
372 -> 194;
373 -> 197;
373 -> 372;
374 -> 372;
375 -> 373;
375 -> 374;
376 -> 214;
376 -> 374;
377 -> 374;
378 -> 375;
378 -> 377;
378 -> 374;
379 -> 375;
379 -> 374;
380 -> 379;
380 -> 365;
380 -> 366;
380 -> 367;
380 -> 374;
381 -> 374;
382 -> 376;
382 -> 380;
382 -> 374;
383 -> 381;
383 -> 374;
384 -> 382;
384 -> 380;
384 -> 374;
385 -> 383;
385 -> 384;
385 -> 381;
385 -> 380;
385 -> 374;
386 -> 374;
387 -> 374;
388 -> 375;
388 -> 374;
389 -> 388;
389 -> 385;
389 -> 374;
390 -> 389;
391 -> 389;
392 -> 389;
393 -> 376;
393 -> 392;
393 -> 389;
394 -> 389;
395 -> 381;
395 -> 394;
395 -> 392;
395 -> 389;
396 -> 386;
396 -> 389;
396 -> 395;
397 -> 387;
397 -> 389;
398 -> 381;
398 -> 395;
398 -> 374;
399 -> 376;
399 -> 398;
399 -> 374;
400 -> 375;
400 -> 374;
401 -> 374;
402 -> 400;
402 -> 401;
403 -> 382;
403 -> 401;
404 -> 403;
404 -> 398;
404 -> 401;
405 -> 403;
405 -> 398;
405 -> 401;
406 -> 403;
406 -> 398;
406 -> 401;
407 -> 403;
407 -> 398;
407 -> 401;
408 -> 403;
408 -> 398;
408 -> 401;
409 -> 402;
409 -> 401;
410 -> 403;
410 -> 398;
410 -> 409;
410 -> 401;
411 -> 401;
412 -> 408;
412 -> 411;
412 -> 401;
413 -> 410;
413 -> 412;
414 -> 412;
415 -> 413;
415 -> 414;
416 -> 403;
416 -> 414;
417 -> 415;
417 -> 414;
418 -> 416;
418 -> 410;
418 -> 414;
419 -> 414;
420 -> 414;
421 -> 417;
421 -> 420;
422 -> 418;
422 -> 420;
423 -> 418;
423 -> 420;
424 -> 418;
424 -> 420;
425 -> 418;
425 -> 420;
426 -> 419;
426 -> 420;
427 -> 419;
427 -> 420;
428 -> 420;
428 -> 421;
428 -> 422;
428 -> 423;
428 -> 424;
428 -> 425;
428 -> 410;
429 -> 419;
429 -> 412;
430 -> 429;
430 -> 374;
431 -> 376;
431 -> 428;
431 -> 374;
432 -> 396;
432 -> 374;
433 -> 430;
433 -> 374;
434 -> 374;
435 -> 431;
435 -> 434;
436 -> 432;
436 -> 434;
437 -> 433;
437 -> 434;
438 -> 376;
438 -> 434;
439 -> 438;
439 -> 428;
439 -> 434;
440 -> 434;
441 -> 438;
441 -> 440;
442 -> 441;
442 -> 428;
442 -> 440;
443 -> 442;
443 -> 440;
444 -> 443;
444 -> 434;
445 -> 438;
445 -> 428;
445 -> 420;
445 -> 426;
445 -> 434;
446 -> 434;
447 -> 445;
447 -> 446;
448 -> 447;
448 -> 445;
448 -> 446;
449 -> 434;
450 -> 448;
450 -> 449;
451 -> 435;
451 -> 434;
452 -> 436;
452 -> 434;
453 -> 437;
453 -> 434;
454 -> 434;
455 -> 434;
456 -> 439;
456 -> 455;
457 -> 439;
457 -> 455;
458 -> 439;
458 -> 455;
459 -> 444;
459 -> 455;
460 -> 448;
460 -> 455;
461 -> 450;
461 -> 455;
462 -> 450;
462 -> 455;
463 -> 451;
463 -> 455;
464 -> 452;
464 -> 455;
465 -> 453;
465 -> 455;
466 -> 450;
466 -> 455;
467 -> 454;
467 -> 455;
468 -> 454;
468 -> 455;
469 -> 459;
469 -> 455;
470 -> 460;
470 -> 455;
471 -> 461;
471 -> 455;
472 -> 465;
472 -> 450;
472 -> 455;
473 -> 467;
473 -> 455;
474 -> 455;
475 -> 469;
475 -> 474;
476 -> 470;
476 -> 474;
477 -> 471;
477 -> 474;
478 -> 473;
478 -> 474;
479 -> 468;
479 -> 474;
480 -> 478;
480 -> 474;
481 -> 474;
482 -> 481;
482 -> 474;
483 -> 481;
483 -> 474;
484 -> 481;
484 -> 474;
485 -> 481;
485 -> 474;
486 -> 481;
486 -> 474;
487 -> 481;
487 -> 474;
488 -> 481;
488 -> 474;
489 -> 481;
489 -> 474;
490 -> 481;
490 -> 474;
491 -> 481;
491 -> 474;
492 -> 481;
492 -> 474;
493 -> 481;
493 -> 474;
494 -> 481;
494 -> 474;
495 -> 481;
495 -> 474;
496 -> 481;
496 -> 474;
497 -> 481;
497 -> 474;
498 -> 481;
498 -> 474;
499 -> 481;
499 -> 474;
500 -> 481;
500 -> 474;
501 -> 481;
501 -> 474;
502 -> 481;
502 -> 474;
503 -> 481;
503 -> 474;
504 -> 481;
504 -> 474;
505 -> 481;
505 -> 474;
506 -> 481;
506 -> 474;
507 -> 481;
507 -> 474;
508 -> 474;
509 -> 508;
509 -> 481;
509 -> 474;
510 -> 481;
510 -> 474;
511 -> 481;
511 -> 474;
512 -> 474;
513 -> 474;
514 -> 511;
514 -> 513;
515 -> 512;
515 -> 513;
516 -> 515;
516 -> 513;
517 -> 515;
517 -> 513;
518 -> 515;
518 -> 513;
519 -> 514;
519 -> 515;
519 -> 513;
520 -> 512;
520 -> 481;
520 -> 474;
521 -> 481;
521 -> 474;
522 -> 474;
523 -> 472;
523 -> 522;
524 -> 522;
525 -> 523;
525 -> 522;
526 -> 525;
526 -> 472;
527 -> 525;
528 -> 526;
528 -> 527;
529 -> 462;
529 -> 474;
530 -> 529;
531 -> 475;
531 -> 530;
531 -> 529;
532 -> 476;
532 -> 530;
532 -> 529;
533 -> 531;
533 -> 532;
533 -> 529;
534 -> 477;
534 -> 530;
534 -> 529;
535 -> 533;
535 -> 534;
535 -> 529;
536 -> 463;
536 -> 464;
537 -> 481;
537 -> 464;
538 -> 463;
538 -> 537;
538 -> 472;
538 -> 528;
538 -> 464;
539 -> 463;
539 -> 481;
539 -> 464;
540 -> 481;
540 -> 538;
540 -> 474;
541 -> 474;
542 -> 481;
542 -> 538;
542 -> 541;
542 -> 474;
543 -> 454;
543 -> 374;
544 -> 543;
544 -> 372;
545 -> 544;
545 -> 538;
545 -> 194;
546 -> 544;
546 -> 194;
547 -> 183;
547 -> 546;
547 -> 538;
547 -> 539;
547 -> 465;
547 -> 109;
548 -> 547;
548 -> 109;
549 -> 109;
550 -> 548;
550 -> 549;
551 -> 549;
552 -> 550;
552 -> 551;
553 -> 551;
554 -> 552;
554 -> 547;
554 -> 553;
555 -> 553;
556 -> 554;
556 -> 547;
556 -> 555;
556 -> 553;
557 -> 554;
557 -> 547;
557 -> 556;
558 -> 556;
559 -> 557;
559 -> 558;
560 -> 557;
560 -> 558;
561 -> 557;
561 -> 558;
562 -> 557;
562 -> 558;
563 -> 557;
563 -> 558;
564 -> 558;
565 -> 558;
566 -> 558;
567 -> 558;
568 -> 558;
569 -> 0;
569 -> 558;
570 -> 559;
570 -> 558;
571 -> 564;
571 -> 570;
572 -> 570;
573 -> 560;
573 -> 570;
574 -> 561;
574 -> 570;
575 -> 562;
575 -> 570;
576 -> 563;
576 -> 570;
577 -> 565;
577 -> 570;
578 -> 566;
578 -> 570;
579 -> 567;
579 -> 570;
580 -> 568;
580 -> 570;
581 -> 569;
581 -> 570;
582 -> 570;
583 -> 571;
583 -> 582;
584 -> 572;
584 -> 582;
585 -> 573;
585 -> 582;
586 -> 574;
586 -> 582;
587 -> 575;
587 -> 582;
588 -> 576;
588 -> 582;
589 -> 577;
589 -> 582;
590 -> 578;
590 -> 582;
591 -> 579;
591 -> 582;
592 -> 580;
592 -> 582;
593 -> 581;
593 -> 582;
594 -> 584;
594 -> 547;
594 -> 582;
595 -> 594;
595 -> 0;
595 -> 582;
596 -> 584;
596 -> 582;
597 -> 585;
597 -> 582;
598 -> 588;
598 -> 582;
599 -> 592;
599 -> 582;
600 -> 593;
600 -> 582;
601 -> 582;
602 -> 596;
602 -> 601;
603 -> 597;
603 -> 601;
604 -> 598;
604 -> 601;
605 -> 599;
605 -> 601;
606 -> 600;
606 -> 601;
607 -> 602;
607 -> 603;
607 -> 604;
607 -> 601;
608 -> 602;
608 -> 601;
609 -> 607;
609 -> 601;
610 -> 605;
610 -> 608;
610 -> 609;
610 -> 568;
610 -> 607;
610 -> 601;
611 -> 607;
611 -> 601;
612 -> 606;
612 -> 611;
612 -> 0;
612 -> 610;
612 -> 601;
613 -> 582;
614 -> 584;
614 -> 582;
615 -> 583;
615 -> 614;
615 -> 564;
615 -> 612;
615 -> 582;
616 -> 584;
616 -> 582;
617 -> 589;
617 -> 565;
617 -> 582;
618 -> 589;
618 -> 616;
618 -> 617;
618 -> 565;
618 -> 615;
618 -> 582;
619 -> 564;
619 -> 618;
619 -> 558;
620 -> 565;
620 -> 618;
620 -> 558;
621 -> 566;
621 -> 558;
622 -> 567;
622 -> 558;
623 -> 612;
623 -> 558;
624 -> 558;
625 -> 558;
626 -> 619;
626 -> 625;
627 -> 620;
627 -> 625;
628 -> 621;
628 -> 625;
629 -> 622;
629 -> 625;
630 -> 620;
630 -> 625;
631 -> 623;
631 -> 625;
632 -> 624;
632 -> 625;
633 -> 632;
633 -> 625;
634 -> 632;
634 -> 625;
635 -> 632;
635 -> 625;
636 -> 632;
636 -> 625;
637 -> 632;
637 -> 625;
638 -> 626;
638 -> 625;
639 -> 626;
639 -> 619;
639 -> 625;
640 -> 626;
640 -> 625;
641 -> 630;
641 -> 638;
641 -> 625;
642 -> 0;
642 -> 625;
643 -> 626;
643 -> 632;
643 -> 625;
644 -> 627;
644 -> 632;
644 -> 625;
645 -> 628;
645 -> 632;
645 -> 625;
646 -> 629;
646 -> 632;
646 -> 625;
647 -> 630;
647 -> 632;
647 -> 625;
648 -> 631;
648 -> 632;
648 -> 625;
649 -> 624;
649 -> 556;
650 -> 556;
651 -> 557;
651 -> 649;
651 -> 650;
651 -> 644;
651 -> 645;
651 -> 646;
651 -> 647;
651 -> 648;
651 -> 643;
651 -> 641;
651 -> 619;
651 -> 621;
651 -> 622;
651 -> 556;
652 -> 554;
652 -> 651;
652 -> 553;
653 -> 652;
653 -> 551;
654 -> 653;
654 -> 549;
655 -> 654;
655 -> 651;
655 -> 549;
656 -> 549;
657 -> 654;
657 -> 656;
657 -> 651;
657 -> 549;
658 -> 0;
658 -> 549;
659 -> 657;
659 -> 658;
659 -> 549;
660 -> 116;
660 -> 659;
660 -> 109;
661 -> 547;
661 -> 109;
662 -> 661;
662 -> 26;
663 -> 29;
663 -> 26;
664 -> 30;
664 -> 26;
665 -> 31;
665 -> 26;
666 -> 32;
666 -> 26;
667 -> 33;
667 -> 26;
668 -> 34;
668 -> 26;
669 -> 35;
669 -> 26;
670 -> 36;
670 -> 26;
671 -> 37;
671 -> 26;
672 -> 40;
672 -> 26;
673 -> 42;
673 -> 26;
674 -> 26;
675 -> 662;
675 -> 674;
676 -> 663;
676 -> 674;
677 -> 664;
677 -> 674;
678 -> 665;
678 -> 674;
679 -> 666;
679 -> 674;
680 -> 667;
680 -> 674;
681 -> 668;
681 -> 674;
682 -> 669;
682 -> 674;
683 -> 670;
683 -> 674;
684 -> 671;
684 -> 674;
685 -> 672;
685 -> 674;
686 -> 673;
686 -> 674;
687 -> 43;
687 -> 674;
688 -> 675;
688 -> 674;
689 -> 676;
689 -> 674;
690 -> 677;
690 -> 674;
691 -> 678;
691 -> 674;
692 -> 674;
693 -> 691;
693 -> 692;
694 -> 687;
694 -> 692;
695 -> 692;
696 -> 693;
696 -> 695;
696 -> 692;
697 -> 696;
698 -> 679;
698 -> 674;
699 -> 680;
699 -> 674;
700 -> 674;
701 -> 699;
701 -> 700;
702 -> 687;
702 -> 700;
703 -> 700;
704 -> 701;
704 -> 703;
704 -> 700;
705 -> 704;
706 -> 681;
706 -> 674;
707 -> 682;
707 -> 674;
708 -> 683;
708 -> 674;
709 -> 684;
709 -> 674;
710 -> 685;
710 -> 674;
711 -> 686;
711 -> 674;
712 -> 674;
713 -> 688;
713 -> 712;
714 -> 689;
714 -> 712;
715 -> 690;
715 -> 712;
716 -> 697;
716 -> 712;
717 -> 698;
717 -> 712;
718 -> 705;
718 -> 712;
719 -> 706;
719 -> 712;
720 -> 707;
720 -> 712;
721 -> 708;
721 -> 712;
722 -> 709;
722 -> 712;
723 -> 710;
723 -> 712;
724 -> 711;
724 -> 712;
725 -> 687;
725 -> 712;
726 -> 713;
726 -> 712;
727 -> 712;
728 -> 720;
728 -> 727;
728 -> 712;
729 -> 712;
730 -> 716;
730 -> 729;
730 -> 712;
731 -> 712;
732 -> 713;
732 -> 712;
733 -> 715;
733 -> 712;
734 -> 714;
734 -> 712;
735 -> 719;
735 -> 712;
736 -> 720;
736 -> 712;
737 -> 721;
737 -> 712;
738 -> 712;
739 -> 738;
739 -> 722;
739 -> 712;
740 -> 717;
740 -> 712;
741 -> 718;
741 -> 712;
742 -> 723;
742 -> 712;
743 -> 724;
743 -> 712;
744 -> 712;
745 -> 732;
745 -> 744;
746 -> 733;
746 -> 744;
747 -> 734;
747 -> 744;
748 -> 735;
748 -> 744;
749 -> 736;
749 -> 744;
750 -> 737;
750 -> 744;
751 -> 739;
751 -> 744;
752 -> 740;
752 -> 744;
753 -> 741;
753 -> 744;
754 -> 742;
754 -> 744;
755 -> 743;
755 -> 744;
756 -> 725;
756 -> 744;
757 -> 745;
757 -> 744;
758 -> 756;
758 -> 9;
758 -> 744;
759 -> 746;
759 -> 744;
760 -> 744;
761 -> 744;
762 -> 757;
762 -> 761;
763 -> 758;
763 -> 761;
764 -> 759;
764 -> 761;
765 -> 760;
765 -> 761;
766 -> 765;
766 -> 761;
767 -> 765;
767 -> 761;
768 -> 765;
768 -> 761;
769 -> 765;
769 -> 761;
770 -> 765;
770 -> 761;
771 -> 765;
771 -> 761;
772 -> 762;
772 -> 765;
772 -> 761;
773 -> 764;
773 -> 765;
773 -> 761;
774 -> 763;
774 -> 765;
774 -> 761;
775 -> 749;
775 -> 744;
776 -> 750;
776 -> 744;
777 -> 751;
777 -> 744;
778 -> 747;
778 -> 744;
779 -> 754;
779 -> 744;
780 -> 755;
780 -> 744;
781 -> 748;
781 -> 744;
782 -> 744;
783 -> 775;
783 -> 782;
784 -> 776;
784 -> 782;
785 -> 777;
785 -> 782;
786 -> 778;
786 -> 782;
787 -> 779;
787 -> 782;
788 -> 780;
788 -> 782;
789 -> 781;
789 -> 782;
790 -> 760;
790 -> 782;
791 -> 0;
792 -> 791;
793 -> 792;
794 -> 790;
794 -> 773;
794 -> 782;
795 -> 782;
796 -> 794;
796 -> 795;
797 -> 796;
797 -> 795;
798 -> 793;
798 -> 792;
798 -> 797;
798 -> 795;
799 -> 798;
799 -> 782;
800 -> 786;
800 -> 782;
801 -> 787;
801 -> 782;
802 -> 782;
803 -> 799;
803 -> 802;
804 -> 800;
804 -> 802;
805 -> 801;
805 -> 802;
806 -> 790;
806 -> 802;
808 -> 806;
808 -> 772;
808 -> 802;
809 -> 804;
809 -> 802;
810 -> 805;
810 -> 802;
811 -> 802;
812 -> 808;
812 -> 809;
812 -> 810;
812 -> 811;
812 -> 803;
812 -> 659;
812 -> 11;
812 -> 798;
812 -> 802;
813 -> 812;
813 -> 811;
814 -> 812;
814 -> 811;
815 -> 812;
815 -> 811;
816 -> 812;
816 -> 811;
817 -> 812;
817 -> 811;
818 -> 812;
818 -> 811;
819 -> 813;
819 -> 811;
820 -> 811;
821 -> 819;
821 -> 820;
822 -> 820;
823 -> 821;
823 -> 820;
824 -> 820;
825 -> 823;
825 -> 824;
826 -> 824;
827 -> 825;
827 -> 812;
827 -> 824;
828 -> 824;
829 -> 827;
829 -> 828;
830 -> 824;
831 -> 829;
831 -> 830;
831 -> 824;
832 -> 825;
832 -> 829;
832 -> 824;
833 -> 824;
834 -> 832;
834 -> 833;
835 -> 833;
836 -> 834;
836 -> 835;
837 -> 836;
837 -> 832;
837 -> 835;
838 -> 836;
838 -> 837;
839 -> 837;
840 -> 838;
840 -> 839;
841 -> 839;
842 -> 840;
842 -> 841;
843 -> 841;
844 -> 842;
844 -> 838;
844 -> 843;
845 -> 844;
845 -> 841;
846 -> 845;
846 -> 839;
847 -> 838;
847 -> 839;
848 -> 847;
848 -> 846;
848 -> 839;
849 -> 838;
849 -> 839;
850 -> 839;
851 -> 836;
851 -> 848;
851 -> 837;
852 -> 836;
852 -> 848;
852 -> 835;
853 -> 852;
853 -> 833;
854 -> 826;
854 -> 824;
855 -> 854;
855 -> 820;
856 -> 820;
857 -> 855;
857 -> 856;
857 -> 820;
858 -> 822;
858 -> 820;
859 -> 858;
859 -> 811;
860 -> 0;
860 -> 811;
861 -> 859;
861 -> 811;
862 -> 811;
863 -> 813;
863 -> 862;
863 -> 811;
864 -> 859;
864 -> 811;
865 -> 862;
865 -> 864;
865 -> 863;
865 -> 822;
865 -> 853;
865 -> 811;
866 -> 865;
867 -> 860;
867 -> 865;
868 -> 815;
868 -> 865;
869 -> 816;
869 -> 865;
870 -> 865;
871 -> 866;
871 -> 870;
872 -> 867;
872 -> 870;
873 -> 868;
873 -> 870;
874 -> 869;
874 -> 870;
875 -> 871;
875 -> 853;
875 -> 822;
875 -> 862;
875 -> 863;
875 -> 865;
875 -> 870;
876 -> 875;
877 -> 875;
878 -> 877;
878 -> 853;
878 -> 865;
878 -> 862;
878 -> 863;
878 -> 822;
878 -> 875;
879 -> 877;
879 -> 878;
879 -> 0;
879 -> 875;
880 -> 879;
880 -> 875;
881 -> 878;
881 -> 880;
882 -> 881;
882 -> 880;
883 -> 875;
884 -> 882;
884 -> 883;
884 -> 881;
884 -> 875;
885 -> 872;
885 -> 884;
885 -> 860;
885 -> 0;
885 -> 875;
886 -> 878;
886 -> 875;
887 -> 875;
888 -> 886;
888 -> 887;
889 -> 888;
889 -> 884;
889 -> 0;
889 -> 887;
890 -> 889;
890 -> 887;
891 -> 890;
892 -> 890;
893 -> 879;
893 -> 890;
894 -> 893;
895 -> 882;
895 -> 894;
895 -> 891;
895 -> 893;
896 -> 872;
896 -> 895;
896 -> 885;
896 -> 893;
897 -> 882;
897 -> 893;
898 -> 46;
898 -> 893;
899 -> 891;
899 -> 893;
900 -> 893;
901 -> 897;
901 -> 898;
901 -> 899;
901 -> 900;
901 -> 895;
901 -> 891;
901 -> 893;
902 -> 901;
902 -> 890;
903 -> 873;
903 -> 901;
903 -> 902;
903 -> 890;
904 -> 890;
905 -> 903;
906 -> 872;
906 -> 903;
906 -> 896;
907 -> 903;
908 -> 903;
909 -> 870;
910 -> 813;
910 -> 811;
911 -> 814;
911 -> 811;
912 -> 816;
912 -> 811;
913 -> 817;
913 -> 811;
914 -> 818;
914 -> 811;
915 -> 811;
916 -> 910;
916 -> 915;
917 -> 911;
917 -> 915;
918 -> 912;
918 -> 915;
919 -> 913;
919 -> 915;
920 -> 914;
920 -> 915;
921 -> 915;
922 -> 920;
922 -> 921;
922 -> 915;
923 -> 915;
924 -> 915;
925 -> 915;
926 -> 920;
926 -> 903;
926 -> 0;
926 -> 915;
927 -> 926;
927 -> 915;
928 -> 916;
928 -> 903;
928 -> 915;
929 -> 915;
930 -> 928;
930 -> 929;
931 -> 929;
932 -> 930;
932 -> 931;
933 -> 931;
934 -> 933;
935 -> 932;
935 -> 929;
936 -> 915;
937 -> 915;
938 -> 923;
938 -> 915;
939 -> 915;
940 -> 927;
940 -> 915;
941 -> 917;
941 -> 915;
942 -> 920;
942 -> 915;
943 -> 935;
943 -> 915;
944 -> 919;
944 -> 915;
945 -> 938;
945 -> 939;
945 -> 940;
945 -> 941;
945 -> 942;
945 -> 943;
945 -> 944;
945 -> 916;
945 -> 923;
945 -> 927;
945 -> 935;
945 -> 915;
946 -> 945;
946 -> 939;
947 -> 946;
947 -> 945;
947 -> 939;
948 -> 945;
948 -> 939;
949 -> 945;
949 -> 939;
950 -> 945;
950 -> 939;
951 -> 945;
951 -> 939;
952 -> 945;
952 -> 939;
953 -> 945;
953 -> 939;
954 -> 945;
954 -> 939;
955 -> 945;
955 -> 939;
956 -> 945;
956 -> 939;
957 -> 956;
957 -> 947;
957 -> 939;
958 -> 948;
958 -> 939;
959 -> 954;
959 -> 939;
960 -> 939;
961 -> 958;
961 -> 960;
962 -> 959;
962 -> 960;
963 -> 956;
963 -> 960;
964 -> 961;
964 -> 960;
965 -> 960;
966 -> 964;
966 -> 965;
967 -> 963;
967 -> 965;
968 -> 965;
969 -> 967;
969 -> 968;
970 -> 968;
971 -> 969;
971 -> 970;
972 -> 970;
973 -> 971;
973 -> 972;
974 -> 973;
974 -> 947;
974 -> 972;
975 -> 973;
975 -> 947;
975 -> 972;
976 -> 975;
976 -> 970;
977 -> 971;
977 -> 947;
977 -> 970;
978 -> 971;
978 -> 977;
978 -> 970;
979 -> 978;
979 -> 968;
980 -> 979;
980 -> 965;
981 -> 980;
981 -> 965;
982 -> 980;
982 -> 977;
982 -> 981;
983 -> 982;
983 -> 960;
984 -> 960;
985 -> 983;
985 -> 984;
985 -> 960;
986 -> 983;
986 -> 985;
987 -> 986;
987 -> 939;
988 -> 939;
989 -> 987;
989 -> 988;
989 -> 939;
990 -> 948;
990 -> 939;
991 -> 987;
991 -> 939;
992 -> 939;
993 -> 990;
993 -> 991;
993 -> 992;
993 -> 956;
993 -> 977;
993 -> 939;
994 -> 993;
994 -> 992;
995 -> 992;
996 -> 994;
996 -> 995;
997 -> 995;
998 -> 996;
998 -> 997;
999 -> 998;
999 -> 995;
1000 -> 996;
1000 -> 992;
1001 -> 992;
1002 -> 1000;
1002 -> 1001;
1003 -> 1000;
1003 -> 1001;
1004 -> 1001;
1005 -> 1003;
1005 -> 1004;
1006 -> 1004;
1007 -> 1006;
1008 -> 1005;
1008 -> 1001;
1009 -> 1003;
1009 -> 1001;
1010 -> 1001;
1011 -> 1010;
1012 -> 1011;
1013 -> 1000;
1013 -> 1001;
1014 -> 1000;
1014 -> 1001;
1015 -> 1000;
1015 -> 1001;
1016 -> 1014;
1016 -> 1001;
1017 -> 1013;
1017 -> 1001;
1018 -> 1001;
1019 -> 1015;
1019 -> 1008;
1019 -> 1001;
1020 -> 1001;
1021 -> 1017;
1021 -> 1020;
1022 -> 1018;
1022 -> 1020;
1023 -> 1019;
1023 -> 1020;
1024 -> 1015;
1024 -> 1020;
1025 -> 1023;
1025 -> 1020;
1026 -> 1022;
1026 -> 1020;
1027 -> 1024;
1027 -> 1008;
1027 -> 1026;
1028 -> 1024;
1028 -> 1008;
1028 -> 1027;
1028 -> 1020;
1029 -> 1025;
1029 -> 1028;
1029 -> 1008;
1029 -> 1027;
1029 -> 1020;
1030 -> 1021;
1030 -> 1020;
1031 -> 1020;
1032 -> 1030;
1032 -> 1031;
1033 -> 1024;
1033 -> 1031;
1034 -> 1032;
1034 -> 1031;
1035 -> 1031;
1036 -> 1034;
1036 -> 1035;
1037 -> 1033;
1037 -> 1035;
1038 -> 1035;
1039 -> 1036;
1039 -> 1038;
1039 -> 1035;
1040 -> 1035;
1041 -> 1037;
1041 -> 1029;
1041 -> 1040;
1042 -> 1040;
1043 -> 1041;
1043 -> 1035;
1044 -> 1036;
1044 -> 1035;
1045 -> 1043;
1045 -> 1029;
1045 -> 1044;
1045 -> 1035;
1046 -> 1031;
1047 -> 1033;
1047 -> 1045;
1047 -> 1046;
1048 -> 1046;
1049 -> 1047;
1049 -> 1031;
1050 -> 1029;
1050 -> 1020;
1051 -> 1020;
1052 -> 1050;
1052 -> 1051;
1052 -> 1020;
1053 -> 1052;
1054 -> 1053;
1054 -> 1049;
1055 -> 1054;
1055 -> 1052;
1056 -> 1029;
1056 -> 1052;
1057 -> 1055;
1057 -> 1052;
1058 -> 1052;
1059 -> 1020;
1060 -> 1057;
1060 -> 1049;
1060 -> 1020;
1061 -> 1020;
1062 -> 1060;
1062 -> 1061;
1062 -> 1020;
1063 -> 1021;
1063 -> 1020;
1064 -> 1022;
1064 -> 1020;
1065 -> 1057;
1065 -> 1049;
1065 -> 1020;
1066 -> 1020;
1067 -> 1063;
1067 -> 1066;
1068 -> 1064;
1068 -> 1066;
1069 -> 1065;
1069 -> 1066;
1070 -> 1024;
1070 -> 1066;
1071 -> 1070;
1071 -> 1066;
1072 -> 1067;
1072 -> 1066;
1073 -> 1068;
1073 -> 1066;
1074 -> 1071;
1074 -> 1072;
1074 -> 1073;
1074 -> 1057;
1074 -> 1066;
1075 -> 1066;
1076 -> 1074;
1076 -> 1066;
1077 -> 1066;
1078 -> 1077;
1079 -> 1069;
1079 -> 1077;
1080 -> 1077;
1081 -> 1079;
1081 -> 1080;
1081 -> 1077;
1082 -> 1069;
1082 -> 1077;
1083 -> 1076;
1083 -> 1077;
1084 -> 1079;
1084 -> 1077;
1085 -> 1082;
1085 -> 1083;
1085 -> 1084;
1085 -> 1076;
1085 -> 1077;
1086 -> 1074;
1086 -> 1085;
1087 -> 1000;
1087 -> 1001;
1088 -> 1087;
1088 -> 1086;
1088 -> 1001;
1089 -> 1088;
1090 -> 1089;
1090 -> 1088;
1091 -> 1088;
1092 -> 1090;
1092 -> 1091;
1093 -> 1087;
1093 -> 1091;
1094 -> 1091;
1095 -> 1093;
1095 -> 1094;
1096 -> 1094;
1097 -> 1095;
1097 -> 1096;
1098 -> 1097;
1098 -> 1094;
1099 -> 1095;
1099 -> 1091;
1100 -> 1092;
1100 -> 1099;
1100 -> 1089;
1100 -> 1095;
1100 -> 1091;
1101 -> 1091;
1102 -> 1093;
1102 -> 1101;
1103 -> 1102;
1103 -> 1100;
1103 -> 1101;
1104 -> 1102;
1104 -> 1100;
1104 -> 1101;
1105 -> 1104;
1105 -> 1091;
1106 -> 1091;
1107 -> 1106;
1107 -> 1105;
1107 -> 1100;
1107 -> 1091;
1108 -> 1106;
1108 -> 1107;
1109 -> 1105;
1109 -> 1108;
1109 -> 1106;
1110 -> 1088;
1111 -> 1087;
1111 -> 1088;
1112 -> 1111;
1112 -> 1109;
1112 -> 1088;
1113 -> 1088;
1114 -> 1089;
1114 -> 1112;
1114 -> 1088;
1115 -> 1087;
1115 -> 1114;
1115 -> 1088;
1116 -> 1112;
1116 -> 1088;
1117 -> 1088;
1118 -> 1087;
1118 -> 1115;
1118 -> 1001;
1119 -> 1000;
1119 -> 1001;
1120 -> 1001;
1121 -> 1119;
1121 -> 1120;
1122 -> 1120;
1123 -> 1122;
1124 -> 1121;
1124 -> 1123;
1125 -> 1124;
1125 -> 1118;
1125 -> 1123;
1126 -> 1124;
1126 -> 1118;
1126 -> 1123;
1127 -> 1126;
1127 -> 1122;
1128 -> 1121;
1128 -> 1118;
1128 -> 1122;
1129 -> 1128;
1129 -> 1001;
1130 -> 1001;
1131 -> 1000;
1131 -> 1001;
1132 -> 1131;
1132 -> 1129;
1132 -> 1001;
1133 -> 1001;
1134 -> 1131;
1134 -> 1129;
1134 -> 1133;
1134 -> 1001;
1135 -> 1134;
1136 -> 1131;
1136 -> 1129;
1136 -> 1134;
1137 -> 1135;
1137 -> 1134;
1138 -> 1134;
1139 -> 1131;
1139 -> 1137;
1139 -> 1001;
1140 -> 1000;
1140 -> 1001;
1141 -> 1000;
1141 -> 1001;
1142 -> 1141;
1142 -> 1139;
1142 -> 1001;
1143 -> 1124;
1143 -> 1139;
1143 -> 1123;
1144 -> 1124;
1144 -> 1139;
1144 -> 1123;
1145 -> 1144;
1145 -> 1122;
1146 -> 1000;
1146 -> 1001;
1147 -> 1001;
1148 -> 1147;
1149 -> 1146;
1149 -> 1148;
1150 -> 1149;
1150 -> 1139;
1150 -> 1148;
1151 -> 1149;
1151 -> 1139;
1151 -> 1148;
1152 -> 1151;
1152 -> 1147;
1153 -> 1000;
1153 -> 1001;
1154 -> 1000;
1154 -> 1001;
1155 -> 1001;
1156 -> 1154;
1156 -> 1155;
1157 -> 1156;
1157 -> 1139;
1157 -> 1155;
1158 -> 1156;
1158 -> 1139;
1158 -> 1155;
1159 -> 1158;
1159 -> 1001;
1160 -> 1001;
1161 -> 1160;
1161 -> 1159;
1161 -> 1139;
1161 -> 1001;
1162 -> 1160;
1162 -> 1161;
1163 -> 1159;
1163 -> 1162;
1163 -> 1160;
1164 -> 1153;
1164 -> 1163;
1164 -> 1162;
1165 -> 1000;
1165 -> 1001;
1166 -> 1165;
1166 -> 1164;
1166 -> 1001;
1167 -> 1124;
1167 -> 1166;
1167 -> 1123;
1168 -> 1124;
1168 -> 1166;
1168 -> 1123;
1169 -> 1168;
1169 -> 1122;
1170 -> 1149;
1170 -> 1166;
1170 -> 1148;
1171 -> 1149;
1171 -> 1166;
1171 -> 1148;
1172 -> 1171;
1172 -> 1147;
1173 -> 1000;
1173 -> 1001;
1174 -> 1000;
1174 -> 1001;
1175 -> 1173;
1175 -> 1166;
1175 -> 1001;
1176 -> 1001;
1177 -> 1175;
1177 -> 1176;
1178 -> 1175;
1178 -> 1176;
1179 -> 1174;
1179 -> 1176;
1180 -> 1176;
1181 -> 1179;
1181 -> 1180;
1182 -> 1180;
1183 -> 1181;
1183 -> 1182;
1183 -> 1166;
1183 -> 1180;
1184 -> 1183;
1184 -> 1180;
1185 -> 1184;
1185 -> 1176;
1186 -> 1178;
1186 -> 1176;
1187 -> 1177;
1187 -> 1186;
1187 -> 1183;
1187 -> 1166;
1187 -> 1176;
1188 -> 1176;
1189 -> 1179;
1189 -> 1188;
1190 -> 1189;
1190 -> 1187;
1190 -> 1188;
1191 -> 1176;
1192 -> 1190;
1192 -> 1185;
1192 -> 1176;
1193 -> 1000;
1193 -> 1001;
1194 -> 1001;
1195 -> 1193;
1195 -> 1194;
1196 -> 1194;
1197 -> 1195;
1197 -> 1196;
1197 -> 1192;
1197 -> 1194;
1198 -> 1197;
1198 -> 1001;
1199 -> 1001;
1200 -> 1198;
1200 -> 1199;
1200 -> 1001;
1201 -> 1149;
1201 -> 1200;
1201 -> 1148;
1202 -> 1149;
1202 -> 1200;
1202 -> 1148;
1203 -> 1202;
1203 -> 1147;
1204 -> 993;
1204 -> 992;
1205 -> 992;
1206 -> 1204;
1206 -> 1205;
1207 -> 1205;
1208 -> 1206;
1208 -> 1207;
1209 -> 1208;
1209 -> 1200;
1209 -> 1207;
1210 -> 1208;
1210 -> 1200;
1210 -> 1207;
1211 -> 1210;
1211 -> 1205;
1212 -> 1206;
1212 -> 1200;
1212 -> 1205;
1213 -> 1212;
1213 -> 992;
1214 -> 992;
1215 -> 1213;
1215 -> 1214;
1216 -> 993;
1216 -> 992;
1217 -> 992;
1218 -> 993;
1218 -> 1217;
1218 -> 1215;
1218 -> 939;
1219 -> 939;
1220 -> 952;
1220 -> 1219;
1220 -> 939;
1221 -> 1220;
1222 -> 939;
1223 -> 956;
1223 -> 1218;
1223 -> 939;
1224 -> 956;
1224 -> 1218;
1224 -> 1223;
1225 -> 1224;
1225 -> 1223;
1226 -> 956;
1226 -> 1218;
1226 -> 1225;
1227 -> 1223;
1228 -> 1227;
1229 -> 1228;
1229 -> 1227;
1230 -> 1227;
1230 -> 1218;
1230 -> 1226;
1231 -> 1230;
1231 -> 1223;
1232 -> 948;
1232 -> 1223;
1233 -> 1226;
1233 -> 1223;
1234 -> 1218;
1234 -> 1223;
1235 -> 1221;
1235 -> 1223;
1236 -> 1223;
1237 -> 1223;
1238 -> 1231;
1238 -> 1237;
1239 -> 1232;
1239 -> 1237;
1240 -> 1233;
1240 -> 1237;
1241 -> 1234;
1241 -> 1237;
1242 -> 1235;
1242 -> 1237;
1243 -> 1236;
1243 -> 1237;
1244 -> 1238;
1244 -> 1237;
1245 -> 1239;
1245 -> 1237;
1246 -> 1240;
1246 -> 1237;
1247 -> 1241;
1247 -> 1237;
1248 -> 1242;
1248 -> 1237;
1249 -> 0;
1249 -> 1237;
1250 -> 1237;
1251 -> 1244;
1251 -> 1250;
1252 -> 1245;
1252 -> 1250;
1253 -> 1246;
1253 -> 1250;
1254 -> 1247;
1254 -> 1250;
1255 -> 1248;
1255 -> 1250;
1256 -> 1249;
1256 -> 1250;
1257 -> 1243;
1257 -> 1250;
1258 -> 1250;
1259 -> 1251;
1259 -> 1230;
1259 -> 1258;
1259 -> 1250;
1260 -> 1252;
1260 -> 1250;
1261 -> 1253;
1261 -> 1250;
1262 -> 1254;
1262 -> 1250;
1263 -> 1255;
1263 -> 1250;
1264 -> 1250;
1265 -> 1259;
1265 -> 1264;
1266 -> 1260;
1266 -> 1264;
1267 -> 1261;
1267 -> 1264;
1268 -> 1262;
1268 -> 1264;
1269 -> 1263;
1269 -> 1264;
1270 -> 1257;
1270 -> 1264;
1271 -> 1265;
1271 -> 1259;
1271 -> 1264;
1272 -> 1265;
1272 -> 1264;
1273 -> 1268;
1273 -> 1264;
1274 -> 1269;
1274 -> 1264;
1275 -> 1267;
1275 -> 1264;
1276 -> 1266;
1276 -> 1264;
1277 -> 1264;
1278 -> 1277;
1279 -> 1264;
1280 -> 1279;
1280 -> 1271;
1280 -> 1272;
1280 -> 1273;
1280 -> 1274;
1280 -> 1275;
1280 -> 1276;
1280 -> 1277;
1280 -> 1259;
1280 -> 1221;
1280 -> 1278;
1280 -> 1264;
1281 -> 1280;
1281 -> 1279;
1282 -> 1279;
1283 -> 1280;
1283 -> 1282;
1283 -> 1264;
1284 -> 1264;
1285 -> 1284;
1285 -> 1279;
1285 -> 1264;
1286 -> 0;
1286 -> 1264;
1287 -> 1286;
1287 -> 0;
1287 -> 1264;
1288 -> 1287;
1288 -> 1279;
1288 -> 1264;
1289 -> 1264;
1290 -> 1289;
1290 -> 1279;
1290 -> 1264;
1291 -> 1279;
1291 -> 1264;
1292 -> 1279;
1292 -> 1264;
1293 -> 1279;
1293 -> 1264;
1294 -> 1279;
1294 -> 1264;
1295 -> 1279;
1295 -> 1264;
1296 -> 1265;
1296 -> 1283;
1296 -> 1264;
1297 -> 1296;
1297 -> 0;
1297 -> 1264;
1298 -> 1297;
1298 -> 1264;
1299 -> 1298;
1299 -> 1279;
1299 -> 1264;
1300 -> 1279;
1300 -> 1283;
1300 -> 1285;
1300 -> 1264;
1301 -> 1265;
1301 -> 1264;
1302 -> 1279;
1302 -> 1264;
1303 -> 1300;
1303 -> 1301;
1303 -> 1302;
1303 -> 1283;
1303 -> 1285;
1303 -> 1288;
1303 -> 1290;
1303 -> 1291;
1303 -> 1292;
1303 -> 1299;
1303 -> 1293;
1303 -> 1294;
1303 -> 1295;
1303 -> 1284;
1303 -> 1287;
1303 -> 1289;
1303 -> 1264;
1304 -> 1265;
1304 -> 1303;
1304 -> 1264;
1305 -> 1257;
1305 -> 1250;
1306 -> 1257;
1306 -> 1250;
1307 -> 1257;
1307 -> 1250;
1308 -> 1257;
1308 -> 1250;
1309 -> 1257;
1309 -> 1250;
1310 -> 1257;
1310 -> 1250;
1311 -> 1257;
1311 -> 1250;
1312 -> 1257;
1312 -> 1250;
1313 -> 1257;
1313 -> 1250;
1314 -> 1257;
1314 -> 1250;
1315 -> 1251;
1315 -> 1250;
1316 -> 1251;
1316 -> 1257;
1316 -> 1250;
1317 -> 1256;
1317 -> 1250;
1318 -> 1317;
1318 -> 1257;
1318 -> 1250;
1319 -> 1250;
1320 -> 1252;
1320 -> 1303;
1320 -> 1319;
1320 -> 1250;
1321 -> 1320;
1321 -> 1250;
1322 -> 1251;
1322 -> 1303;
1322 -> 1321;
1323 -> 1251;
1323 -> 1303;
1323 -> 1322;
1323 -> 1257;
1323 -> 1250;
1324 -> 1257;
1324 -> 1303;
1324 -> 1250;
1325 -> 1251;
1325 -> 1250;
1326 -> 1257;
1326 -> 1250;
1327 -> 1324;
1327 -> 1325;
1327 -> 1326;
1327 -> 1303;
1327 -> 1305;
1327 -> 1316;
1327 -> 1306;
1327 -> 1307;
1327 -> 1308;
1327 -> 1309;
1327 -> 1310;
1327 -> 1311;
1327 -> 1312;
1327 -> 1313;
1327 -> 1314;
1327 -> 1323;
1327 -> 1318;
1327 -> 1322;
1327 -> 1317;
1327 -> 1250;
1328 -> 939;
1329 -> 949;
1329 -> 1328;
1329 -> 939;
1330 -> 950;
1330 -> 1236;
1330 -> 939;
1331 -> 939;
1332 -> 951;
1332 -> 1331;
1332 -> 939;
1333 -> 951;
1333 -> 1236;
1333 -> 1332;
1334 -> 939;
1335 -> 953;
1335 -> 1334;
1335 -> 939;
1336 -> 953;
1336 -> 1327;
1336 -> 1335;
1337 -> 1236;
1337 -> 1336;
1337 -> 1327;
1337 -> 1330;
1337 -> 1333;
1337 -> 1335;
1338 -> 1236;
1338 -> 953;
1338 -> 1335;
1339 -> 1236;
1339 -> 939;
1340 -> 945;
1340 -> 1339;
1340 -> 1337;
1340 -> 1338;
1340 -> 915;
1341 -> 945;
1341 -> 939;
1342 -> 945;
1342 -> 939;
1343 -> 945;
1343 -> 939;
1344 -> 945;
1344 -> 939;
1345 -> 945;
1345 -> 939;
1346 -> 945;
1346 -> 939;
1347 -> 945;
1347 -> 939;
1348 -> 945;
1348 -> 939;
1349 -> 939;
1350 -> 1343;
1350 -> 939;
1351 -> 1350;
1352 -> 0;
1352 -> 1350;
1353 -> 1351;
1353 -> 1352;
1353 -> 1350;
1354 -> 1345;
1354 -> 939;
1355 -> 0;
1355 -> 939;
1356 -> 939;
1357 -> 1347;
1357 -> 939;
1358 -> 939;
1359 -> 1355;
1359 -> 1358;
1360 -> 1356;
1360 -> 1358;
1361 -> 1357;
1361 -> 1358;
1362 -> 1348;
1362 -> 1358;
1363 -> 1358;
1364 -> 1359;
1364 -> 1358;
1365 -> 1360;
1365 -> 1358;
1366 -> 1363;
1366 -> 1358;
1367 -> 1361;
1367 -> 1358;
1368 -> 1358;
1369 -> 1364;
1369 -> 1368;
1370 -> 1365;
1370 -> 1368;
1371 -> 1366;
1371 -> 1368;
1372 -> 1367;
1372 -> 1368;
1373 -> 1362;
1373 -> 1368;
1374 -> 1368;
1375 -> 1369;
1375 -> 0;
1375 -> 1368;
1376 -> 1375;
1376 -> 1370;
1376 -> 1368;
1377 -> 1376;
1378 -> 1373;
1378 -> 1377;
1379 -> 1377;
1380 -> 1378;
1380 -> 1340;
1380 -> 1379;
1381 -> 1379;
1382 -> 1380;
1382 -> 1376;
1383 -> 1376;
1384 -> 1373;
1384 -> 1383;
1385 -> 1384;
1385 -> 1340;
1385 -> 1383;
1386 -> 1385;
1386 -> 1376;
1387 -> 1386;
1388 -> 1382;
1388 -> 1340;
1388 -> 1386;
1389 -> 1372;
1389 -> 1386;
1390 -> 1387;
1390 -> 1388;
1390 -> 1389;
1390 -> 1340;
1390 -> 1386;
1391 -> 1390;
1391 -> 1387;
1392 -> 1390;
1392 -> 1387;
1393 -> 1390;
1393 -> 1387;
1394 -> 1390;
1394 -> 1387;
1395 -> 1387;
1396 -> 1395;
1396 -> 1387;
1397 -> 1387;
1398 -> 1392;
1398 -> 1397;
1399 -> 1398;
1399 -> 1387;
1400 -> 1393;
1400 -> 1387;
1401 -> 1395;
1401 -> 1387;
1402 -> 1399;
1402 -> 1390;
1402 -> 1400;
1402 -> 1401;
1402 -> 1396;
1402 -> 1387;
1403 -> 1376;
1404 -> 1382;
1404 -> 1376;
1405 -> 1372;
1405 -> 1340;
1405 -> 1402;
1405 -> 1404;
1406 -> 1404;
1406 -> 1340;
1406 -> 1405;
1407 -> 1369;
1407 -> 0;
1407 -> 1368;
1408 -> 1374;
1408 -> 1407;
1409 -> 1408;
1409 -> 1373;
1409 -> 1374;
1409 -> 1405;
1409 -> 1407;
1410 -> 1407;
1411 -> 1407;
1412 -> 1373;
1412 -> 1411;
1413 -> 1412;
1413 -> 1409;
1413 -> 1411;
1414 -> 1413;
1414 -> 1407;
1415 -> 1407;
1416 -> 1373;
1416 -> 1415;
1417 -> 1416;
1417 -> 1414;
1417 -> 1415;
1418 -> 1417;
1418 -> 1407;
1419 -> 1372;
1419 -> 1414;
1419 -> 1407;
1420 -> 1407;
1421 -> 1373;
1421 -> 1420;
1422 -> 1421;
1422 -> 1419;
1422 -> 1420;
1423 -> 1421;
1423 -> 1419;
1423 -> 1420;
1424 -> 1423;
1424 -> 1407;
1425 -> 1372;
1425 -> 1424;
1425 -> 1407;
1426 -> 1372;
1426 -> 1407;
1427 -> 1407;
1428 -> 1407;
1429 -> 1427;
1429 -> 1428;
1430 -> 1427;
1430 -> 1428;
1431 -> 1427;
1431 -> 1428;
1432 -> 1426;
1432 -> 1428;
1433 -> 1373;
1433 -> 1428;
1434 -> 1428;
1435 -> 1433;
1435 -> 1434;
1436 -> 1435;
1436 -> 1425;
1436 -> 1434;
1437 -> 1434;
1438 -> 1436;
1438 -> 1437;
1439 -> 1438;
1439 -> 1437;
1440 -> 1439;
1440 -> 1436;
1440 -> 1437;
1441 -> 1437;
1442 -> 1440;
1442 -> 1441;
1443 -> 1442;
1443 -> 1440;
1443 -> 1441;
1444 -> 1443;
1444 -> 1441;
1445 -> 1444;
1445 -> 1428;
1446 -> 1432;
1446 -> 1428;
1447 -> 1445;
1447 -> 1446;
1447 -> 1444;
1447 -> 1425;
1447 -> 1428;
1448 -> 1428;
1449 -> 1428;
1450 -> 1429;
1450 -> 1449;
1450 -> 1428;
1451 -> 1428;
1452 -> 1433;
1452 -> 1451;
1453 -> 1451;
1454 -> 1452;
1454 -> 1453;
1455 -> 1453;
1456 -> 1454;
1456 -> 1455;
1457 -> 1456;
1457 -> 1447;
1457 -> 1455;
1458 -> 1456;
1458 -> 1447;
1458 -> 1455;
1459 -> 1458;
1459 -> 1453;
1460 -> 1454;
1460 -> 1447;
1460 -> 1453;
1461 -> 1460;
1461 -> 1428;
1462 -> 1448;
1462 -> 1428;
1463 -> 1432;
1463 -> 1428;
1464 -> 1462;
1464 -> 1463;
1464 -> 1461;
1464 -> 1425;
1464 -> 1460;
1464 -> 1428;
1465 -> 1428;
1466 -> 1465;
1467 -> 1466;
1468 -> 1464;
1468 -> 1467;
1469 -> 1468;
1469 -> 1466;
1470 -> 1465;
1471 -> 1465;
1472 -> 1465;
1473 -> 1472;
1474 -> 1473;
1475 -> 1465;
1476 -> 1475;
1477 -> 1476;
1478 -> 1464;
1478 -> 1465;
1479 -> 1465;
1480 -> 1429;
1480 -> 1428;
1481 -> 1480;
1482 -> 1481;
1482 -> 1433;
1482 -> 1480;
1483 -> 1480;
1484 -> 1483;
1484 -> 1433;
1484 -> 1480;
1485 -> 1433;
1485 -> 1464;
1485 -> 1482;
1485 -> 1484;
1485 -> 1428;
1486 -> 1428;
1487 -> 1431;
1487 -> 1486;
1487 -> 1428;
1488 -> 1429;
1488 -> 1428;
1489 -> 1430;
1489 -> 1428;
1490 -> 1432;
1490 -> 1428;
1491 -> 1428;
1492 -> 1488;
1492 -> 1491;
1493 -> 1489;
1493 -> 1491;
1494 -> 1490;
1494 -> 1491;
1495 -> 1433;
1495 -> 1491;
1496 -> 1491;
1497 -> 1492;
1497 -> 1496;
1497 -> 1491;
1498 -> 1495;
1498 -> 1485;
1498 -> 1491;
1499 -> 1498;
1500 -> 1495;
1500 -> 1498;
1501 -> 1499;
1501 -> 1498;
1502 -> 1494;
1502 -> 1498;
1503 -> 1498;
1504 -> 1498;
1505 -> 1500;
1505 -> 1504;
1506 -> 1501;
1506 -> 1504;
1507 -> 1502;
1507 -> 1504;
1508 -> 1503;
1508 -> 1504;
1509 -> 1503;
1509 -> 1504;
1510 -> 1504;
1511 -> 1505;
1511 -> 1504;
1512 -> 1508;
1512 -> 1504;
1513 -> 1509;
1513 -> 1504;
1514 -> 1510;
1514 -> 1504;
1515 -> 1507;
1515 -> 1504;
1516 -> 1504;
1517 -> 1504;
1518 -> 1511;
1518 -> 1517;
1519 -> 1512;
1519 -> 1517;
1520 -> 1513;
1520 -> 1517;
1521 -> 1514;
1521 -> 1517;
1522 -> 1515;
1522 -> 1517;
1523 -> 1516;
1523 -> 1517;
1524 -> 1517;
1525 -> 1524;
1525 -> 1517;
1526 -> 1524;
1526 -> 1517;
1527 -> 1524;
1527 -> 1517;
1528 -> 1524;
1528 -> 1517;
1529 -> 1524;
1529 -> 1517;
1530 -> 1524;
1530 -> 1517;
1531 -> 1518;
1531 -> 1524;
1531 -> 1517;
1532 -> 1519;
1532 -> 1524;
1532 -> 1517;
1533 -> 1520;
1533 -> 1524;
1533 -> 1517;
1534 -> 1521;
1534 -> 1524;
1534 -> 1517;
1535 -> 1522;
1535 -> 1524;
1535 -> 1517;
1536 -> 0;
1536 -> 1517;
1537 -> 1536;
1537 -> 1524;
1537 -> 1517;
1538 -> 1517;
1539 -> 1524;
1539 -> 1538;
1540 -> 1538;
1541 -> 1539;
1541 -> 1524;
1541 -> 1526;
1541 -> 1532;
1541 -> 1540;
1541 -> 1538;
1542 -> 1538;
1543 -> 1539;
1543 -> 1524;
1543 -> 1525;
1543 -> 1531;
1543 -> 1542;
1544 -> 1543;
1544 -> 1524;
1544 -> 1536;
1544 -> 1542;
1545 -> 1541;
1545 -> 1544;
1545 -> 1524;
1545 -> 1536;
1545 -> 1538;
1546 -> 1545;
1546 -> 1517;
1547 -> 1546;
1548 -> 1547;
1548 -> 1524;
1548 -> 1546;
1549 -> 1504;
1550 -> 1505;
1550 -> 1549;
1551 -> 1549;
1552 -> 1550;
1552 -> 1551;
1553 -> 1552;
1553 -> 1536;
1553 -> 1551;
1554 -> 1552;
1554 -> 1536;
1554 -> 1551;
1555 -> 1554;
1555 -> 1549;
1556 -> 1550;
1556 -> 1536;
1556 -> 1549;
1557 -> 1556;
1557 -> 1504;
1558 -> 1557;
1558 -> 1516;
1558 -> 1556;
1558 -> 1524;
1558 -> 1525;
1558 -> 1531;
1558 -> 1526;
1558 -> 1532;
1558 -> 1527;
1558 -> 1533;
1558 -> 1528;
1558 -> 1534;
1558 -> 1529;
1558 -> 1537;
1558 -> 1530;
1558 -> 1548;
1558 -> 1535;
1558 -> 1503;
1558 -> 1510;
1558 -> 1425;
1558 -> 1547;
1558 -> 1504;
1559 -> 1504;
1560 -> 1558;
1560 -> 1559;
1561 -> 1558;
1561 -> 1559;
1562 -> 1561;
1562 -> 1558;
1562 -> 1559;
1563 -> 1560;
1563 -> 1559;
1564 -> 1560;
1564 -> 1559;
1565 -> 1559;
1566 -> 1564;
1566 -> 1565;
1567 -> 1561;
1567 -> 1565;
1568 -> 1566;
1568 -> 1562;
1568 -> 0;
1568 -> 1565;
1569 -> 1565;
1570 -> 1566;
1570 -> 1562;
1570 -> 0;
1570 -> 1565;
1571 -> 1566;
1571 -> 1562;
1571 -> 0;
1571 -> 1570;
1572 -> 1566;
1572 -> 1562;
1572 -> 0;
1572 -> 1565;
1573 -> 1566;
1573 -> 1562;
1573 -> 0;
1573 -> 1565;
1574 -> 1566;
1574 -> 1562;
1574 -> 0;
1574 -> 1565;
1575 -> 1566;
1575 -> 1562;
1575 -> 0;
1575 -> 1565;
1576 -> 1566;
1576 -> 1562;
1576 -> 0;
1576 -> 1565;
1577 -> 1565;
1578 -> 1566;
1578 -> 1565;
1579 -> 1577;
1579 -> 1565;
1580 -> 1567;
1580 -> 1562;
1580 -> 1578;
1580 -> 1579;
1580 -> 1565;
1581 -> 1565;
1582 -> 1566;
1582 -> 1565;
1583 -> 1581;
1583 -> 1565;
1584 -> 1565;
1585 -> 1582;
1585 -> 1584;
1586 -> 1583;
1586 -> 1584;
1587 -> 1567;
1587 -> 1584;
1588 -> 1584;
1589 -> 1585;
1589 -> 1580;
1589 -> 1584;
1590 -> 1585;
1590 -> 1589;
1591 -> 0;
1591 -> 1589;
1592 -> 1584;
1593 -> 1592;
1593 -> 1565;
1594 -> 1593;
1594 -> 1565;
1595 -> 1566;
1595 -> 1590;
1595 -> 0;
1595 -> 1594;
1596 -> 0;
1596 -> 1595;
1597 -> 1566;
1597 -> 1590;
1597 -> 0;
1597 -> 1565;
1598 -> 1597;
1598 -> 1565;
1599 -> 1596;
1599 -> 1598;
1600 -> 1599;
1600 -> 0;
1600 -> 1559;
1601 -> 1599;
1601 -> 1559;
1602 -> 1559;
1603 -> 1601;
1603 -> 1602;
1604 -> 1603;
1604 -> 1602;
1605 -> 1604;
1606 -> 1559;
1607 -> 1606;
1607 -> 1560;
1607 -> 1599;
1607 -> 1559;
1608 -> 1560;
1608 -> 1599;
1608 -> 1606;
1608 -> 1607;
1609 -> 1607;
1610 -> 1608;
1610 -> 1607;
1611 -> 1609;
1611 -> 1607;
1612 -> 1607;
1613 -> 1610;
1613 -> 1612;
1614 -> 1611;
1614 -> 1612;
1615 -> 1561;
1615 -> 1612;
1616 -> 1612;
1617 -> 1612;
1617 -> 1607;
1618 -> 1607;
1619 -> 1618;
1619 -> 1607;
1620 -> 1616;
1620 -> 1619;
1621 -> 1607;
1622 -> 1620;
1622 -> 1621;
1622 -> 1607;
1623 -> 1622;
1623 -> 1617;
1623 -> 1607;
1624 -> 1617;
1624 -> 1607;
1625 -> 1605;
1625 -> 1624;
1626 -> 1605;
1626 -> 1559;
1627 -> 1559;
1628 -> 1560;
1628 -> 1613;
1628 -> 1627;
1628 -> 1559;
1629 -> 1628;
1629 -> 1559;
1630 -> 1559;
1631 -> 1629;
1631 -> 1630;
1632 -> 1561;
1632 -> 1630;
1633 -> 1631;
1633 -> 1628;
1633 -> 0;
1633 -> 1630;
1634 -> 1630;
1635 -> 1631;
1635 -> 1628;
1635 -> 0;
1635 -> 1630;
1636 -> 1631;
1636 -> 1628;
1636 -> 0;
1636 -> 1635;
1637 -> 1631;
1637 -> 1628;
1637 -> 0;
1637 -> 1630;
1638 -> 1631;
1638 -> 1628;
1638 -> 0;
1638 -> 1630;
1639 -> 1631;
1639 -> 1628;
1639 -> 0;
1639 -> 1630;
1640 -> 1631;
1640 -> 1628;
1640 -> 0;
1640 -> 1630;
1641 -> 1631;
1641 -> 1628;
1641 -> 0;
1641 -> 1630;
1642 -> 1630;
1643 -> 1642;
1643 -> 1630;
1644 -> 1630;
1645 -> 1644;
1645 -> 1630;
1646 -> 1630;
1647 -> 1645;
1647 -> 1646;
1648 -> 1632;
1648 -> 1646;
1649 -> 1646;
1650 -> 1646;
1651 -> 1650;
1651 -> 1630;
1652 -> 1651;
1652 -> 1630;
1653 -> 1631;
1654 -> 1631;
1655 -> 1653;
1655 -> 1654;
1656 -> 1632;
1656 -> 1654;
1657 -> 1655;
1657 -> 1631;
1657 -> 0;
1657 -> 1654;
1658 -> 1655;
1658 -> 1631;
1658 -> 1654;
1659 -> 1654;
1660 -> 1658;
1660 -> 1659;
1660 -> 1654;
1661 -> 1658;
1661 -> 1654;
1662 -> 1654;
1663 -> 1661;
1663 -> 1662;
1664 -> 1656;
1664 -> 1662;
1665 -> 1663;
1665 -> 1631;
1665 -> 0;
1665 -> 1662;
1666 -> 1662;
1667 -> 1663;
1667 -> 1631;
1667 -> 0;
1667 -> 1662;
1668 -> 1663;
1668 -> 1631;
1668 -> 0;
1668 -> 1667;
1669 -> 1663;
1669 -> 1631;
1669 -> 0;
1669 -> 1662;
1670 -> 1663;
1670 -> 1631;
1670 -> 0;
1670 -> 1662;
1671 -> 1663;
1671 -> 1631;
1671 -> 0;
1671 -> 1662;
1672 -> 1663;
1672 -> 1631;
1672 -> 0;
1672 -> 1662;
1673 -> 1663;
1673 -> 1631;
1673 -> 0;
1673 -> 1662;
1674 -> 1664;
1674 -> 1631;
1674 -> 1663;
1674 -> 1662;
1675 -> 1674;
1676 -> 1631;
1677 -> 1675;
1677 -> 1676;
1678 -> 1677;
1678 -> 1676;
1679 -> 1678;
1680 -> 1559;
1681 -> 1679;
1681 -> 1680;
1682 -> 1560;
1682 -> 1674;
1682 -> 1559;
1683 -> 1559;
1684 -> 1682;
1684 -> 1683;
1685 -> 1682;
1685 -> 1683;
1686 -> 1685;
1686 -> 1682;
1686 -> 1683;
1687 -> 1684;
1687 -> 1683;
1688 -> 1683;
1689 -> 1687;
1689 -> 1688;
1690 -> 1685;
1690 -> 1688;
1691 -> 1689;
1691 -> 1686;
1691 -> 0;
1691 -> 1688;
1692 -> 1691;
1693 -> 1684;
1693 -> 1683;
1694 -> 1683;
1695 -> 1693;
1695 -> 1694;
1696 -> 1685;
1696 -> 1694;
1697 -> 1695;
1697 -> 1686;
1697 -> 0;
1697 -> 1694;
1698 -> 1694;
1699 -> 1695;
1699 -> 1686;
1699 -> 0;
1699 -> 1694;
1700 -> 1695;
1700 -> 1686;
1700 -> 1699;
1701 -> 1699;
1702 -> 1700;
1702 -> 1701;
1703 -> 1702;
1703 -> 1686;
1703 -> 0;
1703 -> 1701;
1704 -> 1701;
1705 -> 1702;
1705 -> 1686;
1705 -> 0;
1706 -> 1702;
1706 -> 1686;
1706 -> 0;
1706 -> 1701;
1707 -> 1702;
1707 -> 1686;
1707 -> 0;
1707 -> 1701;
1708 -> 1702;
1708 -> 1686;
1708 -> 0;
1708 -> 1701;
1709 -> 1702;
1709 -> 1686;
1709 -> 0;
1709 -> 1701;
1710 -> 1702;
1710 -> 1686;
1710 -> 0;
1710 -> 1701;
1711 -> 1702;
1712 -> 1683;
1713 -> 1711;
1713 -> 1712;
1714 -> 1713;
1714 -> 1712;
1715 -> 1714;
1716 -> 1683;
1717 -> 1685;
1717 -> 1716;
1718 -> 1716;
1719 -> 1717;
1719 -> 1702;
1719 -> 1718;
1719 -> 1716;
1720 -> 1716;
1721 -> 1717;
1721 -> 1702;
1721 -> 1720;
1722 -> 1719;
1722 -> 1683;
1723 -> 1684;
1723 -> 1722;
1724 -> 1722;
1725 -> 1723;
1725 -> 1724;
1726 -> 1685;
1726 -> 1724;
1727 -> 1725;
1727 -> 1702;
1727 -> 1724;
1728 -> 1722;
1729 -> 1504;
1730 -> 1516;
1730 -> 1729;
1731 -> 1730;
1731 -> 1727;
1731 -> 1729;
1732 -> 1729;
1733 -> 1731;
1733 -> 1732;
1733 -> 1729;
1734 -> 1729;
1735 -> 1731;
1735 -> 1734;
1735 -> 1727;
1735 -> 1729;
1736 -> 1504;
1737 -> 1510;
1737 -> 1504;
1738 -> 1737;
1738 -> 1735;
1738 -> 1504;
1739 -> 1495;
1739 -> 1735;
1739 -> 1498;
1740 -> 1499;
1740 -> 1498;
1741 -> 1739;
1741 -> 1740;
1741 -> 1735;
1741 -> 1498;
1742 -> 1495;
1742 -> 1741;
1742 -> 1491;
1743 -> 1495;
1743 -> 1741;
1743 -> 1491;
1744 -> 1485;
1744 -> 1428;
1745 -> 1744;
1745 -> 1741;
1745 -> 1428;
1746 -> 1743;
1746 -> 1428;
1747 -> 1407;
1748 -> 1373;
1748 -> 1746;
1748 -> 1747;
1748 -> 1407;
1749 -> 1372;
1749 -> 1746;
1749 -> 1368;
1750 -> 1369;
1750 -> 0;
1750 -> 1368;
1751 -> 1371;
1751 -> 1368;
1752 -> 1374;
1752 -> 1368;
1753 -> 1372;
1753 -> 1368;
1754 -> 1751;
1754 -> 1752;
1754 -> 1753;
1754 -> 1373;
1754 -> 1363;
1754 -> 1749;
1754 -> 1368;
1755 -> 1368;
1756 -> 1358;
1757 -> 1363;
1757 -> 1754;
1757 -> 1358;
1758 -> 1351;
1758 -> 939;
1759 -> 1354;
1759 -> 1757;
1759 -> 1758;
1759 -> 1357;
1759 -> 1348;
1759 -> 1340;
1759 -> 1353;
1759 -> 939;
1760 -> 1351;
1760 -> 1759;
1760 -> 939;
1761 -> 1341;
1761 -> 939;
1762 -> 1343;
1762 -> 939;
1763 -> 1759;
1763 -> 1762;
1764 -> 1761;
1764 -> 1760;
1764 -> 1762;
1765 -> 1348;
1765 -> 1762;
1766 -> 1761;
1766 -> 1762;
1767 -> 1347;
1767 -> 1762;
1768 -> 1762;
1769 -> 1765;
1769 -> 1768;
1770 -> 1766;
1770 -> 1768;
1771 -> 1767;
1771 -> 1768;
1772 -> 1768;
1773 -> 1770;
1773 -> 1772;
1773 -> 1768;
1774 -> 1770;
1774 -> 1768;
1775 -> 1771;
1775 -> 1768;
1776 -> 1768;
1777 -> 1768;
1778 -> 1774;
1778 -> 1777;
1779 -> 1775;
1779 -> 1777;
1780 -> 1776;
1780 -> 1777;
1781 -> 1777;
1782 -> 1781;
1782 -> 1777;
1783 -> 1777;
1784 -> 1778;
1784 -> 1783;
1784 -> 1777;
1785 -> 1778;
1785 -> 1781;
1785 -> 1777;
1786 -> 1779;
1786 -> 1781;
1786 -> 1777;
1787 -> 1768;
1788 -> 1769;
1788 -> 1787;
1789 -> 1787;
1790 -> 1788;
1790 -> 1789;
1791 -> 1789;
1792 -> 1790;
1792 -> 1791;
1793 -> 1791;
1794 -> 1792;
1794 -> 1793;
1795 -> 1794;
1795 -> 1760;
1795 -> 1793;
1796 -> 1794;
1796 -> 1760;
1796 -> 1793;
1797 -> 1796;
1797 -> 1791;
1798 -> 1792;
1798 -> 1760;
1798 -> 1791;
1799 -> 1787;
1800 -> 1798;
1800 -> 1768;
1801 -> 1800;
1801 -> 1776;
1801 -> 1798;
1801 -> 1781;
1801 -> 1782;
1801 -> 1785;
1801 -> 1786;
1801 -> 1340;
1801 -> 1768;
1802 -> 1768;
1803 -> 1801;
1803 -> 1802;
1804 -> 1801;
1804 -> 1802;
1805 -> 1804;
1805 -> 1801;
1805 -> 1802;
1806 -> 1803;
1806 -> 1805;
1806 -> 1802;
1807 -> 1762;
1808 -> 939;
1809 -> 945;
1809 -> 1808;
1809 -> 1805;
1809 -> 915;
1810 -> 945;
1810 -> 939;
1811 -> 939;
1812 -> 1810;
1812 -> 1811;
1813 -> 1811;
1814 -> 1812;
1814 -> 1813;
1815 -> 1813;
1816 -> 1814;
1816 -> 1815;
1817 -> 1815;
1818 -> 1816;
1818 -> 1817;
1819 -> 1818;
1819 -> 1809;
1819 -> 1817;
1820 -> 1818;
1820 -> 1809;
1820 -> 1817;
1821 -> 1820;
1821 -> 1815;
1822 -> 1816;
1822 -> 1809;
1822 -> 1815;
1823 -> 1811;
1824 -> 1822;
1824 -> 939;
1825 -> 945;
1825 -> 939;
1826 -> 939;
1827 -> 1825;
1827 -> 1826;
1828 -> 1826;
1829 -> 1827;
1829 -> 1828;
1830 -> 1829;
1830 -> 1824;
1830 -> 1828;
1831 -> 1829;
1831 -> 1824;
1831 -> 1828;
1832 -> 1831;
1832 -> 1826;
1833 -> 939;
1834 -> 945;
1834 -> 939;
1835 -> 939;
1836 -> 1834;
1836 -> 1835;
1837 -> 1835;
1838 -> 1836;
1838 -> 1837;
1839 -> 1838;
1839 -> 1824;
1839 -> 1837;
1840 -> 1838;
1840 -> 1824;
1840 -> 1837;
1841 -> 1840;
1841 -> 1835;
1842 -> 945;
1842 -> 939;
1843 -> 945;
1843 -> 939;
1844 -> 939;
1845 -> 1843;
1845 -> 1844;
1846 -> 1845;
1846 -> 1824;
1846 -> 1844;
1847 -> 1846;
1847 -> 939;
1848 -> 1847;
1848 -> 1824;
1848 -> 939;
1849 -> 1847;
1849 -> 939;
1850 -> 1843;
1850 -> 1824;
1850 -> 939;
1851 -> 1847;
1851 -> 1848;
1852 -> 1842;
1852 -> 1824;
1852 -> 1848;
1853 -> 1848;
1854 -> 1851;
1854 -> 1853;
1855 -> 1852;
1855 -> 1853;
1856 -> 1843;
1856 -> 1853;
1857 -> 1856;
1857 -> 1824;
1857 -> 1853;
1858 -> 1854;
1858 -> 1853;
1859 -> 1857;
1859 -> 1858;
1859 -> 1853;
1860 -> 1853;
1861 -> 1854;
1861 -> 1853;
1862 -> 1860;
1862 -> 1853;
1863 -> 1856;
1863 -> 1824;
1863 -> 1861;
1863 -> 1862;
1863 -> 1853;
1864 -> 1854;
1864 -> 1853;
1865 -> 1853;
1866 -> 1853;
1867 -> 1864;
1867 -> 1866;
1868 -> 1865;
1868 -> 1866;
1869 -> 1868;
1869 -> 1866;
1870 -> 1866;
1871 -> 1867;
1871 -> 1870;
1871 -> 1866;
1872 -> 1867;
1872 -> 1868;
1872 -> 1866;
1873 -> 1854;
1873 -> 1853;
1874 -> 1865;
1874 -> 1853;
1875 -> 1856;
1875 -> 1863;
1875 -> 1873;
1875 -> 1874;
1875 -> 1872;
1875 -> 1853;
1876 -> 1875;
1876 -> 1865;
1876 -> 1853;
1877 -> 1854;
1877 -> 1876;
1878 -> 1875;
1878 -> 1876;
1879 -> 1855;
1879 -> 1876;
1880 -> 1876;
1881 -> 1877;
1881 -> 1880;
1882 -> 1878;
1882 -> 1880;
1883 -> 1879;
1883 -> 1880;
1884 -> 1856;
1884 -> 1880;
1885 -> 1884;
1885 -> 1875;
1885 -> 1880;
1886 -> 1880;
1887 -> 1882;
1887 -> 1886;
1888 -> 1887;
1888 -> 1875;
1888 -> 1886;
1889 -> 1888;
1889 -> 1880;
1890 -> 1885;
1890 -> 1875;
1890 -> 1880;
1891 -> 1884;
1891 -> 1875;
1891 -> 0;
1891 -> 1880;
1892 -> 1889;
1892 -> 1875;
1892 -> 1880;
1893 -> 1891;
1893 -> 1892;
1893 -> 1880;
1894 -> 1881;
1894 -> 1875;
1894 -> 1880;
1895 -> 1881;
1895 -> 1875;
1895 -> 1880;
1896 -> 1880;
1897 -> 1884;
1897 -> 1875;
1897 -> 1896;
1897 -> 1880;
1898 -> 1876;
1899 -> 1853;
1900 -> 1854;
1900 -> 1875;
1900 -> 1899;
1900 -> 1853;
1901 -> 1875;
1901 -> 1853;
1902 -> 1875;
1902 -> 1853;
1903 -> 945;
1903 -> 1902;
1903 -> 1900;
1903 -> 915;
1904 -> 945;
1904 -> 939;
1905 -> 1904;
1905 -> 1903;
1905 -> 939;
1906 -> 945;
1906 -> 939;
1907 -> 945;
1907 -> 939;
1908 -> 1907;
1908 -> 1905;
1908 -> 939;
1909 -> 939;
1910 -> 1909;
1910 -> 1908;
1910 -> 1905;
1910 -> 939;
1911 -> 939;
1912 -> 945;
1912 -> 1911;
1912 -> 1905;
1912 -> 915;
1913 -> 945;
1913 -> 939;
1914 -> 945;
1914 -> 939;
1915 -> 1913;
1915 -> 1912;
1915 -> 939;
1916 -> 1914;
1916 -> 1912;
1916 -> 939;
1917 -> 1913;
1917 -> 939;
1918 -> 939;
1919 -> 1916;
1919 -> 1918;
1920 -> 1917;
1920 -> 1918;
1921 -> 1914;
1921 -> 1918;
1922 -> 1919;
1922 -> 1912;
1922 -> 1918;
1923 -> 1922;
1924 -> 1919;
1924 -> 1912;
1924 -> 1922;
1925 -> 1922;
1926 -> 1925;
1926 -> 1924;
1926 -> 1912;
1926 -> 1922;
1927 -> 1920;
1927 -> 1912;
1927 -> 1922;
1928 -> 1919;
1928 -> 1922;
1929 -> 1923;
1929 -> 1922;
1930 -> 1922;
1931 -> 1923;
1931 -> 1929;
1931 -> 1922;
1932 -> 1929;
1932 -> 1918;
1933 -> 945;
1933 -> 1932;
1933 -> 1931;
1933 -> 1929;
1933 -> 915;
1934 -> 945;
1934 -> 939;
1935 -> 1934;
1935 -> 1933;
1935 -> 939;
1936 -> 945;
1936 -> 939;
1937 -> 945;
1937 -> 939;
1938 -> 1936;
1938 -> 1935;
1938 -> 939;
1939 -> 1938;
1940 -> 945;
1940 -> 939;
1941 -> 945;
1941 -> 939;
1942 -> 1940;
1942 -> 1939;
1942 -> 939;
1943 -> 939;
1944 -> 1942;
1944 -> 1943;
1945 -> 1941;
1945 -> 1943;
1946 -> 1945;
1946 -> 1939;
1946 -> 1943;
1947 -> 1946;
1947 -> 939;
1948 -> 939;
1949 -> 945;
1949 -> 939;
1950 -> 945;
1950 -> 939;
1951 -> 1949;
1951 -> 1947;
1951 -> 939;
1952 -> 939;
1953 -> 1951;
1953 -> 1952;
1954 -> 1950;
1954 -> 1952;
1955 -> 1952;
1956 -> 1953;
1956 -> 1952;
1957 -> 1952;
1958 -> 1956;
1958 -> 1957;
1959 -> 1954;
1959 -> 1957;
1960 -> 1957;
1961 -> 1959;
1961 -> 1960;
1962 -> 1960;
1963 -> 1962;
1963 -> 1961;
1963 -> 1960;
1964 -> 1960;
1965 -> 1961;
1965 -> 1964;
1966 -> 1965;
1966 -> 1947;
1966 -> 1963;
1966 -> 1964;
1967 -> 1966;
1967 -> 1960;
1968 -> 1967;
1968 -> 1957;
1969 -> 1957;
1970 -> 1959;
1970 -> 1969;
1971 -> 1970;
1971 -> 1966;
1971 -> 1969;
1972 -> 1971;
1972 -> 1957;
1973 -> 1972;
1974 -> 1968;
1974 -> 1973;
1974 -> 1972;
1975 -> 1974;
1976 -> 1952;
1977 -> 1955;
1977 -> 1952;
1978 -> 1954;
1978 -> 1971;
1978 -> 1952;
1979 -> 1977;
1979 -> 1978;
1979 -> 1955;
1979 -> 1971;
1979 -> 1952;
1980 -> 1955;
1980 -> 1952;
1981 -> 1954;
1981 -> 1979;
1981 -> 1952;
1982 -> 1955;
1982 -> 1952;
1983 -> 1954;
1983 -> 1981;
1983 -> 1952;
1984 -> 1955;
1984 -> 1952;
1985 -> 1954;
1985 -> 1983;
1985 -> 1952;
1986 -> 1955;
1986 -> 1952;
1987 -> 1954;
1987 -> 1985;
1987 -> 1952;
1988 -> 1955;
1988 -> 1952;
1989 -> 1954;
1989 -> 1987;
1989 -> 1952;
1990 -> 1955;
1990 -> 1952;
1991 -> 1954;
1991 -> 1989;
1991 -> 1952;
1992 -> 1955;
1992 -> 1952;
1993 -> 1954;
1993 -> 1991;
1993 -> 1952;
1994 -> 1955;
1994 -> 1993;
1994 -> 1952;
1995 -> 1994;
1995 -> 939;
1996 -> 939;
1997 -> 945;
1997 -> 939;
1998 -> 945;
1998 -> 939;
1999 -> 939;
2000 -> 1998;
2000 -> 1995;
2000 -> 939;
2001 -> 1999;
2001 -> 2000;
2001 -> 1995;
2001 -> 939;
2002 -> 939;
2003 -> 1999;
2003 -> 2001;
2003 -> 2002;
2003 -> 939;
2004 -> 1999;
2004 -> 2001;
2004 -> 2003;
2005 -> 2004;
2005 -> 2003;
2006 -> 939;
2007 -> 945;
2007 -> 939;
2008 -> 945;
2008 -> 939;
2009 -> 2008;
2009 -> 939;
2010 -> 2007;
2010 -> 939;
2011 -> 2008;
2011 -> 2004;
2011 -> 939;
2012 -> 2009;
2012 -> 2010;
2012 -> 2011;
2012 -> 2008;
2012 -> 2004;
2012 -> 939;
2013 -> 939;
2014 -> 2012;
2014 -> 2013;
2015 -> 2012;
2015 -> 2013;
2016 -> 2014;
2016 -> 0;
2016 -> 2013;
2017 -> 2013;
2018 -> 2014;
2018 -> 2013;
2019 -> 2015;
2019 -> 2018;
2019 -> 2012;
2019 -> 2013;
2020 -> 2019;
2021 -> 2020;
2022 -> 2021;
2022 -> 2020;
2023 -> 2020;
2023 -> 2019;
2024 -> 2014;
2024 -> 2019;
2025 -> 2023;
2025 -> 2014;
2025 -> 2013;
2026 -> 2023;
2026 -> 2013;
2027 -> 2026;
2028 -> 2027;
2028 -> 2026;
2029 -> 2026;
2029 -> 2014;
2029 -> 2013;
2030 -> 2013;
2031 -> 2030;
2032 -> 2012;
2032 -> 2031;
2033 -> 2032;
2033 -> 2026;
2033 -> 2031;
2034 -> 2032;
2034 -> 2026;
2034 -> 2031;
2035 -> 2034;
2035 -> 2030;
2036 -> 2013;
2037 -> 2013;
2038 -> 945;
2038 -> 939;
2039 -> 945;
2039 -> 939;
2040 -> 945;
2040 -> 939;
2041 -> 945;
2041 -> 939;
2042 -> 945;
2042 -> 939;
2043 -> 945;
2043 -> 939;
2044 -> 2038;
2044 -> 939;
2045 -> 2044;
2045 -> 2026;
2045 -> 939;
2046 -> 939;
2047 -> 2041;
2047 -> 2046;
2047 -> 939;
2048 -> 2038;
2048 -> 939;
2049 -> 2039;
2049 -> 939;
2050 -> 2040;
2050 -> 939;
2051 -> 2042;
2051 -> 939;
2052 -> 939;
2053 -> 2048;
2053 -> 2052;
2054 -> 2049;
2054 -> 2052;
2055 -> 2050;
2055 -> 2052;
2056 -> 2051;
2056 -> 2052;
2057 -> 2043;
2057 -> 2052;
2058 -> 2052;
2059 -> 2052;
2060 -> 2053;
2060 -> 2045;
2060 -> 2052;
2061 -> 2060;
2061 -> 2045;
2061 -> 2052;
2062 -> 2053;
2062 -> 2045;
2062 -> 2052;
2063 -> 2053;
2063 -> 2062;
2063 -> 2052;
2064 -> 2056;
2064 -> 2063;
2065 -> 2053;
2065 -> 2062;
2065 -> 2064;
2066 -> 2060;
2066 -> 2064;
2067 -> 2064;
2068 -> 2066;
2068 -> 2067;
2069 -> 2067;
2070 -> 2068;
2070 -> 2069;
2070 -> 2067;
2071 -> 2070;
2072 -> 2068;
2072 -> 2062;
2072 -> 2070;
2073 -> 2067;
2074 -> 2073;
2074 -> 2064;
2075 -> 2065;
2075 -> 2074;
2075 -> 2064;
2076 -> 2053;
2076 -> 2075;
2077 -> 2053;
2077 -> 2062;
2077 -> 2075;
2078 -> 2052;
2079 -> 2057;
2079 -> 2062;
2079 -> 2078;
2079 -> 2052;
2080 -> 2053;
2080 -> 2062;
2080 -> 2052;
2081 -> 939;
2082 -> 2041;
2082 -> 2081;
2082 -> 939;
2083 -> 2080;
2083 -> 2082;
2084 -> 945;
2084 -> 939;
2085 -> 945;
2085 -> 939;
2086 -> 945;
2086 -> 939;
2087 -> 945;
2087 -> 939;
2088 -> 939;
2089 -> 2086;
2089 -> 2088;
2089 -> 939;
2090 -> 2084;
2090 -> 2083;
2090 -> 939;
2091 -> 2084;
2091 -> 2090;
2092 -> 2085;
2092 -> 2090;
2093 -> 2086;
2093 -> 2090;
2094 -> 2090;
2095 -> 2090;
2096 -> 2091;
2096 -> 2095;
2097 -> 2092;
2097 -> 2095;
2098 -> 2093;
2098 -> 2095;
2099 -> 2094;
2099 -> 2095;
2100 -> 2094;
2100 -> 2095;
2101 -> 2087;
2101 -> 2095;
2102 -> 2096;
2102 -> 2083;
2102 -> 2095;
2103 -> 2095;
2104 -> 2098;
2104 -> 2103;
2104 -> 2095;
2105 -> 2096;
2105 -> 2102;
2105 -> 2095;
2106 -> 2096;
2106 -> 2102;
2106 -> 2105;
2107 -> 2096;
2107 -> 2102;
2107 -> 0;
2107 -> 2095;
2108 -> 2096;
2108 -> 2102;
2108 -> 2095;
2109 -> 2100;
2109 -> 2108;
2110 -> 2109;
2111 -> 2109;
2112 -> 2096;
2112 -> 2102;
2112 -> 2109;
2113 -> 2109;
2114 -> 2112;
2114 -> 2113;
2115 -> 2113;
2116 -> 2114;
2116 -> 2115;
2117 -> 2115;
2118 -> 2116;
2118 -> 2117;
2118 -> 2115;
2119 -> 2115;
2120 -> 2119;
2120 -> 2113;
2121 -> 2096;
2121 -> 2102;
2121 -> 2120;
2122 -> 2096;
2122 -> 2102;
2122 -> 2095;
2123 -> 2101;
2123 -> 2102;
2123 -> 2095;
2124 -> 2096;
2124 -> 2102;
2124 -> 2095;
2125 -> 945;
2125 -> 939;
2126 -> 945;
2126 -> 939;
2127 -> 945;
2127 -> 939;
2128 -> 945;
2128 -> 939;
2129 -> 945;
2129 -> 939;
2130 -> 945;
2130 -> 939;
2131 -> 939;
2132 -> 2127;
2132 -> 2131;
2132 -> 939;
2133 -> 2125;
2133 -> 2123;
2133 -> 939;
2134 -> 2125;
2134 -> 2123;
2134 -> 2133;
2135 -> 2125;
2135 -> 2123;
2135 -> 0;
2135 -> 939;
2136 -> 2125;
2136 -> 2123;
2136 -> 939;
2137 -> 2129;
2137 -> 2136;
2138 -> 2125;
2138 -> 2123;
2138 -> 939;
2139 -> 945;
2139 -> 939;
2140 -> 945;
2140 -> 939;
2141 -> 945;
2141 -> 939;
2142 -> 2141;
2142 -> 2123;
2142 -> 939;
2143 -> 2139;
2143 -> 939;
2144 -> 2142;
2144 -> 2143;
2144 -> 939;
2145 -> 939;
2146 -> 2139;
2146 -> 2145;
2146 -> 939;
2147 -> 939;
2148 -> 2139;
2148 -> 939;
2149 -> 2147;
2149 -> 939;
2150 -> 2141;
2150 -> 2123;
2150 -> 2148;
2150 -> 2149;
2150 -> 939;
2151 -> 2150;
2152 -> 2125;
2152 -> 2151;
2152 -> 939;
2153 -> 2125;
2153 -> 2151;
2153 -> 2152;
2154 -> 2125;
2154 -> 2151;
2154 -> 0;
2154 -> 939;
2155 -> 2125;
2155 -> 2151;
2155 -> 939;
2156 -> 2129;
2156 -> 2155;
2157 -> 2125;
2157 -> 2151;
2157 -> 939;
2158 -> 945;
2158 -> 939;
2159 -> 945;
2159 -> 939;
2160 -> 2158;
2160 -> 939;
2161 -> 939;
2162 -> 2160;
2162 -> 2161;
2162 -> 2151;
2162 -> 939;
2163 -> 2158;
2163 -> 939;
2164 -> 2163;
2164 -> 2151;
2164 -> 2162;
2164 -> 939;
2165 -> 939;
2166 -> 2164;
2166 -> 2165;
2167 -> 2166;
2167 -> 2164;
2167 -> 2165;
2168 -> 2166;
2168 -> 2164;
2168 -> 2167;
2169 -> 2168;
2169 -> 2167;
2170 -> 2167;
2171 -> 2169;
2171 -> 2170;
2172 -> 2171;
2172 -> 2164;
2172 -> 0;
2172 -> 2170;
2173 -> 2171;
2173 -> 2164;
2173 -> 2170;
2174 -> 2170;
2175 -> 2173;
2175 -> 2174;
2176 -> 2174;
2177 -> 2175;
2177 -> 2176;
2177 -> 2174;
2178 -> 2177;
2179 -> 2175;
2179 -> 2164;
2179 -> 2177;
2180 -> 2174;
2181 -> 2180;
2181 -> 2170;
2182 -> 2172;
2182 -> 2181;
2182 -> 2170;
2183 -> 2165;
2184 -> 2183;
2184 -> 939;
2185 -> 2164;
2185 -> 2184;
2185 -> 939;
2186 -> 2158;
2186 -> 939;
2187 -> 2185;
2187 -> 939;
2188 -> 939;
2189 -> 2187;
2189 -> 2188;
2190 -> 2189;
2190 -> 2187;
2190 -> 2188;
2191 -> 2189;
2191 -> 2187;
2191 -> 2190;
2192 -> 2191;
2192 -> 2190;
2193 -> 2190;
2194 -> 2192;
2194 -> 2193;
2195 -> 2194;
2195 -> 2187;
2195 -> 0;
2195 -> 2193;
2196 -> 2194;
2196 -> 2187;
2196 -> 2193;
2197 -> 2193;
2198 -> 2196;
2198 -> 2197;
2199 -> 2197;
2200 -> 2198;
2200 -> 2199;
2200 -> 2197;
2201 -> 2200;
2202 -> 2198;
2202 -> 2187;
2202 -> 2200;
2203 -> 2197;
2204 -> 2203;
2204 -> 2193;
2205 -> 2195;
2205 -> 2204;
2205 -> 2193;
2206 -> 2188;
2207 -> 2185;
2207 -> 939;
2208 -> 2158;
2208 -> 2207;
2209 -> 2207;
2210 -> 2208;
2210 -> 2209;
2210 -> 2151;
2210 -> 2187;
2210 -> 2207;
2211 -> 2085;
2211 -> 2210;
2212 -> 2086;
2212 -> 2210;
2213 -> 2211;
2213 -> 2210;
2214 -> 2212;
2214 -> 2210;
2215 -> 2210;
2216 -> 2210;
2217 -> 2210;
2218 -> 2214;
2218 -> 2217;
2218 -> 2210;
2219 -> 2210;
2220 -> 2210;
2220 -> 2219;
2221 -> 2210;
2221 -> 0;
2222 -> 2210;
2223 -> 2216;
2223 -> 2222;
2224 -> 2223;
2225 -> 2223;
2226 -> 2210;
2226 -> 2223;
2227 -> 2223;
2228 -> 2226;
2228 -> 2227;
2229 -> 2227;
2230 -> 2228;
2230 -> 2229;
2231 -> 2229;
2232 -> 2230;
2232 -> 2231;
2232 -> 2229;
2233 -> 2229;
2234 -> 2233;
2234 -> 2227;
2235 -> 2210;
2235 -> 2234;
2236 -> 2210;
2237 -> 945;
2237 -> 939;
2238 -> 945;
2238 -> 939;
2239 -> 945;
2239 -> 939;
2240 -> 2237;
2240 -> 2210;
2240 -> 939;
2241 -> 939;
2242 -> 2240;
2242 -> 2241;
2242 -> 939;
2243 -> 2238;
2243 -> 0;
2243 -> 2242;
2244 -> 2240;
2244 -> 2238;
2244 -> 2242;
2245 -> 2238;
2245 -> 0;
2245 -> 2244;
2246 -> 2085;
2246 -> 2244;
2247 -> 2086;
2247 -> 2244;
2248 -> 2246;
2248 -> 2244;
2249 -> 2247;
2249 -> 2244;
2250 -> 2244;
2251 -> 2244;
2252 -> 2244;
2253 -> 2249;
2253 -> 2252;
2253 -> 2244;
2254 -> 2244;
2255 -> 2244;
2255 -> 2254;
2256 -> 2244;
2256 -> 0;
2257 -> 2244;
2258 -> 2251;
2258 -> 2257;
2259 -> 2258;
2260 -> 2258;
2261 -> 2244;
2261 -> 2258;
2262 -> 2258;
2263 -> 2261;
2263 -> 2262;
2264 -> 2262;
2265 -> 2263;
2265 -> 2264;
2266 -> 2264;
2267 -> 2265;
2267 -> 2266;
2267 -> 2264;
2268 -> 2264;
2269 -> 2268;
2269 -> 2262;
2270 -> 2244;
2270 -> 2269;
2271 -> 2244;
2272 -> 2125;
2272 -> 2244;
2272 -> 939;
2273 -> 2125;
2273 -> 2244;
2273 -> 2272;
2274 -> 2125;
2274 -> 2244;
2274 -> 0;
2274 -> 939;
2275 -> 2125;
2275 -> 2244;
2275 -> 939;
2276 -> 2129;
2276 -> 2275;
2277 -> 2125;
2277 -> 2244;
2277 -> 939;
2278 -> 2141;
2278 -> 2244;
2278 -> 939;
2279 -> 2244;
2279 -> 2165;
2280 -> 2279;
2280 -> 2244;
2280 -> 2165;
2281 -> 2279;
2281 -> 2244;
2281 -> 2280;
2282 -> 2281;
2282 -> 2280;
2283 -> 2280;
2284 -> 2282;
2284 -> 2283;
2285 -> 2284;
2285 -> 2244;
2285 -> 0;
2285 -> 2283;
2286 -> 2284;
2286 -> 2244;
2286 -> 2283;
2287 -> 2283;
2288 -> 2286;
2288 -> 2287;
2289 -> 2287;
2290 -> 2288;
2290 -> 2289;
2290 -> 2287;
2291 -> 2290;
2292 -> 2288;
2292 -> 2244;
2292 -> 2290;
2293 -> 2287;
2294 -> 2293;
2294 -> 2283;
2295 -> 2285;
2295 -> 2294;
2295 -> 2283;
2296 -> 2244;
2296 -> 2188;
2297 -> 2296;
2297 -> 2244;
2297 -> 2188;
2298 -> 2296;
2298 -> 2244;
2298 -> 2297;
2299 -> 2298;
2299 -> 2297;
2300 -> 2297;
2301 -> 2299;
2301 -> 2300;
2302 -> 2301;
2302 -> 2244;
2302 -> 0;
2302 -> 2300;
2303 -> 2301;
2303 -> 2244;
2303 -> 2300;
2304 -> 2300;
2305 -> 2303;
2305 -> 2304;
2306 -> 2304;
2307 -> 2305;
2307 -> 2306;
2307 -> 2304;
2308 -> 2307;
2309 -> 2305;
2309 -> 2244;
2309 -> 2307;
2310 -> 2304;
2311 -> 2310;
2311 -> 2300;
2312 -> 2302;
2312 -> 2311;
2312 -> 2300;
2313 -> 2053;
2313 -> 2244;
2313 -> 2052;
2314 -> 2313;
2314 -> 2244;
2314 -> 2052;
2315 -> 2053;
2315 -> 2244;
2315 -> 2052;
2316 -> 2056;
2316 -> 2315;
2317 -> 2053;
2317 -> 2244;
2317 -> 2316;
2318 -> 2313;
2318 -> 2316;
2319 -> 2316;
2320 -> 2318;
2320 -> 2319;
2321 -> 2319;
2322 -> 2320;
2322 -> 2321;
2322 -> 2319;
2323 -> 2322;
2324 -> 2320;
2324 -> 2244;
2324 -> 2322;
2325 -> 2319;
2326 -> 2325;
2326 -> 2316;
2327 -> 2317;
2327 -> 2326;
2327 -> 2316;
2328 -> 2053;
2328 -> 2327;
2329 -> 2053;
2329 -> 2244;
2329 -> 2327;
2330 -> 2057;
2330 -> 2244;
2330 -> 2078;
2330 -> 2052;
2331 -> 2267;
2332 -> 2265;
2332 -> 2244;
2332 -> 2267;
2333 -> 945;
2333 -> 939;
2334 -> 2333;
2334 -> 2244;
2334 -> 939;
2335 -> 939;
2336 -> 1842;
2336 -> 2334;
2337 -> 2336;
2337 -> 2334;
2338 -> 2334;
2339 -> 2334;
2340 -> 1907;
2340 -> 2339;
2340 -> 939;
2341 -> 1909;
2341 -> 2340;
2341 -> 2339;
2341 -> 939;
2342 -> 945;
2342 -> 939;
2343 -> 2342;
2343 -> 939;
2344 -> 2343;
2344 -> 2342;
2344 -> 2339;
2344 -> 939;
2345 -> 939;
2346 -> 1940;
2346 -> 2344;
2346 -> 939;
2347 -> 2346;
2347 -> 1943;
2348 -> 1949;
2348 -> 2344;
2348 -> 939;
2349 -> 2348;
2349 -> 1952;
2350 -> 2349;
2350 -> 1952;
2351 -> 2350;
2351 -> 1957;
2352 -> 2344;
2352 -> 1960;
2353 -> 2352;
2353 -> 1957;
2354 -> 2344;
2354 -> 1957;
2355 -> 2354;
2356 -> 2353;
2356 -> 2355;
2356 -> 2354;
2357 -> 2356;
2358 -> 2344;
2359 -> 945;
2359 -> 939;
2360 -> 945;
2360 -> 939;
2361 -> 2360;
2361 -> 2344;
2361 -> 939;
2362 -> 2360;
2362 -> 2344;
2362 -> 939;
2363 -> 2362;
2364 -> 2360;
2364 -> 2363;
2365 -> 2364;
2365 -> 2344;
2365 -> 2363;
2366 -> 2363;
2367 -> 2364;
2367 -> 2344;
2367 -> 2363;
2368 -> 2365;
2368 -> 2344;
2368 -> 2367;
2369 -> 2367;
2370 -> 2369;
2370 -> 2368;
2370 -> 2344;
2370 -> 2367;
2371 -> 2364;
2371 -> 2344;
2371 -> 2363;
2372 -> 2363;
2373 -> 2365;
2373 -> 2344;
2373 -> 2372;
2374 -> 2373;
2374 -> 2363;
2375 -> 2365;
2375 -> 2363;
2376 -> 2366;
2376 -> 2363;
2377 -> 2363;
2378 -> 2375;
2378 -> 2377;
2379 -> 2376;
2379 -> 2377;
2380 -> 2377;
2381 -> 2380;
2381 -> 2377;
2382 -> 2378;
2382 -> 2344;
2382 -> 2377;
2383 -> 2379;
2383 -> 2377;
2384 -> 2377;
2385 -> 2381;
2385 -> 2384;
2386 -> 2382;
2386 -> 2384;
2387 -> 2383;
2387 -> 2384;
2388 -> 2384;
2389 -> 2386;
2389 -> 2388;
2389 -> 2384;
2390 -> 2386;
2390 -> 2382;
2390 -> 2388;
2390 -> 2384;
2391 -> 2377;
2392 -> 2377;
2393 -> 2378;
2393 -> 2382;
2393 -> 2392;
2394 -> 2393;
2394 -> 2377;
2395 -> 2380;
2395 -> 2394;
2396 -> 2378;
2396 -> 2382;
2396 -> 2394;
2397 -> 2379;
2397 -> 2394;
2398 -> 2394;
2399 -> 2395;
2399 -> 2398;
2400 -> 2396;
2400 -> 2398;
2401 -> 2397;
2401 -> 2398;
2402 -> 2398;
2403 -> 2400;
2403 -> 2402;
2403 -> 2398;
2404 -> 2394;
2405 -> 2380;
2405 -> 2377;
2406 -> 2405;
2406 -> 2363;
2407 -> 2366;
2407 -> 2363;
2408 -> 2407;
2408 -> 2362;
2409 -> 2408;
2409 -> 2360;
2409 -> 2362;
2410 -> 2362;
2411 -> 2360;
2411 -> 2396;
2411 -> 2409;
2411 -> 2407;
2411 -> 2410;
2411 -> 2362;
2412 -> 2360;
2412 -> 2396;
2412 -> 2409;
2412 -> 939;
2413 -> 945;
2413 -> 939;
2414 -> 0;
2414 -> 939;
2415 -> 945;
2415 -> 2414;
2415 -> 2412;
2415 -> 0;
2415 -> 915;
2416 -> 1913;
2416 -> 2415;
2416 -> 939;
2417 -> 945;
2417 -> 939;
2418 -> 2417;
2418 -> 2415;
2418 -> 939;
2419 -> 945;
2419 -> 939;
2420 -> 2419;
2420 -> 2418;
2420 -> 939;
2421 -> 2360;
2421 -> 2420;
2421 -> 939;
2422 -> 2125;
2422 -> 2420;
2422 -> 939;
2423 -> 2125;
2423 -> 2420;
2423 -> 2422;
2424 -> 2125;
2424 -> 2420;
2424 -> 0;
2424 -> 939;
2425 -> 2125;
2425 -> 2420;
2425 -> 939;
2426 -> 2129;
2426 -> 2425;
2427 -> 2125;
2427 -> 2420;
2427 -> 939;
2428 -> 945;
2428 -> 939;
2429 -> 2428;
2429 -> 2420;
2429 -> 939;
2430 -> 2141;
2430 -> 2429;
2430 -> 939;
2431 -> 2125;
2431 -> 2429;
2431 -> 939;
2432 -> 2125;
2432 -> 2429;
2432 -> 2431;
2433 -> 2125;
2433 -> 2429;
2433 -> 0;
2433 -> 939;
2434 -> 2125;
2434 -> 2429;
2434 -> 939;
2435 -> 2129;
2435 -> 2434;
2436 -> 2125;
2436 -> 2429;
2436 -> 939;
2437 -> 2429;
2437 -> 0;
2437 -> 2013;
2438 -> 2429;
2439 -> 2438;
2439 -> 2429;
2440 -> 2429;
2440 -> 2013;
2441 -> 2053;
2441 -> 2429;
2441 -> 2052;
2442 -> 2441;
2442 -> 2429;
2442 -> 2052;
2443 -> 2053;
2443 -> 2429;
2443 -> 2052;
2444 -> 2056;
2444 -> 2443;
2445 -> 2053;
2445 -> 2429;
2445 -> 2444;
2446 -> 2441;
2446 -> 2444;
2447 -> 2444;
2448 -> 2446;
2448 -> 2447;
2449 -> 2447;
2450 -> 2448;
2450 -> 2449;
2450 -> 2447;
2451 -> 2450;
2452 -> 2448;
2452 -> 2429;
2452 -> 2450;
2453 -> 2447;
2454 -> 2453;
2454 -> 2444;
2455 -> 2445;
2455 -> 2454;
2455 -> 2444;
2456 -> 2053;
2456 -> 2455;
2457 -> 2053;
2457 -> 2429;
2457 -> 2455;
2458 -> 2057;
2458 -> 2429;
2458 -> 2078;
2458 -> 2052;
2459 -> 2429;
2459 -> 2165;
2460 -> 2459;
2460 -> 2429;
2460 -> 2165;
2461 -> 2459;
2461 -> 2429;
2461 -> 2460;
2462 -> 2461;
2462 -> 2460;
2463 -> 2460;
2464 -> 2462;
2464 -> 2463;
2465 -> 2464;
2465 -> 2429;
2465 -> 0;
2465 -> 2463;
2466 -> 2464;
2466 -> 2429;
2466 -> 2463;
2467 -> 2463;
2468 -> 2466;
2468 -> 2467;
2469 -> 2467;
2470 -> 2468;
2470 -> 2469;
2470 -> 2467;
2471 -> 2470;
2472 -> 2468;
2472 -> 2429;
2472 -> 2470;
2473 -> 2467;
2474 -> 2473;
2474 -> 2463;
2475 -> 2465;
2475 -> 2474;
2475 -> 2463;
2476 -> 2429;
2476 -> 2188;
2477 -> 2476;
2477 -> 2429;
2477 -> 2188;
2478 -> 2476;
2478 -> 2429;
2478 -> 2477;
2479 -> 2478;
2479 -> 2477;
2480 -> 2477;
2481 -> 2479;
2481 -> 2480;
2482 -> 2481;
2482 -> 2429;
2482 -> 0;
2482 -> 2480;
2483 -> 2481;
2483 -> 2429;
2483 -> 2480;
2484 -> 2480;
2485 -> 2483;
2485 -> 2484;
2486 -> 2484;
2487 -> 2485;
2487 -> 2486;
2487 -> 2484;
2488 -> 2487;
2489 -> 2485;
2489 -> 2429;
2489 -> 2487;
2490 -> 2484;
2491 -> 2490;
2491 -> 2480;
2492 -> 2482;
2492 -> 2491;
2492 -> 2480;
2493 -> 2085;
2493 -> 2429;
2494 -> 2086;
2494 -> 2429;
2495 -> 2493;
2495 -> 2429;
2496 -> 2494;
2496 -> 2429;
2497 -> 2429;
2498 -> 2429;
2499 -> 2429;
2500 -> 2496;
2500 -> 2499;
2500 -> 2429;
2501 -> 2429;
2502 -> 2429;
2502 -> 2501;
2503 -> 2429;
2503 -> 0;
2504 -> 2429;
2505 -> 2498;
2505 -> 2504;
2506 -> 2505;
2507 -> 2505;
2508 -> 2429;
2508 -> 2505;
2509 -> 2505;
2510 -> 2508;
2510 -> 2509;
2511 -> 2509;
2512 -> 2510;
2512 -> 2511;
2513 -> 2511;
2514 -> 2512;
2514 -> 2513;
2514 -> 2511;
2515 -> 2511;
2516 -> 2515;
2516 -> 2509;
2517 -> 2429;
2517 -> 2516;
2518 -> 2429;
2519 -> 2238;
2519 -> 0;
2519 -> 2429;
2520 -> 0;
2520 -> 2519;
2521 -> 2520;
2521 -> 2239;
2521 -> 2429;
2521 -> 2519;
2522 -> 2519;
2523 -> 2522;
2524 -> 2521;
2524 -> 2523;
2525 -> 2524;
2525 -> 2522;
2526 -> 2053;
2526 -> 2521;
2526 -> 2052;
2527 -> 2526;
2527 -> 2521;
2527 -> 2052;
2528 -> 2053;
2528 -> 2521;
2528 -> 2052;
2529 -> 2056;
2529 -> 2528;
2530 -> 2053;
2530 -> 2521;
2530 -> 2529;
2531 -> 2526;
2531 -> 2529;
2532 -> 2529;
2533 -> 2531;
2533 -> 2532;
2534 -> 2532;
2535 -> 2533;
2535 -> 2534;
2535 -> 2532;
2536 -> 2535;
2537 -> 2533;
2537 -> 2521;
2537 -> 2535;
2538 -> 2532;
2539 -> 2538;
2539 -> 2529;
2540 -> 2530;
2540 -> 2539;
2540 -> 2529;
2541 -> 2053;
2541 -> 2540;
2542 -> 2053;
2542 -> 2521;
2542 -> 2540;
2543 -> 2057;
2543 -> 2521;
2543 -> 2078;
2543 -> 2052;
2544 -> 2125;
2544 -> 2521;
2544 -> 939;
2545 -> 2125;
2545 -> 2521;
2545 -> 2544;
2546 -> 2125;
2546 -> 2521;
2546 -> 0;
2546 -> 939;
2547 -> 2125;
2547 -> 2521;
2547 -> 939;
2548 -> 2129;
2548 -> 2547;
2549 -> 2125;
2549 -> 2521;
2549 -> 939;
2550 -> 2141;
2550 -> 2521;
2550 -> 939;
2551 -> 2085;
2551 -> 2521;
2552 -> 2086;
2552 -> 2521;
2553 -> 2551;
2553 -> 2521;
2554 -> 2552;
2554 -> 2521;
2555 -> 2521;
2556 -> 2521;
2557 -> 2521;
2558 -> 2554;
2558 -> 2557;
2558 -> 2521;
2559 -> 2521;
2560 -> 2521;
2560 -> 2559;
2561 -> 2521;
2561 -> 0;
2562 -> 2521;
2563 -> 2556;
2563 -> 2562;
2564 -> 2563;
2565 -> 2563;
2566 -> 2521;
2566 -> 2563;
2567 -> 2563;
2568 -> 2566;
2568 -> 2567;
2569 -> 2567;
2570 -> 2568;
2570 -> 2569;
2571 -> 2569;
2572 -> 2570;
2572 -> 2571;
2572 -> 2569;
2573 -> 2569;
2574 -> 2573;
2574 -> 2567;
2575 -> 2521;
2575 -> 2574;
2576 -> 2521;
2577 -> 2521;
2577 -> 2165;
2578 -> 2577;
2578 -> 2521;
2578 -> 2165;
2579 -> 2577;
2579 -> 2521;
2579 -> 2578;
2580 -> 2579;
2580 -> 2578;
2581 -> 2578;
2582 -> 2580;
2582 -> 2581;
2583 -> 2582;
2583 -> 2521;
2583 -> 0;
2583 -> 2581;
2584 -> 2582;
2584 -> 2521;
2584 -> 2581;
2585 -> 2581;
2586 -> 2584;
2586 -> 2585;
2587 -> 2585;
2588 -> 2586;
2588 -> 2587;
2588 -> 2585;
2589 -> 2588;
2590 -> 2586;
2590 -> 2521;
2590 -> 2588;
2591 -> 2585;
2592 -> 2591;
2592 -> 2581;
2593 -> 2583;
2593 -> 2592;
2593 -> 2581;
2594 -> 2521;
2594 -> 2188;
2595 -> 2594;
2595 -> 2521;
2595 -> 2188;
2596 -> 2594;
2596 -> 2521;
2596 -> 2595;
2597 -> 2596;
2597 -> 2595;
2598 -> 2595;
2599 -> 2597;
2599 -> 2598;
2600 -> 2599;
2600 -> 2521;
2600 -> 0;
2600 -> 2598;
2601 -> 2599;
2601 -> 2521;
2601 -> 2598;
2602 -> 2598;
2603 -> 2601;
2603 -> 2602;
2604 -> 2602;
2605 -> 2603;
2605 -> 2604;
2605 -> 2602;
2606 -> 2605;
2607 -> 2603;
2607 -> 2521;
2607 -> 2605;
2608 -> 2602;
2609 -> 2608;
2609 -> 2598;
2610 -> 2600;
2610 -> 2609;
2610 -> 2598;
2611 -> 2572;
2612 -> 2570;
2612 -> 2521;
2612 -> 2572;
2613 -> 945;
2613 -> 939;
2614 -> 939;
2615 -> 939;
2616 -> 2613;
2616 -> 2521;
2616 -> 939;
2617 -> 2615;
2617 -> 2616;
2617 -> 2521;
2617 -> 939;
2618 -> 939;
2619 -> 939;
2620 -> 2615;
2620 -> 2617;
2620 -> 2619;
2620 -> 939;
2621 -> 2615;
2621 -> 2617;
2621 -> 2620;
2622 -> 2621;
2622 -> 2620;
2623 -> 2621;
2623 -> 2622;
2624 -> 2622;
2625 -> 2623;
2625 -> 2624;
2626 -> 2613;
2626 -> 2624;
2627 -> 2625;
2627 -> 2621;
2627 -> 2624;
2628 -> 2626;
2628 -> 2621;
2628 -> 2627;
2628 -> 2624;
2629 -> 2624;
2630 -> 2624;
2631 -> 2625;
2631 -> 2621;
2631 -> 2624;
2632 -> 2631;
2633 -> 2630;
2633 -> 2632;
2633 -> 2631;
2634 -> 2631;
2634 -> 2633;
2635 -> 2634;
2635 -> 2624;
2636 -> 2622;
2637 -> 2635;
2637 -> 2636;
2637 -> 2622;
2638 -> 2621;
2638 -> 2637;
2639 -> 2614;
2639 -> 939;
2640 -> 945;
2640 -> 2639;
2640 -> 2621;
2640 -> 2614;
2640 -> 915;
2641 -> 1838;
2641 -> 2640;
2641 -> 1837;
2642 -> 1838;
2642 -> 2640;
2642 -> 1837;
2643 -> 2642;
2643 -> 1835;
2644 -> 915;
2645 -> 927;
2645 -> 2644;
2645 -> 915;
2646 -> 927;
2646 -> 2645;
2647 -> 2646;
2647 -> 2640;
2647 -> 2645;
2648 -> 927;
2648 -> 2647;
2648 -> 2645;
2649 -> 2640;
2649 -> 2648;
2649 -> 915;
2650 -> 918;
2650 -> 2649;
2650 -> 2648;
2650 -> 915;
2651 -> 923;
2651 -> 915;
2652 -> 2651;
2652 -> 2650;
2652 -> 915;
2653 -> 2640;
2653 -> 2652;
2653 -> 915;
2654 -> 2652;
2654 -> 2653;
2655 -> 2647;
2655 -> 2653;
2656 -> 2653;
2657 -> 2653;
2658 -> 2654;
2658 -> 2657;
2659 -> 2655;
2659 -> 2657;
2660 -> 2656;
2660 -> 2657;
2661 -> 2658;
2661 -> 2660;
2661 -> 2657;
2662 -> 2659;
2662 -> 2647;
2662 -> 2657;
2663 -> 2659;
2663 -> 2660;
2663 -> 2657;
2664 -> 812;
2664 -> 2656;
2664 -> 2652;
2664 -> 2661;
2664 -> 2663;
2664 -> 2647;
2664 -> 802;
2665 -> 812;
2665 -> 811;
2666 -> 811;
2667 -> 2665;
2667 -> 2666;
2668 -> 2666;
2669 -> 2667;
2669 -> 2668;
2670 -> 2668;
2671 -> 2669;
2671 -> 2670;
2672 -> 2671;
2672 -> 2664;
2672 -> 2670;
2673 -> 2671;
2673 -> 2664;
2673 -> 2670;
2674 -> 2673;
2674 -> 2668;
2675 -> 2669;
2675 -> 2664;
2675 -> 2668;
2676 -> 2675;
2676 -> 811;
2677 -> 812;
2677 -> 811;
2678 -> 803;
2678 -> 2676;
2678 -> 802;
2679 -> 2678;
2679 -> 806;
2679 -> 802;
2680 -> 803;
2680 -> 2678;
2680 -> 802;
2681 -> 2680;
2681 -> 806;
2681 -> 802;
2682 -> 803;
2682 -> 2680;
2682 -> 802;
2683 -> 2682;
2683 -> 806;
2683 -> 802;
2684 -> 803;
2684 -> 2682;
2684 -> 802;
2685 -> 2684;
2685 -> 806;
2685 -> 802;
2686 -> 806;
2686 -> 772;
2686 -> 2684;
2686 -> 802;
2687 -> 802;
2688 -> 2686;
2688 -> 2687;
2689 -> 2687;
2690 -> 2689;
2691 -> 2690;
2692 -> 2688;
2692 -> 2691;
2693 -> 2692;
2693 -> 2690;
2694 -> 802;
2695 -> 798;
2695 -> 2688;
2695 -> 782;
2696 -> 2695;
2696 -> 790;
2696 -> 782;
2697 -> 788;
2697 -> 782;
2698 -> 798;
2698 -> 2697;
2698 -> 2695;
2698 -> 782;
2699 -> 782;
2700 -> 789;
2700 -> 2699;
2700 -> 782;
2701 -> 782;
2702 -> 783;
2702 -> 2701;
2702 -> 782;
2703 -> 784;
2703 -> 2701;
2703 -> 782;
2704 -> 2702;
2704 -> 2703;
2704 -> 782;
2705 -> 744;
2706 -> 744;
2707 -> 752;
2707 -> 2706;
2707 -> 744;
2708 -> 760;
2708 -> 2707;
2709 -> 752;
2709 -> 2707;
2710 -> 753;
2710 -> 2707;
2711 -> 2707;
2712 -> 2708;
2712 -> 2711;
2713 -> 2709;
2713 -> 2711;
2714 -> 2710;
2714 -> 2711;
2715 -> 2711;
2716 -> 2713;
2716 -> 2715;
2716 -> 2711;
2717 -> 2711;
2718 -> 2712;
2718 -> 2717;
2719 -> 2717;
2720 -> 2718;
2720 -> 2681;
2720 -> 2719;
2720 -> 2717;
2721 -> 2718;
2721 -> 772;
2721 -> 2698;
2721 -> 2717;
2722 -> 2717;
2723 -> 2721;
2723 -> 2722;
2724 -> 2723;
2725 -> 2724;
2725 -> 2718;
2725 -> 2681;
2725 -> 2723;
2726 -> 2723;
2727 -> 2718;
2727 -> 2696;
2727 -> 2726;
2727 -> 2723;
2728 -> 2718;
2728 -> 2696;
2728 -> 2727;
2729 -> 0;
2729 -> 2727;
2730 -> 2727;
2731 -> 2724;
2731 -> 2728;
2731 -> 2725;
2731 -> 2680;
2731 -> 2730;
2731 -> 2727;
2732 -> 2724;
2732 -> 2723;
2733 -> 2723;
2734 -> 2732;
2734 -> 2731;
2734 -> 2733;
2734 -> 2723;
2735 -> 2734;
2735 -> 2711;
2736 -> 2711;
2737 -> 2713;
2737 -> 2736;
2737 -> 2711;
2738 -> 0;
2738 -> 2737;
2739 -> 2735;
2739 -> 2734;
2739 -> 2737;
2740 -> 2735;
2740 -> 2734;
2740 -> 2737;
2741 -> 2740;
2741 -> 2737;
2742 -> 2737;
2743 -> 2741;
2743 -> 2742;
2744 -> 2743;
2744 -> 2741;
2744 -> 2742;
2746 -> 2745;
2747 -> 2746;
2748 -> 2741;
2748 -> 2742;
2749 -> 2741;
2749 -> 2742;
2750 -> 2741;
2750 -> 2742;
2751 -> 2741;
2751 -> 2742;
2752 -> 2741;
2752 -> 2742;
2753 -> 2741;
2753 -> 2742;
2754 -> 2741;
2754 -> 2742;
2755 -> 2741;
2755 -> 2742;
2756 -> 2742;
2757 -> 2742;
2758 -> 2748;
2758 -> 2757;
2758 -> 2742;
2759 -> 2749;
2759 -> 2758;
2760 -> 2748;
2760 -> 2742;
2761 -> 2749;
2761 -> 2742;
2762 -> 2750;
2762 -> 2742;
2763 -> 2742;
2764 -> 2760;
2764 -> 2763;
2765 -> 2761;
2765 -> 2763;
2766 -> 2762;
2766 -> 2763;
2767 -> 2764;
2767 -> 2763;
2768 -> 2765;
2768 -> 2763;
2769 -> 2767;
2769 -> 2768;
2769 -> 2763;
2770 -> 2764;
2770 -> 2744;
2770 -> 2763;
2771 -> 2765;
2771 -> 2770;
2771 -> 2763;
2772 -> 2763;
2773 -> 2770;
2773 -> 2771;
2773 -> 2772;
2775 -> 2774;
2776 -> 2771;
2776 -> 2773;
2776 -> 2772;
2777 -> 2772;
2778 -> 2776;
2778 -> 2777;
2779 -> 2776;
2779 -> 2777;
2780 -> 2778;
2780 -> 2777;
2781 -> 2779;
2781 -> 2777;
2782 -> 2777;
2783 -> 2780;
2783 -> 2782;
2784 -> 2781;
2784 -> 2782;
2785 -> 2784;
2785 -> 2776;
2785 -> 2782;
2786 -> 2784;
2786 -> 2785;
2787 -> 2783;
2787 -> 2786;
2787 -> 2776;
2787 -> 2785;
2788 -> 2787;
2788 -> 2785;
2790 -> 2789;
2791 -> 2789;
2792 -> 2791;
2792 -> 2785;
2793 -> 2783;
2793 -> 2785;
2794 -> 2785;
2795 -> 2792;
2795 -> 2793;
2795 -> 2794;
2795 -> 2788;
2795 -> 2785;
2796 -> 2788;
2796 -> 2785;
2797 -> 2796;
2797 -> 2795;
2797 -> 2788;
2797 -> 2785;
2798 -> 2785;
2799 -> 2797;
2799 -> 2798;
2800 -> 2797;
2800 -> 2798;
2801 -> 2799;
2801 -> 2798;
2802 -> 2801;
2802 -> 2785;
2803 -> 2785;
2804 -> 2785;
2805 -> 2783;
2805 -> 2785;
2806 -> 2787;
2806 -> 2785;
2807 -> 2785;
2808 -> 2805;
2808 -> 2807;
2809 -> 2806;
2809 -> 2807;
2810 -> 2809;
2810 -> 2802;
2810 -> 2807;
2811 -> 2809;
2811 -> 2810;
2812 -> 2811;
2812 -> 2810;
2813 -> 2810;
2814 -> 2812;
2814 -> 2813;
2815 -> 2814;
2815 -> 2813;
2816 -> 2814;
2816 -> 2811;
2816 -> 2813;
2817 -> 2814;
2817 -> 2816;
2818 -> 2808;
2818 -> 2817;
2818 -> 2811;
2818 -> 2815;
2818 -> 2816;
2819 -> 2816;
2820 -> 2818;
2820 -> 2813;
2821 -> 2779;
2821 -> 2776;
2821 -> 2777;
2822 -> 2777;
2823 -> 2820;
2823 -> 2822;
2823 -> 2777;
2824 -> 2823;
2825 -> 2821;
2825 -> 2824;
2825 -> 2820;
2825 -> 2823;
2826 -> 2773;
2826 -> 2825;
2826 -> 2772;
2827 -> 2773;
2827 -> 2772;
2828 -> 2770;
2828 -> 2825;
2828 -> 2772;
2829 -> 2771;
2829 -> 2825;
2829 -> 2772;
2830 -> 2772;
2831 -> 2766;
2831 -> 2830;
2831 -> 2772;
2832 -> 2831;
2832 -> 2772;
2834 -> 2833;
2835 -> 2833;
2836 -> 2828;
2836 -> 2832;
2837 -> 2829;
2837 -> 2832;
2838 -> 2832;
2839 -> 2836;
2839 -> 2838;
2840 -> 2837;
2840 -> 2838;
2841 -> 2839;
2841 -> 2838;
2842 -> 2840;
2842 -> 2838;
2843 -> 2838;
2844 -> 2841;
2844 -> 2843;
2845 -> 2842;
2845 -> 2843;
2846 -> 2835;
2846 -> 2843;
2847 -> 2843;
2848 -> 2847;
2849 -> 2848;
2849 -> 2847;
2850 -> 2849;
2850 -> 2843;
2851 -> 2844;
2851 -> 2850;
2852 -> 2850;
2853 -> 2845;
2853 -> 2850;
2854 -> 2850;
2855 -> 2853;
2855 -> 2854;
2855 -> 2851;
2855 -> 2850;
2856 -> 2844;
2856 -> 2843;
2857 -> 2845;
2857 -> 2843;
2858 -> 2856;
2858 -> 2857;
2858 -> 2843;
2859 -> 2844;
2859 -> 2843;
2860 -> 2845;
2860 -> 2859;
2861 -> 2859;
2861 -> 2860;
2861 -> 2855;
2862 -> 2861;
2863 -> 2861;
2863 -> 2772;
2864 -> 2861;
2864 -> 2772;
2865 -> 2861;
2865 -> 2843;
2866 -> 2861;
2867 -> 2861;
2868 -> 2861;
2869 -> 2861;
2870 -> 2867;
2870 -> 2861;
2871 -> 2866;
2871 -> 2870;
2871 -> 2861;
2872 -> 2871;
2872 -> 2861;
2873 -> 2871;
2873 -> 2872;
2873 -> 2861;
2874 -> 2872;
2874 -> 2873;
2875 -> 2861;
2875 -> 2874;
2875 -> 2772;
2876 -> 2874;
2876 -> 2843;
2877 -> 2874;
2878 -> 2874;
2878 -> 2772;
2879 -> 2874;
2879 -> 2772;
2880 -> 2763;
2881 -> 2880;
2881 -> 2742;
2882 -> 2881;
2883 -> 2741;
2883 -> 2882;
2883 -> 2874;
2883 -> 2737;
2884 -> 2711;
2885 -> 2714;
2885 -> 2884;
2885 -> 2711;
2886 -> 2707;
2887 -> 760;
2887 -> 744;
2888 -> 2887;
2888 -> 712;
2889 -> 712;
2890 -> 731;
2890 -> 2889;
2890 -> 712;
2891 -> 2888;
2891 -> 2890;
2892 -> 2891;
2892 -> 712;
2893 -> 2891;
2893 -> 712;
2894 -> 2893;
2894 -> 674;
2895 -> 2894;
2895 -> 26;
2896 -> 2895;
2896 -> 1;
}