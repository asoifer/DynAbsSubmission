digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 686571"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 686572"];
3 [label="param BindingTests(this) 686573"];
4 [label="'C' 686574"];
5 [label="DefaultTypeName = 'C' 686575"];
6 [label="'M' 686576"];
7 [label="DefaultMethodName = 'M' 686577"];
8 [label="@'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 686578"];
9 [label="LINQ =\n        #region the string LINQ defines a complete LINQ API called List1<T> (for instance method) and List2<T> (for extension methods)\n @'using System;\nusing System.Text;\n\npublic delegate R Func1<in T1, out R>(T1 arg1);\npublic delegate R Func1<in T1, in T2, out R>(T1 arg1, T2 arg2);\n\npublic class List1<T>\n{\n    internal T[] data;\n    internal int length;\n\n    public List1(params T[] args)\n    {\n        this.data = (T[])args.Clone();\n        this.length = data.Length;\n    }\n\n    public List1()\n    {\n        this.data = new T[0];\n        this.length = 0;\n    }\n\n    public int Length { get { return length; } }\n\n    //public T this[int index] { get { return this.data[index]; } }\n    public T Get(int index) { return this.data[index]; }\n\n    public virtual void Add(T t)\n    {\n        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n        data[length++] = t;\n    }\n\n    public override string ToString()\n    {\n        StringBuilder builder = new StringBuilder();\n        builder.Append('[');\n        for (int i = 0; i < Length; i++)\n        {\n            if (i != 0) builder.Append(',').Append(' ');\n            builder.Append(data[i]);\n        }\n        builder.Append(']');\n        return builder.ToString();\n    }\n\n    public List1<E> Cast<E>()\n    {\n        E[] data = new E[Length];\n        for (int i = 0; i < Length; i++)\n            data[i] = (E)(object)this.data[i];\n        return new List1<E>(data);\n    }\n\n    public List1<T> Where(Func1<T, bool> predicate)\n    {\n        List1<T> result = new List1<T>();\n        for (int i = 0; i < Length; i++)\n        {\n            T datum = this.data[i];\n            if (predicate(datum)) result.Add(datum);\n        }\n        return result;\n    }\n\n    public List1<U> Select<U>(Func1<T, U> selector)\n    {\n        int length = this.Length;\n        U[] data = new U[length];\n        for (int i = 0; i < length; i++) data[i] = selector(this.data[i]);\n        return new List1<U>(data);\n    }\n\n    public List1<V> SelectMany<U, V>(Func1<T, List1<U>> selector, Func1<T, U, V> resultSelector)\n    {\n        List1<V> result = new List1<V>();\n        int length = this.Length;\n        for (int i = 0; i < length; i++)\n        {\n            T t = this.data[i];\n            List1<U> selected = selector(t);\n            int ulength = selected.Length;\n            for (int j = 0; j < ulength; j++)\n            {\n                U u = selected.data[j];\n                V v = resultSelector(t, u);\n                result.Add(v);\n            }\n        }\n\n        return result;\n    }\n\n    public List1<V> Join<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, U, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                for (int k = 0; k < row.u.Length; k++)\n                {\n                    U u = row.u.Get(k);\n                    V v = resultSelector(t, u);\n                    result.Add(v);\n                }\n            }\n        }\n        return result;\n    }\n\n    class Joined<K, T2, U>\n    {\n        public Joined(K k)\n        {\n            this.k = k;\n            this.t = new List1<T2>();\n            this.u = new List1<U>();\n        }\n        public readonly K k;\n        public readonly List1<T2> t;\n        public readonly List1<U> u;\n    }\n\n    public List1<V> GroupJoin<U, K, V>(List1<U> inner, Func1<T, K> outerKeyselector,\n        Func1<U, K> innerKeyselector, Func1<T, List1<U>, V> resultSelector)\n    {\n        List1<Joined<K, T, U>> joined = new List1<Joined<K, T, U>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = outerKeyselector(t);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.t.Add(t);\n        }\n        for (int i = 0; i < inner.Length; i++)\n        {\n            U u = inner.Get(i);\n            K k = innerKeyselector(u);\n            Joined<K, T, U> row = null;\n            for (int j = 0; j < joined.Length; j++)\n            {\n                if (joined.Get(j).k.Equals(k))\n                {\n                    row = joined.Get(j);\n                    break;\n                }\n            }\n            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n            row.u.Add(u);\n        }\n        List1<V> result = new List1<V>();\n        for (int i = 0; i < joined.Length; i++)\n        {\n            Joined<K, T, U> row = joined.Get(i);\n            for (int j = 0; j < row.t.Length; j++)\n            {\n                T t = row.t.Get(j);\n                V v = resultSelector(t, row.u);\n                result.Add(v);\n            }\n        }\n        return result;\n    }\n\n    public OrderedList1<T> OrderBy<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenBy(Keyselector);\n        return result;\n    }\n\n    public OrderedList1<T> OrderByDescending<K>(Func1<T, K> Keyselector)\n    {\n        OrderedList1<T> result = new OrderedList1<T>(this);\n        result.ThenByDescending(Keyselector);\n        return result;\n    }\n\n    public List1<Group1<K, T>> GroupBy<K>(Func1<T, K> Keyselector)\n    {\n        List1<Group1<K, T>> result = new List1<Group1<K, T>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, T> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, T>(k));\n            }\n            Group1.Add(t);\n        }\n        return result;\n    }\n\n    public List1<Group1<K, E>> GroupBy<K, E>(Func1<T, K> Keyselector,\n        Func1<T, E> elementSelector)\n    {\n        List1<Group1<K, E>> result = new List1<Group1<K, E>>();\n        for (int i = 0; i < Length; i++)\n        {\n            T t = this.Get(i);\n            K k = Keyselector(t);\n            Group1<K, E> Group1 = null;\n            for (int j = 0; j < result.Length; j++)\n            {\n                if (result.Get(j).Key.Equals(k))\n                {\n                    Group1 = result.Get(j);\n                    break;\n                }\n            }\n            if (Group1 == null)\n            {\n                result.Add(Group1 = new Group1<K, E>(k));\n            }\n            Group1.Add(elementSelector(t));\n        }\n        return result;\n    }\n}\n\npublic class OrderedList1<T> : List1<T>\n{\n    private List1<Keys1> Keys1;\n\n    public override void Add(T t)\n    {\n        throw new NotSupportedException();\n    }\n\n    internal OrderedList1(List1<T> list)\n    {\n        Keys1 = new List1<Keys1>();\n        for (int i = 0; i < list.Length; i++)\n        {\n            base.Add(list.Get(i));\n            Keys1.Add(new Keys1());\n        }\n    }\n\n    public OrderedList1<T> ThenBy<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add((IComparable)o);\n        }\n        Sort();\n        return this;\n    }\n\n    class ReverseOrder : IComparable\n    {\n        IComparable c;\n        public ReverseOrder(IComparable c)\n        {\n            this.c = c;\n        }\n        public int CompareTo(object o)\n        {\n            ReverseOrder other = (ReverseOrder)o;\n            return other.c.CompareTo(this.c);\n        }\n        public override string ToString()\n        {\n            return String.Empty + '-' + c;\n        }\n    }\n\n    public OrderedList1<T> ThenByDescending<K>(Func1<T, K> Keyselector)\n    {\n        for (int i = 0; i < Length; i++)\n        {\n            object o = Keyselector(this.Get(i)); // work around bug 8405\n            Keys1.Get(i).Add(new ReverseOrder((IComparable)o));\n        }\n        Sort();\n        return this;\n    }\n\n    void Sort()\n    {\n        Array.Sort(this.Keys1.data, this.data, 0, Length);\n    }\n}\n\nclass Keys1 : List1<IComparable>, IComparable\n{\n    public int CompareTo(object o)\n    {\n        Keys1 other = (Keys1)o;\n        for (int i = 0; i < Length; i++)\n        {\n            int c = this.Get(i).CompareTo(other.Get(i));\n            if (c != 0) return c;\n        }\n        return 0;\n    }\n}\n\npublic class Group1<K, T> : List1<T>\n{\n    public Group1(K k, params T[] data)\n        : base(data)\n    {\n        this.Key = k;\n    }\n\n    public K Key { get; private set; }\n\n    public override string ToString()\n    {\n        return Key + String.Empty + ':' + base.ToString();\n    }\n}\n\n//public delegate R Func2<in T1, out R>(T1 arg1);\n//public delegate R Func2<in T1, in T2, out R>(T1 arg1, T2 arg2);\n//\n//public class List2<T>\n//{\n//    internal T[] data;\n//    internal int length;\n//\n//    public List2(params T[] args)\n//    {\n//        this.data = (T[])args.Clone();\n//        this.length = data.Length;\n//    }\n//\n//    public List2()\n//    {\n//        this.data = new T[0];\n//        this.length = 0;\n//    }\n//\n//    public int Length { get { return length; } }\n//\n//    //public T this[int index] { get { return this.data[index]; } }\n//    public T Get(int index) { return this.data[index]; }\n//\n//    public virtual void Add(T t)\n//    {\n//        if (data.Length == length) Array.Resize(ref data, data.Length * 2 + 1);\n//        data[length++] = t;\n//    }\n//\n//    public override string ToString()\n//    {\n//        StringBuilder builder = new StringBuilder();\n//        builder.Append('[');\n//        for (int i = 0; i < Length; i++)\n//        {\n//            if (i != 0) builder.Append(',').Append(' ');\n//            builder.Append(data[i]);\n//        }\n//        builder.Append(']');\n//        return builder.ToString();\n//    }\n//\n//}\n//\n//public class OrderedList2<T> : List2<T>\n//{\n//    internal List2<Keys2> Keys2;\n//\n//    public override void Add(T t)\n//    {\n//        throw new NotSupportedException();\n//    }\n//\n//    internal OrderedList2(List2<T> list)\n//    {\n//        Keys2 = new List2<Keys2>();\n//        for (int i = 0; i < list.Length; i++)\n//        {\n//            base.Add(list.Get(i));\n//            Keys2.Add(new Keys2());\n//        }\n//    }\n//\n//    internal void Sort()\n//    {\n//        Array.Sort(this.Keys2.data, this.data, 0, Length);\n//    }\n//}\n//\n//class Keys2 : List2<IComparable>, IComparable\n//{\n//    public int CompareTo(object o)\n//    {\n//        Keys2 other = (Keys2)o;\n//        for (int i = 0; i < Length; i++)\n//        {\n//            int c = this.Get(i).CompareTo(other.Get(i));\n//            if (c != 0) return c;\n//        }\n//        return 0;\n//    }\n//}\n//\n//public class Group2<K, T> : List2<T>\n//{\n//    public Group2(K k, params T[] data)\n//        : base(data)\n//    {\n//        this.Key = k;\n//    }\n//\n//    public K Key { get; private set; }\n//\n//    public override string ToString()\n//    {\n//        return Key + String.Empty + ':' + base.ToString();\n//    }\n//}\n//\n//public static class Extensions2\n//{\n//\n//    public static List2<E> Cast<T, E>(this List2<T> _this)\n//    {\n//        E[] data = new E[_this.Length];\n//        for (int i = 0; i < _this.Length; i++)\n//            data[i] = (E)(object)_this.data[i];\n//        return new List2<E>(data);\n//    }\n//\n//    public static List2<T> Where<T>(this List2<T> _this, Func2<T, bool> predicate)\n//    {\n//        List2<T> result = new List2<T>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T datum = _this.data[i];\n//            if (predicate(datum)) result.Add(datum);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<U> Select<T,U>(this List2<T> _this, Func2<T, U> selector)\n//    {\n//        int length = _this.Length;\n//        U[] data = new U[length];\n//        for (int i = 0; i < length; i++) data[i] = selector(_this.data[i]);\n//        return new List2<U>(data);\n//    }\n//\n//    public static List2<V> SelectMany<T, U, V>(this List2<T> _this, Func2<T, List2<U>> selector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<V> result = new List2<V>();\n//        int length = _this.Length;\n//        for (int i = 0; i < length; i++)\n//        {\n//            T t = _this.data[i];\n//            List2<U> selected = selector(t);\n//            int ulength = selected.Length;\n//            for (int j = 0; j < ulength; j++)\n//            {\n//                U u = selected.data[j];\n//                V v = resultSelector(t, u);\n//                result.Add(v);\n//            }\n//        }\n//\n//        return result;\n//    }\n//\n//    public static List2<V> Join<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, U, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                for (int k = 0; k < row.u.Length; k++)\n//                {\n//                    U u = row.u.Get(k);\n//                    V v = resultSelector(t, u);\n//                    result.Add(v);\n//                }\n//            }\n//        }\n//        return result;\n//    }\n//\n//    class Joined<K, T2, U>\n//    {\n//        public Joined(K k)\n//        {\n//            this.k = k;\n//            this.t = new List2<T2>();\n//            this.u = new List2<U>();\n//        }\n//        public readonly K k;\n//        public readonly List2<T2> t;\n//        public readonly List2<U> u;\n//    }\n//\n//    public static List2<V> GroupJoin<T, U, K, V>(this List2<T> _this, List2<U> inner, Func2<T, K> outerKeyselector,\n//        Func2<U, K> innerKeyselector, Func2<T, List2<U>, V> resultSelector)\n//    {\n//        List2<Joined<K, T, U>> joined = new List2<Joined<K, T, U>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = outerKeyselector(t);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.t.Add(t);\n//        }\n//        for (int i = 0; i < inner.Length; i++)\n//        {\n//            U u = inner.Get(i);\n//            K k = innerKeyselector(u);\n//            Joined<K, T, U> row = null;\n//            for (int j = 0; j < joined.Length; j++)\n//            {\n//                if (joined.Get(j).k.Equals(k))\n//                {\n//                    row = joined.Get(j);\n//                    break;\n//                }\n//            }\n//            if (row == null) joined.Add(row = new Joined<K, T, U>(k));\n//            row.u.Add(u);\n//        }\n//        List2<V> result = new List2<V>();\n//        for (int i = 0; i < joined.Length; i++)\n//        {\n//            Joined<K, T, U> row = joined.Get(i);\n//            for (int j = 0; j < row.t.Length; j++)\n//            {\n//                T t = row.t.Get(j);\n//                V v = resultSelector(t, row.u);\n//                result.Add(v);\n//            }\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenBy(Keyselector);\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> OrderByDescending<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        OrderedList2<T> result = new OrderedList2<T>(_this);\n//        result.ThenByDescending(Keyselector);\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, T>> GroupBy<T, K>(this List2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        List2<Group2<K, T>> result = new List2<Group2<K, T>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, T> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, T>(k));\n//            }\n//            Group2.Add(t);\n//        }\n//        return result;\n//    }\n//\n//    public static List2<Group2<K, E>> GroupBy<T, K, E>(this List2<T> _this, Func2<T, K> Keyselector,\n//        Func2<T, E> elementSelector)\n//    {\n//        List2<Group2<K, E>> result = new List2<Group2<K, E>>();\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            T t = _this.Get(i);\n//            K k = Keyselector(t);\n//            Group2<K, E> Group2 = null;\n//            for (int j = 0; j < result.Length; j++)\n//            {\n//                if (result.Get(j).Key.Equals(k))\n//                {\n//                    Group2 = result.Get(j);\n//                    break;\n//                }\n//            }\n//            if (Group2 == null)\n//            {\n//                result.Add(Group2 = new Group2<K, E>(k));\n//            }\n//            Group2.Add(elementSelector(t));\n//        }\n//        return result;\n//    }\n//\n//    public static OrderedList2<T> ThenBy<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add((IComparable)o);\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//    class ReverseOrder : IComparable\n//    {\n//        IComparable c;\n//        public ReverseOrder(IComparable c)\n//        {\n//            this.c = c;\n//        }\n//        public int CompareTo(object o)\n//        {\n//            ReverseOrder other = (ReverseOrder)o;\n//            return other.c.CompareTo(this.c);\n//        }\n//        public override string ToString()\n//        {\n//            return String.Empty + '-' + c;\n//        }\n//    }\n//\n//    public static OrderedList2<T> ThenByDescending<T, K>(this OrderedList2<T> _this, Func2<T, K> Keyselector)\n//    {\n//        for (int i = 0; i < _this.Length; i++)\n//        {\n//            object o = Keyselector(_this.Get(i)); // work around bug 8405\n//            _this.Keys2.Get(i).Add(new ReverseOrder((IComparable)o));\n//        }\n//        _this.Sort();\n//        return _this;\n//    }\n//\n//}\n' 686579"];
10 [label="param CompilingTestBase(this) 686580"];
11 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 686581"];
12 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 686582"];
13 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 686583"];
14 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 686584"];
15 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 686585"];
16 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 686586"];
17 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 686587"];
18 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 686588"];
19 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 686589"];
20 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 686590"];
21 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 686591"];
22 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 686592"];
23 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 686593"];
24 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 686594"];
25 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 686595"];
26 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 686596"];
27 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 686597"];
28 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 686598"];
29 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 686599"];
30 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 686600"];
31 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 686601"];
32 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 686602"];
33 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 686603"];
34 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 686604"];
35 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 686605"];
36 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 686606"];
37 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 686607"];
38 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 686608"];
39 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 686609"];
40 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 686610"];
41 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 686611"];
42 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 686612"];
43 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 686613"];
44 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 686614"];
45 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 686615"];
46 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 686616"];
47 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 686617"];
48 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 686618"];
49 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 686619"];
50 [label="LazyThreadSafetyMode.PublicationOnly 686620"];
51 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 686621"];
52 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 686622"];
53 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 686623"];
54 [label="LazyThreadSafetyMode.PublicationOnly 686624"];
55 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 686625"];
56 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 686626"];
57 [label="RuntimeUtilities.IsCoreClrRuntime 686627"];
58 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 686628"];
59 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 686629"];
60 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 686630"];
61 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 686631"];
62 [label="LazyThreadSafetyMode.PublicationOnly 686632"];
63 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 686633"];
64 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 686634"];
65 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 686635"];
66 [label="LazyThreadSafetyMode.PublicationOnly 686636"];
67 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 686637"];
68 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 686638"];
69 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 686639"];
70 [label="LazyThreadSafetyMode.PublicationOnly 686640"];
71 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 686641"];
72 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 686642"];
73 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 686643"];
74 [label="LazyThreadSafetyMode.PublicationOnly 686644"];
75 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686645"];
76 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686646"];
77 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 686647"];
78 [label="LazyThreadSafetyMode.PublicationOnly 686648"];
79 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686649"];
80 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686650"];
81 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 686651"];
82 [label="LazyThreadSafetyMode.PublicationOnly 686652"];
83 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686653"];
84 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686654"];
85 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 686655"];
86 [label="LazyThreadSafetyMode.PublicationOnly 686656"];
87 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686657"];
88 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686658"];
89 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 686659"];
90 [label="LazyThreadSafetyMode.PublicationOnly 686660"];
91 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686661"];
92 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686662"];
93 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 686663"];
94 [label="LazyThreadSafetyMode.PublicationOnly 686664"];
95 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686665"];
96 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686666"];
97 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 686667"];
98 [label="LazyThreadSafetyMode.PublicationOnly 686668"];
99 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686669"];
100 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686670"];
101 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 686671"];
102 [label="LazyThreadSafetyMode.PublicationOnly 686672"];
103 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 686673"];
104 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 686674"];
105 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 686675"];
106 [label="LazyThreadSafetyMode.PublicationOnly 686676"];
107 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 686677"];
108 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 686678"];
109 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 686679"];
110 [label="LazyThreadSafetyMode.PublicationOnly 686680"];
111 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686681"];
112 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686682"];
113 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 686683"];
114 [label="LazyThreadSafetyMode.PublicationOnly 686684"];
115 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686685"];
116 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686686"];
117 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 686687"];
118 [label="LazyThreadSafetyMode.PublicationOnly 686688"];
119 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686689"];
120 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686690"];
121 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 686691"];
122 [label="LazyThreadSafetyMode.PublicationOnly 686692"];
123 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686693"];
124 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686694"];
125 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 686695"];
126 [label="LazyThreadSafetyMode.PublicationOnly 686696"];
127 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 686697"];
128 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 686698"];
129 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 686699"];
130 [label="LazyThreadSafetyMode.PublicationOnly 686700"];
131 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686701"];
132 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686702"];
133 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 686703"];
134 [label="LazyThreadSafetyMode.PublicationOnly 686704"];
135 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686705"];
136 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686706"];
137 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 686707"];
138 [label="LazyThreadSafetyMode.PublicationOnly 686708"];
139 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686709"];
140 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686710"];
141 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 686711"];
142 [label="LazyThreadSafetyMode.PublicationOnly 686712"];
143 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686713"];
144 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686714"];
145 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 686715"];
146 [label="LazyThreadSafetyMode.PublicationOnly 686716"];
147 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686717"];
148 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686718"];
149 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 686719"];
150 [label="LazyThreadSafetyMode.PublicationOnly 686720"];
151 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686721"];
152 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686722"];
153 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 686723"];
154 [label="LazyThreadSafetyMode.PublicationOnly 686724"];
155 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686725"];
156 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686726"];
157 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 686727"];
158 [label="LazyThreadSafetyMode.PublicationOnly 686728"];
159 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686729"];
160 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686730"];
161 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 686731"];
162 [label="LazyThreadSafetyMode.PublicationOnly 686732"];
163 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686733"];
164 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686734"];
165 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 686735"];
166 [label="LazyThreadSafetyMode.PublicationOnly 686736"];
167 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686737"];
168 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686738"];
169 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 686739"];
170 [label="LazyThreadSafetyMode.PublicationOnly 686740"];
171 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686741"];
172 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686742"];
173 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 686743"];
174 [label="LazyThreadSafetyMode.PublicationOnly 686744"];
175 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686745"];
176 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686746"];
177 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 686747"];
178 [label="LazyThreadSafetyMode.PublicationOnly 686748"];
179 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686749"];
180 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 686750"];
181 [label="@'R:\\Invalid.dll' 686751"];
182 [label="fullPath: @'R:\\Invalid.dll' 686752"];
183 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 686753"];
184 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 686754"];
185 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 686755"];
186 [label="MscorlibRef_v4_0_30316_17626 686756"];
187 [label="Net451.mscorlib 686757"];
188 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 686758"];
189 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 686759"];
190 [label="'/*<bind>*/' 686760"];
191 [label="StartString = '/*<bind>*/' 686761"];
192 [label="'/*</bind>*/' 686762"];
193 [label="EndString = '/*</bind>*/' 686763"];
194 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 686764"];
195 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 686765"];
196 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 686766"];
197 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 686767"];
198 [label="param CSharpTestBase(this) 686768"];
199 [label="param CommonTestBase(this) 686769"];
200 [label="param TestBase(this) 686770"];
201 [label="_temp 686771"];
202 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 686772"];
203 [label="param InaccessibleAndAccessibleValid(this) 686773"];
204 [label="var source =\n@'class A\n{\n    void F(int i) { }\n    internal void F(long l) { }\n    static void M(A a)\n    {\n        a.F(1); // no error\n    }\n}\nclass B\n{\n    static void M(A a)\n    {\n        a.F(1); // no error\n    }\n}'; 686774"];
205 [label="CreateCompilation(source).VerifyDiagnostics(); 686775"];
206 [label="source 686776"];
207 [label="param operator(string source) 686777"];
208 [label="source 686778"];
209 [label="new CSharpTestSource(source) 686779"];
210 [label="param CSharpTestSource(object value) 686780"];
211 [label="param CSharpTestSource(this) 686781"];
212 [label="Value 686782"];
213 [label="CreateCompilation(source).VerifyDiagnostics(); 686783"];
214 [label="CreateCompilation(source).VerifyDiagnostics(); 686784"];
215 [label="CreateCompilation(source) 686785"];
216 [label="param CreateCompilation(CSharpTestSource source) 686786"];
217 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 686787"];
218 [label="param CreateCompilation(CSharpCompilationOptions options = null) 686788"];
219 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 686789"];
220 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 686790"];
221 [label="param CreateCompilation(string assemblyName = '') 686791"];
222 [label="param CreateCompilation(string sourceFileName = '') 686792"];
223 [label="param CreateCompilation(bool skipUsesIsNullable = false) 686793"];
224 [label="source 686794"];
225 [label="targetFramework 686795"];
226 [label="references 686796"];
227 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 686797"];
228 [label="param GetReferences(TargetFramework tf) 686798"];
229 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 686799"];
230 [label="var references = GetReferences(tf); 686800"];
231 [label="GetReferences(tf) 686801"];
232 [label="param GetReferences(TargetFramework targetFramework) 686802"];
233 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 686803"];
234 [label="StandardReferences 686804"];
235 [label="RuntimeUtilities.IsCoreClrRuntime 686805"];
236 [label="Mscorlib46ExtendedReferences 686806"];
237 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 686807"];
238 [label="TestBase.ValueTupleRef 686808"];
239 [label="TestReferences.NetFx.ValueTuple.tuplelib 686809"];
240 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 686810"];
241 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 686811"];
242 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 686812"];
243 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 686813"];
244 [label="return references; 686814"];
245 [label="options 686815"];
246 [label="parseOptions 686816"];
247 [label="assemblyName 686817"];
248 [label="sourceFileName 686818"];
249 [label="skipUsesIsNullable 686819"];
250 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 686820"];
251 [label="param CreateEmptyCompilation(CSharpTestSource source) 686821"];
252 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 686822"];
253 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 686823"];
254 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 686824"];
255 [label="param CreateEmptyCompilation(string assemblyName = '') 686825"];
256 [label="param CreateEmptyCompilation(string sourceFileName = '') 686826"];
257 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 686827"];
258 [label="source 686828"];
259 [label="references 686829"];
260 [label="options 686830"];
261 [label="parseOptions 686831"];
262 [label="assemblyName 686832"];
263 [label="sourceFileName 686833"];
264 [label="skipUsesIsNullable 686834"];
265 [label="null 686835"];
266 [label="experimentalFeature: null 686836"];
267 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 686837"];
268 [label="param CreateCompilationCore(CSharpTestSource source) 686838"];
269 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 686839"];
270 [label="param CreateCompilationCore(CSharpCompilationOptions options) 686840"];
271 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 686841"];
272 [label="param CreateCompilationCore(string assemblyName) 686842"];
273 [label="param CreateCompilationCore(string sourceFileName) 686843"];
274 [label="param CreateCompilationCore(bool skipUsesIsNullable) 686844"];
275 [label="param CreateCompilationCore(MessageID? experimentalFeature) 686845"];
276 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 686846"];
277 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 686847"];
278 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 686848"];
279 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 686849"];
280 [label="param GetSyntaxTrees(string sourceFileName = '') 686850"];
281 [label="param GetSyntaxTrees(this) 686851"];
282 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 686852"];
283 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 686853"];
284 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 686854"];
285 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 686855"];
286 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 686856"];
287 [label="param Parse(string text) 686857"];
288 [label="param Parse(string filename = '') 686858"];
289 [label="param Parse(CSharpParseOptions options = null) 686859"];
290 [label="param Parse(Encoding encoding = null) 686860"];
291 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 686861"];
292 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 686862"];
293 [label="kind: SourceCodeKind.Regular 686863"];
294 [label="documentationMode: DocumentationMode.Parse 686864"];
295 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 686865"];
296 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 686866"];
297 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 686867"];
298 [label="SourceCodeKind.Script 686868"];
299 [label="Regular.WithKind(SourceCodeKind.Script) 686869"];
300 [label="Script = Regular.WithKind(SourceCodeKind.Script) 686870"];
301 [label="LanguageVersion.CSharp6 686871"];
302 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 686872"];
303 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 686873"];
304 [label="LanguageVersion.CSharp7 686874"];
305 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 686875"];
306 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 686876"];
307 [label="LanguageVersion.CSharp7_1 686877"];
308 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 686878"];
309 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 686879"];
310 [label="LanguageVersion.CSharp7_2 686880"];
311 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 686881"];
312 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 686882"];
313 [label="LanguageVersion.CSharp7_3 686883"];
314 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 686884"];
315 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 686885"];
316 [label="LanguageVersion.Default 686886"];
317 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 686887"];
318 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 686888"];
319 [label="LanguageVersion.Preview 686889"];
320 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 686890"];
321 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 686891"];
322 [label="LanguageVersion.CSharp8 686892"];
323 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 686893"];
324 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 686894"];
325 [label="LanguageVersion.CSharp9 686895"];
326 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 686896"];
327 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 686897"];
328 [label="DocumentationMode.Diagnose 686898"];
329 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 686899"];
330 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 686900"];
331 [label="Regular 686901"];
332 [label="'UseLegacyStrongNameProvider' 686902"];
333 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 686903"];
334 [label="param WithFeature(this CSharpParseOptions options) 686904"];
335 [label="param WithFeature(string feature) 686905"];
336 [label="param WithFeature(string value = 'true') 686906"];
337 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 686907"];
338 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 686908"];
339 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 686909"];
340 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 686910"];
341 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 686911"];
342 [label="new[] { new KeyValuePair<string, string>(feature, value) } 686912"];
343 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 686913"];
344 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 686914"];
345 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 686915"];
346 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 686916"];
347 [label="1 686917"];
348 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 686918"];
349 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 686919"];
350 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 686920"];
351 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 686921"];
352 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 686922"];
353 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 686923"];
354 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 686924"];
355 [label="LanguageVersion.CSharp8 686925"];
356 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 686926"];
357 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 686927"];
358 [label="RegularWithExtendedPartialMethods = RegularPreview 686928"];
359 [label="new SmallDictionary<string, string> { } 686929"];
360 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 686930"];
361 [label="kind: SourceCodeKind.Regular 686931"];
362 [label="documentationMode: DocumentationMode.None 686932"];
363 [label="languageVersion: LanguageVersion.Preview 686933"];
364 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 686934"];
365 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 686935"];
366 [label="s_experimentalFeatures 686936"];
367 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 686937"];
368 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 686938"];
369 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 686939"];
370 [label="'testV7SwitchBinder' 686940"];
371 [label="'true' 686941"];
372 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 686942"];
373 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 686943"];
374 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 686944"];
375 [label="RegularWithoutRecursivePatterns = Regular7_3 686945"];
376 [label="RegularWithRecursivePatterns = Regular8 686946"];
377 [label="RegularWithoutPatternCombinators = Regular8 686947"];
378 [label="RegularWithPatternCombinators = RegularPreview 686948"];
379 [label="OutputKind.DynamicallyLinkedLibrary 686949"];
380 [label="OptimizationLevel.Release 686950"];
381 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 686951"];
382 [label="param CreateTestOptions(OutputKind outputKind) 686952"];
383 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 686953"];
384 [label="param CreateTestOptions(bool allowUnsafe = false) 686954"];
385 [label="outputKind 686955"];
386 [label="optimizationLevel: optimizationLevel 686956"];
387 [label="warningLevel: Diagnostic.MaxWarningLevel 686957"];
388 [label="allowUnsafe: allowUnsafe 686958"];
389 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 686959"];
390 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 686960"];
391 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 686961"];
392 [label="OutputKind.ConsoleApplication 686962"];
393 [label="OptimizationLevel.Release 686963"];
394 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 686964"];
395 [label="param CreateTestOptions(OutputKind outputKind) 686965"];
396 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 686966"];
397 [label="param CreateTestOptions(bool allowUnsafe = false) 686967"];
398 [label="outputKind 686968"];
399 [label="optimizationLevel: optimizationLevel 686969"];
400 [label="warningLevel: Diagnostic.MaxWarningLevel 686970"];
401 [label="allowUnsafe: allowUnsafe 686971"];
402 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 686972"];
403 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 686973"];
404 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 686974"];
405 [label="true 686975"];
406 [label="ReleaseDll.WithDebugPlusMode(true) 686976"];
407 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 686977"];
408 [label="true 686978"];
409 [label="ReleaseExe.WithDebugPlusMode(true) 686979"];
410 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 686980"];
411 [label="OutputKind.DynamicallyLinkedLibrary 686981"];
412 [label="OptimizationLevel.Debug 686982"];
413 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 686983"];
414 [label="param CreateTestOptions(OutputKind outputKind) 686984"];
415 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 686985"];
416 [label="param CreateTestOptions(bool allowUnsafe = false) 686986"];
417 [label="outputKind 686987"];
418 [label="optimizationLevel: optimizationLevel 686988"];
419 [label="warningLevel: Diagnostic.MaxWarningLevel 686989"];
420 [label="allowUnsafe: allowUnsafe 686990"];
421 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 686991"];
422 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 686992"];
423 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 686993"];
424 [label="OutputKind.ConsoleApplication 686994"];
425 [label="OptimizationLevel.Debug 686995"];
426 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 686996"];
427 [label="param CreateTestOptions(OutputKind outputKind) 686997"];
428 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 686998"];
429 [label="param CreateTestOptions(bool allowUnsafe = false) 686999"];
430 [label="outputKind 687000"];
431 [label="optimizationLevel: optimizationLevel 687001"];
432 [label="warningLevel: Diagnostic.MaxWarningLevel 687002"];
433 [label="allowUnsafe: allowUnsafe 687003"];
434 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 687004"];
435 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 687005"];
436 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 687006"];
437 [label="OutputKind.WindowsRuntimeMetadata 687007"];
438 [label="OptimizationLevel.Release 687008"];
439 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 687009"];
440 [label="param CreateTestOptions(OutputKind outputKind) 687010"];
441 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 687011"];
442 [label="param CreateTestOptions(bool allowUnsafe = false) 687012"];
443 [label="outputKind 687013"];
444 [label="optimizationLevel: optimizationLevel 687014"];
445 [label="warningLevel: Diagnostic.MaxWarningLevel 687015"];
446 [label="allowUnsafe: allowUnsafe 687016"];
447 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 687017"];
448 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 687018"];
449 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 687019"];
450 [label="OutputKind.WindowsRuntimeMetadata 687020"];
451 [label="OptimizationLevel.Debug 687021"];
452 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 687022"];
453 [label="param CreateTestOptions(OutputKind outputKind) 687023"];
454 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 687024"];
455 [label="param CreateTestOptions(bool allowUnsafe = false) 687025"];
456 [label="outputKind 687026"];
457 [label="optimizationLevel: optimizationLevel 687027"];
458 [label="warningLevel: Diagnostic.MaxWarningLevel 687028"];
459 [label="allowUnsafe: allowUnsafe 687029"];
460 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 687030"];
461 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 687031"];
462 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 687032"];
463 [label="OutputKind.NetModule 687033"];
464 [label="OptimizationLevel.Release 687034"];
465 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 687035"];
466 [label="param CreateTestOptions(OutputKind outputKind) 687036"];
467 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 687037"];
468 [label="param CreateTestOptions(bool allowUnsafe = false) 687038"];
469 [label="outputKind 687039"];
470 [label="optimizationLevel: optimizationLevel 687040"];
471 [label="warningLevel: Diagnostic.MaxWarningLevel 687041"];
472 [label="allowUnsafe: allowUnsafe 687042"];
473 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 687043"];
474 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 687044"];
475 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 687045"];
476 [label="OutputKind.NetModule 687046"];
477 [label="OptimizationLevel.Debug 687047"];
478 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 687048"];
479 [label="param CreateTestOptions(OutputKind outputKind) 687049"];
480 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 687050"];
481 [label="param CreateTestOptions(bool allowUnsafe = false) 687051"];
482 [label="outputKind 687052"];
483 [label="optimizationLevel: optimizationLevel 687053"];
484 [label="warningLevel: Diagnostic.MaxWarningLevel 687054"];
485 [label="allowUnsafe: allowUnsafe 687055"];
486 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 687056"];
487 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 687057"];
488 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 687058"];
489 [label="true 687059"];
490 [label="ReleaseDll.WithAllowUnsafe(true) 687060"];
491 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 687061"];
492 [label="true 687062"];
493 [label="ReleaseExe.WithAllowUnsafe(true) 687063"];
494 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 687064"];
495 [label="true 687065"];
496 [label="DebugDll.WithAllowUnsafe(true) 687066"];
497 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 687067"];
498 [label="true 687068"];
499 [label="DebugExe.WithAllowUnsafe(true) 687069"];
500 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 687070"];
501 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 687071"];
502 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 687072"];
503 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 687073"];
504 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 687074"];
505 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 687075"];
506 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 687076"];
507 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 687077"];
508 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 687078"];
509 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 687079"];
510 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 687080"];
511 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 687081"];
512 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 687082"];
513 [label="DebugInformationFormat.Pdb 687083"];
514 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 687084"];
515 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 687085"];
516 [label="options = TestOptions.Regular; 687086"];
517 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 687087"];
518 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 687088"];
519 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 687089"];
520 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 687090"];
521 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 687091"];
522 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 687092"];
523 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 687093"];
524 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 687094"];
525 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 687095"];
526 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 687096"];
527 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 687097"];
528 [label="param CheckSerializable(SyntaxTree tree) 687098"];
529 [label="var stream = new MemoryStream(); 687099"];
530 [label="var root = tree.GetRoot(); 687100"];
531 [label="var root = tree.GetRoot(); 687101"];
532 [label="root.SerializeTo(stream); 687102"];
533 [label="root.SerializeTo(stream); 687103"];
534 [label="root.SerializeTo(stream); 687104"];
535 [label="stream.Position = 0; 687105"];
536 [label="stream.Position 687106"];
537 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 687107"];
538 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 687108"];
539 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 687109"];
540 [label="return tree; 687110"];
541 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 687111"];
542 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 687112"];
543 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 687113"];
544 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 687114"];
545 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 687115"];
546 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 687116"];
547 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 687117"];
548 [label="hasTopLevelStatements 687118"];
549 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 687119"];
550 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 687120"];
551 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 687121"];
552 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 687122"];
553 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 687123"];
554 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 687124"];
555 [label="param ValidateIOperations(Func<Compilation> createCompilation) 687125"];
556 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 687126"];
557 [label="return; 687127"];
558 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 687128"];
559 [label="var compilation = createCompilationLambda(); 687129"];
560 [label="var compilation = createCompilationLambda(); 687130"];
561 [label="return Guid.NewGuid().ToString('D'); 687131"];
562 [label="var compilation = createCompilationLambda(); 687132"];
563 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 687133"];
564 [label="IsNullableEnabled(compilation) 687134"];
565 [label="param IsNullableEnabled(CSharpCompilation compilation) 687135"];
566 [label="var trees = compilation.SyntaxTrees; 687136"];
567 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 687137"];
568 [label="var options = (CSharpParseOptions)trees[0].Options; 687138"];
569 [label="var options = (CSharpParseOptions)trees[0].Options; 687139"];
570 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 687140"];
571 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 687141"];
572 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 687142"];
573 [label="return compilation; 687143"];
574 [label="CreateCompilation(source).VerifyDiagnostics() 687144"];
575 [label="param VerifyDiagnostics(this TCompilation c) 687145"];
576 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 687146"];
577 [label="var diagnostics = c.GetDiagnostics(); 687147"];
578 [label="null 687148"];
579 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 687149"];
580 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 687150"];
581 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 687151"];
582 [label="null 687152"];
583 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 687153"];
584 [label="param Imports(CSharpCompilation compilation) 687154"];
585 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 687155"];
586 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 687156"];
587 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 687157"];
588 [label="param Imports(DiagnosticBag diagnostics) 687158"];
589 [label="param Imports(this) 687159"];
590 [label="_compilation 687160"];
591 [label="_diagnostics 687161"];
592 [label="UsingAliases 687162"];
593 [label="Debug.Assert(usingAliases != null); 687163"];
594 [label="Debug.Assert(usingAliases != null); 687164"];
595 [label="Debug.Assert(!usings.IsDefault); 687165"];
596 [label="Debug.Assert(!externs.IsDefault); 687166"];
597 [label="_compilation 687167"];
598 [label="this.UsingAliases 687168"];
599 [label="this.Usings 687169"];
600 [label="_diagnostics 687170"];
601 [label="this.ExternAliases 687171"];
602 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 687172"];
603 [label="var diagnostics = c.GetDiagnostics(); 687173"];
604 [label="param FromGlobalUsings(CSharpCompilation compilation) 687174"];
605 [label="var usings = compilation.Options.Usings; 687175"];
606 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 687176"];
607 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 687177"];
608 [label="if (usings.Length == 0 && compilation.PreviousSubmission == null)\n            {\n                return Empty;\n            } 687178"];
609 [label="return Empty; 687179"];
610 [label="var diagnostics = c.GetDiagnostics(); 687180"];
611 [label="param Complete(CancellationToken cancellationToken) 687181"];
612 [label="param Complete(this) 687182"];
613 [label="while (true)\n            {\n                cancellationToken.ThrowIfCancellationRequested();\n                var incompletePart = _state.NextIncompletePart;\n                switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                }\n\n                _state.SpinWaitComplete(incompletePart, cancellationToken);\n            } 687183"];
614 [label="cancellationToken.ThrowIfCancellationRequested(); 687184"];
615 [label="var incompletePart = _state.NextIncompletePart; 687185"];
616 [label="switch (incompletePart)\n                {\n                    case CompletionPart.StartValidatingImports:\n                        {\n                            if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            }\n                        }\n                        break;\n\n                    case CompletionPart.FinishValidatingImports:\n                        // some other thread has started validating imports (otherwise we would be in the case above) so\n                        // we just wait for it to both finish and report the diagnostics.\n                        Debug.Assert(_state.HasComplete(CompletionPart.StartValidatingImports));\n                        _state.SpinWaitComplete(CompletionPart.FinishValidatingImports, cancellationToken);\n                        break;\n\n                    case CompletionPart.None:\n                        return;\n\n                    default:\n                        // any other values are completion parts intended for other kinds of symbols\n                        _state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll);\n                        break;\n                } 687186"];
617 [label="_state.NotePartComplete(CompletionPart.All & ~CompletionPart.ImportsAll); 687187"];
618 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 687188"];
619 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 687189"];
620 [label="_state.SpinWaitComplete(incompletePart, cancellationToken); 687190"];
621 [label="if (_state.NotePartComplete(CompletionPart.StartValidatingImports))\n                            {\n                                Validate();\n                                _state.NotePartComplete(CompletionPart.FinishValidatingImports);\n                            } 687191"];
622 [label="Validate() 687192"];
623 [label="param Validate(this) 687193"];
624 [label="if (this == Empty)\n            {\n                return;\n            } 687194"];
625 [label="return; 687195"];
626 [label="Validate(); 687196"];
627 [label="_state.NotePartComplete(CompletionPart.FinishValidatingImports); 687197"];
628 [label="return; 687198"];
629 [label="param Includes(this BinderFlags self) 687199"];
630 [label="param Includes(BinderFlags other) 687200"];
631 [label="return (self & other) == other; 687201"];
632 [label="var diagnostics = c.GetDiagnostics(); 687202"];
633 [label="0 687203"];
634 [label="ExternalScope = 0 687204"];
635 [label="1 687205"];
636 [label="TopLevelScope = 1 687206"];
637 [label="2 687207"];
638 [label="ValueKindInsignificantBits = 2 687208"];
639 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 687209"];
640 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 687210"];
641 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 687211"];
642 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 687212"];
643 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 687213"];
644 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 687214"];
645 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 687215"];
646 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 687216"];
647 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 687217"];
648 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 687218"];
649 [label="10 687219"];
650 [label="MaxParameterListsForErrorRecovery = 10 687220"];
651 [label="'<>h__TransparentIdentifier' 687221"];
652 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 687222"];
653 [label="s => (MethodSymbol)s 687223"];
654 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 687224"];
655 [label="s => (PropertySymbol)s 687225"];
656 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 687226"];
657 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpCompilation compilation) 687227"];
658 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(WellKnownMember attributeMember) 687228"];
659 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(DiagnosticBag diagnostics) 687229"];
660 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(Location? location = null) 687230"];
661 [label="param ReportUseSiteDiagnosticForSynthesizedAttribute(CSharpSyntaxNode? syntax = null) 687231"];
662 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 687232"];
663 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 687233"];
664 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 687234"];
665 [label="RoslynDebug.Assert((location != null) ^ (syntax != null)); 687235"];
666 [label="bool isOptional = WellKnownMembers.IsSynthesizedAttributeOptional(attributeMember); 687236"];
667 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 687237"];
668 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 687238"];
669 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 687239"];
670 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 687240"];
671 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 687241"];
672 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional); 687242"];
673 [label="GetWellKnownTypeMember(compilation, attributeMember, diagnostics, location, syntax, isOptional) 687243"];
674 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 687244"];
675 [label="param GetWellKnownTypeMember(WellKnownMember member) 687245"];
676 [label="param GetWellKnownTypeMember(DiagnosticBag diagnostics) 687246"];
677 [label="param GetWellKnownTypeMember(Location location = null) 687247"];
678 [label="param GetWellKnownTypeMember(SyntaxNode syntax = null) 687248"];
679 [label="param GetWellKnownTypeMember(bool isOptional = false) 687249"];
680 [label="Debug.Assert((syntax != null) ^ (location != null)); 687250"];
681 [label="Debug.Assert((syntax != null) ^ (location != null)); 687251"];
682 [label="Debug.Assert((syntax != null) ^ (location != null)); 687252"];
683 [label="Debug.Assert((syntax != null) ^ (location != null)); 687253"];
684 [label="DiagnosticInfo useSiteDiagnostic; 687254"];
685 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 687255"];
686 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 687256"];
687 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 687257"];
688 [label="Symbol memberSymbol = GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional); 687258"];
689 [label="GetWellKnownTypeMember(compilation, member, out useSiteDiagnostic, isOptional) 687259"];
690 [label="param GetWellKnownTypeMember(CSharpCompilation compilation) 687260"];
691 [label="param GetWellKnownTypeMember(WellKnownMember member) 687261"];
692 [label="param GetWellKnownTypeMember(out DiagnosticInfo diagnosticInfo) 687262"];
693 [label="param GetWellKnownTypeMember(bool isOptional = false) 687263"];
694 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 687264"];
695 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 687265"];
696 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 687266"];
697 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 687267"];
698 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 687268"];
699 [label="Debug.Assert(symbol is object); 687269"];
700 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 687270"];
701 [label="isInternal = false; 687271"];
702 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 687272"];
703 [label="symbol = symbol.ContainingType; 687273"];
704 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 687274"];
705 [label="return true; 687275"];
706 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 687276"];
707 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 687277"];
708 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 687278"];
709 [label="Debug.Assert(symbol is object); 687279"];
710 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 687280"];
711 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 687281"];
712 [label="symbol = symbol.ContainingType; 687282"];
713 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 687283"];
714 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 687284"];
715 [label="Symbol memberSymbol = compilation.GetWellKnownTypeMember(member); 687285"];
716 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 687286"];
717 [label="if ((object)memberSymbol != null)\n            {\n                diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType();\n                if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                }\n            }\n            else if (!isOptional)\n            {\n                // member is missing\n                MemberDescriptor memberDescriptor = WellKnownMembers.GetDescriptor(member);\n                diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_MissingPredefinedMember, memberDescriptor.DeclaringTypeMetadataName, memberDescriptor.Name);\n            }\n            else\n            {\n                diagnosticInfo = null;\n            } 687287"];
718 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 687288"];
719 [label="diagnosticInfo = memberSymbol.GetUseSiteDiagnosticForSymbolOrContainingType(); 687289"];
720 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 687290"];
721 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 687291"];
722 [label="Debug.Assert(symbol is object); 687292"];
723 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 687293"];
724 [label="isInternal = false; 687294"];
725 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 687295"];
726 [label="symbol = symbol.ContainingType; 687296"];
727 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 687297"];
728 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 687298"];
729 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 687299"];
730 [label="Debug.Assert(symbol is object); 687300"];
731 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 687301"];
732 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 687302"];
733 [label="symbol = symbol.ContainingType; 687303"];
734 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 687304"];
735 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 687305"];
736 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 687306"];
737 [label="return memberSymbol; 687307"];
738 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 687308"];
739 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 687309"];
740 [label="return memberSymbol; 687310"];
741 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 687311"];
742 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 687312"];
743 [label="Debug.Assert(symbol is object); 687313"];
744 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 687314"];
745 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 687315"];
746 [label="symbol = symbol.ContainingType; 687316"];
747 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 687317"];
748 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 687318"];
749 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 687319"];
750 [label="Debug.Assert(symbol is object); 687320"];
751 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 687321"];
752 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 687322"];
753 [label="symbol = symbol.ContainingType; 687323"];
754 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 687324"];
755 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 687325"];
756 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 687326"];
757 [label="return memberSymbol; 687327"];
758 [label="if (useSiteDiagnostic != null)\n            {\n                // report the diagnostic only for non-optional members:\n                Symbol.ReportUseSiteDiagnostic(useSiteDiagnostic, diagnostics, location ?? syntax.Location);\n            } 687328"];
759 [label="return memberSymbol; 687329"];
760 [label="if (diagnosticInfo != null)\n                {\n                    // Dev11 reports use-site diagnostics even for optional symbols that are found.\n                    // We decided to silently ignore bad optional symbols.\n\n                    // Report errors only for non-optional members:\n                    if (isOptional)\n                    {\n                        var severity = diagnosticInfo.Severity;\n\n                        // ignore warnings:\n                        diagnosticInfo = null;\n\n                        // if the member is optional and bad for whatever reason ignore it:\n                        if (severity == DiagnosticSeverity.Error)\n                        {\n                            return null;\n                        }\n                    }\n                } 687330"];
761 [label="return memberSymbol; 687331"];
762 [label="return memberSymbol; 687332"];
763 [label="param BinderFactory(CSharpCompilation compilation) 687333"];
764 [label="param BinderFactory(SyntaxTree syntaxTree) 687334"];
765 [label="param BinderFactory(bool ignoreAccessibility) 687335"];
766 [label="param BinderFactory(this) 687336"];
767 [label="_binderCache 687337"];
768 [label="_compilation 687338"];
769 [label="_syntaxTree 687339"];
770 [label="_buckStopsHereBinder 687340"];
771 [label="_ignoreAccessibility 687341"];
772 [label="_binderFactoryVisitorPool 687342"];
773 [label="_compilation 687343"];
774 [label="_syntaxTree 687344"];
775 [label="_ignoreAccessibility 687345"];
776 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 687346"];
777 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 687347"];
778 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 687348"];
779 [label="_binderFactoryVisitorPool 687349"];
780 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 687350"];
781 [label="_binderCache 687351"];
782 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 687352"];
783 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 687353"];
784 [label="new BuckStopsHereBinder(compilation) 687354"];
785 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 687355"];
786 [label="param BuckStopsHereBinder(this) 687356"];
787 [label="compilation 687357"];
788 [label="param BuckStopsHereBinder(this) 687358"];
789 [label="param Binder(CSharpCompilation compilation) 687359"];
790 [label="param Binder(this) 687360"];
791 [label="internal CSharpCompilation Compilation { get; } 687361"];
792 [label="Flags 687362"];
793 [label="protected internal Binder? Next { get; } 687363"];
794 [label="_lazyConversions 687364"];
795 [label="_lazyOverloadResolution 687365"];
796 [label="RoslynDebug.Assert(compilation != null); 687366"];
797 [label="RoslynDebug.Assert(compilation != null); 687367"];
798 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 687368"];
799 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 687369"];
800 [label="this.Flags 687370"];
801 [label="this.Compilation 687371"];
802 [label="_buckStopsHereBinder 687372"];
803 [label="var diagnostics = c.GetDiagnostics(); 687373"];
804 [label="param GetBinder(SyntaxNode node) 687374"];
805 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 687375"];
806 [label="param GetBinder(Symbol memberOpt = null) 687376"];
807 [label="param GetBinder(this) 687377"];
808 [label="int position = node.SpanStart; 687378"];
809 [label="InScript 687379"];
810 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 687380"];
811 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 687381"];
812 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 687382"];
813 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 687383"];
814 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 687384"];
815 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 687385"];
816 [label="node = node.Parent; 687386"];
817 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 687387"];
818 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 687388"];
819 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 687389"];
820 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 687390"];
821 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 687391"];
822 [label="param GetBinder(SyntaxNode node) 687392"];
823 [label="param GetBinder(int position) 687393"];
824 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 687394"];
825 [label="param GetBinder(Symbol memberOpt = null) 687395"];
826 [label="param GetBinder(this) 687396"];
827 [label="Debug.Assert(node != null); 687397"];
828 [label="Debug.Assert(node != null); 687398"];
829 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 687399"];
830 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 687400"];
831 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 687401"];
832 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 687402"];
833 [label="param BinderFactoryVisitor(BinderFactory factory) 687403"];
834 [label="param BinderFactoryVisitor(this) 687404"];
835 [label="param BinderFactoryVisitor(this) 687405"];
836 [label="_position 687406"];
837 [label="_memberDeclarationOpt 687407"];
838 [label="_memberOpt 687408"];
839 [label="_factory 687409"];
840 [label="_factory 687410"];
841 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 687411"];
842 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 687412"];
843 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 687413"];
844 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 687414"];
845 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 687415"];
846 [label="param Initialize(int position) 687416"];
847 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 687417"];
848 [label="param Initialize(Symbol memberOpt) 687418"];
849 [label="param Initialize(this) 687419"];
850 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 687420"];
851 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 687421"];
852 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 687422"];
853 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 687423"];
854 [label="_position 687424"];
855 [label="_memberDeclarationOpt 687425"];
856 [label="_memberOpt 687426"];
857 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 687427"];
858 [label="Binder result = visitor.Visit(node); 687428"];
859 [label="visitor.Visit(node) 687429"];
860 [label="param Visit(SyntaxNode node) 687430"];
861 [label="param Visit(this) 687431"];
862 [label="return VisitCore(node); 687432"];
863 [label="VisitCore(node) 687433"];
864 [label="param VisitCore(SyntaxNode node) 687434"];
865 [label="param VisitCore(this) 687435"];
866 [label="return ((CSharpSyntaxNode)node).Accept(this); 687436"];
867 [label="return ((CSharpSyntaxNode)node).Accept(this); 687437"];
868 [label="return ((CSharpSyntaxNode)node).Accept(this); 687438"];
869 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 687439"];
870 [label="param VisitClassDeclaration(this) 687440"];
871 [label="return VisitTypeDeclarationCore(node); 687441"];
872 [label="VisitTypeDeclarationCore(node) 687442"];
873 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 687443"];
874 [label="param VisitTypeDeclarationCore(this) 687444"];
875 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 687445"];
876 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 687446"];
877 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 687447"];
878 [label="NodeUsage extraInfo = NodeUsage.Normal; 687448"];
879 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 687449"];
880 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 687450"];
881 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 687451"];
882 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 687452"];
883 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 687453"];
884 [label="return VisitTypeDeclarationCore(parent, extraInfo); 687454"];
885 [label="return VisitTypeDeclarationCore(parent, extraInfo); 687455"];
886 [label="VisitTypeDeclarationCore(parent, extraInfo) 687456"];
887 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 687457"];
888 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 687458"];
889 [label="param VisitTypeDeclarationCore(this) 687459"];
890 [label="var key = CreateBinderCacheKey(parent, extraInfo); 687460"];
891 [label="var key = CreateBinderCacheKey(parent, extraInfo); 687461"];
892 [label="CreateBinderCacheKey(parent, extraInfo) 687462"];
893 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 687463"];
894 [label="param CreateBinderCacheKey(NodeUsage usage) 687464"];
895 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 687465"];
896 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 687466"];
897 [label="return new BinderCacheKey(node, usage); 687467"];
898 [label="return new BinderCacheKey(node, usage); 687468"];
899 [label="return new BinderCacheKey(node, usage); 687469"];
900 [label="new BinderCacheKey(node, usage) 687470"];
901 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 687471"];
902 [label="param BinderCacheKey(NodeUsage usage) 687472"];
903 [label="param BinderCacheKey(this) 687473"];
904 [label="this.syntaxNode 687474"];
905 [label="this.usage 687475"];
906 [label="var key = CreateBinderCacheKey(parent, extraInfo); 687476"];
907 [label="Binder resultBinder; 687477"];
908 [label="binderCache 687478"];
909 [label="get\n                {\n                    return _factory._binderCache;\n                } 687479"];
910 [label="return _factory._binderCache; 687480"];
911 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 687481"];
912 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 687482"];
913 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 687483"];
914 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 687484"];
915 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 687485"];
916 [label="param GetHashCode(this) 687486"];
917 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 687487"];
918 [label="resultBinder = VisitCore(parent.Parent); 687488"];
919 [label="VisitCore(parent.Parent) 687489"];
920 [label="param VisitCore(SyntaxNode node) 687490"];
921 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 687491"];
922 [label="param VisitCompilationUnit(this) 687492"];
923 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 687493"];
924 [label="IsInUsing(parent) 687494"];
925 [label="param IsInUsing(CSharpSyntaxNode containingNode) 687495"];
926 [label="param IsInUsing(this) 687496"];
927 [label="TextSpan containingSpan = containingNode.Span; 687497"];
928 [label="SyntaxToken token; 687498"];
929 [label="token 687499"];
930 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 687500"];
931 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 687501"];
932 [label="token = containingNode.FindToken(_position); 687502"];
933 [label="token = containingNode.FindToken(_position); 687503"];
934 [label="var node = token.Parent; 687504"];
935 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 687505"];
936 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 687506"];
937 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 687507"];
938 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 687508"];
939 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 687509"];
940 [label="node = node.Parent; 687510"];
941 [label="return false; 687511"];
942 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 687512"];
943 [label="InScript 687513"];
944 [label="get\n                {\n                    return _factory.InScript;\n                } 687514"];
945 [label="_factory.InScript 687515"];
946 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 687516"];
947 [label="return _factory.InScript; 687517"];
948 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 687518"];
949 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 687519"];
950 [label="param VisitCompilationUnit(bool inUsing) 687520"];
951 [label="param VisitCompilationUnit(bool inScript) 687521"];
952 [label="param VisitCompilationUnit(this) 687522"];
953 [label="syntaxTree 687523"];
954 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 687524"];
955 [label="return _factory._syntaxTree; 687525"];
956 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 687526"];
957 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 687527"];
958 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 687528"];
959 [label="inUsing 687529"];
960 [label="inScript 687530"];
961 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 687531"];
962 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 687532"];
963 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 687533"];
964 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 687534"];
965 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 687535"];
966 [label="param CreateBinderCacheKey(NodeUsage usage) 687536"];
967 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 687537"];
968 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 687538"];
969 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 687539"];
970 [label="Binder result; 687540"];
971 [label="binderCache 687541"];
972 [label="get\n                {\n                    return _factory._binderCache;\n                } 687542"];
973 [label="return _factory._binderCache; 687543"];
974 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 687544"];
975 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 687545"];
976 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 687546"];
977 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 687547"];
978 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 687548"];
979 [label="this.buckStopsHereBinder 687549"];
980 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 687550"];
981 [label="return _factory._buckStopsHereBinder; 687551"];
982 [label="result = this.buckStopsHereBinder; 687552"];
983 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 687553"];
984 [label="compilation 687554"];
985 [label="get\n                {\n                    return _factory._compilation;\n                } 687555"];
986 [label="return _factory._compilation; 687556"];
987 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 687557"];
988 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 687558"];
989 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 687559"];
990 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 687560"];
991 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 687561"];
992 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 687562"];
993 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 687563"];
994 [label="param InContainerBinder(Binder next) 687564"];
995 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 687565"];
996 [label="param InContainerBinder(bool inUsing) 687566"];
997 [label="param InContainerBinder(this) 687567"];
998 [label="next 687568"];
999 [label="param InContainerBinder(this) 687569"];
1000 [label="param Binder(Binder next) 687570"];
1001 [label="param Binder(this) 687571"];
1002 [label="param Binder(Conversions? conversions = null) 687572"];
1003 [label="RoslynDebug.Assert(next != null); 687573"];
1004 [label="RoslynDebug.Assert(next != null); 687574"];
1005 [label="Next 687575"];
1006 [label="this.Flags 687576"];
1007 [label="this.Compilation 687577"];
1008 [label="_lazyConversions 687578"];
1009 [label="_container 687579"];
1010 [label="_computeImports 687580"];
1011 [label="_lazyImports 687581"];
1012 [label="_lazyImportChain 687582"];
1013 [label="_lazyQuickAttributeChecker 687583"];
1014 [label="Debug.Assert((object)container != null); 687584"];
1015 [label="Debug.Assert((object)container != null); 687585"];
1016 [label="Debug.Assert(declarationSyntax != null); 687586"];
1017 [label="Debug.Assert(declarationSyntax != null); 687587"];
1018 [label="_container 687588"];
1019 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 687589"];
1020 [label="_computeImports 687590"];
1021 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 687591"];
1022 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 687592"];
1023 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 687593"];
1024 [label="_usingsSyntax 687594"];
1025 [label="compilation 687595"];
1026 [label="get\n                {\n                    return _factory._compilation;\n                } 687596"];
1027 [label="return _factory._compilation; 687597"];
1028 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 687598"];
1029 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 687599"];
1030 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 687600"];
1031 [label="binderCache 687601"];
1032 [label="return _factory._binderCache; 687602"];
1033 [label="binderCache.TryAdd(key, result); 687603"];
1034 [label="binderCache.TryAdd(key, result); 687604"];
1035 [label="binderCache.TryAdd(key, result); 687605"];
1036 [label="binderCache.TryAdd(key, result); 687606"];
1037 [label="binderCache.TryAdd(key, result); 687607"];
1038 [label="param Equals(BinderCacheKey other) 687608"];
1039 [label="param Equals(this) 687609"];
1040 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 687610"];
1041 [label="return result; 687611"];
1042 [label="return ((CSharpSyntaxNode)node).Accept(this); 687612"];
1043 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 687613"];
1044 [label="resultBinder.ContainingMemberOrLambda 687614"];
1045 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 687615"];
1046 [label="var merged = _container as MergedNamespaceSymbol; 687616"];
1047 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 687617"];
1048 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 687618"];
1049 [label="((object)merged != null) 687619"];
1050 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 687620"];
1051 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 687621"];
1052 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 687622"];
1053 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 687623"];
1054 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 687624"];
1055 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 687625"];
1056 [label="new InContainerBinder(typeSymbol, resultBinder) 687626"];
1057 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 687627"];
1058 [label="param InContainerBinder(Binder next) 687628"];
1059 [label="param InContainerBinder(Imports imports = null) 687629"];
1060 [label="param InContainerBinder(this) 687630"];
1061 [label="next 687631"];
1062 [label="param InContainerBinder(this) 687632"];
1063 [label="param Binder(Binder next) 687633"];
1064 [label="param Binder(this) 687634"];
1065 [label="param Binder(Conversions? conversions = null) 687635"];
1066 [label="RoslynDebug.Assert(next != null); 687636"];
1067 [label="RoslynDebug.Assert(next != null); 687637"];
1068 [label="this.Flags 687638"];
1069 [label="this.Compilation 687639"];
1070 [label="_lazyConversions 687640"];
1071 [label="_container 687641"];
1072 [label="_computeImports 687642"];
1073 [label="_lazyImports 687643"];
1074 [label="_lazyImportChain 687644"];
1075 [label="_lazyQuickAttributeChecker 687645"];
1076 [label="Debug.Assert((object)container != null || imports != null); 687646"];
1077 [label="Debug.Assert((object)container != null || imports != null); 687647"];
1078 [label="_container 687648"];
1079 [label="_lazyImports = imports ?? Imports.Empty; 687649"];
1080 [label="_lazyImports = imports ?? Imports.Empty; 687650"];
1081 [label="_lazyImports 687651"];
1082 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 687652"];
1083 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 687653"];
1084 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 687654"];
1085 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 687655"];
1086 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 687656"];
1087 [label="param WithUnsafeRegionIfNecessary(this) 687657"];
1088 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 687658"];
1089 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 687659"];
1090 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 687660"];
1091 [label="param Includes(this BinderFlags self) 687661"];
1092 [label="param Includes(BinderFlags other) 687662"];
1093 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 687663"];
1094 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 687664"];
1095 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 687665"];
1096 [label="binderCache 687666"];
1097 [label="return _factory._binderCache; 687667"];
1098 [label="binderCache.TryAdd(key, resultBinder); 687668"];
1099 [label="binderCache.TryAdd(key, resultBinder); 687669"];
1100 [label="binderCache.TryAdd(key, resultBinder); 687670"];
1101 [label="binderCache.TryAdd(key, resultBinder); 687671"];
1102 [label="binderCache.TryAdd(key, resultBinder); 687672"];
1103 [label="return resultBinder; 687673"];
1104 [label="return ((CSharpSyntaxNode)node).Accept(this); 687674"];
1105 [label="_binderFactoryVisitorPool.Free(visitor); 687675"];
1106 [label="_binderFactoryVisitorPool.Free(visitor); 687676"];
1107 [label="return result; 687677"];
1108 [label="var diagnostics = c.GetDiagnostics(); 687678"];
1109 [label="Debug.Assert(node != null); 687679"];
1110 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 687680"];
1111 [label="container.AssertMemberExposure(memberOpt); 687681"];
1112 [label="container.AssertMemberExposure(memberOpt); 687682"];
1113 [label="param VisitMethodDeclaration(MethodDeclarationSyntax methodDecl) 687683"];
1114 [label="param VisitMethodDeclaration(this) 687684"];
1115 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 687685"];
1116 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 687686"];
1117 [label="if (!LookupPosition.IsInMethodDeclaration(_position, methodDecl))\n                {\n                    return VisitCore(methodDecl.Parent);\n                } 687687"];
1118 [label="NodeUsage usage; 687688"];
1119 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 687689"];
1120 [label="if (LookupPosition.IsInBody(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodBody;\n                }\n                else if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 687690"];
1121 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 687691"];
1122 [label="if (LookupPosition.IsInMethodTypeParameterScope(_position, methodDecl))\n                {\n                    usage = NodeUsage.MethodTypeParameters;\n                }\n                else\n                {\n                    // Normal - is when method itself is not involved (will use outer binder)\n                    //          that would be if position is within the return type or method name\n                    usage = NodeUsage.Normal;\n                } 687692"];
1123 [label="usage = NodeUsage.Normal; 687693"];
1124 [label="var key = CreateBinderCacheKey(methodDecl, usage); 687694"];
1125 [label="var key = CreateBinderCacheKey(methodDecl, usage); 687695"];
1126 [label="CreateBinderCacheKey(methodDecl, usage) 687696"];
1127 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 687697"];
1128 [label="param CreateBinderCacheKey(NodeUsage usage) 687698"];
1129 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 687699"];
1130 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 687700"];
1131 [label="return new BinderCacheKey(node, usage); 687701"];
1132 [label="new BinderCacheKey(node, usage) 687702"];
1133 [label="param BinderCacheKey(this) 687703"];
1134 [label="var key = CreateBinderCacheKey(methodDecl, usage); 687704"];
1135 [label="Binder resultBinder; 687705"];
1136 [label="binderCache 687706"];
1137 [label="get\n                {\n                    return _factory._binderCache;\n                } 687707"];
1138 [label="return _factory._binderCache; 687708"];
1139 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 687709"];
1140 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 687710"];
1141 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 687711"];
1142 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 687712"];
1143 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    var parentType = methodDecl.Parent as TypeDeclarationSyntax;\n                    if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    }\n\n                    SourceMemberMethodSymbol method = null;\n\n                    if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    }\n\n                    if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers);\n                    binderCache.TryAdd(key, resultBinder);\n                } 687713"];
1144 [label="var parentType = methodDecl.Parent as TypeDeclarationSyntax; 687714"];
1145 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 687715"];
1146 [label="if (parentType != null)\n                    {\n                        resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters);\n                    }\n                    else\n                    {\n                        resultBinder = VisitCore(methodDecl.Parent);\n                    } 687716"];
1147 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 687717"];
1148 [label="resultBinder = VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters); 687718"];
1149 [label="VisitTypeDeclarationCore(parentType, NodeUsage.NamedTypeBodyOrTypeParameters) 687719"];
1150 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 687720"];
1151 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 687721"];
1152 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 687722"];
1153 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 687723"];
1154 [label="SourceMemberMethodSymbol method = null; 687724"];
1155 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 687725"];
1156 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 687726"];
1157 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers); 687727"];
1158 [label="resultBinder.WithUnsafeRegionIfNecessary(methodDecl.Modifiers) 687728"];
1159 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 687729"];
1160 [label="param WithUnsafeRegionIfNecessary(this) 687730"];
1161 [label="binderCache 687731"];
1162 [label="return _factory._binderCache; 687732"];
1163 [label="binderCache.TryAdd(key, resultBinder); 687733"];
1164 [label="binderCache.TryAdd(key, resultBinder); 687734"];
1165 [label="binderCache.TryAdd(key, resultBinder); 687735"];
1166 [label="binderCache.TryAdd(key, resultBinder); 687736"];
1167 [label="return resultBinder; 687737"];
1168 [label="return ((CSharpSyntaxNode)node).Accept(this); 687738"];
1169 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 687739"];
1170 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 687740"];
1171 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 687741"];
1172 [label="Debug.Assert((object)containing != null); 687742"];
1173 [label="Debug.Assert((object)containing != null); 687743"];
1174 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 687744"];
1175 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 687745"];
1176 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 687746"];
1177 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 687747"];
1178 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 687748"];
1179 [label="param BinderWithContainingMemberOrLambda(Binder next) 687749"];
1180 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 687750"];
1181 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 687751"];
1182 [label="param BinderWithContainingMemberOrLambda(this) 687752"];
1183 [label="next 687753"];
1184 [label="flags 687754"];
1185 [label="param BinderWithContainingMemberOrLambda(this) 687755"];
1186 [label="param Binder(Binder next) 687756"];
1187 [label="param Binder(BinderFlags flags) 687757"];
1188 [label="param Binder(this) 687758"];
1189 [label="internal CSharpCompilation Compilation { get; } 687759"];
1190 [label="Flags 687760"];
1191 [label="protected internal Binder? Next { get; } 687761"];
1192 [label="_lazyConversions 687762"];
1193 [label="_lazyOverloadResolution 687763"];
1194 [label="RoslynDebug.Assert(next != null); 687764"];
1195 [label="RoslynDebug.Assert(next != null); 687765"];
1196 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 687766"];
1197 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 687767"];
1198 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 687768"];
1199 [label="param Includes(this BinderFlags self) 687769"];
1200 [label="param Includes(BinderFlags other) 687770"];
1201 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 687771"];
1202 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 687772"];
1203 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 687773"];
1204 [label="param Includes(this BinderFlags self) 687774"];
1205 [label="param Includes(BinderFlags other) 687775"];
1206 [label="Next 687776"];
1207 [label="this.Flags 687777"];
1208 [label="this.Compilation 687778"];
1209 [label="_containingMemberOrLambda 687779"];
1210 [label="Debug.Assert(containingMemberOrLambda != null); 687780"];
1211 [label="Debug.Assert(containingMemberOrLambda != null); 687781"];
1212 [label="_containingMemberOrLambda 687782"];
1213 [label="var diagnostics = c.GetDiagnostics(); 687783"];
1214 [label="param BindType(ExpressionSyntax syntax) 687784"];
1215 [label="param BindType(DiagnosticBag diagnostics) 687785"];
1216 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 687786"];
1217 [label="param BindType(bool suppressUseSiteDiagnostics = false) 687787"];
1218 [label="param BindType(this) 687788"];
1219 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 687789"];
1220 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 687790"];
1221 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 687791"];
1222 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 687792"];
1223 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 687793"];
1224 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 687794"];
1225 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 687795"];
1226 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 687796"];
1227 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 687797"];
1228 [label="param BindTypeOrAlias(this) 687798"];
1229 [label="Debug.Assert(diagnostics != null); 687799"];
1230 [label="Debug.Assert(diagnostics != null); 687800"];
1231 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 687801"];
1232 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 687802"];
1233 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 687803"];
1234 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 687804"];
1235 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 687805"];
1236 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 687806"];
1237 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 687807"];
1238 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 687808"];
1239 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 687809"];
1240 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 687810"];
1241 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 687811"];
1242 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 687812"];
1243 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 687813"];
1244 [label="return bindPredefined(syntax, diagnostics); 687814"];
1245 [label="return bindPredefined(syntax, diagnostics); 687815"];
1246 [label="bindPredefined(syntax, diagnostics) 687816"];
1247 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 687817"];
1248 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 687818"];
1249 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 687819"];
1250 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 687820"];
1251 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 687821"];
1252 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 687822"];
1253 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 687823"];
1254 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 687824"];
1255 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 687825"];
1256 [label="param BindPredefinedTypeSymbol(this) 687826"];
1257 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 687827"];
1258 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 687828"];
1259 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 687829"];
1260 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 687830"];
1261 [label="param GetSpecialType(SpecialType typeId) 687831"];
1262 [label="param GetSpecialType(DiagnosticBag diagnostics) 687832"];
1263 [label="param GetSpecialType(SyntaxNode node) 687833"];
1264 [label="param GetSpecialType(this) 687834"];
1265 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 687835"];
1266 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 687836"];
1267 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 687837"];
1268 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 687838"];
1269 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 687839"];
1270 [label="param GetSpecialType(CSharpCompilation compilation) 687840"];
1271 [label="param GetSpecialType(SpecialType typeId) 687841"];
1272 [label="param GetSpecialType(SyntaxNode node) 687842"];
1273 [label="param GetSpecialType(DiagnosticBag diagnostics) 687843"];
1274 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 687844"];
1275 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 687845"];
1276 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 687846"];
1277 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 687847"];
1278 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 687848"];
1279 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 687849"];
1280 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 687850"];
1281 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 687851"];
1282 [label="param ReportUseSiteDiagnostics(Symbol symbol) 687852"];
1283 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 687853"];
1284 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 687854"];
1285 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 687855"];
1286 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 687856"];
1287 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 687857"];
1288 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 687858"];
1289 [label="Debug.Assert(symbol is object); 687859"];
1290 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 687860"];
1291 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 687861"];
1292 [label="symbol = symbol.ContainingType; 687862"];
1293 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 687863"];
1294 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 687864"];
1295 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 687865"];
1296 [label="return typeSymbol; 687866"];
1297 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 687867"];
1298 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 687868"];
1299 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 687869"];
1300 [label="param AreNullableAnnotationsEnabled(this) 687870"];
1301 [label="RoslynDebug.Assert(token.SyntaxTree is object); 687871"];
1302 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 687872"];
1303 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 687873"];
1304 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 687874"];
1305 [label="param AreNullableAnnotationsEnabled(int position) 687875"];
1306 [label="param AreNullableAnnotationsEnabled(this) 687876"];
1307 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 687877"];
1308 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 687878"];
1309 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 687879"];
1310 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 687880"];
1311 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 687881"];
1312 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 687882"];
1313 [label="AreNullableAnnotationsGloballyEnabled() 687883"];
1314 [label="param AreNullableAnnotationsGloballyEnabled(this) 687884"];
1315 [label="RoslynDebug.Assert(Next is object); 687885"];
1316 [label="Next.AreNullableAnnotationsGloballyEnabled() 687886"];
1317 [label="param AreNullableAnnotationsGloballyEnabled(this) 687887"];
1318 [label="param AreNullableAnnotationsGloballyEnabled(this) 687888"];
1319 [label="GetGlobalAnnotationState() 687889"];
1320 [label="param GetGlobalAnnotationState(this) 687890"];
1321 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 687891"];
1322 [label="return false; 687892"];
1323 [label="return GetGlobalAnnotationState(); 687893"];
1324 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 687894"];
1325 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 687895"];
1326 [label="type 687896"];
1327 [label="param operator(TypeWithAnnotations typeWithAnnotations) 687897"];
1328 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 687898"];
1329 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 687899"];
1330 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 687900"];
1331 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 687901"];
1332 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 687902"];
1333 [label="Debug.Assert(typeWithAnnotations.HasType); 687903"];
1334 [label="_typeWithAnnotations 687904"];
1335 [label="_symbol = null; 687905"];
1336 [label="_symbol 687906"];
1337 [label="_isNullableEnabled = false; 687907"];
1338 [label="_isNullableEnabled 687908"];
1339 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 687909"];
1340 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 687910"];
1341 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 687911"];
1342 [label="symbol.IsType 687912"];
1343 [label="=> !_typeWithAnnotations.IsDefault 687913"];
1344 [label="!_typeWithAnnotations.IsDefault 687914"];
1345 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 687915"];
1346 [label="symbol.IsType 687916"];
1347 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 687917"];
1348 [label="symbol.TypeWithAnnotations 687918"];
1349 [label="=> _typeWithAnnotations 687919"];
1350 [label="_typeWithAnnotations 687920"];
1351 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 687921"];
1352 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 687922"];
1353 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 687923"];
1354 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 687924"];
1355 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 687925"];
1356 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 687926"];
1357 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 687927"];
1358 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 687928"];
1359 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 687929"];
1360 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 687930"];
1361 [label="param ReportDiagnosticsIfObsolete(this) 687931"];
1362 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 687932"];
1363 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 687933"];
1364 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 687934"];
1365 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 687935"];
1366 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 687936"];
1367 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 687937"];
1368 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 687938"];
1369 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 687939"];
1370 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 687940"];
1371 [label="param ReportDiagnosticsIfObsolete(this) 687941"];
1372 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 687942"];
1373 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 687943"];
1374 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 687944"];
1375 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 687945"];
1376 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 687946"];
1377 [label="this.ContainingMemberOrLambda 687947"];
1378 [label="get { return _containingMemberOrLambda; } 687948"];
1379 [label="return _containingMemberOrLambda; 687949"];
1380 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 687950"];
1381 [label="this.ContainingType 687951"];
1382 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 687952"];
1383 [label="this.ContainingMemberOrLambda 687953"];
1384 [label="get { return _containingMemberOrLambda; } 687954"];
1385 [label="return _containingMemberOrLambda; 687955"];
1386 [label="var member = this.ContainingMemberOrLambda; 687956"];
1387 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 687957"];
1388 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 687958"];
1389 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 687959"];
1390 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 687960"];
1391 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 687961"];
1392 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 687962"];
1393 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 687963"];
1394 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 687964"];
1395 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 687965"];
1396 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 687966"];
1397 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 687967"];
1398 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 687968"];
1399 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 687969"];
1400 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 687970"];
1401 [label="RoslynDebug.Assert(symbol is object); 687971"];
1402 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 687972"];
1403 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 687973"];
1404 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 687974"];
1405 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 687975"];
1406 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 687976"];
1407 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 687977"];
1408 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 687978"];
1409 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 687979"];
1410 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 687980"];
1411 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 687981"];
1412 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 687982"];
1413 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 687983"];
1414 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 687984"];
1415 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 687985"];
1416 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 687986"];
1417 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 687987"];
1418 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 687988"];
1419 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 687989"];
1420 [label="RoslynDebug.Assert(diagnostics != null); 687990"];
1421 [label="RoslynDebug.Assert(diagnostics != null); 687991"];
1422 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 687992"];
1423 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 687993"];
1424 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 687994"];
1425 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 687995"];
1426 [label="DiagnosticInfo? info = null; 687996"];
1427 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 687997"];
1428 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 687998"];
1429 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 687999"];
1430 [label="return kind; 688000"];
1431 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 688001"];
1432 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 688002"];
1433 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 688003"];
1434 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 688004"];
1435 [label="return symbol; 688005"];
1436 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 688006"];
1437 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 688007"];
1438 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 688008"];
1439 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 688009"];
1440 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 688010"];
1441 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 688011"];
1442 [label="param UnwrapAlias(DiagnosticBag diagnostics) 688012"];
1443 [label="param UnwrapAlias(SyntaxNode syntax) 688013"];
1444 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 688014"];
1445 [label="param UnwrapAlias(this) 688015"];
1446 [label="symbol.IsAlias 688016"];
1447 [label="=> _symbol?.Kind == SymbolKind.Alias 688017"];
1448 [label="_symbol 688018"];
1449 [label="_symbol?.Kind == SymbolKind.Alias 688019"];
1450 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 688020"];
1451 [label="return symbol; 688021"];
1452 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 688022"];
1453 [label="=> _typeWithAnnotations 688023"];
1454 [label="_typeWithAnnotations 688024"];
1455 [label="var diagnostics = c.GetDiagnostics(); 688025"];
1456 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 688026"];
1457 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 688027"];
1458 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 688028"];
1459 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 688029"];
1460 [label="param ValidateParameterNameConflicts(this) 688030"];
1461 [label="PooledHashSet<string>? tpNames = null; 688031"];
1462 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 688032"];
1463 [label="PooledHashSet<string>? pNames = null; 688033"];
1464 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 688034"];
1465 [label="pNames = PooledHashSet<string>.GetInstance(); 688035"];
1466 [label="foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                } 688036"];
1467 [label="var name = p.Name; 688037"];
1468 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 688038"];
1469 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 688039"];
1470 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 688040"];
1471 [label="if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 688041"];
1472 [label="if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 688042"];
1473 [label="if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 688043"];
1474 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 688044"];
1475 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 688045"];
1476 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics) 688046"];
1477 [label="param ValidateDeclarationNameConflictsInScope(Symbol symbol) 688047"];
1478 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 688048"];
1479 [label="param ValidateDeclarationNameConflictsInScope(this) 688049"];
1480 [label="Location location = GetLocation(symbol); 688050"];
1481 [label="GetLocation(symbol) 688051"];
1482 [label="param GetLocation(Symbol symbol) 688052"];
1483 [label="var locations = symbol.Locations; 688053"];
1484 [label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 688054"];
1485 [label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 688055"];
1486 [label="locations.Length != 0 688056"];
1487 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 688057"];
1488 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 688058"];
1489 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 688059"];
1490 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 688060"];
1491 [label="ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics) 688061"];
1492 [label="param ValidateNameConflictsInScope(Symbol? symbol) 688062"];
1493 [label="param ValidateNameConflictsInScope(Location location) 688063"];
1494 [label="param ValidateNameConflictsInScope(string name) 688064"];
1495 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 688065"];
1496 [label="param ValidateNameConflictsInScope(this) 688066"];
1497 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 688067"];
1498 [label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 688068"];
1499 [label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 688069"];
1500 [label="for (Binder? binder = this; binder != null; binder = binder.Next)\n            {\n                // no local scopes enclose members\n                if (binder is InContainerBinder)\n                {\n                    return false;\n                }\n\n                var scope = binder as LocalScopeBinder;\n                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                }\n\n                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.\n                if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                }\n\n                if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                }\n            } 688070"];
1501 [label="for (Binder? binder = this; binder != null; binder = binder.Next)\n            {\n                // no local scopes enclose members\n                if (binder is InContainerBinder)\n                {\n                    return false;\n                }\n\n                var scope = binder as LocalScopeBinder;\n                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                }\n\n                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.\n                if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                }\n\n                if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                }\n            } 688071"];
1502 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 688072"];
1503 [label="var scope = binder as LocalScopeBinder; 688073"];
1504 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 688074"];
1505 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 688075"];
1506 [label="binder.IsNestedFunctionBinder 688076"];
1507 [label="=> false 688077"];
1508 [label="false 688078"];
1509 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 688079"];
1510 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 688080"];
1511 [label="binder.IsLastBinderWithinMember() 688081"];
1512 [label="param IsLastBinderWithinMember(this) 688082"];
1513 [label="this.ContainingMemberOrLambda 688083"];
1514 [label="get { return _containingMemberOrLambda; } 688084"];
1515 [label="return _containingMemberOrLambda; 688085"];
1516 [label="var containingMemberOrLambda = this.ContainingMemberOrLambda; 688086"];
1517 [label="switch (containingMemberOrLambda?.Kind)\n            {\n                case null:\n                case SymbolKind.NamedType:\n                case SymbolKind.Namespace:\n                    return true;\n                default:\n                    return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda;\n            } 688087"];
1518 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 688088"];
1519 [label=".ContainingMemberOrLambda 688089"];
1520 [label="_container 688090"];
1521 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 688091"];
1522 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 688092"];
1523 [label="return false; 688093"];
1524 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 688094"];
1525 [label="tpNames?.Free(); 688095"];
1526 [label="pNames?.Free(); 688096"];
1527 [label="return bindPredefined(syntax, diagnostics); 688097"];
1528 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 688098"];
1529 [label="param GetSpecialType(DiagnosticBag diagnostics) 688099"];
1530 [label="param GetSpecialType(SyntaxNode node) 688100"];
1531 [label="param GetSpecialType(SyntaxNode node) 688101"];
1532 [label="param GetSpecialType(DiagnosticBag diagnostics) 688102"];
1533 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 688103"];
1534 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 688104"];
1535 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 688105"];
1536 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 688106"];
1537 [label="Debug.Assert(typeWithAnnotations.HasType); 688107"];
1538 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 688108"];
1539 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 688109"];
1540 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 688110"];
1541 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 688111"];
1542 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 688112"];
1543 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 688113"];
1544 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 688114"];
1545 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 688115"];
1546 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 688116"];
1547 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 688117"];
1548 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 688118"];
1549 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 688119"];
1550 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 688120"];
1551 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 688121"];
1552 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 688122"];
1553 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 688123"];
1554 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 688124"];
1555 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 688125"];
1556 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 688126"];
1557 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 688127"];
1558 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 688128"];
1559 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 688129"];
1560 [label="RoslynDebug.Assert(diagnostics != null); 688130"];
1561 [label="RoslynDebug.Assert(diagnostics != null); 688131"];
1562 [label="DiagnosticInfo? info = null; 688132"];
1563 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 688133"];
1564 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 688134"];
1565 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 688135"];
1566 [label="return kind; 688136"];
1567 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 688137"];
1568 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 688138"];
1569 [label="=> _symbol?.Kind == SymbolKind.Alias 688139"];
1570 [label="_symbol 688140"];
1571 [label="_symbol?.Kind == SymbolKind.Alias 688141"];
1572 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 688142"];
1573 [label="Debug.Assert(node != null); 688143"];
1574 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 688144"];
1575 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 688145"];
1576 [label="SourceMemberMethodSymbol method = null; 688146"];
1577 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 688147"];
1578 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 688148"];
1579 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 688149"];
1580 [label="param Includes(this BinderFlags self) 688150"];
1581 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 688151"];
1582 [label="param Includes(this BinderFlags self) 688152"];
1583 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 688153"];
1584 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 688154"];
1585 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 688155"];
1586 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 688156"];
1587 [label="return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null); 688157"];
1588 [label="BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null) 688158"];
1589 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(IdentifierNameSyntax node) 688159"];
1590 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 688160"];
1591 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 688161"];
1592 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 688162"];
1593 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(NamespaceOrTypeSymbol qualifierOpt) 688163"];
1594 [label="param BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol(this) 688164"];
1595 [label="var identifierValueText = node.Identifier.ValueText; 688165"];
1596 [label="if (string.IsNullOrWhiteSpace(identifierValueText))\n            {\n                return TypeWithAnnotations.Create(new ExtendedErrorTypeSymbol(\n                    Compilation.Assembly.GlobalNamespace, identifierValueText, 0,\n                    new CSDiagnosticInfo(ErrorCode.ERR_SingleTypeNameNotFound)));\n            } 688166"];
1597 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 688167"];
1598 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 688168"];
1599 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 688169"];
1600 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 688170"];
1601 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 688171"];
1602 [label="CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics) 688172"];
1603 [label="param CreateErrorIfLookupOnTypeParameter(CSharpSyntaxNode node) 688173"];
1604 [label="param CreateErrorIfLookupOnTypeParameter(NamespaceOrTypeSymbol qualifierOpt) 688174"];
1605 [label="param CreateErrorIfLookupOnTypeParameter(string name) 688175"];
1606 [label="param CreateErrorIfLookupOnTypeParameter(int arity) 688176"];
1607 [label="param CreateErrorIfLookupOnTypeParameter(DiagnosticBag diagnostics) 688177"];
1608 [label="param CreateErrorIfLookupOnTypeParameter(this) 688178"];
1609 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 688179"];
1610 [label="if (((object)qualifierOpt != null) && (qualifierOpt.Kind == SymbolKind.TypeParameter))\n            {\n                var diagnosticInfo = new CSDiagnosticInfo(ErrorCode.ERR_LookupInTypeVariable, qualifierOpt);\n                diagnostics.Add(diagnosticInfo, node.Location);\n                return new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagnosticInfo, unreported: false);\n            } 688180"];
1611 [label="return null; 688181"];
1612 [label="var errorResult = CreateErrorIfLookupOnTypeParameter(node.Parent, qualifierOpt, identifierValueText, 0, diagnostics); 688182"];
1613 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 688183"];
1614 [label="if ((object)errorResult != null)\n            {\n                return TypeWithAnnotations.Create(errorResult);\n            } 688184"];
1615 [label="LookupResult.GetInstance() 688185"];
1616 [label="var instance = s_poolInstance.Allocate(); 688186"];
1617 [label="instance.IsClear 688187"];
1618 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 688188"];
1619 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688189"];
1620 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688190"];
1621 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688191"];
1622 [label="Debug.Assert(instance.IsClear); 688192"];
1623 [label="return instance; 688193"];
1624 [label="var result = LookupResult.GetInstance(); 688194"];
1625 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 688195"];
1626 [label="LookupOptions options = GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()); 688196"];
1627 [label="GetSimpleNameLookupOptions(node, node.Identifier.IsVerbatimIdentifier()) 688197"];
1628 [label="param GetSimpleNameLookupOptions(NameSyntax node) 688198"];
1629 [label="param GetSimpleNameLookupOptions(bool isVerbatimIdentifier) 688199"];
1630 [label="if (SyntaxFacts.IsAttributeName(node))\n            {\n                //  SPEC:   By convention, attribute classes are named with a suffix of Attribute.\n                //  SPEC:   An attribute-name of the form type-name may either include or omit this suffix.\n                //  SPEC:   If an attribute class is found both with and without this suffix, an ambiguity\n                //  SPEC:   is present, and a compile-time error results. If the attribute-name is spelled\n                //  SPEC:   such that its right-most identifier is a verbatim identifier (§2.4.2), then only\n                //  SPEC:   an attribute without a suffix is matched, thus enabling such an ambiguity to be resolved.\n\n                return isVerbatimIdentifier ? LookupOptions.VerbatimNameAttributeTypeOnly : LookupOptions.AttributeTypeOnly;\n            }\n            else\n            {\n                return LookupOptions.NamespacesOrTypesOnly;\n            } 688200"];
1631 [label="return LookupOptions.NamespacesOrTypesOnly; 688201"];
1632 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 688202"];
1633 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 688203"];
1634 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 688204"];
1635 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 688205"];
1636 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 688206"];
1637 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 688207"];
1638 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 688208"];
1639 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics); 688209"];
1640 [label="this.LookupSymbolsSimpleName(result, qualifierOpt, identifierValueText, 0, basesBeingResolved, options, diagnose: true, useSiteDiagnostics: ref useSiteDiagnostics) 688210"];
1641 [label="param LookupSymbolsSimpleName(LookupResult result) 688211"];
1642 [label="param LookupSymbolsSimpleName(NamespaceOrTypeSymbol qualifierOpt) 688212"];
1643 [label="param LookupSymbolsSimpleName(string plainName) 688213"];
1644 [label="param LookupSymbolsSimpleName(int arity) 688214"];
1645 [label="param LookupSymbolsSimpleName(ConsList<TypeSymbol> basesBeingResolved) 688215"];
1646 [label="param LookupSymbolsSimpleName(LookupOptions options) 688216"];
1647 [label="param LookupSymbolsSimpleName(bool diagnose) 688217"];
1648 [label="param LookupSymbolsSimpleName(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688218"];
1649 [label="param LookupSymbolsSimpleName(this) 688219"];
1650 [label="if (options.IsAttributeTypeLookup())\n            {\n                this.LookupAttributeType(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 688220"];
1651 [label="options.IsAttributeTypeLookup() 688221"];
1652 [label="param IsAttributeTypeLookup(this LookupOptions options) 688222"];
1653 [label="return (options & LookupOptions.AttributeTypeOnly) == LookupOptions.AttributeTypeOnly; 688223"];
1654 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688224"];
1655 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688225"];
1656 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688226"];
1657 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688227"];
1658 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688228"];
1659 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688229"];
1660 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688230"];
1661 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688231"];
1662 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 688232"];
1663 [label="param LookupSymbolsOrMembersInternal(LookupResult result) 688233"];
1664 [label="param LookupSymbolsOrMembersInternal(NamespaceOrTypeSymbol qualifierOpt) 688234"];
1665 [label="param LookupSymbolsOrMembersInternal(string name) 688235"];
1666 [label="param LookupSymbolsOrMembersInternal(int arity) 688236"];
1667 [label="param LookupSymbolsOrMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 688237"];
1668 [label="param LookupSymbolsOrMembersInternal(LookupOptions options) 688238"];
1669 [label="param LookupSymbolsOrMembersInternal(bool diagnose) 688239"];
1670 [label="param LookupSymbolsOrMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688240"];
1671 [label="param LookupSymbolsOrMembersInternal(this) 688241"];
1672 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 688242"];
1673 [label="if ((object)qualifierOpt == null)\n            {\n                this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInternal(result, qualifierOpt, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n            } 688243"];
1674 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688244"];
1675 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688245"];
1676 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688246"];
1677 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688247"];
1678 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688248"];
1679 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688249"];
1680 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688250"];
1681 [label="this.LookupSymbolsInternal(result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 688251"];
1682 [label="param LookupSymbolsInternal(LookupResult result) 688252"];
1683 [label="param LookupSymbolsInternal(string name) 688253"];
1684 [label="param LookupSymbolsInternal(int arity) 688254"];
1685 [label="param LookupSymbolsInternal(ConsList<TypeSymbol> basesBeingResolved) 688255"];
1686 [label="param LookupSymbolsInternal(LookupOptions options) 688256"];
1687 [label="param LookupSymbolsInternal(bool diagnose) 688257"];
1688 [label="param LookupSymbolsInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688258"];
1689 [label="param LookupSymbolsInternal(this) 688259"];
1690 [label="result.IsClear 688260"];
1691 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 688261"];
1692 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688262"];
1693 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688263"];
1694 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688264"];
1695 [label="Debug.Assert(result.IsClear); 688265"];
1696 [label="Debug.Assert(options.AreValid()); 688266"];
1697 [label="options.AreValid() 688267"];
1698 [label="param AreValid(this LookupOptions options) 688268"];
1699 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 688269"];
1700 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 688270"];
1701 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 688271"];
1702 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 688272"];
1703 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 688273"];
1704 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 688274"];
1705 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 688275"];
1706 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 688276"];
1707 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 688277"];
1708 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 688278"];
1709 [label="return OnlyOneBitSet(onlyOptions); 688279"];
1710 [label="OnlyOneBitSet(onlyOptions) 688280"];
1711 [label="param OnlyOneBitSet(LookupOptions o) 688281"];
1712 [label="return (o & (o - 1)) == 0; 688282"];
1713 [label="return (o & (o - 1)) == 0; 688283"];
1714 [label="Binder binder = null; 688284"];
1715 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 688285"];
1716 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 688286"];
1717 [label="result.IsMultiViable 688287"];
1718 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 688288"];
1719 [label="Kind 688289"];
1720 [label="get\n            {\n                return _kind;\n            } 688290"];
1721 [label="return _kind; 688291"];
1722 [label="return Kind == LookupResultKind.Viable; 688292"];
1723 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 688293"];
1724 [label="for (var scope = this; scope != null && !result.IsMultiViable; scope = scope.Next)\n            {\n                if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                }\n\n                if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                }\n            } 688294"];
1725 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 688295"];
1726 [label="if (binder != null)\n                {\n                    var tmp = LookupResult.GetInstance();\n                    scope.LookupSymbolsInSingleBinder(tmp, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    result.MergeEqual(tmp);\n                    tmp.Free();\n                }\n                else\n                {\n                    scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics);\n                    if (!result.IsClear)\n                    {\n                        binder = scope;\n                    }\n                } 688296"];
1727 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 688297"];
1728 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 688298"];
1729 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 688299"];
1730 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 688300"];
1731 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 688301"];
1732 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 688302"];
1733 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 688303"];
1734 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 688304"];
1735 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics) 688305"];
1736 [label="param LookupSymbolsInSingleBinder(LookupResult result) 688306"];
1737 [label="param LookupSymbolsInSingleBinder(string name) 688307"];
1738 [label="param LookupSymbolsInSingleBinder(int arity) 688308"];
1739 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 688309"];
1740 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 688310"];
1741 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 688311"];
1742 [label="param LookupSymbolsInSingleBinder(bool diagnose) 688312"];
1743 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688313"];
1744 [label="param LookupSymbolsInSingleBinder(this) 688314"];
1745 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 688315"];
1746 [label="result.IsClear 688316"];
1747 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 688317"];
1748 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688318"];
1749 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688319"];
1750 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688320"];
1751 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 688321"];
1752 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 688322"];
1753 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 688323"];
1754 [label="param LookupSymbolsInSingleBinder(LookupResult result) 688324"];
1755 [label="param LookupSymbolsInSingleBinder(string name) 688325"];
1756 [label="param LookupSymbolsInSingleBinder(int arity) 688326"];
1757 [label="param LookupSymbolsInSingleBinder(ConsList<TypeSymbol> basesBeingResolved) 688327"];
1758 [label="param LookupSymbolsInSingleBinder(LookupOptions options) 688328"];
1759 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 688329"];
1760 [label="param LookupSymbolsInSingleBinder(bool diagnose) 688330"];
1761 [label="param LookupSymbolsInSingleBinder(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688331"];
1762 [label="param LookupSymbolsInSingleBinder(this) 688332"];
1763 [label="result.IsClear 688333"];
1764 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 688334"];
1765 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688335"];
1766 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688336"];
1767 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688337"];
1768 [label="Debug.Assert(result.IsClear); 688338"];
1769 [label="IsSubmissionClass 688339"];
1770 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 688340"];
1771 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 688341"];
1772 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 688342"];
1773 [label="var imports = GetImports(basesBeingResolved); 688343"];
1774 [label="GetImports(basesBeingResolved) 688344"];
1775 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 688345"];
1776 [label="param GetImports(this) 688346"];
1777 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 688347"];
1778 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 688348"];
1779 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 688349"];
1780 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 688350"];
1781 [label="return _lazyImports; 688351"];
1782 [label="var imports = GetImports(basesBeingResolved); 688352"];
1783 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 688353"];
1784 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 688354"];
1785 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 688355"];
1786 [label="if ((options & LookupOptions.NamespaceAliasesOnly) == 0 && _container != null)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n\n                if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                }\n            } 688356"];
1787 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688357"];
1788 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688358"];
1789 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688359"];
1790 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688360"];
1791 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688361"];
1792 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688362"];
1793 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688363"];
1794 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688364"];
1795 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688365"];
1796 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 688366"];
1797 [label="param LookupMembersInternal(LookupResult result) 688367"];
1798 [label="param LookupMembersInternal(NamespaceOrTypeSymbol nsOrType) 688368"];
1799 [label="param LookupMembersInternal(string name) 688369"];
1800 [label="param LookupMembersInternal(int arity) 688370"];
1801 [label="param LookupMembersInternal(ConsList<TypeSymbol> basesBeingResolved) 688371"];
1802 [label="param LookupMembersInternal(LookupOptions options) 688372"];
1803 [label="param LookupMembersInternal(Binder originalBinder) 688373"];
1804 [label="param LookupMembersInternal(bool diagnose) 688374"];
1805 [label="param LookupMembersInternal(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688375"];
1806 [label="param LookupMembersInternal(this) 688376"];
1807 [label="Debug.Assert(options.AreValid()); 688377"];
1808 [label="options.AreValid() 688378"];
1809 [label="param AreValid(this LookupOptions options) 688379"];
1810 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 688380"];
1811 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 688381"];
1812 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 688382"];
1813 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 688383"];
1814 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 688384"];
1815 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 688385"];
1816 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 688386"];
1817 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 688387"];
1818 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 688388"];
1819 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 688389"];
1820 [label="return OnlyOneBitSet(onlyOptions); 688390"];
1821 [label="OnlyOneBitSet(onlyOptions) 688391"];
1822 [label="param OnlyOneBitSet(LookupOptions o) 688392"];
1823 [label="return (o & (o - 1)) == 0; 688393"];
1824 [label="return (o & (o - 1)) == 0; 688394"];
1825 [label="Debug.Assert(arity >= 0); 688395"];
1826 [label="Debug.Assert(arity >= 0); 688396"];
1827 [label="if (nsOrType.IsNamespace)\n            {\n                LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            }\n            else\n            {\n                this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n            } 688397"];
1828 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688398"];
1829 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688399"];
1830 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688400"];
1831 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688401"];
1832 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688402"];
1833 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688403"];
1834 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688404"];
1835 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688405"];
1836 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688406"];
1837 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 688407"];
1838 [label="param LookupMembersInType(LookupResult result) 688408"];
1839 [label="param LookupMembersInType(TypeSymbol type) 688409"];
1840 [label="param LookupMembersInType(string name) 688410"];
1841 [label="param LookupMembersInType(int arity) 688411"];
1842 [label="param LookupMembersInType(ConsList<TypeSymbol> basesBeingResolved) 688412"];
1843 [label="param LookupMembersInType(LookupOptions options) 688413"];
1844 [label="param LookupMembersInType(Binder originalBinder) 688414"];
1845 [label="param LookupMembersInType(bool diagnose) 688415"];
1846 [label="param LookupMembersInType(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688416"];
1847 [label="param LookupMembersInType(this) 688417"];
1848 [label="switch (type.TypeKind)\n            {\n                case TypeKind.TypeParameter:\n                    this.LookupMembersInTypeParameter(result, (TypeParameterSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Interface:\n                    this.LookupMembersInInterface(result, (NamedTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Class:\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                case TypeKind.Delegate:\n                case TypeKind.Array:\n                case TypeKind.Dynamic:\n                    this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Submission:\n                    this.LookupMembersInSubmissions(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Error:\n                    LookupMembersInErrorType(result, (ErrorTypeSymbol)type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                    break;\n\n                case TypeKind.Pointer:\n                case TypeKind.FunctionPointer:\n                    result.Clear();\n                    break;\n\n                case TypeKind.Unknown:\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);\n            } 688418"];
1849 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688419"];
1850 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688420"];
1851 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688421"];
1852 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688422"];
1853 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688423"];
1854 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688424"];
1855 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688425"];
1856 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688426"];
1857 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688427"];
1858 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics) 688428"];
1859 [label="param LookupMembersInClass(LookupResult result) 688429"];
1860 [label="param LookupMembersInClass(TypeSymbol type) 688430"];
1861 [label="param LookupMembersInClass(string name) 688431"];
1862 [label="param LookupMembersInClass(int arity) 688432"];
1863 [label="param LookupMembersInClass(ConsList<TypeSymbol> basesBeingResolved) 688433"];
1864 [label="param LookupMembersInClass(LookupOptions options) 688434"];
1865 [label="param LookupMembersInClass(Binder originalBinder) 688435"];
1866 [label="param LookupMembersInClass(bool diagnose) 688436"];
1867 [label="param LookupMembersInClass(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688437"];
1868 [label="param LookupMembersInClass(this) 688438"];
1869 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 688439"];
1870 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 688440"];
1871 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 688441"];
1872 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 688442"];
1873 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 688443"];
1874 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 688444"];
1875 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 688445"];
1876 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 688446"];
1877 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 688447"];
1878 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics) 688448"];
1879 [label="param LookupMembersInClass(LookupResult result) 688449"];
1880 [label="param LookupMembersInClass(TypeSymbol type) 688450"];
1881 [label="param LookupMembersInClass(string name) 688451"];
1882 [label="param LookupMembersInClass(int arity) 688452"];
1883 [label="param LookupMembersInClass(ConsList<TypeSymbol> basesBeingResolved) 688453"];
1884 [label="param LookupMembersInClass(LookupOptions options) 688454"];
1885 [label="param LookupMembersInClass(Binder originalBinder) 688455"];
1886 [label="param LookupMembersInClass(TypeSymbol accessThroughType) 688456"];
1887 [label="param LookupMembersInClass(bool diagnose) 688457"];
1888 [label="param LookupMembersInClass(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688458"];
1889 [label="param LookupMembersInClass(this) 688459"];
1890 [label="Debug.Assert((object)type != null); 688460"];
1891 [label="Debug.Assert((object)type != null); 688461"];
1892 [label="Debug.Assert(!type.IsInterfaceType() && type.TypeKind != TypeKind.TypeParameter); 688462"];
1893 [label="TypeSymbol currentType = type; 688463"];
1894 [label="LookupResult.GetInstance() 688464"];
1895 [label="instance.IsClear 688465"];
1896 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 688466"];
1897 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688467"];
1898 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688468"];
1899 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688469"];
1900 [label="Debug.Assert(instance.IsClear); 688470"];
1901 [label="var tmp = LookupResult.GetInstance(); 688471"];
1902 [label="PooledHashSet<NamedTypeSymbol> visited = null; 688472"];
1903 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 688473"];
1904 [label="while ((object)currentType != null)\n            {\n                tmp.Clear();\n                LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n\n                MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics);\n\n                // If the type is from a winmd and implements any of the special WinRT collection\n                // projections then we may need to add underlying interface members. \n                NamedTypeSymbol namedType = currentType as NamedTypeSymbol;\n                if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                }\n\n                // any viable non-methods [non-indexers] found here will hide viable methods [indexers] (with the same name) in any further base classes\n                bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]);\n\n                // short circuit looking up bases if we already have a viable result and we won't be adding on more\n                if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                }\n\n                if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                }\n\n                // As in dev11, we don't consider inherited members within crefs.\n                // CAVEAT: dev11 appears to ignore this rule within parameter types and return types,\n                // so we're checking Cref, rather than Cref and CrefParameterOrReturnType.\n                if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                }\n\n                currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited);\n                if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                }\n            } 688474"];
1905 [label="tmp.Clear() 688475"];
1906 [label="param Clear(this) 688476"];
1907 [label="_kind 688477"];
1908 [label="_symbolList.Clear(); 688478"];
1909 [label="_error = null; 688479"];
1910 [label="_error 688480"];
1911 [label="tmp.Clear(); 688481"];
1912 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688482"];
1913 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688483"];
1914 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688484"];
1915 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688485"];
1916 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688486"];
1917 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688487"];
1918 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688488"];
1919 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688489"];
1920 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688490"];
1921 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688491"];
1922 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved) 688492"];
1923 [label="param LookupMembersWithoutInheritance(LookupResult result) 688493"];
1924 [label="param LookupMembersWithoutInheritance(TypeSymbol type) 688494"];
1925 [label="param LookupMembersWithoutInheritance(string name) 688495"];
1926 [label="param LookupMembersWithoutInheritance(int arity) 688496"];
1927 [label="param LookupMembersWithoutInheritance(LookupOptions options) 688497"];
1928 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 688498"];
1929 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 688499"];
1930 [label="param LookupMembersWithoutInheritance(bool diagnose) 688500"];
1931 [label="param LookupMembersWithoutInheritance(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688501"];
1932 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 688502"];
1933 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 688503"];
1934 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 688504"];
1935 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 688505"];
1936 [label="var members = GetCandidateMembers(type, name, options, originalBinder); 688506"];
1937 [label="GetCandidateMembers(type, name, options, originalBinder) 688507"];
1938 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 688508"];
1939 [label="param GetCandidateMembers(string name) 688509"];
1940 [label="param GetCandidateMembers(LookupOptions options) 688510"];
1941 [label="param GetCandidateMembers(Binder originalBinder) 688511"];
1942 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 688512"];
1943 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 688513"];
1944 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 688514"];
1945 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 688515"];
1946 [label="return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>(); 688516"];
1947 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 688517"];
1948 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688518"];
1949 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 688519"];
1950 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 688520"];
1951 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 688521"];
1952 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 688522"];
1953 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 688523"];
1954 [label="MergeHidingLookupResults(result, tmp, basesBeingResolved, ref useSiteDiagnostics); 688524"];
1955 [label="param MergePrioritized(LookupResult other) 688525"];
1956 [label="param MergePrioritized(this) 688526"];
1957 [label="other.Kind 688527"];
1958 [label="get\n            {\n                return _kind;\n            } 688528"];
1959 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 688529"];
1960 [label="Kind 688530"];
1961 [label="get\n            {\n                return _kind;\n            } 688531"];
1962 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 688532"];
1963 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 688533"];
1964 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 688534"];
1965 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 688535"];
1966 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 688536"];
1967 [label="tmp.IsMultiViable 688537"];
1968 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 688538"];
1969 [label="return _kind; 688539"];
1970 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 688540"];
1971 [label="result.IsMultiViable 688541"];
1972 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 688542"];
1973 [label="return _kind; 688543"];
1974 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 688544"];
1975 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 688545"];
1976 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 688546"];
1977 [label="originalBinder.InCrefButNotParameterOrReturnType 688547"];
1978 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 688548"];
1979 [label="InCref 688549"];
1980 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 688550"];
1981 [label="return this.Flags.Includes(BinderFlags.Cref); 688551"];
1982 [label="return this.Flags.Includes(BinderFlags.Cref); 688552"];
1983 [label="this.Flags.Includes(BinderFlags.Cref) 688553"];
1984 [label="param Includes(this BinderFlags self) 688554"];
1985 [label="param Includes(BinderFlags other) 688555"];
1986 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 688556"];
1987 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 688557"];
1988 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 688558"];
1989 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 688559"];
1990 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 688560"];
1991 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 688561"];
1992 [label="currentType = currentType.GetNextBaseTypeNoUseSiteDiagnostics(basesBeingResolved, this.Compilation, ref visited); 688562"];
1993 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 688563"];
1994 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 688564"];
1995 [label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 688565"];
1996 [label="currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics); 688566"];
1997 [label="tmp.Clear(); 688567"];
1998 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688568"];
1999 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688569"];
2000 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688570"];
2001 [label="LookupMembersWithoutInheritance(tmp, currentType, name, arity, options, originalBinder, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved); 688571"];
2002 [label="param LookupMembersWithoutInheritance(LookupResult result) 688572"];
2003 [label="param LookupMembersWithoutInheritance(int arity) 688573"];
2004 [label="param LookupMembersWithoutInheritance(Binder originalBinder) 688574"];
2005 [label="param LookupMembersWithoutInheritance(TypeSymbol accessThroughType) 688575"];
2006 [label="param LookupMembersWithoutInheritance(bool diagnose) 688576"];
2007 [label="param LookupMembersWithoutInheritance(ConsList<TypeSymbol> basesBeingResolved) 688577"];
2008 [label="param GetCandidateMembers(Binder originalBinder) 688578"];
2009 [label="foreach (Symbol member in members)\n            {\n                // Do we need to exclude override members, or is that done later by overload resolution. It seems like\n                // not excluding them here can't lead to problems, because we will always find the overridden method as well.\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, accessThroughType, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                result.MergeEqual(resultOfThisMember);\n            } 688579"];
2010 [label="param MergePrioritized(LookupResult other) 688580"];
2011 [label="param MergePrioritized(this) 688581"];
2012 [label="other.Kind 688582"];
2013 [label="get\n            {\n                return _kind;\n            } 688583"];
2014 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 688584"];
2015 [label="Kind 688585"];
2016 [label="get\n            {\n                return _kind;\n            } 688586"];
2017 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 688587"];
2018 [label="if (other.Kind > Kind)\n            {\n                SetFrom(other);\n            } 688588"];
2019 [label="NamedTypeSymbol namedType = currentType as NamedTypeSymbol; 688589"];
2020 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 688590"];
2021 [label="if (namedType?.ShouldAddWinRTMembers == true)\n                {\n                    AddWinRTMembers(result, namedType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                } 688591"];
2022 [label="tmp.IsMultiViable 688592"];
2023 [label="return _kind; 688593"];
2024 [label="bool tmpHidesMethodOrIndexers = tmp.IsMultiViable && !IsMethodOrIndexer(tmp.Symbols[0]); 688594"];
2025 [label="result.IsMultiViable 688595"];
2026 [label="return _kind; 688596"];
2027 [label="if (result.IsMultiViable && (tmpHidesMethodOrIndexers || !IsMethodOrIndexer(result.Symbols[0])))\n                {\n                    break;\n                } 688597"];
2028 [label="if (basesBeingResolved != null && basesBeingResolved.ContainsReference(type.OriginalDefinition))\n                {\n                    var other = GetNearestOtherSymbol(basesBeingResolved, type);\n                    var diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_CircularBase, type, other);\n                    var error = new ExtendedErrorTypeSymbol(this.Compilation, name, arity, diagInfo, unreported: true);\n                    result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                } 688598"];
2029 [label="originalBinder.InCrefButNotParameterOrReturnType 688599"];
2030 [label="get { return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); } 688600"];
2031 [label="InCref 688601"];
2032 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 688602"];
2033 [label="return this.Flags.Includes(BinderFlags.Cref); 688603"];
2034 [label="return this.Flags.Includes(BinderFlags.Cref); 688604"];
2035 [label="this.Flags.Includes(BinderFlags.Cref) 688605"];
2036 [label="param Includes(this BinderFlags self) 688606"];
2037 [label="param Includes(BinderFlags other) 688607"];
2038 [label="return InCref && !this.Flags.Includes(BinderFlags.CrefParameterOrReturnType); 688608"];
2039 [label="if (originalBinder.InCrefButNotParameterOrReturnType)\n                {\n                    break;\n                } 688609"];
2040 [label="if ((object)currentType != null)\n                {\n                    currentType.OriginalDefinition.AddUseSiteDiagnostics(ref useSiteDiagnostics);\n                } 688610"];
2041 [label="visited?.Free(); 688611"];
2042 [label="tmp.Free() 688612"];
2043 [label="param Free(this) 688613"];
2044 [label="this.Clear() 688614"];
2045 [label="param Clear(this) 688615"];
2046 [label="_kind 688616"];
2047 [label="_symbolList.Clear(); 688617"];
2048 [label="_error = null; 688618"];
2049 [label="_error 688619"];
2050 [label="this.Clear(); 688620"];
2051 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 688621"];
2052 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 688622"];
2053 [label="_pool.Free(this); 688623"];
2054 [label="tmp.Free(); 688624"];
2055 [label="LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, type, diagnose, ref useSiteDiagnostics); 688625"];
2056 [label="this.LookupMembersInClass(result, type, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688626"];
2057 [label="this.LookupMembersInType(result, (TypeSymbol)nsOrType, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688627"];
2058 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688628"];
2059 [label="result.IsMultiViable 688629"];
2060 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 688630"];
2061 [label="return _kind; 688631"];
2062 [label="if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                } 688632"];
2063 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688633"];
2064 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688634"];
2065 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688635"];
2066 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688636"];
2067 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688637"];
2068 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688638"];
2069 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688639"];
2070 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688640"];
2071 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 688641"];
2072 [label="param LookupSymbol(Binder originalBinder) 688642"];
2073 [label="param LookupSymbol(LookupResult result) 688643"];
2074 [label="param LookupSymbol(string name) 688644"];
2075 [label="param LookupSymbol(int arity) 688645"];
2076 [label="param LookupSymbol(ConsList<TypeSymbol> basesBeingResolved) 688646"];
2077 [label="param LookupSymbol(LookupOptions options) 688647"];
2078 [label="param LookupSymbol(bool diagnose) 688648"];
2079 [label="param LookupSymbol(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688649"];
2080 [label="param LookupSymbol(this) 688650"];
2081 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688651"];
2082 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688652"];
2083 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688653"];
2084 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688654"];
2085 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688655"];
2086 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688656"];
2087 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688657"];
2088 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688658"];
2089 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 688659"];
2090 [label="param LookupSymbolInAliases(Binder originalBinder) 688660"];
2091 [label="param LookupSymbolInAliases(LookupResult result) 688661"];
2092 [label="param LookupSymbolInAliases(string name) 688662"];
2093 [label="param LookupSymbolInAliases(int arity) 688663"];
2094 [label="param LookupSymbolInAliases(ConsList<TypeSymbol> basesBeingResolved) 688664"];
2095 [label="param LookupSymbolInAliases(LookupOptions options) 688665"];
2096 [label="param LookupSymbolInAliases(bool diagnose) 688666"];
2097 [label="param LookupSymbolInAliases(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688667"];
2098 [label="param LookupSymbolInAliases(this) 688668"];
2099 [label="originalBinder.IsSemanticModelBinder 688669"];
2100 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 688670"];
2101 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 688671"];
2102 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 688672"];
2103 [label="this.Flags.Includes(BinderFlags.SemanticModel) 688673"];
2104 [label="param Includes(this BinderFlags self) 688674"];
2105 [label="param Includes(BinderFlags other) 688675"];
2106 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 688676"];
2107 [label="AliasAndUsingDirective alias; 688677"];
2108 [label="alias 688678"];
2109 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 688679"];
2110 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 688680"];
2111 [label="if (this.UsingAliases.TryGetValue(name, out alias))\n            {\n                // Found a match in our list of normal aliases.  Mark the alias as being seen so that\n                // it won't be reported to the user as something that can be removed.\n                var res = originalBinder.CheckViability(alias.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                if (res.Kind == LookupResultKind.Viable)\n                {\n                    MarkImportDirective(alias.UsingDirective, callerIsSemanticModel);\n                }\n\n                result.MergeEqual(res);\n            } 688681"];
2112 [label="foreach (var a in this.ExternAliases)\n            {\n                if (a.Alias.Name == name)\n                {\n                    // Found a match in our list of extern aliases.  Mark the extern alias as being\n                    // seen so that it won't be reported to the user as something that can be\n                    // removed.\n                    var res = originalBinder.CheckViability(a.Alias, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(a.ExternAliasDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 688682"];
2113 [label="LookupSymbolInAliases(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688683"];
2114 [label="result.IsMultiViable 688684"];
2115 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 688685"];
2116 [label="return _kind; 688686"];
2117 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 688687"];
2118 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 688688"];
2119 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 688689"];
2120 [label="if (!result.IsMultiViable && (options & LookupOptions.NamespaceAliasesOnly) == 0)\n            {\n                LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics);\n            } 688690"];
2121 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688691"];
2122 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688692"];
2123 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688693"];
2124 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688694"];
2125 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688695"];
2126 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688696"];
2127 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688697"];
2128 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688698"];
2129 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688699"];
2130 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics) 688700"];
2131 [label="param LookupSymbolInUsings(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 688701"];
2132 [label="param LookupSymbolInUsings(Binder originalBinder) 688702"];
2133 [label="param LookupSymbolInUsings(LookupResult result) 688703"];
2134 [label="param LookupSymbolInUsings(string name) 688704"];
2135 [label="param LookupSymbolInUsings(int arity) 688705"];
2136 [label="param LookupSymbolInUsings(ConsList<TypeSymbol> basesBeingResolved) 688706"];
2137 [label="param LookupSymbolInUsings(LookupOptions options) 688707"];
2138 [label="param LookupSymbolInUsings(bool diagnose) 688708"];
2139 [label="param LookupSymbolInUsings(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688709"];
2140 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 688710"];
2141 [label="if (originalBinder.Flags.Includes(BinderFlags.InScriptUsing))\n            {\n                return;\n            } 688711"];
2142 [label="originalBinder.Flags.Includes(BinderFlags.InScriptUsing) 688712"];
2143 [label="param Includes(this BinderFlags self) 688713"];
2144 [label="param Includes(BinderFlags other) 688714"];
2145 [label="originalBinder.IsSemanticModelBinder 688715"];
2146 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 688716"];
2147 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 688717"];
2148 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 688718"];
2149 [label="this.Flags.Includes(BinderFlags.SemanticModel) 688719"];
2150 [label="param Includes(this BinderFlags self) 688720"];
2151 [label="param Includes(BinderFlags other) 688721"];
2152 [label="bool callerIsSemanticModel = originalBinder.IsSemanticModelBinder; 688722"];
2153 [label="foreach (var typeOrNamespace in usings)\n            {\n                ImmutableArray<Symbol> candidates = Binder.GetCandidateMembers(typeOrNamespace.NamespaceOrType, name, options, originalBinder: originalBinder);\n                foreach (Symbol symbol in candidates)\n                {\n                    if (!IsValidLookupCandidateInUsings(symbol))\n                    {\n                        continue;\n                    }\n\n                    // Found a match in our list of normal using directives.  Mark the directive\n                    // as being seen so that it won't be reported to the user as something that\n                    // can be removed.\n                    var res = originalBinder.CheckViability(symbol, arity, options, null, diagnose, ref useSiteDiagnostics, basesBeingResolved);\n                    if (res.Kind == LookupResultKind.Viable)\n                    {\n                        MarkImportDirective(originalBinder.Compilation, typeOrNamespace.UsingDirective, callerIsSemanticModel);\n                    }\n\n                    result.MergeEqual(res);\n                }\n            } 688723"];
2154 [label="LookupSymbolInUsings(this.Usings, originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688724"];
2155 [label="imports.LookupSymbol(originalBinder, result, name, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 688725"];
2156 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688726"];
2157 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688727"];
2158 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 688728"];
2159 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 688729"];
2160 [label="scope.LookupSymbolsInSingleBinder(result, name, arity, basesBeingResolved, options, this, diagnose, ref useSiteDiagnostics); 688730"];
2161 [label="param LookupSymbolsInSingleBinder(int arity) 688731"];
2162 [label="param LookupSymbolsInSingleBinder(Binder originalBinder) 688732"];
2163 [label="param LookupSymbolsInSingleBinder(bool diagnose) 688733"];
2164 [label="result.IsClear 688734"];
2165 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 688735"];
2166 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688736"];
2167 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688737"];
2168 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 688738"];
2169 [label="Debug.Assert(result.IsClear); 688739"];
2170 [label="IsSubmissionClass 688740"];
2171 [label="get { return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; } 688741"];
2172 [label="return (_container?.Kind == SymbolKind.NamedType) && ((NamedTypeSymbol)_container).IsSubmissionClass; 688742"];
2173 [label="if (IsSubmissionClass)\n            {\n                this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics);\n                return;\n            } 688743"];
2174 [label="param GetImports(ConsList<TypeSymbol> basesBeingResolved) 688744"];
2175 [label="Debug.Assert(_lazyImports != null || _computeImports != null, 'Have neither imports nor a way to compute them.'); 688745"];
2176 [label="if (_lazyImports == null)\n            {\n                Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null);\n            } 688746"];
2177 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 688747"];
2178 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 688748"];
2179 [label="Interlocked.CompareExchange(ref _lazyImports, _computeImports(basesBeingResolved), null); 688749"];
2180 [label="param FromSyntax(CSharpSyntaxNode declarationSyntax) 688750"];
2181 [label="param FromSyntax(InContainerBinder binder) 688751"];
2182 [label="param FromSyntax(ConsList<TypeSymbol> basesBeingResolved) 688752"];
2183 [label="param FromSyntax(bool inUsing) 688753"];
2184 [label="SyntaxList<UsingDirectiveSyntax> usingDirectives; 688754"];
2185 [label="usingDirectives 688755"];
2186 [label="SyntaxList<ExternAliasDirectiveSyntax> externAliasDirectives; 688756"];
2187 [label="externAliasDirectives 688757"];
2188 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n            {\n                var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings;\n                externAliasDirectives = compilationUnit.Externs;\n            }\n            else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n            {\n                var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                // using directives are not in scope within using directives\n                usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : namespaceDecl.Usings;\n                externAliasDirectives = namespaceDecl.Externs;\n            }\n            else\n            {\n                return Empty;\n            } 688758"];
2189 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 688759"];
2190 [label="inUsing 688760"];
2191 [label="compilationUnit.Usings 688761"];
2192 [label="usingDirectives = inUsing ? default(SyntaxList<UsingDirectiveSyntax>) : compilationUnit.Usings; 688762"];
2193 [label="externAliasDirectives = compilationUnit.Externs; 688763"];
2194 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 688764"];
2195 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 688765"];
2196 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 688766"];
2197 [label="if (usingDirectives.Count == 0 && externAliasDirectives.Count == 0)\n            {\n                return Empty;\n            } 688767"];
2198 [label="return Empty; 688768"];
2199 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688769"];
2200 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688770"];
2201 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688771"];
2202 [label="this.LookupMembersInternal(result, _container, name, arity, basesBeingResolved, options, originalBinder, diagnose, ref useSiteDiagnostics); 688772"];
2203 [label="param LookupMembersInternal(int arity) 688773"];
2204 [label="param LookupMembersInternal(Binder originalBinder) 688774"];
2205 [label="param LookupMembersInternal(bool diagnose) 688775"];
2206 [label="Debug.Assert(options.AreValid()); 688776"];
2207 [label="options.AreValid() 688777"];
2208 [label="param AreValid(this LookupOptions options) 688778"];
2209 [label="if (options == LookupOptions.Default)\n            {\n                return true;\n            } 688779"];
2210 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 688780"];
2211 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return options == LookupOptions.LabelsOnly;\n            } 688781"];
2212 [label="LookupOptions mustBeAndNotBeInstance = (LookupOptions.MustBeInstance | LookupOptions.MustNotBeInstance); 688782"];
2213 [label="if ((options & mustBeAndNotBeInstance) == mustBeAndNotBeInstance)\n            {\n                return false;\n            } 688783"];
2214 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 688784"];
2215 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 688785"];
2216 [label="if ((options & (LookupOptions.MustNotBeNamespace | LookupOptions.MustNotBeMethodTypeParameter)) != 0 &&\n                (options & (LookupOptions.NamespaceAliasesOnly | LookupOptions.NamespacesOrTypesOnly)) != 0)\n            {\n                return false;\n            } 688786"];
2217 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 688787"];
2218 [label="LookupOptions onlyOptions = options &\n                (LookupOptions.NamespaceAliasesOnly\n                 | LookupOptions.NamespacesOrTypesOnly\n                 | LookupOptions.AllMethodsOnArityZero); 688788"];
2219 [label="return OnlyOneBitSet(onlyOptions); 688789"];
2220 [label="OnlyOneBitSet(onlyOptions) 688790"];
2221 [label="param OnlyOneBitSet(LookupOptions o) 688791"];
2222 [label="return (o & (o - 1)) == 0; 688792"];
2223 [label="return (o & (o - 1)) == 0; 688793"];
2224 [label="Debug.Assert(arity >= 0); 688794"];
2225 [label="Debug.Assert(arity >= 0); 688795"];
2226 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 688796"];
2227 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 688797"];
2228 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 688798"];
2229 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 688799"];
2230 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics); 688800"];
2231 [label="LookupMembersInNamespace(result, (NamespaceSymbol)nsOrType, name, arity, options, originalBinder, diagnose, ref useSiteDiagnostics) 688801"];
2232 [label="param LookupMembersInNamespace(LookupResult result) 688802"];
2233 [label="param LookupMembersInNamespace(NamespaceSymbol ns) 688803"];
2234 [label="param LookupMembersInNamespace(string name) 688804"];
2235 [label="param LookupMembersInNamespace(int arity) 688805"];
2236 [label="param LookupMembersInNamespace(LookupOptions options) 688806"];
2237 [label="param LookupMembersInNamespace(Binder originalBinder) 688807"];
2238 [label="param LookupMembersInNamespace(bool diagnose) 688808"];
2239 [label="param LookupMembersInNamespace(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688809"];
2240 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 688810"];
2241 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 688811"];
2242 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 688812"];
2243 [label="var members = GetCandidateMembers(ns, name, options, originalBinder); 688813"];
2244 [label="GetCandidateMembers(ns, name, options, originalBinder) 688814"];
2245 [label="param GetCandidateMembers(NamespaceOrTypeSymbol nsOrType) 688815"];
2246 [label="param GetCandidateMembers(string name) 688816"];
2247 [label="param GetCandidateMembers(LookupOptions options) 688817"];
2248 [label="param GetCandidateMembers(Binder originalBinder) 688818"];
2249 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && nsOrType is TypeSymbol)\n            {\n                return nsOrType.GetTypeMembers(name).Cast<NamedTypeSymbol, Symbol>();\n            }\n            else if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 688819"];
2250 [label="if (nsOrType.Kind == SymbolKind.NamedType && originalBinder.IsEarlyAttributeBinder)\n            {\n                return ((NamedTypeSymbol)nsOrType).GetEarlyAttributeDecodingMembers(name);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 688820"];
2251 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 688821"];
2252 [label="if ((options & LookupOptions.LabelsOnly) != 0)\n            {\n                return ImmutableArray<Symbol>.Empty;\n            }\n            else\n            {\n                return nsOrType.GetMembers(name);\n            } 688822"];
2253 [label="return nsOrType.GetMembers(name); 688823"];
2254 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 688824"];
2255 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 688825"];
2256 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 688826"];
2257 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 688827"];
2258 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 688828"];
2259 [label="SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics); 688829"];
2260 [label="originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics) 688830"];
2261 [label="param CheckViability(Symbol symbol) 688831"];
2262 [label="param CheckViability(int arity) 688832"];
2263 [label="param CheckViability(LookupOptions options) 688833"];
2264 [label="param CheckViability(TypeSymbol accessThroughType) 688834"];
2265 [label="param CheckViability(bool diagnose) 688835"];
2266 [label="param CheckViability(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688836"];
2267 [label="param CheckViability(ConsList<TypeSymbol> basesBeingResolved = null) 688837"];
2268 [label="param CheckViability(this) 688838"];
2269 [label="bool inaccessibleViaQualifier; 688839"];
2270 [label="DiagnosticInfo diagInfo; 688840"];
2271 [label="var unwrappedSymbol = symbol.Kind == SymbolKind.Alias\n                ? ((AliasSymbol)symbol).GetAliasTarget(basesBeingResolved)\n                : symbol; 688841"];
2272 [label="symbol.Kind == SymbolKind.Alias 688842"];
2273 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688843"];
2274 [label="if (!this.Compilation.SourceModule.Equals(unwrappedSymbol.ContainingModule) && unwrappedSymbol.IsHiddenByCodeAnalysisEmbeddedAttribute())\n            {\n                return LookupResult.Empty();\n            }\n            else if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688844"];
2275 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688845"];
2276 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688846"];
2277 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688847"];
2278 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688848"];
2279 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688849"];
2280 [label="WrongArity(symbol, arity, diagnose, options, out diagInfo) 688850"];
2281 [label="param WrongArity(Symbol symbol) 688851"];
2282 [label="param WrongArity(int arity) 688852"];
2283 [label="param WrongArity(bool diagnose) 688853"];
2284 [label="param WrongArity(LookupOptions options) 688854"];
2285 [label="param WrongArity(out DiagnosticInfo diagInfo) 688855"];
2286 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                    if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                case SymbolKind.Method:\n                    if (arity != 0 || (options & LookupOptions.AllMethodsOnArityZero) == 0)\n                    {\n                        MethodSymbol method = (MethodSymbol)symbol;\n                        if (method.Arity != arity)\n                        {\n                            if (method.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, method, MessageID.IDS_SK_METHOD.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, method, MessageID.IDS_SK_METHOD.Localize(), method.Arity) : null;\n                            }\n                            return true;\n                        }\n                    }\n                    break;\n\n                default:\n                    if (arity != 0)\n                    {\n                        diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_TypeArgsNotAllowed, symbol, symbol.Kind.Localize()) : null;\n                        return true;\n                    }\n                    break;\n            } 688856"];
2287 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 688857"];
2288 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 688858"];
2289 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 688859"];
2290 [label="if (arity != 0 || (options & LookupOptions.AllNamedTypesOnArityZero) == 0)\n                    {\n                        NamedTypeSymbol namedType = (NamedTypeSymbol)symbol;\n                        // non-declared types only appear as using aliases (aliases are arity 0)\n                        Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType));\n                        if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        }\n                    } 688860"];
2291 [label="NamedTypeSymbol namedType = (NamedTypeSymbol)symbol; 688861"];
2292 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 688862"];
2293 [label="Debug.Assert(object.ReferenceEquals(namedType.ConstructedFrom, namedType)); 688863"];
2294 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 688864"];
2295 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 688865"];
2296 [label="options.IsAttributeTypeLookup() 688866"];
2297 [label="param IsAttributeTypeLookup(this LookupOptions options) 688867"];
2298 [label="if (namedType.Arity != arity || options.IsAttributeTypeLookup() && arity != 0)\n                        {\n                            if (namedType.Arity == 0)\n                            {\n                                // The non-generic {1} '{0}' cannot be used with type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_HasNoTypeVars, namedType, MessageID.IDS_SK_TYPE.Localize()) : null;\n                            }\n                            else\n                            {\n                                // Using the generic {1} '{0}' requires {2} type arguments\n                                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadArity, namedType, MessageID.IDS_SK_TYPE.Localize(), namedType.Arity) : null;\n                            }\n                            return true;\n                        } 688868"];
2299 [label="diagInfo = null; 688869"];
2300 [label="return false; 688870"];
2301 [label="if (WrongArity(symbol, arity, diagnose, options, out diagInfo))\n            {\n                return LookupResult.WrongArity(symbol, diagInfo);\n            }\n            else if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688871"];
2302 [label="InCref 688872"];
2303 [label="get { return this.Flags.Includes(BinderFlags.Cref); } 688873"];
2304 [label="return this.Flags.Includes(BinderFlags.Cref); 688874"];
2305 [label="return this.Flags.Includes(BinderFlags.Cref); 688875"];
2306 [label="this.Flags.Includes(BinderFlags.Cref) 688876"];
2307 [label="param Includes(this BinderFlags self) 688877"];
2308 [label="param Includes(BinderFlags other) 688878"];
2309 [label="if (!InCref && !unwrappedSymbol.CanBeReferencedByNameIgnoringIllegalCharacters)\n            {\n                // Strictly speaking, this test should actually check CanBeReferencedByName.\n                // However, we don't want to pay that cost in cases where the lookup is based\n                // on a provided name.  As a result, we skip the character check here and let\n                // SemanticModel.LookupNames filter out invalid names before returning.\n\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_CantCallSpecialMethod, unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688879"];
2310 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688880"];
2311 [label="if ((options & LookupOptions.NamespacesOrTypesOnly) != 0 && !(unwrappedSymbol is NamespaceOrTypeSymbol))\n            {\n                return LookupResult.NotTypeOrNamespace(unwrappedSymbol, symbol, diagnose);\n            }\n            else if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688881"];
2312 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688882"];
2313 [label="if ((options & LookupOptions.MustBeInvocableIfMember) != 0\n                && IsNonInvocableMember(unwrappedSymbol))\n            {\n                return LookupResult.NotInvocable(unwrappedSymbol, symbol, diagnose);\n            }\n            else if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688883"];
2314 [label="InCref 688884"];
2315 [label="if (InCref && !this.IsCrefAccessible(unwrappedSymbol))\n            {\n                var unwrappedSymbols = ImmutableArray.Create<Symbol>(unwrappedSymbol);\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, unwrappedSymbols, additionalLocations: ImmutableArray<Location>.Empty) : null;\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688885"];
2316 [label="InCref 688886"];
2317 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688887"];
2318 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688888"];
2319 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688889"];
2320 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688890"];
2321 [label="RefineAccessThroughType(options, accessThroughType) 688891"];
2322 [label="param RefineAccessThroughType(LookupOptions options) 688892"];
2323 [label="param RefineAccessThroughType(TypeSymbol accessThroughType) 688893"];
2324 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 688894"];
2325 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 688895"];
2326 [label="((options & LookupOptions.UseBaseReferenceAccessibility) != 0) 688896"];
2327 [label="return ((options & LookupOptions.UseBaseReferenceAccessibility) != 0)\n                ? null\n                : accessThroughType; 688897"];
2328 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688898"];
2329 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688899"];
2330 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 688900"];
2331 [label="this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved) 688901"];
2332 [label="param IsAccessible(Symbol symbol) 688902"];
2333 [label="param IsAccessible(TypeSymbol accessThroughType) 688903"];
2334 [label="param IsAccessible(out bool failedThroughTypeCheck) 688904"];
2335 [label="param IsAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688905"];
2336 [label="param IsAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 688906"];
2337 [label="param IsAccessible(this) 688907"];
2338 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 688908"];
2339 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 688909"];
2340 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 688910"];
2341 [label="param Includes(this BinderFlags self) 688911"];
2342 [label="param Includes(BinderFlags other) 688912"];
2343 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688913"];
2344 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688914"];
2345 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688915"];
2346 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688916"];
2347 [label="return IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688917"];
2348 [label="IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 688918"];
2349 [label="param IsAccessibleHelper(Symbol symbol) 688919"];
2350 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 688920"];
2351 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 688921"];
2352 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688922"];
2353 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 688923"];
2354 [label="param IsAccessibleHelper(this) 688924"];
2355 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688925"];
2356 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688926"];
2357 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688927"];
2358 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688928"];
2359 [label="return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688929"];
2360 [label="Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 688930"];
2361 [label="param IsAccessibleHelper(Symbol symbol) 688931"];
2362 [label="param IsAccessibleHelper(TypeSymbol accessThroughType) 688932"];
2363 [label="param IsAccessibleHelper(out bool failedThroughTypeCheck) 688933"];
2364 [label="param IsAccessibleHelper(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688934"];
2365 [label="param IsAccessibleHelper(ConsList<TypeSymbol> basesBeingResolved) 688935"];
2366 [label="param IsAccessibleHelper(this) 688936"];
2367 [label="var type = _container as NamedTypeSymbol; 688937"];
2368 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 688938"];
2369 [label="if ((object)type != null)\n            {\n                return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics);\n            }\n            else\n            {\n                return Next.IsAccessibleHelper(symbol, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved);  // delegate to containing Binder, eventually checking assembly.\n            } 688939"];
2370 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 688940"];
2371 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 688941"];
2372 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 688942"];
2373 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 688943"];
2374 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 688944"];
2375 [label="return this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics); 688945"];
2376 [label="this.IsSymbolAccessibleConditional(symbol, type, accessThroughType, out failedThroughTypeCheck, ref useSiteDiagnostics) 688946"];
2377 [label="param IsSymbolAccessibleConditional(Symbol symbol) 688947"];
2378 [label="param IsSymbolAccessibleConditional(NamedTypeSymbol within) 688948"];
2379 [label="param IsSymbolAccessibleConditional(TypeSymbol throughTypeOpt) 688949"];
2380 [label="param IsSymbolAccessibleConditional(out bool failedThroughTypeCheck) 688950"];
2381 [label="param IsSymbolAccessibleConditional(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 688951"];
2382 [label="param IsSymbolAccessibleConditional(ConsList<TypeSymbol>? basesBeingResolved = null) 688952"];
2383 [label="param IsSymbolAccessibleConditional(this) 688953"];
2384 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 688954"];
2385 [label="if (this.Flags.Includes(BinderFlags.IgnoreAccessibility))\n            {\n                failedThroughTypeCheck = false;\n                return true;\n            } 688955"];
2386 [label="this.Flags.Includes(BinderFlags.IgnoreAccessibility) 688956"];
2387 [label="param Includes(this BinderFlags self) 688957"];
2388 [label="param Includes(BinderFlags other) 688958"];
2389 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688959"];
2390 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688960"];
2391 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688961"];
2392 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688962"];
2393 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688963"];
2394 [label="return AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved); 688964"];
2395 [label="AccessCheck.IsSymbolAccessible(symbol, within, throughTypeOpt, out failedThroughTypeCheck, ref useSiteDiagnostics, basesBeingResolved) 688965"];
2396 [label="param IsSymbolAccessible(Symbol symbol) 688966"];
2397 [label="param IsSymbolAccessible(NamedTypeSymbol within) 688967"];
2398 [label="param IsSymbolAccessible(TypeSymbol throughTypeOpt) 688968"];
2399 [label="param IsSymbolAccessible(out bool failedThroughTypeCheck) 688969"];
2400 [label="param IsSymbolAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688970"];
2401 [label="param IsSymbolAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 688971"];
2402 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 688972"];
2403 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 688973"];
2404 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 688974"];
2405 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 688975"];
2406 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 688976"];
2407 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 688977"];
2408 [label="return IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved); 688978"];
2409 [label="IsSymbolAccessibleCore(symbol, within, throughTypeOpt, out failedThroughTypeCheck, within.DeclaringCompilation, ref useSiteDiagnostics, basesBeingResolved) 688979"];
2410 [label="param IsSymbolAccessibleCore(Symbol symbol) 688980"];
2411 [label="param IsSymbolAccessibleCore(Symbol within) 688981"];
2412 [label="param IsSymbolAccessibleCore(TypeSymbol throughTypeOpt) 688982"];
2413 [label="param IsSymbolAccessibleCore(out bool failedThroughTypeCheck) 688983"];
2414 [label="param IsSymbolAccessibleCore(CSharpCompilation compilation) 688984"];
2415 [label="param IsSymbolAccessibleCore(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 688985"];
2416 [label="param IsSymbolAccessibleCore(ConsList<TypeSymbol> basesBeingResolved = null) 688986"];
2417 [label="Debug.Assert((object)symbol != null); 688987"];
2418 [label="Debug.Assert((object)symbol != null); 688988"];
2419 [label="Debug.Assert((object)within != null); 688989"];
2420 [label="Debug.Assert((object)within != null); 688990"];
2421 [label="Debug.Assert(within.IsDefinition); 688991"];
2422 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 688992"];
2423 [label="failedThroughTypeCheck = false; 688993"];
2424 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.ArrayType:\n                    return IsSymbolAccessibleCore(((ArrayTypeSymbol)symbol).ElementType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.PointerType:\n                    return IsSymbolAccessibleCore(((PointerTypeSymbol)symbol).PointedAtType, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.NamedType:\n                    return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Alias:\n                    return IsSymbolAccessibleCore(((AliasSymbol)symbol).Target, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.Discard:\n                    return IsSymbolAccessibleCore(((DiscardSymbol)symbol).TypeWithAnnotations.Type, within, null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved);\n\n                case SymbolKind.FunctionPointerType:\n                    var funcPtr = (FunctionPointerTypeSymbol)symbol;\n                    if (!IsSymbolAccessibleCore(funcPtr.Signature.ReturnType, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n\n                    foreach (var param in funcPtr.Signature.Parameters)\n                    {\n                        if (!IsSymbolAccessibleCore(param.Type, within, throughTypeOpt: null, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                        {\n                            return false;\n                        }\n                    }\n\n                    return true;\n\n                case SymbolKind.ErrorType:\n                    // Always assume that error types are accessible.\n                    return true;\n\n                case SymbolKind.TypeParameter:\n                case SymbolKind.Parameter:\n                case SymbolKind.Local:\n                case SymbolKind.Label:\n                case SymbolKind.Namespace:\n                case SymbolKind.DynamicType:\n                case SymbolKind.Assembly:\n                case SymbolKind.NetModule:\n                case SymbolKind.RangeVariable:\n                case SymbolKind.Method when ((MethodSymbol)symbol).MethodKind == MethodKind.LocalFunction:\n                    // These types of symbols are always accessible (if visible).\n                    return true;\n\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                    if (!symbol.RequiresInstanceReceiver())\n                    {\n                        // static members aren't accessed 'through' an 'instance' of any type.  So we\n                        // null out the 'through' instance here.  This ensures that we'll understand\n                        // accessing protected statics properly.\n                        throughTypeOpt = null;\n                    }\n\n                    return IsMemberAccessible(symbol.ContainingType, symbol.DeclaredAccessibility, within, throughTypeOpt, out failedThroughTypeCheck, compilation, ref useSiteDiagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 688994"];
2425 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 688995"];
2426 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 688996"];
2427 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 688997"];
2428 [label="return IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved); 688998"];
2429 [label="IsNamedTypeAccessible((NamedTypeSymbol)symbol, within, ref useSiteDiagnostics, basesBeingResolved) 688999"];
2430 [label="param IsNamedTypeAccessible(NamedTypeSymbol type) 689000"];
2431 [label="param IsNamedTypeAccessible(Symbol within) 689001"];
2432 [label="param IsNamedTypeAccessible(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 689002"];
2433 [label="param IsNamedTypeAccessible(ConsList<TypeSymbol> basesBeingResolved = null) 689003"];
2434 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 689004"];
2435 [label="Debug.Assert((object)type != null); 689005"];
2436 [label="Debug.Assert((object)type != null); 689006"];
2437 [label="var compilation = within.DeclaringCompilation; 689007"];
2438 [label="bool unused; 689008"];
2439 [label="if (!type.IsDefinition)\n            {\n                // All type argument must be accessible.\n                var typeArgs = type.TypeArgumentsWithDefinitionUseSiteDiagnostics(ref useSiteDiagnostics);\n                foreach (var typeArg in typeArgs)\n                {\n                    // type parameters are always accessible, so don't check those (so common it's\n                    // worth optimizing this).\n                    if (typeArg.Type.Kind != SymbolKind.TypeParameter && !IsSymbolAccessibleCore(typeArg.Type, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved))\n                    {\n                        return false;\n                    }\n                }\n            } 689009"];
2440 [label="var containingType = type.ContainingType; 689010"];
2441 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 689011"];
2442 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 689012"];
2443 [label="(object)containingType == null 689013"];
2444 [label="return (object)containingType == null\n                ? IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within)\n                : IsMemberAccessible(containingType, type.DeclaredAccessibility, within, null, out unused, compilation, ref useSiteDiagnostics, basesBeingResolved); 689014"];
2445 [label="IsNonNestedTypeAccessible(type.ContainingAssembly, type.DeclaredAccessibility, within) 689015"];
2446 [label="param IsNonNestedTypeAccessible(AssemblySymbol assembly) 689016"];
2447 [label="param IsNonNestedTypeAccessible(Accessibility declaredAccessibility) 689017"];
2448 [label="param IsNonNestedTypeAccessible(Symbol within) 689018"];
2449 [label="Debug.Assert(within is NamedTypeSymbol || within is AssemblySymbol); 689019"];
2450 [label="Debug.Assert((object)assembly != null); 689020"];
2451 [label="Debug.Assert((object)assembly != null); 689021"];
2452 [label="switch (declaredAccessibility)\n            {\n                case Accessibility.NotApplicable:\n                case Accessibility.Public:\n                    // Public symbols are always accessible from any context\n                    return true;\n\n                case Accessibility.Private:\n                case Accessibility.Protected:\n                case Accessibility.ProtectedAndInternal:\n                    // Shouldn't happen except in error cases.\n                    return false;\n\n                case Accessibility.Internal:\n                case Accessibility.ProtectedOrInternal:\n\n                    // within is typically a type\n                    var withinType = within as NamedTypeSymbol;\n                    var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within;\n\n                    // An internal type is accessible if we're in the same assembly or we have\n                    // friend access to the assembly it was defined in.\n                    return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaredAccessibility);\n            } 689022"];
2453 [label="var withinType = within as NamedTypeSymbol; 689023"];
2454 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 689024"];
2455 [label="var withinAssembly = (object)withinType != null ? withinType.ContainingAssembly : (AssemblySymbol)within; 689025"];
2456 [label="(object)withinType != null 689026"];
2457 [label="withinType.ContainingAssembly 689027"];
2458 [label="return (object)withinAssembly == (object)assembly || withinAssembly.HasInternalAccessTo(assembly); 689028"];
2459 [label="if (!InCref &&\n                     !this.IsAccessible(unwrappedSymbol,\n                                        RefineAccessThroughType(options, accessThroughType),\n                                        out inaccessibleViaQualifier,\n                                        ref useSiteDiagnostics,\n                                        basesBeingResolved))\n            {\n                if (!diagnose)\n                {\n                    diagInfo = null;\n                }\n                else if (inaccessibleViaQualifier)\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadProtectedAccess, unwrappedSymbol, accessThroughType, this.ContainingType);\n                }\n                else if (IsBadIvtSpecification())\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_FriendRefNotEqualToThis, unwrappedSymbol.ContainingAssembly.Identity.ToString(), AssemblyIdentity.PublicKeyToString(this.Compilation.Assembly.PublicKey));\n                }\n                else\n                {\n                    diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_BadAccess, new[] { unwrappedSymbol }, ImmutableArray.Create<Symbol>(unwrappedSymbol), additionalLocations: ImmutableArray<Location>.Empty);\n                }\n\n                return LookupResult.Inaccessible(symbol, diagInfo);\n            }\n            else if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 689029"];
2460 [label="InCref 689030"];
2461 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 689031"];
2462 [label="if (!InCref && unwrappedSymbol.MustCallMethodsDirectly())\n            {\n                diagInfo = diagnose ? MakeCallMethodsDirectlyDiagnostic(unwrappedSymbol) : null;\n                return LookupResult.NotReferencable(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 689032"];
2463 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 689033"];
2464 [label="if ((options & LookupOptions.MustBeInstance) != 0 && !IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectRequired, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 689034"];
2465 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 689035"];
2466 [label="if ((options & LookupOptions.MustNotBeInstance) != 0 && IsInstance(unwrappedSymbol))\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_ObjectProhibited, unwrappedSymbol) : null;\n                return LookupResult.StaticInstanceMismatch(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 689036"];
2467 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 689037"];
2468 [label="if ((options & LookupOptions.MustNotBeNamespace) != 0 && unwrappedSymbol.Kind == SymbolKind.Namespace)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_BadSKunknown, unwrappedSymbol, unwrappedSymbol.GetKindText()) : null;\n                return LookupResult.NotTypeOrNamespace(symbol, diagInfo);\n            }\n            else if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 689038"];
2469 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 689039"];
2470 [label="if ((options & LookupOptions.LabelsOnly) != 0 && unwrappedSymbol.Kind != SymbolKind.Label)\n            {\n                diagInfo = diagnose ? new CSDiagnosticInfo(ErrorCode.ERR_LabelNotFound, unwrappedSymbol.Name) : null;\n                return LookupResult.NotLabel(symbol, diagInfo);\n            }\n            else\n            {\n                return LookupResult.Good(symbol);\n            } 689040"];
2471 [label="return LookupResult.Good(symbol); 689041"];
2472 [label="LookupResult.Good(symbol) 689042"];
2473 [label="param Good(Symbol symbol) 689043"];
2474 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 689044"];
2475 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 689045"];
2476 [label="return new SingleLookupResult(LookupResultKind.Viable, symbol, null); 689046"];
2477 [label="new SingleLookupResult(LookupResultKind.Viable, symbol, null) 689047"];
2478 [label="param SingleLookupResult(LookupResultKind kind) 689048"];
2479 [label="param SingleLookupResult(Symbol symbol) 689049"];
2480 [label="param SingleLookupResult(DiagnosticInfo error) 689050"];
2481 [label="param SingleLookupResult(this) 689051"];
2482 [label="this.Kind 689052"];
2483 [label="this.Symbol 689053"];
2484 [label="this.Error 689054"];
2485 [label="return LookupResult.Good(symbol); 689055"];
2486 [label="result.MergeEqual(resultOfThisMember); 689056"];
2487 [label="result.MergeEqual(resultOfThisMember) 689057"];
2488 [label="param MergeEqual(SingleLookupResult result) 689058"];
2489 [label="param MergeEqual(this) 689059"];
2490 [label="Kind 689060"];
2491 [label="get\n            {\n                return _kind;\n            } 689061"];
2492 [label="return _kind; 689062"];
2493 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 689063"];
2494 [label="if (Kind > result.Kind)\n            {\n                // existing result is better\n            }\n            else if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 689064"];
2495 [label="Kind 689065"];
2496 [label="if (result.Kind > Kind)\n            {\n                this.SetFrom(result);\n            }\n            else if ((object)result.Symbol != null)\n            {\n                // Same goodness. Include all symbols\n                _symbolList.Add(result.Symbol);\n            } 689066"];
2497 [label="this.SetFrom(result); 689067"];
2498 [label="this.SetFrom(result) 689068"];
2499 [label="param SetFrom(SingleLookupResult other) 689069"];
2500 [label="param SetFrom(this) 689070"];
2501 [label="_kind 689071"];
2502 [label="_symbolList.Clear(); 689072"];
2503 [label="_symbolList.Add(other.Symbol); 689073"];
2504 [label="_symbolList.Add(other.Symbol); 689074"];
2505 [label="_error 689075"];
2506 [label="this.SetFrom(result); 689076"];
2507 [label="result.MergeEqual(resultOfThisMember); 689077"];
2508 [label="foreach (Symbol member in members)\n            {\n                SingleLookupResult resultOfThisMember = originalBinder.CheckViability(member, arity, options, null, diagnose, ref useSiteDiagnostics);\n                result.MergeEqual(resultOfThisMember);\n            } 689078"];
2509 [label="result.IsMultiViable 689079"];
2510 [label="return _kind; 689080"];
2511 [label="if (result.IsMultiViable)\n                {\n                    // symbols cannot conflict with using alias names\n                    if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    }\n\n                    return;\n                } 689081"];
2512 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 689082"];
2513 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 689083"];
2514 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 689084"];
2515 [label="originalBinder.IsSemanticModelBinder 689085"];
2516 [label="get\n            {\n                return this.Flags.Includes(BinderFlags.SemanticModel);\n            } 689086"];
2517 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 689087"];
2518 [label="return this.Flags.Includes(BinderFlags.SemanticModel); 689088"];
2519 [label="this.Flags.Includes(BinderFlags.SemanticModel) 689089"];
2520 [label="param Includes(this BinderFlags self) 689090"];
2521 [label="param Includes(BinderFlags other) 689091"];
2522 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 689092"];
2523 [label="imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder) 689093"];
2524 [label="param IsUsingAlias(string name) 689094"];
2525 [label="param IsUsingAlias(bool callerIsSemanticModel) 689095"];
2526 [label="param IsUsingAlias(this) 689096"];
2527 [label="AliasAndUsingDirective node; 689097"];
2528 [label="node 689098"];
2529 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 689099"];
2530 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 689100"];
2531 [label="if (this.UsingAliases.TryGetValue(name, out node))\n            {\n                // This method is called by InContainerBinder.LookupSymbolsInSingleBinder to see if\n                // there's a conflict between an alias and a member.  As a conflict may cause a\n                // speculative lambda binding to fail this is semantically relevant and we need to\n                // mark this using alias as referenced (and thus not something that can be removed).\n                MarkImportDirective(node.UsingDirective, callerIsSemanticModel);\n                return true;\n            } 689101"];
2532 [label="return false; 689102"];
2533 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 689103"];
2534 [label="if (arity == 0 && imports.IsUsingAlias(name, originalBinder.IsSemanticModelBinder))\n                    {\n                        CSDiagnosticInfo diagInfo = new CSDiagnosticInfo(ErrorCode.ERR_ConflictAliasAndMember, name, _container);\n                        var error = new ExtendedErrorTypeSymbol((NamespaceOrTypeSymbol)null, name, arity, diagInfo, unreported: true);\n                        result.SetFrom(LookupResult.Good(error)); // force lookup to be done w/ error symbol as result\n                    } 689104"];
2535 [label="return; 689105"];
2536 [label="result.IsClear 689106"];
2537 [label="get\n            {\n                return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0;\n            } 689107"];
2538 [label="return _kind == LookupResultKind.Empty && _error == null && _symbolList.Count == 0; 689108"];
2539 [label="if (!result.IsClear)\n                    {\n                        binder = scope;\n                    } 689109"];
2540 [label="binder = scope; 689110"];
2541 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 689111"];
2542 [label="if ((options & LookupOptions.LabelsOnly) != 0 && scope.IsLastBinderWithinMember())\n                {\n                    // Labels declared outside of a member are not visible inside.\n                    break;\n                } 689112"];
2543 [label="return binder; 689113"];
2544 [label="this.LookupSymbolsOrMembersInternal(result, qualifierOpt, plainName, arity, basesBeingResolved, options, diagnose, ref useSiteDiagnostics); 689114"];
2545 [label="diagnostics.Add(node, useSiteDiagnostics); 689115"];
2546 [label="diagnostics.Add(node, useSiteDiagnostics); 689116"];
2547 [label="diagnostics.Add(node, useSiteDiagnostics); 689117"];
2548 [label="diagnostics.Add(node, useSiteDiagnostics); 689118"];
2549 [label="Symbol bindingResult = null; 689119"];
2550 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 689120"];
2551 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 689121"];
2552 [label="if ((object)qualifierOpt == null &&\n                !IsViableType(result))\n            {\n                if (node.Identifier.ValueText == 'dynamic')\n                {\n                    if ((node.Parent == null ||\n                          node.Parent.Kind() != SyntaxKind.Attribute && // dynamic not allowed as attribute type\n                          SyntaxFacts.IsInTypeOnlyContext(node)) &&\n                        Compilation.LanguageVersion >= MessageID.IDS_FeatureDynamic.RequiredVersion())\n                    {\n                        bindingResult = Compilation.DynamicType;\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n                else\n                {\n                    bindingResult = BindNativeIntegerSymbolIfAny(node, diagnostics);\n                }\n            } 689122"];
2553 [label="IsViableType(result) 689123"];
2554 [label="param IsViableType(LookupResult result) 689124"];
2555 [label="result.IsMultiViable 689125"];
2556 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 689126"];
2557 [label="Kind 689127"];
2558 [label="get\n            {\n                return _kind;\n            } 689128"];
2559 [label="return _kind; 689129"];
2560 [label="if (!result.IsMultiViable)\n            {\n                return false;\n            } 689130"];
2561 [label="result.Symbols 689131"];
2562 [label="get\n            {\n                return _symbolList;\n            } 689132"];
2563 [label="return _symbolList; 689133"];
2564 [label="foreach (var s in result.Symbols)\n            {\n                switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                }\n            } 689134"];
2565 [label="switch (s.Kind)\n                {\n                    case SymbolKind.Alias:\n                        if (((AliasSymbol)s).Target.Kind == SymbolKind.NamedType) return true;\n                        break;\n                    case SymbolKind.NamedType:\n                    case SymbolKind.TypeParameter:\n                        return true;\n                } 689135"];
2566 [label="return true; 689136"];
2567 [label="if (bindingResult is null)\n            {\n                bool wasError;\n\n                bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options);\n                if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                }\n            } 689137"];
2568 [label="bool wasError; 689138"];
2569 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689139"];
2570 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689140"];
2571 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689141"];
2572 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689142"];
2573 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689143"];
2574 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689144"];
2575 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689145"];
2576 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689146"];
2577 [label="bindingResult = ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689147"];
2578 [label="ResultSymbol(result, identifierValueText, 0, node, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 689148"];
2579 [label="param ResultSymbol(LookupResult result) 689149"];
2580 [label="param ResultSymbol(string simpleName) 689150"];
2581 [label="param ResultSymbol(int arity) 689151"];
2582 [label="param ResultSymbol(SyntaxNode where) 689152"];
2583 [label="param ResultSymbol(DiagnosticBag diagnostics) 689153"];
2584 [label="param ResultSymbol(bool suppressUseSiteDiagnostics) 689154"];
2585 [label="param ResultSymbol(out bool wasError) 689155"];
2586 [label="param ResultSymbol(NamespaceOrTypeSymbol qualifierOpt = null) 689156"];
2587 [label="param ResultSymbol(LookupOptions options = default(LookupOptions)) 689157"];
2588 [label="param ResultSymbol(this) 689158"];
2589 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689159"];
2590 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689160"];
2591 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689161"];
2592 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689162"];
2593 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689163"];
2594 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689164"];
2595 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689165"];
2596 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689166"];
2597 [label="Symbol symbol = resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options); 689167"];
2598 [label="resultSymbol(result, simpleName, arity, where, diagnostics, suppressUseSiteDiagnostics, out wasError, qualifierOpt, options) 689168"];
2599 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 689169"];
2600 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 689170"];
2601 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 689171"];
2602 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 689172"];
2603 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 689173"];
2604 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 689174"];
2605 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 689175"];
2606 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 689176"];
2607 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 689177"];
2608 [label="Symbol resultSymbol(\n                LookupResult result,\n                string simpleName,\n                int arity,\n                SyntaxNode where,\n                DiagnosticBag diagnostics,\n                bool suppressUseSiteDiagnostics,\n                out bool wasError,\n                NamespaceOrTypeSymbol qualifierOpt,\n                LookupOptions options)\n            {\n                Debug.Assert(where != null);\n                Debug.Assert(diagnostics != null);\n\n                var symbols = result.Symbols;\n                wasError = false;\n\n                if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                }\n\n                // Below here is the error case; no viable symbols found (but maybe one or more non-viable.)\n                wasError = true;\n\n                if (result.Kind == LookupResultKind.Empty)\n                {\n                    string aliasOpt = null;\n                    SyntaxNode node = where;\n                    while (node is ExpressionSyntax)\n                    {\n                        if (node.Kind() == SyntaxKind.AliasQualifiedName)\n                        {\n                            aliasOpt = ((AliasQualifiedNameSyntax)node).Alias.Identifier.ValueText;\n                            break;\n                        }\n                        node = node.Parent;\n                    }\n\n                    CSDiagnosticInfo info = NotFound(where, simpleName, arity,\n                        // LAFHIS\n                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, diagnostics, aliasOpt, qualifierOpt, options);\n                    return new ExtendedErrorTypeSymbol(qualifierOpt ?? Compilation.Assembly.GlobalNamespace, simpleName, arity, info);\n                }\n\n                Debug.Assert(symbols.Count > 0);\n\n                // Report any errors we encountered with the symbol we looked up.\n                if (!suppressUseSiteDiagnostics)\n                {\n                    for (int i = 0; i < symbols.Count; i++)\n                    {\n                        ReportUseSiteDiagnostics(symbols[i], diagnostics, where);\n                    }\n                }\n\n                // result.Error might be null if we have already generated parser errors,\n                // e.g. when generic name is used for attribute name.\n                if (result.Error != null &&\n                    ((object)qualifierOpt == null || qualifierOpt.Kind != SymbolKind.ErrorType)) // Suppress cascading.\n                {\n                    diagnostics.Add(new CSDiagnostic(result.Error, where.Location));\n                }\n\n                if ((symbols.Count > 1) || (symbols[0] is NamespaceOrTypeSymbol || symbols[0] is AliasSymbol) ||\n                    result.Kind == LookupResultKind.NotATypeOrNamespace || result.Kind == LookupResultKind.NotAnAttributeType)\n                {\n                    // Bad type or namespace (or things expected as types/namespaces) are packaged up as error types, preserving the symbols and the result kind.\n                    // We do this if there are multiple symbols too, because just returning one would be losing important information, and they might\n                    // be of different kinds.\n                    return new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(symbols[0]), symbols.ToImmutable(), result.Kind, result.Error, arity);\n                }\n                else\n                {\n                    // It's a single non-type-or-namespace; error was already reported, so just return it.\n                    return symbols[0];\n                }\n            } 689178"];
2609 [label="Debug.Assert(where != null); 689179"];
2610 [label="Debug.Assert(where != null); 689180"];
2611 [label="Debug.Assert(diagnostics != null); 689181"];
2612 [label="Debug.Assert(diagnostics != null); 689182"];
2613 [label="result.Symbols 689183"];
2614 [label="get\n            {\n                return _symbolList;\n            } 689184"];
2615 [label="return _symbolList; 689185"];
2616 [label="var symbols = result.Symbols; 689186"];
2617 [label="wasError = false; 689187"];
2618 [label="result.IsMultiViable 689188"];
2619 [label="get\n            {\n                return Kind == LookupResultKind.Viable;\n            } 689189"];
2620 [label="Kind 689190"];
2621 [label="get\n            {\n                return _kind;\n            } 689191"];
2622 [label="return _kind; 689192"];
2623 [label="if (result.IsMultiViable)\n                {\n                    if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    }\n                } 689193"];
2624 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 689194"];
2625 [label="if (symbols.Count > 1)\n                    {\n                        // gracefully handle symbols.Count > 2\n                        symbols.Sort(ConsistentSymbolOrder.Instance);\n\n                        var originalSymbols = symbols.ToImmutable();\n\n                        for (int i = 0; i < symbols.Count; i++)\n                        {\n                            symbols[i] = UnwrapAlias(symbols[i], diagnostics, where);\n                        }\n\n                        BestSymbolInfo secondBest;\n                        BestSymbolInfo best = GetBestSymbolInfo(symbols, out secondBest);\n\n                        Debug.Assert(!best.IsNone);\n                        Debug.Assert(!secondBest.IsNone);\n\n                        if (best.IsFromCompilation && !secondBest.IsFromCompilation)\n                        {\n                            var srcSymbol = symbols[best.Index];\n                            var mdSymbol = symbols[secondBest.Index];\n\n                            object arg0;\n\n                            if (best.IsFromSourceModule)\n                            {\n                                arg0 = srcSymbol.Locations.First().SourceTree.FilePath;\n                            }\n                            else\n                            {\n                                Debug.Assert(best.IsFromAddedModule);\n                                arg0 = srcSymbol.ContainingModule;\n                            }\n\n                            //if names match, arities match, and containing symbols match (recursively), ...\n                            if (NameAndArityMatchRecursively(srcSymbol, mdSymbol))\n                            {\n                                if (srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisNsAgg: The namespace '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the namespace defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisNsAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.Namespace)\n                                {\n                                    // ErrorCode.WRN_SameFullNameThisAggNs: The type '{1}' in '{0}' conflicts with the imported namespace '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggNs, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        GetContainingAssembly(mdSymbol),\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else if (srcSymbol.Kind == SymbolKind.NamedType && mdSymbol.Kind == SymbolKind.NamedType)\n                                {\n                                    // WRN_SameFullNameThisAggAgg: The type '{1}' in '{0}' conflicts with the imported type '{3}' in '{2}'. Using the type defined in '{0}'.\n                                    diagnostics.Add(ErrorCode.WRN_SameFullNameThisAggAgg, where.Location, originalSymbols,\n                                        arg0,\n                                        srcSymbol,\n                                        mdSymbol.ContainingAssembly,\n                                        mdSymbol);\n\n                                    return originalSymbols[best.Index];\n                                }\n                                else\n                                {\n                                    // namespace would be merged with the source namespace:\n                                    Debug.Assert(!(srcSymbol.Kind == SymbolKind.Namespace && mdSymbol.Kind == SymbolKind.Namespace));\n                                }\n                            }\n                        }\n\n                        var first = symbols[best.Index];\n                        var second = symbols[secondBest.Index];\n\n                        Debug.Assert(!Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything) || options.IsAttributeTypeLookup(),\n                            'This kind of ambiguity is only possible for attributes.');\n\n                        Debug.Assert(!Symbol.Equals(first, second, TypeCompareKind.ConsiderEverything) || !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                            'Why does the LookupResult contain the same symbol twice?');\n\n                        CSDiagnosticInfo info;\n                        bool reportError;\n\n                        //if names match, arities match, and containing symbols match (recursively), ...\n                        if (first != second &&\n                            NameAndArityMatchRecursively(first, second))\n                        {\n                            // suppress reporting the error if we found multiple symbols from source module\n                            // since an error has already been reported from the declaration\n                            reportError = !(best.IsFromSourceModule && secondBest.IsFromSourceModule);\n\n                            if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.NamedType)\n                            {\n                                if (first.OriginalDefinition == second.OriginalDefinition)\n                                {\n                                    // We imported different generic instantiations of the same generic type\n                                    // and have an ambiguous reference to a type nested in it\n                                    reportError = true;\n\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                                else\n                                {\n                                    Debug.Assert(!best.IsFromCorLibrary);\n\n                                    // ErrorCode.ERR_SameFullNameAggAgg: The type '{1}' exists in both '{0}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameAggAgg, originalSymbols,\n                                        new object[] { first.ContainingAssembly, first, second.ContainingAssembly });\n\n                                    // Do not report this error if the first is declared in source and the second is declared in added module,\n                                    // we already reported declaration error about this name collision.\n                                    // Do not report this error if both are declared in added modules,\n                                    // we will report assembly level declaration error about this name collision.\n                                    if (secondBest.IsFromAddedModule)\n                                    {\n                                        Debug.Assert(best.IsFromCompilation);\n                                        reportError = false;\n                                    }\n                                    else if (this.Flags.Includes(BinderFlags.IgnoreCorLibraryDuplicatedTypes) &&\n                                        secondBest.IsFromCorLibrary)\n                                    {\n                                        // Ignore duplicate types from the cor library if necessary.\n                                        // (Specifically the framework assemblies loaded at runtime in\n                                        // the EE may contain types also available from mscorlib.dll.)\n                                        return first;\n                                    }\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.Namespace && second.Kind == SymbolKind.NamedType)\n                            {\n                                // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                    new object[] { GetContainingAssembly(first), first, second.ContainingAssembly, second });\n\n                                // Do not report this error if namespace is declared in source and the type is declared in added module,\n                                // we already reported declaration error about this name collision.\n                                if (best.IsFromSourceModule && secondBest.IsFromAddedModule)\n                                {\n                                    reportError = false;\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.NamedType && second.Kind == SymbolKind.Namespace)\n                            {\n                                if (!secondBest.IsFromCompilation || secondBest.IsFromSourceModule)\n                                {\n                                    // ErrorCode.ERR_SameFullNameNsAgg: The namespace '{1}' in '{0}' conflicts with the type '{3}' in '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameNsAgg, originalSymbols,\n                                        new object[] { GetContainingAssembly(second), second, first.ContainingAssembly, first });\n                                }\n                                else\n                                {\n                                    Debug.Assert(secondBest.IsFromAddedModule);\n\n                                    // ErrorCode.ERR_SameFullNameThisAggThisNs: The type '{1}' in '{0}' conflicts with the namespace '{3}' in '{2}'\n                                    object arg0;\n\n                                    if (best.IsFromSourceModule)\n                                    {\n                                        arg0 = first.Locations.First().SourceTree.FilePath;\n                                    }\n                                    else\n                                    {\n                                        Debug.Assert(best.IsFromAddedModule);\n                                        arg0 = first.ContainingModule;\n                                    }\n\n                                    ModuleSymbol arg2 = second.ContainingModule;\n\n                                    // Merged namespaces that span multiple modules don't have a containing module,\n                                    // so just use module with the smallest ordinal from the containing assembly.\n                                    if ((object)arg2 == null)\n                                    {\n                                        foreach (NamespaceSymbol ns in ((NamespaceSymbol)second).ConstituentNamespaces)\n                                        {\n                                            if (ns.ContainingAssembly == Compilation.Assembly)\n                                            {\n                                                ModuleSymbol module = ns.ContainingModule;\n\n                                                if ((object)arg2 == null || arg2.Ordinal > module.Ordinal)\n                                                {\n                                                    arg2 = module;\n                                                }\n                                            }\n                                        }\n                                    }\n\n                                    Debug.Assert(arg2.ContainingAssembly == Compilation.Assembly);\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_SameFullNameThisAggThisNs, originalSymbols,\n                                        new object[] { arg0, first, arg2, second });\n                                }\n                            }\n                            else if (first.Kind == SymbolKind.RangeVariable && second.Kind == SymbolKind.RangeVariable)\n                            {\n                                // We will already have reported a conflicting range variable declaration.\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                            else\n                            {\n                                // TODO: this is not an appropriate error message here, but used as a fallback until the\n                                // appropriate diagnostics are implemented.\n                                // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                //info = diagnostics.Add(ErrorCode.ERR_AmbigContext, location, readOnlySymbols,\n                                //    whereText,\n                                //    first,\n                                //    second);\n\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n\n                                reportError = true;\n                            }\n                        }\n                        else\n                        {\n                            Debug.Assert(originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name ||\n                                         !Symbol.Equals(originalSymbols[best.Index], originalSymbols[secondBest.Index], TypeCompareKind.ConsiderEverything),\n                                'Why was the lookup result viable if it contained non-equal symbols with the same name?');\n\n                            reportError = true;\n\n                            if (first is NamespaceOrTypeSymbol && second is NamespaceOrTypeSymbol)\n                            {\n                                if (options.IsAttributeTypeLookup() &&\n                                    first.Kind == SymbolKind.NamedType &&\n                                    second.Kind == SymbolKind.NamedType &&\n                                    originalSymbols[best.Index].Name != originalSymbols[secondBest.Index].Name && // Use alias names, if available.\n                                    Compilation.IsAttributeType((NamedTypeSymbol)first) &&\n                                    Compilation.IsAttributeType((NamedTypeSymbol)second))\n                                {\n                                    //  SPEC:   If an attribute class is found both with and without Attribute suffix, an ambiguity\n                                    //  SPEC:   is present, and a compile-time error results.\n\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbiguousAttribute, originalSymbols,\n                                        // LAFHIS\n                                        new object[] { ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName, first, second });\n                                }\n                                else\n                                {\n                                    // '{0}' is an ambiguous reference between '{1}' and '{2}'\n                                    info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigContext, originalSymbols,\n                                        new object[] {\n                                            // LAFHIS\n                                        ((where is NameSyntax) ? ((NameSyntax)where).ErrorDisplayName() : null) ?? simpleName,\n                                        new FormattedSymbol(first, SymbolDisplayFormat.CSharpErrorMessageFormat),\n                                        new FormattedSymbol(second, SymbolDisplayFormat.CSharpErrorMessageFormat) });\n                                }\n                            }\n                            else\n                            {\n                                // CS0229: Ambiguity between '{0}' and '{1}'\n                                info = new CSDiagnosticInfo(ErrorCode.ERR_AmbigMember, originalSymbols,\n                                    new object[] { first, second });\n                            }\n                        }\n\n                        wasError = true;\n\n                        if (reportError)\n                        {\n                            diagnostics.Add(info, where.Location);\n                        }\n\n                        return new ExtendedErrorTypeSymbol(\n                            GetContainingNamespaceOrType(originalSymbols[0]),\n                            originalSymbols,\n                            LookupResultKind.Ambiguous,\n                            info,\n                            arity);\n                    }\n                    else\n                    {\n                        // Single viable result.\n                        var singleResult = symbols[0];\n\n                        // Cannot reference System.Void directly.\n                        var singleType = singleResult as TypeSymbol;\n                        if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        }\n\n                        return singleResult;\n                    } 689195"];
2626 [label="var singleResult = symbols[0]; 689196"];
2627 [label="var singleType = singleResult as TypeSymbol; 689197"];
2628 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 689198"];
2629 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 689199"];
2630 [label="if ((object)singleType != null && singleType.PrimitiveTypeCode == Cci.PrimitiveTypeCode.Void && simpleName == 'Void')\n                        {\n                            wasError = true;\n                            var errorInfo = new CSDiagnosticInfo(ErrorCode.ERR_SystemVoid);\n                            diagnostics.Add(errorInfo, where.Location);\n                            singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(singleResult), singleResult, LookupResultKind.NotReferencable, errorInfo); // UNDONE: Review resultkind.\n                        }\n                        // Check for bad symbol.\n                        else\n                        {\n                            if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            }\n\n                            if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            }\n                        } 689200"];
2631 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 689201"];
2632 [label="if (singleResult.Kind == SymbolKind.NamedType &&\n                                ((SourceModuleSymbol)this.Compilation.SourceModule).AnyReferencedAssembliesAreLinked)\n                            {\n                                // Complain about unembeddable types from linked assemblies.\n                                Emit.NoPia.EmbeddedTypesManager.IsValidEmbeddableType((NamedTypeSymbol)singleResult, where, diagnostics);\n                            } 689202"];
2633 [label="if (!suppressUseSiteDiagnostics)\n                            {\n                                wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where);\n                            }\n                            else if (singleResult.Kind == SymbolKind.ErrorType)\n                            {\n                                // We want to report ERR_CircularBase error on the spot to make sure\n                                // that the right location is used for it.\n                                var errorType = (ErrorTypeSymbol)singleResult;\n\n                                if (errorType.Unreported)\n                                {\n                                    DiagnosticInfo errorInfo = errorType.ErrorInfo;\n\n                                    if (errorInfo != null && errorInfo.Code == (int)ErrorCode.ERR_CircularBase)\n                                    {\n                                        wasError = true;\n                                        diagnostics.Add(errorInfo, where.Location);\n                                        singleResult = new ExtendedErrorTypeSymbol(GetContainingNamespaceOrType(errorType), errorType.Name, errorType.Arity, errorInfo, unreported: false);\n                                    }\n                                }\n                            } 689203"];
2634 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 689204"];
2635 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 689205"];
2636 [label="wasError = ReportUseSiteDiagnostics(singleResult, diagnostics, where); 689206"];
2637 [label="ReportUseSiteDiagnostics(singleResult, diagnostics, where) 689207"];
2638 [label="param ReportUseSiteDiagnostics(Symbol symbol) 689208"];
2639 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 689209"];
2640 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 689210"];
2641 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 689211"];
2642 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 689212"];
2643 [label="return singleResult; 689213"];
2644 [label="if (symbol.Kind == SymbolKind.NamedType)\n            {\n                CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics);\n            } 689214"];
2645 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 689215"];
2646 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 689216"];
2647 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 689217"];
2648 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics); 689218"];
2649 [label="CheckRuntimeSupportForSymbolAccess(where, receiverOpt: null, symbol, diagnostics) 689219"];
2650 [label="param CheckRuntimeSupportForSymbolAccess(SyntaxNode node) 689220"];
2651 [label="param CheckRuntimeSupportForSymbolAccess(BoundExpression receiverOpt) 689221"];
2652 [label="param CheckRuntimeSupportForSymbolAccess(Symbol symbol) 689222"];
2653 [label="param CheckRuntimeSupportForSymbolAccess(DiagnosticBag diagnostics) 689223"];
2654 [label="param CheckRuntimeSupportForSymbolAccess(this) 689224"];
2655 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 689225"];
2656 [label="if (symbol.ContainingType?.IsInterface == true && !Compilation.Assembly.RuntimeSupportsDefaultInterfaceImplementation && Compilation.SourceModule != symbol.ContainingModule)\n            {\n                if (!symbol.IsStatic && !(symbol is TypeSymbol) &&\n                    !symbol.IsImplementableInterfaceMember())\n                {\n                    Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation, node);\n                }\n                else\n                {\n                    switch (symbol.DeclaredAccessibility)\n                    {\n                        case Accessibility.Protected:\n                        case Accessibility.ProtectedOrInternal:\n                        case Accessibility.ProtectedAndInternal:\n\n                            Error(diagnostics, ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember, node);\n                            break;\n                    }\n                }\n            } 689226"];
2657 [label="return symbol; 689227"];
2658 [label="if (bindingResult.Kind == SymbolKind.Alias)\n                {\n                    var aliasTarget = ((AliasSymbol)bindingResult).GetAliasTarget(basesBeingResolved);\n                    if (aliasTarget.Kind == SymbolKind.NamedType && ((NamedTypeSymbol)aliasTarget).ContainsDynamic())\n                    {\n                        ReportUseSiteDiagnosticForDynamic(diagnostics, node);\n                    }\n                } 689228"];
2659 [label="result.Free() 689229"];
2660 [label="param Free(this) 689230"];
2661 [label="this.Clear() 689231"];
2662 [label="param Clear(this) 689232"];
2663 [label="_kind 689233"];
2664 [label="_symbolList.Clear(); 689234"];
2665 [label="_error = null; 689235"];
2666 [label="_error 689236"];
2667 [label="this.Clear(); 689237"];
2668 [label="if (_pool != null)\n            {\n                _pool.Free(this);\n            } 689238"];
2669 [label="result.Free(); 689239"];
2670 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 689240"];
2671 [label="AreNullableAnnotationsEnabled(node.Identifier) 689241"];
2672 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 689242"];
2673 [label="param AreNullableAnnotationsEnabled(this) 689243"];
2674 [label="return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult); 689244"];
2675 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(AreNullableAnnotationsEnabled(node.Identifier), bindingResult) 689245"];
2676 [label="param CreateUnannotated(bool isNullableEnabled) 689246"];
2677 [label="param CreateUnannotated(Symbol symbol) 689247"];
2678 [label="if (symbol is null)\n                {\n                    return default;\n                } 689248"];
2679 [label="var type = symbol as TypeSymbol; 689249"];
2680 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 689250"];
2681 [label="type is null 689251"];
2682 [label="return type is null ?\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(symbol, isNullableEnabled) :\n                    new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)); 689252"];
2683 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations.Create(isNullableEnabled, type)) 689253"];
2684 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 689254"];
2685 [label="Debug.Assert(typeWithAnnotations.HasType); 689255"];
2686 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 689256"];
2687 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 689257"];
2688 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 689258"];
2689 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 689259"];
2690 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 689260"];
2691 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 689261"];
2692 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 689262"];
2693 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 689263"];
2694 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 689264"];
2695 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 689265"];
2696 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 689266"];
2697 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 689267"];
2698 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 689268"];
2699 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 689269"];
2700 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 689270"];
2701 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 689271"];
2702 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 689272"];
2703 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 689273"];
2704 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 689274"];
2705 [label="RoslynDebug.Assert(diagnostics != null); 689275"];
2706 [label="RoslynDebug.Assert(diagnostics != null); 689276"];
2707 [label="DiagnosticInfo? info = null; 689277"];
2708 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 689278"];
2709 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 689279"];
2710 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 689280"];
2711 [label="return kind; 689281"];
2712 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 689282"];
2713 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 689283"];
2714 [label="=> _symbol?.Kind == SymbolKind.Alias 689284"];
2715 [label="_symbol 689285"];
2716 [label="_symbol?.Kind == SymbolKind.Alias 689286"];
2717 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 689287"];
2718 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 689288"];
2719 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 689289"];
2720 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 689290"];
2721 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 689291"];
2722 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 689292"];
2723 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 689293"];
2724 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 689294"];
2725 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 689295"];
2726 [label="param ValidateNameConflictsInScope(Symbol? symbol) 689296"];
2727 [label="param ValidateNameConflictsInScope(Location location) 689297"];
2728 [label="param ValidateNameConflictsInScope(string name) 689298"];
2729 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 689299"];
2730 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 689300"];
2731 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 689301"];
2732 [label="var scope = binder as LocalScopeBinder; 689302"];
2733 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 689303"];
2734 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 689304"];
2735 [label="binder.IsNestedFunctionBinder 689305"];
2736 [label="=> false 689306"];
2737 [label="false 689307"];
2738 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 689308"];
2739 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 689309"];
2740 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 689310"];
2741 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 689311"];
2742 [label="return false; 689312"];
2743 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 689313"];
2744 [label="pNames?.Free(); 689314"];
2745 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 689315"];
2746 [label="param GetSpecialType(DiagnosticBag diagnostics) 689316"];
2747 [label="param GetSpecialType(SyntaxNode node) 689317"];
2748 [label="param GetSpecialType(DiagnosticBag diagnostics) 689318"];
2749 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 689319"];
2750 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 689320"];
2751 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 689321"];
2752 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 689322"];
2753 [label="Debug.Assert(typeWithAnnotations.HasType); 689323"];
2754 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 689324"];
2755 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 689325"];
2756 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 689326"];
2757 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 689327"];
2758 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 689328"];
2759 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 689329"];
2760 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 689330"];
2761 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 689331"];
2762 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 689332"];
2763 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 689333"];
2764 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 689334"];
2765 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 689335"];
2766 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 689336"];
2767 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 689337"];
2768 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 689338"];
2769 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 689339"];
2770 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 689340"];
2771 [label="RoslynDebug.Assert(diagnostics != null); 689341"];
2772 [label="RoslynDebug.Assert(diagnostics != null); 689342"];
2773 [label="DiagnosticInfo? info = null; 689343"];
2774 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 689344"];
2775 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 689345"];
2776 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 689346"];
2777 [label="return kind; 689347"];
2778 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 689348"];
2779 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 689349"];
2780 [label="=> _symbol?.Kind == SymbolKind.Alias 689350"];
2781 [label="_symbol 689351"];
2782 [label="_symbol?.Kind == SymbolKind.Alias 689352"];
2783 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 689353"];
2784 [label="Debug.Assert(node != null); 689354"];
2785 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 689355"];
2786 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 689356"];
2787 [label="SourceMemberMethodSymbol method = null; 689357"];
2788 [label="if (usage != NodeUsage.Normal && methodDecl.TypeParameterList != null)\n                    {\n                        method = GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new WithMethodTypeParametersBinder(method, resultBinder);\n                    } 689358"];
2789 [label="if (usage == NodeUsage.MethodBody)\n                    {\n                        method = method ?? GetMethodSymbol(methodDecl, resultBinder);\n                        resultBinder = new InMethodBinder(method, resultBinder);\n                    } 689359"];
2790 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 689360"];
2791 [label="param Includes(this BinderFlags self) 689361"];
2792 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 689362"];
2793 [label="param Includes(this BinderFlags self) 689363"];
2794 [label="param GetSpecialType(DiagnosticBag diagnostics) 689364"];
2795 [label="param GetSpecialType(SyntaxNode node) 689365"];
2796 [label="param GetSpecialType(DiagnosticBag diagnostics) 689366"];
2797 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 689367"];
2798 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 689368"];
2799 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 689369"];
2800 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 689370"];
2801 [label="Debug.Assert(typeWithAnnotations.HasType); 689371"];
2802 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 689372"];
2803 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 689373"];
2804 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 689374"];
2805 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 689375"];
2806 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 689376"];
2807 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 689377"];
2808 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 689378"];
2809 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 689379"];
2810 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 689380"];
2811 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 689381"];
2812 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 689382"];
2813 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 689383"];
2814 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 689384"];
2815 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 689385"];
2816 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 689386"];
2817 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 689387"];
2818 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 689388"];
2819 [label="RoslynDebug.Assert(diagnostics != null); 689389"];
2820 [label="RoslynDebug.Assert(diagnostics != null); 689390"];
2821 [label="DiagnosticInfo? info = null; 689391"];
2822 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 689392"];
2823 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 689393"];
2824 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 689394"];
2825 [label="return kind; 689395"];
2826 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 689396"];
2827 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 689397"];
2828 [label="=> _symbol?.Kind == SymbolKind.Alias 689398"];
2829 [label="_symbol 689399"];
2830 [label="_symbol?.Kind == SymbolKind.Alias 689400"];
2831 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 689401"];
2832 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 689402"];
2833 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 689403"];
2834 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 689404"];
2835 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 689405"];
2836 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 689406"];
2837 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 689407"];
2838 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 689408"];
2839 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 689409"];
2840 [label="param ValidateNameConflictsInScope(Symbol? symbol) 689410"];
2841 [label="param ValidateNameConflictsInScope(Location location) 689411"];
2842 [label="param ValidateNameConflictsInScope(string name) 689412"];
2843 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 689413"];
2844 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 689414"];
2845 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 689415"];
2846 [label="var scope = binder as LocalScopeBinder; 689416"];
2847 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 689417"];
2848 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 689418"];
2849 [label="binder.IsNestedFunctionBinder 689419"];
2850 [label="=> false 689420"];
2851 [label="false 689421"];
2852 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 689422"];
2853 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 689423"];
2854 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 689424"];
2855 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 689425"];
2856 [label="return false; 689426"];
2857 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 689427"];
2858 [label="pNames?.Free(); 689428"];
2859 [label="param GetSpecialType(SyntaxNode node) 689429"];
2860 [label="param GetSpecialType(DiagnosticBag diagnostics) 689430"];
2861 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 689431"];
2862 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 689432"];
2863 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 689433"];
2864 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 689434"];
2865 [label="Debug.Assert(typeWithAnnotations.HasType); 689435"];
2866 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 689436"];
2867 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 689437"];
2868 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 689438"];
2869 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 689439"];
2870 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 689440"];
2871 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 689441"];
2872 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 689442"];
2873 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 689443"];
2874 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 689444"];
2875 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 689445"];
2876 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 689446"];
2877 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 689447"];
2878 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 689448"];
2879 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 689449"];
2880 [label="RoslynDebug.Assert(diagnostics != null); 689450"];
2881 [label="RoslynDebug.Assert(diagnostics != null); 689451"];
2882 [label="DiagnosticInfo? info = null; 689452"];
2883 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 689453"];
2884 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 689454"];
2885 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 689455"];
2886 [label="return kind; 689456"];
2887 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 689457"];
2888 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 689458"];
2889 [label="param TypeConversions(AssemblySymbol corLibrary) 689459"];
2890 [label="param TypeConversions(bool includeNullability = false) 689460"];
2891 [label="param TypeConversions(this) 689461"];
2892 [label="corLibrary 689462"];
2893 [label="0 689463"];
2894 [label="includeNullability 689464"];
2895 [label="null 689465"];
2896 [label="param TypeConversions(this) 689466"];
2897 [label="param TypeConversions(AssemblySymbol corLibrary) 689467"];
2898 [label="param TypeConversions(int currentRecursionDepth) 689468"];
2899 [label="param TypeConversions(bool includeNullability) 689469"];
2900 [label="param TypeConversions(TypeConversions otherNullabilityOpt) 689470"];
2901 [label="param TypeConversions(this) 689471"];
2902 [label="corLibrary 689472"];
2903 [label="currentRecursionDepth 689473"];
2904 [label="includeNullability 689474"];
2905 [label="otherNullabilityOpt 689475"];
2906 [label="param TypeConversions(this) 689476"];
2907 [label="param ConversionsBase(AssemblySymbol corLibrary) 689477"];
2908 [label="param ConversionsBase(int currentRecursionDepth) 689478"];
2909 [label="param ConversionsBase(bool includeNullability) 689479"];
2910 [label="param ConversionsBase(ConversionsBase otherNullabilityOpt) 689480"];
2911 [label="param ConversionsBase(this) 689481"];
2912 [label="corLibrary 689482"];
2913 [label="currentRecursionDepth 689483"];
2914 [label="IncludeNullability 689484"];
2915 [label="_lazyOtherNullability 689485"];
2916 [label="Debug.Assert((object)corLibrary != null); 689486"];
2917 [label="Debug.Assert((object)corLibrary != null); 689487"];
2918 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 689488"];
2919 [label="Debug.Assert(otherNullabilityOpt == null || includeNullability != otherNullabilityOpt.IncludeNullability); 689489"];
2920 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 689490"];
2921 [label="Debug.Assert(otherNullabilityOpt == null || currentRecursionDepth == otherNullabilityOpt.currentRecursionDepth); 689491"];
2922 [label="this.corLibrary 689492"];
2923 [label="this.currentRecursionDepth 689493"];
2924 [label="IncludeNullability 689494"];
2925 [label="_lazyOtherNullability 689495"];
2926 [label="var diagnostics = c.GetDiagnostics(); 689496"];
2927 [label="diagnostics.Verify(expected); 689497"];
2928 [label="diagnostics.Verify(expected); 689498"];
2929 [label="diagnostics.Verify(expected) 689499"];
2930 [label="param Verify(this ImmutableArray<Diagnostic> actual) 689500"];
2931 [label="param Verify(params DiagnosticDescription[] expected) 689501"];
2932 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 689502"];
2933 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 689503"];
2934 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 689504"];
2935 [label="param Verify(this IEnumerable<Diagnostic> actual) 689505"];
2936 [label="param Verify(params DiagnosticDescription[] expected) 689506"];
2937 [label="Verify(actual, expected, errorCodeOnly: false); 689507"];
2938 [label="Verify(actual, expected, errorCodeOnly: false); 689508"];
2939 [label="Verify(actual, expected, errorCodeOnly: false); 689509"];
2940 [label="Verify(actual, expected, errorCodeOnly: false) 689510"];
2941 [label="param Verify(IEnumerable<Diagnostic> actual) 689511"];
2942 [label="param Verify(DiagnosticDescription[] expected) 689512"];
2943 [label="param Verify(bool errorCodeOnly) 689513"];
2944 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 689514"];
2945 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 689515"];
2946 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 689516"];
2947 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 689517"];
2948 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 689518"];
2949 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 689519"];
2950 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 689520"];
2951 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 689521"];
2952 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 689522"];
2953 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 689523"];
2954 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 689524"];
2955 [label="{ } 689525"];
2956 [label="None = { } 689526"];
2957 [label="null 689527"];
2958 [label="Any = null 689528"];
2959 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 689529"];
2960 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 689530"];
2961 [label="DiagnosticDescription.GetAssertText(expected, actual) 689531"];
2962 [label="param GetAssertText(DiagnosticDescription[] expected) 689532"];
2963 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 689533"];
2964 [label="const int CSharp = 1; 689534"];
2965 [label="const int VisualBasic = 2; 689535"];
2966 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 689536"];
2967 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 689537"];
2968 [label="actual.Any() && actual.First() is CSDiagnostic 689538"];
2969 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 689539"];
2970 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 689540"];
2971 [label="int indentDepth = (language == CSharp) ? 4 : 1; 689541"];
2972 [label="(language == CSharp) 689542"];
2973 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 689543"];
2974 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 689544"];
2975 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 689545"];
2976 [label="IsSortedOrEmpty(expected) 689546"];
2977 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 689547"];
2978 [label="new LinePositionComparer() 689548"];
2979 [label="param LinePositionComparer(this) 689549"];
2980 [label="Instance = new LinePositionComparer() 689550"];
2981 [label="var comparer = LinePositionComparer.Instance; 689551"];
2982 [label="DiagnosticDescription last = null; 689552"];
2983 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 689553"];
2984 [label="return true; 689554"];
2985 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 689555"];
2986 [label="actual = Sort(actual); 689556"];
2987 [label="Sort(actual) 689557"];
2988 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 689558"];
2989 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 689559"];
2990 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 689560"];
2991 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 689561"];
2992 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 689562"];
2993 [label="var assertText = new StringBuilder(); 689563"];
2994 [label="assertText.AppendLine(); 689564"];
2995 [label="int i; 689565"];
2996 [label="assertText.AppendLine('Expected:'); 689566"];
2997 [label="assertText.AppendLine('Expected:'); 689567"];
2998 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 689568"];
2999 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 689569"];
3000 [label="GetCommaSeparatedLines(assertText, expectedText); 689570"];
3001 [label="GetCommaSeparatedLines(assertText, expectedText); 689571"];
3002 [label="GetCommaSeparatedLines(assertText, expectedText) 689572"];
3003 [label="param GetCommaSeparatedLines(StringBuilder sb) 689573"];
3004 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 689574"];
3005 [label="int n = lines.Count; 689575"];
3006 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 689576"];
3007 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 689577"];
3008 [label="GetCommaSeparatedLines(assertText, expectedText); 689578"];
3009 [label="assertText.AppendLine('Actual:'); 689579"];
3010 [label="assertText.AppendLine('Actual:'); 689580"];
3011 [label="var actualText = ArrayBuilder<string>.GetInstance(); 689581"];
3012 [label="var e = actual.GetEnumerator(); 689582"];
3013 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 689583"];
3014 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 689584"];
3015 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 689585"];
3016 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 689586"];
3017 [label="assertText.AppendLine('Diff:'); 689587"];
3018 [label="assertText.AppendLine('Diff:'); 689588"];
3019 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 689589"];
3020 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 689590"];
3021 [label="new[] { '\\r', '\\n' } 689591"];
3022 [label="'\\r' 689592"];
3023 [label="'\\n' 689593"];
3024 [label="new[] { '\\r', '\\n' } 689594"];
3025 [label="new[] { '\\r', '\\n' } 689595"];
3026 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 689596"];
3027 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 689597"];
3028 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 689598"];
3029 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 689599"];
3030 [label="param DiffReport(IEnumerable<T> expected) 689600"];
3031 [label="param DiffReport(IEnumerable<T> actual) 689601"];
3032 [label="param DiffReport(string separator) 689602"];
3033 [label="param DiffReport(IEqualityComparer<T> comparer = null) 689603"];
3034 [label="param DiffReport(Func<T, string> toString = null) 689604"];
3035 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 689605"];
3036 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 689606"];
3037 [label="(comparer != null) 689607"];
3038 [label="EqualityComparer<T>.Default 689608"];
3039 [label="new LCS<T>(EqualityComparer<T>.Default) 689609"];
3040 [label="param LCS(IEqualityComparer<T> comparer) 689610"];
3041 [label="param LCS(this) 689611"];
3042 [label="1 689612"];
3043 [label="DeleteCost = 1 689613"];
3044 [label="1 689614"];
3045 [label="InsertCost = 1 689615"];
3046 [label="2 689616"];
3047 [label="UpdateCost = 2 689617"];
3048 [label="param LongestCommonSubsequence(this) 689618"];
3049 [label="_comparer 689619"];
3050 [label="_comparer 689620"];
3051 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 689621"];
3052 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 689622"];
3053 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 689623"];
3054 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 689624"];
3055 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 689625"];
3056 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 689626"];
3057 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 689627"];
3058 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 689628"];
3059 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 689629"];
3060 [label="lcs.CalculateDiff(expectedList, actualList, toString) 689630"];
3061 [label="param CalculateDiff(IList<T> sequenceA) 689631"];
3062 [label="param CalculateDiff(IList<T> sequenceB) 689632"];
3063 [label="param CalculateDiff(Func<T, string> toString) 689633"];
3064 [label="param CalculateDiff(this) 689634"];
3065 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 689635"];
3066 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 689636"];
3067 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 689637"];
3068 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 689638"];
3069 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 689639"];
3070 [label="param GetEdits(TSequence sequenceA) 689640"];
3071 [label="param GetEdits(int lengthA) 689641"];
3072 [label="param GetEdits(TSequence sequenceB) 689642"];
3073 [label="param GetEdits(int lengthB) 689643"];
3074 [label="param GetEdits(this) 689644"];
3075 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 689645"];
3076 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 689646"];
3077 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 689647"];
3078 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 689648"];
3079 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 689649"];
3080 [label="param ComputeCostMatrix(TSequence sequenceA) 689650"];
3081 [label="param ComputeCostMatrix(int lengthA) 689651"];
3082 [label="param ComputeCostMatrix(TSequence sequenceB) 689652"];
3083 [label="param ComputeCostMatrix(int lengthB) 689653"];
3084 [label="param ComputeCostMatrix(this) 689654"];
3085 [label="var la = lengthA + 1; 689655"];
3086 [label="var la = lengthA + 1; 689656"];
3087 [label="var lb = lengthB + 1; 689657"];
3088 [label="var lb = lengthB + 1; 689658"];
3089 [label="var d = new int[la, lb]; 689659"];
3090 [label="d[0, 0] = 0; 689660"];
3091 [label="d[0, 0] 689661"];
3092 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 689662"];
3093 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 689663"];
3094 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 689664"];
3095 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 689665"];
3096 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 689666"];
3097 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 689667"];
3098 [label="return d; 689668"];
3099 [label="int i = lengthA; 689669"];
3100 [label="int j = lengthB; 689670"];
3101 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 689671"];
3102 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 689672"];
3103 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 689673"];
3104 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 689674"];
3105 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 689675"];
3106 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 689676"];
3107 [label="param GetEdits(this) 689677"];
3108 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 689678"];
3109 [label="param CalculateDiff(this) 689679"];
3110 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 689680"];
3111 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 689681"];
3112 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 689682"];
3113 [label="actualText.Free(); 689683"];
3114 [label="expectedText.Free(); 689684"];
3115 [label="return assertText.ToString(); 689685"];
3116 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 689686"];
3117 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 689687"];
3118 [label="diagnostics.Verify(expected); 689688"];
3119 [label="VerifyAssemblyIds(c, diagnostics); 689689"];
3120 [label="VerifyAssemblyIds(c, diagnostics); 689690"];
3121 [label="VerifyAssemblyIds(c, diagnostics) 689691"];
3122 [label="param VerifyAssemblyIds(TCompilation c) 689692"];
3123 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 689693"];
3124 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 689694"];
3125 [label="VerifyAssemblyIds(c, diagnostics); 689695"];
3126 [label="return c; 689696"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
10 -> 3;
12 -> 11;
14 -> 13;
16 -> 15;
18 -> 17;
20 -> 19;
22 -> 21;
24 -> 23;
26 -> 25;
28 -> 27;
30 -> 29;
32 -> 31;
34 -> 33;
36 -> 35;
38 -> 37;
40 -> 39;
42 -> 41;
44 -> 43;
46 -> 45;
48 -> 47;
49 -> 0;
50 -> 0;
51 -> 49;
51 -> 50;
51 -> 0;
52 -> 51;
53 -> 0;
54 -> 0;
55 -> 53;
55 -> 54;
55 -> 51;
56 -> 55;
57 -> 0;
58 -> 57;
59 -> 58;
59 -> 57;
60 -> 59;
62 -> 0;
63 -> 61;
63 -> 62;
64 -> 63;
65 -> 0;
66 -> 0;
67 -> 65;
67 -> 66;
67 -> 0;
68 -> 67;
69 -> 0;
70 -> 0;
71 -> 69;
71 -> 70;
71 -> 55;
72 -> 71;
73 -> 0;
74 -> 0;
75 -> 73;
75 -> 74;
75 -> 71;
76 -> 75;
77 -> 0;
78 -> 0;
79 -> 77;
79 -> 78;
79 -> 75;
80 -> 79;
81 -> 0;
82 -> 0;
83 -> 81;
83 -> 82;
83 -> 0;
84 -> 83;
85 -> 0;
86 -> 0;
87 -> 85;
87 -> 86;
87 -> 0;
88 -> 87;
89 -> 0;
90 -> 0;
91 -> 89;
91 -> 90;
91 -> 0;
92 -> 91;
93 -> 0;
94 -> 0;
95 -> 93;
95 -> 94;
95 -> 79;
96 -> 95;
97 -> 0;
98 -> 0;
99 -> 97;
99 -> 98;
99 -> 0;
100 -> 99;
102 -> 0;
103 -> 101;
103 -> 102;
104 -> 103;
105 -> 0;
106 -> 0;
107 -> 105;
107 -> 106;
107 -> 95;
108 -> 107;
109 -> 0;
110 -> 0;
111 -> 109;
111 -> 110;
111 -> 0;
112 -> 111;
113 -> 0;
114 -> 0;
115 -> 113;
115 -> 114;
115 -> 0;
116 -> 115;
117 -> 0;
118 -> 0;
119 -> 117;
119 -> 118;
119 -> 0;
120 -> 119;
121 -> 0;
122 -> 0;
123 -> 121;
123 -> 122;
123 -> 0;
124 -> 123;
125 -> 0;
126 -> 0;
127 -> 125;
127 -> 126;
127 -> 0;
128 -> 127;
129 -> 0;
130 -> 0;
131 -> 129;
131 -> 130;
131 -> 107;
132 -> 131;
133 -> 0;
134 -> 0;
135 -> 133;
135 -> 134;
135 -> 131;
136 -> 135;
137 -> 0;
138 -> 0;
139 -> 137;
139 -> 138;
139 -> 135;
140 -> 139;
141 -> 0;
142 -> 0;
143 -> 141;
143 -> 142;
143 -> 139;
144 -> 143;
145 -> 0;
146 -> 0;
147 -> 145;
147 -> 146;
147 -> 0;
148 -> 147;
149 -> 0;
150 -> 0;
151 -> 149;
151 -> 150;
151 -> 0;
152 -> 151;
153 -> 0;
154 -> 0;
155 -> 153;
155 -> 154;
155 -> 143;
156 -> 155;
157 -> 0;
158 -> 0;
159 -> 157;
159 -> 158;
159 -> 0;
160 -> 159;
161 -> 0;
162 -> 0;
163 -> 161;
163 -> 162;
163 -> 0;
164 -> 163;
165 -> 0;
166 -> 0;
167 -> 165;
167 -> 166;
167 -> 0;
168 -> 167;
169 -> 0;
170 -> 0;
171 -> 169;
171 -> 170;
171 -> 155;
172 -> 171;
173 -> 0;
174 -> 0;
175 -> 173;
175 -> 174;
175 -> 0;
176 -> 175;
177 -> 0;
178 -> 0;
179 -> 177;
179 -> 178;
179 -> 0;
180 -> 179;
182 -> 181;
184 -> 182;
184 -> 183;
185 -> 184;
187 -> 0;
187 -> 186;
188 -> 187;
188 -> 0;
189 -> 188;
191 -> 190;
193 -> 192;
195 -> 194;
197 -> 196;
198 -> 10;
199 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 1;
202 -> 2;
202 -> 201;
203 -> 1;
204 -> 1;
205 -> 204;
205 -> 1;
206 -> 1;
207 -> 205;
207 -> 206;
208 -> 207;
208 -> 206;
209 -> 206;
210 -> 208;
210 -> 209;
211 -> 209;
212 -> 210;
212 -> 211;
212 -> 209;
213 -> 209;
213 -> 1;
214 -> 1;
215 -> 1;
216 -> 213;
216 -> 215;
217 -> 214;
217 -> 215;
218 -> 214;
218 -> 215;
219 -> 214;
219 -> 215;
220 -> 214;
220 -> 215;
221 -> 214;
221 -> 215;
222 -> 214;
222 -> 215;
223 -> 214;
223 -> 215;
224 -> 216;
224 -> 215;
225 -> 220;
225 -> 215;
226 -> 217;
226 -> 215;
227 -> 215;
228 -> 225;
228 -> 227;
229 -> 226;
229 -> 227;
230 -> 228;
230 -> 227;
231 -> 227;
232 -> 230;
232 -> 231;
233 -> 232;
233 -> 231;
234 -> 233;
235 -> 0;
235 -> 234;
236 -> 235;
237 -> 236;
238 -> 236;
239 -> 0;
239 -> 238;
240 -> 239;
240 -> 237;
240 -> 236;
241 -> 240;
241 -> 234;
242 -> 227;
243 -> 229;
243 -> 242;
243 -> 227;
244 -> 241;
244 -> 243;
245 -> 218;
245 -> 215;
246 -> 219;
246 -> 215;
247 -> 221;
247 -> 215;
248 -> 222;
248 -> 215;
249 -> 223;
249 -> 215;
250 -> 215;
251 -> 224;
251 -> 250;
252 -> 244;
252 -> 250;
253 -> 245;
253 -> 250;
254 -> 246;
254 -> 250;
255 -> 247;
255 -> 250;
256 -> 248;
256 -> 250;
257 -> 249;
257 -> 250;
258 -> 251;
258 -> 250;
259 -> 252;
259 -> 250;
260 -> 253;
260 -> 250;
261 -> 254;
261 -> 250;
262 -> 255;
262 -> 250;
263 -> 256;
263 -> 250;
264 -> 257;
264 -> 250;
265 -> 250;
266 -> 265;
266 -> 250;
267 -> 250;
268 -> 258;
268 -> 267;
269 -> 259;
269 -> 267;
270 -> 260;
270 -> 267;
271 -> 261;
271 -> 267;
272 -> 262;
272 -> 267;
273 -> 263;
273 -> 267;
274 -> 264;
274 -> 267;
275 -> 266;
275 -> 267;
276 -> 271;
276 -> 267;
277 -> 273;
277 -> 267;
278 -> 267;
279 -> 276;
279 -> 278;
280 -> 277;
280 -> 278;
281 -> 268;
281 -> 278;
282 -> 281;
282 -> 212;
282 -> 278;
283 -> 282;
284 -> 280;
284 -> 282;
285 -> 279;
285 -> 282;
286 -> 282;
287 -> 283;
287 -> 286;
288 -> 284;
288 -> 286;
289 -> 285;
289 -> 286;
290 -> 283;
290 -> 286;
291 -> 286;
292 -> 289;
292 -> 291;
292 -> 286;
293 -> 0;
294 -> 0;
296 -> 293;
296 -> 294;
296 -> 295;
297 -> 296;
298 -> 0;
299 -> 297;
299 -> 296;
299 -> 298;
300 -> 299;
301 -> 0;
302 -> 297;
302 -> 296;
302 -> 301;
303 -> 302;
304 -> 0;
305 -> 297;
305 -> 296;
305 -> 304;
306 -> 305;
307 -> 0;
308 -> 297;
308 -> 296;
308 -> 307;
309 -> 308;
310 -> 0;
311 -> 297;
311 -> 296;
311 -> 310;
312 -> 311;
313 -> 0;
314 -> 297;
314 -> 296;
314 -> 313;
315 -> 314;
316 -> 0;
317 -> 297;
317 -> 296;
317 -> 316;
318 -> 317;
319 -> 0;
320 -> 297;
320 -> 296;
320 -> 319;
321 -> 320;
322 -> 0;
323 -> 297;
323 -> 296;
323 -> 322;
324 -> 323;
325 -> 0;
326 -> 297;
326 -> 296;
326 -> 325;
327 -> 326;
328 -> 0;
329 -> 297;
329 -> 296;
329 -> 328;
330 -> 329;
331 -> 297;
334 -> 331;
334 -> 333;
335 -> 332;
335 -> 333;
336 -> 333;
337 -> 334;
337 -> 296;
337 -> 333;
338 -> 333;
339 -> 335;
339 -> 333;
340 -> 336;
340 -> 333;
341 -> 339;
341 -> 340;
341 -> 333;
342 -> 341;
342 -> 338;
342 -> 333;
343 -> 337;
343 -> 338;
343 -> 296;
343 -> 342;
343 -> 341;
343 -> 333;
344 -> 343;
345 -> 0;
346 -> 345;
348 -> 346;
348 -> 347;
349 -> 297;
349 -> 296;
349 -> 348;
350 -> 349;
351 -> 0;
352 -> 351;
353 -> 297;
353 -> 296;
353 -> 352;
354 -> 353;
355 -> 0;
356 -> 297;
356 -> 296;
356 -> 355;
357 -> 356;
358 -> 321;
360 -> 359;
361 -> 0;
362 -> 0;
363 -> 0;
365 -> 361;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 360;
367 -> 365;
367 -> 366;
367 -> 359;
368 -> 367;
372 -> 369;
372 -> 370;
372 -> 371;
373 -> 303;
373 -> 296;
373 -> 302;
373 -> 369;
373 -> 372;
374 -> 373;
375 -> 315;
376 -> 324;
377 -> 324;
378 -> 321;
379 -> 0;
380 -> 0;
382 -> 379;
382 -> 381;
383 -> 380;
383 -> 381;
384 -> 381;
385 -> 382;
385 -> 381;
386 -> 383;
386 -> 381;
387 -> 0;
387 -> 381;
388 -> 384;
388 -> 381;
389 -> 381;
390 -> 385;
390 -> 386;
390 -> 387;
390 -> 388;
390 -> 389;
390 -> 381;
391 -> 390;
392 -> 0;
393 -> 0;
395 -> 392;
395 -> 394;
396 -> 393;
396 -> 394;
397 -> 394;
398 -> 395;
398 -> 394;
399 -> 396;
399 -> 394;
400 -> 0;
400 -> 394;
401 -> 397;
401 -> 394;
402 -> 394;
403 -> 398;
403 -> 399;
403 -> 400;
403 -> 401;
403 -> 402;
403 -> 394;
404 -> 403;
406 -> 391;
406 -> 390;
406 -> 405;
407 -> 406;
409 -> 404;
409 -> 403;
409 -> 408;
410 -> 409;
411 -> 0;
412 -> 0;
414 -> 411;
414 -> 413;
415 -> 412;
415 -> 413;
416 -> 413;
417 -> 414;
417 -> 413;
418 -> 415;
418 -> 413;
419 -> 0;
419 -> 413;
420 -> 416;
420 -> 413;
421 -> 413;
422 -> 417;
422 -> 418;
422 -> 419;
422 -> 420;
422 -> 421;
422 -> 413;
423 -> 422;
424 -> 0;
425 -> 0;
427 -> 424;
427 -> 426;
428 -> 425;
428 -> 426;
429 -> 426;
430 -> 427;
430 -> 426;
431 -> 428;
431 -> 426;
432 -> 0;
432 -> 426;
433 -> 429;
433 -> 426;
434 -> 426;
435 -> 430;
435 -> 431;
435 -> 432;
435 -> 433;
435 -> 434;
435 -> 426;
436 -> 435;
437 -> 0;
438 -> 0;
440 -> 437;
440 -> 439;
441 -> 438;
441 -> 439;
442 -> 439;
443 -> 440;
443 -> 439;
444 -> 441;
444 -> 439;
445 -> 0;
445 -> 439;
446 -> 442;
446 -> 439;
447 -> 439;
448 -> 443;
448 -> 444;
448 -> 445;
448 -> 446;
448 -> 447;
448 -> 439;
449 -> 448;
450 -> 0;
451 -> 0;
453 -> 450;
453 -> 452;
454 -> 451;
454 -> 452;
455 -> 452;
456 -> 453;
456 -> 452;
457 -> 454;
457 -> 452;
458 -> 0;
458 -> 452;
459 -> 455;
459 -> 452;
460 -> 452;
461 -> 456;
461 -> 457;
461 -> 458;
461 -> 459;
461 -> 460;
461 -> 452;
462 -> 461;
463 -> 0;
464 -> 0;
466 -> 463;
466 -> 465;
467 -> 464;
467 -> 465;
468 -> 465;
469 -> 466;
469 -> 465;
470 -> 467;
470 -> 465;
471 -> 0;
471 -> 465;
472 -> 468;
472 -> 465;
473 -> 465;
474 -> 469;
474 -> 470;
474 -> 471;
474 -> 472;
474 -> 473;
474 -> 465;
475 -> 474;
476 -> 0;
477 -> 0;
479 -> 476;
479 -> 478;
480 -> 477;
480 -> 478;
481 -> 478;
482 -> 479;
482 -> 478;
483 -> 480;
483 -> 478;
484 -> 0;
484 -> 478;
485 -> 481;
485 -> 478;
486 -> 478;
487 -> 482;
487 -> 483;
487 -> 484;
487 -> 485;
487 -> 486;
487 -> 478;
488 -> 487;
490 -> 391;
490 -> 390;
490 -> 489;
491 -> 490;
493 -> 404;
493 -> 403;
493 -> 492;
494 -> 493;
496 -> 423;
496 -> 422;
496 -> 495;
497 -> 496;
499 -> 436;
499 -> 435;
499 -> 498;
500 -> 499;
501 -> 0;
502 -> 391;
502 -> 390;
502 -> 501;
502 -> 0;
503 -> 502;
504 -> 0;
505 -> 404;
505 -> 403;
505 -> 504;
505 -> 0;
506 -> 505;
507 -> 0;
508 -> 475;
508 -> 474;
508 -> 507;
508 -> 0;
509 -> 508;
510 -> 0;
511 -> 423;
511 -> 422;
511 -> 510;
511 -> 0;
512 -> 511;
513 -> 0;
514 -> 0;
514 -> 513;
515 -> 514;
516 -> 297;
516 -> 292;
517 -> 287;
517 -> 286;
518 -> 0;
518 -> 286;
519 -> 518;
519 -> 290;
519 -> 286;
520 -> 286;
521 -> 517;
521 -> 519;
521 -> 520;
521 -> 0;
521 -> 286;
522 -> 521;
522 -> 286;
523 -> 516;
523 -> 286;
524 -> 288;
524 -> 286;
525 -> 286;
526 -> 522;
526 -> 523;
526 -> 524;
526 -> 525;
526 -> 521;
526 -> 296;
526 -> 286;
527 -> 286;
528 -> 526;
528 -> 527;
529 -> 527;
530 -> 527;
531 -> 528;
531 -> 526;
531 -> 530;
531 -> 527;
532 -> 529;
532 -> 527;
533 -> 527;
534 -> 531;
534 -> 526;
534 -> 530;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 527;
535 -> 527;
536 -> 535;
536 -> 529;
536 -> 527;
537 -> 529;
537 -> 527;
538 -> 527;
539 -> 537;
539 -> 538;
539 -> 529;
539 -> 536;
539 -> 527;
540 -> 528;
540 -> 527;
541 -> 540;
541 -> 283;
541 -> 282;
542 -> 283;
542 -> 267;
543 -> 267;
544 -> 270;
544 -> 543;
544 -> 267;
545 -> 542;
545 -> 544;
546 -> 544;
547 -> 545;
547 -> 546;
547 -> 283;
547 -> 541;
547 -> 526;
547 -> 544;
548 -> 547;
548 -> 544;
549 -> 391;
549 -> 548;
550 -> 0;
550 -> 267;
551 -> 275;
551 -> 267;
552 -> 272;
552 -> 542;
552 -> 269;
552 -> 549;
552 -> 267;
553 -> 552;
553 -> 267;
554 -> 267;
555 -> 553;
555 -> 554;
556 -> 0;
556 -> 554;
557 -> 556;
558 -> 267;
559 -> 552;
559 -> 283;
559 -> 541;
559 -> 526;
559 -> 240;
559 -> 0;
559 -> 390;
559 -> 237;
559 -> 267;
560 -> 267;
561 -> 560;
562 -> 559;
562 -> 561;
562 -> 267;
563 -> 562;
563 -> 267;
564 -> 267;
565 -> 563;
565 -> 564;
566 -> 565;
566 -> 562;
566 -> 564;
567 -> 566;
567 -> 562;
567 -> 564;
568 -> 564;
569 -> 566;
569 -> 568;
569 -> 562;
569 -> 564;
570 -> 0;
570 -> 564;
571 -> 569;
571 -> 570;
571 -> 564;
572 -> 274;
572 -> 571;
572 -> 267;
573 -> 562;
573 -> 267;
574 -> 1;
575 -> 573;
575 -> 574;
576 -> 214;
576 -> 574;
577 -> 574;
579 -> 0;
580 -> 0;
581 -> 0;
584 -> 578;
584 -> 583;
585 -> 579;
585 -> 583;
586 -> 580;
586 -> 583;
587 -> 581;
587 -> 583;
588 -> 582;
588 -> 583;
589 -> 583;
590 -> 589;
590 -> 583;
591 -> 589;
591 -> 583;
592 -> 589;
592 -> 583;
593 -> 583;
594 -> 585;
594 -> 593;
594 -> 583;
595 -> 586;
595 -> 0;
595 -> 583;
596 -> 587;
596 -> 0;
596 -> 583;
597 -> 584;
597 -> 589;
597 -> 583;
598 -> 585;
598 -> 589;
598 -> 583;
599 -> 586;
599 -> 589;
599 -> 583;
600 -> 588;
600 -> 589;
600 -> 583;
601 -> 587;
601 -> 589;
601 -> 583;
602 -> 583;
603 -> 577;
603 -> 575;
603 -> 571;
603 -> 574;
604 -> 603;
604 -> 577;
605 -> 604;
605 -> 603;
605 -> 577;
606 -> 577;
607 -> 605;
607 -> 603;
607 -> 606;
607 -> 577;
608 -> 604;
608 -> 603;
608 -> 606;
608 -> 577;
609 -> 602;
609 -> 607;
610 -> 603;
610 -> 609;
610 -> 597;
610 -> 600;
610 -> 598;
610 -> 599;
610 -> 601;
610 -> 0;
610 -> 574;
611 -> 603;
611 -> 577;
612 -> 603;
612 -> 577;
613 -> 577;
614 -> 611;
614 -> 610;
614 -> 613;
615 -> 612;
615 -> 614;
615 -> 613;
616 -> 615;
616 -> 613;
617 -> 0;
617 -> 616;
618 -> 615;
618 -> 613;
619 -> 611;
619 -> 613;
620 -> 612;
620 -> 617;
620 -> 618;
620 -> 619;
620 -> 613;
621 -> 0;
621 -> 620;
622 -> 621;
623 -> 612;
623 -> 622;
624 -> 623;
624 -> 602;
624 -> 622;
625 -> 624;
626 -> 621;
627 -> 0;
627 -> 621;
628 -> 627;
629 -> 603;
629 -> 577;
630 -> 603;
630 -> 577;
631 -> 629;
631 -> 630;
631 -> 577;
632 -> 603;
632 -> 631;
632 -> 627;
632 -> 574;
634 -> 633;
636 -> 635;
638 -> 637;
641 -> 640;
642 -> 0;
643 -> 0;
644 -> 0;
645 -> 644;
647 -> 642;
647 -> 643;
647 -> 645;
647 -> 646;
648 -> 647;
650 -> 649;
652 -> 651;
654 -> 653;
656 -> 655;
657 -> 603;
657 -> 577;
658 -> 603;
658 -> 577;
659 -> 603;
659 -> 577;
660 -> 603;
660 -> 577;
661 -> 603;
661 -> 577;
662 -> 577;
663 -> 660;
663 -> 662;
663 -> 577;
664 -> 661;
664 -> 662;
664 -> 577;
665 -> 663;
665 -> 664;
665 -> 577;
666 -> 658;
666 -> 577;
667 -> 657;
667 -> 577;
668 -> 658;
668 -> 577;
669 -> 659;
669 -> 577;
670 -> 660;
670 -> 577;
671 -> 661;
671 -> 577;
672 -> 666;
672 -> 577;
673 -> 577;
674 -> 667;
674 -> 673;
675 -> 668;
675 -> 673;
676 -> 669;
676 -> 673;
677 -> 670;
677 -> 673;
678 -> 671;
678 -> 673;
679 -> 672;
679 -> 673;
680 -> 673;
681 -> 678;
681 -> 680;
681 -> 673;
682 -> 677;
682 -> 680;
682 -> 673;
683 -> 681;
683 -> 682;
683 -> 673;
684 -> 673;
685 -> 674;
685 -> 673;
686 -> 675;
686 -> 673;
687 -> 684;
687 -> 673;
688 -> 679;
688 -> 673;
689 -> 673;
690 -> 685;
690 -> 689;
691 -> 686;
691 -> 689;
692 -> 687;
692 -> 689;
693 -> 688;
693 -> 689;
694 -> 691;
694 -> 689;
695 -> 694;
695 -> 690;
695 -> 632;
695 -> 689;
696 -> 689;
697 -> 695;
697 -> 696;
698 -> 695;
698 -> 696;
699 -> 697;
699 -> 696;
700 -> 697;
700 -> 695;
700 -> 696;
701 -> 696;
702 -> 697;
702 -> 695;
702 -> 696;
703 -> 697;
703 -> 695;
703 -> 696;
704 -> 703;
704 -> 696;
705 -> 696;
706 -> 701;
706 -> 705;
706 -> 689;
707 -> 701;
707 -> 696;
708 -> 701;
708 -> 696;
709 -> 707;
709 -> 696;
710 -> 707;
710 -> 696;
711 -> 707;
711 -> 696;
712 -> 707;
712 -> 696;
713 -> 712;
713 -> 696;
714 -> 712;
714 -> 713;
715 -> 690;
715 -> 694;
715 -> 695;
715 -> 705;
715 -> 689;
716 -> 689;
717 -> 715;
717 -> 716;
717 -> 689;
718 -> 715;
718 -> 717;
719 -> 717;
720 -> 718;
720 -> 719;
721 -> 718;
721 -> 719;
722 -> 720;
722 -> 719;
723 -> 720;
723 -> 718;
723 -> 719;
724 -> 719;
725 -> 720;
725 -> 718;
725 -> 719;
726 -> 720;
726 -> 718;
726 -> 719;
727 -> 726;
727 -> 719;
728 -> 724;
728 -> 719;
729 -> 724;
729 -> 719;
730 -> 728;
730 -> 719;
731 -> 728;
731 -> 719;
732 -> 728;
732 -> 719;
733 -> 728;
733 -> 719;
734 -> 733;
734 -> 719;
735 -> 717;
736 -> 719;
736 -> 735;
736 -> 717;
737 -> 715;
737 -> 689;
738 -> 673;
739 -> 719;
739 -> 738;
739 -> 673;
740 -> 737;
740 -> 673;
741 -> 719;
741 -> 696;
742 -> 719;
742 -> 696;
743 -> 741;
743 -> 696;
744 -> 741;
744 -> 719;
744 -> 696;
745 -> 741;
745 -> 719;
745 -> 696;
746 -> 741;
746 -> 719;
746 -> 696;
747 -> 746;
747 -> 696;
748 -> 724;
749 -> 724;
750 -> 748;
750 -> 724;
751 -> 748;
751 -> 724;
752 -> 748;
752 -> 724;
753 -> 748;
753 -> 724;
754 -> 753;
754 -> 724;
755 -> 719;
756 -> 724;
756 -> 755;
756 -> 719;
757 -> 719;
757 -> 689;
758 -> 724;
758 -> 738;
758 -> 673;
759 -> 757;
759 -> 673;
760 -> 724;
761 -> 724;
761 -> 689;
762 -> 761;
762 -> 673;
763 -> 603;
763 -> 577;
764 -> 603;
764 -> 577;
765 -> 603;
765 -> 577;
766 -> 603;
766 -> 577;
767 -> 766;
767 -> 577;
768 -> 766;
768 -> 577;
769 -> 766;
769 -> 577;
770 -> 766;
770 -> 577;
771 -> 766;
771 -> 577;
772 -> 766;
772 -> 577;
773 -> 763;
773 -> 766;
773 -> 577;
774 -> 764;
774 -> 766;
774 -> 577;
775 -> 765;
775 -> 766;
775 -> 577;
776 -> 766;
776 -> 577;
777 -> 577;
778 -> 776;
778 -> 777;
778 -> 767;
778 -> 773;
778 -> 774;
778 -> 770;
778 -> 775;
778 -> 772;
778 -> 724;
778 -> 577;
779 -> 778;
779 -> 766;
779 -> 577;
780 -> 577;
781 -> 780;
781 -> 766;
781 -> 577;
782 -> 763;
782 -> 577;
783 -> 577;
784 -> 577;
785 -> 782;
785 -> 784;
786 -> 783;
786 -> 784;
787 -> 785;
787 -> 784;
788 -> 784;
789 -> 787;
789 -> 788;
790 -> 786;
790 -> 788;
791 -> 790;
791 -> 788;
792 -> 790;
792 -> 788;
793 -> 790;
793 -> 788;
794 -> 790;
794 -> 788;
795 -> 790;
795 -> 788;
796 -> 788;
797 -> 789;
797 -> 796;
797 -> 788;
798 -> 790;
798 -> 788;
799 -> 798;
799 -> 791;
799 -> 792;
799 -> 793;
799 -> 794;
799 -> 795;
799 -> 788;
800 -> 789;
800 -> 778;
800 -> 779;
800 -> 781;
800 -> 790;
800 -> 788;
801 -> 789;
801 -> 790;
801 -> 788;
802 -> 783;
802 -> 766;
802 -> 577;
803 -> 603;
803 -> 778;
803 -> 779;
803 -> 781;
803 -> 802;
803 -> 780;
803 -> 799;
803 -> 800;
803 -> 801;
803 -> 574;
804 -> 603;
804 -> 577;
805 -> 603;
805 -> 577;
806 -> 603;
806 -> 577;
807 -> 603;
807 -> 577;
808 -> 804;
808 -> 803;
808 -> 577;
809 -> 577;
810 -> 807;
810 -> 809;
811 -> 810;
811 -> 803;
811 -> 0;
811 -> 809;
812 -> 811;
812 -> 577;
813 -> 577;
814 -> 804;
814 -> 803;
814 -> 813;
814 -> 577;
815 -> 812;
815 -> 814;
815 -> 577;
816 -> 804;
816 -> 803;
816 -> 815;
817 -> 816;
817 -> 577;
818 -> 808;
818 -> 577;
819 -> 805;
819 -> 577;
820 -> 806;
820 -> 577;
821 -> 577;
822 -> 817;
822 -> 821;
823 -> 818;
823 -> 821;
824 -> 819;
824 -> 821;
825 -> 820;
825 -> 821;
826 -> 807;
826 -> 821;
827 -> 821;
828 -> 822;
828 -> 827;
828 -> 821;
829 -> 825;
829 -> 821;
830 -> 825;
830 -> 803;
830 -> 821;
831 -> 826;
831 -> 803;
831 -> 821;
832 -> 821;
833 -> 831;
833 -> 832;
834 -> 831;
834 -> 832;
835 -> 832;
836 -> 835;
836 -> 832;
837 -> 835;
837 -> 832;
838 -> 835;
838 -> 832;
839 -> 835;
839 -> 832;
840 -> 833;
840 -> 835;
840 -> 832;
841 -> 831;
841 -> 835;
841 -> 836;
841 -> 837;
841 -> 838;
841 -> 839;
841 -> 840;
841 -> 821;
842 -> 823;
842 -> 821;
843 -> 824;
843 -> 821;
844 -> 825;
844 -> 821;
845 -> 821;
846 -> 842;
846 -> 845;
847 -> 843;
847 -> 845;
848 -> 844;
848 -> 845;
849 -> 841;
849 -> 845;
850 -> 845;
851 -> 847;
851 -> 850;
851 -> 845;
852 -> 848;
852 -> 850;
852 -> 845;
853 -> 851;
853 -> 852;
853 -> 845;
854 -> 846;
854 -> 849;
854 -> 845;
855 -> 847;
855 -> 849;
855 -> 845;
856 -> 848;
856 -> 849;
856 -> 845;
857 -> 821;
858 -> 822;
858 -> 821;
859 -> 821;
860 -> 858;
860 -> 859;
861 -> 841;
861 -> 859;
862 -> 860;
862 -> 859;
863 -> 859;
864 -> 862;
864 -> 863;
865 -> 861;
865 -> 863;
866 -> 865;
866 -> 863;
867 -> 866;
867 -> 864;
867 -> 841;
867 -> 854;
867 -> 855;
867 -> 856;
867 -> 863;
868 -> 863;
869 -> 867;
869 -> 868;
870 -> 867;
870 -> 868;
871 -> 869;
871 -> 868;
872 -> 868;
873 -> 871;
873 -> 872;
874 -> 870;
874 -> 872;
875 -> 874;
875 -> 867;
875 -> 872;
876 -> 873;
876 -> 872;
877 -> 875;
877 -> 876;
877 -> 867;
877 -> 872;
878 -> 0;
878 -> 872;
879 -> 872;
880 -> 873;
880 -> 877;
880 -> 879;
880 -> 872;
881 -> 874;
881 -> 877;
881 -> 872;
882 -> 873;
882 -> 877;
882 -> 872;
883 -> 0;
883 -> 880;
884 -> 873;
884 -> 872;
885 -> 883;
885 -> 872;
886 -> 872;
887 -> 884;
887 -> 886;
888 -> 885;
888 -> 886;
889 -> 874;
889 -> 886;
890 -> 887;
890 -> 886;
891 -> 888;
891 -> 886;
892 -> 886;
893 -> 890;
893 -> 892;
894 -> 891;
894 -> 892;
895 -> 894;
895 -> 892;
896 -> 892;
897 -> 893;
897 -> 892;
898 -> 894;
898 -> 892;
899 -> 892;
900 -> 892;
901 -> 897;
901 -> 900;
902 -> 898;
902 -> 900;
903 -> 899;
903 -> 900;
904 -> 901;
904 -> 903;
904 -> 900;
905 -> 902;
905 -> 903;
905 -> 900;
906 -> 899;
906 -> 886;
907 -> 886;
908 -> 886;
909 -> 889;
909 -> 908;
910 -> 909;
910 -> 881;
910 -> 908;
911 -> 910;
911 -> 886;
912 -> 906;
912 -> 886;
913 -> 907;
913 -> 886;
914 -> 912;
914 -> 913;
914 -> 911;
914 -> 904;
914 -> 905;
914 -> 881;
914 -> 886;
915 -> 886;
916 -> 914;
916 -> 915;
917 -> 916;
917 -> 914;
917 -> 915;
918 -> 887;
918 -> 917;
919 -> 917;
920 -> 918;
920 -> 919;
921 -> 920;
921 -> 919;
922 -> 920;
922 -> 919;
923 -> 921;
923 -> 919;
924 -> 919;
925 -> 923;
925 -> 924;
926 -> 922;
926 -> 924;
927 -> 925;
927 -> 920;
927 -> 924;
928 -> 924;
929 -> 928;
929 -> 924;
930 -> 925;
930 -> 920;
930 -> 924;
931 -> 926;
931 -> 930;
931 -> 927;
931 -> 920;
932 -> 926;
932 -> 930;
932 -> 931;
933 -> 931;
934 -> 932;
934 -> 924;
935 -> 924;
936 -> 934;
936 -> 935;
936 -> 924;
937 -> 934;
937 -> 925;
937 -> 924;
938 -> 934;
938 -> 936;
939 -> 0;
939 -> 936;
940 -> 934;
940 -> 938;
940 -> 936;
941 -> 924;
942 -> 941;
942 -> 919;
943 -> 919;
944 -> 922;
944 -> 943;
945 -> 943;
946 -> 944;
946 -> 940;
946 -> 945;
947 -> 946;
947 -> 943;
948 -> 919;
949 -> 923;
949 -> 948;
950 -> 942;
950 -> 948;
951 -> 947;
951 -> 948;
952 -> 922;
952 -> 948;
953 -> 948;
954 -> 952;
954 -> 953;
955 -> 954;
955 -> 940;
955 -> 953;
956 -> 955;
956 -> 948;
957 -> 948;
958 -> 949;
958 -> 956;
958 -> 948;
959 -> 950;
959 -> 948;
960 -> 951;
960 -> 959;
961 -> 0;
961 -> 960;
962 -> 949;
962 -> 948;
963 -> 961;
963 -> 948;
964 -> 948;
965 -> 962;
965 -> 964;
966 -> 963;
966 -> 964;
967 -> 966;
967 -> 964;
968 -> 964;
969 -> 964;
969 -> 948;
970 -> 948;
971 -> 948;
972 -> 952;
972 -> 971;
973 -> 972;
973 -> 940;
973 -> 971;
974 -> 973;
974 -> 948;
975 -> 969;
975 -> 948;
976 -> 970;
976 -> 948;
977 -> 975;
977 -> 976;
977 -> 974;
977 -> 965;
977 -> 966;
977 -> 940;
977 -> 948;
978 -> 948;
979 -> 977;
980 -> 952;
980 -> 979;
981 -> 980;
981 -> 977;
981 -> 979;
982 -> 981;
982 -> 977;
983 -> 951;
983 -> 977;
984 -> 983;
985 -> 952;
985 -> 984;
986 -> 985;
986 -> 977;
986 -> 984;
987 -> 986;
987 -> 983;
988 -> 982;
988 -> 983;
989 -> 949;
989 -> 983;
990 -> 950;
990 -> 983;
991 -> 983;
992 -> 983;
993 -> 987;
993 -> 992;
994 -> 988;
994 -> 992;
995 -> 989;
995 -> 992;
996 -> 990;
996 -> 992;
997 -> 991;
997 -> 992;
998 -> 994;
998 -> 992;
999 -> 992;
1000 -> 998;
1000 -> 999;
1001 -> 997;
1001 -> 999;
1002 -> 999;
1003 -> 999;
1004 -> 1000;
1004 -> 1003;
1004 -> 999;
1005 -> 1000;
1005 -> 1001;
1005 -> 999;
1006 -> 1000;
1006 -> 977;
1006 -> 1001;
1006 -> 999;
1007 -> 1000;
1007 -> 977;
1007 -> 1001;
1007 -> 999;
1008 -> 1002;
1008 -> 1001;
1008 -> 999;
1009 -> 997;
1009 -> 992;
1010 -> 997;
1010 -> 992;
1011 -> 997;
1011 -> 992;
1012 -> 997;
1012 -> 992;
1013 -> 997;
1013 -> 992;
1014 -> 992;
1015 -> 993;
1015 -> 1014;
1015 -> 992;
1016 -> 992;
1017 -> 995;
1017 -> 1016;
1017 -> 992;
1018 -> 993;
1018 -> 997;
1018 -> 992;
1019 -> 995;
1019 -> 997;
1019 -> 996;
1019 -> 992;
1020 -> 1019;
1020 -> 997;
1020 -> 992;
1021 -> 996;
1021 -> 992;
1022 -> 995;
1022 -> 977;
1022 -> 1021;
1023 -> 995;
1023 -> 1022;
1024 -> 1023;
1024 -> 1022;
1024 -> 997;
1025 -> 983;
1026 -> 952;
1026 -> 1025;
1027 -> 1026;
1027 -> 1022;
1027 -> 1025;
1028 -> 1027;
1028 -> 983;
1029 -> 949;
1029 -> 983;
1030 -> 983;
1031 -> 977;
1032 -> 1031;
1032 -> 1028;
1033 -> 1032;
1033 -> 977;
1034 -> 969;
1034 -> 977;
1035 -> 991;
1035 -> 977;
1036 -> 1034;
1036 -> 1035;
1036 -> 1033;
1036 -> 965;
1036 -> 966;
1036 -> 1007;
1036 -> 1006;
1036 -> 1005;
1036 -> 1008;
1036 -> 1001;
1036 -> 1018;
1036 -> 1020;
1036 -> 1011;
1036 -> 1012;
1036 -> 1013;
1036 -> 1024;
1036 -> 1028;
1036 -> 1019;
1036 -> 1022;
1036 -> 977;
1037 -> 977;
1038 -> 1036;
1038 -> 1037;
1039 -> 1036;
1039 -> 1037;
1040 -> 1039;
1040 -> 1036;
1040 -> 1038;
1040 -> 1037;
1041 -> 991;
1041 -> 948;
1042 -> 920;
1042 -> 1041;
1042 -> 1040;
1042 -> 919;
1043 -> 888;
1043 -> 961;
1043 -> 917;
1044 -> 1043;
1045 -> 1042;
1045 -> 1044;
1046 -> 1045;
1046 -> 1042;
1046 -> 1044;
1047 -> 1044;
1048 -> 1046;
1048 -> 1047;
1048 -> 1044;
1049 -> 1048;
1049 -> 1044;
1050 -> 1049;
1050 -> 1043;
1051 -> 887;
1051 -> 1043;
1052 -> 888;
1052 -> 0;
1052 -> 1043;
1053 -> 1050;
1053 -> 1052;
1054 -> 1042;
1054 -> 1052;
1055 -> 1052;
1056 -> 1052;
1057 -> 1053;
1057 -> 1056;
1058 -> 1054;
1058 -> 1056;
1059 -> 1055;
1059 -> 1056;
1060 -> 1055;
1060 -> 1056;
1061 -> 1058;
1061 -> 1056;
1062 -> 1056;
1063 -> 1061;
1063 -> 1062;
1064 -> 1060;
1064 -> 1062;
1065 -> 1062;
1066 -> 1062;
1067 -> 1063;
1067 -> 1066;
1067 -> 1062;
1068 -> 1063;
1068 -> 1050;
1068 -> 1064;
1068 -> 1062;
1069 -> 1063;
1069 -> 1050;
1069 -> 1064;
1069 -> 1062;
1070 -> 1065;
1070 -> 1064;
1070 -> 1062;
1071 -> 1060;
1071 -> 1056;
1072 -> 1060;
1072 -> 1056;
1073 -> 1060;
1073 -> 1056;
1074 -> 1060;
1074 -> 1056;
1075 -> 1060;
1075 -> 1056;
1076 -> 1056;
1077 -> 1057;
1077 -> 1076;
1077 -> 1056;
1078 -> 1057;
1078 -> 1060;
1078 -> 1056;
1079 -> 602;
1079 -> 1056;
1080 -> 1079;
1080 -> 1059;
1080 -> 1056;
1081 -> 1080;
1081 -> 1060;
1081 -> 1056;
1082 -> 1052;
1083 -> 887;
1083 -> 1050;
1083 -> 1082;
1083 -> 1052;
1084 -> 887;
1084 -> 1050;
1084 -> 917;
1085 -> 917;
1086 -> 1084;
1086 -> 1085;
1087 -> 1055;
1087 -> 1085;
1088 -> 1087;
1088 -> 1068;
1088 -> 1085;
1089 -> 0;
1089 -> 1085;
1090 -> 1085;
1091 -> 1088;
1091 -> 1090;
1092 -> 1089;
1092 -> 1090;
1093 -> 1086;
1093 -> 1085;
1094 -> 1091;
1094 -> 1093;
1094 -> 1085;
1095 -> 1094;
1095 -> 1085;
1096 -> 917;
1097 -> 1096;
1097 -> 1093;
1098 -> 1097;
1098 -> 917;
1099 -> 906;
1099 -> 917;
1100 -> 1095;
1100 -> 917;
1101 -> 1099;
1101 -> 1100;
1101 -> 1098;
1101 -> 904;
1101 -> 905;
1101 -> 1069;
1101 -> 1068;
1101 -> 1063;
1101 -> 1070;
1101 -> 1064;
1101 -> 1078;
1101 -> 1072;
1101 -> 1081;
1101 -> 1074;
1101 -> 1075;
1101 -> 1093;
1101 -> 917;
1102 -> 917;
1103 -> 1095;
1103 -> 886;
1104 -> 867;
1104 -> 1103;
1104 -> 1101;
1104 -> 863;
1105 -> 841;
1105 -> 821;
1106 -> 826;
1106 -> 1104;
1106 -> 1105;
1106 -> 821;
1107 -> 1104;
1107 -> 821;
1108 -> 603;
1108 -> 1107;
1108 -> 1106;
1108 -> 574;
1109 -> 1108;
1109 -> 827;
1109 -> 821;
1110 -> 825;
1110 -> 1108;
1110 -> 821;
1111 -> 825;
1111 -> 1110;
1112 -> 1110;
1113 -> 1111;
1113 -> 868;
1114 -> 1111;
1114 -> 868;
1115 -> 1114;
1115 -> 1111;
1115 -> 868;
1116 -> 1113;
1116 -> 868;
1117 -> 1115;
1117 -> 1116;
1117 -> 1111;
1117 -> 868;
1118 -> 868;
1119 -> 1114;
1119 -> 1117;
1119 -> 868;
1120 -> 1113;
1120 -> 868;
1121 -> 1114;
1121 -> 1119;
1122 -> 1113;
1122 -> 1119;
1123 -> 961;
1123 -> 1121;
1124 -> 1113;
1124 -> 868;
1125 -> 1123;
1125 -> 868;
1126 -> 868;
1127 -> 1124;
1127 -> 1126;
1128 -> 1125;
1128 -> 1126;
1129 -> 1128;
1129 -> 1126;
1130 -> 1126;
1131 -> 1126;
1132 -> 1126;
1133 -> 1131;
1133 -> 1132;
1134 -> 1131;
1134 -> 868;
1135 -> 868;
1136 -> 868;
1137 -> 1114;
1137 -> 1136;
1138 -> 1137;
1138 -> 1121;
1138 -> 1136;
1139 -> 1138;
1139 -> 868;
1140 -> 1134;
1140 -> 868;
1141 -> 1135;
1141 -> 868;
1142 -> 1140;
1142 -> 1141;
1142 -> 1139;
1142 -> 1127;
1142 -> 1128;
1142 -> 1121;
1142 -> 868;
1143 -> 868;
1144 -> 1113;
1144 -> 1142;
1145 -> 1142;
1146 -> 1144;
1146 -> 1145;
1146 -> 1142;
1147 -> 1144;
1147 -> 1146;
1148 -> 0;
1148 -> 1146;
1149 -> 1146;
1150 -> 1147;
1150 -> 1149;
1151 -> 1148;
1151 -> 1149;
1152 -> 1151;
1152 -> 1149;
1153 -> 1149;
1154 -> 1142;
1155 -> 1123;
1155 -> 961;
1155 -> 1142;
1156 -> 1123;
1156 -> 0;
1156 -> 1142;
1157 -> 1113;
1157 -> 1150;
1157 -> 1142;
1158 -> 1142;
1159 -> 1157;
1159 -> 1158;
1160 -> 1150;
1160 -> 1158;
1161 -> 1142;
1162 -> 1161;
1162 -> 1159;
1163 -> 1162;
1163 -> 1142;
1164 -> 1134;
1164 -> 1142;
1165 -> 1159;
1165 -> 1142;
1166 -> 1142;
1167 -> 1159;
1167 -> 868;
1168 -> 1111;
1168 -> 1167;
1168 -> 1163;
1168 -> 863;
1169 -> 603;
1169 -> 577;
1170 -> 603;
1170 -> 577;
1171 -> 603;
1171 -> 577;
1172 -> 577;
1173 -> 1170;
1173 -> 1172;
1173 -> 577;
1174 -> 1171;
1174 -> 577;
1175 -> 1171;
1175 -> 1168;
1175 -> 1169;
1175 -> 577;
1176 -> 1170;
1176 -> 577;
1177 -> 577;
1178 -> 577;
1179 -> 1174;
1179 -> 1178;
1180 -> 1175;
1180 -> 1178;
1181 -> 1176;
1181 -> 1178;
1182 -> 1177;
1182 -> 1178;
1183 -> 1179;
1183 -> 1178;
1184 -> 1180;
1184 -> 1178;
1185 -> 1178;
1186 -> 1183;
1186 -> 1185;
1187 -> 1184;
1187 -> 1185;
1188 -> 1182;
1188 -> 1185;
1189 -> 1188;
1189 -> 1185;
1190 -> 1188;
1190 -> 1185;
1191 -> 1188;
1191 -> 1185;
1192 -> 1188;
1192 -> 1185;
1193 -> 1188;
1193 -> 1185;
1194 -> 1185;
1195 -> 1186;
1195 -> 1194;
1195 -> 1185;
1196 -> 1187;
1196 -> 1185;
1197 -> 0;
1197 -> 1185;
1198 -> 1185;
1199 -> 1196;
1199 -> 1198;
1200 -> 1197;
1200 -> 1198;
1201 -> 1187;
1201 -> 1185;
1202 -> 0;
1202 -> 1185;
1203 -> 1185;
1204 -> 1201;
1204 -> 1203;
1205 -> 1202;
1205 -> 1203;
1206 -> 1186;
1206 -> 1188;
1206 -> 1185;
1207 -> 1187;
1207 -> 1188;
1207 -> 1185;
1208 -> 1186;
1208 -> 1168;
1208 -> 1188;
1208 -> 1185;
1209 -> 1182;
1209 -> 1178;
1210 -> 1178;
1211 -> 1181;
1211 -> 1210;
1211 -> 1178;
1212 -> 1181;
1212 -> 1182;
1212 -> 1178;
1213 -> 603;
1213 -> 1177;
1213 -> 1168;
1213 -> 1208;
1213 -> 1207;
1213 -> 1206;
1213 -> 1192;
1213 -> 1193;
1213 -> 1212;
1213 -> 574;
1214 -> 603;
1214 -> 577;
1215 -> 603;
1215 -> 577;
1216 -> 603;
1216 -> 577;
1217 -> 603;
1217 -> 577;
1218 -> 603;
1218 -> 577;
1219 -> 1214;
1219 -> 577;
1220 -> 1215;
1220 -> 577;
1221 -> 1216;
1221 -> 577;
1222 -> 1217;
1222 -> 577;
1223 -> 577;
1224 -> 1219;
1224 -> 1223;
1225 -> 1220;
1225 -> 1223;
1226 -> 1221;
1226 -> 1223;
1227 -> 1222;
1227 -> 1223;
1228 -> 1218;
1228 -> 1223;
1229 -> 1223;
1230 -> 1225;
1230 -> 1229;
1230 -> 1223;
1231 -> 1224;
1231 -> 1223;
1232 -> 1225;
1232 -> 1223;
1233 -> 1226;
1233 -> 1223;
1234 -> 1223;
1235 -> 1226;
1235 -> 1234;
1235 -> 1223;
1236 -> 1235;
1236 -> 1227;
1236 -> 1223;
1237 -> 1223;
1238 -> 1231;
1238 -> 1237;
1239 -> 1232;
1239 -> 1237;
1240 -> 1233;
1240 -> 1237;
1241 -> 1236;
1241 -> 1237;
1242 -> 1228;
1242 -> 1237;
1243 -> 1238;
1243 -> 1213;
1243 -> 1237;
1244 -> 1238;
1244 -> 1243;
1245 -> 1239;
1245 -> 1243;
1246 -> 1243;
1247 -> 1244;
1247 -> 1246;
1248 -> 1245;
1248 -> 1246;
1249 -> 1242;
1249 -> 1246;
1250 -> 1247;
1250 -> 1246;
1251 -> 1250;
1251 -> 1246;
1252 -> 1248;
1252 -> 1246;
1253 -> 1246;
1254 -> 1251;
1254 -> 1253;
1255 -> 1252;
1255 -> 1253;
1256 -> 1249;
1256 -> 1253;
1257 -> 1254;
1257 -> 1243;
1257 -> 1253;
1258 -> 1255;
1258 -> 1253;
1259 -> 1254;
1259 -> 1253;
1260 -> 1253;
1261 -> 1257;
1261 -> 1260;
1262 -> 1258;
1262 -> 1260;
1263 -> 1259;
1263 -> 1260;
1264 -> 1256;
1264 -> 1260;
1265 -> 1264;
1265 -> 1257;
1265 -> 1260;
1266 -> 1261;
1266 -> 1260;
1267 -> 1263;
1267 -> 1260;
1268 -> 1262;
1268 -> 1260;
1269 -> 1260;
1270 -> 1265;
1270 -> 1269;
1271 -> 1266;
1271 -> 1269;
1272 -> 1267;
1272 -> 1269;
1273 -> 1268;
1273 -> 1269;
1274 -> 1271;
1274 -> 1269;
1275 -> 1270;
1275 -> 1274;
1275 -> 1257;
1275 -> 1269;
1276 -> 1269;
1277 -> 1275;
1277 -> 1276;
1277 -> 1269;
1278 -> 1275;
1278 -> 1269;
1279 -> 1273;
1279 -> 1269;
1280 -> 1272;
1280 -> 1269;
1281 -> 1269;
1282 -> 1278;
1282 -> 1281;
1283 -> 1279;
1283 -> 1281;
1284 -> 1280;
1284 -> 1281;
1285 -> 1282;
1285 -> 1275;
1285 -> 1281;
1286 -> 1281;
1287 -> 1285;
1287 -> 1286;
1288 -> 1285;
1288 -> 1286;
1289 -> 1287;
1289 -> 1286;
1290 -> 1287;
1290 -> 1285;
1290 -> 1286;
1291 -> 1287;
1291 -> 1285;
1291 -> 1286;
1292 -> 1287;
1292 -> 1285;
1292 -> 1286;
1293 -> 1292;
1293 -> 1286;
1294 -> 1281;
1295 -> 1285;
1295 -> 1294;
1295 -> 1281;
1296 -> 1275;
1296 -> 1269;
1297 -> 1250;
1297 -> 1285;
1297 -> 1246;
1298 -> 1246;
1299 -> 1297;
1299 -> 1298;
1300 -> 1249;
1300 -> 1298;
1301 -> 1299;
1301 -> 1285;
1301 -> 1298;
1302 -> 1299;
1302 -> 1285;
1302 -> 1298;
1303 -> 1298;
1304 -> 1302;
1304 -> 1303;
1305 -> 1302;
1305 -> 1303;
1306 -> 1300;
1306 -> 1303;
1307 -> 1304;
1307 -> 1303;
1308 -> 1305;
1308 -> 1303;
1309 -> 1307;
1309 -> 1308;
1309 -> 1301;
1309 -> 1303;
1310 -> 1309;
1310 -> 1303;
1311 -> 1306;
1311 -> 1309;
1311 -> 1310;
1312 -> 0;
1312 -> 1310;
1313 -> 1310;
1314 -> 1306;
1314 -> 1313;
1315 -> 1314;
1315 -> 1311;
1315 -> 1313;
1316 -> 1313;
1317 -> 1314;
1317 -> 1315;
1317 -> 1316;
1318 -> 1317;
1318 -> 1316;
1319 -> 1316;
1320 -> 1318;
1320 -> 1319;
1321 -> 1320;
1321 -> 1317;
1321 -> 1319;
1322 -> 1321;
1323 -> 1322;
1323 -> 1316;
1324 -> 1323;
1324 -> 1316;
1325 -> 1296;
1325 -> 1246;
1326 -> 1246;
1327 -> 1325;
1327 -> 1326;
1328 -> 1327;
1328 -> 1326;
1329 -> 1326;
1330 -> 1326;
1331 -> 1328;
1331 -> 1330;
1332 -> 1329;
1332 -> 1330;
1333 -> 1331;
1333 -> 1330;
1334 -> 1331;
1334 -> 1332;
1334 -> 1330;
1335 -> 1330;
1336 -> 1335;
1336 -> 1332;
1336 -> 1330;
1337 -> 1330;
1338 -> 1337;
1338 -> 1332;
1338 -> 1330;
1339 -> 1329;
1339 -> 1246;
1340 -> 1246;
1341 -> 1324;
1341 -> 1339;
1341 -> 1340;
1341 -> 1334;
1341 -> 1336;
1341 -> 1338;
1341 -> 1246;
1342 -> 1223;
1343 -> 1341;
1343 -> 1342;
1344 -> 1343;
1344 -> 1341;
1344 -> 1342;
1345 -> 1344;
1345 -> 1223;
1346 -> 1345;
1347 -> 1346;
1347 -> 1345;
1348 -> 1347;
1349 -> 1341;
1349 -> 1348;
1350 -> 1349;
1350 -> 1341;
1350 -> 1348;
1351 -> 1350;
1351 -> 1347;
1352 -> 1228;
1352 -> 1347;
1353 -> 1224;
1353 -> 1347;
1354 -> 1225;
1354 -> 1347;
1355 -> 1352;
1355 -> 1353;
1355 -> 1354;
1355 -> 1351;
1355 -> 1317;
1355 -> 1341;
1355 -> 1347;
1356 -> 1347;
1357 -> 1355;
1357 -> 1356;
1358 -> 1355;
1358 -> 1356;
1359 -> 1355;
1359 -> 1356;
1360 -> 1355;
1360 -> 1356;
1361 -> 1355;
1361 -> 1356;
1362 -> 1357;
1362 -> 1356;
1363 -> 1358;
1363 -> 1356;
1364 -> 1359;
1364 -> 1356;
1365 -> 1360;
1365 -> 1356;
1366 -> 1356;
1367 -> 1362;
1367 -> 1366;
1368 -> 1363;
1368 -> 1366;
1369 -> 1364;
1369 -> 1366;
1370 -> 1365;
1370 -> 1366;
1371 -> 1361;
1371 -> 1366;
1372 -> 1368;
1372 -> 1355;
1372 -> 1366;
1373 -> 1367;
1373 -> 1372;
1374 -> 1368;
1374 -> 1372;
1375 -> 1369;
1375 -> 1372;
1376 -> 1370;
1376 -> 1372;
1377 -> 1372;
1378 -> 1371;
1378 -> 1377;
1379 -> 1378;
1379 -> 1355;
1379 -> 1377;
1380 -> 1379;
1380 -> 1372;
1381 -> 1372;
1382 -> 1371;
1382 -> 1381;
1383 -> 1381;
1384 -> 1382;
1384 -> 1383;
1385 -> 1384;
1385 -> 1355;
1385 -> 1383;
1386 -> 1385;
1386 -> 1381;
1387 -> 1386;
1387 -> 1381;
1388 -> 1386;
1388 -> 1355;
1388 -> 0;
1388 -> 1381;
1389 -> 1386;
1389 -> 1381;
1390 -> 1386;
1390 -> 1355;
1390 -> 1381;
1391 -> 1390;
1391 -> 1372;
1392 -> 1371;
1392 -> 1355;
1392 -> 1372;
1393 -> 1372;
1394 -> 1373;
1394 -> 1393;
1395 -> 1374;
1395 -> 1393;
1396 -> 1375;
1396 -> 1393;
1397 -> 1376;
1397 -> 1393;
1398 -> 1380;
1398 -> 1393;
1399 -> 1391;
1399 -> 1393;
1400 -> 1392;
1400 -> 1393;
1401 -> 1395;
1401 -> 1393;
1402 -> 1395;
1402 -> 1401;
1402 -> 0;
1402 -> 1393;
1403 -> 1395;
1403 -> 1401;
1403 -> 0;
1403 -> 1393;
1404 -> 1395;
1404 -> 1393;
1405 -> 1399;
1405 -> 1393;
1406 -> 1404;
1406 -> 1405;
1406 -> 1401;
1406 -> 1393;
1407 -> 1397;
1407 -> 1393;
1408 -> 1407;
1408 -> 1393;
1409 -> 1394;
1409 -> 1393;
1410 -> 1406;
1410 -> 1393;
1411 -> 1396;
1411 -> 1393;
1412 -> 1398;
1412 -> 1393;
1413 -> 1400;
1413 -> 1393;
1414 -> 1393;
1415 -> 1409;
1415 -> 1414;
1416 -> 1410;
1416 -> 1414;
1417 -> 1411;
1417 -> 1414;
1418 -> 1412;
1418 -> 1414;
1419 -> 1413;
1419 -> 1414;
1420 -> 1414;
1421 -> 1415;
1421 -> 1420;
1421 -> 1414;
1422 -> 1416;
1422 -> 1414;
1423 -> 1418;
1423 -> 1414;
1424 -> 1414;
1425 -> 1422;
1425 -> 1423;
1425 -> 1424;
1425 -> 1406;
1425 -> 1414;
1426 -> 1414;
1427 -> 1425;
1427 -> 1414;
1428 -> 1414;
1429 -> 1426;
1429 -> 1428;
1429 -> 1414;
1430 -> 1425;
1430 -> 1414;
1431 -> 1430;
1431 -> 1393;
1432 -> 1407;
1432 -> 1431;
1433 -> 1372;
1434 -> 1356;
1435 -> 1341;
1435 -> 1345;
1436 -> 1435;
1436 -> 577;
1437 -> 1215;
1437 -> 577;
1438 -> 1214;
1438 -> 577;
1439 -> 1216;
1439 -> 577;
1440 -> 577;
1441 -> 1436;
1441 -> 1440;
1442 -> 1437;
1442 -> 1440;
1443 -> 1438;
1443 -> 1440;
1444 -> 1439;
1444 -> 1440;
1445 -> 1218;
1445 -> 1440;
1446 -> 1440;
1447 -> 1441;
1447 -> 1446;
1448 -> 1447;
1448 -> 1341;
1448 -> 1446;
1449 -> 1448;
1449 -> 0;
1449 -> 1446;
1450 -> 1449;
1450 -> 1440;
1451 -> 1441;
1451 -> 1440;
1452 -> 577;
1453 -> 1451;
1453 -> 1452;
1454 -> 1453;
1454 -> 1341;
1454 -> 1452;
1455 -> 603;
1455 -> 1454;
1455 -> 1425;
1455 -> 574;
1456 -> 603;
1456 -> 577;
1457 -> 603;
1457 -> 577;
1458 -> 603;
1458 -> 577;
1459 -> 603;
1459 -> 577;
1460 -> 603;
1460 -> 577;
1461 -> 577;
1462 -> 1456;
1462 -> 1455;
1462 -> 577;
1463 -> 577;
1464 -> 1457;
1464 -> 1455;
1464 -> 577;
1465 -> 1464;
1466 -> 1457;
1466 -> 1464;
1467 -> 1466;
1467 -> 1455;
1468 -> 1467;
1468 -> 1466;
1469 -> 1466;
1470 -> 1461;
1470 -> 1469;
1470 -> 1466;
1471 -> 1467;
1471 -> 1466;
1472 -> 1465;
1472 -> 1471;
1472 -> 1466;
1473 -> 1458;
1473 -> 1472;
1474 -> 1466;
1474 -> 1473;
1475 -> 1459;
1475 -> 1473;
1476 -> 1473;
1477 -> 1474;
1477 -> 1476;
1478 -> 1475;
1478 -> 1476;
1479 -> 1460;
1479 -> 1476;
1480 -> 1477;
1480 -> 1476;
1481 -> 1476;
1482 -> 1480;
1482 -> 1481;
1483 -> 1482;
1483 -> 1455;
1483 -> 1481;
1484 -> 1481;
1485 -> 1483;
1485 -> 1455;
1485 -> 1484;
1485 -> 1481;
1486 -> 1485;
1486 -> 1481;
1487 -> 1477;
1487 -> 1476;
1488 -> 1486;
1488 -> 1476;
1489 -> 1477;
1489 -> 1455;
1489 -> 1486;
1489 -> 1476;
1490 -> 1478;
1490 -> 1476;
1491 -> 1476;
1492 -> 1487;
1492 -> 1491;
1493 -> 1488;
1493 -> 1491;
1494 -> 1489;
1494 -> 1491;
1495 -> 1490;
1495 -> 1491;
1496 -> 1479;
1496 -> 1491;
1497 -> 1494;
1497 -> 1491;
1498 -> 1496;
1498 -> 1486;
1498 -> 1491;
1499 -> 0;
1499 -> 1491;
1500 -> 1496;
1500 -> 1491;
1501 -> 1491;
1502 -> 1500;
1503 -> 1500;
1504 -> 1503;
1504 -> 1500;
1505 -> 1500;
1506 -> 1500;
1507 -> 1500;
1507 -> 1506;
1508 -> 1506;
1509 -> 1508;
1509 -> 1500;
1510 -> 1498;
1510 -> 1509;
1510 -> 1500;
1511 -> 1500;
1512 -> 1500;
1512 -> 1511;
1513 -> 1511;
1514 -> 1512;
1514 -> 1513;
1515 -> 1514;
1515 -> 1498;
1515 -> 1513;
1516 -> 1515;
1516 -> 1511;
1517 -> 1516;
1517 -> 1498;
1517 -> 1511;
1518 -> 1516;
1518 -> 1498;
1518 -> 0;
1518 -> 1517;
1519 -> 1517;
1520 -> 1519;
1520 -> 1498;
1521 -> 1520;
1521 -> 1517;
1522 -> 1521;
1522 -> 1500;
1523 -> 1522;
1524 -> 1523;
1524 -> 1476;
1525 -> 1461;
1525 -> 577;
1526 -> 1465;
1526 -> 1472;
1526 -> 577;
1527 -> 1239;
1527 -> 1520;
1528 -> 1527;
1528 -> 1520;
1529 -> 1528;
1529 -> 1520;
1530 -> 1520;
1531 -> 1530;
1531 -> 1520;
1532 -> 1529;
1532 -> 1520;
1533 -> 1520;
1534 -> 1532;
1534 -> 1520;
1535 -> 1531;
1535 -> 1520;
1536 -> 1520;
1537 -> 1530;
1537 -> 1520;
1538 -> 1530;
1539 -> 1530;
1540 -> 1530;
1541 -> 1538;
1541 -> 1530;
1542 -> 1539;
1542 -> 1530;
1543 -> 1540;
1543 -> 1530;
1544 -> 1542;
1544 -> 1538;
1545 -> 1543;
1545 -> 1538;
1546 -> 1538;
1547 -> 1538;
1547 -> 1530;
1547 -> 0;
1548 -> 1538;
1549 -> 1541;
1549 -> 1538;
1550 -> 1544;
1550 -> 1538;
1551 -> 1545;
1551 -> 1538;
1552 -> 1541;
1552 -> 1538;
1553 -> 1538;
1553 -> 0;
1554 -> 1538;
1554 -> 0;
1555 -> 1551;
1555 -> 1538;
1556 -> 1555;
1556 -> 1538;
1557 -> 1549;
1557 -> 1538;
1558 -> 1550;
1558 -> 1538;
1559 -> 1552;
1559 -> 1538;
1560 -> 1538;
1561 -> 1557;
1561 -> 1560;
1561 -> 1538;
1562 -> 1538;
1563 -> 1538;
1564 -> 1538;
1565 -> 1562;
1565 -> 1564;
1565 -> 1538;
1566 -> 1538;
1567 -> 1566;
1567 -> 1538;
1568 -> 1555;
1568 -> 1567;
1569 -> 1530;
1569 -> 1446;
1570 -> 1569;
1570 -> 1530;
1570 -> 1446;
1571 -> 1570;
1571 -> 0;
1571 -> 1446;
1572 -> 1571;
1572 -> 1440;
1573 -> 1538;
1573 -> 827;
1573 -> 821;
1574 -> 1538;
1574 -> 1126;
1575 -> 1538;
1576 -> 1538;
1577 -> 1538;
1577 -> 961;
1578 -> 1538;
1578 -> 0;
1579 -> 1538;
1579 -> 1185;
1580 -> 1579;
1580 -> 1198;
1581 -> 1538;
1581 -> 1185;
1582 -> 1581;
1582 -> 1203;
1583 -> 1238;
1583 -> 1538;
1584 -> 1239;
1584 -> 1538;
1585 -> 1240;
1585 -> 1538;
1586 -> 1241;
1586 -> 1538;
1587 -> 1538;
1588 -> 1538;
1589 -> 1583;
1589 -> 1588;
1590 -> 1584;
1590 -> 1588;
1591 -> 1585;
1591 -> 1588;
1592 -> 1586;
1592 -> 1588;
1593 -> 1587;
1593 -> 1588;
1594 -> 1242;
1594 -> 1588;
1595 -> 1589;
1595 -> 1538;
1595 -> 1588;
1596 -> 1595;
1596 -> 1588;
1597 -> 1589;
1597 -> 1538;
1597 -> 1588;
1598 -> 1593;
1598 -> 1588;
1599 -> 1595;
1599 -> 1588;
1600 -> 1588;
1601 -> 1590;
1601 -> 1588;
1602 -> 1588;
1603 -> 1597;
1603 -> 1602;
1604 -> 1598;
1604 -> 1602;
1605 -> 1599;
1605 -> 1602;
1606 -> 1600;
1606 -> 1602;
1607 -> 1601;
1607 -> 1602;
1608 -> 1594;
1608 -> 1602;
1609 -> 1602;
1610 -> 1604;
1610 -> 1609;
1610 -> 1602;
1611 -> 1602;
1612 -> 1611;
1612 -> 1588;
1613 -> 1588;
1614 -> 1612;
1614 -> 1613;
1614 -> 1588;
1615 -> 1588;
1616 -> 0;
1616 -> 1615;
1617 -> 1615;
1618 -> 1616;
1618 -> 1617;
1619 -> 1618;
1619 -> 1616;
1619 -> 0;
1619 -> 1617;
1620 -> 1617;
1621 -> 1618;
1621 -> 1616;
1621 -> 1620;
1621 -> 1617;
1622 -> 1619;
1622 -> 1615;
1623 -> 1616;
1623 -> 1615;
1624 -> 1623;
1624 -> 1588;
1625 -> 1589;
1625 -> 1588;
1626 -> 1589;
1626 -> 1538;
1626 -> 1588;
1627 -> 1588;
1628 -> 1625;
1628 -> 1627;
1629 -> 1626;
1629 -> 1627;
1630 -> 1628;
1630 -> 1627;
1631 -> 0;
1631 -> 1630;
1632 -> 1588;
1633 -> 1624;
1633 -> 1588;
1634 -> 1593;
1634 -> 1588;
1635 -> 1595;
1635 -> 1588;
1636 -> 1588;
1637 -> 1591;
1637 -> 1588;
1638 -> 1631;
1638 -> 1588;
1639 -> 1632;
1639 -> 1588;
1640 -> 1588;
1641 -> 1633;
1641 -> 1640;
1642 -> 1634;
1642 -> 1640;
1643 -> 1635;
1643 -> 1640;
1644 -> 1636;
1644 -> 1640;
1645 -> 1637;
1645 -> 1640;
1646 -> 1638;
1646 -> 1640;
1647 -> 1636;
1647 -> 1640;
1648 -> 1639;
1648 -> 1640;
1649 -> 1594;
1649 -> 1640;
1650 -> 1646;
1650 -> 1640;
1651 -> 1640;
1652 -> 1650;
1652 -> 1651;
1653 -> 1652;
1653 -> 0;
1653 -> 1651;
1654 -> 1641;
1654 -> 1653;
1655 -> 1642;
1655 -> 1653;
1656 -> 1643;
1656 -> 1653;
1657 -> 1644;
1657 -> 1653;
1658 -> 1645;
1658 -> 1653;
1659 -> 1646;
1659 -> 1653;
1660 -> 1647;
1660 -> 1653;
1661 -> 1648;
1661 -> 1653;
1662 -> 1653;
1663 -> 1654;
1663 -> 1662;
1664 -> 1655;
1664 -> 1662;
1665 -> 1656;
1665 -> 1662;
1666 -> 1657;
1666 -> 1662;
1667 -> 1658;
1667 -> 1662;
1668 -> 1659;
1668 -> 1662;
1669 -> 1660;
1669 -> 1662;
1670 -> 1661;
1670 -> 1662;
1671 -> 1649;
1671 -> 1662;
1672 -> 1662;
1673 -> 1664;
1673 -> 1672;
1673 -> 1662;
1674 -> 1663;
1674 -> 1673;
1675 -> 1665;
1675 -> 1673;
1676 -> 1666;
1676 -> 1673;
1677 -> 1667;
1677 -> 1673;
1678 -> 1668;
1678 -> 1673;
1679 -> 1669;
1679 -> 1673;
1680 -> 1670;
1680 -> 1673;
1681 -> 1673;
1682 -> 1674;
1682 -> 1681;
1683 -> 1675;
1683 -> 1681;
1684 -> 1676;
1684 -> 1681;
1685 -> 1677;
1685 -> 1681;
1686 -> 1678;
1686 -> 1681;
1687 -> 1679;
1687 -> 1681;
1688 -> 1680;
1688 -> 1681;
1689 -> 1671;
1689 -> 1681;
1690 -> 1681;
1691 -> 1682;
1691 -> 1690;
1692 -> 1691;
1692 -> 1616;
1692 -> 0;
1692 -> 1690;
1693 -> 1690;
1694 -> 1691;
1694 -> 1616;
1694 -> 1693;
1694 -> 1690;
1695 -> 1692;
1695 -> 1681;
1696 -> 1686;
1696 -> 1681;
1697 -> 1681;
1698 -> 1696;
1698 -> 1697;
1699 -> 1698;
1699 -> 0;
1699 -> 1697;
1700 -> 1698;
1700 -> 0;
1700 -> 1697;
1701 -> 1697;
1702 -> 0;
1702 -> 1697;
1703 -> 1698;
1703 -> 1702;
1703 -> 1697;
1704 -> 0;
1704 -> 1697;
1705 -> 1698;
1705 -> 1704;
1705 -> 1697;
1706 -> 1697;
1707 -> 0;
1707 -> 1697;
1708 -> 1698;
1708 -> 1707;
1708 -> 1697;
1709 -> 1708;
1709 -> 1697;
1710 -> 1697;
1711 -> 1709;
1711 -> 1710;
1712 -> 1710;
1713 -> 1711;
1713 -> 1712;
1713 -> 1710;
1714 -> 1681;
1715 -> 1689;
1715 -> 1681;
1716 -> 1681;
1717 -> 1681;
1718 -> 1682;
1718 -> 1717;
1719 -> 1717;
1720 -> 1718;
1720 -> 1719;
1721 -> 1720;
1721 -> 1616;
1721 -> 1719;
1722 -> 1721;
1722 -> 1717;
1723 -> 1722;
1723 -> 1681;
1724 -> 1715;
1724 -> 1723;
1724 -> 1681;
1725 -> 1724;
1726 -> 1714;
1726 -> 1725;
1726 -> 1724;
1727 -> 1682;
1727 -> 1726;
1728 -> 1683;
1728 -> 1726;
1729 -> 1684;
1729 -> 1726;
1730 -> 1685;
1730 -> 1726;
1731 -> 1686;
1731 -> 1726;
1732 -> 1689;
1732 -> 1726;
1733 -> 1687;
1733 -> 1726;
1734 -> 1688;
1734 -> 1726;
1735 -> 1726;
1736 -> 1727;
1736 -> 1735;
1737 -> 1728;
1737 -> 1735;
1738 -> 1729;
1738 -> 1735;
1739 -> 1730;
1739 -> 1735;
1740 -> 1731;
1740 -> 1735;
1741 -> 1732;
1741 -> 1735;
1742 -> 1733;
1742 -> 1735;
1743 -> 1734;
1743 -> 1735;
1744 -> 1715;
1744 -> 1735;
1745 -> 1726;
1746 -> 1726;
1747 -> 1682;
1747 -> 1746;
1748 -> 1747;
1748 -> 1616;
1748 -> 0;
1748 -> 1746;
1749 -> 1746;
1750 -> 1747;
1750 -> 1616;
1750 -> 1749;
1750 -> 1746;
1751 -> 1748;
1751 -> 1726;
1752 -> 1686;
1752 -> 0;
1752 -> 1724;
1753 -> 1724;
1754 -> 1727;
1754 -> 1735;
1755 -> 1728;
1755 -> 1735;
1756 -> 1729;
1756 -> 1735;
1757 -> 1730;
1757 -> 1735;
1758 -> 1731;
1758 -> 1735;
1759 -> 1732;
1759 -> 1735;
1760 -> 1733;
1760 -> 1735;
1761 -> 1743;
1761 -> 1735;
1762 -> 1724;
1762 -> 1735;
1763 -> 1735;
1764 -> 1754;
1764 -> 1763;
1765 -> 1764;
1765 -> 1616;
1765 -> 0;
1765 -> 1763;
1766 -> 1763;
1767 -> 1764;
1767 -> 1616;
1767 -> 1766;
1767 -> 1763;
1768 -> 1765;
1768 -> 1735;
1769 -> 1735;
1770 -> 1762;
1770 -> 1769;
1771 -> 1770;
1771 -> 1630;
1771 -> 0;
1771 -> 1769;
1772 -> 1771;
1772 -> 1735;
1773 -> 1757;
1773 -> 1735;
1774 -> 1735;
1775 -> 1773;
1775 -> 1774;
1776 -> 1762;
1776 -> 1774;
1777 -> 1774;
1778 -> 1776;
1778 -> 1630;
1778 -> 1777;
1778 -> 1774;
1779 -> 1774;
1780 -> 1776;
1780 -> 1630;
1780 -> 1779;
1780 -> 1774;
1781 -> 1776;
1781 -> 1630;
1781 -> 1774;
1782 -> 1781;
1782 -> 1735;
1783 -> 1758;
1783 -> 0;
1783 -> 1735;
1784 -> 1735;
1785 -> 1762;
1785 -> 1630;
1785 -> 1784;
1785 -> 1735;
1786 -> 1783;
1786 -> 1785;
1786 -> 1735;
1787 -> 1754;
1787 -> 1786;
1788 -> 1762;
1788 -> 1630;
1788 -> 1786;
1789 -> 1755;
1789 -> 1786;
1790 -> 1756;
1790 -> 1786;
1791 -> 1757;
1791 -> 1786;
1792 -> 1758;
1792 -> 1786;
1793 -> 1759;
1793 -> 1786;
1794 -> 1760;
1794 -> 1786;
1795 -> 1761;
1795 -> 1786;
1796 -> 1786;
1797 -> 1787;
1797 -> 1796;
1798 -> 1788;
1798 -> 1796;
1799 -> 1789;
1799 -> 1796;
1800 -> 1790;
1800 -> 1796;
1801 -> 1791;
1801 -> 1796;
1802 -> 1792;
1802 -> 1796;
1803 -> 1793;
1803 -> 1796;
1804 -> 1794;
1804 -> 1796;
1805 -> 1795;
1805 -> 1796;
1806 -> 1762;
1806 -> 1796;
1807 -> 1802;
1807 -> 1796;
1808 -> 1796;
1809 -> 1807;
1809 -> 1808;
1810 -> 1809;
1810 -> 0;
1810 -> 1808;
1811 -> 1809;
1811 -> 0;
1811 -> 1808;
1812 -> 1808;
1813 -> 0;
1813 -> 1808;
1814 -> 1809;
1814 -> 1813;
1814 -> 1808;
1815 -> 0;
1815 -> 1808;
1816 -> 1809;
1816 -> 1815;
1816 -> 1808;
1817 -> 1808;
1818 -> 0;
1818 -> 1808;
1819 -> 1809;
1819 -> 1818;
1819 -> 1808;
1820 -> 1819;
1820 -> 1808;
1821 -> 1808;
1822 -> 1820;
1822 -> 1821;
1823 -> 1821;
1824 -> 1822;
1824 -> 1823;
1824 -> 1821;
1825 -> 1796;
1826 -> 1800;
1826 -> 1825;
1826 -> 1796;
1827 -> 1798;
1827 -> 1630;
1827 -> 1796;
1828 -> 1797;
1828 -> 1827;
1829 -> 1798;
1829 -> 1827;
1830 -> 1799;
1830 -> 1827;
1831 -> 1800;
1831 -> 1827;
1832 -> 1801;
1832 -> 1827;
1833 -> 1802;
1833 -> 1827;
1834 -> 1803;
1834 -> 1827;
1835 -> 1804;
1835 -> 1827;
1836 -> 1805;
1836 -> 1827;
1837 -> 1827;
1838 -> 1828;
1838 -> 1837;
1839 -> 1829;
1839 -> 1837;
1840 -> 1830;
1840 -> 1837;
1841 -> 1831;
1841 -> 1837;
1842 -> 1832;
1842 -> 1837;
1843 -> 1833;
1843 -> 1837;
1844 -> 1834;
1844 -> 1837;
1845 -> 1835;
1845 -> 1837;
1846 -> 1836;
1846 -> 1837;
1847 -> 1806;
1847 -> 1837;
1848 -> 1839;
1848 -> 1630;
1848 -> 1837;
1849 -> 1838;
1849 -> 1848;
1850 -> 1839;
1850 -> 1848;
1851 -> 1840;
1851 -> 1848;
1852 -> 1841;
1852 -> 1848;
1853 -> 1842;
1853 -> 1848;
1854 -> 1843;
1854 -> 1848;
1855 -> 1844;
1855 -> 1848;
1856 -> 1845;
1856 -> 1848;
1857 -> 1846;
1857 -> 1848;
1858 -> 1848;
1859 -> 1849;
1859 -> 1858;
1860 -> 1850;
1860 -> 1858;
1861 -> 1851;
1861 -> 1858;
1862 -> 1852;
1862 -> 1858;
1863 -> 1853;
1863 -> 1858;
1864 -> 1854;
1864 -> 1858;
1865 -> 1855;
1865 -> 1858;
1866 -> 1856;
1866 -> 1858;
1867 -> 1857;
1867 -> 1858;
1868 -> 1847;
1868 -> 1858;
1869 -> 1859;
1869 -> 1858;
1870 -> 1860;
1870 -> 1858;
1871 -> 1861;
1871 -> 1858;
1872 -> 1862;
1872 -> 1858;
1873 -> 1863;
1873 -> 1858;
1874 -> 1864;
1874 -> 1858;
1875 -> 1865;
1875 -> 1858;
1876 -> 1866;
1876 -> 1858;
1877 -> 1867;
1877 -> 1858;
1878 -> 1858;
1879 -> 1869;
1879 -> 1878;
1880 -> 1870;
1880 -> 1878;
1881 -> 1871;
1881 -> 1878;
1882 -> 1872;
1882 -> 1878;
1883 -> 1873;
1883 -> 1878;
1884 -> 1874;
1884 -> 1878;
1885 -> 1875;
1885 -> 1878;
1886 -> 1870;
1886 -> 1878;
1887 -> 1876;
1887 -> 1878;
1888 -> 1877;
1888 -> 1878;
1889 -> 1868;
1889 -> 1878;
1890 -> 1878;
1891 -> 1880;
1891 -> 1890;
1891 -> 1878;
1892 -> 1880;
1892 -> 1878;
1893 -> 1880;
1893 -> 1878;
1894 -> 1878;
1895 -> 1894;
1896 -> 1894;
1896 -> 1895;
1897 -> 1896;
1897 -> 1894;
1897 -> 0;
1897 -> 1895;
1898 -> 1895;
1899 -> 1896;
1899 -> 1894;
1899 -> 1898;
1899 -> 1895;
1900 -> 1897;
1900 -> 1894;
1901 -> 1894;
1901 -> 1878;
1902 -> 1878;
1903 -> 1878;
1904 -> 1893;
1904 -> 1903;
1904 -> 1878;
1905 -> 1904;
1906 -> 1901;
1906 -> 1905;
1907 -> 0;
1907 -> 1906;
1907 -> 1905;
1908 -> 1906;
1908 -> 1894;
1908 -> 1907;
1908 -> 1905;
1909 -> 1905;
1910 -> 1909;
1910 -> 1906;
1910 -> 1905;
1911 -> 1904;
1912 -> 1901;
1912 -> 1904;
1913 -> 1893;
1913 -> 1904;
1914 -> 1881;
1914 -> 1904;
1915 -> 1882;
1915 -> 1904;
1916 -> 1884;
1916 -> 1904;
1917 -> 1885;
1917 -> 1904;
1918 -> 1886;
1918 -> 1904;
1919 -> 1887;
1919 -> 1904;
1920 -> 1888;
1920 -> 1904;
1921 -> 1883;
1921 -> 1904;
1922 -> 1904;
1923 -> 1912;
1923 -> 1922;
1924 -> 1913;
1924 -> 1922;
1925 -> 1914;
1925 -> 1922;
1926 -> 1915;
1926 -> 1922;
1927 -> 1916;
1927 -> 1922;
1928 -> 1917;
1928 -> 1922;
1929 -> 1918;
1929 -> 1922;
1930 -> 1919;
1930 -> 1922;
1931 -> 1920;
1931 -> 1922;
1932 -> 1921;
1932 -> 1922;
1933 -> 1924;
1933 -> 1922;
1934 -> 1925;
1934 -> 1922;
1935 -> 1927;
1935 -> 1922;
1936 -> 1928;
1936 -> 1922;
1937 -> 1922;
1938 -> 1933;
1938 -> 1937;
1939 -> 1934;
1939 -> 1937;
1940 -> 1935;
1940 -> 1937;
1941 -> 1936;
1941 -> 1937;
1942 -> 1940;
1942 -> 0;
1942 -> 1937;
1943 -> 1937;
1944 -> 1942;
1944 -> 1938;
1944 -> 1937;
1945 -> 1939;
1945 -> 1944;
1946 -> 1938;
1946 -> 1945;
1946 -> 1892;
1946 -> 1944;
1947 -> 1946;
1947 -> 1922;
1948 -> 1904;
1949 -> 1879;
1949 -> 1904;
1950 -> 1901;
1950 -> 1904;
1951 -> 1883;
1951 -> 1904;
1952 -> 1931;
1952 -> 1904;
1953 -> 1949;
1953 -> 1950;
1953 -> 1951;
1953 -> 1952;
1953 -> 1908;
1953 -> 1910;
1953 -> 1946;
1953 -> 1904;
1954 -> 1904;
1955 -> 1953;
1955 -> 1954;
1956 -> 1953;
1956 -> 1954;
1957 -> 1954;
1958 -> 1955;
1958 -> 1957;
1959 -> 1958;
1959 -> 1954;
1960 -> 1954;
1961 -> 1956;
1961 -> 1960;
1962 -> 1961;
1962 -> 1954;
1963 -> 1959;
1963 -> 1962;
1963 -> 1954;
1964 -> 1893;
1964 -> 1904;
1965 -> 1904;
1966 -> 1964;
1966 -> 1953;
1966 -> 1965;
1966 -> 1904;
1967 -> 1904;
1968 -> 1901;
1968 -> 1967;
1969 -> 1968;
1969 -> 1953;
1969 -> 1967;
1970 -> 1969;
1970 -> 1904;
1971 -> 1904;
1972 -> 1879;
1972 -> 1971;
1973 -> 1972;
1973 -> 1953;
1973 -> 1971;
1974 -> 1973;
1974 -> 1904;
1975 -> 1904;
1976 -> 1883;
1976 -> 1975;
1976 -> 1904;
1977 -> 1904;
1978 -> 1885;
1978 -> 1977;
1979 -> 1977;
1980 -> 1978;
1980 -> 1979;
1981 -> 1980;
1981 -> 1953;
1981 -> 1979;
1982 -> 0;
1982 -> 1979;
1983 -> 1979;
1984 -> 1981;
1984 -> 1983;
1985 -> 1982;
1985 -> 1983;
1986 -> 1984;
1986 -> 1977;
1987 -> 1986;
1987 -> 1904;
1988 -> 1893;
1988 -> 1904;
1989 -> 1883;
1989 -> 1904;
1990 -> 1889;
1990 -> 1953;
1990 -> 1904;
1991 -> 1902;
1991 -> 1904;
1992 -> 1988;
1992 -> 1989;
1992 -> 1990;
1992 -> 1991;
1992 -> 1953;
1992 -> 1904;
1993 -> 1904;
1994 -> 1992;
1994 -> 1993;
1994 -> 1904;
1995 -> 1992;
1995 -> 1994;
1996 -> 1953;
1996 -> 1994;
1997 -> 1992;
1998 -> 1882;
1998 -> 1992;
1999 -> 1885;
1999 -> 1992;
2000 -> 1886;
2000 -> 1992;
2001 -> 1887;
2001 -> 1992;
2002 -> 1992;
2003 -> 1998;
2003 -> 1992;
2004 -> 1999;
2004 -> 1992;
2005 -> 2000;
2005 -> 1992;
2006 -> 2001;
2006 -> 1992;
2007 -> 1992;
2008 -> 2004;
2008 -> 1992;
2009 -> 1995;
2009 -> 1992;
2010 -> 1995;
2010 -> 1992;
2011 -> 1995;
2011 -> 1992;
2012 -> 1992;
2013 -> 2010;
2013 -> 2012;
2014 -> 2013;
2014 -> 1992;
2015 -> 1992;
2016 -> 2011;
2016 -> 2015;
2017 -> 2016;
2017 -> 1992;
2018 -> 2014;
2018 -> 2017;
2018 -> 1992;
2019 -> 1992;
2020 -> 1992;
2021 -> 2019;
2021 -> 1995;
2021 -> 2020;
2021 -> 1992;
2022 -> 1992;
2023 -> 2022;
2023 -> 1995;
2024 -> 2023;
2024 -> 1992;
2025 -> 1992;
2026 -> 2025;
2026 -> 1995;
2027 -> 2026;
2027 -> 1992;
2028 -> 1992;
2029 -> 1992;
2030 -> 1885;
2030 -> 2029;
2031 -> 2029;
2032 -> 2030;
2032 -> 2031;
2033 -> 2032;
2033 -> 1995;
2033 -> 2031;
2034 -> 0;
2034 -> 2031;
2035 -> 2031;
2036 -> 2033;
2036 -> 2035;
2037 -> 2034;
2037 -> 2035;
2038 -> 2036;
2038 -> 2029;
2039 -> 2038;
2039 -> 1992;
2040 -> 1992;
2041 -> 1995;
2041 -> 1878;
2042 -> 1878;
2043 -> 1901;
2043 -> 2042;
2044 -> 2042;
2045 -> 2043;
2045 -> 2044;
2046 -> 0;
2046 -> 2045;
2046 -> 2044;
2047 -> 2045;
2047 -> 1995;
2047 -> 2046;
2047 -> 2044;
2048 -> 2044;
2049 -> 2048;
2049 -> 2045;
2049 -> 2044;
2050 -> 2042;
2051 -> 2042;
2052 -> 2043;
2052 -> 2047;
2052 -> 2051;
2052 -> 2042;
2053 -> 2043;
2053 -> 2052;
2054 -> 1878;
2055 -> 1858;
2056 -> 1848;
2057 -> 1827;
2058 -> 1786;
2059 -> 1786;
2060 -> 1754;
2060 -> 2059;
2061 -> 2060;
2061 -> 2053;
2061 -> 2059;
2062 -> 2061;
2062 -> 1786;
2063 -> 1759;
2063 -> 1735;
2064 -> 1754;
2064 -> 1735;
2065 -> 1755;
2065 -> 1735;
2066 -> 1756;
2066 -> 1735;
2067 -> 1757;
2067 -> 1735;
2068 -> 1758;
2068 -> 1735;
2069 -> 1760;
2069 -> 1735;
2070 -> 1995;
2070 -> 1735;
2071 -> 1735;
2072 -> 2063;
2072 -> 2071;
2073 -> 2064;
2073 -> 2071;
2074 -> 2065;
2074 -> 2071;
2075 -> 2066;
2075 -> 2071;
2076 -> 2067;
2076 -> 2071;
2077 -> 2068;
2077 -> 2071;
2078 -> 2069;
2078 -> 2071;
2079 -> 2070;
2079 -> 2071;
2080 -> 1782;
2080 -> 2071;
2081 -> 2072;
2081 -> 2071;
2082 -> 2073;
2082 -> 2071;
2083 -> 2074;
2083 -> 2071;
2084 -> 2075;
2084 -> 2071;
2085 -> 2076;
2085 -> 2071;
2086 -> 2077;
2086 -> 2071;
2087 -> 2078;
2087 -> 2071;
2088 -> 2079;
2088 -> 2071;
2089 -> 2071;
2090 -> 2081;
2090 -> 2089;
2091 -> 2082;
2091 -> 2089;
2092 -> 2083;
2092 -> 2089;
2093 -> 2084;
2093 -> 2089;
2094 -> 2085;
2094 -> 2089;
2095 -> 2086;
2095 -> 2089;
2096 -> 2087;
2096 -> 2089;
2097 -> 2088;
2097 -> 2089;
2098 -> 2080;
2098 -> 2089;
2099 -> 2089;
2100 -> 2090;
2100 -> 2099;
2101 -> 2100;
2101 -> 2053;
2101 -> 2099;
2102 -> 0;
2102 -> 2099;
2103 -> 2099;
2104 -> 2101;
2104 -> 2103;
2105 -> 2102;
2105 -> 2103;
2106 -> 2104;
2106 -> 2089;
2107 -> 2089;
2108 -> 2107;
2108 -> 2089;
2109 -> 2092;
2109 -> 2089;
2110 -> 2107;
2110 -> 2089;
2111 -> 2098;
2111 -> 2053;
2111 -> 2109;
2111 -> 2110;
2111 -> 2108;
2111 -> 2089;
2112 -> 2098;
2112 -> 2111;
2112 -> 2089;
2113 -> 2071;
2114 -> 2071;
2115 -> 2073;
2115 -> 2114;
2116 -> 2115;
2116 -> 2111;
2116 -> 2114;
2117 -> 2116;
2117 -> 2071;
2118 -> 2077;
2118 -> 0;
2118 -> 2071;
2119 -> 2071;
2120 -> 2117;
2120 -> 2118;
2120 -> 2071;
2121 -> 2080;
2121 -> 2111;
2121 -> 2120;
2122 -> 2072;
2122 -> 2120;
2123 -> 2073;
2123 -> 2120;
2124 -> 2074;
2124 -> 2120;
2125 -> 2075;
2125 -> 2120;
2126 -> 2076;
2126 -> 2120;
2127 -> 2077;
2127 -> 2120;
2128 -> 2078;
2128 -> 2120;
2129 -> 2097;
2129 -> 2120;
2130 -> 2120;
2131 -> 2121;
2131 -> 2130;
2132 -> 2122;
2132 -> 2130;
2133 -> 2123;
2133 -> 2130;
2134 -> 2124;
2134 -> 2130;
2135 -> 2125;
2135 -> 2130;
2136 -> 2126;
2136 -> 2130;
2137 -> 2127;
2137 -> 2130;
2138 -> 2128;
2138 -> 2130;
2139 -> 2129;
2139 -> 2130;
2140 -> 2132;
2140 -> 2111;
2140 -> 2130;
2141 -> 0;
2141 -> 2130;
2142 -> 2130;
2143 -> 2140;
2143 -> 2142;
2144 -> 2141;
2144 -> 2142;
2145 -> 2130;
2146 -> 2132;
2146 -> 2145;
2147 -> 2146;
2147 -> 2111;
2147 -> 2145;
2148 -> 0;
2148 -> 2145;
2149 -> 2145;
2150 -> 2147;
2150 -> 2149;
2151 -> 2148;
2151 -> 2149;
2152 -> 2150;
2152 -> 2130;
2153 -> 2131;
2153 -> 2130;
2154 -> 2120;
2155 -> 1735;
2156 -> 1747;
2156 -> 2111;
2156 -> 0;
2156 -> 1746;
2157 -> 1747;
2157 -> 2111;
2157 -> 1749;
2157 -> 1746;
2158 -> 2156;
2158 -> 1726;
2159 -> 1684;
2159 -> 2111;
2160 -> 1687;
2160 -> 2111;
2161 -> 2159;
2161 -> 2111;
2162 -> 2111;
2163 -> 2160;
2163 -> 2111;
2164 -> 2111;
2165 -> 2111;
2165 -> 2164;
2166 -> 2165;
2166 -> 2111;
2166 -> 0;
2166 -> 2164;
2167 -> 2164;
2168 -> 2165;
2168 -> 2111;
2168 -> 2167;
2168 -> 2164;
2169 -> 2166;
2169 -> 2111;
2170 -> 2111;
2171 -> 2111;
2171 -> 2170;
2172 -> 2171;
2172 -> 2111;
2172 -> 0;
2172 -> 2170;
2173 -> 2172;
2173 -> 2111;
2174 -> 2111;
2175 -> 2111;
2176 -> 2111;
2177 -> 2111;
2177 -> 2176;
2178 -> 2174;
2178 -> 2176;
2179 -> 2176;
2180 -> 2178;
2180 -> 2179;
2181 -> 2178;
2181 -> 2179;
2182 -> 2178;
2182 -> 2179;
2183 -> 2178;
2183 -> 2179;
2184 -> 2179;
2185 -> 2184;
2185 -> 2179;
2186 -> 2179;
2187 -> 2186;
2187 -> 2179;
2188 -> 2180;
2188 -> 2178;
2188 -> 2179;
2189 -> 2180;
2189 -> 2188;
2190 -> 2183;
2190 -> 2188;
2191 -> 2189;
2191 -> 2188;
2191 -> 2190;
2192 -> 2189;
2192 -> 2188;
2192 -> 2191;
2193 -> 2189;
2193 -> 2188;
2194 -> 2179;
2195 -> 2192;
2195 -> 2188;
2195 -> 2194;
2195 -> 2179;
2196 -> 2193;
2196 -> 2188;
2196 -> 2194;
2196 -> 2179;
2197 -> 2195;
2197 -> 2196;
2197 -> 2179;
2198 -> 602;
2198 -> 2197;
2199 -> 2161;
2199 -> 2198;
2200 -> 2162;
2200 -> 2198;
2201 -> 2163;
2201 -> 2198;
2202 -> 2139;
2202 -> 2198;
2203 -> 2199;
2203 -> 2198;
2204 -> 2200;
2204 -> 2198;
2205 -> 2201;
2205 -> 2198;
2206 -> 2198;
2207 -> 2198;
2208 -> 2206;
2208 -> 2207;
2209 -> 2208;
2209 -> 0;
2209 -> 2207;
2210 -> 2208;
2210 -> 0;
2210 -> 2207;
2211 -> 2207;
2212 -> 0;
2212 -> 2207;
2213 -> 2208;
2213 -> 2212;
2213 -> 2207;
2214 -> 0;
2214 -> 2207;
2215 -> 2208;
2215 -> 2214;
2215 -> 2207;
2216 -> 2207;
2217 -> 0;
2217 -> 2207;
2218 -> 2208;
2218 -> 2217;
2218 -> 2207;
2219 -> 2218;
2219 -> 2207;
2220 -> 2207;
2221 -> 2219;
2221 -> 2220;
2222 -> 2220;
2223 -> 2221;
2223 -> 2222;
2223 -> 2220;
2224 -> 2198;
2225 -> 2203;
2225 -> 2224;
2225 -> 2198;
2226 -> 2198;
2227 -> 2203;
2227 -> 2198;
2228 -> 2204;
2228 -> 2198;
2229 -> 2205;
2229 -> 2198;
2230 -> 2202;
2230 -> 2198;
2231 -> 2198;
2232 -> 2226;
2232 -> 2231;
2233 -> 2226;
2233 -> 2231;
2234 -> 2226;
2234 -> 2231;
2235 -> 2227;
2235 -> 2231;
2236 -> 2226;
2236 -> 2231;
2237 -> 2228;
2237 -> 2231;
2238 -> 2229;
2238 -> 2231;
2239 -> 2230;
2239 -> 2231;
2240 -> 2233;
2240 -> 2231;
2241 -> 2234;
2241 -> 2231;
2242 -> 2236;
2242 -> 2231;
2243 -> 2237;
2243 -> 2231;
2244 -> 2231;
2245 -> 2240;
2245 -> 2244;
2246 -> 2241;
2246 -> 2244;
2247 -> 2242;
2247 -> 2244;
2248 -> 2243;
2248 -> 2244;
2249 -> 2247;
2249 -> 2245;
2249 -> 2244;
2250 -> 2245;
2250 -> 2198;
2250 -> 0;
2250 -> 2249;
2251 -> 2247;
2251 -> 0;
2251 -> 2250;
2252 -> 2250;
2253 -> 2246;
2253 -> 2251;
2254 -> 2253;
2254 -> 2231;
2255 -> 2254;
2256 -> 2235;
2256 -> 2254;
2257 -> 2236;
2257 -> 2254;
2258 -> 2238;
2258 -> 2254;
2259 -> 2239;
2259 -> 2254;
2260 -> 2254;
2261 -> 2255;
2261 -> 2260;
2262 -> 2256;
2262 -> 2260;
2263 -> 2257;
2263 -> 2260;
2264 -> 2255;
2264 -> 2260;
2265 -> 2258;
2265 -> 2260;
2266 -> 2259;
2266 -> 2260;
2267 -> 2255;
2267 -> 2260;
2268 -> 2237;
2268 -> 2260;
2269 -> 2260;
2270 -> 2260;
2271 -> 2261;
2271 -> 2198;
2271 -> 2253;
2271 -> 0;
2271 -> 2260;
2272 -> 2271;
2272 -> 2260;
2273 -> 2272;
2273 -> 2198;
2273 -> 2253;
2273 -> 2260;
2274 -> 2268;
2274 -> 2198;
2274 -> 2273;
2274 -> 2253;
2274 -> 2260;
2275 -> 2272;
2275 -> 2274;
2276 -> 2262;
2276 -> 2274;
2277 -> 2265;
2277 -> 2274;
2278 -> 2263;
2278 -> 2274;
2279 -> 2270;
2279 -> 2274;
2280 -> 2274;
2281 -> 2275;
2281 -> 2280;
2282 -> 2276;
2282 -> 2280;
2283 -> 2277;
2283 -> 2280;
2284 -> 2278;
2284 -> 2280;
2285 -> 2279;
2285 -> 2280;
2286 -> 2281;
2286 -> 2198;
2286 -> 2274;
2286 -> 2253;
2286 -> 2280;
2287 -> 2286;
2288 -> 2282;
2288 -> 2287;
2288 -> 2286;
2289 -> 2284;
2289 -> 0;
2289 -> 2286;
2290 -> 2288;
2290 -> 2289;
2290 -> 2286;
2291 -> 2281;
2291 -> 2290;
2292 -> 2291;
2292 -> 2198;
2292 -> 2274;
2292 -> 2253;
2292 -> 2290;
2293 -> 2291;
2293 -> 2290;
2294 -> 2291;
2294 -> 2198;
2294 -> 2274;
2294 -> 2253;
2294 -> 2282;
2294 -> 2290;
2295 -> 2284;
2295 -> 2290;
2296 -> 2290;
2297 -> 2295;
2297 -> 2296;
2298 -> 2294;
2298 -> 2297;
2298 -> 2290;
2299 -> 2280;
2300 -> 2280;
2301 -> 2300;
2301 -> 2274;
2302 -> 2301;
2303 -> 2268;
2303 -> 2302;
2304 -> 2303;
2304 -> 2274;
2304 -> 2302;
2305 -> 0;
2305 -> 2302;
2306 -> 2302;
2307 -> 2304;
2307 -> 2306;
2308 -> 2305;
2308 -> 2306;
2309 -> 2307;
2309 -> 2301;
2310 -> 2263;
2310 -> 0;
2310 -> 2309;
2311 -> 2309;
2312 -> 2263;
2312 -> 0;
2312 -> 2310;
2313 -> 2310;
2314 -> 2312;
2315 -> 2314;
2315 -> 2312;
2316 -> 2315;
2317 -> 2316;
2317 -> 2315;
2318 -> 2272;
2318 -> 2315;
2319 -> 2263;
2319 -> 2315;
2320 -> 2264;
2320 -> 2315;
2321 -> 2315;
2322 -> 2319;
2322 -> 2321;
2323 -> 2320;
2323 -> 2321;
2324 -> 2322;
2324 -> 0;
2324 -> 2321;
2325 -> 2321;
2326 -> 2324;
2326 -> 2321;
2327 -> 2323;
2327 -> 2326;
2328 -> 2269;
2328 -> 2315;
2329 -> 2266;
2329 -> 2315;
2330 -> 2267;
2330 -> 2315;
2331 -> 2315;
2332 -> 2318;
2332 -> 2331;
2333 -> 2327;
2333 -> 2331;
2334 -> 2328;
2334 -> 2331;
2335 -> 2329;
2335 -> 2331;
2336 -> 2330;
2336 -> 2331;
2337 -> 2268;
2337 -> 2331;
2338 -> 2337;
2338 -> 2274;
2338 -> 2331;
2339 -> 0;
2339 -> 2331;
2340 -> 2331;
2341 -> 2338;
2341 -> 2340;
2342 -> 2339;
2342 -> 2340;
2343 -> 2332;
2343 -> 2331;
2344 -> 2333;
2344 -> 2331;
2345 -> 2334;
2345 -> 2331;
2346 -> 2335;
2346 -> 2331;
2347 -> 2336;
2347 -> 2331;
2348 -> 2331;
2349 -> 2343;
2349 -> 2348;
2350 -> 2344;
2350 -> 2348;
2351 -> 2345;
2351 -> 2348;
2352 -> 2346;
2352 -> 2348;
2353 -> 2347;
2353 -> 2348;
2354 -> 2337;
2354 -> 2348;
2355 -> 2349;
2355 -> 2348;
2356 -> 2350;
2356 -> 2348;
2357 -> 2351;
2357 -> 2348;
2358 -> 2352;
2358 -> 2348;
2359 -> 2353;
2359 -> 2348;
2360 -> 2348;
2361 -> 2355;
2361 -> 2360;
2362 -> 2356;
2362 -> 2360;
2363 -> 2357;
2363 -> 2360;
2364 -> 2358;
2364 -> 2360;
2365 -> 2359;
2365 -> 2360;
2366 -> 2354;
2366 -> 2274;
2366 -> 2360;
2367 -> 2366;
2367 -> 2274;
2367 -> 2360;
2368 -> 2360;
2369 -> 2367;
2369 -> 2368;
2369 -> 2360;
2370 -> 2361;
2370 -> 2369;
2371 -> 2367;
2371 -> 2369;
2372 -> 2362;
2372 -> 2369;
2373 -> 2363;
2373 -> 2369;
2374 -> 2364;
2374 -> 2369;
2375 -> 2369;
2376 -> 2369;
2377 -> 2370;
2377 -> 2376;
2378 -> 2371;
2378 -> 2376;
2379 -> 2372;
2379 -> 2376;
2380 -> 2373;
2380 -> 2376;
2381 -> 2374;
2381 -> 2376;
2382 -> 2375;
2382 -> 2376;
2383 -> 2366;
2383 -> 2376;
2384 -> 2383;
2384 -> 2274;
2384 -> 2376;
2385 -> 0;
2385 -> 2376;
2386 -> 2376;
2387 -> 2384;
2387 -> 2386;
2388 -> 2385;
2388 -> 2386;
2389 -> 2377;
2389 -> 2376;
2390 -> 2378;
2390 -> 2376;
2391 -> 2379;
2391 -> 2376;
2392 -> 2380;
2392 -> 2376;
2393 -> 2381;
2393 -> 2376;
2394 -> 2382;
2394 -> 2376;
2395 -> 2376;
2396 -> 2389;
2396 -> 2395;
2397 -> 2390;
2397 -> 2395;
2398 -> 2391;
2398 -> 2395;
2399 -> 2392;
2399 -> 2395;
2400 -> 2393;
2400 -> 2395;
2401 -> 2394;
2401 -> 2395;
2402 -> 2396;
2402 -> 2395;
2403 -> 2397;
2403 -> 2395;
2404 -> 2398;
2404 -> 2395;
2405 -> 2399;
2405 -> 2395;
2406 -> 2397;
2406 -> 2274;
2406 -> 2395;
2407 -> 2400;
2407 -> 2395;
2408 -> 2401;
2408 -> 2395;
2409 -> 2395;
2410 -> 2402;
2410 -> 2409;
2411 -> 2403;
2411 -> 2409;
2412 -> 2404;
2412 -> 2409;
2413 -> 2405;
2413 -> 2409;
2414 -> 2406;
2414 -> 2409;
2415 -> 2407;
2415 -> 2409;
2416 -> 2408;
2416 -> 2409;
2417 -> 2409;
2418 -> 2410;
2418 -> 2417;
2418 -> 2409;
2419 -> 2409;
2420 -> 2411;
2420 -> 2419;
2420 -> 2409;
2421 -> 2411;
2421 -> 2274;
2421 -> 2409;
2422 -> 2411;
2422 -> 2409;
2423 -> 2409;
2424 -> 2410;
2424 -> 2198;
2424 -> 2274;
2424 -> 2253;
2424 -> 2409;
2425 -> 2410;
2425 -> 2424;
2426 -> 2411;
2426 -> 2424;
2427 -> 2415;
2427 -> 2424;
2428 -> 2416;
2428 -> 2424;
2429 -> 2424;
2430 -> 2425;
2430 -> 2429;
2431 -> 2426;
2431 -> 2429;
2432 -> 2427;
2432 -> 2429;
2433 -> 2428;
2433 -> 2429;
2434 -> 2431;
2434 -> 2429;
2435 -> 2429;
2436 -> 2430;
2436 -> 2435;
2436 -> 2429;
2437 -> 2431;
2437 -> 2274;
2437 -> 2429;
2438 -> 2429;
2439 -> 2430;
2439 -> 2198;
2439 -> 2274;
2439 -> 2253;
2439 -> 2429;
2440 -> 2430;
2440 -> 2198;
2440 -> 2274;
2440 -> 2253;
2440 -> 2429;
2441 -> 2429;
2442 -> 2440;
2442 -> 2441;
2442 -> 2429;
2443 -> 2442;
2443 -> 2429;
2444 -> 2431;
2444 -> 2443;
2445 -> 2443;
2446 -> 2443;
2446 -> 2445;
2447 -> 2443;
2447 -> 2445;
2448 -> 2444;
2448 -> 2445;
2449 -> 2448;
2449 -> 2445;
2450 -> 2445;
2451 -> 2446;
2451 -> 2450;
2451 -> 2445;
2452 -> 2447;
2452 -> 2445;
2453 -> 2448;
2453 -> 2452;
2454 -> 2452;
2455 -> 2453;
2455 -> 2454;
2455 -> 2452;
2456 -> 2455;
2456 -> 2452;
2457 -> 2453;
2457 -> 2274;
2457 -> 2456;
2458 -> 2457;
2458 -> 2446;
2458 -> 2452;
2459 -> 2317;
2459 -> 2458;
2459 -> 2315;
2460 -> 2459;
2461 -> 2460;
2461 -> 2459;
2462 -> 2272;
2462 -> 2459;
2463 -> 2263;
2463 -> 0;
2463 -> 2461;
2464 -> 2461;
2465 -> 2263;
2465 -> 0;
2465 -> 2463;
2466 -> 2463;
2467 -> 2263;
2467 -> 0;
2467 -> 2465;
2468 -> 2465;
2469 -> 2263;
2469 -> 0;
2469 -> 2467;
2470 -> 2467;
2471 -> 2272;
2471 -> 2469;
2472 -> 2469;
2473 -> 2471;
2473 -> 2472;
2474 -> 0;
2474 -> 2472;
2475 -> 2473;
2475 -> 2472;
2476 -> 2472;
2477 -> 2472;
2478 -> 2474;
2478 -> 2477;
2479 -> 2475;
2479 -> 2477;
2480 -> 2476;
2480 -> 2477;
2481 -> 2476;
2481 -> 2477;
2482 -> 2478;
2482 -> 2481;
2482 -> 2477;
2483 -> 2479;
2483 -> 2481;
2483 -> 2477;
2484 -> 2480;
2484 -> 2481;
2484 -> 2477;
2485 -> 2476;
2485 -> 2469;
2486 -> 2485;
2486 -> 2254;
2487 -> 2254;
2488 -> 2486;
2488 -> 2487;
2489 -> 2232;
2489 -> 2487;
2490 -> 2487;
2491 -> 2489;
2491 -> 2490;
2492 -> 2491;
2492 -> 2462;
2492 -> 2490;
2493 -> 2492;
2493 -> 2487;
2494 -> 2493;
2494 -> 2488;
2494 -> 2482;
2494 -> 2487;
2495 -> 2494;
2496 -> 2495;
2496 -> 2494;
2497 -> 2488;
2497 -> 2496;
2498 -> 2496;
2499 -> 2497;
2499 -> 2498;
2500 -> 2489;
2500 -> 2498;
2501 -> 2499;
2501 -> 2482;
2501 -> 2500;
2501 -> 2498;
2502 -> 2500;
2502 -> 2462;
2502 -> 2501;
2502 -> 2498;
2503 -> 2499;
2503 -> 2483;
2503 -> 2498;
2504 -> 2500;
2504 -> 2502;
2504 -> 2503;
2504 -> 2498;
2505 -> 2499;
2505 -> 2484;
2505 -> 2500;
2505 -> 2498;
2506 -> 2496;
2507 -> 2254;
2508 -> 2254;
2508 -> 2504;
2508 -> 2505;
2508 -> 2231;
2509 -> 2198;
2510 -> 2509;
2510 -> 2504;
2511 -> 2510;
2511 -> 2198;
2512 -> 2511;
2513 -> 2161;
2513 -> 2512;
2513 -> 2511;
2514 -> 2111;
2514 -> 2511;
2515 -> 2511;
2516 -> 2162;
2516 -> 2515;
2517 -> 2516;
2517 -> 2504;
2517 -> 2515;
2518 -> 0;
2518 -> 2515;
2519 -> 2515;
2520 -> 2517;
2520 -> 2519;
2521 -> 2518;
2521 -> 2519;
2522 -> 2520;
2522 -> 2511;
2523 -> 2511;
2524 -> 2514;
2524 -> 2523;
2525 -> 2522;
2525 -> 2523;
2526 -> 2198;
2526 -> 2523;
2527 -> 2523;
2528 -> 2527;
2528 -> 2523;
2529 -> 2524;
2529 -> 2523;
2530 -> 2527;
2530 -> 2523;
2531 -> 2526;
2531 -> 2504;
2531 -> 2529;
2531 -> 2530;
2531 -> 2505;
2531 -> 2528;
2531 -> 2523;
2532 -> 2523;
2533 -> 2532;
2533 -> 2511;
2534 -> 2513;
2534 -> 2533;
2534 -> 2511;
2535 -> 2511;
2536 -> 2111;
2537 -> 1682;
2537 -> 2536;
2538 -> 2537;
2538 -> 2531;
2538 -> 0;
2538 -> 2536;
2539 -> 2538;
2539 -> 2111;
2540 -> 2111;
2540 -> 2539;
2541 -> 1686;
2541 -> 0;
2541 -> 2111;
2542 -> 2111;
2543 -> 2540;
2543 -> 1681;
2544 -> 1653;
2545 -> 1590;
2545 -> 1588;
2546 -> 1589;
2546 -> 1588;
2547 -> 2432;
2547 -> 1588;
2548 -> 2545;
2548 -> 2546;
2548 -> 2547;
2548 -> 2531;
2548 -> 1588;
2549 -> 1588;
2550 -> 1588;
2551 -> 1593;
2551 -> 2550;
2551 -> 1588;
2552 -> 1624;
2552 -> 1588;
2553 -> 1588;
2554 -> 2552;
2554 -> 2553;
2555 -> 2553;
2556 -> 2554;
2556 -> 2555;
2557 -> 2555;
2558 -> 2556;
2558 -> 2557;
2559 -> 2558;
2559 -> 2548;
2559 -> 2557;
2560 -> 2559;
2560 -> 2553;
2561 -> 2553;
2562 -> 2554;
2562 -> 2561;
2563 -> 2562;
2563 -> 2548;
2563 -> 2561;
2564 -> 2563;
2564 -> 2553;
2565 -> 2564;
2565 -> 2548;
2566 -> 2565;
2567 -> 2549;
2567 -> 1588;
2568 -> 2567;
2569 -> 1624;
2569 -> 2567;
2570 -> 1595;
2570 -> 2567;
2571 -> 2567;
2572 -> 1589;
2572 -> 2567;
2573 -> 1590;
2573 -> 2567;
2574 -> 1592;
2574 -> 2567;
2575 -> 2568;
2575 -> 2567;
2576 -> 1593;
2576 -> 2567;
2577 -> 1631;
2577 -> 2567;
2578 -> 2567;
2579 -> 2569;
2579 -> 2578;
2580 -> 2570;
2580 -> 2578;
2581 -> 2571;
2581 -> 2578;
2582 -> 2572;
2582 -> 2578;
2583 -> 2573;
2583 -> 2578;
2584 -> 2574;
2584 -> 2578;
2585 -> 2575;
2585 -> 2578;
2586 -> 2576;
2586 -> 2578;
2587 -> 2577;
2587 -> 2578;
2588 -> 1594;
2588 -> 2578;
2589 -> 2579;
2589 -> 2578;
2590 -> 2580;
2590 -> 2578;
2591 -> 2581;
2591 -> 2578;
2592 -> 2582;
2592 -> 2578;
2593 -> 2583;
2593 -> 2578;
2594 -> 2584;
2594 -> 2578;
2595 -> 2585;
2595 -> 2578;
2596 -> 2586;
2596 -> 2578;
2597 -> 2587;
2597 -> 2578;
2598 -> 2578;
2599 -> 2589;
2599 -> 2598;
2600 -> 2590;
2600 -> 2598;
2601 -> 2591;
2601 -> 2598;
2602 -> 2592;
2602 -> 2598;
2603 -> 2593;
2603 -> 2598;
2604 -> 2594;
2604 -> 2598;
2605 -> 2595;
2605 -> 2598;
2606 -> 2596;
2606 -> 2598;
2607 -> 2597;
2607 -> 2598;
2608 -> 2588;
2608 -> 2598;
2609 -> 2598;
2610 -> 2602;
2610 -> 2609;
2610 -> 2598;
2611 -> 2598;
2612 -> 2603;
2612 -> 2611;
2612 -> 2598;
2613 -> 2598;
2614 -> 2599;
2614 -> 2613;
2615 -> 2614;
2615 -> 2548;
2615 -> 2613;
2616 -> 2615;
2616 -> 2598;
2617 -> 2598;
2618 -> 2598;
2619 -> 2599;
2619 -> 2618;
2620 -> 2618;
2621 -> 2619;
2621 -> 2620;
2622 -> 2621;
2622 -> 2548;
2622 -> 2620;
2623 -> 2622;
2623 -> 2598;
2624 -> 2623;
2625 -> 2616;
2625 -> 2548;
2625 -> 2624;
2625 -> 2623;
2626 -> 2625;
2627 -> 2626;
2627 -> 2625;
2628 -> 2625;
2629 -> 2627;
2629 -> 2628;
2629 -> 2625;
2630 -> 2627;
2630 -> 2626;
2630 -> 0;
2630 -> 2625;
2631 -> 2626;
2631 -> 0;
2631 -> 2629;
2632 -> 2631;
2632 -> 2608;
2632 -> 2626;
2632 -> 2629;
2633 -> 2604;
2633 -> 2629;
2634 -> 2626;
2634 -> 2633;
2635 -> 2603;
2635 -> 2633;
2636 -> 2602;
2636 -> 2633;
2637 -> 2633;
2638 -> 2634;
2638 -> 2637;
2639 -> 2635;
2639 -> 2637;
2640 -> 2636;
2640 -> 2637;
2641 -> 2637;
2642 -> 2638;
2642 -> 2641;
2642 -> 2637;
2643 -> 2626;
2643 -> 2625;
2644 -> 2643;
2644 -> 2638;
2644 -> 0;
2644 -> 2578;
2645 -> 2582;
2645 -> 2644;
2646 -> 2644;
2647 -> 2643;
2647 -> 2644;
2648 -> 2583;
2648 -> 2644;
2649 -> 2644;
2650 -> 2645;
2650 -> 2649;
2651 -> 2646;
2651 -> 2649;
2652 -> 2647;
2652 -> 2649;
2653 -> 2648;
2653 -> 2649;
2654 -> 2588;
2654 -> 2649;
2655 -> 2652;
2655 -> 2638;
2655 -> 2649;
2656 -> 2649;
2657 -> 2643;
2657 -> 2578;
2658 -> 2657;
2658 -> 2638;
2658 -> 0;
2658 -> 2567;
2659 -> 1588;
2660 -> 1624;
2660 -> 2659;
2661 -> 2659;
2662 -> 2660;
2662 -> 2661;
2663 -> 0;
2663 -> 2662;
2663 -> 2661;
2664 -> 2662;
2664 -> 2638;
2664 -> 2663;
2664 -> 2661;
2665 -> 2661;
2666 -> 2665;
2666 -> 2662;
2666 -> 2661;
2667 -> 2659;
2668 -> 2659;
2669 -> 1588;
2670 -> 1589;
2670 -> 2664;
2670 -> 1588;
2671 -> 1588;
2672 -> 2670;
2672 -> 2671;
2673 -> 1594;
2673 -> 2671;
2674 -> 2657;
2674 -> 1588;
2675 -> 1588;
2676 -> 2672;
2676 -> 2675;
2677 -> 2674;
2677 -> 2675;
2678 -> 2677;
2678 -> 2675;
2679 -> 2677;
2679 -> 2675;
2680 -> 2679;
2680 -> 2675;
2681 -> 2680;
2681 -> 2675;
2682 -> 2676;
2682 -> 2681;
2683 -> 2681;
2684 -> 2682;
2684 -> 2683;
2685 -> 2684;
2685 -> 2682;
2685 -> 2683;
2686 -> 2684;
2687 -> 2684;
2688 -> 2684;
2689 -> 2686;
2689 -> 2684;
2690 -> 2687;
2690 -> 2684;
2691 -> 2684;
2692 -> 2684;
2692 -> 0;
2693 -> 2684;
2694 -> 2688;
2694 -> 2684;
2695 -> 2689;
2695 -> 2684;
2696 -> 2690;
2696 -> 2684;
2697 -> 2688;
2697 -> 2684;
2698 -> 2688;
2698 -> 0;
2698 -> 2684;
2699 -> 2688;
2699 -> 0;
2699 -> 2684;
2700 -> 2696;
2700 -> 2684;
2701 -> 2700;
2701 -> 2684;
2702 -> 2694;
2702 -> 2684;
2703 -> 2695;
2703 -> 2684;
2704 -> 2697;
2704 -> 2684;
2705 -> 2684;
2706 -> 2702;
2706 -> 2705;
2706 -> 2684;
2707 -> 2684;
2708 -> 2694;
2708 -> 2684;
2709 -> 2684;
2710 -> 2707;
2710 -> 2709;
2710 -> 2684;
2711 -> 2694;
2711 -> 2684;
2712 -> 2711;
2712 -> 2684;
2713 -> 2700;
2713 -> 2712;
2714 -> 2684;
2714 -> 1446;
2715 -> 2714;
2715 -> 2683;
2715 -> 1446;
2716 -> 2715;
2716 -> 0;
2716 -> 1446;
2717 -> 2716;
2717 -> 1440;
2718 -> 1456;
2718 -> 2694;
2718 -> 577;
2719 -> 2694;
2720 -> 2694;
2721 -> 1461;
2721 -> 2720;
2721 -> 2694;
2722 -> 1459;
2722 -> 2694;
2723 -> 2722;
2723 -> 2694;
2724 -> 2694;
2725 -> 2723;
2725 -> 2694;
2726 -> 2724;
2726 -> 2694;
2727 -> 2724;
2727 -> 2694;
2728 -> 2724;
2728 -> 2694;
2729 -> 2725;
2729 -> 2694;
2730 -> 2728;
2730 -> 2694;
2731 -> 2694;
2732 -> 2694;
2733 -> 2732;
2733 -> 2694;
2734 -> 2694;
2735 -> 2694;
2736 -> 2694;
2736 -> 2735;
2737 -> 2735;
2738 -> 2737;
2738 -> 2694;
2739 -> 2694;
2739 -> 0;
2740 -> 2694;
2741 -> 2739;
2741 -> 2694;
2742 -> 2741;
2743 -> 2742;
2743 -> 2694;
2744 -> 2694;
2744 -> 577;
2745 -> 2694;
2746 -> 2745;
2746 -> 2694;
2747 -> 2745;
2747 -> 2694;
2748 -> 2746;
2748 -> 2694;
2749 -> 2694;
2750 -> 2748;
2750 -> 2694;
2751 -> 2747;
2751 -> 2694;
2752 -> 2694;
2753 -> 2745;
2753 -> 2694;
2754 -> 2745;
2755 -> 2745;
2756 -> 2754;
2756 -> 2745;
2757 -> 2755;
2757 -> 2745;
2758 -> 2745;
2759 -> 2745;
2759 -> 0;
2760 -> 2745;
2761 -> 2756;
2761 -> 2745;
2762 -> 2757;
2762 -> 2745;
2763 -> 2745;
2764 -> 2745;
2764 -> 0;
2765 -> 2745;
2765 -> 0;
2766 -> 2762;
2766 -> 2745;
2767 -> 2766;
2767 -> 2745;
2768 -> 2745;
2769 -> 2761;
2769 -> 2745;
2770 -> 2763;
2770 -> 2745;
2771 -> 2745;
2772 -> 2768;
2772 -> 2771;
2772 -> 2745;
2773 -> 2745;
2774 -> 2745;
2775 -> 2745;
2776 -> 2773;
2776 -> 2775;
2776 -> 2745;
2777 -> 2745;
2778 -> 2777;
2778 -> 2745;
2779 -> 2766;
2779 -> 2778;
2780 -> 2745;
2780 -> 1446;
2781 -> 2780;
2781 -> 2745;
2781 -> 1446;
2782 -> 2781;
2782 -> 0;
2782 -> 1446;
2783 -> 2782;
2783 -> 1440;
2784 -> 2745;
2784 -> 827;
2784 -> 821;
2785 -> 2745;
2785 -> 1126;
2786 -> 2745;
2787 -> 2745;
2788 -> 2745;
2788 -> 961;
2789 -> 2745;
2789 -> 0;
2790 -> 2745;
2790 -> 1185;
2791 -> 2790;
2791 -> 1198;
2792 -> 2745;
2792 -> 1185;
2793 -> 2792;
2793 -> 1203;
2794 -> 2745;
2795 -> 2745;
2796 -> 2794;
2796 -> 2745;
2797 -> 2745;
2798 -> 2796;
2798 -> 2745;
2799 -> 2795;
2799 -> 2745;
2800 -> 2745;
2801 -> 2794;
2801 -> 2745;
2802 -> 2794;
2803 -> 2794;
2804 -> 2802;
2804 -> 2794;
2805 -> 2803;
2805 -> 2794;
2806 -> 2794;
2807 -> 2794;
2807 -> 0;
2808 -> 2794;
2809 -> 2804;
2809 -> 2794;
2810 -> 2805;
2810 -> 2794;
2811 -> 2794;
2812 -> 2794;
2812 -> 0;
2813 -> 2794;
2813 -> 0;
2814 -> 2810;
2814 -> 2794;
2815 -> 2814;
2815 -> 2794;
2816 -> 2794;
2817 -> 2809;
2817 -> 2794;
2818 -> 2811;
2818 -> 2794;
2819 -> 2794;
2820 -> 2816;
2820 -> 2819;
2820 -> 2794;
2821 -> 2794;
2822 -> 2794;
2823 -> 2794;
2824 -> 2821;
2824 -> 2823;
2824 -> 2794;
2825 -> 2794;
2826 -> 2825;
2826 -> 2794;
2827 -> 2814;
2827 -> 2826;
2828 -> 2794;
2828 -> 1446;
2829 -> 2828;
2829 -> 2794;
2829 -> 1446;
2830 -> 2829;
2830 -> 0;
2830 -> 1446;
2831 -> 2830;
2831 -> 1440;
2832 -> 1456;
2832 -> 2794;
2832 -> 577;
2833 -> 2794;
2834 -> 2794;
2835 -> 1461;
2835 -> 2834;
2835 -> 2794;
2836 -> 1459;
2836 -> 2794;
2837 -> 2836;
2837 -> 2794;
2838 -> 2794;
2839 -> 2837;
2839 -> 2794;
2840 -> 2838;
2840 -> 2794;
2841 -> 2838;
2841 -> 2794;
2842 -> 2838;
2842 -> 2794;
2843 -> 2839;
2843 -> 2794;
2844 -> 2842;
2844 -> 2794;
2845 -> 2794;
2846 -> 2794;
2847 -> 2846;
2847 -> 2794;
2848 -> 2794;
2849 -> 2794;
2850 -> 2794;
2850 -> 2849;
2851 -> 2849;
2852 -> 2851;
2852 -> 2794;
2853 -> 2794;
2853 -> 0;
2854 -> 2794;
2855 -> 2853;
2855 -> 2794;
2856 -> 2855;
2857 -> 2856;
2857 -> 2794;
2858 -> 2794;
2858 -> 577;
2859 -> 2794;
2860 -> 2794;
2861 -> 2794;
2862 -> 2860;
2862 -> 2794;
2863 -> 2859;
2863 -> 2794;
2864 -> 2794;
2865 -> 2794;
2866 -> 2805;
2866 -> 2802;
2867 -> 2802;
2868 -> 2802;
2868 -> 2794;
2868 -> 0;
2869 -> 2802;
2870 -> 2804;
2870 -> 2802;
2871 -> 2866;
2871 -> 2802;
2872 -> 2804;
2872 -> 2802;
2873 -> 2802;
2873 -> 0;
2874 -> 2802;
2874 -> 0;
2875 -> 2871;
2875 -> 2802;
2876 -> 2875;
2876 -> 2802;
2877 -> 2802;
2878 -> 2870;
2878 -> 2802;
2879 -> 2872;
2879 -> 2802;
2880 -> 2802;
2881 -> 2877;
2881 -> 2880;
2881 -> 2802;
2882 -> 2802;
2883 -> 2802;
2884 -> 2802;
2885 -> 2882;
2885 -> 2884;
2885 -> 2802;
2886 -> 2802;
2887 -> 2886;
2887 -> 2802;
2888 -> 2875;
2888 -> 2887;
2889 -> 603;
2889 -> 577;
2890 -> 603;
2890 -> 577;
2891 -> 603;
2891 -> 577;
2892 -> 2889;
2892 -> 577;
2893 -> 577;
2894 -> 2890;
2894 -> 577;
2895 -> 577;
2896 -> 577;
2897 -> 2892;
2897 -> 2896;
2898 -> 2893;
2898 -> 2896;
2899 -> 2894;
2899 -> 2896;
2900 -> 2895;
2900 -> 2896;
2901 -> 2891;
2901 -> 2896;
2902 -> 2897;
2902 -> 2896;
2903 -> 2898;
2903 -> 2896;
2904 -> 2899;
2904 -> 2896;
2905 -> 2900;
2905 -> 2896;
2906 -> 2896;
2907 -> 2902;
2907 -> 2906;
2908 -> 2903;
2908 -> 2906;
2909 -> 2904;
2909 -> 2906;
2910 -> 2905;
2910 -> 2906;
2911 -> 2901;
2911 -> 2906;
2912 -> 2911;
2912 -> 2906;
2913 -> 2911;
2913 -> 2906;
2914 -> 2911;
2914 -> 2906;
2915 -> 2911;
2915 -> 2906;
2916 -> 2906;
2917 -> 2907;
2917 -> 2916;
2917 -> 2906;
2918 -> 2906;
2919 -> 2910;
2919 -> 2918;
2919 -> 2906;
2920 -> 2906;
2921 -> 2910;
2921 -> 2920;
2921 -> 2906;
2922 -> 2907;
2922 -> 2911;
2922 -> 2906;
2923 -> 2908;
2923 -> 2911;
2923 -> 2906;
2924 -> 2909;
2924 -> 2911;
2924 -> 2906;
2925 -> 2910;
2925 -> 2911;
2925 -> 2906;
2926 -> 603;
2926 -> 2802;
2926 -> 2922;
2926 -> 2923;
2926 -> 2924;
2926 -> 2925;
2926 -> 574;
2927 -> 2926;
2927 -> 574;
2928 -> 576;
2928 -> 574;
2929 -> 574;
2930 -> 2927;
2930 -> 2929;
2931 -> 2928;
2931 -> 2929;
2932 -> 2930;
2932 -> 2929;
2933 -> 2931;
2933 -> 2929;
2934 -> 2929;
2935 -> 2932;
2935 -> 2934;
2936 -> 2933;
2936 -> 2934;
2937 -> 2935;
2937 -> 2934;
2938 -> 2936;
2938 -> 2934;
2939 -> 2934;
2940 -> 2934;
2941 -> 2937;
2941 -> 2940;
2942 -> 2938;
2942 -> 2940;
2943 -> 2939;
2943 -> 2940;
2944 -> 2940;
2945 -> 2942;
2945 -> 2944;
2945 -> 2940;
2946 -> 2942;
2946 -> 2940;
2947 -> 2942;
2947 -> 2940;
2948 -> 2941;
2948 -> 2940;
2949 -> 2943;
2949 -> 2946;
2949 -> 2947;
2949 -> 2940;
2950 -> 2948;
2950 -> 2949;
2950 -> 2940;
2951 -> 2942;
2951 -> 2940;
2952 -> 2940;
2953 -> 2950;
2953 -> 2952;
2953 -> 2940;
2954 -> 2940;
2956 -> 2955;
2958 -> 2957;
2959 -> 2942;
2959 -> 2940;
2960 -> 2941;
2960 -> 2940;
2961 -> 2940;
2962 -> 2959;
2962 -> 2961;
2963 -> 2960;
2963 -> 2961;
2964 -> 2961;
2965 -> 2961;
2966 -> 2963;
2966 -> 2961;
2967 -> 2966;
2967 -> 2950;
2967 -> 2961;
2968 -> 2967;
2968 -> 2961;
2969 -> 2965;
2969 -> 2968;
2970 -> 2969;
2970 -> 2964;
2970 -> 2961;
2971 -> 2969;
2971 -> 2964;
2971 -> 2961;
2972 -> 2971;
2972 -> 2961;
2973 -> 2962;
2973 -> 2961;
2974 -> 2962;
2974 -> 2961;
2975 -> 2962;
2975 -> 2961;
2976 -> 2961;
2977 -> 2975;
2977 -> 2976;
2979 -> 2978;
2980 -> 2978;
2981 -> 2980;
2981 -> 2976;
2982 -> 2976;
2983 -> 2977;
2983 -> 2976;
2984 -> 2976;
2985 -> 2984;
2985 -> 2961;
2986 -> 2963;
2986 -> 2985;
2987 -> 2985;
2988 -> 2986;
2988 -> 2987;
2989 -> 2988;
2989 -> 2987;
2990 -> 2987;
2991 -> 2980;
2991 -> 2987;
2992 -> 2989;
2992 -> 2990;
2992 -> 2991;
2992 -> 2950;
2992 -> 2987;
2993 -> 2961;
2994 -> 2993;
2994 -> 2961;
2995 -> 2961;
2996 -> 2961;
2997 -> 2993;
2997 -> 2996;
2997 -> 2994;
2997 -> 2961;
2998 -> 2961;
2999 -> 2962;
2999 -> 2961;
3000 -> 2993;
3000 -> 2961;
3001 -> 2998;
3001 -> 2961;
3002 -> 2961;
3003 -> 3000;
3003 -> 3002;
3004 -> 3001;
3004 -> 3002;
3005 -> 3004;
3005 -> 2998;
3005 -> 3002;
3006 -> 3002;
3007 -> 3006;
3007 -> 3005;
3007 -> 3002;
3008 -> 2961;
3009 -> 2961;
3010 -> 2993;
3010 -> 3009;
3010 -> 2997;
3010 -> 2961;
3011 -> 2961;
3012 -> 2992;
3012 -> 2961;
3013 -> 2961;
3014 -> 3012;
3014 -> 2961;
3015 -> 2961;
3016 -> 3013;
3016 -> 3015;
3016 -> 2961;
3017 -> 2961;
3018 -> 2993;
3018 -> 3017;
3018 -> 3010;
3018 -> 2961;
3019 -> 2998;
3019 -> 2961;
3020 -> 3011;
3020 -> 2961;
3024 -> 3022;
3024 -> 3021;
3025 -> 3023;
3025 -> 3021;
3026 -> 3021;
3027 -> 0;
3027 -> 2961;
3028 -> 2961;
3029 -> 2961;
3030 -> 3019;
3030 -> 3029;
3031 -> 3020;
3031 -> 3029;
3032 -> 3027;
3032 -> 3029;
3033 -> 3028;
3033 -> 3029;
3034 -> 3028;
3034 -> 3029;
3035 -> 3029;
3036 -> 3033;
3036 -> 3035;
3036 -> 3029;
3037 -> 3036;
3037 -> 3029;
3038 -> 0;
3040 -> 3038;
3040 -> 3039;
3041 -> 3039;
3043 -> 3042;
3045 -> 3044;
3047 -> 3046;
3048 -> 3041;
3049 -> 3041;
3049 -> 3039;
3050 -> 3040;
3050 -> 3041;
3050 -> 3039;
3051 -> 3039;
3052 -> 3029;
3053 -> 3052;
3053 -> 3034;
3053 -> 3029;
3054 -> 3030;
3054 -> 3029;
3055 -> 3031;
3055 -> 3029;
3056 -> 3032;
3056 -> 3029;
3057 -> 3054;
3057 -> 3029;
3058 -> 3055;
3058 -> 3029;
3059 -> 3053;
3059 -> 3029;
3060 -> 3029;
3061 -> 3057;
3061 -> 3060;
3062 -> 3058;
3062 -> 3060;
3063 -> 3059;
3063 -> 3060;
3064 -> 3037;
3064 -> 3060;
3065 -> 3061;
3065 -> 3060;
3066 -> 3061;
3066 -> 3054;
3066 -> 3060;
3067 -> 3062;
3067 -> 3060;
3068 -> 3062;
3068 -> 3055;
3068 -> 3060;
3069 -> 3060;
3070 -> 3065;
3070 -> 3069;
3071 -> 3066;
3071 -> 3069;
3072 -> 3067;
3072 -> 3069;
3073 -> 3068;
3073 -> 3069;
3074 -> 3064;
3074 -> 3069;
3075 -> 3070;
3075 -> 3069;
3076 -> 3071;
3076 -> 3069;
3077 -> 3072;
3077 -> 3069;
3078 -> 3073;
3078 -> 3069;
3079 -> 3069;
3080 -> 3075;
3080 -> 3079;
3081 -> 3076;
3081 -> 3079;
3082 -> 3077;
3082 -> 3079;
3083 -> 3078;
3083 -> 3079;
3084 -> 3074;
3084 -> 3079;
3085 -> 3079;
3086 -> 3081;
3086 -> 3085;
3086 -> 3079;
3087 -> 3079;
3088 -> 3083;
3088 -> 3087;
3088 -> 3079;
3089 -> 3086;
3089 -> 3088;
3089 -> 3079;
3090 -> 3079;
3091 -> 3090;
3091 -> 3089;
3091 -> 3079;
3092 -> 3079;
3093 -> 3092;
3093 -> 3081;
3093 -> 3079;
3094 -> 3079;
3095 -> 3094;
3095 -> 3083;
3095 -> 3079;
3096 -> 3079;
3097 -> 3096;
3097 -> 3081;
3097 -> 3079;
3098 -> 3089;
3098 -> 3079;
3099 -> 3071;
3099 -> 3069;
3100 -> 3073;
3100 -> 3069;
3101 -> 3069;
3102 -> 3099;
3102 -> 3101;
3102 -> 3069;
3103 -> 3069;
3104 -> 3099;
3104 -> 3103;
3104 -> 3069;
3105 -> 3069;
3106 -> 3100;
3106 -> 3105;
3106 -> 3069;
3107 -> 3069;
3108 -> 3107;
3108 -> 3060;
3109 -> 3060;
3110 -> 3109;
3110 -> 3029;
3111 -> 3056;
3111 -> 3110;
3111 -> 3029;
3112 -> 2993;
3112 -> 3111;
3112 -> 3018;
3112 -> 2961;
3113 -> 3011;
3113 -> 2961;
3114 -> 2998;
3114 -> 2961;
3115 -> 2993;
3115 -> 3112;
3115 -> 2961;
3116 -> 3115;
3116 -> 2940;
3117 -> 2929;
3118 -> 574;
3119 -> 575;
3119 -> 574;
3120 -> 2926;
3120 -> 574;
3121 -> 574;
3122 -> 3119;
3122 -> 3121;
3123 -> 3120;
3123 -> 3121;
3124 -> 3123;
3124 -> 3121;
3125 -> 574;
3126 -> 575;
3126 -> 574;
}