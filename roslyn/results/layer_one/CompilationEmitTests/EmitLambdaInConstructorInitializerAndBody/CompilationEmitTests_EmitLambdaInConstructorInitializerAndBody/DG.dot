digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 804033"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 804034"];
3 [label="param CompilationEmitTests(this) 804035"];
4 [label="param EmitMetadataTestBase(this) 804036"];
5 [label="param CSharpTestBase(this) 804037"];
6 [label="param CommonTestBase(this) 804038"];
7 [label="param TestBase(this) 804039"];
8 [label="_temp 804040"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 804041"];
10 [label="param EmitLambdaInConstructorInitializerAndBody(this) 804042"];
11 [label="string source = @'\nusing System;\npublic class A\n{\n    public string y = ''!'';\n    \n    public A(string x):this(()=>x){func(()=>x+y);}    \n    public A(Func<string> x)\n    {\n        Console.WriteLine(x());\n    }\n    public void func (Func<string> x)\n    {\n        Console.WriteLine(x());\n    }\n    static void Main()\n    {\n        A a = new A(''Hello'');\n    }\n}'; 804043"];
12 [label="CompileAndVerify(source, expectedOutput: @'\nHello\nHello!\n'); 804044"];
13 [label="source 804045"];
14 [label="param operator(string source) 804046"];
15 [label="source 804047"];
16 [label="new CSharpTestSource(source) 804048"];
17 [label="param CSharpTestSource(object value) 804049"];
18 [label="param CSharpTestSource(this) 804050"];
19 [label="Value 804051"];
20 [label="CompileAndVerify(source, expectedOutput: @'\nHello\nHello!\n'); 804052"];
21 [label="CompileAndVerify(source, expectedOutput: @'\nHello\nHello!\n'); 804053"];
22 [label="CompileAndVerify(source, expectedOutput: @'\nHello\nHello!\n') 804054"];
23 [label="param CompileAndVerify(CSharpTestSource source) 804055"];
24 [label="param CompileAndVerify(IEnumerable<MetadataReference> references = null) 804056"];
25 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 804057"];
26 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 804058"];
27 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 804059"];
28 [label="param CompileAndVerify(Action<PEAssembly> assemblyValidator = null) 804060"];
29 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 804061"];
30 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 804062"];
31 [label="param CompileAndVerify(string expectedOutput = null) 804063"];
32 [label="param CompileAndVerify(int? expectedReturnCode = null) 804064"];
33 [label="param CompileAndVerify(string[] args = null) 804065"];
34 [label="param CompileAndVerify(CSharpCompilationOptions options = null) 804066"];
35 [label="param CompileAndVerify(CSharpParseOptions parseOptions = null) 804067"];
36 [label="param CompileAndVerify(EmitOptions emitOptions = null) 804068"];
37 [label="param CompileAndVerify(TargetFramework targetFramework = TargetFramework.Standard) 804069"];
38 [label="param CompileAndVerify(Verification verify = Verification.Passes) 804070"];
39 [label="param CompileAndVerify(this) 804071"];
40 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 804072"];
41 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 804073"];
42 [label="(expectedOutput != null) 804074"];
43 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 804075"];
44 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 804076"];
45 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 804077"];
46 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 804078"];
47 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 804079"];
48 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 804080"];
49 [label="GetUniqueName() 804081"];
50 [label="return Guid.NewGuid().ToString('D'); 804082"];
51 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 804083"];
52 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 804084"];
53 [label="CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()) 804085"];
54 [label="param CreateCompilation(CSharpTestSource source) 804086"];
55 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 804087"];
56 [label="param CreateCompilation(CSharpCompilationOptions options = null) 804088"];
57 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 804089"];
58 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 804090"];
59 [label="param CreateCompilation(string assemblyName = '') 804091"];
60 [label="param CreateCompilation(string sourceFileName = '') 804092"];
61 [label="param CreateCompilation(bool skipUsesIsNullable = false) 804093"];
62 [label="source 804094"];
63 [label="targetFramework 804095"];
64 [label="references 804096"];
65 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 804097"];
66 [label="param GetReferences(TargetFramework tf) 804098"];
67 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 804099"];
68 [label="var references = GetReferences(tf); 804100"];
69 [label="GetReferences(tf) 804101"];
70 [label="param GetReferences(TargetFramework targetFramework) 804102"];
71 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 804103"];
72 [label="StandardReferences 804104"];
73 [label="RuntimeUtilities.IsCoreClrRuntime 804105"];
74 [label="Mscorlib46ExtendedReferences 804106"];
75 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 804107"];
76 [label="TestBase.ValueTupleRef 804108"];
77 [label="TestReferences.NetFx.ValueTuple.tuplelib 804109"];
78 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 804110"];
79 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 804111"];
80 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 804112"];
81 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 804113"];
82 [label="return references; 804114"];
83 [label="options 804115"];
84 [label="parseOptions 804116"];
85 [label="assemblyName 804117"];
86 [label="sourceFileName 804118"];
87 [label="skipUsesIsNullable 804119"];
88 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 804120"];
89 [label="param CreateEmptyCompilation(CSharpTestSource source) 804121"];
90 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 804122"];
91 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 804123"];
92 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 804124"];
93 [label="param CreateEmptyCompilation(string assemblyName = '') 804125"];
94 [label="param CreateEmptyCompilation(string sourceFileName = '') 804126"];
95 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 804127"];
96 [label="source 804128"];
97 [label="references 804129"];
98 [label="options 804130"];
99 [label="parseOptions 804131"];
100 [label="assemblyName 804132"];
101 [label="sourceFileName 804133"];
102 [label="skipUsesIsNullable 804134"];
103 [label="null 804135"];
104 [label="experimentalFeature: null 804136"];
105 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 804137"];
106 [label="param CreateCompilationCore(CSharpTestSource source) 804138"];
107 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 804139"];
108 [label="param CreateCompilationCore(CSharpCompilationOptions options) 804140"];
109 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 804141"];
110 [label="param CreateCompilationCore(string assemblyName) 804142"];
111 [label="param CreateCompilationCore(string sourceFileName) 804143"];
112 [label="param CreateCompilationCore(bool skipUsesIsNullable) 804144"];
113 [label="param CreateCompilationCore(MessageID? experimentalFeature) 804145"];
114 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 804146"];
115 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 804147"];
116 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 804148"];
117 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 804149"];
118 [label="param GetSyntaxTrees(string sourceFileName = '') 804150"];
119 [label="param GetSyntaxTrees(this) 804151"];
120 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 804152"];
121 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 804153"];
122 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 804154"];
123 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 804155"];
124 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 804156"];
125 [label="param Parse(string text) 804157"];
126 [label="param Parse(string filename = '') 804158"];
127 [label="param Parse(CSharpParseOptions options = null) 804159"];
128 [label="param Parse(Encoding encoding = null) 804160"];
129 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 804161"];
130 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 804162"];
131 [label="options = TestOptions.Regular; 804163"];
132 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 804164"];
133 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 804165"];
134 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 804166"];
135 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 804167"];
136 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 804168"];
137 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 804169"];
138 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 804170"];
139 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 804171"];
140 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 804172"];
141 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 804173"];
142 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 804174"];
143 [label="param CheckSerializable(SyntaxTree tree) 804175"];
144 [label="var stream = new MemoryStream(); 804176"];
145 [label="var root = tree.GetRoot(); 804177"];
146 [label="var root = tree.GetRoot(); 804178"];
147 [label="root.SerializeTo(stream); 804179"];
148 [label="root.SerializeTo(stream); 804180"];
149 [label="root.SerializeTo(stream); 804181"];
150 [label="stream.Position = 0; 804182"];
151 [label="stream.Position 804183"];
152 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 804184"];
153 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 804185"];
154 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 804186"];
155 [label="return tree; 804187"];
156 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 804188"];
157 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 804189"];
158 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 804190"];
159 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 804191"];
160 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 804192"];
161 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 804193"];
162 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 804194"];
163 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 804195"];
164 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 804196"];
165 [label="param ValidateIOperations(Func<Compilation> createCompilation) 804197"];
166 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 804198"];
167 [label="return; 804199"];
168 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 804200"];
169 [label="OutputKind.ConsoleApplication 804201"];
170 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 804202"];
171 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 804203"];
172 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 804204"];
173 [label="OutputKind.DynamicallyLinkedLibrary 804205"];
174 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 804206"];
175 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 804207"];
176 [label="true 804208"];
177 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 804209"];
178 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 804210"];
179 [label="var compilation = createCompilationLambda(); 804211"];
180 [label="var compilation = createCompilationLambda(); 804212"];
181 [label="param Create(string? assemblyName) 804213"];
182 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 804214"];
183 [label="param Create(IEnumerable<MetadataReference>? references = null) 804215"];
184 [label="param Create(CSharpCompilationOptions? options = null) 804216"];
185 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 804217"];
186 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 804218"];
187 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 804219"];
188 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 804220"];
189 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 804221"];
190 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 804222"];
191 [label="param Create(string? assemblyName) 804223"];
192 [label="param Create(CSharpCompilationOptions options) 804224"];
193 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 804225"];
194 [label="param Create(IEnumerable<MetadataReference>? references) 804226"];
195 [label="param Create(CSharpCompilation? previousSubmission) 804227"];
196 [label="param Create(Type? returnType) 804228"];
197 [label="param Create(Type? hostObjectType) 804229"];
198 [label="param Create(bool isSubmission) 804230"];
199 [label="RoslynDebug.Assert(options != null); 804231"];
200 [label="RoslynDebug.Assert(options != null); 804232"];
201 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 804233"];
202 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 804234"];
203 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 804235"];
204 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 804236"];
205 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 804237"];
206 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 804238"];
207 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 804239"];
208 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 804240"];
209 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 804241"];
210 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 804242"];
211 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 804243"];
212 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 804244"];
213 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 804245"];
214 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 804246"];
215 [label="param SyntaxAndDeclarationManager(string scriptClassName) 804247"];
216 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 804248"];
217 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 804249"];
218 [label="param SyntaxAndDeclarationManager(bool isSubmission) 804250"];
219 [label="param SyntaxAndDeclarationManager(State state) 804251"];
220 [label="param SyntaxAndDeclarationManager(this) 804252"];
221 [label="externalSyntaxTrees 804253"];
222 [label="scriptClassName 804254"];
223 [label="resolver 804255"];
224 [label="messageProvider 804256"];
225 [label="isSubmission 804257"];
226 [label="param SyntaxAndDeclarationManager(this) 804258"];
227 [label="param SyntaxAndDeclarationManager(this) 804259"];
228 [label="_lazyState 804260"];
229 [label="_lazyState 804261"];
230 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 804262"];
231 [label="param CSharpCompilation(string? assemblyName) 804263"];
232 [label="param CSharpCompilation(CSharpCompilationOptions options) 804264"];
233 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 804265"];
234 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 804266"];
235 [label="param CSharpCompilation(Type? submissionReturnType) 804267"];
236 [label="param CSharpCompilation(Type? hostObjectType) 804268"];
237 [label="param CSharpCompilation(bool isSubmission) 804269"];
238 [label="param CSharpCompilation(ReferenceManager? referenceManager) 804270"];
239 [label="param CSharpCompilation(bool reuseReferenceManager) 804271"];
240 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 804272"];
241 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 804273"];
242 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 804274"];
243 [label="param CSharpCompilation(this) 804275"];
244 [label="assemblyName 804276"];
245 [label="options 804277"];
246 [label="references 804278"];
247 [label="previousSubmission 804279"];
248 [label="submissionReturnType 804280"];
249 [label="hostObjectType 804281"];
250 [label="isSubmission 804282"];
251 [label="referenceManager 804283"];
252 [label="reuseReferenceManager 804284"];
253 [label="syntaxAndDeclarations 804285"];
254 [label="syntaxAndDeclarations.ExternalSyntaxTrees 804286"];
255 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 804287"];
256 [label="semanticModelProvider 804288"];
257 [label="eventQueue 804289"];
258 [label="param CSharpCompilation(this) 804290"];
259 [label="param CSharpCompilation(string? assemblyName) 804291"];
260 [label="param CSharpCompilation(CSharpCompilationOptions options) 804292"];
261 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 804293"];
262 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 804294"];
263 [label="param CSharpCompilation(Type? submissionReturnType) 804295"];
264 [label="param CSharpCompilation(Type? hostObjectType) 804296"];
265 [label="param CSharpCompilation(bool isSubmission) 804297"];
266 [label="param CSharpCompilation(ReferenceManager? referenceManager) 804298"];
267 [label="param CSharpCompilation(bool reuseReferenceManager) 804299"];
268 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 804300"];
269 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 804301"];
270 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 804302"];
271 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 804303"];
272 [label="param CSharpCompilation(this) 804304"];
273 [label="assemblyName 804305"];
274 [label="references 804306"];
275 [label="features 804307"];
276 [label="isSubmission 804308"];
277 [label="semanticModelProvider 804309"];
278 [label="eventQueue 804310"];
279 [label="param CSharpCompilation(this) 804311"];
280 [label="param CSharpCompilation(this) 804312"];
281 [label="_options 804313"];
282 [label="_globalImports 804314"];
283 [label="_previousSubmissionImports 804315"];
284 [label="_globalNamespaceAlias 804316"];
285 [label="_scriptClass 804317"];
286 [label="_lazyHostObjectTypeSymbol 804318"];
287 [label="_lazyImportInfos 804319"];
288 [label="_conversions 804320"];
289 [label="_anonymousTypeManager 804321"];
290 [label="_lazyGlobalNamespace 804322"];
291 [label="builtInOperators 804323"];
292 [label="_lazyAssemblySymbol 804324"];
293 [label="_referenceManager 804325"];
294 [label="_syntaxAndDeclarations 804326"];
295 [label="_lazyEntryPoint 804327"];
296 [label="_lazyEmitNullablePublicOnly 804328"];
297 [label="_lazyCompilationUnitCompletedTrees 804329"];
298 [label="NullableAnalysisData 804330"];
299 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 804331"];
300 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 804332"];
301 [label="_externAliasTargets 804333"];
302 [label="_moduleInitializerMethods 804334"];
303 [label="_binderFactories 804335"];
304 [label="_ignoreAccessibilityBinderFactories 804336"];
305 [label="_lazyDeclarationDiagnostics 804337"];
306 [label="_declarationDiagnosticsFrozen 804338"];
307 [label="new DiagnosticBag() 804339"];
308 [label="_additionalCodegenWarnings = new DiagnosticBag() 804340"];
309 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 804341"];
310 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 804342"];
311 [label="WellKnownMemberSignatureComparer 804343"];
312 [label="_options 804344"];
313 [label="this.builtInOperators = new BuiltInOperators(this); 804345"];
314 [label="this.builtInOperators = new BuiltInOperators(this); 804346"];
315 [label="new BuiltInOperators(this) 804347"];
316 [label="param BuiltInOperators(CSharpCompilation compilation) 804348"];
317 [label="param BuiltInOperators(this) 804349"];
318 [label="_compilation 804350"];
319 [label="_builtInUnaryOperators 804351"];
320 [label="_builtInOperators 804352"];
321 [label="_compilation 804353"];
322 [label="this.builtInOperators 804354"];
323 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 804355"];
324 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 804356"];
325 [label="_scriptClass 804357"];
326 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 804358"];
327 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 804359"];
328 [label="_globalImports 804360"];
329 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 804361"];
330 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 804362"];
331 [label="_previousSubmissionImports 804363"];
332 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 804364"];
333 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 804365"];
334 [label="_globalNamespaceAlias 804366"];
335 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 804367"];
336 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 804368"];
337 [label="_anonymousTypeManager 804369"];
338 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 804370"];
339 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 804371"];
340 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 804372"];
341 [label="LanguageVersion? result = null; 804373"];
342 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 804374"];
343 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 804375"];
344 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 804376"];
345 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 804377"];
346 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 804378"];
347 [label="this.LanguageVersion 804379"];
348 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 804380"];
349 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804381"];
350 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804382"];
351 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804383"];
352 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804384"];
353 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804385"];
354 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804386"];
355 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 804387"];
356 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 804388"];
357 [label="this.Options 804389"];
358 [label="get\n            {\n                return _options;\n            } 804390"];
359 [label="return _options; 804391"];
360 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 804392"];
361 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 804393"];
362 [label="_referenceManager 804394"];
363 [label="_syntaxAndDeclarations 804395"];
364 [label="Debug.Assert(_lazyAssemblySymbol is null); 804396"];
365 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 804397"];
366 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 804398"];
367 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 804399"];
368 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 804400"];
369 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 804401"];
370 [label="compilation.AddSyntaxTrees(syntaxTrees) 804402"];
371 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 804403"];
372 [label="param AddSyntaxTrees(this) 804404"];
373 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 804405"];
374 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 804406"];
375 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 804407"];
376 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 804408"];
377 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 804409"];
378 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 804410"];
379 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 804411"];
380 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 804412"];
381 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 804413"];
382 [label="bool reuseReferenceManager = true; 804414"];
383 [label="int i = 0; 804415"];
384 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 804416"];
385 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 804417"];
386 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 804418"];
387 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 804419"];
388 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 804420"];
389 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 804421"];
390 [label="externalSyntaxTrees.Add(tree); 804422"];
391 [label="externalSyntaxTrees.Add(tree); 804423"];
392 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 804424"];
393 [label="i++; 804425"];
394 [label="externalSyntaxTrees.Free(); 804426"];
395 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 804427"];
396 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 804428"];
397 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 804429"];
398 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 804430"];
399 [label="param AddSyntaxTrees(this) 804431"];
400 [label="var scriptClassName = this.ScriptClassName; 804432"];
401 [label="var resolver = this.Resolver; 804433"];
402 [label="var messageProvider = this.MessageProvider; 804434"];
403 [label="var isSubmission = this.IsSubmission; 804435"];
404 [label="var state = _lazyState; 804436"];
405 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 804437"];
406 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 804438"];
407 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 804439"];
408 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 804440"];
409 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 804441"];
410 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 804442"];
411 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 804443"];
412 [label="param WithExternalSyntaxTrees(this) 804444"];
413 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 804445"];
414 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 804446"];
415 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 804447"];
416 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 804448"];
417 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 804449"];
418 [label="param SyntaxAndDeclarationManager(string scriptClassName) 804450"];
419 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 804451"];
420 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 804452"];
421 [label="param SyntaxAndDeclarationManager(bool isSubmission) 804453"];
422 [label="param SyntaxAndDeclarationManager(State state) 804454"];
423 [label="param SyntaxAndDeclarationManager(this) 804455"];
424 [label="param SyntaxAndDeclarationManager(this) 804456"];
425 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 804457"];
426 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 804458"];
427 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 804459"];
428 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 804460"];
429 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 804461"];
430 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 804462"];
431 [label="param Update(ReferenceManager referenceManager) 804463"];
432 [label="param Update(bool reuseReferenceManager) 804464"];
433 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 804465"];
434 [label="param Update(this) 804466"];
435 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 804467"];
436 [label="this.PreviousSubmission 804468"];
437 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 804469"];
438 [label="ScriptCompilationInfo 804470"];
439 [label="ScriptCompilationInfo?.PreviousScriptCompilation 804471"];
440 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 804472"];
441 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 804473"];
442 [label="this.SubmissionReturnType 804474"];
443 [label="=> ScriptCompilationInfo 804475"];
444 [label="ScriptCompilationInfo 804476"];
445 [label="this.HostObjectType 804477"];
446 [label="=> ScriptCompilationInfo 804478"];
447 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 804479"];
448 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 804480"];
449 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 804481"];
450 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 804482"];
451 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 804483"];
452 [label="param CSharpCompilation(string? assemblyName) 804484"];
453 [label="param CSharpCompilation(CSharpCompilationOptions options) 804485"];
454 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 804486"];
455 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 804487"];
456 [label="param CSharpCompilation(Type? submissionReturnType) 804488"];
457 [label="param CSharpCompilation(Type? hostObjectType) 804489"];
458 [label="param CSharpCompilation(bool isSubmission) 804490"];
459 [label="param CSharpCompilation(ReferenceManager? referenceManager) 804491"];
460 [label="param CSharpCompilation(bool reuseReferenceManager) 804492"];
461 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 804493"];
462 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 804494"];
463 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 804495"];
464 [label="param CSharpCompilation(this) 804496"];
465 [label="previousSubmission 804497"];
466 [label="submissionReturnType 804498"];
467 [label="hostObjectType 804499"];
468 [label="syntaxAndDeclarations.ExternalSyntaxTrees 804500"];
469 [label="eventQueue 804501"];
470 [label="param CSharpCompilation(this) 804502"];
471 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 804503"];
472 [label="param CSharpCompilation(Type? submissionReturnType) 804504"];
473 [label="param CSharpCompilation(Type? hostObjectType) 804505"];
474 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 804506"];
475 [label="param CSharpCompilation(this) 804507"];
476 [label="eventQueue 804508"];
477 [label="param CSharpCompilation(this) 804509"];
478 [label="_options 804510"];
479 [label="_globalImports 804511"];
480 [label="_previousSubmissionImports 804512"];
481 [label="_globalNamespaceAlias 804513"];
482 [label="_scriptClass 804514"];
483 [label="_lazyHostObjectTypeSymbol 804515"];
484 [label="_lazyImportInfos 804516"];
485 [label="_conversions 804517"];
486 [label="_anonymousTypeManager 804518"];
487 [label="_lazyGlobalNamespace 804519"];
488 [label="builtInOperators 804520"];
489 [label="_lazyAssemblySymbol 804521"];
490 [label="_referenceManager 804522"];
491 [label="_syntaxAndDeclarations 804523"];
492 [label="_lazyEntryPoint 804524"];
493 [label="_lazyEmitNullablePublicOnly 804525"];
494 [label="_lazyCompilationUnitCompletedTrees 804526"];
495 [label="NullableAnalysisData 804527"];
496 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 804528"];
497 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 804529"];
498 [label="_externAliasTargets 804530"];
499 [label="_moduleInitializerMethods 804531"];
500 [label="_binderFactories 804532"];
501 [label="_ignoreAccessibilityBinderFactories 804533"];
502 [label="_lazyDeclarationDiagnostics 804534"];
503 [label="_declarationDiagnosticsFrozen 804535"];
504 [label="new DiagnosticBag() 804536"];
505 [label="_additionalCodegenWarnings = new DiagnosticBag() 804537"];
506 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 804538"];
507 [label="this.builtInOperators = new BuiltInOperators(this); 804539"];
508 [label="this.builtInOperators = new BuiltInOperators(this); 804540"];
509 [label="new BuiltInOperators(this) 804541"];
510 [label="param BuiltInOperators(CSharpCompilation compilation) 804542"];
511 [label="param BuiltInOperators(this) 804543"];
512 [label="_compilation 804544"];
513 [label="_builtInUnaryOperators 804545"];
514 [label="_builtInOperators 804546"];
515 [label="_compilation 804547"];
516 [label="this.builtInOperators 804548"];
517 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 804549"];
518 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 804550"];
519 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 804551"];
520 [label="LanguageVersion? result = null; 804552"];
521 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 804553"];
522 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 804554"];
523 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 804555"];
524 [label="result = version; 804556"];
525 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 804557"];
526 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804558"];
527 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804559"];
528 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804560"];
529 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804561"];
530 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804562"];
531 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 804563"];
532 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 804564"];
533 [label="referenceManager.AssertCanReuseForCompilation(this); 804565"];
534 [label="referenceManager.AssertCanReuseForCompilation(this); 804566"];
535 [label="_referenceManager 804567"];
536 [label="Debug.Assert(_lazyAssemblySymbol is null); 804568"];
537 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 804569"];
538 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 804570"];
539 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 804571"];
540 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 804572"];
541 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 804573"];
542 [label="return compilation; 804574"];
543 [label="var compilation = createCompilationLambda(); 804575"];
544 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 804576"];
545 [label="IsNullableEnabled(compilation) 804577"];
546 [label="param IsNullableEnabled(CSharpCompilation compilation) 804578"];
547 [label="compilation.SyntaxTrees 804579"];
548 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 804580"];
549 [label="_syntaxAndDeclarations.GetLazyState() 804581"];
550 [label="param GetLazyState(this) 804582"];
551 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 804583"];
552 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 804584"];
553 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 804585"];
554 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 804586"];
555 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 804587"];
556 [label="param CreateState(string scriptClassName) 804588"];
557 [label="param CreateState(SourceReferenceResolver resolver) 804589"];
558 [label="param CreateState(CommonMessageProvider messageProvider) 804590"];
559 [label="param CreateState(bool isSubmission) 804591"];
560 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 804592"];
561 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 804593"];
562 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 804594"];
563 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 804595"];
564 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 804596"];
565 [label="var declTable = DeclarationTable.Empty; 804597"];
566 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 804598"];
567 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 804599"];
568 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 804600"];
569 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 804601"];
570 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 804602"];
571 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 804603"];
572 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 804604"];
573 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 804605"];
574 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 804606"];
575 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 804607"];
576 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 804608"];
577 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 804609"];
578 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 804610"];
579 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 804611"];
580 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 804612"];
581 [label="param AppendAllSyntaxTrees(string scriptClassName) 804613"];
582 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 804614"];
583 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 804615"];
584 [label="param AppendAllSyntaxTrees(bool isSubmission) 804616"];
585 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 804617"];
586 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 804618"];
587 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 804619"];
588 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 804620"];
589 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 804621"];
590 [label="var sourceCodeKind = tree.Options.Kind; 804622"];
591 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 804623"];
592 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 804624"];
593 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 804625"];
594 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 804626"];
595 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 804627"];
596 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 804628"];
597 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 804629"];
598 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 804630"];
599 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 804631"];
600 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 804632"];
601 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 804633"];
602 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 804634"];
603 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 804635"];
604 [label="declMapBuilder.Add(tree, lazyRoot); 804636"];
605 [label="declMapBuilder.Add(tree, lazyRoot); 804637"];
606 [label="declMapBuilder.Add(tree, lazyRoot); 804638"];
607 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 804639"];
608 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 804640"];
609 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 804641"];
610 [label="treesBuilder.Add(tree); 804642"];
611 [label="treesBuilder.Add(tree); 804643"];
612 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 804644"];
613 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 804645"];
614 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 804646"];
615 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 804647"];
616 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 804648"];
617 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 804649"];
618 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 804650"];
619 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 804651"];
620 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 804652"];
621 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 804653"];
622 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 804654"];
623 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 804655"];
624 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 804656"];
625 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 804657"];
626 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 804658"];
627 [label="param State(DeclarationTable declarationTable) 804659"];
628 [label="param State(this) 804660"];
629 [label="OrdinalMap 804661"];
630 [label="LoadDirectiveMap 804662"];
631 [label="LoadedSyntaxTreeMap 804663"];
632 [label="RootNamespaces 804664"];
633 [label="DeclarationTable 804665"];
634 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 804666"];
635 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 804667"];
636 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 804668"];
637 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 804669"];
638 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 804670"];
639 [label="this.SyntaxTrees 804671"];
640 [label="this.OrdinalMap 804672"];
641 [label="this.LoadDirectiveMap 804673"];
642 [label="this.LoadedSyntaxTreeMap 804674"];
643 [label="this.RootNamespaces 804675"];
644 [label="this.DeclarationTable 804676"];
645 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 804677"];
646 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 804678"];
647 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 804679"];
648 [label="return _lazyState; 804680"];
649 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 804681"];
650 [label="var trees = compilation.SyntaxTrees; 804682"];
651 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 804683"];
652 [label="var options = (CSharpParseOptions)trees[0].Options; 804684"];
653 [label="var options = (CSharpParseOptions)trees[0].Options; 804685"];
654 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 804686"];
655 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 804687"];
656 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 804688"];
657 [label="return compilation; 804689"];
658 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804690"];
659 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804691"];
660 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804692"];
661 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804693"];
662 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804694"];
663 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804695"];
664 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804696"];
665 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804697"];
666 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804698"];
667 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804699"];
668 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804700"];
669 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804701"];
670 [label="CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 804702"];
671 [label="param CompileAndVerify(Compilation compilation) 804703"];
672 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 804704"];
673 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 804705"];
674 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 804706"];
675 [label="param CompileAndVerify(Action<PEAssembly> validator = null) 804707"];
676 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 804708"];
677 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 804709"];
678 [label="param CompileAndVerify(string expectedOutput = null) 804710"];
679 [label="param CompileAndVerify(int? expectedReturnCode = null) 804711"];
680 [label="param CompileAndVerify(string[] args = null) 804712"];
681 [label="param CompileAndVerify(EmitOptions emitOptions = null) 804713"];
682 [label="param CompileAndVerify(Verification verify = Verification.Passes) 804714"];
683 [label="param CompileAndVerify(this) 804715"];
684 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804716"];
685 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804717"];
686 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804718"];
687 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804719"];
688 [label="translate(sourceSymbolValidator) 804720"];
689 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 804721"];
690 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 804722"];
691 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 804723"];
692 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 804724"];
693 [label="return null; 804725"];
694 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804726"];
695 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804727"];
696 [label="translate(symbolValidator) 804728"];
697 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 804729"];
698 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 804730"];
699 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 804731"];
700 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 804732"];
701 [label="return null; 804733"];
702 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804734"];
703 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804735"];
704 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804736"];
705 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804737"];
706 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804738"];
707 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 804739"];
708 [label="CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 804740"];
709 [label="param CompileAndVerifyCommon(Compilation compilation) 804741"];
710 [label="param CompileAndVerifyCommon(IEnumerable<ResourceDescription> manifestResources = null) 804742"];
711 [label="param CompileAndVerifyCommon(IEnumerable<ModuleData> dependencies = null) 804743"];
712 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> sourceSymbolValidator = null) 804744"];
713 [label="param CompileAndVerifyCommon(Action<PEAssembly> assemblyValidator = null) 804745"];
714 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> symbolValidator = null) 804746"];
715 [label="param CompileAndVerifyCommon(SignatureDescription[] expectedSignatures = null) 804747"];
716 [label="param CompileAndVerifyCommon(string expectedOutput = null) 804748"];
717 [label="param CompileAndVerifyCommon(int? expectedReturnCode = null) 804749"];
718 [label="param CompileAndVerifyCommon(string[] args = null) 804750"];
719 [label="param CompileAndVerifyCommon(EmitOptions emitOptions = null) 804751"];
720 [label="param CompileAndVerifyCommon(Verification verify = Verification.Passes) 804752"];
721 [label="param CompileAndVerifyCommon(this) 804753"];
722 [label="CustomAssert.NotNull(compilation); 804754"];
723 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 804755"];
724 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 804756"];
725 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 804757"];
726 [label="compilation.Options 804758"];
727 [label="get { return _options; } 804759"];
728 [label="return _options; 804760"];
729 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 804761"];
730 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 804762"];
731 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 804763"];
732 [label="CompilationVerifier result = null; 804764"];
733 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804765"];
734 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804766"];
735 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804767"];
736 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804768"];
737 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804769"];
738 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804770"];
739 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804771"];
740 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804772"];
741 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804773"];
742 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804774"];
743 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804775"];
744 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 804776"];
745 [label="Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify) 804777"];
746 [label="param Emit(Compilation compilation) 804778"];
747 [label="param Emit(IEnumerable<ModuleData> dependencies) 804779"];
748 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 804780"];
749 [label="param Emit(SignatureDescription[] expectedSignatures) 804781"];
750 [label="param Emit(string expectedOutput) 804782"];
751 [label="param Emit(int? expectedReturnCode) 804783"];
752 [label="param Emit(string[] args) 804784"];
753 [label="param Emit(Action<PEAssembly> assemblyValidator) 804785"];
754 [label="param Emit(Action<IModuleSymbol> symbolValidator) 804786"];
755 [label="param Emit(EmitOptions emitOptions) 804787"];
756 [label="param Emit(Verification verify) 804788"];
757 [label="param Emit(this) 804789"];
758 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 804790"];
759 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 804791"];
760 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 804792"];
761 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 804793"];
762 [label="new CompilationVerifier(compilation, VisualizeRealIL, dependencies) 804794"];
763 [label="param CompilationVerifier(Compilation compilation) 804795"];
764 [label="param CompilationVerifier(Func<IModuleSymbol, CompilationTestData.MethodData, IReadOnlyDictionary<int, string>, bool, string> visualizeRealIL = null) 804796"];
765 [label="param CompilationVerifier(IEnumerable<ModuleData> dependencies = null) 804797"];
766 [label="param CompilationVerifier(this) 804798"];
767 [label="_compilation 804799"];
768 [label="_testData 804800"];
769 [label="_dependencies 804801"];
770 [label="_lazyModuleSymbol 804802"];
771 [label="_allModuleData 804803"];
772 [label="_visualizeRealIL 804804"];
773 [label="_compilation 804805"];
774 [label="_dependencies 804806"];
775 [label="_visualizeRealIL 804807"];
776 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 804808"];
777 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 804809"];
778 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 804810"];
779 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 804811"];
780 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 804812"];
781 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 804813"];
782 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 804814"];
783 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures) 804815"];
784 [label="param Emit(string expectedOutput) 804816"];
785 [label="param Emit(int? expectedReturnCode) 804817"];
786 [label="param Emit(string[] args) 804818"];
787 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 804819"];
788 [label="param Emit(EmitOptions emitOptions) 804820"];
789 [label="param Emit(Verification peVerify) 804821"];
790 [label="param Emit(SignatureDescription[] expectedSignatures) 804822"];
791 [label="param Emit(this) 804823"];
792 [label="RuntimeUtilities.GetRuntimeEnvironmentFactory 804824"];
793 [label="new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 804825"];
794 [label="s_lazyFactory = new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 804826"];
795 [label="using var testEnvironment = RuntimeEnvironmentFactory.Create(_dependencies); 804827"];
796 [label="RuntimeEnvironmentFactory.Create(_dependencies) 804828"];
797 [label="param Create(IEnumerable<ModuleData> additionalDependencies = null) 804829"];
798 [label="return s_lazyFactory.Value.Create(additionalDependencies); 804830"];
799 [label="return s_lazyFactory.Value.Create(additionalDependencies); 804831"];
800 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 804832"];
801 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 804833"];
802 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 804834"];
803 [label="Emit(testEnvironment, manifestResources, emitOptions) 804835"];
804 [label="param Emit(IRuntimeEnvironment testEnvironment) 804836"];
805 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 804837"];
806 [label="param Emit(EmitOptions emitOptions) 804838"];
807 [label="param Emit(this) 804839"];
808 [label="s_dumpCount 804840"];
809 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 804841"];
810 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 804842"];
811 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 804843"];
812 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 804844"];
813 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 804845"];
814 [label="param EmitCompilation(Compilation compilation) 804846"];
815 [label="param EmitCompilation(IEnumerable<ResourceDescription> manifestResources) 804847"];
816 [label="param EmitCompilation(List<ModuleData> dependencies) 804848"];
817 [label="param EmitCompilation(DiagnosticBag diagnostics) 804849"];
818 [label="param EmitCompilation(CompilationTestData testData) 804850"];
819 [label="param EmitCompilation(EmitOptions emitOptions) 804851"];
820 [label="var referencedCompilations = FindReferencedCompilations(compilation); 804852"];
821 [label="FindReferencedCompilations(compilation) 804853"];
822 [label="param FindReferencedCompilations(Compilation original) 804854"];
823 [label="var list = new List<Compilation>(); 804855"];
824 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 804856"];
825 [label="FindDirectReferencedCompilations(original) 804857"];
826 [label="param FindDirectReferencedCompilations(Compilation compilation) 804858"];
827 [label="var list = new List<Compilation>(); 804859"];
828 [label="var previousCompilation = compilation.ScriptCompilationInfo?.PreviousScriptCompilation; 804860"];
829 [label="compilation.ScriptCompilationInfo 804861"];
830 [label="=> ScriptCompilationInfo 804862"];
831 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 804863"];
832 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 804864"];
833 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 804865"];
834 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 804866"];
835 [label="get\n            {\n                return GetBoundReferenceManager().DirectiveReferences;\n            } 804867"];
836 [label="GetBoundReferenceManager() 804868"];
837 [label="param GetBoundReferenceManager(this) 804869"];
838 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 804870"];
839 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 804871"];
840 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 804872"];
841 [label="get { return this.Declarations.ReferenceDirectives; } 804873"];
842 [label="this.Declarations 804874"];
843 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 804875"];
844 [label="_syntaxAndDeclarations.GetLazyState() 804876"];
845 [label="param GetLazyState(this) 804877"];
846 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 804878"];
847 [label="return this.Declarations.ReferenceDirectives; 804879"];
848 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 804880"];
849 [label="_syntaxAndDeclarations.GetLazyState() 804881"];
850 [label="Debug.Assert(_lazyAssemblySymbol is object); 804882"];
851 [label="return _referenceManager; 804883"];
852 [label="return GetBoundReferenceManager().DirectiveReferences; 804884"];
853 [label="return list; 804885"];
854 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 804886"];
855 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 804887"];
856 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 804888"];
857 [label="return list; 804889"];
858 [label="var referencedCompilations = FindReferencedCompilations(compilation); 804890"];
859 [label="var fullNameSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase); 804891"];
860 [label="foreach (var referencedCompilation in referencedCompilations)\n            {\n                var emitData = EmitCompilationCore(referencedCompilation, null, diagnostics, null, emitOptions);\n                if (emitData.HasValue)\n                {\n                    var moduleData = new ModuleData(referencedCompilation.Assembly.Identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    emitData.Value.Assembly,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    fullNameSet.Add(moduleData.Id.FullName);\n                    dependencies.Add(moduleData);\n                }\n            } 804892"];
861 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 804893"];
862 [label="new[] { compilation } 804894"];
863 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 804895"];
864 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 804896"];
865 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 804897"];
866 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 804898"];
867 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 804899"];
868 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 804900"];
869 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics) 804901"];
870 [label="param EmitReferences(Compilation compilation) 804902"];
871 [label="param EmitReferences(HashSet<string> fullNameSet) 804903"];
872 [label="param EmitReferences(List<ModuleData> dependencies) 804904"];
873 [label="param EmitReferences(DiagnosticBag diagnostics) 804905"];
874 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 804906"];
875 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 804907"];
876 [label="var peRef = (PortableExecutableReference)metadataReference; 804908"];
877 [label="var metadata = peRef.GetMetadataNoCopy(); 804909"];
878 [label="var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly; 804910"];
879 [label="isManifestModule 804911"];
880 [label="var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null; 804912"];
881 [label="((AssemblyMetadata)metadata).GetAssembly().Identity 804913"];
882 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 804914"];
883 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 804915"];
884 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 804916"];
885 [label="foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                } 804917"];
886 [label="EnumerateModules(metadata) 804918"];
887 [label="param EnumerateModules(Metadata metadata) 804919"];
888 [label="return (metadata.Kind == MetadataImageKind.Assembly) ? ((AssemblyMetadata)metadata).GetModules().AsEnumerable() : SpecializedCollections.SingletonEnumerable((ModuleMetadata)metadata); 804920"];
889 [label="(metadata.Kind == MetadataImageKind.Assembly) 804921"];
890 [label="ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent(); 804922"];
891 [label="ModuleData moduleData; 804923"];
892 [label="if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    } 804924"];
893 [label="fullNameSet.Add(identity.GetDisplayName()); 804925"];
894 [label="fullNameSet.Add(identity.GetDisplayName()); 804926"];
895 [label="fullNameSet.Add(identity.GetDisplayName()); 804927"];
896 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 804928"];
897 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 804929"];
898 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 804930"];
899 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 804931"];
900 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 804932"];
901 [label="dependencies.Add(moduleData); 804933"];
902 [label="dependencies.Add(moduleData); 804934"];
903 [label="isManifestModule = false; 804935"];
904 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 804936"];
905 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 804937"];
906 [label="ModuleData moduleData; 804938"];
907 [label="isManifestModule = false; 804939"];
908 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 804940"];
909 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 804941"];
910 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 804942"];
911 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 804943"];
912 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 804944"];
913 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 804945"];
914 [label="EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions) 804946"];
915 [label="param EmitCompilationCore(Compilation compilation) 804947"];
916 [label="param EmitCompilationCore(IEnumerable<ResourceDescription> manifestResources) 804948"];
917 [label="param EmitCompilationCore(DiagnosticBag diagnostics) 804949"];
918 [label="param EmitCompilationCore(CompilationTestData testData) 804950"];
919 [label="param EmitCompilationCore(EmitOptions emitOptions) 804951"];
920 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 804952"];
921 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 804953"];
922 [label="emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 804954"];
923 [label="using var executableStream = new MemoryStream(); 804955"];
924 [label="var pdb = default(ImmutableArray<byte>); 804956"];
925 [label="var assembly = default(ImmutableArray<byte>); 804957"];
926 [label="var pdbStream = (emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) ? new MemoryStream() : null; 804958"];
927 [label="(emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) 804959"];
928 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 804960"];
929 [label="compilation.SyntaxTrees 804961"];
930 [label="get\n            {\n                return this.SyntaxTrees;\n            } 804962"];
931 [label="this.SyntaxTrees 804963"];
932 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 804964"];
933 [label="_syntaxAndDeclarations.GetLazyState() 804965"];
934 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 804966"];
935 [label="return this.SyntaxTrees; 804967"];
936 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 804968"];
937 [label="EmitResult result; 804969"];
938 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 804970"];
939 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 804971"];
940 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 804972"];
941 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 804973"];
942 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 804974"];
943 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 804975"];
944 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 804976"];
945 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 804977"];
946 [label="get { return _syntaxAndDeclarations.MessageProvider; } 804978"];
947 [label="return _syntaxAndDeclarations.MessageProvider; 804979"];
948 [label="param CreateModuleBuilder(EmitOptions emitOptions) 804980"];
949 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 804981"];
950 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 804982"];
951 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 804983"];
952 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 804984"];
953 [label="param CreateModuleBuilder(CompilationTestData? testData) 804985"];
954 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 804986"];
955 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 804987"];
956 [label="param CreateModuleBuilder(this) 804988"];
957 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 804989"];
958 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 804990"];
959 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 804991"];
960 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 804992"];
961 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 804993"];
962 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 804994"];
963 [label="param GetRuntimeMetadataVersion(this) 804995"];
964 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 804996"];
965 [label="GetRuntimeMetadataVersion(emitOptions) 804997"];
966 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 804998"];
967 [label="param GetRuntimeMetadataVersion(this) 804999"];
968 [label="Assembly 805000"];
969 [label="get\n            {\n                return SourceAssembly;\n            } 805001"];
970 [label="SourceAssembly 805002"];
971 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 805003"];
972 [label="GetBoundReferenceManager() 805004"];
973 [label="param GetBoundReferenceManager(this) 805005"];
974 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805006"];
975 [label="return _referenceManager; 805007"];
976 [label="GetBoundReferenceManager(); 805008"];
977 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 805009"];
978 [label="return _lazyAssemblySymbol; 805010"];
979 [label="return SourceAssembly; 805011"];
980 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 805012"];
981 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 805013"];
982 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 805014"];
983 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 805015"];
984 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 805016"];
985 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 805017"];
986 [label="return runtimeMDVersion; 805018"];
987 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 805019"];
988 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 805020"];
989 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 805021"];
990 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 805022"];
991 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 805023"];
992 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 805024"];
993 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 805025"];
994 [label="get { return SourceAssembly.IsDelaySigned; } 805026"];
995 [label="SourceAssembly 805027"];
996 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 805028"];
997 [label="GetBoundReferenceManager() 805029"];
998 [label="param GetBoundReferenceManager(this) 805030"];
999 [label="GetBoundReferenceManager(); 805031"];
1000 [label="return SourceAssembly.IsDelaySigned; 805032"];
1001 [label="SourceAssembly.IsDelaySigned 805033"];
1002 [label="get\n            {\n                return _options;\n            } 805034"];
1003 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 805035"];
1004 [label="Declarations 805036"];
1005 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 805037"];
1006 [label="_syntaxAndDeclarations.GetLazyState() 805038"];
1007 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805039"];
1008 [label="return Declarations.GetMergedRoot(this); 805040"];
1009 [label="return Declarations.GetMergedRoot(this); 805041"];
1010 [label="return Declarations.GetMergedRoot(this); 805042"];
1011 [label="_syntaxAndDeclarations.GetLazyState() 805043"];
1012 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805044"];
1013 [label="get { return SourceAssembly.StrongNameKeys; } 805045"];
1014 [label="SourceAssembly 805046"];
1015 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 805047"];
1016 [label="GetBoundReferenceManager() 805048"];
1017 [label="param GetBoundReferenceManager(this) 805049"];
1018 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805050"];
1019 [label="return _referenceManager; 805051"];
1020 [label="GetBoundReferenceManager(); 805052"];
1021 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 805053"];
1022 [label="return SourceAssembly.StrongNameKeys; 805054"];
1023 [label="SourceAssembly.StrongNameKeys 805055"];
1024 [label="get\n            {\n                return _options;\n            } 805056"];
1025 [label="=> 0x30 805057"];
1026 [label="0x30 805058"];
1027 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 805059"];
1028 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 805060"];
1029 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 805061"];
1030 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 805062"];
1031 [label="PEModuleBuilder moduleBeingBuilt; 805063"];
1032 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 805064"];
1033 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 805065"];
1034 [label="_options.OutputKind.IsValid() 805066"];
1035 [label="_options.OutputKind 805067"];
1036 [label="SourceAssembly 805068"];
1037 [label="GetBoundReferenceManager() 805069"];
1038 [label="GetBoundReferenceManager(); 805070"];
1039 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 805071"];
1040 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 805072"];
1041 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 805073"];
1042 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 805074"];
1043 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 805075"];
1044 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 805076"];
1045 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 805077"];
1046 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 805078"];
1047 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 805079"];
1048 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 805080"];
1049 [label="param PEAssemblyBuilder(OutputKind outputKind) 805081"];
1050 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 805082"];
1051 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 805083"];
1052 [label="param PEAssemblyBuilder(this) 805084"];
1053 [label="sourceAssembly 805085"];
1054 [label="emitOptions 805086"];
1055 [label="outputKind 805087"];
1056 [label="serializationProperties 805088"];
1057 [label="manifestResources 805089"];
1058 [label="ImmutableArray<NamedTypeSymbol>.Empty 805090"];
1059 [label="param PEAssemblyBuilder(this) 805091"];
1060 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 805092"];
1061 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 805093"];
1062 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 805094"];
1063 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 805095"];
1064 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 805096"];
1065 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 805097"];
1066 [label="param PEAssemblyBuilderBase(this) 805098"];
1067 [label="0 805099"];
1068 [label="sourceAssembly.Modules[0] 805100"];
1069 [label="emitOptions 805101"];
1070 [label="outputKind 805102"];
1071 [label="serializationProperties 805103"];
1072 [label="manifestResources 805104"];
1073 [label="param PEAssemblyBuilderBase(this) 805105"];
1074 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 805106"];
1075 [label="param PEModuleBuilder(EmitOptions emitOptions) 805107"];
1076 [label="param PEModuleBuilder(OutputKind outputKind) 805108"];
1077 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 805109"];
1078 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 805110"];
1079 [label="param PEModuleBuilder(this) 805111"];
1080 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 805112"];
1081 [label="sourceModule 805113"];
1082 [label="serializationProperties 805114"];
1083 [label="manifestResources 805115"];
1084 [label="outputKind 805116"];
1085 [label="emitOptions 805117"];
1086 [label="new ModuleCompilationState() 805118"];
1087 [label="param ModuleCompilationState(this) 805119"];
1088 [label="param PEModuleBuilder(this) 805120"];
1089 [label="param PEModuleBuilder(this) 805121"];
1090 [label="get\n            {\n                return true;\n            } 805122"];
1091 [label="return true; 805123"];
1092 [label="param PEModuleBuilder(this) 805124"];
1093 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 805125"];
1094 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 805126"];
1095 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 805127"];
1096 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 805128"];
1097 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 805129"];
1098 [label="new ConcurrentSet<TypeSymbol>() 805130"];
1099 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 805131"];
1100 [label="_embeddedTypesManagerOpt 805132"];
1101 [label="_metadataName 805133"];
1102 [label="_fixedImplementationTypes 805134"];
1103 [label="_needsGeneratedAttributes 805135"];
1104 [label="_needsGeneratedAttributes_IsFrozen 805136"];
1105 [label="var specifiedName = sourceModule.MetadataName; 805137"];
1106 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 805138"];
1107 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 805139"];
1108 [label="_metadataName 805140"];
1109 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 805141"];
1110 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 805142"];
1111 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 805143"];
1112 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 805144"];
1113 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 805145"];
1114 [label="_sourceAssembly 805146"];
1115 [label="_lazyEmbeddedAttribute 805147"];
1116 [label="_lazyIsReadOnlyAttribute 805148"];
1117 [label="_lazyIsByRefLikeAttribute 805149"];
1118 [label="_lazyIsUnmanagedAttribute 805150"];
1119 [label="_lazyNullableAttribute 805151"];
1120 [label="_lazyNullableContextAttribute 805152"];
1121 [label="_lazyNullablePublicOnlyAttribute 805153"];
1122 [label="_lazyNativeIntegerAttribute 805154"];
1123 [label="_metadataName 805155"];
1124 [label="Debug.Assert(sourceAssembly is object); 805156"];
1125 [label="_sourceAssembly 805157"];
1126 [label="_additionalTypes = additionalTypes.NullToEmpty(); 805158"];
1127 [label="_additionalTypes 805159"];
1128 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 805160"];
1129 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 805161"];
1130 [label="(emitOptions.OutputNameOverride == null) 805162"];
1131 [label="sourceAssembly.MetadataName 805163"];
1132 [label="_metadataName 805164"];
1133 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 805165"];
1134 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 805166"];
1135 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 805167"];
1136 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 805168"];
1137 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 805169"];
1138 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 805170"];
1139 [label="moduleBeingBuilt.SourceLinkStreamOpt 805171"];
1140 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 805172"];
1141 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 805173"];
1142 [label="moduleBeingBuilt.EmbeddedTexts 805174"];
1143 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 805175"];
1144 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 805176"];
1145 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 805177"];
1146 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 805178"];
1147 [label="testData.Module 805179"];
1148 [label="return moduleBeingBuilt; 805180"];
1149 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 805181"];
1150 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 805182"];
1151 [label="param CompileMethods(bool emittingPdb) 805183"];
1152 [label="param CompileMethods(bool emitMetadataOnly) 805184"];
1153 [label="param CompileMethods(bool emitTestCoverageData) 805185"];
1154 [label="param CompileMethods(DiagnosticBag diagnostics) 805186"];
1155 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 805187"];
1156 [label="param CompileMethods(CancellationToken cancellationToken) 805188"];
1157 [label="param CompileMethods(this) 805189"];
1158 [label="PooledHashSet<int>? excludeDiagnostics = null; 805190"];
1159 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 805191"];
1160 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 805192"];
1161 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 805193"];
1162 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 805194"];
1163 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 805195"];
1164 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 805196"];
1165 [label="param GetDiagnostics(CompilationStage stage) 805197"];
1166 [label="param GetDiagnostics(bool includeEarlierStages) 805198"];
1167 [label="param GetDiagnostics(CancellationToken cancellationToken) 805199"];
1168 [label="param GetDiagnostics(this) 805200"];
1169 [label="var diagnostics = DiagnosticBag.GetInstance(); 805201"];
1170 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 805202"];
1171 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 805203"];
1172 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 805204"];
1173 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 805205"];
1174 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 805206"];
1175 [label="param GetDiagnostics(CompilationStage stage) 805207"];
1176 [label="param GetDiagnostics(bool includeEarlierStages) 805208"];
1177 [label="param GetDiagnostics(DiagnosticBag diagnostics) 805209"];
1178 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 805210"];
1179 [label="param GetDiagnostics(this) 805211"];
1180 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 805212"];
1181 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 805213"];
1182 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 805214"];
1183 [label="this.SyntaxTrees 805215"];
1184 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 805216"];
1185 [label="_syntaxAndDeclarations.GetLazyState() 805217"];
1186 [label="param GetLazyState(this) 805218"];
1187 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805219"];
1188 [label="var syntaxTrees = this.SyntaxTrees; 805220"];
1189 [label="this.Options 805221"];
1190 [label="get\n            {\n                return _options;\n            } 805222"];
1191 [label="return _options; 805223"];
1192 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 805224"];
1193 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 805225"];
1194 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 805226"];
1195 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 805227"];
1196 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 805228"];
1197 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 805229"];
1198 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 805230"];
1199 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 805231"];
1200 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 805232"];
1201 [label="ImmutableArray<LoadDirective> loadDirectives; 805233"];
1202 [label="loadDirectives 805234"];
1203 [label="syntaxAndDeclarations.GetLazyState() 805235"];
1204 [label="param GetLazyState(this) 805236"];
1205 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 805237"];
1206 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 805238"];
1207 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 805239"];
1208 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 805240"];
1209 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 805241"];
1210 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 805242"];
1211 [label="cancellationToken.ThrowIfCancellationRequested(); 805243"];
1212 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 805244"];
1213 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 805245"];
1214 [label="CheckAssemblyName(builder); 805246"];
1215 [label="CheckAssemblyName(builder); 805247"];
1216 [label="CheckAssemblyName(builder); 805248"];
1217 [label="Options 805249"];
1218 [label="get\n            {\n                return _options;\n            } 805250"];
1219 [label="return _options; 805251"];
1220 [label="builder.AddRange(Options.Errors); 805252"];
1221 [label="Options 805253"];
1222 [label="get\n            {\n                return _options;\n            } 805254"];
1223 [label="return _options; 805255"];
1224 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 805256"];
1225 [label="cancellationToken.ThrowIfCancellationRequested(); 805257"];
1226 [label="GetBoundReferenceManager() 805258"];
1227 [label="param GetBoundReferenceManager(this) 805259"];
1228 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805260"];
1229 [label="return _referenceManager; 805261"];
1230 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 805262"];
1231 [label="cancellationToken.ThrowIfCancellationRequested(); 805263"];
1232 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 805264"];
1233 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 805265"];
1234 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 805266"];
1235 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 805267"];
1236 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 805268"];
1237 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 805269"];
1238 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 805270"];
1239 [label="param GetSourceDeclarationDiagnostics(this) 805271"];
1240 [label="GlobalImports 805272"];
1241 [label="=> _globalImports.Value 805273"];
1242 [label="_globalImports.Value 805274"];
1243 [label="_globalImports.Value 805275"];
1244 [label="=> Imports.FromGlobalUsings(this) 805276"];
1245 [label="this 805277"];
1246 [label="Imports.FromGlobalUsings(this) 805278"];
1247 [label="Imports.FromGlobalUsings(this) 805279"];
1248 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 805280"];
1249 [label="ScriptCompilationInfo 805281"];
1250 [label="ScriptCompilationInfo?.PreviousScriptCompilation 805282"];
1251 [label="GlobalImports.Complete(cancellationToken); 805283"];
1252 [label="GlobalImports.Complete(cancellationToken); 805284"];
1253 [label="GlobalImports.Complete(cancellationToken); 805285"];
1254 [label="SourceLocation? location = null; 805286"];
1255 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 805287"];
1256 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 805288"];
1257 [label="Assembly 805289"];
1258 [label="get\n            {\n                return SourceAssembly;\n            } 805290"];
1259 [label="SourceAssembly 805291"];
1260 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 805292"];
1261 [label="GetBoundReferenceManager() 805293"];
1262 [label="param GetBoundReferenceManager(this) 805294"];
1263 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805295"];
1264 [label="return _referenceManager; 805296"];
1265 [label="GetBoundReferenceManager(); 805297"];
1266 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 805298"];
1267 [label="Assembly.ForceComplete(location, cancellationToken); 805299"];
1268 [label="Assembly.ForceComplete(location, cancellationToken); 805300"];
1269 [label="Assembly.ForceComplete(location, cancellationToken); 805301"];
1270 [label="Assembly.ForceComplete(location, cancellationToken); 805302"];
1271 [label="Assembly.ForceComplete(location, cancellationToken); 805303"];
1272 [label="SourceAssembly 805304"];
1273 [label="GetBoundReferenceManager() 805305"];
1274 [label="param GetBoundReferenceManager(this) 805306"];
1275 [label="GetBoundReferenceManager(); 805307"];
1276 [label="Declarations 805308"];
1277 [label="_syntaxAndDeclarations.GetLazyState() 805309"];
1278 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805310"];
1279 [label="return Declarations.GetMergedRoot(this); 805311"];
1280 [label="_syntaxAndDeclarations.GetLazyState() 805312"];
1281 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805313"];
1282 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 805314"];
1283 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 805315"];
1284 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 805316"];
1285 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 805317"];
1286 [label="var diagnostics = new DiagnosticBag(); 805318"];
1287 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 805319"];
1288 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 805320"];
1289 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 805321"];
1290 [label="return _lazyDeclarationDiagnostics; 805322"];
1291 [label="param SymbolDeclaredEvent(Symbol symbol) 805323"];
1292 [label="param SymbolDeclaredEvent(this) 805324"];
1293 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 805325"];
1294 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 805326"];
1295 [label="param GetUnaliasedReferencedAssemblies(this) 805327"];
1296 [label="GetBoundReferenceManager() 805328"];
1297 [label="param GetBoundReferenceManager(this) 805329"];
1298 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805330"];
1299 [label="return _referenceManager; 805331"];
1300 [label="var referenceManager = GetBoundReferenceManager(); 805332"];
1301 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 805333"];
1302 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 805334"];
1303 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 805335"];
1304 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 805336"];
1305 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 805337"];
1306 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 805338"];
1307 [label="return _additionalCodegenWarnings; 805339"];
1308 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805340"];
1309 [label="return _referenceManager; 805341"];
1310 [label="GetBoundReferenceManager(); 805342"];
1311 [label="param GetImports(SingleNamespaceDeclaration declaration) 805343"];
1312 [label="param GetImports(this) 805344"];
1313 [label="return GetBinderFactory(declaration.SyntaxReference.SyntaxTree).GetImportsBinder((CSharpSyntaxNode)declaration.SyntaxReference.GetSyntax()).GetImports(basesBeingResolved: null); 805345"];
1314 [label="return GetBinderFactory(declaration.SyntaxReference.SyntaxTree).GetImportsBinder((CSharpSyntaxNode)declaration.SyntaxReference.GetSyntax()).GetImports(basesBeingResolved: null); 805346"];
1315 [label="GetBinderFactory(declaration.SyntaxReference.SyntaxTree) 805347"];
1316 [label="param GetBinderFactory(SyntaxTree syntaxTree) 805348"];
1317 [label="param GetBinderFactory(bool ignoreAccessibility = false) 805349"];
1318 [label="param GetBinderFactory(this) 805350"];
1319 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 805351"];
1320 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 805352"];
1321 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 805353"];
1322 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 805354"];
1323 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 805355"];
1324 [label="param GetBinderFactory(SyntaxTree syntaxTree) 805356"];
1325 [label="param GetBinderFactory(bool ignoreAccessibility) 805357"];
1326 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 805358"];
1327 [label="param GetBinderFactory(this) 805359"];
1328 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 805360"];
1329 [label="ignoreAccessibility 805361"];
1330 [label="_binderFactories 805362"];
1331 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 805363"];
1332 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 805364"];
1333 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 805365"];
1334 [label="GetSyntaxTreeOrdinal(syntaxTree) 805366"];
1335 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 805367"];
1336 [label="param GetSyntaxTreeOrdinal(this) 805368"];
1337 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 805369"];
1338 [label="this.ContainsSyntaxTree(tree) 805370"];
1339 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 805371"];
1340 [label="param ContainsSyntaxTree(this) 805372"];
1341 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 805373"];
1342 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 805374"];
1343 [label="_syntaxAndDeclarations.GetLazyState() 805375"];
1344 [label="param GetLazyState(this) 805376"];
1345 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805377"];
1346 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 805378"];
1347 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 805379"];
1348 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 805380"];
1349 [label="_syntaxAndDeclarations.GetLazyState() 805381"];
1350 [label="param GetLazyState(this) 805382"];
1351 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805383"];
1352 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 805384"];
1353 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 805385"];
1354 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 805386"];
1355 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 805387"];
1356 [label="this.SyntaxTrees 805388"];
1357 [label="param GetLazyState(this) 805389"];
1358 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 805390"];
1359 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 805391"];
1360 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 805392"];
1361 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 805393"];
1362 [label="BinderFactory? previousFactory; 805394"];
1363 [label="var previousWeakReference = binderFactories[treeNum]; 805395"];
1364 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 805396"];
1365 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 805397"];
1366 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 805398"];
1367 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 805399"];
1368 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 805400"];
1369 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 805401"];
1370 [label="param AddNewFactory(SyntaxTree syntaxTree) 805402"];
1371 [label="param AddNewFactory(bool ignoreAccessibility) 805403"];
1372 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 805404"];
1373 [label="param AddNewFactory(this) 805405"];
1374 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805406"];
1375 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805407"];
1376 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805408"];
1377 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805409"];
1378 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805410"];
1379 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 805411"];
1380 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 805412"];
1381 [label="BinderFactory? previousFactory; 805413"];
1382 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 805414"];
1383 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 805415"];
1384 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 805416"];
1385 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 805417"];
1386 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 805418"];
1387 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 805419"];
1388 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 805420"];
1389 [label="return newFactory; 805421"];
1390 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 805422"];
1391 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 805423"];
1392 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 805424"];
1393 [label="GetAllUnaliasedModules(modules); 805425"];
1394 [label="GetAllUnaliasedModules(modules) 805426"];
1395 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 805427"];
1396 [label="param GetAllUnaliasedModules(this) 805428"];
1397 [label="Assembly 805429"];
1398 [label="get\n            {\n                return SourceAssembly;\n            } 805430"];
1399 [label="GetBoundReferenceManager() 805431"];
1400 [label="param GetBoundReferenceManager(this) 805432"];
1401 [label="GetBoundReferenceManager(); 805433"];
1402 [label="modules.AddRange(Assembly.Modules); 805434"];
1403 [label="modules.AddRange(Assembly.Modules); 805435"];
1404 [label="GetBoundReferenceManager() 805436"];
1405 [label="param GetBoundReferenceManager(this) 805437"];
1406 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805438"];
1407 [label="return _referenceManager; 805439"];
1408 [label="var referenceManager = GetBoundReferenceManager(); 805440"];
1409 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 805441"];
1410 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 805442"];
1411 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 805443"];
1412 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 805444"];
1413 [label="GetAllUnaliasedModules(modules); 805445"];
1414 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 805446"];
1415 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 805447"];
1416 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 805448"];
1417 [label="modules.Free(); 805449"];
1418 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 805450"];
1419 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 805451"];
1420 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 805452"];
1421 [label="return _lazyGlobalNamespace; 805453"];
1422 [label="get\n            {\n                return Assembly.Modules[0];\n            } 805454"];
1423 [label="Assembly 805455"];
1424 [label="get\n            {\n                return SourceAssembly;\n            } 805456"];
1425 [label="SourceAssembly 805457"];
1426 [label="GetBoundReferenceManager() 805458"];
1427 [label="param GetBoundReferenceManager(this) 805459"];
1428 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805460"];
1429 [label="return _referenceManager; 805461"];
1430 [label="GetBoundReferenceManager(); 805462"];
1431 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 805463"];
1432 [label="return Assembly.Modules[0]; 805464"];
1433 [label="return Assembly.Modules[0]; 805465"];
1434 [label="param RecordImport(UsingDirectiveSyntax syntax) 805466"];
1435 [label="param RecordImport(this) 805467"];
1436 [label="RecordImportInternal(syntax); 805468"];
1437 [label="RecordImportInternal(syntax) 805469"];
1438 [label="param RecordImportInternal(CSharpSyntaxNode syntax) 805470"];
1439 [label="param RecordImportInternal(this) 805471"];
1440 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 805472"];
1441 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 805473"];
1442 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 805474"];
1443 [label="new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span) 805475"];
1444 [label="param ImportInfo(SyntaxTree tree) 805476"];
1445 [label="param ImportInfo(SyntaxKind kind) 805477"];
1446 [label="param ImportInfo(TextSpan span) 805478"];
1447 [label="param ImportInfo(this) 805479"];
1448 [label="this.Tree 805480"];
1449 [label="this.Kind 805481"];
1450 [label="this.Span 805482"];
1451 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 805483"];
1452 [label="param GetHashCode(this) 805484"];
1453 [label="return Hash.Combine(Tree, Span.Start); 805485"];
1454 [label="RecordImportInternal(syntax); 805486"];
1455 [label="param GetBoundReferenceManager(this) 805487"];
1456 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805488"];
1457 [label="return _referenceManager; 805489"];
1458 [label="GetBoundReferenceManager(); 805490"];
1459 [label="SourceAssembly 805491"];
1460 [label="GetBoundReferenceManager() 805492"];
1461 [label="param GetBoundReferenceManager(this) 805493"];
1462 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805494"];
1463 [label="return _referenceManager; 805495"];
1464 [label="GetBoundReferenceManager(); 805496"];
1465 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 805497"];
1466 [label="GetBoundReferenceManager() 805498"];
1467 [label="param GetBoundReferenceManager(this) 805499"];
1468 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805500"];
1469 [label="return _referenceManager; 805501"];
1470 [label="GetBoundReferenceManager(); 805502"];
1471 [label="param GetSpecialType(SpecialType specialType) 805503"];
1472 [label="param GetSpecialType(this) 805504"];
1473 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 805505"];
1474 [label="NamedTypeSymbol result; 805506"];
1475 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 805507"];
1476 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 805508"];
1477 [label="Assembly 805509"];
1478 [label="GetBoundReferenceManager() 805510"];
1479 [label="GetBoundReferenceManager(); 805511"];
1480 [label="result = Assembly.GetSpecialType(specialType); 805512"];
1481 [label="result = Assembly.GetSpecialType(specialType); 805513"];
1482 [label="Debug.Assert(result.SpecialType == specialType); 805514"];
1483 [label="return result; 805515"];
1484 [label="param GetBinder(CSharpSyntaxNode syntax) 805516"];
1485 [label="param GetBinder(this) 805517"];
1486 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 805518"];
1487 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 805519"];
1488 [label="GetBinderFactory(syntax.SyntaxTree) 805520"];
1489 [label="param GetBinderFactory(SyntaxTree syntaxTree) 805521"];
1490 [label="param GetBinderFactory(bool ignoreAccessibility = false) 805522"];
1491 [label="param GetBinderFactory(this) 805523"];
1492 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 805524"];
1493 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 805525"];
1494 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 805526"];
1495 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 805527"];
1496 [label="param GetBinderFactory(bool ignoreAccessibility) 805528"];
1497 [label="param GetBinderFactory(this) 805529"];
1498 [label="ignoreAccessibility 805530"];
1499 [label="_binderFactories 805531"];
1500 [label="GetSyntaxTreeOrdinal(syntaxTree) 805532"];
1501 [label="param GetSyntaxTreeOrdinal(this) 805533"];
1502 [label="this.ContainsSyntaxTree(tree) 805534"];
1503 [label="param ContainsSyntaxTree(this) 805535"];
1504 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 805536"];
1505 [label="_syntaxAndDeclarations.GetLazyState() 805537"];
1506 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805538"];
1507 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 805539"];
1508 [label="_syntaxAndDeclarations.GetLazyState() 805540"];
1509 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805541"];
1510 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 805542"];
1511 [label="BinderFactory? previousFactory; 805543"];
1512 [label="var previousWeakReference = binderFactories[treeNum]; 805544"];
1513 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 805545"];
1514 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 805546"];
1515 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 805547"];
1516 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 805548"];
1517 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 805549"];
1518 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 805550"];
1519 [label="param AddNewFactory(bool ignoreAccessibility) 805551"];
1520 [label="param AddNewFactory(this) 805552"];
1521 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805553"];
1522 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805554"];
1523 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805555"];
1524 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 805556"];
1525 [label="BinderFactory? previousFactory; 805557"];
1526 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 805558"];
1527 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 805559"];
1528 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 805560"];
1529 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 805561"];
1530 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 805562"];
1531 [label="Assembly 805563"];
1532 [label="SourceAssembly 805564"];
1533 [label="GetBoundReferenceManager() 805565"];
1534 [label="param GetBoundReferenceManager(this) 805566"];
1535 [label="GetBoundReferenceManager(); 805567"];
1536 [label="return Assembly.Modules[0]; 805568"];
1537 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 805569"];
1538 [label="param IsNullableAnalysisEnabledIn(this) 805570"];
1539 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 805571"];
1540 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 805572"];
1541 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 805573"];
1542 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 805574"];
1543 [label="param IsNullableAnalysisEnabledIn(this) 805575"];
1544 [label="GetNullableAnalysisValue() 805576"];
1545 [label="param GetNullableAnalysisValue(this) 805577"];
1546 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 805578"];
1547 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 805579"];
1548 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 805580"];
1549 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 805581"];
1550 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 805582"];
1551 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 805583"];
1552 [label="Options 805584"];
1553 [label="get\n            {\n                return _options;\n            } 805585"];
1554 [label="return _options; 805586"];
1555 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 805587"];
1556 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 805588"];
1557 [label="param GetBinderFactory(SyntaxTree syntaxTree) 805589"];
1558 [label="param GetBinderFactory(bool ignoreAccessibility = false) 805590"];
1559 [label="param GetBinderFactory(this) 805591"];
1560 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 805592"];
1561 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 805593"];
1562 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 805594"];
1563 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 805595"];
1564 [label="param GetBinderFactory(SyntaxTree syntaxTree) 805596"];
1565 [label="param GetBinderFactory(bool ignoreAccessibility) 805597"];
1566 [label="param GetBinderFactory(this) 805598"];
1567 [label="ignoreAccessibility 805599"];
1568 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 805600"];
1569 [label="GetSyntaxTreeOrdinal(syntaxTree) 805601"];
1570 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 805602"];
1571 [label="param GetSyntaxTreeOrdinal(this) 805603"];
1572 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 805604"];
1573 [label="this.ContainsSyntaxTree(tree) 805605"];
1574 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 805606"];
1575 [label="param ContainsSyntaxTree(this) 805607"];
1576 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 805608"];
1577 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 805609"];
1578 [label="_syntaxAndDeclarations.GetLazyState() 805610"];
1579 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805611"];
1580 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 805612"];
1581 [label="_syntaxAndDeclarations.GetLazyState() 805613"];
1582 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805614"];
1583 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 805615"];
1584 [label="BinderFactory? previousFactory; 805616"];
1585 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 805617"];
1586 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 805618"];
1587 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 805619"];
1588 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 805620"];
1589 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 805621"];
1590 [label="param AddNewFactory(SyntaxTree syntaxTree) 805622"];
1591 [label="param AddNewFactory(bool ignoreAccessibility) 805623"];
1592 [label="param AddNewFactory(this) 805624"];
1593 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805625"];
1594 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805626"];
1595 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805627"];
1596 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 805628"];
1597 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 805629"];
1598 [label="BinderFactory? previousFactory; 805630"];
1599 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 805631"];
1600 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 805632"];
1601 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 805633"];
1602 [label="get\n            {\n                return Assembly.Modules[0];\n            } 805634"];
1603 [label="Assembly 805635"];
1604 [label="get\n            {\n                return SourceAssembly;\n            } 805636"];
1605 [label="SourceAssembly 805637"];
1606 [label="GetBoundReferenceManager() 805638"];
1607 [label="param GetBoundReferenceManager(this) 805639"];
1608 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805640"];
1609 [label="return _referenceManager; 805641"];
1610 [label="GetBoundReferenceManager(); 805642"];
1611 [label="return Assembly.Modules[0]; 805643"];
1612 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 805644"];
1613 [label="param IsFeatureEnabled(MessageID feature) 805645"];
1614 [label="compilation.SyntaxTrees 805646"];
1615 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 805647"];
1616 [label="_syntaxAndDeclarations.GetLazyState() 805648"];
1617 [label="param GetLazyState(this) 805649"];
1618 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 805650"];
1619 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 805651"];
1620 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 805652"];
1621 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 805653"];
1622 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 805654"];
1623 [label="GetBoundReferenceManager() 805655"];
1624 [label="GetBoundReferenceManager(); 805656"];
1625 [label="Debug.Assert(result.SpecialType == specialType); 805657"];
1626 [label="return previousFactory; 805658"];
1627 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805659"];
1628 [label="return _referenceManager; 805660"];
1629 [label="GetBoundReferenceManager(); 805661"];
1630 [label="param RecordImport(UsingDirectiveSyntax syntax) 805662"];
1631 [label="param RecordImport(this) 805663"];
1632 [label="RecordImportInternal(syntax); 805664"];
1633 [label="RecordImportInternal(syntax) 805665"];
1634 [label="param RecordImportInternal(CSharpSyntaxNode syntax) 805666"];
1635 [label="param RecordImportInternal(this) 805667"];
1636 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 805668"];
1637 [label="new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span) 805669"];
1638 [label="param ImportInfo(this) 805670"];
1639 [label="param Equals(ImportInfo other) 805671"];
1640 [label="param Equals(this) 805672"];
1641 [label="return\n                    other.Kind == this.Kind &&\n                    other.Tree == this.Tree &&\n                    other.Span == this.Span; 805673"];
1642 [label="RecordImportInternal(syntax); 805674"];
1643 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805675"];
1644 [label="return _referenceManager; 805676"];
1645 [label="GetBoundReferenceManager(); 805677"];
1646 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805678"];
1647 [label="return _referenceManager; 805679"];
1648 [label="GetBoundReferenceManager(); 805680"];
1649 [label="GetBoundReferenceManager() 805681"];
1650 [label="GetBoundReferenceManager(); 805682"];
1651 [label="Debug.Assert(result.SpecialType == specialType); 805683"];
1652 [label="param ShouldEmitNullableAttributes(Symbol symbol) 805684"];
1653 [label="param ShouldEmitNullableAttributes(this) 805685"];
1654 [label="RoslynDebug.Assert(symbol is object); 805686"];
1655 [label="RoslynDebug.Assert(symbol is object); 805687"];
1656 [label="Debug.Assert(symbol.IsDefinition); 805688"];
1657 [label="SourceModule 805689"];
1658 [label="get\n            {\n                return Assembly.Modules[0];\n            } 805690"];
1659 [label="Assembly 805691"];
1660 [label="get\n            {\n                return SourceAssembly;\n            } 805692"];
1661 [label="SourceAssembly 805693"];
1662 [label="GetBoundReferenceManager() 805694"];
1663 [label="param GetBoundReferenceManager(this) 805695"];
1664 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805696"];
1665 [label="return _referenceManager; 805697"];
1666 [label="GetBoundReferenceManager(); 805698"];
1667 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 805699"];
1668 [label="return Assembly.Modules[0]; 805700"];
1669 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 805701"];
1670 [label="EmitNullablePublicOnly 805702"];
1671 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 805703"];
1672 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 805704"];
1673 [label="SyntaxTrees 805705"];
1674 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 805706"];
1675 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 805707"];
1676 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 805708"];
1677 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 805709"];
1678 [label="_lazyEmitNullablePublicOnly 805710"];
1679 [label="return _lazyEmitNullablePublicOnly.Value(); 805711"];
1680 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 805712"];
1681 [label="return true; 805713"];
1682 [label="Debug.Assert(symbol.IsDefinition); 805714"];
1683 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805715"];
1684 [label="return _referenceManager; 805716"];
1685 [label="GetBoundReferenceManager(); 805717"];
1686 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 805718"];
1687 [label="GetBoundReferenceManager() 805719"];
1688 [label="GetBoundReferenceManager(); 805720"];
1689 [label="Debug.Assert(result.SpecialType == specialType); 805721"];
1690 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 805722"];
1691 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 805723"];
1692 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 805724"];
1693 [label="_declarationDiagnosticsFrozen = true; 805725"];
1694 [label="_declarationDiagnosticsFrozen 805726"];
1695 [label="_needsGeneratedAttributes_IsFrozen = true; 805727"];
1696 [label="_needsGeneratedAttributes_IsFrozen 805728"];
1697 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 805729"];
1698 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 805730"];
1699 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 805731"];
1700 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 805732"];
1701 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 805733"];
1702 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 805734"];
1703 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 805735"];
1704 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 805736"];
1705 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 805737"];
1706 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 805738"];
1707 [label="param GetClsComplianceDiagnostics(this) 805739"];
1708 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 805740"];
1709 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 805741"];
1710 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 805742"];
1711 [label="var builder = DiagnosticBag.GetInstance(); 805743"];
1712 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 805744"];
1713 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 805745"];
1714 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 805746"];
1715 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 805747"];
1716 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 805748"];
1717 [label="param CheckCompliance(CSharpCompilation compilation) 805749"];
1718 [label="param CheckCompliance(DiagnosticBag diagnostics) 805750"];
1719 [label="param CheckCompliance(CancellationToken cancellationToken) 805751"];
1720 [label="param CheckCompliance(SyntaxTree filterTree = null) 805752"];
1721 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 805753"];
1722 [label="var queue = new ConcurrentQueue<Diagnostic>(); 805754"];
1723 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 805755"];
1724 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 805756"];
1725 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 805757"];
1726 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 805758"];
1727 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 805759"];
1728 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 805760"];
1729 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 805761"];
1730 [label="param ClsComplianceChecker(CSharpCompilation compilation) 805762"];
1731 [label="param ClsComplianceChecker(SyntaxTree filterTree) 805763"];
1732 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 805764"];
1733 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 805765"];
1734 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 805766"];
1735 [label="param ClsComplianceChecker(this) 805767"];
1736 [label="param ClsComplianceChecker(this) 805768"];
1737 [label="_compilation 805769"];
1738 [label="_filterTree 805770"];
1739 [label="_filterSpanWithinTree 805771"];
1740 [label="_diagnostics 805772"];
1741 [label="_declaredOrInheritedCompliance 805773"];
1742 [label="_compilerTasks 805774"];
1743 [label="_compilation 805775"];
1744 [label="_filterTree 805776"];
1745 [label="_filterSpanWithinTree 805777"];
1746 [label="_diagnostics 805778"];
1747 [label="_cancellationToken 805779"];
1748 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 805780"];
1749 [label="_declaredOrInheritedCompliance 805781"];
1750 [label="ConcurrentAnalysis 805782"];
1751 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 805783"];
1752 [label="null 805784"];
1753 [label="_filterTree == null 805785"];
1754 [label="_compilation.Options 805786"];
1755 [label="get\n            {\n                return _options;\n            } 805787"];
1756 [label="return _options; 805788"];
1757 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 805789"];
1758 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 805790"];
1759 [label="_compilerTasks = new ConcurrentStack<Task>(); 805791"];
1760 [label="_compilerTasks 805792"];
1761 [label="compilation.Assembly 805793"];
1762 [label="get\n            {\n                return SourceAssembly;\n            } 805794"];
1763 [label="GetBoundReferenceManager() 805795"];
1764 [label="param GetBoundReferenceManager(this) 805796"];
1765 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 805797"];
1766 [label="return _referenceManager; 805798"];
1767 [label="GetBoundReferenceManager(); 805799"];
1768 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 805800"];
1769 [label="checker.Visit(compilation.Assembly); 805801"];
1770 [label="checker.Visit(compilation.Assembly); 805802"];
1771 [label="checker.Visit(compilation.Assembly); 805803"];
1772 [label="param VisitAssembly(AssemblySymbol symbol) 805804"];
1773 [label="param VisitAssembly(this) 805805"];
1774 [label="_cancellationToken.ThrowIfCancellationRequested(); 805806"];
1775 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 805807"];
1776 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 805808"];
1777 [label="GetDeclaredOrInheritedCompliance(symbol) 805809"];
1778 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 805810"];
1779 [label="param GetDeclaredOrInheritedCompliance(this) 805811"];
1780 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 805812"];
1781 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 805813"];
1782 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 805814"];
1783 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 805815"];
1784 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 805816"];
1785 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 805817"];
1786 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 805818"];
1787 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 805819"];
1788 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 805820"];
1789 [label="Compliance compliance; 805821"];
1790 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 805822"];
1791 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 805823"];
1792 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 805824"];
1793 [label="Location ignoredLocation; 805825"];
1794 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 805826"];
1795 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 805827"];
1796 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 805828"];
1797 [label="param GetDeclaredCompliance(Symbol symbol) 805829"];
1798 [label="param GetDeclaredCompliance(out Location attributeLocation) 805830"];
1799 [label="param GetDeclaredCompliance(this) 805831"];
1800 [label="attributeLocation = null; 805832"];
1801 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 805833"];
1802 [label="return null; 805834"];
1803 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 805835"];
1804 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 805836"];
1805 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 805837"];
1806 [label="compliance = Compliance.ImpliedFalse; 805838"];
1807 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 805839"];
1808 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 805840"];
1809 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 805841"];
1810 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 805842"];
1811 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 805843"];
1812 [label="IsTrue(assemblyCompliance) 805844"];
1813 [label="param IsTrue(Compliance compliance) 805845"];
1814 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 805846"];
1815 [label="return false; 805847"];
1816 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 805848"];
1817 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 805849"];
1818 [label="ModuleSymbol module = symbol.Modules[i]; 805850"];
1819 [label="Location attributeLocation; 805851"];
1820 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 805852"];
1821 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 805853"];
1822 [label="GetDeclaredCompliance(module, out attributeLocation) 805854"];
1823 [label="param GetDeclaredCompliance(Symbol symbol) 805855"];
1824 [label="param GetDeclaredCompliance(out Location attributeLocation) 805856"];
1825 [label="param GetDeclaredCompliance(this) 805857"];
1826 [label="attributeLocation = null; 805858"];
1827 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 805859"];
1828 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 805860"];
1829 [label="i == 0 805861"];
1830 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 805862"];
1831 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 805863"];
1832 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 805864"];
1833 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 805865"];
1834 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 805866"];
1835 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 805867"];
1836 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 805868"];
1837 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 805869"];
1838 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 805870"];
1839 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 805871"];
1840 [label="GetDeclaredOrInheritedCompliance(sourceModule) 805872"];
1841 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 805873"];
1842 [label="param GetDeclaredOrInheritedCompliance(this) 805874"];
1843 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 805875"];
1844 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 805876"];
1845 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 805877"];
1846 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 805878"];
1847 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 805879"];
1848 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 805880"];
1849 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 805881"];
1850 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 805882"];
1851 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 805883"];
1852 [label="Compliance compliance; 805884"];
1853 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 805885"];
1854 [label="Location ignoredLocation; 805886"];
1855 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 805887"];
1856 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 805888"];
1857 [label="param GetDeclaredCompliance(out Location attributeLocation) 805889"];
1858 [label="param GetDeclaredCompliance(this) 805890"];
1859 [label="attributeLocation = null; 805891"];
1860 [label="return null; 805892"];
1861 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 805893"];
1862 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 805894"];
1863 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 805895"];
1864 [label="GetInheritedCompliance(symbol) 805896"];
1865 [label="param GetInheritedCompliance(Symbol symbol) 805897"];
1866 [label="param GetInheritedCompliance(this) 805898"];
1867 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 805899"];
1868 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 805900"];
1869 [label="System.Diagnostics.Debug.Assert((object)containing != null); 805901"];
1870 [label="System.Diagnostics.Debug.Assert((object)containing != null); 805902"];
1871 [label="return GetDeclaredOrInheritedCompliance(containing); 805903"];
1872 [label="GetDeclaredOrInheritedCompliance(containing) 805904"];
1873 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 805905"];
1874 [label="param GetDeclaredOrInheritedCompliance(this) 805906"];
1875 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 805907"];
1876 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 805908"];
1877 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 805909"];
1878 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 805910"];
1879 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 805911"];
1880 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 805912"];
1881 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 805913"];
1882 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 805914"];
1883 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 805915"];
1884 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 805916"];
1885 [label="return compliance; 805917"];
1886 [label="IsTrue(GetInheritedCompliance(symbol)) 805918"];
1887 [label="param IsTrue(Compliance compliance) 805919"];
1888 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 805920"];
1889 [label="return false; 805921"];
1890 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 805922"];
1891 [label="param IsTrue(Compliance compliance) 805923"];
1892 [label="Visit(symbol.GlobalNamespace); 805924"];
1893 [label="Visit(symbol.GlobalNamespace); 805925"];
1894 [label="param VisitNamespace(NamespaceSymbol symbol) 805926"];
1895 [label="param VisitNamespace(this) 805927"];
1896 [label="_cancellationToken.ThrowIfCancellationRequested(); 805928"];
1897 [label="if (DoNotVisit(symbol)) return; 805929"];
1898 [label="DoNotVisit(symbol) 805930"];
1899 [label="param DoNotVisit(Symbol symbol) 805931"];
1900 [label="param DoNotVisit(this) 805932"];
1901 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 805933"];
1902 [label="return false; 805934"];
1903 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 805935"];
1904 [label="GetDeclaredOrInheritedCompliance(symbol) 805936"];
1905 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 805937"];
1906 [label="param GetDeclaredOrInheritedCompliance(this) 805938"];
1907 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 805939"];
1908 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 805940"];
1909 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 805941"];
1910 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 805942"];
1911 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 805943"];
1912 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 805944"];
1913 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 805945"];
1914 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 805946"];
1915 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 805947"];
1916 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 805948"];
1917 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 805949"];
1918 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 805950"];
1919 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 805951"];
1920 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 805952"];
1921 [label="return compliance; 805953"];
1922 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 805954"];
1923 [label="param IsTrue(Compliance compliance) 805955"];
1924 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 805956"];
1925 [label="return false; 805957"];
1926 [label="ConcurrentAnalysis 805958"];
1927 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 805959"];
1928 [label="null 805960"];
1929 [label="_filterTree == null 805961"];
1930 [label="_compilation.Options 805962"];
1931 [label="get\n            {\n                return _options;\n            } 805963"];
1932 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 805964"];
1933 [label="VisitNamespaceMembersAsTasks(symbol); 805965"];
1934 [label="VisitNamespaceMembersAsTasks(symbol) 805966"];
1935 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 805967"];
1936 [label="param VisitNamespaceMembersAsTasks(this) 805968"];
1937 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 805969"];
1938 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 805970"];
1939 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 805971"];
1940 [label="VisitNamespaceMembersAsTasks(symbol); 805972"];
1941 [label="checker.WaitForWorkers() 805973"];
1942 [label="param WaitForWorkers(this) 805974"];
1943 [label="var tasks = _compilerTasks; 805975"];
1944 [label="if (tasks == null)\n            {\n                return;\n            } 805976"];
1945 [label="if (tasks == null)\n            {\n                return;\n            } 805977"];
1946 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 805978"];
1947 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 805979"];
1948 [label="curTask.GetAwaiter().GetResult(); 805980"];
1949 [label="checker.WaitForWorkers(); 805981"];
1950 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 805982"];
1951 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 805983"];
1952 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 805984"];
1953 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 805985"];
1954 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 805986"];
1955 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 805987"];
1956 [label="return _lazyClsComplianceDiagnostics; 805988"];
1957 [label="return result.AsImmutable().Concat(clsDiagnostics); 805989"];
1958 [label="return result.AsImmutable().Concat(clsDiagnostics); 805990"];
1959 [label="return result.AsImmutable().Concat(clsDiagnostics); 805991"];
1960 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 805992"];
1961 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 805993"];
1962 [label="cancellationToken.ThrowIfCancellationRequested(); 805994"];
1963 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 805995"];
1964 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 805996"];
1965 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 805997"];
1966 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 805998"];
1967 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 805999"];
1968 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 806000"];
1969 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 806001"];
1970 [label="return diagnostics.ToReadOnlyAndFree(); 806002"];
1971 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 806003"];
1972 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 806004"];
1973 [label="excludeDiagnostics?.Free(); 806005"];
1974 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 806006"];
1975 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 806007"];
1976 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 806008"];
1977 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 806009"];
1978 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 806010"];
1979 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 806011"];
1980 [label="param AddDebugSourceDocumentsForChecksumDirectives(DebugDocumentsBuilder documentsBuilder) 806012"];
1981 [label="param AddDebugSourceDocumentsForChecksumDirectives(SyntaxTree tree) 806013"];
1982 [label="param AddDebugSourceDocumentsForChecksumDirectives(DiagnosticBag diagnostics) 806014"];
1983 [label="param AddDebugSourceDocumentsForChecksumDirectives(this) 806015"];
1984 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 806016"];
1985 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 806017"];
1986 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 806018"];
1987 [label="foreach (var directive in checksumDirectives)\n            {\n                var checksumDirective = (PragmaChecksumDirectiveTriviaSyntax)directive;\n                var path = checksumDirective.File.ValueText;\n\n                var checksumText = checksumDirective.Bytes.ValueText;\n                var normalizedPath = documentsBuilder.NormalizeDebugDocumentPath(path, basePath: tree.FilePath);\n                var existingDoc = documentsBuilder.TryGetDebugDocumentForNormalizedPath(normalizedPath);\n\n                // duplicate checksum pragmas are valid as long as values match\n                // if we have seen this document already, check for matching values.\n                if (existingDoc != null)\n                {\n                    // pragma matches a file path on an actual tree.\n                    // Dev12 compiler just ignores the pragma in this case which means that\n                    // checksum of the actual tree always wins and no warning is given.\n                    // We will continue doing the same.\n                    if (existingDoc.IsComputedChecksum)\n                    {\n                        continue;\n                    }\n\n                    var sourceInfo = existingDoc.GetSourceInfo();\n                    if (ChecksumMatches(checksumText, sourceInfo.Checksum))\n                    {\n                        var guid = Guid.Parse(checksumDirective.Guid.ValueText);\n                        if (guid == sourceInfo.ChecksumAlgorithmId)\n                        {\n                            // all parts match, nothing to do\n                            continue;\n                        }\n                    }\n\n                    // did not match to an existing document\n                    // produce a warning and ignore the pragma\n                    diagnostics.Add(ErrorCode.WRN_ConflictingChecksum, new SourceLocation(checksumDirective), path);\n                }\n                else\n                {\n                    var newDocument = new Cci.DebugSourceDocument(\n                        normalizedPath,\n                        Cci.DebugSourceDocument.CorSymLanguageTypeCSharp,\n                        MakeChecksumBytes(checksumText),\n                        Guid.Parse(checksumDirective.Guid.ValueText));\n\n                    documentsBuilder.AddDebugDocument(newDocument);\n                }\n            } 806019"];
1988 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 806020"];
1989 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 806021"];
1990 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 806022"];
1991 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 806023"];
1992 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 806024"];
1993 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 806025"];
1994 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 806026"];
1995 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 806027"];
1996 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 806028"];
1997 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 806029"];
1998 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 806030"];
1999 [label="param CompileMethodBodies(CSharpCompilation compilation) 806031"];
2000 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 806032"];
2001 [label="param CompileMethodBodies(bool emittingPdb) 806033"];
2002 [label="param CompileMethodBodies(bool emitTestCoverageData) 806034"];
2003 [label="param CompileMethodBodies(bool hasDeclarationErrors) 806035"];
2004 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 806036"];
2005 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 806037"];
2006 [label="param CompileMethodBodies(CancellationToken cancellationToken) 806038"];
2007 [label="Debug.Assert(compilation != null); 806039"];
2008 [label="Debug.Assert(compilation != null); 806040"];
2009 [label="Debug.Assert(diagnostics != null); 806041"];
2010 [label="Debug.Assert(diagnostics != null); 806042"];
2011 [label="compilation.PreviousSubmission 806043"];
2012 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 806044"];
2013 [label="ScriptCompilationInfo 806045"];
2014 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 806046"];
2015 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 806047"];
2016 [label="MethodSymbol entryPoint = null; 806048"];
2017 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 806049"];
2018 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 806050"];
2019 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 806051"];
2020 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 806052"];
2021 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 806053"];
2022 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 806054"];
2023 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 806055"];
2024 [label="param GetEntryPoint(CSharpCompilation compilation) 806056"];
2025 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 806057"];
2026 [label="param GetEntryPoint(bool hasDeclarationErrors) 806058"];
2027 [label="param GetEntryPoint(DiagnosticBag diagnostics) 806059"];
2028 [label="param GetEntryPoint(CancellationToken cancellationToken) 806060"];
2029 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 806061"];
2030 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 806062"];
2031 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 806063"];
2032 [label="param GetEntryPointAndDiagnostics(this) 806064"];
2033 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 806065"];
2034 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 806066"];
2035 [label="EntryPoint? entryPoint; 806067"];
2036 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 806068"];
2037 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 806069"];
2038 [label="GetBoundReferenceManager() 806070"];
2039 [label="GetBoundReferenceManager(); 806071"];
2040 [label="this.Options 806072"];
2041 [label="return _options; 806073"];
2042 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 806074"];
2043 [label="entryPoint = null; 806075"];
2044 [label="this.Options 806076"];
2045 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 806077"];
2046 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 806078"];
2047 [label="if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    } 806079"];
2048 [label="ImmutableArray<Diagnostic> diagnostics; 806080"];
2049 [label="diagnostics 806081"];
2050 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 806082"];
2051 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 806083"];
2052 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 806084"];
2053 [label="FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics) 806085"];
2054 [label="param FindEntryPoint(MethodSymbol? simpleProgramEntryPointSymbol) 806086"];
2055 [label="param FindEntryPoint(CancellationToken cancellationToken) 806087"];
2056 [label="param FindEntryPoint(out ImmutableArray<Diagnostic> sealedDiagnostics) 806088"];
2057 [label="param FindEntryPoint(this) 806089"];
2058 [label="var diagnostics = DiagnosticBag.GetInstance(); 806090"];
2059 [label="var entryPointCandidates = ArrayBuilder<MethodSymbol>.GetInstance(); 806091"];
2060 [label="NamedTypeSymbol? mainType; 806092"];
2061 [label="this.Options 806093"];
2062 [label="get\n            {\n                return _options;\n            } 806094"];
2063 [label="string? mainTypeName = this.Options.MainTypeName; 806095"];
2064 [label="this.SourceModule 806096"];
2065 [label="get\n            {\n                return Assembly.Modules[0];\n            } 806097"];
2066 [label="GetBoundReferenceManager() 806098"];
2067 [label="param GetBoundReferenceManager(this) 806099"];
2068 [label="GetBoundReferenceManager(); 806100"];
2069 [label="NamespaceSymbol globalNamespace = this.SourceModule.GlobalNamespace; 806101"];
2070 [label="this.ScriptClass 806102"];
2071 [label="get { return _scriptClass.Value; } 806103"];
2072 [label="return _scriptClass.Value; 806104"];
2073 [label="_scriptClass.Value 806105"];
2074 [label="param BindScriptClass(this) 806106"];
2075 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 806107"];
2076 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 806108"];
2077 [label="get { return this.SourceModule.GetPublicSymbol(); } 806109"];
2078 [label="this.SourceModule 806110"];
2079 [label="get\n            {\n                return Assembly.Modules[0];\n            } 806111"];
2080 [label="GetBoundReferenceManager() 806112"];
2081 [label="param GetBoundReferenceManager(this) 806113"];
2082 [label="GetBoundReferenceManager(); 806114"];
2083 [label="return this.SourceModule.GetPublicSymbol(); 806115"];
2084 [label="var scriptClass = this.ScriptClass; 806116"];
2085 [label="if (mainTypeName != null)\n                {\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    }\n\n                    var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity();\n                    if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    }\n\n                    mainType = mainTypeOrNamespace as NamedTypeSymbol;\n                    if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    }\n\n                    AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered());\n                }\n                else\n                {\n                    mainType = null;\n\n                    AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken));\n\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    }\n                } 806117"];
2086 [label="if (mainTypeName != null)\n                {\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    }\n\n                    var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity();\n                    if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    }\n\n                    mainType = mainTypeOrNamespace as NamedTypeSymbol;\n                    if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    }\n\n                    AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered());\n                }\n                else\n                {\n                    mainType = null;\n\n                    AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken));\n\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    }\n                } 806118"];
2087 [label="mainType = null; 806119"];
2088 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 806120"];
2089 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 806121"];
2090 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 806122"];
2091 [label="this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken) 806123"];
2092 [label="param GetSymbolsWithNameCore(string name) 806124"];
2093 [label="param GetSymbolsWithNameCore(SymbolFilter filter = SymbolFilter.TypeAndMember) 806125"];
2094 [label="param GetSymbolsWithNameCore(CancellationToken cancellationToken = default) 806126"];
2095 [label="param GetSymbolsWithNameCore(this) 806127"];
2096 [label="if (name == null)\n            {\n                throw new ArgumentNullException(nameof(name));\n            } 806128"];
2097 [label="if (name == null)\n            {\n                throw new ArgumentNullException(nameof(name));\n            } 806129"];
2098 [label="if (filter == SymbolFilter.None)\n            {\n                throw new ArgumentException(CSharpResources.NoNoneSearchCriteria, nameof(filter));\n            } 806130"];
2099 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 806131"];
2100 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 806132"];
2101 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 806133"];
2102 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 806134"];
2103 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 806135"];
2104 [label="new NameSymbolSearcher(this, filter, name, cancellationToken) 806136"];
2105 [label="param NameSymbolSearcher(CSharpCompilation compilation) 806137"];
2106 [label="param NameSymbolSearcher(SymbolFilter filter) 806138"];
2107 [label="param NameSymbolSearcher(string name) 806139"];
2108 [label="param NameSymbolSearcher(CancellationToken cancellationToken) 806140"];
2109 [label="param NameSymbolSearcher(this) 806141"];
2110 [label="compilation 806142"];
2111 [label="filter 806143"];
2112 [label="cancellationToken 806144"];
2113 [label="param NameSymbolSearcher(this) 806145"];
2114 [label="param AbstractSymbolSearcher(CSharpCompilation compilation) 806146"];
2115 [label="param AbstractSymbolSearcher(SymbolFilter filter) 806147"];
2116 [label="param AbstractSymbolSearcher(CancellationToken cancellationToken) 806148"];
2117 [label="param AbstractSymbolSearcher(this) 806149"];
2118 [label="_cache 806150"];
2119 [label="_compilation 806151"];
2120 [label="_includeNamespace 806152"];
2121 [label="_includeType 806153"];
2122 [label="_includeMember 806154"];
2123 [label="_cache = PooledDictionary<Declaration, NamespaceOrTypeSymbol>.GetInstance(); 806155"];
2124 [label="_cache 806156"];
2125 [label="_compilation 806157"];
2126 [label="_includeNamespace = (filter & SymbolFilter.Namespace) == SymbolFilter.Namespace; 806158"];
2127 [label="_includeNamespace 806159"];
2128 [label="_includeType = (filter & SymbolFilter.Type) == SymbolFilter.Type; 806160"];
2129 [label="_includeType 806161"];
2130 [label="_includeMember = (filter & SymbolFilter.Member) == SymbolFilter.Member; 806162"];
2131 [label="_includeMember 806163"];
2132 [label="_cancellationToken 806164"];
2133 [label="_name 806165"];
2134 [label="_name 806166"];
2135 [label="new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName() 806167"];
2136 [label="param GetSymbolsWithName(this) 806168"];
2137 [label="var result = new HashSet<Symbol>(); 806169"];
2138 [label="var spine = ArrayBuilder<MergedNamespaceOrTypeDeclaration>.GetInstance(); 806170"];
2139 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 806171"];
2140 [label="_compilation.MergedRootDeclaration 806172"];
2141 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 806173"];
2142 [label="param GetLazyState(this) 806174"];
2143 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 806175"];
2144 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 806176"];
2145 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result) 806177"];
2146 [label="param AppendSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 806178"];
2147 [label="param AppendSymbolsWithName(MergedNamespaceOrTypeDeclaration current) 806179"];
2148 [label="param AppendSymbolsWithName(HashSet<Symbol> set) 806180"];
2149 [label="param AppendSymbolsWithName(this) 806181"];
2150 [label="if (current.Kind == DeclarationKind.Namespace)\n                {\n                    if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n                }\n                else\n                {\n                    if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n\n                    if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    }\n                } 806182"];
2151 [label="if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    } 806183"];
2152 [label="spine.Add(current); 806184"];
2153 [label="spine.Add(current); 806185"];
2154 [label="foreach (var child in current.Children)\n                {\n                    if (child is MergedNamespaceOrTypeDeclaration mergedNamespaceOrType)\n                    {\n                        if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        }\n                    }\n                } 806186"];
2155 [label="if (child is MergedNamespaceOrTypeDeclaration mergedNamespaceOrType)\n                    {\n                        if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        }\n                    } 806187"];
2156 [label="if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        } 806188"];
2157 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 806189"];
2158 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 806190"];
2159 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 806191"];
2160 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set) 806192"];
2161 [label="param AppendSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 806193"];
2162 [label="param AppendSymbolsWithName(MergedNamespaceOrTypeDeclaration current) 806194"];
2163 [label="param AppendSymbolsWithName(HashSet<Symbol> set) 806195"];
2164 [label="if (current.Kind == DeclarationKind.Namespace)\n                {\n                    if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n                }\n                else\n                {\n                    if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n\n                    if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    }\n                } 806196"];
2165 [label="if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    } 806197"];
2166 [label="if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    } 806198"];
2167 [label="var typeDeclaration = (MergedTypeDeclaration)current; 806199"];
2168 [label="if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        } 806200"];
2169 [label="ShouldCheckTypeForMembers(typeDeclaration) 806201"];
2170 [label="param ShouldCheckTypeForMembers(MergedTypeDeclaration current) 806202"];
2171 [label="param ShouldCheckTypeForMembers(this) 806203"];
2172 [label="foreach (SingleTypeDeclaration typeDecl in current.Declarations)\n                {\n                    if (typeDecl.MemberNames.Contains(_name))\n                    {\n                        return true;\n                    }\n                } 806204"];
2173 [label="if (typeDecl.MemberNames.Contains(_name))\n                    {\n                        return true;\n                    } 806205"];
2174 [label="return true; 806206"];
2175 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 806207"];
2176 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 806208"];
2177 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 806209"];
2178 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set) 806210"];
2179 [label="param AppendMemberSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 806211"];
2180 [label="param AppendMemberSymbolsWithName(MergedTypeDeclaration current) 806212"];
2181 [label="param AppendMemberSymbolsWithName(HashSet<Symbol> set) 806213"];
2182 [label="param AppendMemberSymbolsWithName(this) 806214"];
2183 [label="_cancellationToken.ThrowIfCancellationRequested(); 806215"];
2184 [label="spine.Add(current); 806216"];
2185 [label="spine.Add(current); 806217"];
2186 [label="var container = GetSpineSymbol(spine); 806218"];
2187 [label="GetSpineSymbol(spine) 806219"];
2188 [label="param GetSpineSymbol(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 806220"];
2189 [label="param GetSpineSymbol(this) 806221"];
2190 [label="if (spine.Count == 0)\n                {\n                    return null;\n                } 806222"];
2191 [label="if (spine.Count == 0)\n                {\n                    return null;\n                } 806223"];
2192 [label="var symbol = GetCachedSymbol(spine[spine.Count - 1]); 806224"];
2193 [label="var symbol = GetCachedSymbol(spine[spine.Count - 1]); 806225"];
2194 [label="GetCachedSymbol(spine[spine.Count - 1]) 806226"];
2195 [label="param GetCachedSymbol(MergedNamespaceOrTypeDeclaration declaration) 806227"];
2196 [label="=> _cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 806228"];
2197 [label="declaration 806229"];
2198 [label="symbol 806230"];
2199 [label="out NamespaceOrTypeSymbol? symbol 806231"];
2200 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol) 806232"];
2201 [label="null 806233"];
2202 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 806234"];
2203 [label="if (symbol != null)\n                {\n                    return symbol;\n                } 806235"];
2204 [label="if (symbol != null)\n                {\n                    return symbol;\n                } 806236"];
2205 [label="_compilation.GlobalNamespace 806237"];
2206 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 806238"];
2207 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 806239"];
2208 [label="return _lazyGlobalNamespace; 806240"];
2209 [label="NamespaceOrTypeSymbol? current = _compilation.GlobalNamespace; 806241"];
2210 [label="for (var i = 1; i < spine.Count; i++)\n                {\n                    current = GetSymbol(current, spine[i]);\n                } 806242"];
2211 [label="for (var i = 1; i < spine.Count; i++)\n                {\n                    current = GetSymbol(current, spine[i]);\n                } 806243"];
2212 [label="current = GetSymbol(current, spine[i]); 806244"];
2213 [label="current = GetSymbol(current, spine[i]); 806245"];
2214 [label="GetSymbol(current, spine[i]) 806246"];
2215 [label="param GetSymbol(NamespaceOrTypeSymbol? container) 806247"];
2216 [label="param GetSymbol(MergedNamespaceOrTypeDeclaration declaration) 806248"];
2217 [label="param GetSymbol(this) 806249"];
2218 [label="if (container == null)\n                {\n                    return _compilation.GlobalNamespace;\n                } 806250"];
2219 [label="if (container == null)\n                {\n                    return _compilation.GlobalNamespace;\n                } 806251"];
2220 [label="if (declaration.Kind == DeclarationKind.Namespace)\n                {\n                    AddCache(container.GetMembers(declaration.Name).OfType<NamespaceOrTypeSymbol>());\n                }\n                else\n                {\n                    AddCache(container.GetTypeMembers(declaration.Name));\n                } 806252"];
2221 [label="AddCache(container.GetTypeMembers(declaration.Name)); 806253"];
2222 [label="AddCache(container.GetTypeMembers(declaration.Name)); 806254"];
2223 [label="AddCache(container.GetTypeMembers(declaration.Name)) 806255"];
2224 [label="param AddCache(IEnumerable<NamespaceOrTypeSymbol> symbols) 806256"];
2225 [label="param AddCache(this) 806257"];
2226 [label="foreach (var symbol in symbols)\n                {\n                    var mergedNamespace = symbol as MergedNamespaceSymbol;\n                    if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    }\n\n                    var sourceNamespace = symbol as SourceNamespaceSymbol;\n                    if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    }\n\n                    var sourceType = symbol as SourceMemberContainerTypeSymbol;\n                    if (sourceType is object)\n                    {\n                        _cache[sourceType.MergedDeclaration] = sourceType;\n                    }\n                } 806258"];
2227 [label="var mergedNamespace = symbol as MergedNamespaceSymbol; 806259"];
2228 [label="if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    } 806260"];
2229 [label="if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    } 806261"];
2230 [label="var sourceNamespace = symbol as SourceNamespaceSymbol; 806262"];
2231 [label="if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    } 806263"];
2232 [label="if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    } 806264"];
2233 [label="var sourceType = symbol as SourceMemberContainerTypeSymbol; 806265"];
2234 [label="if (sourceType is object)\n                    {\n                        _cache[sourceType.MergedDeclaration] = sourceType;\n                    } 806266"];
2235 [label="_cache 806267"];
2236 [label="AddCache(container.GetTypeMembers(declaration.Name)); 806268"];
2237 [label="return GetCachedSymbol(declaration); 806269"];
2238 [label="GetCachedSymbol(declaration) 806270"];
2239 [label="param GetCachedSymbol(MergedNamespaceOrTypeDeclaration declaration) 806271"];
2240 [label="=> _cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 806272"];
2241 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol) 806273"];
2242 [label="symbol 806274"];
2243 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 806275"];
2244 [label="return current; 806276"];
2245 [label="if (container != null)\n                {\n                    foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    }\n                } 806277"];
2246 [label="if (container != null)\n                {\n                    foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    }\n                } 806278"];
2247 [label="new LexicalOrderSymbolComparer() 806279"];
2248 [label="param LexicalOrderSymbolComparer(this) 806280"];
2249 [label="Instance = new LexicalOrderSymbolComparer() 806281"];
2250 [label="foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    } 806282"];
2251 [label="foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    } 806283"];
2252 [label="param Compare(Symbol x) 806284"];
2253 [label="param Compare(Symbol y) 806285"];
2254 [label="param Compare(this) 806286"];
2255 [label="int comparison; 806287"];
2256 [label="if (x == y)\n            {\n                return 0;\n            } 806288"];
2257 [label="var xSortKey = x.GetLexicalSortKey(); 806289"];
2258 [label="var xSortKey = x.GetLexicalSortKey(); 806290"];
2259 [label="var ySortKey = y.GetLexicalSortKey(); 806291"];
2260 [label="var ySortKey = y.GetLexicalSortKey(); 806292"];
2261 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 806293"];
2262 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 806294"];
2263 [label="comparison = LexicalSortKey.Compare(xSortKey, ySortKey); 806295"];
2264 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 806296"];
2265 [label="if (comparison != 0)\n            {\n                return comparison;\n            } 806297"];
2266 [label="return comparison; 806298"];
2267 [label="Debug.Assert((object)x.DeclaringCompilation == y.DeclaringCompilation); 806299"];
2268 [label="if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        } 806300"];
2269 [label="Matches(member.Name) 806301"];
2270 [label="param Matches(string name) 806302"];
2271 [label="=> _name == name 806303"];
2272 [label="_name == name 806304"];
2273 [label="Matches(member.Name) 806305"];
2274 [label="param Matches(string name) 806306"];
2275 [label="=> _name == name 806307"];
2276 [label="_name == name 806308"];
2277 [label="set.Add(member); 806309"];
2278 [label="set.Add(member); 806310"];
2279 [label="spine.RemoveAt(spine.Count - 1); 806311"];
2280 [label="spine.RemoveAt(spine.Count - 1); 806312"];
2281 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 806313"];
2282 [label="spine.RemoveAt(spine.Count - 1); 806314"];
2283 [label="spine.RemoveAt(spine.Count - 1); 806315"];
2284 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 806316"];
2285 [label="spine.RemoveAt(spine.Count - 1); 806317"];
2286 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 806318"];
2287 [label="spine.Free(); 806319"];
2288 [label="_cache.Free(); 806320"];
2289 [label="return result; 806321"];
2290 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 806322"];
2291 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 806323"];
2292 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)) 806324"];
2293 [label="param AddEntryPointCandidates(ArrayBuilder<MethodSymbol> entryPointCandidates) 806325"];
2294 [label="param AddEntryPointCandidates(IEnumerable<Symbol> members) 806326"];
2295 [label="foreach (var member in members)\n            {\n                if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                }\n            } 806327"];
2296 [label="foreach (var member in members)\n            {\n                if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                }\n            } 806328"];
2297 [label="if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                } 806329"];
2298 [label="entryPointCandidates.Add(method); 806330"];
2299 [label="entryPointCandidates.Add(method); 806331"];
2300 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 806332"];
2301 [label="if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    } 806333"];
2302 [label="var taskEntryPoints = ArrayBuilder<(bool IsValid, MethodSymbol Candidate, DiagnosticBag SpecificDiagnostics)>.GetInstance(); 806334"];
2303 [label="DiagnosticBag noMainFoundDiagnostics = DiagnosticBag.GetInstance(); 806335"];
2304 [label="var viableEntryPoints = ArrayBuilder<MethodSymbol>.GetInstance(); 806336"];
2305 [label="foreach (var candidate in entryPointCandidates)\n                {\n                    var perCandidateBag = DiagnosticBag.GetInstance();\n                    var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag);\n\n                    if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    }\n                } 806337"];
2306 [label="foreach (var candidate in entryPointCandidates)\n                {\n                    var perCandidateBag = DiagnosticBag.GetInstance();\n                    var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag);\n\n                    if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    }\n                } 806338"];
2307 [label="var perCandidateBag = DiagnosticBag.GetInstance(); 806339"];
2308 [label="var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag); 806340"];
2309 [label="var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag); 806341"];
2310 [label="HasEntryPointSignature(candidate, perCandidateBag) 806342"];
2311 [label="param HasEntryPointSignature(MethodSymbol method) 806343"];
2312 [label="param HasEntryPointSignature(DiagnosticBag bag) 806344"];
2313 [label="param HasEntryPointSignature(this) 806345"];
2314 [label="if (method.IsVararg)\n            {\n                return (false, false);\n            } 806346"];
2315 [label="TypeSymbol returnType = method.ReturnType; 806347"];
2316 [label="bool returnsTaskOrTaskOfInt = false; 806348"];
2317 [label="if (returnType.SpecialType != SpecialType.System_Int32 && !returnType.IsVoidType())\n            {\n                // Never look for ReturnsAwaitableToVoidOrInt on int32 or void\n                returnsTaskOrTaskOfInt = ReturnsAwaitableToVoidOrInt(method, bag);\n                if (!returnsTaskOrTaskOfInt)\n                {\n                    return (false, false);\n                }\n            } 806349"];
2318 [label="if (returnType.SpecialType != SpecialType.System_Int32 && !returnType.IsVoidType())\n            {\n                // Never look for ReturnsAwaitableToVoidOrInt on int32 or void\n                returnsTaskOrTaskOfInt = ReturnsAwaitableToVoidOrInt(method, bag);\n                if (!returnsTaskOrTaskOfInt)\n                {\n                    return (false, false);\n                }\n            } 806350"];
2319 [label="if (method.RefKind != RefKind.None)\n            {\n                return (false, returnsTaskOrTaskOfInt);\n            } 806351"];
2320 [label="if (method.Parameters.Length == 0)\n            {\n                return (true, returnsTaskOrTaskOfInt);\n            } 806352"];
2321 [label="if (method.Parameters.Length == 0)\n            {\n                return (true, returnsTaskOrTaskOfInt);\n            } 806353"];
2322 [label="return (true, returnsTaskOrTaskOfInt); 806354"];
2323 [label="true 806355"];
2324 [label="returnsTaskOrTaskOfInt 806356"];
2325 [label="if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    } 806357"];
2326 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 806358"];
2327 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 806359"];
2328 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 806360"];
2329 [label="checkValid(candidate, IsCandidate, perCandidateBag) 806361"];
2330 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 806362"];
2331 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 806363"];
2332 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 806364"];
2333 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 806365"];
2334 [label="if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    } 806366"];
2335 [label="if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    } 806367"];
2336 [label="return true; 806368"];
2337 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 806369"];
2338 [label="if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            } 806370"];
2339 [label="diagnostics.AddRange(perCandidateBag); 806371"];
2340 [label="diagnostics.AddRange(perCandidateBag); 806372"];
2341 [label="viableEntryPoints.Add(candidate); 806373"];
2342 [label="viableEntryPoints.Add(candidate); 806374"];
2343 [label="perCandidateBag.Free(); 806375"];
2344 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 806376"];
2345 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 806377"];
2346 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 806378"];
2347 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 806379"];
2348 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 806380"];
2349 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 806381"];
2350 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 806382"];
2351 [label="if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 806383"];
2352 [label="foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    } 806384"];
2353 [label="MethodSymbol? entryPoint = null; 806385"];
2354 [label="if (viableEntryPoints.Count == 0)\n                {\n                    if (mainType is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoEntryPoint, NoLocation.Singleton);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoMainInClass, mainType.Locations.First(), mainType);\n                    }\n                }\n                else\n                {\n                    foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    }\n\n                    if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    }\n                } 806386"];
2355 [label="if (viableEntryPoints.Count == 0)\n                {\n                    if (mainType is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoEntryPoint, NoLocation.Singleton);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoMainInClass, mainType.Locations.First(), mainType);\n                    }\n                }\n                else\n                {\n                    foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    }\n\n                    if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    }\n                } 806387"];
2356 [label="foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    } 806388"];
2357 [label="if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        } 806389"];
2358 [label="if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    } 806390"];
2359 [label="if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    } 806391"];
2360 [label="entryPoint = viableEntryPoints[0]; 806392"];
2361 [label="taskEntryPoints.Free(); 806393"];
2362 [label="viableEntryPoints.Free(); 806394"];
2363 [label="noMainFoundDiagnostics.Free(); 806395"];
2364 [label="return entryPoint; 806396"];
2365 [label="entryPointCandidates.Free(); 806397"];
2366 [label="sealedDiagnostics = diagnostics.ToReadOnlyAndFree(); 806398"];
2367 [label="null 806399"];
2368 [label="ImmutableArray<Diagnostic>.Empty 806400"];
2369 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 806401"];
2370 [label="param EntryPoint(MethodSymbol? methodSymbol) 806402"];
2371 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 806403"];
2372 [label="param EntryPoint(this) 806404"];
2373 [label="MethodSymbol 806405"];
2374 [label="this.MethodSymbol 806406"];
2375 [label="this.Diagnostics 806407"];
2376 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 806408"];
2377 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 806409"];
2378 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 806410"];
2379 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 806411"];
2380 [label="new EntryPoint(entryPointMethod, diagnostics) 806412"];
2381 [label="param EntryPoint(MethodSymbol? methodSymbol) 806413"];
2382 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 806414"];
2383 [label="param EntryPoint(this) 806415"];
2384 [label="MethodSymbol 806416"];
2385 [label="this.MethodSymbol 806417"];
2386 [label="this.Diagnostics 806418"];
2387 [label="this.Options 806419"];
2388 [label="return _options; 806420"];
2389 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 806421"];
2390 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 806422"];
2391 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 806423"];
2392 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 806424"];
2393 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 806425"];
2394 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 806426"];
2395 [label="return _lazyEntryPoint; 806427"];
2396 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 806428"];
2397 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 806429"];
2398 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 806430"];
2399 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 806431"];
2400 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 806432"];
2401 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 806433"];
2402 [label="SynthesizedEntryPointSymbol synthesizedEntryPoint = entryPoint as SynthesizedEntryPointSymbol; 806434"];
2403 [label="if ((object)synthesizedEntryPoint == null)\n            {\n                var returnType = entryPoint.ReturnType;\n                if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                }\n            } 806435"];
2404 [label="if ((object)synthesizedEntryPoint == null)\n            {\n                var returnType = entryPoint.ReturnType;\n                if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                }\n            } 806436"];
2405 [label="var returnType = entryPoint.ReturnType; 806437"];
2406 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 806438"];
2407 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 806439"];
2408 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 806440"];
2409 [label="GetBoundReferenceManager() 806441"];
2410 [label="param GetBoundReferenceManager(this) 806442"];
2411 [label="GetBoundReferenceManager(); 806443"];
2412 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 806444"];
2413 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 806445"];
2414 [label="return entryPoint; 806446"];
2415 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 806447"];
2416 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 806448"];
2417 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 806449"];
2418 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 806450"];
2419 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 806451"];
2420 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 806452"];
2421 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 806453"];
2422 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 806454"];
2423 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 806455"];
2424 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 806456"];
2425 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 806457"];
2426 [label="param MethodCompiler(CSharpCompilation compilation) 806458"];
2427 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 806459"];
2428 [label="param MethodCompiler(bool emittingPdb) 806460"];
2429 [label="param MethodCompiler(bool emitTestCoverageData) 806461"];
2430 [label="param MethodCompiler(bool hasDeclarationErrors) 806462"];
2431 [label="param MethodCompiler(DiagnosticBag diagnostics) 806463"];
2432 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 806464"];
2433 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 806465"];
2434 [label="param MethodCompiler(CancellationToken cancellationToken) 806466"];
2435 [label="param MethodCompiler(this) 806467"];
2436 [label="param MethodCompiler(this) 806468"];
2437 [label="_compilation 806469"];
2438 [label="_emittingPdb 806470"];
2439 [label="_emitTestCoverageData 806471"];
2440 [label="_diagnostics 806472"];
2441 [label="_hasDeclarationErrors 806473"];
2442 [label="_moduleBeingBuiltOpt 806474"];
2443 [label="_filterOpt 806475"];
2444 [label="_debugDocumentProvider 806476"];
2445 [label="_entryPointOpt 806477"];
2446 [label="_compilerTasks 806478"];
2447 [label="_globalHasErrors 806479"];
2448 [label="Debug.Assert(compilation != null); 806480"];
2449 [label="Debug.Assert(compilation != null); 806481"];
2450 [label="Debug.Assert(diagnostics != null); 806482"];
2451 [label="Debug.Assert(diagnostics != null); 806483"];
2452 [label="_compilation 806484"];
2453 [label="_moduleBeingBuiltOpt 806485"];
2454 [label="_emittingPdb 806486"];
2455 [label="_cancellationToken 806487"];
2456 [label="_diagnostics 806488"];
2457 [label="_filterOpt 806489"];
2458 [label="_entryPointOpt 806490"];
2459 [label="_hasDeclarationErrors 806491"];
2460 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 806492"];
2461 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 806493"];
2462 [label="param SetGlobalErrorIfTrue(bool arg) 806494"];
2463 [label="param SetGlobalErrorIfTrue(this) 806495"];
2464 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 806496"];
2465 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 806497"];
2466 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 806498"];
2467 [label="_debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile); 806499"];
2468 [label="_debugDocumentProvider 806500"];
2469 [label="_emitTestCoverageData 806501"];
2470 [label="compilation.Options 806502"];
2471 [label="get\n            {\n                return _options;\n            } 806503"];
2472 [label="return _options; 806504"];
2473 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 806505"];
2474 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 806506"];
2475 [label="methodCompiler._compilerTasks 806507"];
2476 [label="compilation.SourceModule 806508"];
2477 [label="get\n            {\n                return Assembly.Modules[0];\n            } 806509"];
2478 [label="Assembly 806510"];
2479 [label="get\n            {\n                return SourceAssembly;\n            } 806511"];
2480 [label="SourceAssembly 806512"];
2481 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 806513"];
2482 [label="GetBoundReferenceManager() 806514"];
2483 [label="param GetBoundReferenceManager(this) 806515"];
2484 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 806516"];
2485 [label="return _referenceManager; 806517"];
2486 [label="GetBoundReferenceManager(); 806518"];
2487 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 806519"];
2488 [label="return Assembly.Modules[0]; 806520"];
2489 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 806521"];
2490 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 806522"];
2491 [label="param CompileNamespace(NamespaceSymbol symbol) 806523"];
2492 [label="param CompileNamespace(this) 806524"];
2493 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 806525"];
2494 [label="s.Accept(this, null); 806526"];
2495 [label="s.Accept(this, null); 806527"];
2496 [label="s.Accept(this, null); 806528"];
2497 [label="param VisitNamedType(NamedTypeSymbol symbol) 806529"];
2498 [label="param VisitNamedType(TypeCompilationState arg) 806530"];
2499 [label="param VisitNamedType(this) 806531"];
2500 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 806532"];
2501 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 806533"];
2502 [label="PassesFilter(_filterOpt, symbol) 806534"];
2503 [label="param PassesFilter(Predicate<Symbol> filterOpt) 806535"];
2504 [label="param PassesFilter(Symbol symbol) 806536"];
2505 [label="return (filterOpt == null) || filterOpt(symbol); 806537"];
2506 [label="return (filterOpt == null) || filterOpt(symbol); 806538"];
2507 [label="arg = null; 806539"];
2508 [label="_cancellationToken.ThrowIfCancellationRequested(); 806540"];
2509 [label="_compilation.Options 806541"];
2510 [label="get\n            {\n                return _options;\n            } 806542"];
2511 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 806543"];
2512 [label="Task worker = CompileNamedTypeAsync(symbol); 806544"];
2513 [label="CompileNamedTypeAsync(symbol) 806545"];
2514 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 806546"];
2515 [label="param CompileNamedTypeAsync(this) 806547"];
2516 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 806548"];
2517 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 806549"];
2518 [label="Task worker = CompileNamedTypeAsync(symbol); 806550"];
2519 [label="_compilerTasks.Push(worker); 806551"];
2520 [label="return null; 806552"];
2521 [label="s.Accept(this, null); 806553"];
2522 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 806554"];
2523 [label="methodCompiler.WaitForWorkers() 806555"];
2524 [label="param WaitForWorkers(this) 806556"];
2525 [label="var tasks = _compilerTasks; 806557"];
2526 [label="if (tasks == null)\n            {\n                return;\n            } 806558"];
2527 [label="if (tasks == null)\n            {\n                return;\n            } 806559"];
2528 [label="Task curTask; 806560"];
2529 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 806561"];
2530 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 806562"];
2531 [label="curTask.GetAwaiter().GetResult(); 806563"];
2532 [label="methodCompiler.WaitForWorkers(); 806564"];
2533 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 806565"];
2534 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 806566"];
2535 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 806567"];
2536 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 806568"];
2537 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 806569"];
2538 [label="=> _additionalTypes 806570"];
2539 [label="_additionalTypes 806571"];
2540 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 806572"];
2541 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 806573"];
2542 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 806574"];
2543 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 806575"];
2544 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 806576"];
2545 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 806577"];
2546 [label="param CompileSynthesizedMethods(this) 806578"];
2547 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 806579"];
2548 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 806580"];
2549 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 806581"];
2550 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 806582"];
2551 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 806583"];
2552 [label="param GetEmbeddedTypes(this) 806584"];
2553 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 806585"];
2554 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 806586"];
2555 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 806587"];
2556 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 806588"];
2557 [label="param CreateEmbeddedAttributesIfNeeded(this) 806589"];
2558 [label="GetNeedsGeneratedAttributes() 806590"];
2559 [label="param GetNeedsGeneratedAttributes(this) 806591"];
2560 [label="_needsGeneratedAttributes_IsFrozen = true; 806592"];
2561 [label="_needsGeneratedAttributes_IsFrozen 806593"];
2562 [label="GetNeedsGeneratedAttributesInternal() 806594"];
2563 [label="param GetNeedsGeneratedAttributesInternal(this) 806595"];
2564 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 806596"];
2565 [label="return GetNeedsGeneratedAttributesInternal(); 806597"];
2566 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 806598"];
2567 [label="ShouldEmitNullablePublicOnlyAttribute() 806599"];
2568 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 806600"];
2569 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 806601"];
2570 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 806602"];
2571 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 806603"];
2572 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 806604"];
2573 [label="return; 806605"];
2574 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 806606"];
2575 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 806607"];
2576 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 806608"];
2577 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 806609"];
2578 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 806610"];
2579 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 806611"];
2580 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 806612"];
2581 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 806613"];
2582 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 806614"];
2583 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 806615"];
2584 [label="builder.AddIfNotNull(_lazyNullableAttribute); 806616"];
2585 [label="builder.AddIfNotNull(_lazyNullableAttribute); 806617"];
2586 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 806618"];
2587 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 806619"];
2588 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 806620"];
2589 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 806621"];
2590 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 806622"];
2591 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 806623"];
2592 [label="return builder.ToImmutableAndFree(); 806624"];
2593 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 806625"];
2594 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 806626"];
2595 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 806627"];
2596 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 806628"];
2597 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 806629"];
2598 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 806630"];
2599 [label="param CompileSynthesizedMethods(this) 806631"];
2600 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 806632"];
2601 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 806633"];
2602 [label="compilation.AnonymousTypeManager 806634"];
2603 [label="get\n            {\n                return _anonymousTypeManager;\n            } 806635"];
2604 [label="return _anonymousTypeManager; 806636"];
2605 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 806637"];
2606 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 806638"];
2607 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 806639"];
2608 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 806640"];
2609 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 806641"];
2610 [label="param GetPreviousAnonymousTypes(this) 806642"];
2611 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 806643"];
2612 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 806644"];
2613 [label="param GetNextAnonymousTypeIndex(this) 806645"];
2614 [label="return 0; 806646"];
2615 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 806647"];
2616 [label="methodCompiler.WaitForWorkers() 806648"];
2617 [label="param WaitForWorkers(this) 806649"];
2618 [label="var tasks = _compilerTasks; 806650"];
2619 [label="if (tasks == null)\n            {\n                return;\n            } 806651"];
2620 [label="if (tasks == null)\n            {\n                return;\n            } 806652"];
2621 [label="Task curTask; 806653"];
2622 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 806654"];
2623 [label="methodCompiler.WaitForWorkers(); 806655"];
2624 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 806656"];
2625 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 806657"];
2626 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 806658"];
2627 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 806659"];
2628 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 806660"];
2629 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 806661"];
2630 [label="compilation.AdditionalCodegenWarnings 806662"];
2631 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 806663"];
2632 [label="return _additionalCodegenWarnings; 806664"];
2633 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 806665"];
2634 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 806666"];
2635 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 806667"];
2636 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 806668"];
2637 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 806669"];
2638 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 806670"];
2639 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 806671"];
2640 [label="param WarnUnusedFields(CSharpCompilation compilation) 806672"];
2641 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 806673"];
2642 [label="param WarnUnusedFields(CancellationToken cancellationToken) 806674"];
2643 [label="compilation.Assembly 806675"];
2644 [label="get\n            {\n                return SourceAssembly;\n            } 806676"];
2645 [label="SourceAssembly 806677"];
2646 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 806678"];
2647 [label="GetBoundReferenceManager() 806679"];
2648 [label="param GetBoundReferenceManager(this) 806680"];
2649 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 806681"];
2650 [label="return _referenceManager; 806682"];
2651 [label="GetBoundReferenceManager(); 806683"];
2652 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 806684"];
2653 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 806685"];
2654 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 806686"];
2655 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 806687"];
2656 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 806688"];
2657 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 806689"];
2658 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 806690"];
2659 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 806691"];
2660 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 806692"];
2661 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 806693"];
2662 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 806694"];
2663 [label="compilation.Options 806695"];
2664 [label="get\n            {\n                return _options;\n            } 806696"];
2665 [label="return _options; 806697"];
2666 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 806698"];
2667 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 806699"];
2668 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 806700"];
2669 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 806701"];
2670 [label="param Translate(MethodSymbol symbol) 806702"];
2671 [label="param Translate(DiagnosticBag diagnostics) 806703"];
2672 [label="param Translate(bool needDeclaration) 806704"];
2673 [label="param Translate(this) 806705"];
2674 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 806706"];
2675 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 806707"];
2676 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 806708"];
2677 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 806709"];
2678 [label="Translate(symbol, null, diagnostics, null, needDeclaration) 806710"];
2679 [label="param Translate(MethodSymbol methodSymbol) 806711"];
2680 [label="param Translate(SyntaxNode syntaxNodeOpt) 806712"];
2681 [label="param Translate(DiagnosticBag diagnostics) 806713"];
2682 [label="param Translate(BoundArgListOperator optArgList = null) 806714"];
2683 [label="param Translate(bool needDeclaration = false) 806715"];
2684 [label="param Translate(this) 806716"];
2685 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 806717"];
2686 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 806718"];
2687 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 806719"];
2688 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 806720"];
2689 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 806721"];
2690 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 806722"];
2691 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 806723"];
2692 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 806724"];
2693 [label="param Translate(MethodSymbol methodSymbol) 806725"];
2694 [label="param Translate(SyntaxNode syntaxNodeOpt) 806726"];
2695 [label="param Translate(DiagnosticBag diagnostics) 806727"];
2696 [label="param Translate(bool needDeclaration) 806728"];
2697 [label="param Translate(this) 806729"];
2698 [label="object reference; 806730"];
2699 [label="Cci.IMethodReference methodRef; 806731"];
2700 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 806732"];
2701 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 806733"];
2702 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 806734"];
2703 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 806735"];
2704 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 806736"];
2705 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 806737"];
2706 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 806738"];
2707 [label="return methodSymbol.GetCciAdapter(); 806739"];
2708 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 806740"];
2709 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 806741"];
2710 [label="return unexpandedMethodRef; 806742"];
2711 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 806743"];
2712 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 806744"];
2713 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 806745"];
2714 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 806746"];
2715 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 806747"];
2716 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 806748"];
2717 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 806749"];
2718 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 806750"];
2719 [label="param GenerateModuleInitializer(this) 806751"];
2720 [label="Debug.Assert(_declarationDiagnosticsFrozen); 806752"];
2721 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 806753"];
2722 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 806754"];
2723 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 806755"];
2724 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 806756"];
2725 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 806757"];
2726 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 806758"];
2727 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 806759"];
2728 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 806760"];
2729 [label="return true; 806761"];
2730 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 806762"];
2731 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 806763"];
2732 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 806764"];
2733 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 806765"];
2734 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 806766"];
2735 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 806767"];
2736 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 806768"];
2737 [label="param GenerateResourcesAndDocumentationComments(this) 806769"];
2738 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 806770"];
2739 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 806771"];
2740 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 806772"];
2741 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 806773"];
2742 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 806774"];
2743 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 806775"];
2744 [label="SourceAssembly 806776"];
2745 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 806777"];
2746 [label="GetBoundReferenceManager() 806778"];
2747 [label="param GetBoundReferenceManager(this) 806779"];
2748 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 806780"];
2749 [label="return _referenceManager; 806781"];
2750 [label="GetBoundReferenceManager(); 806782"];
2751 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 806783"];
2752 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 806784"];
2753 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 806785"];
2754 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 806786"];
2755 [label="AddedModulesResourceNames(resourceDiagnostics) 806787"];
2756 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 806788"];
2757 [label="param AddedModulesResourceNames(this) 806789"];
2758 [label="SourceAssembly 806790"];
2759 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 806791"];
2760 [label="GetBoundReferenceManager() 806792"];
2761 [label="param GetBoundReferenceManager(this) 806793"];
2762 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 806794"];
2763 [label="return _referenceManager; 806795"];
2764 [label="GetBoundReferenceManager(); 806796"];
2765 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 806797"];
2766 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 806798"];
2767 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 806799"];
2768 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 806800"];
2769 [label="param AddedModulesResourceNames(this) 806801"];
2770 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 806802"];
2771 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 806803"];
2772 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 806804"];
2773 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 806805"];
2774 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 806806"];
2775 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 806807"];
2776 [label="cancellationToken.ThrowIfCancellationRequested(); 806808"];
2777 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 806809"];
2778 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 806810"];
2779 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 806811"];
2780 [label="new[] { '\\r\\n', '\\r', '\\n' } 806812"];
2781 [label="'\\r\\n' 806813"];
2782 [label="'\\r' 806814"];
2783 [label="'\\n' 806815"];
2784 [label="new[] { '\\r\\n', '\\r', '\\n' } 806816"];
2785 [label="new[] { '\\r\\n', '\\r', '\\n' } 806817"];
2786 [label="new[] { '\\r\\n', '\\r', '\\n' } 806818"];
2787 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 806819"];
2788 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 806820"];
2789 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 806821"];
2790 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 806822"];
2791 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 806823"];
2792 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 806824"];
2793 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 806825"];
2794 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 806826"];
2795 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 806827"];
2796 [label="param WriteDocumentationCommentXml(string? assemblyName) 806828"];
2797 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 806829"];
2798 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 806830"];
2799 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 806831"];
2800 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 806832"];
2801 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 806833"];
2802 [label="StreamWriter writer = null; 806834"];
2803 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 806835"];
2804 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 806836"];
2805 [label="compilation.SourceAssembly 806837"];
2806 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 806838"];
2807 [label="GetBoundReferenceManager() 806839"];
2808 [label="param GetBoundReferenceManager(this) 806840"];
2809 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 806841"];
2810 [label="return _referenceManager; 806842"];
2811 [label="GetBoundReferenceManager(); 806843"];
2812 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 806844"];
2813 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 806845"];
2814 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 806846"];
2815 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 806847"];
2816 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 806848"];
2817 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 806849"];
2818 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 806850"];
2819 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 806851"];
2820 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 806852"];
2821 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 806853"];
2822 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 806854"];
2823 [label="param DocumentationCommentCompiler(string assemblyName) 806855"];
2824 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 806856"];
2825 [label="param DocumentationCommentCompiler(TextWriter writer) 806857"];
2826 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 806858"];
2827 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 806859"];
2828 [label="param DocumentationCommentCompiler(bool processIncludes) 806860"];
2829 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 806861"];
2830 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 806862"];
2831 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 806863"];
2832 [label="param DocumentationCommentCompiler(this) 806864"];
2833 [label="param DocumentationCommentCompiler(this) 806865"];
2834 [label="_assemblyName 806866"];
2835 [label="_compilation 806867"];
2836 [label="_writer 806868"];
2837 [label="_filterTree 806869"];
2838 [label="_filterSpanWithinTree 806870"];
2839 [label="_processIncludes 806871"];
2840 [label="_isForSingleSymbol 806872"];
2841 [label="_diagnostics 806873"];
2842 [label="_lazyComparer 806874"];
2843 [label="_includedFileCache 806875"];
2844 [label="_indentDepth 806876"];
2845 [label="_temporaryStringBuilders 806877"];
2846 [label="_assemblyName 806878"];
2847 [label="_compilation 806879"];
2848 [label="_writer 806880"];
2849 [label="_filterTree 806881"];
2850 [label="_filterSpanWithinTree 806882"];
2851 [label="_processIncludes 806883"];
2852 [label="_isForSingleSymbol 806884"];
2853 [label="_diagnostics 806885"];
2854 [label="_cancellationToken 806886"];
2855 [label="compilation.SourceAssembly 806887"];
2856 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 806888"];
2857 [label="GetBoundReferenceManager() 806889"];
2858 [label="param GetBoundReferenceManager(this) 806890"];
2859 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 806891"];
2860 [label="return _referenceManager; 806892"];
2861 [label="GetBoundReferenceManager(); 806893"];
2862 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 806894"];
2863 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 806895"];
2864 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 806896"];
2865 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 806897"];
2866 [label="param VisitNamespace(NamespaceSymbol symbol) 806898"];
2867 [label="param VisitNamespace(this) 806899"];
2868 [label="_cancellationToken.ThrowIfCancellationRequested(); 806900"];
2869 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 806901"];
2870 [label="Debug.Assert(_assemblyName != null); 806902"];
2871 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 806903"];
2872 [label="WriteLine('<?xml version=\\'1.0\\'?>') 806904"];
2873 [label="param WriteLine(string message) 806905"];
2874 [label="param WriteLine(this) 806906"];
2875 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806907"];
2876 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806908"];
2877 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806909"];
2878 [label="WriteLine('<doc>'); 806910"];
2879 [label="WriteLine('<doc>') 806911"];
2880 [label="param WriteLine(string message) 806912"];
2881 [label="param WriteLine(this) 806913"];
2882 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806914"];
2883 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806915"];
2884 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806916"];
2885 [label="Indent() 806917"];
2886 [label="param Indent(this) 806918"];
2887 [label="_indentDepth 806919"];
2888 [label="Indent(); 806920"];
2889 [label="_compilation.Options 806921"];
2890 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 806922"];
2891 [label="WriteLine('<assembly>'); 806923"];
2892 [label="WriteLine('<assembly>') 806924"];
2893 [label="param WriteLine(string message) 806925"];
2894 [label="param WriteLine(this) 806926"];
2895 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806927"];
2896 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806928"];
2897 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806929"];
2898 [label="Indent() 806930"];
2899 [label="param Indent(this) 806931"];
2900 [label="_indentDepth 806932"];
2901 [label="Indent(); 806933"];
2902 [label="WriteLine('<name>{0}</name>', _assemblyName); 806934"];
2903 [label="WriteLine('<name>{0}</name>', _assemblyName) 806935"];
2904 [label="WriteLine('<name>{0}</name>', _assemblyName) 806936"];
2905 [label="param WriteLine(string format) 806937"];
2906 [label="param WriteLine(params object[] args) 806938"];
2907 [label="param WriteLine(this) 806939"];
2908 [label="WriteLine(string.Format(format, args)); 806940"];
2909 [label="WriteLine(string.Format(format, args)); 806941"];
2910 [label="WriteLine(string.Format(format, args)); 806942"];
2911 [label="WriteLine(string.Format(format, args)) 806943"];
2912 [label="param WriteLine(string message) 806944"];
2913 [label="param WriteLine(this) 806945"];
2914 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806946"];
2915 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806947"];
2916 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806948"];
2917 [label="WriteLine(string.Format(format, args)); 806949"];
2918 [label="Unindent() 806950"];
2919 [label="param Unindent(this) 806951"];
2920 [label="_indentDepth 806952"];
2921 [label="Debug.Assert(_indentDepth >= 0); 806953"];
2922 [label="Debug.Assert(_indentDepth >= 0); 806954"];
2923 [label="Unindent(); 806955"];
2924 [label="WriteLine('</assembly>'); 806956"];
2925 [label="WriteLine('</assembly>') 806957"];
2926 [label="param WriteLine(string message) 806958"];
2927 [label="param WriteLine(this) 806959"];
2928 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806960"];
2929 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806961"];
2930 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806962"];
2931 [label="WriteLine('<members>'); 806963"];
2932 [label="WriteLine('<members>') 806964"];
2933 [label="param WriteLine(string message) 806965"];
2934 [label="param WriteLine(this) 806966"];
2935 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806967"];
2936 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806968"];
2937 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 806969"];
2938 [label="Indent() 806970"];
2939 [label="param Indent(this) 806971"];
2940 [label="_indentDepth 806972"];
2941 [label="Indent(); 806973"];
2942 [label="Debug.Assert(!_isForSingleSymbol); 806974"];
2943 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 806975"];
2944 [label="_cancellationToken.ThrowIfCancellationRequested(); 806976"];
2945 [label="s.Accept(this); 806977"];
2946 [label="s.Accept(this); 806978"];
2947 [label="s.Accept(this); 806979"];
2948 [label="param VisitNamedType(NamedTypeSymbol symbol) 806980"];
2949 [label="param VisitNamedType(this) 806981"];
2950 [label="_cancellationToken.ThrowIfCancellationRequested(); 806982"];
2951 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 806983"];
2952 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 806984"];
2953 [label="DefaultVisit(symbol); 806985"];
2954 [label="DefaultVisit(symbol) 806986"];
2955 [label="param DefaultVisit(Symbol symbol) 806987"];
2956 [label="param DefaultVisit(this) 806988"];
2957 [label="_cancellationToken.ThrowIfCancellationRequested(); 806989"];
2958 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 806990"];
2959 [label="ShouldSkip(symbol) 806991"];
2960 [label="param ShouldSkip(Symbol symbol) 806992"];
2961 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 806993"];
2962 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 806994"];
2963 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 806995"];
2964 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 806996"];
2965 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 806997"];
2966 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 806998"];
2967 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 806999"];
2968 [label="DocumentationMode maxDocumentationMode; 807000"];
2969 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 807001"];
2970 [label="docCommentNodes 807002"];
2971 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 807003"];
2972 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 807004"];
2973 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 807005"];
2974 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 807006"];
2975 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 807007"];
2976 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 807008"];
2977 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 807009"];
2978 [label="param TryGetDocumentationCommentNodes(this) 807010"];
2979 [label="maxDocumentationMode = DocumentationMode.None; 807011"];
2980 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 807012"];
2981 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 807013"];
2982 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 807014"];
2983 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 807015"];
2984 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 807016"];
2985 [label="currDocumentationMode > maxDocumentationMode 807017"];
2986 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 807018"];
2987 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 807019"];
2988 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 807020"];
2989 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 807021"];
2990 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 807022"];
2991 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 807023"];
2992 [label="return true; 807024"];
2993 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 807025"];
2994 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 807026"];
2995 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 807027"];
2996 [label="return; 807028"];
2997 [label="DefaultVisit(symbol); 807029"];
2998 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 807030"];
2999 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 807031"];
3000 [label="_cancellationToken.ThrowIfCancellationRequested(); 807032"];
3001 [label="member.Accept(this); 807033"];
3002 [label="member.Accept(this); 807034"];
3003 [label="member.Accept(this); 807035"];
3004 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 807036"];
3005 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 807037"];
3006 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 807038"];
3007 [label="DocumentationMode maxDocumentationMode; 807039"];
3008 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 807040"];
3009 [label="docCommentNodes 807041"];
3010 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 807042"];
3011 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 807043"];
3012 [label="maxDocumentationMode = DocumentationMode.None; 807044"];
3013 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 807045"];
3014 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 807046"];
3015 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 807047"];
3016 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 807048"];
3017 [label="currDocumentationMode > maxDocumentationMode 807049"];
3018 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 807050"];
3019 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 807051"];
3020 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 807052"];
3021 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 807053"];
3022 [label="return true; 807054"];
3023 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 807055"];
3024 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 807056"];
3025 [label="return; 807057"];
3026 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 807058"];
3027 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 807059"];
3028 [label="DocumentationMode maxDocumentationMode; 807060"];
3029 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 807061"];
3030 [label="docCommentNodes 807062"];
3031 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 807063"];
3032 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 807064"];
3033 [label="maxDocumentationMode = DocumentationMode.None; 807065"];
3034 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 807066"];
3035 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 807067"];
3036 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 807068"];
3037 [label="currDocumentationMode > maxDocumentationMode 807069"];
3038 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 807070"];
3039 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 807071"];
3040 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 807072"];
3041 [label="return true; 807073"];
3042 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 807074"];
3043 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 807075"];
3044 [label="return; 807076"];
3045 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 807077"];
3046 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 807078"];
3047 [label="currDocumentationMode > maxDocumentationMode 807079"];
3048 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 807080"];
3049 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 807081"];
3050 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 807082"];
3051 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 807083"];
3052 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 807084"];
3053 [label="docCommentNodes 807085"];
3054 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 807086"];
3055 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 807087"];
3056 [label="maxDocumentationMode = DocumentationMode.None; 807088"];
3057 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 807089"];
3058 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 807090"];
3059 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 807091"];
3060 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 807092"];
3061 [label="currDocumentationMode > maxDocumentationMode 807093"];
3062 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 807094"];
3063 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 807095"];
3064 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 807096"];
3065 [label="return true; 807097"];
3066 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 807098"];
3067 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 807099"];
3068 [label="return; 807100"];
3069 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 807101"];
3070 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 807102"];
3071 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 807103"];
3072 [label="currDocumentationMode > maxDocumentationMode 807104"];
3073 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 807105"];
3074 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 807106"];
3075 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 807107"];
3076 [label="Unindent() 807108"];
3077 [label="Debug.Assert(_indentDepth >= 0); 807109"];
3078 [label="Unindent(); 807110"];
3079 [label="WriteLine('</members>'); 807111"];
3080 [label="WriteLine('</members>') 807112"];
3081 [label="param WriteLine(string message) 807113"];
3082 [label="param WriteLine(this) 807114"];
3083 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 807115"];
3084 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 807116"];
3085 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 807117"];
3086 [label="Unindent() 807118"];
3087 [label="_indentDepth 807119"];
3088 [label="Debug.Assert(_indentDepth >= 0); 807120"];
3089 [label="Debug.Assert(_indentDepth >= 0); 807121"];
3090 [label="Unindent(); 807122"];
3091 [label="WriteLine('</doc>'); 807123"];
3092 [label="WriteLine('</doc>') 807124"];
3093 [label="param WriteLine(string message) 807125"];
3094 [label="param WriteLine(this) 807126"];
3095 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 807127"];
3096 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 807128"];
3097 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 807129"];
3098 [label="Debug.Assert(compiler._indentDepth == 0); 807130"];
3099 [label="Debug.Assert(compiler._indentDepth == 0); 807131"];
3100 [label="writer?.Flush(); 807132"];
3101 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 807133"];
3102 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 807134"];
3103 [label="compilation.SyntaxTrees 807135"];
3104 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 807136"];
3105 [label="_syntaxAndDeclarations.GetLazyState() 807137"];
3106 [label="param GetLazyState(this) 807138"];
3107 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 807139"];
3108 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 807140"];
3109 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 807141"];
3110 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 807142"];
3111 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 807143"];
3112 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 807144"];
3113 [label="param ReportUnprocessed(SyntaxTree tree) 807145"];
3114 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 807146"];
3115 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 807147"];
3116 [label="param ReportUnprocessed(CancellationToken cancellationToken) 807148"];
3117 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 807149"];
3118 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 807150"];
3119 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 807151"];
3120 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 807152"];
3121 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 807153"];
3122 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 807154"];
3123 [label="param ReportUnusedImports(SyntaxTree? filterTree) 807155"];
3124 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 807156"];
3125 [label="param ReportUnusedImports(CancellationToken cancellationToken) 807157"];
3126 [label="param ReportUnusedImports(this) 807158"];
3127 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 807159"];
3128 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 807160"];
3129 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 807161"];
3130 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 807162"];
3131 [label="CompleteTrees(filterTree); 807163"];
3132 [label="CompleteTrees(filterTree) 807164"];
3133 [label="param CompleteTrees(SyntaxTree? filterTree) 807165"];
3134 [label="param CompleteTrees(this) 807166"];
3135 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 807167"];
3136 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 807168"];
3137 [label="CompleteTrees(filterTree); 807169"];
3138 [label="get { return this.SourceModule.GetPublicSymbol(); } 807170"];
3139 [label="this.SourceModule 807171"];
3140 [label="get\n            {\n                return Assembly.Modules[0];\n            } 807172"];
3141 [label="Assembly 807173"];
3142 [label="get\n            {\n                return SourceAssembly;\n            } 807174"];
3143 [label="SourceAssembly 807175"];
3144 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 807176"];
3145 [label="GetBoundReferenceManager() 807177"];
3146 [label="param GetBoundReferenceManager(this) 807178"];
3147 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 807179"];
3148 [label="return _referenceManager; 807180"];
3149 [label="GetBoundReferenceManager(); 807181"];
3150 [label="return Assembly.Modules[0]; 807182"];
3151 [label="get { return SourceAssembly.IsDelaySigned; } 807183"];
3152 [label="SourceAssembly 807184"];
3153 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 807185"];
3154 [label="GetBoundReferenceManager() 807186"];
3155 [label="param GetBoundReferenceManager(this) 807187"];
3156 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 807188"];
3157 [label="return _referenceManager; 807189"];
3158 [label="GetBoundReferenceManager(); 807190"];
3159 [label="SourceAssembly.IsDelaySigned 807191"];
3160 [label="get { return SourceAssembly.StrongNameKeys; } 807192"];
3161 [label="SourceAssembly 807193"];
3162 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 807194"];
3163 [label="GetBoundReferenceManager() 807195"];
3164 [label="param GetBoundReferenceManager(this) 807196"];
3165 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 807197"];
3166 [label="return _referenceManager; 807198"];
3167 [label="GetBoundReferenceManager(); 807199"];
3168 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 807200"];
3169 [label="param GetCorLibraryReferenceToEmit(this) 807201"];
3170 [label="CorLibrary 807202"];
3171 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 807203"];
3172 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 807204"];
3173 [label="AssemblySymbol corLibrary = CorLibrary; 807205"];
3174 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 807206"];
3175 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 807207"];
3176 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 807208"];
3177 [label="return Translate(corLibrary, context.Diagnostics); 807209"];
3178 [label="return Translate(corLibrary, context.Diagnostics); 807210"];
3179 [label="Translate(corLibrary, context.Diagnostics) 807211"];
3180 [label="param Translate(AssemblySymbol assembly) 807212"];
3181 [label="param Translate(DiagnosticBag diagnostics) 807213"];
3182 [label="param Translate(this) 807214"];
3183 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 807215"];
3184 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 807216"];
3185 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 807217"];
3186 [label="Cci.IModuleReference reference; 807218"];
3187 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 807219"];
3188 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 807220"];
3189 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 807221"];
3190 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 807222"];
3191 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 807223"];
3192 [label="new AssemblyReference(assembly) 807224"];
3193 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 807225"];
3194 [label="param AssemblyReference(this) 807226"];
3195 [label="_targetAssembly 807227"];
3196 [label="Debug.Assert((object)assemblySymbol != null); 807228"];
3197 [label="Debug.Assert((object)assemblySymbol != null); 807229"];
3198 [label="_targetAssembly 807230"];
3199 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 807231"];
3200 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 807232"];
3201 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 807233"];
3202 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 807234"];
3203 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 807235"];
3204 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 807236"];
3205 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 807237"];
3206 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 807238"];
3207 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 807239"];
3208 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 807240"];
3209 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 807241"];
3210 [label="param ValidateReferencedAssembly(this) 807242"];
3211 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 807243"];
3212 [label="asmRef.Identity 807244"];
3213 [label="=> _targetAssembly.Identity 807245"];
3214 [label="_targetAssembly.Identity 807246"];
3215 [label="AssemblyIdentity refIdentity = asmRef.Identity; 807247"];
3216 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 807248"];
3217 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 807249"];
3218 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 807250"];
3219 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 807251"];
3220 [label="var refMachine = assembly.Machine; 807252"];
3221 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 807253"];
3222 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 807254"];
3223 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 807255"];
3224 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 807256"];
3225 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 807257"];
3226 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 807258"];
3227 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 807259"];
3228 [label="return cachedAsmRef; 807260"];
3229 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 807261"];
3230 [label="=> _targetAssembly.Identity 807262"];
3231 [label="_targetAssembly.Identity 807263"];
3232 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 807264"];
3233 [label="param GetAssemblyReferencesFromAddedModules(this) 807265"];
3234 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 807266"];
3235 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 807267"];
3236 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 807268"];
3237 [label="param GetAssemblyReferencesFromAddedModules(this) 807269"];
3238 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 807270"];
3239 [label="param GetFiles(EmitContext context) 807271"];
3240 [label="param GetFiles(this) 807272"];
3241 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 807273"];
3242 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 807274"];
3243 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 807275"];
3244 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 807276"];
3245 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 807277"];
3246 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 807278"];
3247 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 807279"];
3248 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 807280"];
3249 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 807281"];
3250 [label="var modules = sourceAssSymbol.Modules; 807282"];
3251 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 807283"];
3252 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 807284"];
3253 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 807285"];
3254 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 807286"];
3255 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 807287"];
3256 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 807288"];
3257 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 807289"];
3258 [label="builder.Free(); 807290"];
3259 [label="return lazyFiles; 807291"];
3260 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 807292"];
3261 [label="=> _embeddedTypesManagerOpt 807293"];
3262 [label="_embeddedTypesManagerOpt 807294"];
3263 [label="param GetAnonymousTypeDefinitions(EmitContext context) 807295"];
3264 [label="param GetAnonymousTypeDefinitions(this) 807296"];
3265 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 807297"];
3266 [label="Compilation.AnonymousTypeManager 807298"];
3267 [label="get\n            {\n                return _anonymousTypeManager;\n            } 807299"];
3268 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 807300"];
3269 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 807301"];
3270 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 807302"];
3271 [label="param GetAdditionalTopLevelTypeDefinitions(this) 807303"];
3272 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 807304"];
3273 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 807305"];
3274 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 807306"];
3275 [label="=> _additionalTypes 807307"];
3276 [label="_additionalTypes 807308"];
3277 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 807309"];
3278 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 807310"];
3279 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 807311"];
3280 [label="param GetEmbeddedTypeDefinitions(this) 807312"];
3281 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 807313"];
3282 [label="GetEmbeddedTypes(context.Diagnostics) 807314"];
3283 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 807315"];
3284 [label="param GetEmbeddedTypes(this) 807316"];
3285 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 807317"];
3286 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 807318"];
3287 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 807319"];
3288 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 807320"];
3289 [label="param CreateEmbeddedAttributesIfNeeded(this) 807321"];
3290 [label="GetNeedsGeneratedAttributes() 807322"];
3291 [label="param GetNeedsGeneratedAttributes(this) 807323"];
3292 [label="_needsGeneratedAttributes_IsFrozen = true; 807324"];
3293 [label="_needsGeneratedAttributes_IsFrozen 807325"];
3294 [label="GetNeedsGeneratedAttributesInternal() 807326"];
3295 [label="param GetNeedsGeneratedAttributesInternal(this) 807327"];
3296 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 807328"];
3297 [label="return GetNeedsGeneratedAttributesInternal(); 807329"];
3298 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 807330"];
3299 [label="ShouldEmitNullablePublicOnlyAttribute() 807331"];
3300 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 807332"];
3301 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 807333"];
3302 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 807334"];
3303 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 807335"];
3304 [label="return; 807336"];
3305 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 807337"];
3306 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 807338"];
3307 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 807339"];
3308 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 807340"];
3309 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 807341"];
3310 [label="builder.AddIfNotNull(_lazyNullableAttribute); 807342"];
3311 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 807343"];
3312 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 807344"];
3313 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 807345"];
3314 [label="return builder.ToImmutableAndFree(); 807346"];
3315 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 807347"];
3316 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 807348"];
3317 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 807349"];
3318 [label="param GetTopLevelSourceTypeDefinitions(this) 807350"];
3319 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 807351"];
3320 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 807352"];
3321 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 807353"];
3322 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 807354"];
3323 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 807355"];
3324 [label="var ns = namespacesToProcess.Pop(); 807356"];
3325 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 807357"];
3326 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 807358"];
3327 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 807359"];
3328 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 807360"];
3329 [label="param ShouldEmitNullableAttributes(Symbol symbol) 807361"];
3330 [label="param ShouldEmitNullableAttributes(this) 807362"];
3331 [label="RoslynDebug.Assert(symbol is object); 807363"];
3332 [label="Debug.Assert(symbol.IsDefinition); 807364"];
3333 [label="SourceModule 807365"];
3334 [label="get\n            {\n                return Assembly.Modules[0];\n            } 807366"];
3335 [label="Assembly 807367"];
3336 [label="get\n            {\n                return SourceAssembly;\n            } 807368"];
3337 [label="SourceAssembly 807369"];
3338 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 807370"];
3339 [label="GetBoundReferenceManager() 807371"];
3340 [label="param GetBoundReferenceManager(this) 807372"];
3341 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 807373"];
3342 [label="return _referenceManager; 807374"];
3343 [label="GetBoundReferenceManager(); 807375"];
3344 [label="return Assembly.Modules[0]; 807376"];
3345 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 807377"];
3346 [label="EmitNullablePublicOnly 807378"];
3347 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 807379"];
3348 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 807380"];
3349 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 807381"];
3350 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 807382"];
3351 [label="param SynthesizeNullableAttributeIfNecessary(this) 807383"];
3352 [label="Compilation.SourceModule 807384"];
3353 [label="get\n            {\n                return Assembly.Modules[0];\n            } 807385"];
3354 [label="Assembly 807386"];
3355 [label="SourceAssembly 807387"];
3356 [label="GetBoundReferenceManager() 807388"];
3357 [label="param GetBoundReferenceManager(this) 807389"];
3358 [label="GetBoundReferenceManager(); 807390"];
3359 [label="return Assembly.Modules[0]; 807391"];
3360 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807392"];
3361 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807393"];
3362 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 807394"];
3363 [label="type.AddNullableTransforms(flagsBuilder); 807395"];
3364 [label="type.AddNullableTransforms(flagsBuilder); 807396"];
3365 [label="SynthesizedAttributeData attribute; 807397"];
3366 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 807398"];
3367 [label="attribute = null; 807399"];
3368 [label="flagsBuilder.Free(); 807400"];
3369 [label="return attribute; 807401"];
3370 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 807402"];
3371 [label="Debug.Assert(symbol.IsDefinition); 807403"];
3372 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 807404"];
3373 [label="return _referenceManager; 807405"];
3374 [label="GetBoundReferenceManager(); 807406"];
3375 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 807407"];
3376 [label="param GetBoundReferenceManager(this) 807408"];
3377 [label="GetBoundReferenceManager(); 807409"];
3378 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807410"];
3379 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807411"];
3380 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 807412"];
3381 [label="param GetSynthesizedNestedTypes(this) 807413"];
3382 [label="return null; 807414"];
3383 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 807415"];
3384 [label="Debug.Assert(symbol.IsDefinition); 807416"];
3385 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 807417"];
3386 [label="return _referenceManager; 807418"];
3387 [label="GetBoundReferenceManager(); 807419"];
3388 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 807420"];
3389 [label="param GetBoundReferenceManager(this) 807421"];
3390 [label="GetBoundReferenceManager(); 807422"];
3391 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807423"];
3392 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807424"];
3393 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 807425"];
3394 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 807426"];
3395 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 807427"];
3396 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 807428"];
3397 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 807429"];
3398 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 807430"];
3399 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 807431"];
3400 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 807432"];
3401 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 807433"];
3402 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 807434"];
3403 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 807435"];
3404 [label="param SynthesizeNullableAttributeIfNecessary(this) 807436"];
3405 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 807437"];
3406 [label="return null; 807438"];
3407 [label="Debug.Assert(symbol.IsDefinition); 807439"];
3408 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 807440"];
3409 [label="return _referenceManager; 807441"];
3410 [label="GetBoundReferenceManager(); 807442"];
3411 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 807443"];
3412 [label="param GetBoundReferenceManager(this) 807444"];
3413 [label="GetBoundReferenceManager(); 807445"];
3414 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807446"];
3415 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807447"];
3416 [label="param SynthesizeNullableAttributeIfNecessary(this) 807448"];
3417 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 807449"];
3418 [label="param GetSourceAssemblyAttributes(this) 807450"];
3419 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 807451"];
3420 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 807452"];
3421 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 807453"];
3422 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 807454"];
3423 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 807455"];
3424 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 807456"];
3425 [label="NamedTypeSymbol result; 807457"];
3426 [label="GetBoundReferenceManager() 807458"];
3427 [label="GetBoundReferenceManager(); 807459"];
3428 [label="Debug.Assert(result.SpecialType == specialType); 807460"];
3429 [label="SourceAssembly 807461"];
3430 [label="GetBoundReferenceManager() 807462"];
3431 [label="param GetBoundReferenceManager(this) 807463"];
3432 [label="GetBoundReferenceManager(); 807464"];
3433 [label="GetBoundReferenceManager() 807465"];
3434 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 807466"];
3435 [label="param Translate(MethodSymbol methodSymbol) 807467"];
3436 [label="param Translate(SyntaxNode syntaxNodeOpt) 807468"];
3437 [label="param Translate(DiagnosticBag diagnostics) 807469"];
3438 [label="param Translate(BoundArgListOperator optArgList = null) 807470"];
3439 [label="param Translate(bool needDeclaration = false) 807471"];
3440 [label="param Translate(this) 807472"];
3441 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 807473"];
3442 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 807474"];
3443 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 807475"];
3444 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 807476"];
3445 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 807477"];
3446 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 807478"];
3447 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 807479"];
3448 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 807480"];
3449 [label="param Translate(MethodSymbol methodSymbol) 807481"];
3450 [label="param Translate(SyntaxNode syntaxNodeOpt) 807482"];
3451 [label="param Translate(DiagnosticBag diagnostics) 807483"];
3452 [label="param Translate(bool needDeclaration) 807484"];
3453 [label="param Translate(this) 807485"];
3454 [label="object reference; 807486"];
3455 [label="Cci.IMethodReference methodRef; 807487"];
3456 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 807488"];
3457 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 807489"];
3458 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 807490"];
3459 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 807491"];
3460 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 807492"];
3461 [label="bool typeIsGeneric = IsGenericType(container); 807493"];
3462 [label="IsGenericType(container) 807494"];
3463 [label="param IsGenericType(NamedTypeSymbol toCheck) 807495"];
3464 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807496"];
3465 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807497"];
3466 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 807498"];
3467 [label="toCheck = toCheck.ContainingType; 807499"];
3468 [label="return false; 807500"];
3469 [label="bool typeIsGeneric = IsGenericType(container); 807501"];
3470 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 807502"];
3471 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 807503"];
3472 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 807504"];
3473 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 807505"];
3474 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 807506"];
3475 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 807507"];
3476 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 807508"];
3477 [label="param Translate(TypeSymbol typeSymbol) 807509"];
3478 [label="param Translate(SyntaxNode syntaxNodeOpt) 807510"];
3479 [label="param Translate(DiagnosticBag diagnostics) 807511"];
3480 [label="param Translate(this) 807512"];
3481 [label="Debug.Assert(diagnostics != null); 807513"];
3482 [label="Debug.Assert(diagnostics != null); 807514"];
3483 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 807515"];
3484 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807516"];
3485 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807517"];
3486 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807518"];
3487 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807519"];
3488 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 807520"];
3489 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 807521"];
3490 [label="param Translate(SyntaxNode syntaxNodeOpt) 807522"];
3491 [label="param Translate(DiagnosticBag diagnostics) 807523"];
3492 [label="param Translate(bool fromImplements = false) 807524"];
3493 [label="param Translate(bool needDeclaration = false) 807525"];
3494 [label="param Translate(this) 807526"];
3495 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 807527"];
3496 [label="Debug.Assert(diagnostics != null); 807528"];
3497 [label="Debug.Assert(diagnostics != null); 807529"];
3498 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807530"];
3499 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807531"];
3500 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 807532"];
3501 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807533"];
3502 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807534"];
3503 [label="object reference; 807535"];
3504 [label="Cci.INamedTypeReference typeRef; 807536"];
3505 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 807537"];
3506 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807538"];
3507 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807539"];
3508 [label="IsGenericType(container) 807540"];
3509 [label="param IsGenericType(NamedTypeSymbol toCheck) 807541"];
3510 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807542"];
3511 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807543"];
3512 [label="return false; 807544"];
3513 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807545"];
3514 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807546"];
3515 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 807547"];
3516 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 807548"];
3517 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 807549"];
3518 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 807550"];
3519 [label="param Translate(SyntaxNode syntaxNodeOpt) 807551"];
3520 [label="param Translate(DiagnosticBag diagnostics) 807552"];
3521 [label="param Translate(bool fromImplements = false) 807553"];
3522 [label="param Translate(bool needDeclaration = false) 807554"];
3523 [label="param Translate(this) 807555"];
3524 [label="Debug.Assert(diagnostics != null); 807556"];
3525 [label="Debug.Assert(diagnostics != null); 807557"];
3526 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807558"];
3527 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807559"];
3528 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 807560"];
3529 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807561"];
3530 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807562"];
3531 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 807563"];
3532 [label="param Translate(ModuleSymbol module) 807564"];
3533 [label="param Translate(DiagnosticBag diagnostics) 807565"];
3534 [label="param Translate(this) 807566"];
3535 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 807567"];
3536 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 807568"];
3537 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 807569"];
3538 [label="if ((object)module == null)\n            {\n                return null;\n            } 807570"];
3539 [label="if ((object)module == null)\n            {\n                return null;\n            } 807571"];
3540 [label="Cci.IModuleReference moduleRef; 807572"];
3541 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 807573"];
3542 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 807574"];
3543 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 807575"];
3544 [label="return moduleRef; 807576"];
3545 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807577"];
3546 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807578"];
3547 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 807579"];
3548 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807580"];
3549 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807581"];
3550 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 807582"];
3551 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 807583"];
3552 [label="param Translate(this) 807584"];
3553 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 807585"];
3554 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 807586"];
3555 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 807587"];
3556 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 807588"];
3557 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 807589"];
3558 [label="MustBeWrapped(@params.First()) 807590"];
3559 [label="param MustBeWrapped(ParameterSymbol param) 807591"];
3560 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 807592"];
3561 [label="var container = param.ContainingSymbol; 807593"];
3562 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 807594"];
3563 [label="ContainerIsGeneric(container) 807595"];
3564 [label="param ContainerIsGeneric(Symbol container) 807596"];
3565 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807597"];
3566 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807598"];
3567 [label="IsGenericType(container.ContainingType) 807599"];
3568 [label="param IsGenericType(NamedTypeSymbol toCheck) 807600"];
3569 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807601"];
3570 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807602"];
3571 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 807603"];
3572 [label="toCheck = toCheck.ContainingType; 807604"];
3573 [label="return false; 807605"];
3574 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807606"];
3575 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807607"];
3576 [label="return false; 807608"];
3577 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 807609"];
3578 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 807610"];
3579 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 807611"];
3580 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 807612"];
3581 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 807613"];
3582 [label="param MustBeWrapped(ParameterSymbol param) 807614"];
3583 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 807615"];
3584 [label="var container = param.ContainingSymbol; 807616"];
3585 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 807617"];
3586 [label="ContainerIsGeneric(container) 807618"];
3587 [label="param ContainerIsGeneric(Symbol container) 807619"];
3588 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807620"];
3589 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807621"];
3590 [label="IsGenericType(container.ContainingType) 807622"];
3591 [label="param IsGenericType(NamedTypeSymbol toCheck) 807623"];
3592 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807624"];
3593 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807625"];
3594 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 807626"];
3595 [label="toCheck = toCheck.ContainingType; 807627"];
3596 [label="return false; 807628"];
3597 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807629"];
3598 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807630"];
3599 [label="return false; 807631"];
3600 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 807632"];
3601 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 807633"];
3602 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 807634"];
3603 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 807635"];
3604 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807636"];
3605 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807637"];
3606 [label="param Translate(SyntaxNode syntaxNodeOpt) 807638"];
3607 [label="param Translate(DiagnosticBag diagnostics) 807639"];
3608 [label="param Translate(bool fromImplements = false) 807640"];
3609 [label="param Translate(bool needDeclaration = false) 807641"];
3610 [label="Debug.Assert(diagnostics != null); 807642"];
3611 [label="Debug.Assert(diagnostics != null); 807643"];
3612 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807644"];
3613 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807645"];
3614 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 807646"];
3615 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807647"];
3616 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807648"];
3617 [label="object reference; 807649"];
3618 [label="Cci.INamedTypeReference typeRef; 807650"];
3619 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 807651"];
3620 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807652"];
3621 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807653"];
3622 [label="IsGenericType(container) 807654"];
3623 [label="param IsGenericType(NamedTypeSymbol toCheck) 807655"];
3624 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807656"];
3625 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807657"];
3626 [label="return false; 807658"];
3627 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807659"];
3628 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807660"];
3629 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 807661"];
3630 [label="param IsPlatformType(Cci.ITypeReference typeRef) 807662"];
3631 [label="param IsPlatformType(Cci.PlatformType platformType) 807663"];
3632 [label="param IsPlatformType(this) 807664"];
3633 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 807665"];
3634 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 807666"];
3635 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 807667"];
3636 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 807668"];
3637 [label="return namedType.SpecialType == (SpecialType)platformType; 807669"];
3638 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 807670"];
3639 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807671"];
3640 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807672"];
3641 [label="param Translate(SyntaxNode syntaxNodeOpt) 807673"];
3642 [label="param Translate(DiagnosticBag diagnostics) 807674"];
3643 [label="param Translate(bool fromImplements = false) 807675"];
3644 [label="param Translate(bool needDeclaration = false) 807676"];
3645 [label="Debug.Assert(diagnostics != null); 807677"];
3646 [label="Debug.Assert(diagnostics != null); 807678"];
3647 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807679"];
3648 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807680"];
3649 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 807681"];
3650 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807682"];
3651 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807683"];
3652 [label="object reference; 807684"];
3653 [label="Cci.INamedTypeReference typeRef; 807685"];
3654 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 807686"];
3655 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807687"];
3656 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807688"];
3657 [label="IsGenericType(container) 807689"];
3658 [label="param IsGenericType(NamedTypeSymbol toCheck) 807690"];
3659 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807691"];
3660 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807692"];
3661 [label="return false; 807693"];
3662 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807694"];
3663 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807695"];
3664 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 807696"];
3665 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807697"];
3666 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807698"];
3667 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 807699"];
3668 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807700"];
3669 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807701"];
3670 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 807702"];
3671 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 807703"];
3672 [label="param MustBeWrapped(ParameterSymbol param) 807704"];
3673 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 807705"];
3674 [label="var container = param.ContainingSymbol; 807706"];
3675 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 807707"];
3676 [label="ContainerIsGeneric(container) 807708"];
3677 [label="param ContainerIsGeneric(Symbol container) 807709"];
3678 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807710"];
3679 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807711"];
3680 [label="IsGenericType(container.ContainingType) 807712"];
3681 [label="param IsGenericType(NamedTypeSymbol toCheck) 807713"];
3682 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807714"];
3683 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807715"];
3684 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 807716"];
3685 [label="toCheck = toCheck.ContainingType; 807717"];
3686 [label="return false; 807718"];
3687 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807719"];
3688 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807720"];
3689 [label="param MustBeWrapped(ParameterSymbol param) 807721"];
3690 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 807722"];
3691 [label="var container = param.ContainingSymbol; 807723"];
3692 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 807724"];
3693 [label="ContainerIsGeneric(container) 807725"];
3694 [label="param ContainerIsGeneric(Symbol container) 807726"];
3695 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807727"];
3696 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807728"];
3697 [label="IsGenericType(container.ContainingType) 807729"];
3698 [label="param IsGenericType(NamedTypeSymbol toCheck) 807730"];
3699 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807731"];
3700 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807732"];
3701 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 807733"];
3702 [label="toCheck = toCheck.ContainingType; 807734"];
3703 [label="return false; 807735"];
3704 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807736"];
3705 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 807737"];
3706 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 807738"];
3707 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 807739"];
3708 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 807740"];
3709 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 807741"];
3710 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 807742"];
3711 [label="bool typeIsGeneric = IsGenericType(container); 807743"];
3712 [label="IsGenericType(container) 807744"];
3713 [label="param IsGenericType(NamedTypeSymbol toCheck) 807745"];
3714 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807746"];
3715 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807747"];
3716 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 807748"];
3717 [label="toCheck = toCheck.ContainingType; 807749"];
3718 [label="return false; 807750"];
3719 [label="bool typeIsGeneric = IsGenericType(container); 807751"];
3720 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 807752"];
3721 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 807753"];
3722 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 807754"];
3723 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 807755"];
3724 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 807756"];
3725 [label="toCheck = toCheck.ContainingType; 807757"];
3726 [label="param GetSourceAssemblySecurityAttributes(this) 807758"];
3727 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 807759"];
3728 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 807760"];
3729 [label="return Translate(corLibrary, context.Diagnostics); 807761"];
3730 [label="param Translate(DiagnosticBag diagnostics) 807762"];
3731 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 807763"];
3732 [label="return (Cci.IAssemblyReference)reference; 807764"];
3733 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 807765"];
3734 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 807766"];
3735 [label="param GetSourceModuleAttributes(this) 807767"];
3736 [label="return SourceModule.GetCustomAttributesToEmit(this); 807768"];
3737 [label="return SourceModule.GetCustomAttributesToEmit(this); 807769"];
3738 [label="return SourceModule.GetCustomAttributesToEmit(this); 807770"];
3739 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 807771"];
3740 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 807772"];
3741 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 807773"];
3742 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 807774"];
3743 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 807775"];
3744 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 807776"];
3745 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 807777"];
3746 [label="return GetNeedsGeneratedAttributesInternal(); 807778"];
3747 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 807779"];
3748 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 807780"];
3749 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 807781"];
3750 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 807782"];
3751 [label="return; 807783"];
3752 [label="Debug.Assert(symbol.IsDefinition); 807784"];
3753 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 807785"];
3754 [label="return _referenceManager; 807786"];
3755 [label="GetBoundReferenceManager(); 807787"];
3756 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 807788"];
3757 [label="param GetBoundReferenceManager(this) 807789"];
3758 [label="GetBoundReferenceManager(); 807790"];
3759 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807791"];
3760 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807792"];
3761 [label="param SynthesizeNullableAttributeIfNecessary(this) 807793"];
3762 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807794"];
3763 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807795"];
3764 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 807796"];
3765 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807797"];
3766 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807798"];
3767 [label="object reference; 807799"];
3768 [label="Cci.INamedTypeReference typeRef; 807800"];
3769 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 807801"];
3770 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807802"];
3771 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807803"];
3772 [label="IsGenericType(container) 807804"];
3773 [label="param IsGenericType(NamedTypeSymbol toCheck) 807805"];
3774 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807806"];
3775 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807807"];
3776 [label="return false; 807808"];
3777 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807809"];
3778 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807810"];
3779 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 807811"];
3780 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 807812"];
3781 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807813"];
3782 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807814"];
3783 [label="param Translate(SyntaxNode syntaxNodeOpt) 807815"];
3784 [label="param Translate(DiagnosticBag diagnostics) 807816"];
3785 [label="param Translate(bool fromImplements = false) 807817"];
3786 [label="param Translate(bool needDeclaration = false) 807818"];
3787 [label="Debug.Assert(diagnostics != null); 807819"];
3788 [label="Debug.Assert(diagnostics != null); 807820"];
3789 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807821"];
3790 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807822"];
3791 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 807823"];
3792 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807824"];
3793 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807825"];
3794 [label="object reference; 807826"];
3795 [label="Cci.INamedTypeReference typeRef; 807827"];
3796 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 807828"];
3797 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807829"];
3798 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807830"];
3799 [label="IsGenericType(container) 807831"];
3800 [label="param IsGenericType(NamedTypeSymbol toCheck) 807832"];
3801 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807833"];
3802 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807834"];
3803 [label="return false; 807835"];
3804 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807836"];
3805 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807837"];
3806 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 807838"];
3807 [label="return this; 807839"];
3808 [label="Debug.Assert(symbol.IsDefinition); 807840"];
3809 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 807841"];
3810 [label="return _referenceManager; 807842"];
3811 [label="GetBoundReferenceManager(); 807843"];
3812 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 807844"];
3813 [label="param GetBoundReferenceManager(this) 807845"];
3814 [label="GetBoundReferenceManager(); 807846"];
3815 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807847"];
3816 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807848"];
3817 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807849"];
3818 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807850"];
3819 [label="param Translate(SyntaxNode syntaxNodeOpt) 807851"];
3820 [label="param Translate(DiagnosticBag diagnostics) 807852"];
3821 [label="param Translate(bool fromImplements = false) 807853"];
3822 [label="param Translate(bool needDeclaration = false) 807854"];
3823 [label="Debug.Assert(diagnostics != null); 807855"];
3824 [label="Debug.Assert(diagnostics != null); 807856"];
3825 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807857"];
3826 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807858"];
3827 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 807859"];
3828 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807860"];
3829 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807861"];
3830 [label="object reference; 807862"];
3831 [label="Cci.INamedTypeReference typeRef; 807863"];
3832 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 807864"];
3833 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807865"];
3834 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807866"];
3835 [label="IsGenericType(container) 807867"];
3836 [label="param IsGenericType(NamedTypeSymbol toCheck) 807868"];
3837 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807869"];
3838 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807870"];
3839 [label="return false; 807871"];
3840 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807872"];
3841 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807873"];
3842 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 807874"];
3843 [label="param SynthesizeNullableAttributeIfNecessary(this) 807875"];
3844 [label="Debug.Assert(!needDeclaration); 807876"];
3845 [label="if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                } 807877"];
3846 [label="return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol); 807878"];
3847 [label="GetCciAdapter(namedTypeSymbol) 807879"];
3848 [label="param GetCciAdapter(Symbol symbol) 807880"];
3849 [label="param GetCciAdapter(this) 807881"];
3850 [label="return _genericInstanceMap.GetOrAdd(symbol, s => s.GetCciAdapter()); 807882"];
3851 [label="return _genericInstanceMap.GetOrAdd(symbol, s => s.GetCciAdapter()); 807883"];
3852 [label="return _genericInstanceMap.GetOrAdd(symbol, s => s.GetCciAdapter()); 807884"];
3853 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807885"];
3854 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807886"];
3855 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 807887"];
3856 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807888"];
3857 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 807889"];
3858 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807890"];
3859 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 807891"];
3860 [label="param Translate(SyntaxNode syntaxNodeOpt) 807892"];
3861 [label="param Translate(DiagnosticBag diagnostics) 807893"];
3862 [label="param Translate(bool fromImplements = false) 807894"];
3863 [label="param Translate(bool needDeclaration = false) 807895"];
3864 [label="Debug.Assert(diagnostics != null); 807896"];
3865 [label="Debug.Assert(diagnostics != null); 807897"];
3866 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807898"];
3867 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 807899"];
3868 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 807900"];
3869 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 807901"];
3870 [label="object reference; 807902"];
3871 [label="Cci.INamedTypeReference typeRef; 807903"];
3872 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 807904"];
3873 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807905"];
3874 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807906"];
3875 [label="IsGenericType(container) 807907"];
3876 [label="param IsGenericType(NamedTypeSymbol toCheck) 807908"];
3877 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807909"];
3878 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807910"];
3879 [label="return false; 807911"];
3880 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807912"];
3881 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807913"];
3882 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 807914"];
3883 [label="Debug.Assert(symbol.IsDefinition); 807915"];
3884 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 807916"];
3885 [label="return _referenceManager; 807917"];
3886 [label="GetBoundReferenceManager(); 807918"];
3887 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 807919"];
3888 [label="param GetBoundReferenceManager(this) 807920"];
3889 [label="GetBoundReferenceManager(); 807921"];
3890 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807922"];
3891 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 807923"];
3892 [label="param SynthesizeNullableAttributeIfNecessary(this) 807924"];
3893 [label="Debug.Assert(!needDeclaration); 807925"];
3894 [label="get\n            {\n                return SourceAssembly;\n            } 807926"];
3895 [label="SourceAssembly 807927"];
3896 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 807928"];
3897 [label="GetBoundReferenceManager() 807929"];
3898 [label="param GetBoundReferenceManager(this) 807930"];
3899 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 807931"];
3900 [label="return _referenceManager; 807932"];
3901 [label="GetBoundReferenceManager(); 807933"];
3902 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 807934"];
3903 [label="param GetUnaliasedReferencedAssemblies(this) 807935"];
3904 [label="GetBoundReferenceManager() 807936"];
3905 [label="param GetBoundReferenceManager(this) 807937"];
3906 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 807938"];
3907 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 807939"];
3908 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 807940"];
3909 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 807941"];
3910 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 807942"];
3911 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 807943"];
3912 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 807944"];
3913 [label="bool typeIsGeneric = IsGenericType(container); 807945"];
3914 [label="IsGenericType(container) 807946"];
3915 [label="param IsGenericType(NamedTypeSymbol toCheck) 807947"];
3916 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807948"];
3917 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807949"];
3918 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 807950"];
3919 [label="toCheck = toCheck.ContainingType; 807951"];
3920 [label="return false; 807952"];
3921 [label="bool typeIsGeneric = IsGenericType(container); 807953"];
3922 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 807954"];
3923 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 807955"];
3924 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 807956"];
3925 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 807957"];
3926 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 807958"];
3927 [label="object reference; 807959"];
3928 [label="Cci.INamedTypeReference typeRef; 807960"];
3929 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 807961"];
3930 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807962"];
3931 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807963"];
3932 [label="IsGenericType(container) 807964"];
3933 [label="param IsGenericType(NamedTypeSymbol toCheck) 807965"];
3934 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807966"];
3935 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 807967"];
3936 [label="return false; 807968"];
3937 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807969"];
3938 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 807970"];
3939 [label="param GetExportedTypes(DiagnosticBag diagnostics) 807971"];
3940 [label="param GetExportedTypes(this) 807972"];
3941 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 807973"];
3942 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 807974"];
3943 [label="CalculateExportedTypes() 807975"];
3944 [label="param CalculateExportedTypes(this) 807976"];
3945 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 807977"];
3946 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 807978"];
3947 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 807979"];
3948 [label="var modules = sourceAssembly.Modules; 807980"];
3949 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 807981"];
3950 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 807982"];
3951 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 807983"];
3952 [label="sourceAssembly.DeclaringCompilation.Options 807984"];
3953 [label="get\n            {\n                return _options;\n            } 807985"];
3954 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 807986"];
3955 [label="GetForwardedTypes(sourceAssembly, builder); 807987"];
3956 [label="GetForwardedTypes(sourceAssembly, builder); 807988"];
3957 [label="GetForwardedTypes(sourceAssembly, builder) 807989"];
3958 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 807990"];
3959 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 807991"];
3960 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 807992"];
3961 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 807993"];
3962 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 807994"];
3963 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 807995"];
3964 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 807996"];
3965 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 807997"];
3966 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 807998"];
3967 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 807999"];
3968 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 808000"];
3969 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 808001"];
3970 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 808002"];
3971 [label="sourceAssembly.DeclaringCompilation.Options 808003"];
3972 [label="get\n            {\n                return _options;\n            } 808004"];
3973 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 808005"];
3974 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 808006"];
3975 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 808007"];
3976 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 808008"];
3977 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 808009"];
3978 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 808010"];
3979 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 808011"];
3980 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 808012"];
3981 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 808013"];
3982 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 808014"];
3983 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 808015"];
3984 [label="return seenTopLevelForwardedTypes; 808016"];
3985 [label="GetForwardedTypes(sourceAssembly, builder); 808017"];
3986 [label="return builder.ToImmutableAndFree(); 808018"];
3987 [label="_lazyExportedTypes = CalculateExportedTypes(); 808019"];
3988 [label="_lazyExportedTypes 808020"];
3989 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 808021"];
3990 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 808022"];
3991 [label="return _lazyExportedTypes; 808023"];
3992 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 808024"];
3993 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 808025"];
3994 [label="param AddEmbeddedResourcesFromAddedModules(this) 808026"];
3995 [label="var modules = _sourceAssembly.Modules; 808027"];
3996 [label="int count = modules.Length; 808028"];
3997 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 808029"];
3998 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 808030"];
3999 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 808031"];
4000 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 808032"];
4001 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 808033"];
4002 [label="this.SyntaxTrees 808034"];
4003 [label="_syntaxAndDeclarations.GetLazyState() 808035"];
4004 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 808036"];
4005 [label="=> null 808037"];
4006 [label="null 808038"];
4007 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 808039"];
4008 [label="param CommonGetBoundReferenceManager(this) 808040"];
4009 [label="GetBoundReferenceManager() 808041"];
4010 [label="param GetBoundReferenceManager(this) 808042"];
4011 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 808043"];
4012 [label="return _referenceManager; 808044"];
4013 [label="return GetBoundReferenceManager(); 808045"];
4014 [label="param SerializePdbEmbeddedCompilationOptions(BlobBuilder builder) 808046"];
4015 [label="param SerializePdbEmbeddedCompilationOptions(this) 808047"];
4016 [label="Debug.Assert(LanguageVersion == LanguageVersion.MapSpecifiedToEffectiveVersion()); 808048"];
4017 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 808049"];
4018 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 808050"];
4019 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()) 808051"];
4020 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 808052"];
4021 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 808053"];
4022 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 808054"];
4023 [label="builder.WriteUTF8(key); 808055"];
4024 [label="builder.WriteUTF8(key); 808056"];
4025 [label="builder.WriteUTF8(key); 808057"];
4026 [label="builder.WriteByte(0); 808058"];
4027 [label="builder.WriteByte(0); 808059"];
4028 [label="builder.WriteUTF8(value); 808060"];
4029 [label="builder.WriteUTF8(value); 808061"];
4030 [label="builder.WriteUTF8(value); 808062"];
4031 [label="builder.WriteByte(0); 808063"];
4032 [label="builder.WriteByte(0); 808064"];
4033 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 808065"];
4034 [label="Options 808066"];
4035 [label="get\n            {\n                return _options;\n            } 808067"];
4036 [label="return _options; 808068"];
4037 [label="if (Options.CheckOverflow)\n            {\n                WriteValue(CompilationOptionNames.Checked, Options.CheckOverflow.ToString());\n            } 808069"];
4038 [label="Options 808070"];
4039 [label="get\n            {\n                return _options;\n            } 808071"];
4040 [label="return _options; 808072"];
4041 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable)\n            {\n                WriteValue(CompilationOptionNames.Nullable, Options.NullableContextOptions.ToString());\n            } 808073"];
4042 [label="Options 808074"];
4043 [label="get\n            {\n                return _options;\n            } 808075"];
4044 [label="return _options; 808076"];
4045 [label="if (Options.AllowUnsafe)\n            {\n                WriteValue(CompilationOptionNames.Unsafe, Options.AllowUnsafe.ToString());\n            } 808077"];
4046 [label="GetPreprocessorSymbols() 808078"];
4047 [label="param GetPreprocessorSymbols(this) 808079"];
4048 [label="SyntaxTrees 808080"];
4049 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 808081"];
4050 [label="_syntaxAndDeclarations.GetLazyState() 808082"];
4051 [label="param GetLazyState(this) 808083"];
4052 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 808084"];
4053 [label="CSharpSyntaxTree? firstTree = (CSharpSyntaxTree?)SyntaxTrees.FirstOrDefault(); 808085"];
4054 [label="if (firstTree is null)\n            {\n                return ImmutableArray<string>.Empty;\n            } 808086"];
4055 [label="return firstTree.Options.PreprocessorSymbolNames.ToImmutableArray(); 808087"];
4056 [label="var preprocessorSymbols = GetPreprocessorSymbols(); 808088"];
4057 [label="if (preprocessorSymbols.Any())\n            {\n                WriteValue(CompilationOptionNames.Define, string.Join(',', preprocessorSymbols));\n            } 808089"];
4058 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 808090"];
4059 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808091"];
4060 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808092"];
4061 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808093"];
4062 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808094"];
4063 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808095"];
4064 [label="Debug.Assert(!needDeclaration); 808096"];
4065 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808097"];
4066 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808098"];
4067 [label="param Translate(SyntaxNode syntaxNodeOpt) 808099"];
4068 [label="param Translate(DiagnosticBag diagnostics) 808100"];
4069 [label="param Translate(bool fromImplements = false) 808101"];
4070 [label="param Translate(bool needDeclaration = false) 808102"];
4071 [label="Debug.Assert(diagnostics != null); 808103"];
4072 [label="Debug.Assert(diagnostics != null); 808104"];
4073 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808105"];
4074 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808106"];
4075 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808107"];
4076 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808108"];
4077 [label="object reference; 808109"];
4078 [label="Cci.INamedTypeReference typeRef; 808110"];
4079 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 808111"];
4080 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808112"];
4081 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808113"];
4082 [label="IsGenericType(container) 808114"];
4083 [label="param IsGenericType(NamedTypeSymbol toCheck) 808115"];
4084 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 808116"];
4085 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 808117"];
4086 [label="return false; 808118"];
4087 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808119"];
4088 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808120"];
4089 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808121"];
4090 [label="param IsGenericType(NamedTypeSymbol toCheck) 808122"];
4091 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 808123"];
4092 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 808124"];
4093 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 808125"];
4094 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 808126"];
4095 [label="return true; 808127"];
4096 [label="param MustBeWrapped(ParameterSymbol param) 808128"];
4097 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 808129"];
4098 [label="var container = param.ContainingSymbol; 808130"];
4099 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 808131"];
4100 [label="ContainerIsGeneric(container) 808132"];
4101 [label="param ContainerIsGeneric(Symbol container) 808133"];
4102 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 808134"];
4103 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 808135"];
4104 [label="IsGenericType(container.ContainingType) 808136"];
4105 [label="param IsGenericType(NamedTypeSymbol toCheck) 808137"];
4106 [label="return true; 808138"];
4107 [label="return TranslateAll(@params); 808139"];
4108 [label="TranslateAll(@params) 808140"];
4109 [label="param TranslateAll(ImmutableArray<ParameterSymbol> @params) 808141"];
4110 [label="param TranslateAll(this) 808142"];
4111 [label="var builder = ArrayBuilder<Cci.IParameterTypeInformation>.GetInstance(); 808143"];
4112 [label="foreach (var param in @params)\n            {\n                builder.Add(CreateParameterTypeInformationWrapper(param));\n            } 808144"];
4113 [label="foreach (var param in @params)\n            {\n                builder.Add(CreateParameterTypeInformationWrapper(param));\n            } 808145"];
4114 [label="builder.Add(CreateParameterTypeInformationWrapper(param)); 808146"];
4115 [label="CreateParameterTypeInformationWrapper(param) 808147"];
4116 [label="param CreateParameterTypeInformationWrapper(ParameterSymbol param) 808148"];
4117 [label="param CreateParameterTypeInformationWrapper(this) 808149"];
4118 [label="object reference; 808150"];
4119 [label="Cci.IParameterTypeInformation paramRef; 808151"];
4120 [label="if (_genericInstanceMap.TryGetValue(param, out reference))\n            {\n                return (Cci.IParameterTypeInformation)reference;\n            } 808152"];
4121 [label="if (_genericInstanceMap.TryGetValue(param, out reference))\n            {\n                return (Cci.IParameterTypeInformation)reference;\n            } 808153"];
4122 [label="if (_genericInstanceMap.TryGetValue(param, out reference))\n            {\n                return (Cci.IParameterTypeInformation)reference;\n            } 808154"];
4123 [label="return (Cci.IParameterTypeInformation)reference; 808155"];
4124 [label="builder.Add(CreateParameterTypeInformationWrapper(param)); 808156"];
4125 [label="Cci.IParameterTypeInformation paramRef; 808157"];
4126 [label="return builder.ToImmutableAndFree(); 808158"];
4127 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808159"];
4128 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808160"];
4129 [label="param Translate(SyntaxNode syntaxNodeOpt) 808161"];
4130 [label="param Translate(DiagnosticBag diagnostics) 808162"];
4131 [label="param Translate(bool fromImplements = false) 808163"];
4132 [label="param Translate(bool needDeclaration = false) 808164"];
4133 [label="Debug.Assert(diagnostics != null); 808165"];
4134 [label="Debug.Assert(diagnostics != null); 808166"];
4135 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808167"];
4136 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808168"];
4137 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808169"];
4138 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808170"];
4139 [label="object reference; 808171"];
4140 [label="Cci.INamedTypeReference typeRef; 808172"];
4141 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 808173"];
4142 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808174"];
4143 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808175"];
4144 [label="IsGenericType(container) 808176"];
4145 [label="param IsGenericType(NamedTypeSymbol toCheck) 808177"];
4146 [label="return false; 808178"];
4147 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808179"];
4148 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808180"];
4149 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808181"];
4150 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 808182"];
4151 [label="param GetType(EmitContext context) 808183"];
4152 [label="param GetType(this) 808184"];
4153 [label="return ((PEModuleBuilder)context.Module).Translate(_underlyingParameter.Type, syntaxNodeOpt: (CSharpSyntaxNode)context.SyntaxNodeOpt, diagnostics: context.Diagnostics); 808185"];
4154 [label="return ((PEModuleBuilder)context.Module).Translate(_underlyingParameter.Type, syntaxNodeOpt: (CSharpSyntaxNode)context.SyntaxNodeOpt, diagnostics: context.Diagnostics); 808186"];
4155 [label="((PEModuleBuilder)context.Module).Translate(_underlyingParameter.Type, syntaxNodeOpt: (CSharpSyntaxNode)context.SyntaxNodeOpt, diagnostics: context.Diagnostics) 808187"];
4156 [label="param Translate(TypeSymbol typeSymbol) 808188"];
4157 [label="param Translate(SyntaxNode syntaxNodeOpt) 808189"];
4158 [label="param Translate(DiagnosticBag diagnostics) 808190"];
4159 [label="param Translate(this) 808191"];
4160 [label="Debug.Assert(diagnostics != null); 808192"];
4161 [label="Debug.Assert(diagnostics != null); 808193"];
4162 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808194"];
4163 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808195"];
4164 [label="param Translate(SyntaxNode syntaxNodeOpt) 808196"];
4165 [label="param Translate(DiagnosticBag diagnostics) 808197"];
4166 [label="param Translate(bool fromImplements = false) 808198"];
4167 [label="param Translate(bool needDeclaration = false) 808199"];
4168 [label="param Translate(this) 808200"];
4169 [label="Debug.Assert(diagnostics != null); 808201"];
4170 [label="Debug.Assert(diagnostics != null); 808202"];
4171 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808203"];
4172 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808204"];
4173 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808205"];
4174 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808206"];
4175 [label="object reference; 808207"];
4176 [label="Cci.INamedTypeReference typeRef; 808208"];
4177 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 808209"];
4178 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808210"];
4179 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808211"];
4180 [label="IsGenericType(container) 808212"];
4181 [label="param IsGenericType(NamedTypeSymbol toCheck) 808213"];
4182 [label="return false; 808214"];
4183 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808215"];
4184 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808216"];
4185 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808217"];
4186 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 808218"];
4187 [label="get\n            {\n                return ImmutableArray<Cci.ICustomModifier>.CastUp(_underlyingParameter.RefCustomModifiers);\n            } 808219"];
4188 [label="return ImmutableArray<Cci.ICustomModifier>.CastUp(_underlyingParameter.RefCustomModifiers); 808220"];
4189 [label="get\n            {\n                return _underlyingParameter.RefKind != RefKind.None;\n            } 808221"];
4190 [label="return _underlyingParameter.RefKind != RefKind.None; 808222"];
4191 [label="get\n            {\n                return ImmutableArray<Cci.ICustomModifier>.CastUp(_underlyingParameter.TypeWithAnnotations.CustomModifiers);\n            } 808223"];
4192 [label="return ImmutableArray<Cci.ICustomModifier>.CastUp(_underlyingParameter.TypeWithAnnotations.CustomModifiers); 808224"];
4193 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 808225"];
4194 [label="param Translate(SyntaxNode syntaxNodeOpt) 808226"];
4195 [label="param Translate(DiagnosticBag diagnostics) 808227"];
4196 [label="Debug.Assert(diagnostics != null); 808228"];
4197 [label="param Translate(SyntaxNode syntaxNodeOpt) 808229"];
4198 [label="param Translate(DiagnosticBag diagnostics) 808230"];
4199 [label="param Translate(bool fromImplements = false) 808231"];
4200 [label="param Translate(bool needDeclaration = false) 808232"];
4201 [label="Debug.Assert(diagnostics != null); 808233"];
4202 [label="Debug.Assert(diagnostics != null); 808234"];
4203 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808235"];
4204 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808236"];
4205 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808237"];
4206 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808238"];
4207 [label="object reference; 808239"];
4208 [label="Cci.INamedTypeReference typeRef; 808240"];
4209 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 808241"];
4210 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808242"];
4211 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808243"];
4212 [label="IsGenericType(container) 808244"];
4213 [label="param IsGenericType(NamedTypeSymbol toCheck) 808245"];
4214 [label="return false; 808246"];
4215 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808247"];
4216 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808248"];
4217 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808249"];
4218 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808250"];
4219 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808251"];
4220 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808252"];
4221 [label="Debug.Assert(!needDeclaration); 808253"];
4222 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808254"];
4223 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808255"];
4224 [label="param Translate(SyntaxNode syntaxNodeOpt) 808256"];
4225 [label="param Translate(DiagnosticBag diagnostics) 808257"];
4226 [label="Debug.Assert(diagnostics != null); 808258"];
4227 [label="Cci.IParameterTypeInformation paramRef; 808259"];
4228 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808260"];
4229 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808261"];
4230 [label="return Translate((TypeParameterSymbol)typeSymbol); 808262"];
4231 [label="Translate((TypeParameterSymbol)typeSymbol) 808263"];
4232 [label="param Translate(TypeParameterSymbol param) 808264"];
4233 [label="if (!param.IsDefinition)\n                throw new InvalidOperationException(string.Format(CSharpResources.GenericParameterDefinition, param.Name)); 808265"];
4234 [label="return param.GetCciAdapter(); 808266"];
4235 [label="return false; 808267"];
4236 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 808268"];
4237 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808269"];
4238 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808270"];
4239 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808271"];
4240 [label="Debug.Assert(!needDeclaration); 808272"];
4241 [label="if (!param.IsDefinition)\n                throw new InvalidOperationException(string.Format(CSharpResources.GenericParameterDefinition, param.Name)); 808273"];
4242 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808274"];
4243 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808275"];
4244 [label="toCheck = toCheck.ContainingType; 808276"];
4245 [label="return false; 808277"];
4246 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 808278"];
4247 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808279"];
4248 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808280"];
4249 [label="param Translate(SyntaxNode syntaxNodeOpt) 808281"];
4250 [label="param Translate(DiagnosticBag diagnostics) 808282"];
4251 [label="param Translate(bool fromImplements = false) 808283"];
4252 [label="param Translate(bool needDeclaration = false) 808284"];
4253 [label="Debug.Assert(diagnostics != null); 808285"];
4254 [label="Debug.Assert(diagnostics != null); 808286"];
4255 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808287"];
4256 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808288"];
4257 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808289"];
4258 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808290"];
4259 [label="object reference; 808291"];
4260 [label="Cci.INamedTypeReference typeRef; 808292"];
4261 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 808293"];
4262 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808294"];
4263 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808295"];
4264 [label="IsGenericType(container) 808296"];
4265 [label="param IsGenericType(NamedTypeSymbol toCheck) 808297"];
4266 [label="return false; 808298"];
4267 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808299"];
4268 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808300"];
4269 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808301"];
4270 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 808302"];
4271 [label="=> _sourceAssembly 808303"];
4272 [label="_sourceAssembly 808304"];
4273 [label="=> _metadataName 808305"];
4274 [label="_metadataName 808306"];
4275 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 808307"];
4276 [label="param MemberVisibility(Symbol symbol) 808308"];
4277 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 808309"];
4278 [label="return Cci.TypeMemberVisibility.Public; 808310"];
4279 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808311"];
4280 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808312"];
4281 [label="param Translate(SyntaxNode syntaxNodeOpt) 808313"];
4282 [label="param Translate(DiagnosticBag diagnostics) 808314"];
4283 [label="param Translate(bool fromImplements = false) 808315"];
4284 [label="param Translate(bool needDeclaration = false) 808316"];
4285 [label="Debug.Assert(diagnostics != null); 808317"];
4286 [label="Debug.Assert(diagnostics != null); 808318"];
4287 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808319"];
4288 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808320"];
4289 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808321"];
4290 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808322"];
4291 [label="object reference; 808323"];
4292 [label="Cci.INamedTypeReference typeRef; 808324"];
4293 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 808325"];
4294 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808326"];
4295 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808327"];
4296 [label="IsGenericType(container) 808328"];
4297 [label="param IsGenericType(NamedTypeSymbol toCheck) 808329"];
4298 [label="return false; 808330"];
4299 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808331"];
4300 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808332"];
4301 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808333"];
4302 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 808334"];
4303 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808335"];
4304 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808336"];
4305 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808337"];
4306 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808338"];
4307 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808339"];
4308 [label="Debug.Assert(!needDeclaration); 808340"];
4309 [label="Debug.Assert(!needDeclaration); 808341"];
4310 [label="if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    } 808342"];
4311 [label="return Cci.TypeMemberVisibility.Private; 808343"];
4312 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808344"];
4313 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808345"];
4314 [label="param Translate(SyntaxNode syntaxNodeOpt) 808346"];
4315 [label="param Translate(DiagnosticBag diagnostics) 808347"];
4316 [label="param Translate(bool fromImplements = false) 808348"];
4317 [label="param Translate(bool needDeclaration = false) 808349"];
4318 [label="Debug.Assert(diagnostics != null); 808350"];
4319 [label="Debug.Assert(diagnostics != null); 808351"];
4320 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808352"];
4321 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808353"];
4322 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808354"];
4323 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808355"];
4324 [label="object reference; 808356"];
4325 [label="Cci.INamedTypeReference typeRef; 808357"];
4326 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 808358"];
4327 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808359"];
4328 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808360"];
4329 [label="IsGenericType(container) 808361"];
4330 [label="param IsGenericType(NamedTypeSymbol toCheck) 808362"];
4331 [label="return false; 808363"];
4332 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808364"];
4333 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808365"];
4334 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808366"];
4335 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 808367"];
4336 [label="if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    } 808368"];
4337 [label="return Cci.TypeMemberVisibility.Assembly; 808369"];
4338 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808370"];
4339 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808371"];
4340 [label="param Translate(SyntaxNode syntaxNodeOpt) 808372"];
4341 [label="param Translate(DiagnosticBag diagnostics) 808373"];
4342 [label="param Translate(bool fromImplements = false) 808374"];
4343 [label="param Translate(bool needDeclaration = false) 808375"];
4344 [label="Debug.Assert(diagnostics != null); 808376"];
4345 [label="Debug.Assert(diagnostics != null); 808377"];
4346 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808378"];
4347 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808379"];
4348 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808380"];
4349 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808381"];
4350 [label="object reference; 808382"];
4351 [label="Cci.INamedTypeReference typeRef; 808383"];
4352 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 808384"];
4353 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808385"];
4354 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808386"];
4355 [label="IsGenericType(container) 808387"];
4356 [label="param IsGenericType(NamedTypeSymbol toCheck) 808388"];
4357 [label="return false; 808389"];
4358 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808390"];
4359 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808391"];
4360 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808392"];
4361 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 808393"];
4362 [label="get { return _metadataName; } 808394"];
4363 [label="return _metadataName; 808395"];
4364 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808396"];
4365 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808397"];
4366 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808398"];
4367 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808399"];
4368 [label="object reference; 808400"];
4369 [label="Cci.INamedTypeReference typeRef; 808401"];
4370 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 808402"];
4371 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808403"];
4372 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808404"];
4373 [label="IsGenericType(container) 808405"];
4374 [label="param IsGenericType(NamedTypeSymbol toCheck) 808406"];
4375 [label="return false; 808407"];
4376 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808408"];
4377 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808409"];
4378 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808410"];
4379 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 808411"];
4380 [label="GetBoundReferenceManager() 808412"];
4381 [label="GetBoundReferenceManager(); 808413"];
4382 [label="Debug.Assert(result.SpecialType == specialType); 808414"];
4383 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 808415"];
4384 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 808416"];
4385 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 808417"];
4386 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 808418"];
4387 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 808419"];
4388 [label="bool typeIsGeneric = IsGenericType(container); 808420"];
4389 [label="IsGenericType(container) 808421"];
4390 [label="param IsGenericType(NamedTypeSymbol toCheck) 808422"];
4391 [label="toCheck = toCheck.ContainingType; 808423"];
4392 [label="return false; 808424"];
4393 [label="bool typeIsGeneric = IsGenericType(container); 808425"];
4394 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 808426"];
4395 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 808427"];
4396 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 808428"];
4397 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 808429"];
4398 [label="toCheck = toCheck.ContainingType; 808430"];
4399 [label="return false; 808431"];
4400 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 808432"];
4401 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808433"];
4402 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808434"];
4403 [label="param Translate(SyntaxNode syntaxNodeOpt) 808435"];
4404 [label="param Translate(DiagnosticBag diagnostics) 808436"];
4405 [label="param Translate(bool fromImplements = false) 808437"];
4406 [label="param Translate(bool needDeclaration = false) 808438"];
4407 [label="Debug.Assert(diagnostics != null); 808439"];
4408 [label="Debug.Assert(diagnostics != null); 808440"];
4409 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808441"];
4410 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808442"];
4411 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808443"];
4412 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808444"];
4413 [label="object reference; 808445"];
4414 [label="Cci.INamedTypeReference typeRef; 808446"];
4415 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 808447"];
4416 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808448"];
4417 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808449"];
4418 [label="IsGenericType(container) 808450"];
4419 [label="param IsGenericType(NamedTypeSymbol toCheck) 808451"];
4420 [label="return false; 808452"];
4421 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808453"];
4422 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808454"];
4423 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808455"];
4424 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 808456"];
4425 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 808457"];
4426 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 808458"];
4427 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 808459"];
4428 [label="GetBoundReferenceManager() 808460"];
4429 [label="param GetBoundReferenceManager(this) 808461"];
4430 [label="GetBoundReferenceManager(); 808462"];
4431 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 808463"];
4432 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 808464"];
4433 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 808465"];
4434 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 808466"];
4435 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 808467"];
4436 [label="bool typeIsGeneric = IsGenericType(container); 808468"];
4437 [label="IsGenericType(container) 808469"];
4438 [label="param IsGenericType(NamedTypeSymbol toCheck) 808470"];
4439 [label="toCheck = toCheck.ContainingType; 808471"];
4440 [label="return false; 808472"];
4441 [label="bool typeIsGeneric = IsGenericType(container); 808473"];
4442 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 808474"];
4443 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 808475"];
4444 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 808476"];
4445 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 808477"];
4446 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808478"];
4447 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808479"];
4448 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808480"];
4449 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808481"];
4450 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808482"];
4451 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808483"];
4452 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 808484"];
4453 [label="param Translate(SyntaxNode syntaxNodeOpt) 808485"];
4454 [label="param Translate(DiagnosticBag diagnostics) 808486"];
4455 [label="param Translate(bool fromImplements = false) 808487"];
4456 [label="param Translate(bool needDeclaration = false) 808488"];
4457 [label="Debug.Assert(diagnostics != null); 808489"];
4458 [label="Debug.Assert(diagnostics != null); 808490"];
4459 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808491"];
4460 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 808492"];
4461 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 808493"];
4462 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 808494"];
4463 [label="object reference; 808495"];
4464 [label="Cci.INamedTypeReference typeRef; 808496"];
4465 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 808497"];
4466 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808498"];
4467 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808499"];
4468 [label="IsGenericType(container) 808500"];
4469 [label="param IsGenericType(NamedTypeSymbol toCheck) 808501"];
4470 [label="return false; 808502"];
4471 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808503"];
4472 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 808504"];
4473 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 808505"];
4474 [label="toCheck = toCheck.ContainingType; 808506"];
4475 [label="return false; 808507"];
4476 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 808508"];
4477 [label="toCheck = toCheck.ContainingType; 808509"];
4478 [label="Debug.Assert(symbol.IsDefinition); 808510"];
4479 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 808511"];
4480 [label="return _referenceManager; 808512"];
4481 [label="GetBoundReferenceManager(); 808513"];
4482 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 808514"];
4483 [label="param GetBoundReferenceManager(this) 808515"];
4484 [label="GetBoundReferenceManager(); 808516"];
4485 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 808517"];
4486 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 808518"];
4487 [label="param SynthesizeNullableAttributeIfNecessary(this) 808519"];
4488 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 808520"];
4489 [label="return _referenceManager; 808521"];
4490 [label="GetBoundReferenceManager(); 808522"];
4491 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 808523"];
4492 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 808524"];
4493 [label="diagnostics.AddRange(result.Diagnostics); 808525"];
4494 [label="diagnostics.AddRange(result.Diagnostics); 808526"];
4495 [label="assembly = executableStream.ToImmutable(); 808527"];
4496 [label="assembly = executableStream.ToImmutable(); 808528"];
4497 [label="if (result.Success)\n            {\n                return new EmitOutput(assembly, pdb);\n            } 808529"];
4498 [label="return new EmitOutput(assembly, pdb); 808530"];
4499 [label="return new EmitOutput(assembly, pdb); 808531"];
4500 [label="return new EmitOutput(assembly, pdb); 808532"];
4501 [label="new EmitOutput(assembly, pdb) 808533"];
4502 [label="param EmitOutput(ImmutableArray<byte> assembly) 808534"];
4503 [label="param EmitOutput(ImmutableArray<byte> pdb) 808535"];
4504 [label="param EmitOutput(this) 808536"];
4505 [label="Assembly 808537"];
4506 [label="if (pdb.IsDefault)\n            {\n                // We didn't emit a discrete PDB file, so we'll look for an embedded PDB instead.\n                using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                }\n            } 808538"];
4507 [label="using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                } 808539"];
4508 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 808540"];
4509 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 808541"];
4510 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 808542"];
4511 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 808543"];
4512 [label="using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        } 808544"];
4513 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 808545"];
4514 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 808546"];
4515 [label="pdb = readMetadata(mdReader); 808547"];
4516 [label="readMetadata(mdReader) 808548"];
4517 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 808549"];
4518 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 808550"];
4519 [label="var length = mdReader.MetadataLength; 808551"];
4520 [label="var bytes = new byte[length]; 808552"];
4521 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 808553"];
4522 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 808554"];
4523 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 808555"];
4524 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 808556"];
4525 [label="return ImmutableArray.Create(bytes); 808557"];
4526 [label="return ImmutableArray.Create(bytes); 808558"];
4527 [label="Pdb 808559"];
4528 [label="get { return this.Assembly.GetPublicSymbol(); } 808560"];
4529 [label="this.Assembly 808561"];
4530 [label="get\n            {\n                return SourceAssembly;\n            } 808562"];
4531 [label="SourceAssembly 808563"];
4532 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 808564"];
4533 [label="GetBoundReferenceManager() 808565"];
4534 [label="param GetBoundReferenceManager(this) 808566"];
4535 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 808567"];
4536 [label="return _referenceManager; 808568"];
4537 [label="GetBoundReferenceManager(); 808569"];
4538 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 808570"];
4539 [label="return this.Assembly.GetPublicSymbol(); 808571"];
4540 [label="_diagnostics = testEnvironment.GetDiagnostics(); 808572"];
4541 [label="_diagnostics 808573"];
4542 [label="EmittedAssemblyData = testEnvironment.GetMainImage(); 808574"];
4543 [label="EmittedAssemblyData 808575"];
4544 [label="EmittedAssemblyPdb = testEnvironment.GetMainPdb(); 808576"];
4545 [label="EmittedAssemblyPdb 808577"];
4546 [label="_testData = ((IInternalRuntimeEnvironment)testEnvironment).GetCompilationTestData(); 808578"];
4547 [label="_testData 808579"];
4548 [label="return _compilation.Assembly.Identity.GetDisplayName(); 808580"];
4549 [label="_compilation.Assembly 808581"];
4550 [label="get { return this.Assembly.GetPublicSymbol(); } 808582"];
4551 [label="this.Assembly 808583"];
4552 [label="SourceAssembly 808584"];
4553 [label="GetBoundReferenceManager() 808585"];
4554 [label="param GetBoundReferenceManager(this) 808586"];
4555 [label="GetBoundReferenceManager(); 808587"];
4556 [label="return _compilation.Assembly.Identity.GetDisplayName(); 808588"];
4557 [label="_allModuleData = testEnvironment.GetAllModuleData(); 808589"];
4558 [label="_allModuleData 808590"];
4559 [label="testEnvironment.Verify(peVerify); 808591"];
4560 [label="testEnvironment.Verify(peVerify); 808592"];
4561 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 808593"];
4562 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 808594"];
4563 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 808595"];
4564 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 808596"];
4565 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 808597"];
4566 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 808598"];
4567 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 808599"];
4568 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 808600"];
4569 [label="if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                } 808601"];
4570 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 808602"];
4571 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 808603"];
4572 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 808604"];
4573 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 808605"];
4574 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 808606"];
4575 [label="return verifier; 808607"];
4576 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 808608"];
4577 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 808609"];
4578 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 808610"];
4579 [label="result = verifier; 808611"];
4580 [label="CustomAssert.NotNull(result); 808612"];
4581 [label="return result; 808613"];
4582 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 808614"];
4583 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 808615"];
4584 [label="CompileAndVerify(source, expectedOutput: @'\nHello\nHello!\n'); 808616"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 11;
12 -> 1;
13 -> 1;
14 -> 12;
14 -> 13;
15 -> 14;
15 -> 13;
16 -> 13;
17 -> 15;
17 -> 16;
18 -> 16;
19 -> 17;
19 -> 18;
19 -> 16;
20 -> 16;
20 -> 1;
21 -> 1;
22 -> 1;
23 -> 20;
23 -> 22;
24 -> 21;
24 -> 22;
25 -> 21;
25 -> 22;
26 -> 21;
26 -> 22;
27 -> 21;
27 -> 22;
28 -> 21;
28 -> 22;
29 -> 21;
29 -> 22;
30 -> 21;
30 -> 22;
31 -> 21;
31 -> 22;
32 -> 21;
32 -> 22;
33 -> 21;
33 -> 22;
34 -> 21;
34 -> 22;
35 -> 21;
35 -> 22;
36 -> 21;
36 -> 22;
37 -> 21;
37 -> 22;
38 -> 21;
38 -> 22;
39 -> 10;
39 -> 22;
40 -> 22;
41 -> 31;
41 -> 40;
41 -> 22;
42 -> 41;
42 -> 22;
43 -> 42;
43 -> 34;
43 -> 22;
44 -> 23;
44 -> 22;
45 -> 24;
45 -> 22;
46 -> 43;
46 -> 22;
47 -> 35;
47 -> 22;
48 -> 37;
48 -> 22;
49 -> 22;
50 -> 49;
51 -> 50;
51 -> 22;
52 -> 22;
53 -> 22;
54 -> 44;
54 -> 53;
55 -> 45;
55 -> 53;
56 -> 46;
56 -> 53;
57 -> 47;
57 -> 53;
58 -> 48;
58 -> 53;
59 -> 51;
59 -> 53;
60 -> 52;
60 -> 53;
61 -> 52;
61 -> 53;
62 -> 54;
62 -> 53;
63 -> 58;
63 -> 53;
64 -> 55;
64 -> 53;
65 -> 53;
66 -> 63;
66 -> 65;
67 -> 64;
67 -> 65;
68 -> 66;
68 -> 65;
69 -> 65;
70 -> 68;
70 -> 69;
71 -> 70;
71 -> 69;
72 -> 71;
73 -> 0;
73 -> 72;
74 -> 73;
75 -> 74;
76 -> 74;
77 -> 0;
77 -> 76;
78 -> 77;
78 -> 75;
78 -> 74;
79 -> 78;
79 -> 72;
80 -> 65;
81 -> 67;
81 -> 80;
81 -> 65;
82 -> 79;
82 -> 81;
83 -> 56;
83 -> 53;
84 -> 57;
84 -> 53;
85 -> 59;
85 -> 53;
86 -> 60;
86 -> 53;
87 -> 61;
87 -> 53;
88 -> 53;
89 -> 62;
89 -> 88;
90 -> 82;
90 -> 88;
91 -> 83;
91 -> 88;
92 -> 84;
92 -> 88;
93 -> 85;
93 -> 88;
94 -> 86;
94 -> 88;
95 -> 87;
95 -> 88;
96 -> 89;
96 -> 88;
97 -> 90;
97 -> 88;
98 -> 91;
98 -> 88;
99 -> 92;
99 -> 88;
100 -> 93;
100 -> 88;
101 -> 94;
101 -> 88;
102 -> 95;
102 -> 88;
103 -> 88;
104 -> 103;
104 -> 88;
105 -> 88;
106 -> 96;
106 -> 105;
107 -> 97;
107 -> 105;
108 -> 98;
108 -> 105;
109 -> 99;
109 -> 105;
110 -> 100;
110 -> 105;
111 -> 101;
111 -> 105;
112 -> 102;
112 -> 105;
113 -> 104;
113 -> 105;
114 -> 109;
114 -> 105;
115 -> 111;
115 -> 105;
116 -> 105;
117 -> 114;
117 -> 116;
118 -> 115;
118 -> 116;
119 -> 106;
119 -> 116;
120 -> 119;
120 -> 19;
120 -> 116;
121 -> 120;
122 -> 118;
122 -> 120;
123 -> 117;
123 -> 120;
124 -> 120;
125 -> 121;
125 -> 124;
126 -> 122;
126 -> 124;
127 -> 123;
127 -> 124;
128 -> 121;
128 -> 124;
129 -> 124;
130 -> 127;
130 -> 129;
130 -> 124;
131 -> 0;
131 -> 130;
132 -> 125;
132 -> 124;
133 -> 0;
133 -> 124;
134 -> 133;
134 -> 128;
134 -> 124;
135 -> 124;
136 -> 132;
136 -> 134;
136 -> 135;
136 -> 0;
136 -> 124;
137 -> 136;
137 -> 124;
138 -> 131;
138 -> 124;
139 -> 126;
139 -> 124;
140 -> 124;
141 -> 137;
141 -> 138;
141 -> 139;
141 -> 140;
141 -> 136;
141 -> 0;
141 -> 124;
142 -> 124;
143 -> 141;
143 -> 142;
144 -> 142;
145 -> 142;
146 -> 143;
146 -> 141;
146 -> 145;
146 -> 142;
147 -> 144;
147 -> 142;
148 -> 142;
149 -> 146;
149 -> 141;
149 -> 145;
149 -> 147;
149 -> 148;
149 -> 144;
149 -> 142;
150 -> 142;
151 -> 150;
151 -> 144;
151 -> 142;
152 -> 144;
152 -> 142;
153 -> 142;
154 -> 152;
154 -> 153;
154 -> 144;
154 -> 151;
154 -> 142;
155 -> 143;
155 -> 142;
156 -> 155;
156 -> 121;
156 -> 120;
157 -> 121;
157 -> 105;
158 -> 105;
159 -> 108;
159 -> 158;
159 -> 105;
160 -> 0;
160 -> 105;
161 -> 113;
161 -> 105;
162 -> 110;
162 -> 157;
162 -> 107;
162 -> 108;
162 -> 105;
163 -> 162;
163 -> 105;
164 -> 105;
165 -> 163;
165 -> 164;
166 -> 0;
166 -> 164;
167 -> 166;
168 -> 105;
169 -> 42;
171 -> 169;
171 -> 170;
172 -> 171;
173 -> 0;
175 -> 173;
175 -> 174;
177 -> 175;
177 -> 176;
178 -> 177;
179 -> 162;
179 -> 121;
179 -> 156;
179 -> 141;
179 -> 78;
179 -> 0;
179 -> 42;
179 -> 75;
179 -> 105;
180 -> 105;
181 -> 179;
181 -> 180;
182 -> 179;
182 -> 180;
183 -> 179;
183 -> 180;
184 -> 179;
184 -> 180;
185 -> 181;
185 -> 180;
186 -> 184;
186 -> 180;
187 -> 182;
187 -> 180;
188 -> 183;
188 -> 180;
189 -> 180;
190 -> 180;
191 -> 185;
191 -> 190;
192 -> 186;
192 -> 190;
193 -> 187;
193 -> 190;
194 -> 188;
194 -> 190;
195 -> 189;
195 -> 190;
196 -> 189;
196 -> 190;
197 -> 189;
197 -> 190;
198 -> 189;
198 -> 190;
199 -> 190;
200 -> 192;
200 -> 199;
200 -> 190;
201 -> 198;
201 -> 190;
202 -> 194;
202 -> 190;
203 -> 191;
203 -> 190;
204 -> 192;
204 -> 190;
205 -> 202;
205 -> 190;
206 -> 195;
206 -> 190;
207 -> 196;
207 -> 190;
208 -> 197;
208 -> 190;
209 -> 198;
209 -> 190;
210 -> 190;
211 -> 0;
211 -> 190;
212 -> 192;
212 -> 202;
212 -> 190;
213 -> 190;
214 -> 211;
214 -> 213;
215 -> 212;
215 -> 213;
216 -> 212;
216 -> 213;
217 -> 211;
217 -> 213;
218 -> 209;
218 -> 213;
219 -> 210;
219 -> 213;
220 -> 210;
220 -> 213;
221 -> 214;
221 -> 213;
222 -> 215;
222 -> 213;
223 -> 216;
223 -> 213;
224 -> 217;
224 -> 213;
225 -> 218;
225 -> 213;
226 -> 213;
227 -> 226;
227 -> 221;
227 -> 222;
227 -> 223;
227 -> 224;
227 -> 225;
227 -> 0;
227 -> 202;
227 -> 213;
228 -> 226;
228 -> 213;
229 -> 219;
229 -> 226;
229 -> 213;
230 -> 190;
231 -> 203;
231 -> 230;
232 -> 204;
232 -> 230;
233 -> 205;
233 -> 230;
234 -> 206;
234 -> 230;
235 -> 207;
235 -> 230;
236 -> 208;
236 -> 230;
237 -> 209;
237 -> 230;
238 -> 210;
238 -> 230;
239 -> 210;
239 -> 230;
240 -> 210;
240 -> 230;
241 -> 210;
241 -> 230;
242 -> 210;
242 -> 230;
243 -> 210;
243 -> 230;
244 -> 231;
244 -> 230;
245 -> 232;
245 -> 230;
246 -> 233;
246 -> 230;
247 -> 234;
247 -> 230;
248 -> 235;
248 -> 230;
249 -> 236;
249 -> 230;
250 -> 237;
250 -> 230;
251 -> 238;
251 -> 230;
252 -> 239;
252 -> 230;
253 -> 240;
253 -> 230;
254 -> 240;
254 -> 227;
254 -> 230;
255 -> 254;
255 -> 227;
255 -> 228;
255 -> 229;
255 -> 230;
256 -> 241;
256 -> 230;
257 -> 242;
257 -> 230;
258 -> 230;
259 -> 244;
259 -> 258;
260 -> 245;
260 -> 258;
261 -> 246;
261 -> 258;
262 -> 247;
262 -> 258;
263 -> 248;
263 -> 258;
264 -> 249;
264 -> 258;
265 -> 250;
265 -> 258;
266 -> 251;
266 -> 258;
267 -> 252;
267 -> 258;
268 -> 253;
268 -> 258;
269 -> 255;
269 -> 258;
270 -> 256;
270 -> 258;
271 -> 257;
271 -> 258;
272 -> 243;
272 -> 258;
273 -> 259;
273 -> 258;
274 -> 261;
274 -> 258;
275 -> 269;
275 -> 258;
276 -> 265;
276 -> 258;
277 -> 270;
277 -> 258;
278 -> 271;
278 -> 258;
279 -> 258;
280 -> 279;
280 -> 273;
280 -> 274;
280 -> 275;
280 -> 276;
280 -> 277;
280 -> 278;
280 -> 202;
280 -> 255;
280 -> 258;
281 -> 279;
281 -> 258;
282 -> 279;
282 -> 258;
283 -> 279;
283 -> 258;
284 -> 279;
284 -> 258;
285 -> 279;
285 -> 258;
286 -> 279;
286 -> 258;
287 -> 279;
287 -> 258;
288 -> 279;
288 -> 258;
289 -> 279;
289 -> 258;
290 -> 279;
290 -> 258;
291 -> 279;
291 -> 258;
292 -> 279;
292 -> 258;
293 -> 279;
293 -> 258;
294 -> 279;
294 -> 258;
295 -> 279;
295 -> 258;
296 -> 279;
296 -> 258;
297 -> 279;
297 -> 258;
298 -> 279;
298 -> 258;
299 -> 279;
299 -> 258;
300 -> 279;
300 -> 258;
301 -> 279;
301 -> 258;
302 -> 279;
302 -> 258;
303 -> 279;
303 -> 258;
304 -> 279;
304 -> 258;
305 -> 279;
305 -> 258;
306 -> 279;
306 -> 258;
307 -> 258;
308 -> 307;
308 -> 279;
308 -> 258;
309 -> 279;
309 -> 258;
310 -> 309;
310 -> 280;
310 -> 281;
310 -> 282;
310 -> 283;
310 -> 284;
310 -> 285;
310 -> 286;
310 -> 287;
310 -> 288;
310 -> 289;
310 -> 290;
310 -> 291;
310 -> 292;
310 -> 293;
310 -> 294;
310 -> 295;
310 -> 296;
310 -> 297;
310 -> 298;
310 -> 299;
310 -> 300;
310 -> 301;
310 -> 302;
310 -> 303;
310 -> 304;
310 -> 305;
310 -> 306;
310 -> 308;
310 -> 307;
310 -> 258;
311 -> 310;
311 -> 279;
311 -> 258;
312 -> 260;
312 -> 279;
312 -> 258;
313 -> 279;
313 -> 258;
314 -> 258;
315 -> 258;
316 -> 313;
316 -> 315;
317 -> 314;
317 -> 315;
318 -> 317;
318 -> 315;
319 -> 317;
319 -> 315;
320 -> 317;
320 -> 315;
321 -> 316;
321 -> 317;
321 -> 315;
322 -> 314;
322 -> 279;
322 -> 258;
323 -> 279;
323 -> 310;
323 -> 258;
324 -> 323;
324 -> 310;
324 -> 311;
324 -> 312;
324 -> 322;
324 -> 321;
324 -> 319;
324 -> 320;
324 -> 258;
325 -> 324;
325 -> 279;
325 -> 258;
326 -> 279;
326 -> 324;
326 -> 258;
327 -> 326;
327 -> 324;
327 -> 325;
327 -> 258;
328 -> 327;
328 -> 279;
328 -> 258;
329 -> 279;
329 -> 327;
329 -> 258;
330 -> 329;
330 -> 327;
330 -> 328;
330 -> 258;
331 -> 330;
331 -> 279;
331 -> 258;
332 -> 279;
332 -> 330;
332 -> 258;
333 -> 332;
333 -> 330;
333 -> 331;
333 -> 258;
334 -> 333;
334 -> 279;
334 -> 258;
335 -> 279;
335 -> 258;
336 -> 335;
336 -> 333;
336 -> 334;
336 -> 258;
337 -> 336;
337 -> 279;
337 -> 258;
338 -> 268;
338 -> 336;
338 -> 258;
339 -> 258;
340 -> 338;
340 -> 339;
341 -> 339;
342 -> 340;
342 -> 339;
343 -> 342;
343 -> 336;
343 -> 337;
343 -> 339;
344 -> 0;
344 -> 339;
345 -> 344;
345 -> 341;
345 -> 339;
346 -> 345;
346 -> 258;
347 -> 346;
347 -> 279;
347 -> 258;
348 -> 265;
348 -> 258;
349 -> 348;
350 -> 262;
350 -> 349;
350 -> 348;
351 -> 263;
351 -> 349;
351 -> 348;
352 -> 350;
352 -> 351;
352 -> 348;
353 -> 264;
353 -> 349;
353 -> 348;
354 -> 352;
354 -> 353;
354 -> 348;
355 -> 267;
355 -> 258;
356 -> 279;
356 -> 336;
356 -> 337;
356 -> 347;
356 -> 355;
357 -> 355;
358 -> 279;
358 -> 357;
359 -> 358;
359 -> 356;
359 -> 357;
360 -> 266;
360 -> 355;
361 -> 356;
361 -> 359;
361 -> 360;
361 -> 355;
362 -> 361;
362 -> 279;
362 -> 355;
363 -> 268;
363 -> 279;
363 -> 258;
364 -> 279;
364 -> 361;
364 -> 258;
365 -> 258;
366 -> 279;
366 -> 361;
366 -> 365;
366 -> 258;
367 -> 190;
368 -> 193;
368 -> 367;
368 -> 190;
369 -> 193;
369 -> 368;
370 -> 368;
371 -> 369;
371 -> 370;
372 -> 210;
372 -> 370;
373 -> 370;
374 -> 371;
374 -> 373;
374 -> 370;
375 -> 371;
375 -> 370;
376 -> 375;
376 -> 361;
376 -> 362;
376 -> 363;
376 -> 370;
377 -> 370;
378 -> 372;
378 -> 376;
378 -> 370;
379 -> 377;
379 -> 370;
380 -> 378;
380 -> 376;
380 -> 370;
381 -> 379;
381 -> 380;
381 -> 377;
381 -> 376;
381 -> 370;
382 -> 370;
383 -> 370;
384 -> 371;
384 -> 370;
385 -> 384;
385 -> 381;
385 -> 370;
386 -> 385;
387 -> 385;
388 -> 385;
389 -> 372;
389 -> 388;
389 -> 385;
390 -> 385;
391 -> 377;
391 -> 390;
391 -> 388;
391 -> 385;
392 -> 382;
392 -> 385;
392 -> 391;
393 -> 383;
393 -> 385;
394 -> 377;
394 -> 391;
394 -> 370;
395 -> 372;
395 -> 394;
395 -> 370;
396 -> 371;
396 -> 370;
397 -> 370;
398 -> 396;
398 -> 397;
399 -> 378;
399 -> 397;
400 -> 399;
400 -> 394;
400 -> 397;
401 -> 399;
401 -> 394;
401 -> 397;
402 -> 399;
402 -> 394;
402 -> 397;
403 -> 399;
403 -> 394;
403 -> 397;
404 -> 399;
404 -> 394;
404 -> 397;
405 -> 398;
405 -> 397;
406 -> 399;
406 -> 394;
406 -> 405;
406 -> 397;
407 -> 397;
408 -> 404;
408 -> 407;
408 -> 397;
409 -> 406;
409 -> 408;
410 -> 408;
411 -> 409;
411 -> 410;
412 -> 399;
412 -> 410;
413 -> 411;
413 -> 410;
414 -> 412;
414 -> 406;
414 -> 410;
415 -> 410;
416 -> 410;
417 -> 413;
417 -> 416;
418 -> 414;
418 -> 416;
419 -> 414;
419 -> 416;
420 -> 414;
420 -> 416;
421 -> 414;
421 -> 416;
422 -> 415;
422 -> 416;
423 -> 415;
423 -> 416;
424 -> 416;
424 -> 417;
424 -> 418;
424 -> 419;
424 -> 420;
424 -> 421;
424 -> 406;
425 -> 415;
425 -> 408;
426 -> 425;
426 -> 370;
427 -> 372;
427 -> 424;
427 -> 370;
428 -> 392;
428 -> 370;
429 -> 426;
429 -> 370;
430 -> 370;
431 -> 427;
431 -> 430;
432 -> 428;
432 -> 430;
433 -> 429;
433 -> 430;
434 -> 372;
434 -> 430;
435 -> 434;
435 -> 424;
435 -> 430;
436 -> 430;
437 -> 434;
437 -> 436;
438 -> 437;
438 -> 424;
438 -> 436;
439 -> 438;
439 -> 436;
440 -> 439;
440 -> 430;
441 -> 434;
441 -> 424;
441 -> 416;
441 -> 422;
441 -> 430;
442 -> 430;
443 -> 441;
443 -> 442;
444 -> 443;
444 -> 441;
444 -> 442;
445 -> 430;
446 -> 444;
446 -> 445;
447 -> 431;
447 -> 430;
448 -> 432;
448 -> 430;
449 -> 433;
449 -> 430;
450 -> 430;
451 -> 430;
452 -> 435;
452 -> 451;
453 -> 435;
453 -> 451;
454 -> 435;
454 -> 451;
455 -> 440;
455 -> 451;
456 -> 444;
456 -> 451;
457 -> 446;
457 -> 451;
458 -> 446;
458 -> 451;
459 -> 447;
459 -> 451;
460 -> 448;
460 -> 451;
461 -> 449;
461 -> 451;
462 -> 446;
462 -> 451;
463 -> 450;
463 -> 451;
464 -> 450;
464 -> 451;
465 -> 455;
465 -> 451;
466 -> 456;
466 -> 451;
467 -> 457;
467 -> 451;
468 -> 461;
468 -> 446;
468 -> 451;
469 -> 463;
469 -> 451;
470 -> 451;
471 -> 465;
471 -> 470;
472 -> 466;
472 -> 470;
473 -> 467;
473 -> 470;
474 -> 469;
474 -> 470;
475 -> 464;
475 -> 470;
476 -> 474;
476 -> 470;
477 -> 470;
478 -> 477;
478 -> 470;
479 -> 477;
479 -> 470;
480 -> 477;
480 -> 470;
481 -> 477;
481 -> 470;
482 -> 477;
482 -> 470;
483 -> 477;
483 -> 470;
484 -> 477;
484 -> 470;
485 -> 477;
485 -> 470;
486 -> 477;
486 -> 470;
487 -> 477;
487 -> 470;
488 -> 477;
488 -> 470;
489 -> 477;
489 -> 470;
490 -> 477;
490 -> 470;
491 -> 477;
491 -> 470;
492 -> 477;
492 -> 470;
493 -> 477;
493 -> 470;
494 -> 477;
494 -> 470;
495 -> 477;
495 -> 470;
496 -> 477;
496 -> 470;
497 -> 477;
497 -> 470;
498 -> 477;
498 -> 470;
499 -> 477;
499 -> 470;
500 -> 477;
500 -> 470;
501 -> 477;
501 -> 470;
502 -> 477;
502 -> 470;
503 -> 477;
503 -> 470;
504 -> 470;
505 -> 504;
505 -> 477;
505 -> 470;
506 -> 477;
506 -> 470;
507 -> 477;
507 -> 470;
508 -> 470;
509 -> 470;
510 -> 507;
510 -> 509;
511 -> 508;
511 -> 509;
512 -> 511;
512 -> 509;
513 -> 511;
513 -> 509;
514 -> 511;
514 -> 509;
515 -> 510;
515 -> 511;
515 -> 509;
516 -> 508;
516 -> 477;
516 -> 470;
517 -> 477;
517 -> 470;
518 -> 470;
519 -> 468;
519 -> 518;
520 -> 518;
521 -> 519;
521 -> 518;
522 -> 521;
522 -> 468;
523 -> 521;
524 -> 522;
524 -> 523;
525 -> 458;
525 -> 470;
526 -> 525;
527 -> 471;
527 -> 526;
527 -> 525;
528 -> 472;
528 -> 526;
528 -> 525;
529 -> 527;
529 -> 528;
529 -> 525;
530 -> 473;
530 -> 526;
530 -> 525;
531 -> 529;
531 -> 530;
531 -> 525;
532 -> 459;
532 -> 460;
533 -> 477;
533 -> 460;
534 -> 459;
534 -> 533;
534 -> 468;
534 -> 524;
534 -> 460;
535 -> 459;
535 -> 477;
535 -> 460;
536 -> 477;
536 -> 534;
536 -> 470;
537 -> 470;
538 -> 477;
538 -> 534;
538 -> 537;
538 -> 470;
539 -> 450;
539 -> 370;
540 -> 539;
540 -> 368;
541 -> 540;
541 -> 534;
541 -> 190;
542 -> 540;
542 -> 190;
543 -> 179;
543 -> 542;
543 -> 534;
543 -> 535;
543 -> 461;
543 -> 105;
544 -> 543;
544 -> 105;
545 -> 105;
546 -> 544;
546 -> 545;
547 -> 545;
548 -> 546;
548 -> 547;
549 -> 547;
550 -> 548;
550 -> 543;
550 -> 549;
551 -> 549;
552 -> 550;
552 -> 543;
552 -> 551;
552 -> 549;
553 -> 550;
553 -> 543;
553 -> 552;
554 -> 552;
555 -> 553;
555 -> 554;
556 -> 553;
556 -> 554;
557 -> 553;
557 -> 554;
558 -> 553;
558 -> 554;
559 -> 553;
559 -> 554;
560 -> 554;
561 -> 554;
562 -> 554;
563 -> 554;
564 -> 554;
565 -> 0;
565 -> 554;
566 -> 555;
566 -> 554;
567 -> 560;
567 -> 566;
568 -> 566;
569 -> 556;
569 -> 566;
570 -> 557;
570 -> 566;
571 -> 558;
571 -> 566;
572 -> 559;
572 -> 566;
573 -> 561;
573 -> 566;
574 -> 562;
574 -> 566;
575 -> 563;
575 -> 566;
576 -> 564;
576 -> 566;
577 -> 565;
577 -> 566;
578 -> 566;
579 -> 567;
579 -> 578;
580 -> 568;
580 -> 578;
581 -> 569;
581 -> 578;
582 -> 570;
582 -> 578;
583 -> 571;
583 -> 578;
584 -> 572;
584 -> 578;
585 -> 573;
585 -> 578;
586 -> 574;
586 -> 578;
587 -> 575;
587 -> 578;
588 -> 576;
588 -> 578;
589 -> 577;
589 -> 578;
590 -> 580;
590 -> 543;
590 -> 578;
591 -> 590;
591 -> 0;
591 -> 578;
592 -> 580;
592 -> 578;
593 -> 581;
593 -> 578;
594 -> 584;
594 -> 578;
595 -> 588;
595 -> 578;
596 -> 589;
596 -> 578;
597 -> 578;
598 -> 592;
598 -> 597;
599 -> 593;
599 -> 597;
600 -> 594;
600 -> 597;
601 -> 595;
601 -> 597;
602 -> 596;
602 -> 597;
603 -> 598;
603 -> 599;
603 -> 600;
603 -> 597;
604 -> 598;
604 -> 597;
605 -> 603;
605 -> 597;
606 -> 601;
606 -> 604;
606 -> 605;
606 -> 564;
606 -> 603;
606 -> 597;
607 -> 603;
607 -> 597;
608 -> 602;
608 -> 607;
608 -> 0;
608 -> 606;
608 -> 597;
609 -> 578;
610 -> 580;
610 -> 578;
611 -> 579;
611 -> 610;
611 -> 560;
611 -> 608;
611 -> 578;
612 -> 580;
612 -> 578;
613 -> 585;
613 -> 561;
613 -> 578;
614 -> 585;
614 -> 612;
614 -> 613;
614 -> 561;
614 -> 611;
614 -> 578;
615 -> 560;
615 -> 614;
615 -> 554;
616 -> 561;
616 -> 614;
616 -> 554;
617 -> 562;
617 -> 554;
618 -> 563;
618 -> 554;
619 -> 608;
619 -> 554;
620 -> 554;
621 -> 554;
622 -> 615;
622 -> 621;
623 -> 616;
623 -> 621;
624 -> 617;
624 -> 621;
625 -> 618;
625 -> 621;
626 -> 616;
626 -> 621;
627 -> 619;
627 -> 621;
628 -> 620;
628 -> 621;
629 -> 628;
629 -> 621;
630 -> 628;
630 -> 621;
631 -> 628;
631 -> 621;
632 -> 628;
632 -> 621;
633 -> 628;
633 -> 621;
634 -> 622;
634 -> 621;
635 -> 622;
635 -> 615;
635 -> 621;
636 -> 622;
636 -> 621;
637 -> 626;
637 -> 634;
637 -> 621;
638 -> 0;
638 -> 621;
639 -> 622;
639 -> 628;
639 -> 621;
640 -> 623;
640 -> 628;
640 -> 621;
641 -> 624;
641 -> 628;
641 -> 621;
642 -> 625;
642 -> 628;
642 -> 621;
643 -> 626;
643 -> 628;
643 -> 621;
644 -> 627;
644 -> 628;
644 -> 621;
645 -> 620;
645 -> 552;
646 -> 552;
647 -> 553;
647 -> 645;
647 -> 646;
647 -> 640;
647 -> 641;
647 -> 642;
647 -> 643;
647 -> 644;
647 -> 639;
647 -> 637;
647 -> 615;
647 -> 617;
647 -> 618;
647 -> 552;
648 -> 550;
648 -> 647;
648 -> 549;
649 -> 648;
649 -> 547;
650 -> 649;
650 -> 545;
651 -> 650;
651 -> 647;
651 -> 545;
652 -> 545;
653 -> 650;
653 -> 652;
653 -> 647;
653 -> 545;
654 -> 0;
654 -> 545;
655 -> 653;
655 -> 654;
655 -> 545;
656 -> 112;
656 -> 655;
656 -> 105;
657 -> 543;
657 -> 105;
658 -> 657;
658 -> 22;
659 -> 25;
659 -> 22;
660 -> 26;
660 -> 22;
661 -> 27;
661 -> 22;
662 -> 28;
662 -> 22;
663 -> 29;
663 -> 22;
664 -> 30;
664 -> 22;
665 -> 31;
665 -> 22;
666 -> 32;
666 -> 22;
667 -> 33;
667 -> 22;
668 -> 36;
668 -> 22;
669 -> 38;
669 -> 22;
670 -> 22;
671 -> 658;
671 -> 670;
672 -> 659;
672 -> 670;
673 -> 660;
673 -> 670;
674 -> 661;
674 -> 670;
675 -> 662;
675 -> 670;
676 -> 663;
676 -> 670;
677 -> 664;
677 -> 670;
678 -> 665;
678 -> 670;
679 -> 666;
679 -> 670;
680 -> 667;
680 -> 670;
681 -> 668;
681 -> 670;
682 -> 669;
682 -> 670;
683 -> 39;
683 -> 670;
684 -> 671;
684 -> 670;
685 -> 672;
685 -> 670;
686 -> 673;
686 -> 670;
687 -> 674;
687 -> 670;
688 -> 670;
689 -> 687;
689 -> 688;
690 -> 683;
690 -> 688;
691 -> 688;
692 -> 689;
692 -> 691;
692 -> 688;
693 -> 692;
694 -> 675;
694 -> 670;
695 -> 676;
695 -> 670;
696 -> 670;
697 -> 695;
697 -> 696;
698 -> 683;
698 -> 696;
699 -> 696;
700 -> 697;
700 -> 699;
700 -> 696;
701 -> 700;
702 -> 677;
702 -> 670;
703 -> 678;
703 -> 670;
704 -> 679;
704 -> 670;
705 -> 680;
705 -> 670;
706 -> 681;
706 -> 670;
707 -> 682;
707 -> 670;
708 -> 670;
709 -> 684;
709 -> 708;
710 -> 685;
710 -> 708;
711 -> 686;
711 -> 708;
712 -> 693;
712 -> 708;
713 -> 694;
713 -> 708;
714 -> 701;
714 -> 708;
715 -> 702;
715 -> 708;
716 -> 703;
716 -> 708;
717 -> 704;
717 -> 708;
718 -> 705;
718 -> 708;
719 -> 706;
719 -> 708;
720 -> 707;
720 -> 708;
721 -> 683;
721 -> 708;
722 -> 709;
722 -> 708;
723 -> 708;
724 -> 716;
724 -> 723;
724 -> 708;
725 -> 709;
725 -> 655;
725 -> 708;
726 -> 708;
727 -> 725;
727 -> 726;
728 -> 727;
728 -> 725;
728 -> 726;
729 -> 724;
729 -> 728;
729 -> 708;
730 -> 708;
731 -> 712;
731 -> 730;
731 -> 708;
732 -> 708;
733 -> 709;
733 -> 708;
734 -> 711;
734 -> 708;
735 -> 710;
735 -> 708;
736 -> 715;
736 -> 708;
737 -> 716;
737 -> 708;
738 -> 717;
738 -> 708;
739 -> 708;
740 -> 739;
740 -> 718;
740 -> 708;
741 -> 713;
741 -> 708;
742 -> 714;
742 -> 708;
743 -> 719;
743 -> 708;
744 -> 720;
744 -> 708;
745 -> 708;
746 -> 733;
746 -> 745;
747 -> 734;
747 -> 745;
748 -> 735;
748 -> 745;
749 -> 736;
749 -> 745;
750 -> 737;
750 -> 745;
751 -> 738;
751 -> 745;
752 -> 740;
752 -> 745;
753 -> 741;
753 -> 745;
754 -> 742;
754 -> 745;
755 -> 743;
755 -> 745;
756 -> 744;
756 -> 745;
757 -> 721;
757 -> 745;
758 -> 746;
758 -> 745;
759 -> 757;
759 -> 9;
759 -> 745;
760 -> 747;
760 -> 745;
761 -> 745;
762 -> 745;
763 -> 758;
763 -> 762;
764 -> 759;
764 -> 762;
765 -> 760;
765 -> 762;
766 -> 761;
766 -> 762;
767 -> 766;
767 -> 762;
768 -> 766;
768 -> 762;
769 -> 766;
769 -> 762;
770 -> 766;
770 -> 762;
771 -> 766;
771 -> 762;
772 -> 766;
772 -> 762;
773 -> 763;
773 -> 766;
773 -> 762;
774 -> 765;
774 -> 766;
774 -> 762;
775 -> 764;
775 -> 766;
775 -> 762;
776 -> 750;
776 -> 745;
777 -> 751;
777 -> 745;
778 -> 752;
778 -> 745;
779 -> 748;
779 -> 745;
780 -> 755;
780 -> 745;
781 -> 756;
781 -> 745;
782 -> 749;
782 -> 745;
783 -> 745;
784 -> 776;
784 -> 783;
785 -> 777;
785 -> 783;
786 -> 778;
786 -> 783;
787 -> 779;
787 -> 783;
788 -> 780;
788 -> 783;
789 -> 781;
789 -> 783;
790 -> 782;
790 -> 783;
791 -> 761;
791 -> 783;
792 -> 0;
793 -> 792;
794 -> 793;
795 -> 791;
795 -> 774;
795 -> 783;
796 -> 783;
797 -> 795;
797 -> 796;
798 -> 797;
798 -> 796;
799 -> 794;
799 -> 793;
799 -> 798;
799 -> 796;
800 -> 799;
800 -> 783;
801 -> 787;
801 -> 783;
802 -> 788;
802 -> 783;
803 -> 783;
804 -> 800;
804 -> 803;
805 -> 801;
805 -> 803;
806 -> 802;
806 -> 803;
807 -> 791;
807 -> 803;
809 -> 807;
809 -> 773;
809 -> 803;
810 -> 805;
810 -> 803;
811 -> 806;
811 -> 803;
812 -> 803;
813 -> 809;
813 -> 810;
813 -> 811;
813 -> 812;
813 -> 804;
813 -> 728;
813 -> 799;
813 -> 803;
814 -> 813;
814 -> 812;
815 -> 813;
815 -> 812;
816 -> 813;
816 -> 812;
817 -> 813;
817 -> 812;
818 -> 813;
818 -> 812;
819 -> 813;
819 -> 812;
820 -> 814;
820 -> 812;
821 -> 812;
822 -> 820;
822 -> 821;
823 -> 821;
824 -> 822;
824 -> 821;
825 -> 821;
826 -> 824;
826 -> 825;
827 -> 825;
828 -> 826;
828 -> 813;
828 -> 825;
829 -> 825;
830 -> 828;
830 -> 829;
831 -> 825;
832 -> 830;
832 -> 831;
832 -> 825;
833 -> 826;
833 -> 830;
833 -> 825;
834 -> 825;
835 -> 833;
835 -> 834;
836 -> 834;
837 -> 835;
837 -> 836;
838 -> 837;
838 -> 833;
838 -> 836;
839 -> 837;
839 -> 838;
840 -> 838;
841 -> 839;
841 -> 840;
842 -> 840;
843 -> 841;
843 -> 842;
844 -> 842;
845 -> 843;
845 -> 839;
845 -> 844;
846 -> 845;
846 -> 842;
847 -> 846;
847 -> 840;
848 -> 839;
848 -> 840;
849 -> 840;
850 -> 837;
850 -> 847;
850 -> 838;
851 -> 837;
851 -> 847;
851 -> 836;
852 -> 851;
852 -> 834;
853 -> 827;
853 -> 825;
854 -> 853;
854 -> 821;
855 -> 821;
856 -> 854;
856 -> 855;
856 -> 821;
857 -> 823;
857 -> 821;
858 -> 857;
858 -> 812;
859 -> 0;
859 -> 812;
860 -> 858;
860 -> 812;
861 -> 812;
862 -> 814;
862 -> 861;
862 -> 812;
863 -> 858;
863 -> 812;
864 -> 861;
864 -> 863;
864 -> 862;
864 -> 823;
864 -> 852;
864 -> 812;
865 -> 864;
866 -> 859;
866 -> 864;
867 -> 816;
867 -> 864;
868 -> 817;
868 -> 864;
869 -> 864;
870 -> 865;
870 -> 869;
871 -> 866;
871 -> 869;
872 -> 867;
872 -> 869;
873 -> 868;
873 -> 869;
874 -> 870;
874 -> 852;
874 -> 823;
874 -> 861;
874 -> 862;
874 -> 864;
874 -> 869;
875 -> 874;
876 -> 874;
877 -> 876;
877 -> 852;
877 -> 864;
877 -> 861;
877 -> 862;
877 -> 823;
877 -> 874;
878 -> 876;
878 -> 877;
878 -> 0;
878 -> 874;
879 -> 878;
879 -> 874;
880 -> 877;
880 -> 879;
881 -> 880;
881 -> 879;
882 -> 874;
883 -> 881;
883 -> 882;
883 -> 880;
883 -> 874;
884 -> 871;
884 -> 883;
884 -> 859;
884 -> 0;
884 -> 874;
885 -> 877;
885 -> 874;
886 -> 874;
887 -> 885;
887 -> 886;
888 -> 887;
888 -> 883;
888 -> 0;
888 -> 886;
889 -> 888;
889 -> 886;
890 -> 889;
891 -> 889;
892 -> 878;
892 -> 889;
893 -> 892;
894 -> 881;
894 -> 893;
894 -> 890;
894 -> 892;
895 -> 871;
895 -> 894;
895 -> 884;
895 -> 892;
896 -> 881;
896 -> 892;
897 -> 0;
897 -> 892;
898 -> 890;
898 -> 892;
899 -> 892;
900 -> 896;
900 -> 897;
900 -> 898;
900 -> 899;
900 -> 894;
900 -> 890;
900 -> 892;
901 -> 900;
901 -> 889;
902 -> 872;
902 -> 900;
902 -> 901;
902 -> 889;
903 -> 889;
904 -> 902;
905 -> 871;
905 -> 902;
905 -> 895;
906 -> 902;
907 -> 902;
908 -> 869;
909 -> 814;
909 -> 812;
910 -> 815;
910 -> 812;
911 -> 817;
911 -> 812;
912 -> 818;
912 -> 812;
913 -> 819;
913 -> 812;
914 -> 812;
915 -> 909;
915 -> 914;
916 -> 910;
916 -> 914;
917 -> 911;
917 -> 914;
918 -> 912;
918 -> 914;
919 -> 913;
919 -> 914;
920 -> 914;
921 -> 919;
921 -> 920;
921 -> 914;
922 -> 0;
922 -> 921;
923 -> 914;
924 -> 914;
925 -> 914;
926 -> 922;
926 -> 0;
926 -> 914;
927 -> 926;
927 -> 914;
928 -> 915;
928 -> 902;
928 -> 914;
929 -> 914;
930 -> 928;
930 -> 929;
931 -> 929;
932 -> 930;
932 -> 931;
933 -> 931;
934 -> 933;
935 -> 932;
935 -> 929;
936 -> 914;
937 -> 914;
938 -> 923;
938 -> 914;
939 -> 914;
940 -> 927;
940 -> 914;
941 -> 916;
941 -> 914;
942 -> 922;
942 -> 914;
943 -> 935;
943 -> 914;
944 -> 918;
944 -> 914;
945 -> 938;
945 -> 939;
945 -> 940;
945 -> 941;
945 -> 942;
945 -> 943;
945 -> 944;
945 -> 915;
945 -> 923;
945 -> 935;
945 -> 922;
945 -> 0;
945 -> 914;
946 -> 945;
946 -> 939;
947 -> 946;
947 -> 945;
947 -> 939;
948 -> 945;
948 -> 939;
949 -> 945;
949 -> 939;
950 -> 945;
950 -> 939;
951 -> 945;
951 -> 939;
952 -> 945;
952 -> 939;
953 -> 945;
953 -> 939;
954 -> 945;
954 -> 939;
955 -> 945;
955 -> 939;
956 -> 945;
956 -> 939;
957 -> 956;
957 -> 947;
957 -> 939;
958 -> 948;
958 -> 939;
959 -> 954;
959 -> 939;
960 -> 939;
961 -> 958;
961 -> 960;
962 -> 959;
962 -> 960;
963 -> 956;
963 -> 960;
964 -> 961;
964 -> 960;
965 -> 960;
966 -> 964;
966 -> 965;
967 -> 963;
967 -> 965;
968 -> 965;
969 -> 967;
969 -> 968;
970 -> 968;
971 -> 969;
971 -> 970;
972 -> 970;
973 -> 971;
973 -> 972;
974 -> 973;
974 -> 947;
974 -> 972;
975 -> 973;
975 -> 947;
975 -> 972;
976 -> 975;
976 -> 970;
977 -> 971;
977 -> 947;
977 -> 970;
978 -> 971;
978 -> 977;
978 -> 970;
979 -> 978;
979 -> 968;
980 -> 979;
980 -> 965;
981 -> 980;
981 -> 965;
982 -> 980;
982 -> 977;
982 -> 981;
983 -> 982;
983 -> 960;
984 -> 960;
985 -> 983;
985 -> 984;
985 -> 960;
986 -> 983;
986 -> 985;
987 -> 986;
987 -> 939;
988 -> 939;
989 -> 987;
989 -> 988;
989 -> 939;
990 -> 948;
990 -> 939;
991 -> 987;
991 -> 939;
992 -> 939;
993 -> 990;
993 -> 991;
993 -> 992;
993 -> 956;
993 -> 977;
993 -> 939;
994 -> 993;
994 -> 992;
995 -> 992;
996 -> 994;
996 -> 995;
997 -> 995;
998 -> 996;
998 -> 997;
999 -> 998;
999 -> 995;
1000 -> 996;
1000 -> 992;
1001 -> 992;
1002 -> 1000;
1002 -> 1001;
1003 -> 1000;
1003 -> 1001;
1004 -> 1001;
1005 -> 1003;
1005 -> 1004;
1006 -> 1004;
1007 -> 1006;
1008 -> 1005;
1008 -> 1001;
1009 -> 1003;
1009 -> 1001;
1010 -> 1001;
1011 -> 1010;
1012 -> 1011;
1013 -> 993;
1013 -> 992;
1014 -> 992;
1015 -> 1013;
1015 -> 1014;
1016 -> 1014;
1017 -> 1015;
1017 -> 1016;
1018 -> 1017;
1018 -> 1008;
1018 -> 1016;
1019 -> 1017;
1019 -> 1008;
1019 -> 1016;
1020 -> 1019;
1020 -> 1014;
1021 -> 1015;
1021 -> 1008;
1021 -> 1014;
1022 -> 1021;
1022 -> 992;
1023 -> 992;
1024 -> 1022;
1024 -> 1023;
1025 -> 993;
1025 -> 992;
1026 -> 992;
1027 -> 993;
1027 -> 1026;
1027 -> 1024;
1027 -> 939;
1028 -> 939;
1029 -> 952;
1029 -> 1028;
1029 -> 939;
1030 -> 1029;
1031 -> 939;
1032 -> 956;
1032 -> 1027;
1032 -> 939;
1033 -> 956;
1033 -> 1027;
1033 -> 1032;
1034 -> 1033;
1034 -> 1032;
1035 -> 956;
1035 -> 1027;
1035 -> 1034;
1036 -> 1032;
1037 -> 1036;
1038 -> 1037;
1038 -> 1036;
1039 -> 1036;
1039 -> 1027;
1039 -> 1035;
1040 -> 1039;
1040 -> 1032;
1041 -> 948;
1041 -> 1032;
1042 -> 1035;
1042 -> 1032;
1043 -> 1027;
1043 -> 1032;
1044 -> 1030;
1044 -> 1032;
1045 -> 1032;
1046 -> 1032;
1047 -> 1040;
1047 -> 1046;
1048 -> 1041;
1048 -> 1046;
1049 -> 1042;
1049 -> 1046;
1050 -> 1043;
1050 -> 1046;
1051 -> 1044;
1051 -> 1046;
1052 -> 1045;
1052 -> 1046;
1053 -> 1047;
1053 -> 1046;
1054 -> 1048;
1054 -> 1046;
1055 -> 1049;
1055 -> 1046;
1056 -> 1050;
1056 -> 1046;
1057 -> 1051;
1057 -> 1046;
1058 -> 0;
1058 -> 1046;
1059 -> 1046;
1060 -> 1053;
1060 -> 1059;
1061 -> 1054;
1061 -> 1059;
1062 -> 1055;
1062 -> 1059;
1063 -> 1056;
1063 -> 1059;
1064 -> 1057;
1064 -> 1059;
1065 -> 1058;
1065 -> 1059;
1066 -> 1052;
1066 -> 1059;
1067 -> 1059;
1068 -> 1060;
1068 -> 1039;
1068 -> 1067;
1068 -> 1059;
1069 -> 1061;
1069 -> 1059;
1070 -> 1062;
1070 -> 1059;
1071 -> 1063;
1071 -> 1059;
1072 -> 1064;
1072 -> 1059;
1073 -> 1059;
1074 -> 1068;
1074 -> 1073;
1075 -> 1069;
1075 -> 1073;
1076 -> 1070;
1076 -> 1073;
1077 -> 1071;
1077 -> 1073;
1078 -> 1072;
1078 -> 1073;
1079 -> 1066;
1079 -> 1073;
1080 -> 1074;
1080 -> 1068;
1080 -> 1073;
1081 -> 1074;
1081 -> 1073;
1082 -> 1077;
1082 -> 1073;
1083 -> 1078;
1083 -> 1073;
1084 -> 1076;
1084 -> 1073;
1085 -> 1075;
1085 -> 1073;
1086 -> 1073;
1087 -> 1086;
1088 -> 1073;
1089 -> 1088;
1089 -> 1080;
1089 -> 1081;
1089 -> 1082;
1089 -> 1083;
1089 -> 1084;
1089 -> 1085;
1089 -> 1086;
1089 -> 1068;
1089 -> 1030;
1089 -> 1087;
1089 -> 1073;
1090 -> 1089;
1090 -> 1088;
1091 -> 1088;
1092 -> 1089;
1092 -> 1091;
1092 -> 1073;
1093 -> 1073;
1094 -> 1093;
1094 -> 1088;
1094 -> 1073;
1095 -> 0;
1095 -> 1073;
1096 -> 1095;
1096 -> 0;
1096 -> 1073;
1097 -> 1096;
1097 -> 1088;
1097 -> 1073;
1098 -> 1073;
1099 -> 1098;
1099 -> 1088;
1099 -> 1073;
1100 -> 1088;
1100 -> 1073;
1101 -> 1088;
1101 -> 1073;
1102 -> 1088;
1102 -> 1073;
1103 -> 1088;
1103 -> 1073;
1104 -> 1088;
1104 -> 1073;
1105 -> 1074;
1105 -> 1092;
1105 -> 1073;
1106 -> 1105;
1106 -> 0;
1106 -> 1073;
1107 -> 1106;
1107 -> 1073;
1108 -> 1107;
1108 -> 1088;
1108 -> 1073;
1109 -> 1088;
1109 -> 1092;
1109 -> 1094;
1109 -> 1073;
1110 -> 1074;
1110 -> 1073;
1111 -> 1088;
1111 -> 1073;
1112 -> 1109;
1112 -> 1110;
1112 -> 1111;
1112 -> 1092;
1112 -> 1094;
1112 -> 1097;
1112 -> 1099;
1112 -> 1100;
1112 -> 1101;
1112 -> 1108;
1112 -> 1102;
1112 -> 1103;
1112 -> 1104;
1112 -> 1093;
1112 -> 1096;
1112 -> 1098;
1112 -> 1073;
1113 -> 1074;
1113 -> 1112;
1113 -> 1073;
1114 -> 1066;
1114 -> 1059;
1115 -> 1066;
1115 -> 1059;
1116 -> 1066;
1116 -> 1059;
1117 -> 1066;
1117 -> 1059;
1118 -> 1066;
1118 -> 1059;
1119 -> 1066;
1119 -> 1059;
1120 -> 1066;
1120 -> 1059;
1121 -> 1066;
1121 -> 1059;
1122 -> 1066;
1122 -> 1059;
1123 -> 1066;
1123 -> 1059;
1124 -> 1060;
1124 -> 1059;
1125 -> 1060;
1125 -> 1066;
1125 -> 1059;
1126 -> 1065;
1126 -> 1059;
1127 -> 1126;
1127 -> 1066;
1127 -> 1059;
1128 -> 1059;
1129 -> 1061;
1129 -> 1112;
1129 -> 1128;
1129 -> 1059;
1130 -> 1129;
1130 -> 1059;
1131 -> 1060;
1131 -> 1112;
1131 -> 1130;
1132 -> 1060;
1132 -> 1112;
1132 -> 1131;
1132 -> 1066;
1132 -> 1059;
1133 -> 1066;
1133 -> 1112;
1133 -> 1059;
1134 -> 1060;
1134 -> 1059;
1135 -> 1066;
1135 -> 1059;
1136 -> 1133;
1136 -> 1134;
1136 -> 1135;
1136 -> 1112;
1136 -> 1114;
1136 -> 1125;
1136 -> 1115;
1136 -> 1116;
1136 -> 1117;
1136 -> 1118;
1136 -> 1119;
1136 -> 1120;
1136 -> 1121;
1136 -> 1122;
1136 -> 1123;
1136 -> 1132;
1136 -> 1127;
1136 -> 1131;
1136 -> 1126;
1136 -> 1059;
1137 -> 939;
1138 -> 949;
1138 -> 1137;
1138 -> 939;
1139 -> 950;
1139 -> 1045;
1139 -> 939;
1140 -> 939;
1141 -> 951;
1141 -> 1140;
1141 -> 939;
1142 -> 951;
1142 -> 1045;
1142 -> 1141;
1143 -> 939;
1144 -> 953;
1144 -> 1143;
1144 -> 939;
1145 -> 953;
1145 -> 1136;
1145 -> 1144;
1146 -> 1045;
1146 -> 1145;
1146 -> 1136;
1146 -> 1139;
1146 -> 1142;
1146 -> 1144;
1147 -> 1045;
1147 -> 953;
1147 -> 1144;
1148 -> 1045;
1148 -> 939;
1149 -> 945;
1149 -> 1148;
1149 -> 1146;
1149 -> 1147;
1149 -> 914;
1150 -> 945;
1150 -> 939;
1151 -> 945;
1151 -> 939;
1152 -> 945;
1152 -> 939;
1153 -> 945;
1153 -> 939;
1154 -> 945;
1154 -> 939;
1155 -> 945;
1155 -> 939;
1156 -> 945;
1156 -> 939;
1157 -> 945;
1157 -> 939;
1158 -> 939;
1159 -> 1152;
1159 -> 939;
1160 -> 1154;
1160 -> 939;
1161 -> 0;
1161 -> 939;
1162 -> 939;
1163 -> 1156;
1163 -> 939;
1164 -> 939;
1165 -> 1161;
1165 -> 1164;
1166 -> 1162;
1166 -> 1164;
1167 -> 1163;
1167 -> 1164;
1168 -> 1157;
1168 -> 1164;
1169 -> 1164;
1170 -> 1165;
1170 -> 1164;
1171 -> 1166;
1171 -> 1164;
1172 -> 1169;
1172 -> 1164;
1173 -> 1167;
1173 -> 1164;
1174 -> 1164;
1175 -> 1170;
1175 -> 1174;
1176 -> 1171;
1176 -> 1174;
1177 -> 1172;
1177 -> 1174;
1178 -> 1173;
1178 -> 1174;
1179 -> 1168;
1179 -> 1174;
1180 -> 1174;
1181 -> 1175;
1181 -> 0;
1181 -> 1174;
1182 -> 1181;
1182 -> 1176;
1182 -> 1174;
1183 -> 1182;
1184 -> 1179;
1184 -> 1183;
1185 -> 1183;
1186 -> 1184;
1186 -> 1149;
1186 -> 1185;
1187 -> 1185;
1188 -> 1186;
1188 -> 1182;
1189 -> 1182;
1190 -> 1179;
1190 -> 1189;
1191 -> 1190;
1191 -> 1149;
1191 -> 1189;
1192 -> 1191;
1192 -> 1182;
1193 -> 1192;
1194 -> 1188;
1194 -> 1149;
1194 -> 1192;
1195 -> 1178;
1195 -> 1192;
1196 -> 1193;
1196 -> 1194;
1196 -> 1195;
1196 -> 1149;
1196 -> 1192;
1197 -> 1196;
1197 -> 1193;
1198 -> 1196;
1198 -> 1193;
1199 -> 1196;
1199 -> 1193;
1200 -> 1196;
1200 -> 1193;
1201 -> 1193;
1202 -> 1201;
1202 -> 1193;
1203 -> 1193;
1204 -> 1198;
1204 -> 1203;
1205 -> 1204;
1205 -> 1193;
1206 -> 1199;
1206 -> 1193;
1207 -> 1201;
1207 -> 1193;
1208 -> 1205;
1208 -> 1196;
1208 -> 1206;
1208 -> 1207;
1208 -> 1202;
1208 -> 1193;
1209 -> 1182;
1210 -> 1188;
1210 -> 1182;
1211 -> 1178;
1211 -> 1149;
1211 -> 1208;
1211 -> 1210;
1212 -> 1210;
1212 -> 1149;
1212 -> 1211;
1213 -> 1175;
1213 -> 0;
1213 -> 1174;
1214 -> 1180;
1214 -> 1213;
1215 -> 1214;
1215 -> 1179;
1215 -> 1180;
1215 -> 1211;
1215 -> 1213;
1216 -> 1213;
1217 -> 1213;
1218 -> 1179;
1218 -> 1217;
1219 -> 1218;
1219 -> 1215;
1219 -> 1217;
1220 -> 1219;
1220 -> 1213;
1221 -> 1213;
1222 -> 1179;
1222 -> 1221;
1223 -> 1222;
1223 -> 1220;
1223 -> 1221;
1224 -> 1223;
1224 -> 1213;
1225 -> 1178;
1225 -> 1220;
1225 -> 1213;
1226 -> 1213;
1227 -> 1179;
1227 -> 1226;
1228 -> 1227;
1228 -> 1225;
1228 -> 1226;
1229 -> 1227;
1229 -> 1225;
1229 -> 1226;
1230 -> 1229;
1230 -> 1213;
1231 -> 1178;
1231 -> 1230;
1231 -> 1213;
1232 -> 1178;
1232 -> 1213;
1233 -> 1213;
1234 -> 1213;
1235 -> 1233;
1235 -> 1234;
1236 -> 1233;
1236 -> 1234;
1237 -> 1233;
1237 -> 1234;
1238 -> 1232;
1238 -> 1234;
1239 -> 1179;
1239 -> 1234;
1240 -> 1234;
1241 -> 1239;
1241 -> 1240;
1242 -> 1241;
1242 -> 1231;
1242 -> 1240;
1243 -> 1240;
1244 -> 1242;
1244 -> 1243;
1245 -> 1244;
1245 -> 1243;
1246 -> 1245;
1246 -> 1242;
1246 -> 1243;
1247 -> 1243;
1248 -> 1246;
1248 -> 1247;
1249 -> 1248;
1249 -> 1246;
1249 -> 1247;
1250 -> 1249;
1250 -> 1247;
1251 -> 1250;
1251 -> 1234;
1252 -> 1238;
1252 -> 1234;
1253 -> 1251;
1253 -> 1252;
1253 -> 1250;
1253 -> 1231;
1253 -> 1234;
1254 -> 1234;
1255 -> 1234;
1256 -> 1235;
1256 -> 1255;
1256 -> 1234;
1257 -> 1234;
1258 -> 1239;
1258 -> 1257;
1259 -> 1257;
1260 -> 1258;
1260 -> 1259;
1261 -> 1259;
1262 -> 1260;
1262 -> 1261;
1263 -> 1262;
1263 -> 1253;
1263 -> 1261;
1264 -> 1262;
1264 -> 1253;
1264 -> 1261;
1265 -> 1264;
1265 -> 1259;
1266 -> 1260;
1266 -> 1253;
1266 -> 1259;
1267 -> 1266;
1267 -> 1234;
1268 -> 1254;
1268 -> 1234;
1269 -> 1238;
1269 -> 1234;
1270 -> 1268;
1270 -> 1269;
1270 -> 1267;
1270 -> 1231;
1270 -> 1266;
1270 -> 1234;
1271 -> 1234;
1272 -> 1271;
1273 -> 1272;
1274 -> 1270;
1274 -> 1273;
1275 -> 1274;
1275 -> 1272;
1276 -> 1271;
1277 -> 1276;
1278 -> 1277;
1279 -> 1271;
1280 -> 1279;
1281 -> 1280;
1282 -> 1270;
1282 -> 1271;
1283 -> 1282;
1283 -> 1270;
1283 -> 1271;
1284 -> 1271;
1285 -> 1282;
1285 -> 1270;
1285 -> 1284;
1285 -> 1271;
1286 -> 1285;
1287 -> 1282;
1287 -> 1270;
1287 -> 1285;
1288 -> 1286;
1288 -> 1285;
1289 -> 1285;
1290 -> 1282;
1290 -> 1288;
1290 -> 1271;
1291 -> 1270;
1291 -> 1271;
1292 -> 1270;
1292 -> 1271;
1293 -> 1292;
1293 -> 1290;
1293 -> 1271;
1294 -> 1270;
1294 -> 1271;
1295 -> 1270;
1295 -> 1271;
1296 -> 1271;
1297 -> 1295;
1297 -> 1296;
1298 -> 1297;
1298 -> 1290;
1298 -> 1296;
1299 -> 1297;
1299 -> 1290;
1299 -> 1296;
1300 -> 1299;
1300 -> 1271;
1301 -> 1271;
1302 -> 1301;
1302 -> 1300;
1302 -> 1290;
1302 -> 1271;
1303 -> 1301;
1303 -> 1302;
1304 -> 1300;
1304 -> 1303;
1304 -> 1301;
1305 -> 1294;
1305 -> 1304;
1305 -> 1303;
1306 -> 1270;
1306 -> 1271;
1307 -> 1306;
1307 -> 1305;
1307 -> 1271;
1308 -> 1274;
1308 -> 1307;
1308 -> 1273;
1309 -> 1274;
1309 -> 1307;
1309 -> 1273;
1310 -> 1309;
1310 -> 1272;
1311 -> 1270;
1311 -> 1271;
1312 -> 1270;
1312 -> 1271;
1313 -> 1311;
1313 -> 1307;
1313 -> 1271;
1314 -> 1271;
1315 -> 1271;
1316 -> 1313;
1316 -> 1315;
1317 -> 1314;
1317 -> 1315;
1318 -> 1312;
1318 -> 1315;
1319 -> 1317;
1319 -> 1315;
1320 -> 1316;
1320 -> 1315;
1321 -> 1315;
1322 -> 1318;
1322 -> 1307;
1322 -> 1315;
1323 -> 1315;
1324 -> 1320;
1324 -> 1323;
1325 -> 1321;
1325 -> 1323;
1326 -> 1322;
1326 -> 1323;
1327 -> 1318;
1327 -> 1323;
1328 -> 1326;
1328 -> 1323;
1329 -> 1325;
1329 -> 1323;
1330 -> 1327;
1330 -> 1307;
1330 -> 1329;
1331 -> 1327;
1331 -> 1307;
1331 -> 1330;
1331 -> 1323;
1332 -> 1328;
1332 -> 1331;
1332 -> 1307;
1332 -> 1330;
1332 -> 1323;
1333 -> 1324;
1333 -> 1323;
1334 -> 1323;
1335 -> 1333;
1335 -> 1334;
1336 -> 1327;
1336 -> 1334;
1337 -> 1335;
1337 -> 1334;
1338 -> 1334;
1339 -> 1337;
1339 -> 1338;
1340 -> 1336;
1340 -> 1338;
1341 -> 1338;
1342 -> 1339;
1342 -> 1341;
1342 -> 1338;
1343 -> 1338;
1344 -> 1340;
1344 -> 1332;
1344 -> 1343;
1345 -> 1343;
1346 -> 1344;
1346 -> 1338;
1347 -> 1339;
1347 -> 1338;
1348 -> 1346;
1348 -> 1332;
1348 -> 1347;
1348 -> 1338;
1349 -> 1334;
1350 -> 1336;
1350 -> 1348;
1350 -> 1349;
1351 -> 1349;
1352 -> 1350;
1352 -> 1334;
1353 -> 1332;
1353 -> 1323;
1354 -> 1323;
1355 -> 1353;
1355 -> 1354;
1355 -> 1323;
1356 -> 1355;
1357 -> 1356;
1357 -> 1352;
1358 -> 1357;
1358 -> 1355;
1359 -> 1332;
1359 -> 1355;
1360 -> 1358;
1360 -> 1355;
1361 -> 1355;
1362 -> 1323;
1363 -> 1360;
1363 -> 1352;
1363 -> 1323;
1364 -> 1323;
1365 -> 1363;
1365 -> 1364;
1365 -> 1323;
1366 -> 1324;
1366 -> 1323;
1367 -> 1325;
1367 -> 1323;
1368 -> 1360;
1368 -> 1352;
1368 -> 1323;
1369 -> 1323;
1370 -> 1366;
1370 -> 1369;
1371 -> 1367;
1371 -> 1369;
1372 -> 1368;
1372 -> 1369;
1373 -> 1327;
1373 -> 1369;
1374 -> 1373;
1374 -> 1369;
1375 -> 1370;
1375 -> 1369;
1376 -> 1371;
1376 -> 1369;
1377 -> 1374;
1377 -> 1375;
1377 -> 1376;
1377 -> 1360;
1377 -> 1369;
1378 -> 1369;
1379 -> 1377;
1379 -> 1369;
1380 -> 1369;
1381 -> 1380;
1382 -> 1372;
1382 -> 1380;
1383 -> 1380;
1384 -> 1382;
1384 -> 1383;
1384 -> 1380;
1385 -> 1372;
1385 -> 1380;
1386 -> 1379;
1386 -> 1380;
1387 -> 1382;
1387 -> 1380;
1388 -> 1385;
1388 -> 1386;
1388 -> 1387;
1388 -> 1379;
1388 -> 1380;
1389 -> 1377;
1389 -> 1388;
1390 -> 1389;
1390 -> 1314;
1391 -> 1390;
1391 -> 1389;
1391 -> 1314;
1392 -> 1391;
1393 -> 1392;
1393 -> 1391;
1394 -> 1391;
1395 -> 1393;
1395 -> 1394;
1396 -> 1390;
1396 -> 1394;
1397 -> 1394;
1398 -> 1396;
1398 -> 1397;
1399 -> 1397;
1400 -> 1398;
1400 -> 1399;
1401 -> 1400;
1401 -> 1397;
1402 -> 1398;
1402 -> 1394;
1403 -> 1395;
1403 -> 1402;
1403 -> 1392;
1403 -> 1398;
1403 -> 1394;
1404 -> 1394;
1405 -> 1396;
1405 -> 1404;
1406 -> 1405;
1406 -> 1403;
1406 -> 1404;
1407 -> 1405;
1407 -> 1403;
1407 -> 1404;
1408 -> 1407;
1408 -> 1394;
1409 -> 1394;
1410 -> 1409;
1410 -> 1408;
1410 -> 1403;
1410 -> 1394;
1411 -> 1409;
1411 -> 1410;
1412 -> 1408;
1412 -> 1411;
1412 -> 1409;
1413 -> 1391;
1414 -> 1390;
1414 -> 1391;
1415 -> 1414;
1415 -> 1412;
1415 -> 1391;
1416 -> 1391;
1417 -> 1392;
1417 -> 1415;
1417 -> 1391;
1418 -> 1390;
1418 -> 1417;
1418 -> 1391;
1419 -> 1415;
1419 -> 1391;
1420 -> 1391;
1421 -> 1390;
1421 -> 1418;
1421 -> 1314;
1422 -> 1389;
1422 -> 1314;
1423 -> 1314;
1424 -> 1422;
1424 -> 1423;
1425 -> 1423;
1426 -> 1425;
1427 -> 1424;
1427 -> 1426;
1428 -> 1427;
1428 -> 1421;
1428 -> 1426;
1429 -> 1427;
1429 -> 1421;
1429 -> 1426;
1430 -> 1429;
1430 -> 1425;
1431 -> 1424;
1431 -> 1421;
1431 -> 1425;
1432 -> 1431;
1432 -> 1314;
1433 -> 1314;
1434 -> 1432;
1434 -> 1314;
1435 -> 1432;
1435 -> 1314;
1436 -> 1434;
1436 -> 1314;
1437 -> 1314;
1438 -> 1436;
1438 -> 1437;
1439 -> 1435;
1439 -> 1437;
1440 -> 1439;
1440 -> 1432;
1440 -> 1437;
1441 -> 1438;
1441 -> 1440;
1441 -> 1437;
1442 -> 1437;
1443 -> 1437;
1444 -> 1441;
1444 -> 1443;
1445 -> 1441;
1445 -> 1443;
1446 -> 1441;
1446 -> 1443;
1447 -> 1442;
1447 -> 1443;
1448 -> 1444;
1448 -> 1447;
1448 -> 1443;
1449 -> 1445;
1449 -> 1447;
1449 -> 1443;
1450 -> 1446;
1450 -> 1447;
1450 -> 1443;
1451 -> 1442;
1451 -> 1440;
1451 -> 1448;
1451 -> 1449;
1451 -> 1450;
1451 -> 1441;
1451 -> 1437;
1452 -> 1451;
1452 -> 1442;
1453 -> 1452;
1453 -> 1451;
1453 -> 1442;
1454 -> 1314;
1455 -> 1432;
1455 -> 1426;
1456 -> 1455;
1456 -> 1453;
1456 -> 1426;
1457 -> 1455;
1457 -> 1453;
1457 -> 1426;
1458 -> 1457;
1458 -> 1425;
1459 -> 1314;
1460 -> 1459;
1461 -> 1432;
1461 -> 1460;
1462 -> 1461;
1462 -> 1453;
1462 -> 1460;
1463 -> 1461;
1463 -> 1453;
1463 -> 1460;
1464 -> 1463;
1464 -> 1459;
1465 -> 1282;
1465 -> 1453;
1465 -> 1271;
1466 -> 1271;
1467 -> 1270;
1467 -> 1466;
1468 -> 1467;
1468 -> 1453;
1468 -> 1466;
1469 -> 1467;
1469 -> 1453;
1469 -> 1466;
1470 -> 1469;
1470 -> 1271;
1471 -> 1270;
1471 -> 1271;
1472 -> 1270;
1472 -> 1271;
1473 -> 1471;
1473 -> 0;
1473 -> 1271;
1474 -> 1271;
1475 -> 1471;
1475 -> 1271;
1476 -> 1472;
1476 -> 1475;
1476 -> 1453;
1476 -> 1271;
1477 -> 1476;
1478 -> 1477;
1479 -> 1478;
1479 -> 1477;
1480 -> 1477;
1480 -> 1476;
1481 -> 1471;
1481 -> 1476;
1482 -> 1480;
1482 -> 1471;
1482 -> 1271;
1483 -> 1480;
1483 -> 1271;
1484 -> 1270;
1484 -> 1271;
1485 -> 1270;
1485 -> 1271;
1486 -> 1484;
1486 -> 1483;
1486 -> 1271;
1487 -> 1271;
1488 -> 1271;
1489 -> 1486;
1489 -> 1488;
1490 -> 1487;
1490 -> 1488;
1491 -> 1485;
1491 -> 1488;
1492 -> 1490;
1492 -> 1488;
1493 -> 1488;
1494 -> 1491;
1494 -> 1483;
1494 -> 1488;
1495 -> 1488;
1496 -> 1493;
1496 -> 1495;
1497 -> 1491;
1497 -> 1495;
1498 -> 1496;
1498 -> 1495;
1499 -> 1497;
1499 -> 1483;
1499 -> 1498;
1500 -> 1495;
1501 -> 1497;
1501 -> 1500;
1502 -> 1500;
1503 -> 1501;
1503 -> 1502;
1504 -> 1502;
1505 -> 1502;
1506 -> 1505;
1507 -> 1494;
1507 -> 1489;
1507 -> 1502;
1508 -> 1500;
1509 -> 1508;
1510 -> 1495;
1511 -> 1495;
1512 -> 1494;
1512 -> 1507;
1512 -> 1495;
1513 -> 1495;
1514 -> 1512;
1514 -> 1513;
1514 -> 1495;
1515 -> 1511;
1515 -> 1495;
1516 -> 1512;
1516 -> 1515;
1516 -> 1507;
1516 -> 1495;
1517 -> 1496;
1517 -> 1495;
1518 -> 1495;
1519 -> 1517;
1519 -> 1518;
1520 -> 1497;
1520 -> 1518;
1521 -> 1520;
1521 -> 1518;
1522 -> 1519;
1522 -> 1518;
1523 -> 1518;
1524 -> 1518;
1525 -> 1524;
1526 -> 1524;
1527 -> 1516;
1527 -> 1526;
1527 -> 1524;
1528 -> 1525;
1528 -> 1524;
1529 -> 1516;
1529 -> 1528;
1529 -> 1524;
1530 -> 1484;
1530 -> 1271;
1531 -> 1487;
1532 -> 1531;
1533 -> 1532;
1534 -> 1529;
1534 -> 1533;
1535 -> 1534;
1535 -> 1532;
1536 -> 1487;
1537 -> 1270;
1537 -> 1271;
1538 -> 1270;
1538 -> 1271;
1539 -> 1537;
1539 -> 1529;
1539 -> 1271;
1540 -> 1271;
1541 -> 1539;
1541 -> 1540;
1542 -> 1539;
1542 -> 1540;
1543 -> 1538;
1543 -> 1540;
1544 -> 1540;
1545 -> 1543;
1545 -> 1544;
1546 -> 1544;
1547 -> 1545;
1547 -> 1546;
1547 -> 1529;
1547 -> 1544;
1548 -> 1547;
1548 -> 1544;
1549 -> 1548;
1549 -> 1540;
1550 -> 1542;
1550 -> 1540;
1551 -> 1541;
1551 -> 1550;
1551 -> 1547;
1551 -> 1529;
1551 -> 1540;
1552 -> 1540;
1553 -> 1543;
1553 -> 1552;
1554 -> 1553;
1554 -> 1551;
1554 -> 1552;
1555 -> 1540;
1556 -> 1554;
1556 -> 1549;
1556 -> 1540;
1557 -> 1270;
1557 -> 1271;
1558 -> 1270;
1558 -> 1271;
1559 -> 1270;
1559 -> 1271;
1560 -> 1558;
1560 -> 1271;
1561 -> 1557;
1561 -> 1271;
1562 -> 1271;
1563 -> 1271;
1564 -> 1561;
1564 -> 1563;
1565 -> 1562;
1565 -> 1563;
1566 -> 1559;
1566 -> 1563;
1567 -> 1565;
1567 -> 1563;
1568 -> 1564;
1568 -> 1563;
1569 -> 1563;
1570 -> 1568;
1570 -> 1569;
1571 -> 1566;
1571 -> 1569;
1572 -> 1570;
1572 -> 1569;
1573 -> 1569;
1574 -> 1572;
1574 -> 1573;
1575 -> 1571;
1575 -> 1573;
1576 -> 1573;
1577 -> 1574;
1577 -> 1576;
1577 -> 1573;
1578 -> 1573;
1579 -> 1578;
1580 -> 1574;
1580 -> 1573;
1581 -> 1569;
1582 -> 1581;
1583 -> 1563;
1584 -> 1563;
1585 -> 1563;
1586 -> 1584;
1586 -> 1563;
1587 -> 1564;
1587 -> 1563;
1588 -> 1565;
1588 -> 1563;
1589 -> 1563;
1590 -> 1587;
1590 -> 1589;
1591 -> 1588;
1591 -> 1589;
1592 -> 1566;
1592 -> 1589;
1593 -> 1592;
1593 -> 1589;
1594 -> 1590;
1594 -> 1589;
1595 -> 1591;
1595 -> 1589;
1596 -> 1589;
1597 -> 1589;
1598 -> 1597;
1599 -> 1597;
1600 -> 1598;
1600 -> 1597;
1601 -> 1270;
1601 -> 1271;
1602 -> 1270;
1602 -> 1271;
1603 -> 1271;
1604 -> 1602;
1604 -> 1603;
1605 -> 1603;
1606 -> 1605;
1607 -> 1604;
1607 -> 1606;
1608 -> 1607;
1608 -> 1556;
1608 -> 1606;
1609 -> 1607;
1609 -> 1556;
1609 -> 1606;
1610 -> 1609;
1610 -> 1605;
1611 -> 1271;
1612 -> 1270;
1612 -> 1271;
1613 -> 1270;
1613 -> 1271;
1614 -> 1271;
1615 -> 1612;
1615 -> 1614;
1616 -> 1614;
1617 -> 1615;
1617 -> 1556;
1617 -> 1616;
1618 -> 1616;
1619 -> 1617;
1619 -> 1271;
1620 -> 1613;
1620 -> 1271;
1621 -> 1619;
1621 -> 1620;
1621 -> 1271;
1622 -> 1271;
1623 -> 1621;
1624 -> 1623;
1624 -> 1621;
1625 -> 1621;
1625 -> 1471;
1625 -> 1271;
1626 -> 1621;
1627 -> 1274;
1627 -> 1626;
1627 -> 1273;
1628 -> 1274;
1628 -> 1626;
1628 -> 1273;
1629 -> 1628;
1629 -> 1272;
1630 -> 1270;
1630 -> 1271;
1631 -> 1270;
1631 -> 1271;
1632 -> 1630;
1632 -> 1271;
1633 -> 1271;
1634 -> 1632;
1634 -> 1633;
1635 -> 1631;
1635 -> 1633;
1636 -> 1633;
1637 -> 1633;
1638 -> 1636;
1638 -> 1637;
1639 -> 1626;
1639 -> 1636;
1640 -> 1626;
1640 -> 1636;
1641 -> 1639;
1641 -> 1626;
1641 -> 1640;
1641 -> 1636;
1642 -> 1271;
1643 -> 1607;
1643 -> 1641;
1643 -> 1606;
1644 -> 1607;
1644 -> 1641;
1644 -> 1606;
1645 -> 1644;
1645 -> 1605;
1646 -> 1274;
1646 -> 1641;
1646 -> 1273;
1647 -> 1274;
1647 -> 1641;
1647 -> 1273;
1648 -> 1647;
1648 -> 1272;
1649 -> 1641;
1650 -> 1649;
1650 -> 1641;
1651 -> 1641;
1651 -> 1471;
1651 -> 1271;
1652 -> 1270;
1652 -> 1271;
1653 -> 1270;
1653 -> 1271;
1654 -> 1652;
1654 -> 1271;
1655 -> 1654;
1655 -> 1641;
1655 -> 1271;
1656 -> 1652;
1656 -> 1655;
1656 -> 1271;
1657 -> 1271;
1658 -> 1653;
1658 -> 1657;
1659 -> 1657;
1660 -> 1658;
1660 -> 1659;
1661 -> 1659;
1662 -> 1661;
1663 -> 1660;
1663 -> 1662;
1664 -> 1663;
1664 -> 1655;
1664 -> 1662;
1665 -> 1663;
1665 -> 1655;
1665 -> 1662;
1666 -> 1665;
1666 -> 1661;
1667 -> 1660;
1667 -> 1655;
1667 -> 1661;
1668 -> 1657;
1669 -> 1667;
1669 -> 1271;
1670 -> 1271;
1671 -> 1653;
1671 -> 1670;
1672 -> 1671;
1672 -> 1667;
1672 -> 1670;
1673 -> 1672;
1674 -> 1673;
1674 -> 1672;
1675 -> 1672;
1676 -> 1674;
1676 -> 1675;
1676 -> 1672;
1677 -> 1676;
1677 -> 1672;
1678 -> 1677;
1678 -> 1671;
1678 -> 1672;
1679 -> 1671;
1679 -> 1676;
1679 -> 1678;
1679 -> 1670;
1680 -> 1679;
1680 -> 1271;
1681 -> 1680;
1682 -> 1652;
1682 -> 1681;
1682 -> 1271;
1683 -> 1663;
1683 -> 1681;
1683 -> 1662;
1684 -> 1663;
1684 -> 1681;
1684 -> 1662;
1685 -> 1684;
1685 -> 1661;
1686 -> 1681;
1686 -> 1271;
1687 -> 1681;
1688 -> 1687;
1688 -> 1681;
1689 -> 1681;
1689 -> 1471;
1689 -> 1271;
1690 -> 1282;
1690 -> 1681;
1690 -> 1271;
1691 -> 1292;
1691 -> 1681;
1691 -> 1271;
1692 -> 1235;
1692 -> 1234;
1693 -> 1692;
1694 -> 1693;
1694 -> 1239;
1694 -> 1692;
1695 -> 1692;
1696 -> 1695;
1696 -> 1239;
1696 -> 1692;
1697 -> 1239;
1697 -> 1681;
1697 -> 1694;
1697 -> 1696;
1697 -> 1234;
1698 -> 1234;
1699 -> 1237;
1699 -> 1698;
1699 -> 1234;
1700 -> 1235;
1700 -> 1234;
1701 -> 1236;
1701 -> 1234;
1702 -> 1238;
1702 -> 1234;
1703 -> 1234;
1704 -> 1700;
1704 -> 1703;
1705 -> 1701;
1705 -> 1703;
1706 -> 1702;
1706 -> 1703;
1707 -> 1239;
1707 -> 1703;
1708 -> 1703;
1709 -> 1704;
1709 -> 1708;
1709 -> 1703;
1710 -> 1707;
1710 -> 1697;
1710 -> 1703;
1711 -> 1710;
1712 -> 1707;
1712 -> 1710;
1713 -> 1711;
1713 -> 1710;
1714 -> 1706;
1714 -> 1710;
1715 -> 1710;
1716 -> 1710;
1717 -> 1712;
1717 -> 1716;
1718 -> 1713;
1718 -> 1716;
1719 -> 1714;
1719 -> 1716;
1720 -> 1715;
1720 -> 1716;
1721 -> 1715;
1721 -> 1716;
1722 -> 1716;
1723 -> 1717;
1723 -> 1716;
1724 -> 1720;
1724 -> 1716;
1725 -> 1721;
1725 -> 1716;
1726 -> 1722;
1726 -> 1716;
1727 -> 1719;
1727 -> 1716;
1728 -> 1716;
1729 -> 1716;
1730 -> 1723;
1730 -> 1729;
1731 -> 1724;
1731 -> 1729;
1732 -> 1725;
1732 -> 1729;
1733 -> 1726;
1733 -> 1729;
1734 -> 1727;
1734 -> 1729;
1735 -> 1728;
1735 -> 1729;
1736 -> 1729;
1737 -> 1736;
1737 -> 1729;
1738 -> 1736;
1738 -> 1729;
1739 -> 1736;
1739 -> 1729;
1740 -> 1736;
1740 -> 1729;
1741 -> 1736;
1741 -> 1729;
1742 -> 1736;
1742 -> 1729;
1743 -> 1730;
1743 -> 1736;
1743 -> 1729;
1744 -> 1731;
1744 -> 1736;
1744 -> 1729;
1745 -> 1732;
1745 -> 1736;
1745 -> 1729;
1746 -> 1733;
1746 -> 1736;
1746 -> 1729;
1747 -> 1734;
1747 -> 1736;
1747 -> 1729;
1748 -> 0;
1748 -> 1729;
1749 -> 1748;
1749 -> 1736;
1749 -> 1729;
1750 -> 1729;
1751 -> 1736;
1751 -> 1750;
1752 -> 1750;
1753 -> 1751;
1753 -> 1736;
1753 -> 1738;
1753 -> 1744;
1753 -> 1752;
1753 -> 1750;
1754 -> 1750;
1755 -> 1751;
1755 -> 1736;
1755 -> 1737;
1755 -> 1743;
1755 -> 1754;
1756 -> 1755;
1756 -> 1736;
1756 -> 1748;
1756 -> 1754;
1757 -> 1753;
1757 -> 1756;
1757 -> 1736;
1757 -> 1748;
1757 -> 1750;
1758 -> 1757;
1758 -> 1729;
1759 -> 1758;
1760 -> 1759;
1760 -> 1736;
1760 -> 1758;
1761 -> 1716;
1762 -> 1717;
1762 -> 1761;
1763 -> 1761;
1764 -> 1762;
1764 -> 1763;
1765 -> 1764;
1765 -> 1748;
1765 -> 1763;
1766 -> 1764;
1766 -> 1748;
1766 -> 1763;
1767 -> 1766;
1767 -> 1761;
1768 -> 1762;
1768 -> 1748;
1768 -> 1761;
1769 -> 1768;
1769 -> 1716;
1770 -> 1769;
1770 -> 1728;
1770 -> 1768;
1770 -> 1736;
1770 -> 1737;
1770 -> 1743;
1770 -> 1738;
1770 -> 1744;
1770 -> 1739;
1770 -> 1745;
1770 -> 1740;
1770 -> 1746;
1770 -> 1741;
1770 -> 1749;
1770 -> 1742;
1770 -> 1760;
1770 -> 1747;
1770 -> 1715;
1770 -> 1722;
1770 -> 1231;
1770 -> 1759;
1770 -> 1716;
1771 -> 1716;
1772 -> 1770;
1772 -> 1771;
1773 -> 1770;
1773 -> 1771;
1774 -> 1773;
1774 -> 1770;
1774 -> 1771;
1775 -> 1772;
1775 -> 1771;
1776 -> 1772;
1776 -> 1771;
1777 -> 1771;
1778 -> 1776;
1778 -> 1777;
1779 -> 1773;
1779 -> 1777;
1780 -> 1778;
1780 -> 1774;
1780 -> 0;
1780 -> 1777;
1781 -> 1777;
1782 -> 1778;
1782 -> 1774;
1782 -> 0;
1782 -> 1777;
1783 -> 1778;
1783 -> 1774;
1783 -> 0;
1783 -> 1782;
1784 -> 1778;
1784 -> 1774;
1784 -> 0;
1784 -> 1777;
1785 -> 1778;
1785 -> 1774;
1785 -> 0;
1785 -> 1777;
1786 -> 1778;
1786 -> 1774;
1786 -> 0;
1786 -> 1777;
1787 -> 1778;
1787 -> 1774;
1787 -> 0;
1787 -> 1777;
1788 -> 1778;
1788 -> 1774;
1788 -> 0;
1788 -> 1777;
1789 -> 1777;
1790 -> 1778;
1790 -> 1777;
1791 -> 1789;
1791 -> 1777;
1792 -> 1779;
1792 -> 1774;
1792 -> 1790;
1792 -> 1791;
1792 -> 1777;
1793 -> 1777;
1794 -> 1778;
1794 -> 1777;
1795 -> 1793;
1795 -> 1777;
1796 -> 1777;
1797 -> 1794;
1797 -> 1796;
1798 -> 1795;
1798 -> 1796;
1799 -> 1779;
1799 -> 1796;
1800 -> 1796;
1801 -> 1797;
1801 -> 1792;
1801 -> 1796;
1802 -> 1796;
1803 -> 1802;
1803 -> 1777;
1804 -> 1803;
1804 -> 1777;
1805 -> 1778;
1805 -> 1801;
1805 -> 0;
1805 -> 1804;
1806 -> 0;
1806 -> 1805;
1807 -> 1778;
1807 -> 1801;
1807 -> 0;
1807 -> 1777;
1808 -> 1807;
1808 -> 1777;
1809 -> 1806;
1809 -> 1808;
1810 -> 1809;
1810 -> 0;
1810 -> 1771;
1811 -> 1809;
1811 -> 1771;
1812 -> 1771;
1813 -> 1811;
1813 -> 1812;
1814 -> 1813;
1814 -> 1812;
1815 -> 1814;
1816 -> 1771;
1817 -> 1816;
1817 -> 1772;
1817 -> 1809;
1817 -> 1771;
1818 -> 1772;
1818 -> 1809;
1818 -> 1816;
1818 -> 1817;
1819 -> 1817;
1820 -> 1818;
1820 -> 1817;
1821 -> 1819;
1821 -> 1817;
1822 -> 1817;
1823 -> 1820;
1823 -> 1822;
1824 -> 1821;
1824 -> 1822;
1825 -> 1773;
1825 -> 1822;
1826 -> 1822;
1827 -> 1822;
1827 -> 1817;
1828 -> 1817;
1829 -> 1828;
1829 -> 1817;
1830 -> 1826;
1830 -> 1829;
1831 -> 1817;
1832 -> 1830;
1832 -> 1831;
1832 -> 1817;
1833 -> 1832;
1833 -> 1827;
1833 -> 1817;
1834 -> 1827;
1834 -> 1817;
1835 -> 1815;
1835 -> 1834;
1836 -> 1815;
1836 -> 1771;
1837 -> 1771;
1838 -> 1772;
1838 -> 1823;
1838 -> 1837;
1838 -> 1771;
1839 -> 1838;
1839 -> 1771;
1840 -> 1771;
1841 -> 1839;
1841 -> 1840;
1842 -> 1773;
1842 -> 1840;
1843 -> 1841;
1843 -> 1838;
1843 -> 0;
1843 -> 1840;
1844 -> 1840;
1845 -> 1841;
1845 -> 1838;
1845 -> 0;
1845 -> 1840;
1846 -> 1841;
1846 -> 1838;
1846 -> 0;
1846 -> 1845;
1847 -> 1841;
1847 -> 1838;
1847 -> 0;
1847 -> 1840;
1848 -> 1841;
1848 -> 1838;
1848 -> 0;
1848 -> 1840;
1849 -> 1841;
1849 -> 1838;
1849 -> 0;
1849 -> 1840;
1850 -> 1841;
1850 -> 1838;
1850 -> 0;
1850 -> 1840;
1851 -> 1841;
1851 -> 1838;
1851 -> 0;
1851 -> 1840;
1852 -> 1840;
1853 -> 1852;
1853 -> 1840;
1854 -> 1840;
1855 -> 1854;
1855 -> 1840;
1856 -> 1840;
1857 -> 1855;
1857 -> 1856;
1858 -> 1842;
1858 -> 1856;
1859 -> 1856;
1860 -> 1856;
1861 -> 1860;
1861 -> 1840;
1862 -> 1861;
1862 -> 1840;
1863 -> 1841;
1864 -> 1841;
1865 -> 1863;
1865 -> 1864;
1866 -> 1842;
1866 -> 1864;
1867 -> 1865;
1867 -> 1841;
1867 -> 0;
1867 -> 1864;
1868 -> 1865;
1868 -> 1841;
1868 -> 1864;
1869 -> 1864;
1870 -> 1868;
1870 -> 1869;
1870 -> 1864;
1871 -> 1868;
1871 -> 1864;
1872 -> 1864;
1873 -> 1871;
1873 -> 1872;
1874 -> 1866;
1874 -> 1872;
1875 -> 1873;
1875 -> 1841;
1875 -> 0;
1875 -> 1872;
1876 -> 1872;
1877 -> 1873;
1877 -> 1841;
1877 -> 0;
1877 -> 1872;
1878 -> 1873;
1878 -> 1841;
1878 -> 0;
1878 -> 1877;
1879 -> 1873;
1879 -> 1841;
1879 -> 0;
1879 -> 1872;
1880 -> 1873;
1880 -> 1841;
1880 -> 0;
1880 -> 1872;
1881 -> 1873;
1881 -> 1841;
1881 -> 0;
1881 -> 1872;
1882 -> 1873;
1882 -> 1841;
1882 -> 0;
1882 -> 1872;
1883 -> 1873;
1883 -> 1841;
1883 -> 0;
1883 -> 1872;
1884 -> 1874;
1884 -> 1841;
1884 -> 1873;
1884 -> 1872;
1885 -> 1884;
1886 -> 1841;
1887 -> 1885;
1887 -> 1886;
1888 -> 1887;
1888 -> 1886;
1889 -> 1888;
1890 -> 1771;
1891 -> 1889;
1891 -> 1890;
1892 -> 1772;
1892 -> 1884;
1892 -> 1771;
1893 -> 1771;
1894 -> 1892;
1894 -> 1893;
1895 -> 1892;
1895 -> 1893;
1896 -> 1895;
1896 -> 1892;
1896 -> 1893;
1897 -> 1894;
1897 -> 1893;
1898 -> 1893;
1899 -> 1897;
1899 -> 1898;
1900 -> 1895;
1900 -> 1898;
1901 -> 1899;
1901 -> 1896;
1901 -> 0;
1901 -> 1898;
1902 -> 1901;
1903 -> 1894;
1903 -> 1893;
1904 -> 1893;
1905 -> 1903;
1905 -> 1904;
1906 -> 1895;
1906 -> 1904;
1907 -> 1905;
1907 -> 1896;
1907 -> 0;
1907 -> 1904;
1908 -> 1904;
1909 -> 1905;
1909 -> 1896;
1909 -> 0;
1909 -> 1904;
1910 -> 1905;
1910 -> 1896;
1910 -> 1909;
1911 -> 1909;
1912 -> 1910;
1912 -> 1911;
1913 -> 1912;
1913 -> 1896;
1913 -> 0;
1913 -> 1911;
1914 -> 1911;
1915 -> 1912;
1915 -> 1896;
1915 -> 0;
1916 -> 1912;
1916 -> 1896;
1916 -> 0;
1916 -> 1911;
1917 -> 1912;
1917 -> 1896;
1917 -> 0;
1917 -> 1911;
1918 -> 1912;
1918 -> 1896;
1918 -> 0;
1918 -> 1911;
1919 -> 1912;
1919 -> 1896;
1919 -> 0;
1919 -> 1911;
1920 -> 1912;
1920 -> 1896;
1920 -> 0;
1920 -> 1911;
1921 -> 1912;
1922 -> 1893;
1923 -> 1921;
1923 -> 1922;
1924 -> 1923;
1924 -> 1922;
1925 -> 1924;
1926 -> 1893;
1927 -> 1895;
1927 -> 1926;
1928 -> 1926;
1929 -> 1927;
1929 -> 1912;
1929 -> 1928;
1929 -> 1926;
1930 -> 1926;
1931 -> 1927;
1931 -> 1912;
1931 -> 1930;
1932 -> 1929;
1932 -> 1893;
1933 -> 1894;
1933 -> 1932;
1934 -> 1932;
1935 -> 1933;
1935 -> 1934;
1936 -> 1895;
1936 -> 1934;
1937 -> 1935;
1937 -> 1912;
1937 -> 1934;
1938 -> 1937;
1939 -> 1936;
1939 -> 1937;
1940 -> 1932;
1941 -> 1716;
1942 -> 1728;
1942 -> 1941;
1943 -> 1942;
1943 -> 1939;
1943 -> 1941;
1944 -> 1941;
1945 -> 1943;
1945 -> 1944;
1945 -> 1941;
1946 -> 1941;
1947 -> 1943;
1947 -> 1946;
1947 -> 1939;
1947 -> 1941;
1948 -> 1947;
1949 -> 1716;
1950 -> 1722;
1950 -> 1716;
1951 -> 1950;
1951 -> 1948;
1951 -> 1716;
1952 -> 1707;
1952 -> 1948;
1952 -> 1710;
1953 -> 1711;
1953 -> 1710;
1954 -> 1952;
1954 -> 1953;
1954 -> 1948;
1954 -> 1710;
1955 -> 1707;
1955 -> 1954;
1955 -> 1703;
1956 -> 1707;
1956 -> 1954;
1956 -> 1703;
1957 -> 1697;
1957 -> 1234;
1958 -> 1957;
1958 -> 1954;
1958 -> 1234;
1959 -> 1956;
1959 -> 1234;
1960 -> 1213;
1961 -> 1179;
1961 -> 1959;
1961 -> 1960;
1961 -> 1213;
1962 -> 1178;
1962 -> 1959;
1962 -> 1174;
1963 -> 1175;
1963 -> 0;
1963 -> 1174;
1964 -> 1177;
1964 -> 1174;
1965 -> 1180;
1965 -> 1174;
1966 -> 1178;
1966 -> 1174;
1967 -> 1964;
1967 -> 1965;
1967 -> 1966;
1967 -> 1179;
1967 -> 1169;
1967 -> 1962;
1967 -> 1174;
1968 -> 1174;
1969 -> 1164;
1970 -> 1169;
1970 -> 1967;
1970 -> 1164;
1971 -> 1158;
1971 -> 939;
1972 -> 1160;
1972 -> 1970;
1972 -> 1971;
1972 -> 1163;
1972 -> 1157;
1972 -> 1149;
1972 -> 939;
1973 -> 1158;
1973 -> 939;
1974 -> 1150;
1974 -> 939;
1975 -> 1152;
1975 -> 939;
1976 -> 1151;
1976 -> 1975;
1977 -> 1974;
1977 -> 1972;
1977 -> 1975;
1978 -> 1154;
1978 -> 1975;
1979 -> 1975;
1980 -> 1977;
1980 -> 1979;
1981 -> 1977;
1981 -> 1979;
1982 -> 1977;
1982 -> 1979;
1983 -> 1977;
1983 -> 1979;
1984 -> 1979;
1985 -> 1981;
1985 -> 1977;
1985 -> 1984;
1985 -> 1979;
1986 -> 0;
1986 -> 1979;
1987 -> 1985;
1987 -> 1979;
1988 -> 1976;
1988 -> 1985;
1988 -> 1975;
1989 -> 1975;
1990 -> 1157;
1990 -> 1975;
1991 -> 1974;
1991 -> 1975;
1992 -> 1151;
1992 -> 1975;
1993 -> 1153;
1993 -> 1975;
1994 -> 1972;
1994 -> 1975;
1995 -> 1989;
1995 -> 1975;
1996 -> 1155;
1996 -> 1975;
1997 -> 1156;
1997 -> 1975;
1998 -> 1975;
1999 -> 1990;
1999 -> 1998;
2000 -> 1991;
2000 -> 1998;
2001 -> 1992;
2001 -> 1998;
2002 -> 1993;
2002 -> 1998;
2003 -> 1994;
2003 -> 1998;
2004 -> 1995;
2004 -> 1998;
2005 -> 1996;
2005 -> 1998;
2006 -> 1997;
2006 -> 1998;
2007 -> 1998;
2008 -> 1999;
2008 -> 2007;
2008 -> 1998;
2009 -> 1998;
2010 -> 2004;
2010 -> 2009;
2010 -> 1998;
2011 -> 1998;
2012 -> 1999;
2012 -> 2011;
2013 -> 2012;
2013 -> 1985;
2013 -> 2011;
2014 -> 2013;
2014 -> 1998;
2015 -> 1998;
2016 -> 1998;
2017 -> 2005;
2017 -> 1998;
2018 -> 1999;
2018 -> 2017;
2019 -> 2000;
2019 -> 2017;
2020 -> 2003;
2020 -> 2017;
2021 -> 2004;
2021 -> 2017;
2022 -> 2006;
2022 -> 2017;
2023 -> 2017;
2024 -> 2018;
2024 -> 2023;
2025 -> 2019;
2025 -> 2023;
2026 -> 2020;
2026 -> 2023;
2027 -> 2021;
2027 -> 2023;
2028 -> 2022;
2028 -> 2023;
2029 -> 2028;
2029 -> 2023;
2030 -> 2023;
2031 -> 2029;
2031 -> 2030;
2032 -> 2024;
2032 -> 2030;
2033 -> 2030;
2034 -> 2032;
2034 -> 1985;
2034 -> 2033;
2034 -> 2030;
2035 -> 2034;
2036 -> 2032;
2036 -> 2034;
2037 -> 2034;
2038 -> 2037;
2039 -> 2038;
2039 -> 2037;
2040 -> 2034;
2041 -> 2040;
2041 -> 2036;
2042 -> 2041;
2042 -> 2034;
2043 -> 2042;
2044 -> 2042;
2045 -> 2044;
2045 -> 2042;
2046 -> 2042;
2047 -> 2043;
2047 -> 2042;
2048 -> 2047;
2049 -> 2048;
2049 -> 2047;
2050 -> 2036;
2050 -> 2047;
2051 -> 2031;
2051 -> 2047;
2052 -> 2048;
2052 -> 2047;
2053 -> 2047;
2054 -> 2050;
2054 -> 2053;
2055 -> 2051;
2055 -> 2053;
2056 -> 2052;
2056 -> 2053;
2057 -> 2032;
2057 -> 2053;
2058 -> 2053;
2059 -> 2053;
2060 -> 2053;
2061 -> 2053;
2062 -> 2057;
2062 -> 2061;
2063 -> 2062;
2063 -> 2053;
2064 -> 2053;
2065 -> 2057;
2065 -> 2064;
2066 -> 2064;
2067 -> 2065;
2067 -> 2066;
2068 -> 2067;
2068 -> 2064;
2069 -> 2065;
2069 -> 2053;
2070 -> 2053;
2071 -> 2057;
2071 -> 2070;
2072 -> 2071;
2072 -> 2065;
2072 -> 2070;
2073 -> 2070;
2074 -> 2072;
2074 -> 2073;
2075 -> 2074;
2075 -> 2072;
2075 -> 2073;
2076 -> 2073;
2077 -> 2075;
2077 -> 2076;
2078 -> 2076;
2079 -> 2077;
2079 -> 2078;
2080 -> 2078;
2081 -> 2079;
2081 -> 2080;
2082 -> 2081;
2082 -> 2078;
2083 -> 2079;
2083 -> 2076;
2084 -> 2083;
2084 -> 2053;
2085 -> 2053;
2086 -> 2063;
2086 -> 2085;
2086 -> 2053;
2087 -> 2086;
2088 -> 2059;
2088 -> 2086;
2089 -> 0;
2089 -> 2086;
2090 -> 2055;
2090 -> 2086;
2091 -> 2086;
2092 -> 2089;
2092 -> 2091;
2093 -> 2089;
2093 -> 2091;
2094 -> 2090;
2094 -> 2091;
2095 -> 2057;
2095 -> 2091;
2096 -> 2091;
2097 -> 2092;
2097 -> 2096;
2097 -> 2091;
2098 -> 2093;
2098 -> 0;
2098 -> 2091;
2099 -> 2095;
2099 -> 2091;
2100 -> 2093;
2100 -> 2091;
2101 -> 2092;
2101 -> 2091;
2102 -> 2094;
2102 -> 2091;
2103 -> 2091;
2104 -> 2091;
2105 -> 2099;
2105 -> 2104;
2106 -> 2100;
2106 -> 2104;
2107 -> 2101;
2107 -> 2104;
2108 -> 2102;
2108 -> 2104;
2109 -> 2103;
2109 -> 2104;
2110 -> 2105;
2110 -> 2104;
2111 -> 2106;
2111 -> 2104;
2112 -> 2108;
2112 -> 2104;
2113 -> 2104;
2114 -> 2110;
2114 -> 2113;
2115 -> 2111;
2115 -> 2113;
2116 -> 2112;
2116 -> 2113;
2117 -> 2109;
2117 -> 2113;
2118 -> 2117;
2118 -> 2113;
2119 -> 2117;
2119 -> 2113;
2120 -> 2117;
2120 -> 2113;
2121 -> 2117;
2121 -> 2113;
2122 -> 2117;
2122 -> 2113;
2123 -> 2113;
2124 -> 2123;
2124 -> 2117;
2124 -> 2113;
2125 -> 2114;
2125 -> 2117;
2125 -> 2113;
2126 -> 2115;
2126 -> 0;
2126 -> 2113;
2127 -> 2126;
2127 -> 2117;
2127 -> 2113;
2128 -> 2115;
2128 -> 0;
2128 -> 2113;
2129 -> 2128;
2129 -> 2117;
2129 -> 2113;
2130 -> 2115;
2130 -> 0;
2130 -> 2113;
2131 -> 2130;
2131 -> 2117;
2131 -> 2113;
2132 -> 2116;
2132 -> 2117;
2132 -> 2113;
2133 -> 2109;
2133 -> 2104;
2134 -> 2107;
2134 -> 2109;
2134 -> 2104;
2135 -> 2091;
2136 -> 2103;
2136 -> 2135;
2137 -> 2135;
2138 -> 2135;
2139 -> 2138;
2139 -> 2135;
2140 -> 2135;
2141 -> 2136;
2141 -> 2125;
2141 -> 2140;
2142 -> 2141;
2142 -> 2083;
2142 -> 2140;
2143 -> 2142;
2143 -> 2135;
2144 -> 2137;
2144 -> 2135;
2145 -> 2135;
2146 -> 2139;
2146 -> 2145;
2147 -> 2143;
2147 -> 2145;
2148 -> 2144;
2148 -> 2145;
2149 -> 2136;
2149 -> 2145;
2150 -> 2147;
2150 -> 2142;
2150 -> 0;
2150 -> 2145;
2151 -> 2149;
2151 -> 2127;
2151 -> 2150;
2152 -> 2147;
2152 -> 2145;
2153 -> 2146;
2153 -> 2152;
2153 -> 2138;
2153 -> 2142;
2153 -> 2145;
2154 -> 2147;
2154 -> 2153;
2154 -> 2145;
2155 -> 2154;
2156 -> 2149;
2156 -> 2131;
2156 -> 2155;
2157 -> 2146;
2157 -> 2156;
2158 -> 2155;
2158 -> 2156;
2159 -> 2148;
2159 -> 2156;
2160 -> 2156;
2161 -> 2157;
2161 -> 2160;
2162 -> 2158;
2162 -> 2160;
2163 -> 2159;
2163 -> 2160;
2164 -> 2162;
2164 -> 2153;
2164 -> 0;
2164 -> 2160;
2165 -> 2160;
2165 -> 2129;
2165 -> 2164;
2166 -> 2160;
2166 -> 2131;
2166 -> 2164;
2167 -> 2162;
2167 -> 2166;
2168 -> 2167;
2168 -> 2166;
2169 -> 2166;
2170 -> 2168;
2170 -> 2169;
2171 -> 2160;
2171 -> 2169;
2172 -> 2170;
2172 -> 2153;
2172 -> 2169;
2173 -> 2171;
2173 -> 2134;
2173 -> 2172;
2174 -> 2173;
2175 -> 2161;
2175 -> 2174;
2176 -> 2167;
2176 -> 2174;
2177 -> 2163;
2177 -> 2174;
2178 -> 2174;
2179 -> 2175;
2179 -> 2178;
2180 -> 2176;
2180 -> 2178;
2181 -> 2177;
2181 -> 2178;
2182 -> 2160;
2182 -> 2178;
2183 -> 2182;
2183 -> 2132;
2183 -> 1149;
2183 -> 2173;
2183 -> 2178;
2184 -> 2180;
2184 -> 2178;
2185 -> 2179;
2185 -> 2184;
2185 -> 2183;
2185 -> 2178;
2186 -> 2179;
2186 -> 2178;
2187 -> 2178;
2188 -> 2186;
2188 -> 2187;
2189 -> 2182;
2189 -> 2187;
2190 -> 2187;
2191 -> 2188;
2191 -> 2185;
2191 -> 2190;
2191 -> 2187;
2192 -> 2187;
2193 -> 2188;
2193 -> 2185;
2193 -> 2192;
2193 -> 2187;
2194 -> 2187;
2195 -> 2193;
2195 -> 2194;
2196 -> 2189;
2196 -> 2194;
2197 -> 2195;
2197 -> 2194;
2198 -> 2194;
2199 -> 2198;
2199 -> 2194;
2200 -> 2196;
2200 -> 2124;
2200 -> 2197;
2200 -> 2199;
2200 -> 2123;
2200 -> 2193;
2200 -> 2194;
2201 -> 2200;
2202 -> 2201;
2202 -> 2194;
2203 -> 2187;
2204 -> 2202;
2204 -> 2203;
2204 -> 2187;
2205 -> 2187;
2206 -> 2189;
2206 -> 2125;
2206 -> 2205;
2207 -> 2206;
2207 -> 2200;
2207 -> 2205;
2208 -> 2206;
2208 -> 2200;
2208 -> 2205;
2209 -> 2208;
2209 -> 2187;
2210 -> 2187;
2211 -> 2210;
2211 -> 2188;
2211 -> 2200;
2211 -> 2187;
2212 -> 2209;
2212 -> 2211;
2213 -> 2188;
2213 -> 2210;
2213 -> 2200;
2213 -> 2211;
2214 -> 2211;
2215 -> 2212;
2215 -> 2214;
2216 -> 2213;
2216 -> 2214;
2217 -> 2189;
2217 -> 2214;
2218 -> 2214;
2219 -> 2215;
2219 -> 2218;
2219 -> 2214;
2220 -> 2216;
2220 -> 2213;
2220 -> 0;
2220 -> 2214;
2221 -> 2216;
2221 -> 2213;
2221 -> 2220;
2222 -> 2215;
2222 -> 2221;
2222 -> 2213;
2222 -> 2220;
2223 -> 2220;
2224 -> 2222;
2224 -> 2223;
2225 -> 2217;
2225 -> 2223;
2226 -> 2224;
2226 -> 2223;
2227 -> 2226;
2228 -> 2226;
2229 -> 2227;
2229 -> 2228;
2229 -> 2226;
2230 -> 2226;
2231 -> 2226;
2232 -> 2230;
2232 -> 2231;
2232 -> 2226;
2233 -> 2226;
2234 -> 2233;
2234 -> 2226;
2235 -> 2233;
2235 -> 2222;
2235 -> 2225;
2235 -> 2234;
2236 -> 2220;
2237 -> 2216;
2237 -> 2214;
2238 -> 2214;
2239 -> 2237;
2239 -> 2238;
2240 -> 2217;
2240 -> 2238;
2241 -> 2240;
2241 -> 2235;
2241 -> 2239;
2241 -> 2238;
2241 -> 2222;
2242 -> 2241;
2243 -> 2242;
2243 -> 2238;
2244 -> 2243;
2244 -> 2187;
2245 -> 2178;
2246 -> 2244;
2246 -> 2245;
2246 -> 2178;
2248 -> 2247;
2249 -> 2247;
2250 -> 2244;
2250 -> 2241;
2250 -> 2246;
2251 -> 2246;
2252 -> 2250;
2252 -> 2251;
2253 -> 2250;
2253 -> 2251;
2254 -> 2250;
2254 -> 2251;
2255 -> 2251;
2256 -> 2252;
2256 -> 2253;
2256 -> 2251;
2257 -> 2252;
2257 -> 2250;
2257 -> 2251;
2258 -> 2251;
2259 -> 2253;
2259 -> 2257;
2259 -> 2251;
2260 -> 2251;
2261 -> 2252;
2261 -> 2259;
2261 -> 2253;
2261 -> 2251;
2262 -> 2257;
2262 -> 2251;
2263 -> 2259;
2263 -> 2251;
2264 -> 2251;
2265 -> 2263;
2265 -> 2264;
2265 -> 2251;
2266 -> 2263;
2266 -> 2265;
2267 -> 2252;
2267 -> 2266;
2267 -> 2253;
2267 -> 2251;
2268 -> 2266;
2269 -> 2266;
2270 -> 2268;
2270 -> 2269;
2271 -> 2182;
2271 -> 2269;
2272 -> 2271;
2272 -> 2134;
2272 -> 2270;
2272 -> 2269;
2273 -> 2268;
2274 -> 2268;
2274 -> 2273;
2275 -> 2182;
2275 -> 2273;
2276 -> 2275;
2276 -> 2134;
2276 -> 2274;
2276 -> 2273;
2277 -> 2268;
2277 -> 2276;
2278 -> 2181;
2278 -> 2277;
2278 -> 2137;
2278 -> 2268;
2278 -> 2276;
2279 -> 2178;
2280 -> 2179;
2280 -> 2278;
2280 -> 2279;
2280 -> 2178;
2281 -> 2174;
2282 -> 2160;
2283 -> 2161;
2283 -> 2280;
2283 -> 2282;
2283 -> 2160;
2284 -> 2156;
2285 -> 2145;
2286 -> 2135;
2287 -> 2138;
2287 -> 2283;
2287 -> 2135;
2288 -> 2136;
2288 -> 2235;
2288 -> 2287;
2288 -> 2135;
2289 -> 2137;
2289 -> 2135;
2290 -> 2289;
2290 -> 2091;
2291 -> 2290;
2291 -> 2086;
2292 -> 2086;
2293 -> 2088;
2293 -> 2292;
2294 -> 2291;
2294 -> 2292;
2295 -> 2294;
2295 -> 2292;
2296 -> 2295;
2296 -> 2288;
2296 -> 2292;
2297 -> 2296;
2298 -> 2297;
2299 -> 2293;
2299 -> 2298;
2299 -> 2059;
2299 -> 2288;
2299 -> 2297;
2300 -> 2086;
2301 -> 2084;
2301 -> 2054;
2301 -> 2086;
2302 -> 2053;
2303 -> 2053;
2304 -> 2053;
2305 -> 2059;
2305 -> 2053;
2306 -> 2305;
2306 -> 2299;
2306 -> 2053;
2307 -> 2306;
2308 -> 2306;
2309 -> 2307;
2309 -> 2306;
2310 -> 2306;
2311 -> 2308;
2311 -> 2310;
2312 -> 2309;
2312 -> 2310;
2313 -> 2057;
2313 -> 2310;
2314 -> 2311;
2314 -> 2299;
2314 -> 2310;
2315 -> 2311;
2315 -> 2299;
2315 -> 2310;
2316 -> 2310;
2317 -> 2315;
2317 -> 2299;
2317 -> 0;
2317 -> 2310;
2318 -> 2315;
2318 -> 2310;
2319 -> 2311;
2319 -> 2318;
2319 -> 0;
2319 -> 2310;
2320 -> 2310;
2321 -> 2311;
2321 -> 2318;
2321 -> 2320;
2321 -> 2310;
2322 -> 2321;
2323 -> 2322;
2323 -> 2321;
2324 -> 2316;
2324 -> 2322;
2324 -> 2321;
2325 -> 2323;
2325 -> 2306;
2326 -> 2306;
2326 -> 2325;
2327 -> 2323;
2327 -> 2325;
2328 -> 2307;
2328 -> 2325;
2329 -> 2325;
2330 -> 2326;
2330 -> 2329;
2331 -> 2327;
2331 -> 2329;
2332 -> 2328;
2332 -> 2329;
2333 -> 2057;
2333 -> 2329;
2334 -> 2331;
2334 -> 2329;
2335 -> 2330;
2335 -> 2318;
2335 -> 2329;
2336 -> 2329;
2337 -> 2336;
2337 -> 2325;
2338 -> 2306;
2338 -> 2318;
2338 -> 2337;
2339 -> 2307;
2339 -> 2338;
2340 -> 2058;
2340 -> 2339;
2340 -> 2307;
2340 -> 2338;
2341 -> 2306;
2341 -> 2338;
2342 -> 2304;
2342 -> 2341;
2342 -> 2318;
2342 -> 2338;
2343 -> 2307;
2343 -> 2340;
2343 -> 2325;
2344 -> 2053;
2345 -> 2304;
2345 -> 2342;
2345 -> 2344;
2345 -> 2053;
2346 -> 0;
2346 -> 2345;
2347 -> 2345;
2348 -> 2302;
2348 -> 2347;
2348 -> 2345;
2349 -> 2053;
2350 -> 2304;
2350 -> 2342;
2350 -> 2349;
2350 -> 2053;
2351 -> 2087;
2351 -> 2350;
2352 -> 2303;
2352 -> 2351;
2353 -> 2053;
2354 -> 2053;
2355 -> 2304;
2355 -> 2342;
2355 -> 2354;
2355 -> 2053;
2356 -> 2304;
2356 -> 2355;
2357 -> 2356;
2358 -> 2355;
2359 -> 2304;
2359 -> 2357;
2359 -> 2358;
2359 -> 2355;
2360 -> 2359;
2361 -> 2302;
2361 -> 2053;
2362 -> 2304;
2362 -> 2360;
2362 -> 2053;
2363 -> 2303;
2363 -> 2352;
2363 -> 2053;
2364 -> 2360;
2364 -> 2053;
2365 -> 2059;
2365 -> 2362;
2365 -> 2053;
2366 -> 2058;
2366 -> 2343;
2366 -> 2053;
2368 -> 0;
2370 -> 2367;
2370 -> 2369;
2371 -> 2368;
2371 -> 2369;
2372 -> 2369;
2373 -> 2372;
2373 -> 2369;
2374 -> 2370;
2374 -> 2372;
2374 -> 2369;
2375 -> 2371;
2375 -> 2372;
2375 -> 2369;
2376 -> 2369;
2377 -> 2364;
2377 -> 2047;
2378 -> 2366;
2378 -> 2047;
2379 -> 2047;
2380 -> 2047;
2381 -> 2377;
2381 -> 2380;
2382 -> 2378;
2382 -> 2380;
2383 -> 2379;
2383 -> 2380;
2384 -> 2383;
2384 -> 2380;
2385 -> 2381;
2385 -> 2383;
2385 -> 2380;
2386 -> 2382;
2386 -> 2383;
2386 -> 2380;
2387 -> 2042;
2388 -> 2387;
2388 -> 2365;
2389 -> 2388;
2389 -> 2042;
2390 -> 2042;
2391 -> 2032;
2391 -> 2365;
2391 -> 2034;
2392 -> 2379;
2392 -> 2034;
2393 -> 2034;
2394 -> 2391;
2394 -> 2392;
2394 -> 2393;
2394 -> 2385;
2394 -> 2386;
2394 -> 2365;
2394 -> 2366;
2394 -> 2034;
2395 -> 2032;
2395 -> 2394;
2395 -> 2030;
2396 -> 2395;
2396 -> 2394;
2396 -> 2023;
2397 -> 2395;
2397 -> 2394;
2397 -> 2023;
2398 -> 2027;
2398 -> 2397;
2398 -> 1989;
2398 -> 2394;
2398 -> 2023;
2399 -> 2395;
2399 -> 2398;
2399 -> 2023;
2400 -> 2023;
2401 -> 2399;
2401 -> 2400;
2401 -> 2023;
2402 -> 2399;
2402 -> 2023;
2403 -> 2023;
2404 -> 2402;
2404 -> 2403;
2404 -> 2023;
2405 -> 2399;
2405 -> 2398;
2405 -> 2404;
2406 -> 2405;
2406 -> 2404;
2407 -> 2024;
2407 -> 2404;
2408 -> 2404;
2409 -> 2408;
2410 -> 2406;
2410 -> 2409;
2411 -> 2410;
2411 -> 2408;
2412 -> 2023;
2413 -> 2402;
2413 -> 2412;
2413 -> 2023;
2414 -> 2399;
2414 -> 2023;
2415 -> 1999;
2415 -> 1998;
2416 -> 2000;
2416 -> 1998;
2417 -> 2001;
2417 -> 1998;
2418 -> 2002;
2418 -> 1998;
2419 -> 2003;
2419 -> 1998;
2420 -> 2004;
2420 -> 1998;
2421 -> 2005;
2421 -> 1998;
2422 -> 2414;
2422 -> 1998;
2423 -> 2006;
2423 -> 1998;
2424 -> 1998;
2425 -> 1998;
2426 -> 2415;
2426 -> 2425;
2427 -> 2416;
2427 -> 2425;
2428 -> 2417;
2428 -> 2425;
2429 -> 2418;
2429 -> 2425;
2430 -> 2419;
2430 -> 2425;
2431 -> 2420;
2431 -> 2425;
2432 -> 2421;
2432 -> 2425;
2433 -> 2422;
2433 -> 2425;
2434 -> 2423;
2434 -> 2425;
2435 -> 2424;
2435 -> 2425;
2436 -> 2425;
2437 -> 2436;
2437 -> 2425;
2438 -> 2436;
2438 -> 2425;
2439 -> 2436;
2439 -> 2425;
2440 -> 2436;
2440 -> 2425;
2441 -> 2436;
2441 -> 2425;
2442 -> 2436;
2442 -> 2425;
2443 -> 2436;
2443 -> 2425;
2444 -> 2436;
2444 -> 2425;
2445 -> 2436;
2445 -> 2425;
2446 -> 2436;
2446 -> 2425;
2447 -> 2436;
2447 -> 2425;
2448 -> 2425;
2449 -> 2426;
2449 -> 2448;
2449 -> 2425;
2450 -> 2425;
2451 -> 2431;
2451 -> 2450;
2451 -> 2425;
2452 -> 2426;
2452 -> 2436;
2452 -> 2425;
2453 -> 2427;
2453 -> 2436;
2453 -> 2425;
2454 -> 2428;
2454 -> 2436;
2454 -> 2425;
2455 -> 2434;
2455 -> 2436;
2455 -> 2425;
2456 -> 2431;
2456 -> 2436;
2456 -> 2425;
2457 -> 2432;
2457 -> 2436;
2457 -> 2425;
2458 -> 2433;
2458 -> 2436;
2458 -> 2425;
2459 -> 2430;
2459 -> 2436;
2459 -> 2425;
2460 -> 2430;
2460 -> 2425;
2461 -> 2425;
2462 -> 2460;
2462 -> 2461;
2463 -> 2436;
2463 -> 2461;
2464 -> 2462;
2464 -> 2461;
2465 -> 2425;
2466 -> 2428;
2466 -> 2425;
2467 -> 2427;
2467 -> 2406;
2467 -> 2466;
2468 -> 2467;
2468 -> 2436;
2468 -> 2466;
2469 -> 2429;
2469 -> 2436;
2469 -> 2425;
2470 -> 1998;
2471 -> 1999;
2471 -> 2470;
2472 -> 2471;
2472 -> 2406;
2472 -> 2470;
2473 -> 2472;
2473 -> 1998;
2474 -> 2473;
2475 -> 2474;
2475 -> 2424;
2475 -> 2473;
2476 -> 1998;
2477 -> 1999;
2477 -> 2476;
2478 -> 2476;
2479 -> 2477;
2479 -> 2478;
2480 -> 2478;
2481 -> 2479;
2481 -> 2480;
2482 -> 2480;
2483 -> 2481;
2483 -> 2482;
2484 -> 2483;
2484 -> 2406;
2484 -> 2482;
2485 -> 2483;
2485 -> 2406;
2485 -> 2482;
2486 -> 2485;
2486 -> 2480;
2487 -> 2481;
2487 -> 2406;
2487 -> 2480;
2488 -> 2476;
2489 -> 2487;
2489 -> 1998;
2490 -> 1998;
2491 -> 2489;
2491 -> 2490;
2492 -> 2424;
2492 -> 2490;
2493 -> 2491;
2493 -> 2487;
2493 -> 2490;
2494 -> 2492;
2494 -> 2493;
2495 -> 2493;
2496 -> 2494;
2496 -> 2495;
2496 -> 2493;
2496 -> 2436;
2496 -> 2437;
2496 -> 2452;
2496 -> 2438;
2496 -> 2454;
2496 -> 2439;
2496 -> 2469;
2496 -> 2440;
2496 -> 2456;
2496 -> 2441;
2496 -> 2459;
2496 -> 2442;
2496 -> 2453;
2496 -> 2443;
2496 -> 2457;
2496 -> 2444;
2496 -> 2468;
2496 -> 2445;
2496 -> 2458;
2496 -> 2446;
2496 -> 2475;
2496 -> 2447;
2496 -> 2455;
2496 -> 1149;
2496 -> 2467;
2496 -> 2474;
2497 -> 2496;
2497 -> 2495;
2498 -> 2496;
2498 -> 2495;
2499 -> 2496;
2499 -> 2495;
2500 -> 2499;
2500 -> 2496;
2500 -> 2495;
2501 -> 2497;
2501 -> 2495;
2502 -> 2495;
2503 -> 2500;
2503 -> 2502;
2504 -> 2501;
2504 -> 2502;
2505 -> 2502;
2506 -> 2503;
2506 -> 2505;
2506 -> 2502;
2507 -> 2495;
2508 -> 2499;
2508 -> 2496;
2508 -> 2495;
2509 -> 2495;
2510 -> 2499;
2510 -> 2508;
2510 -> 2509;
2511 -> 2510;
2511 -> 2495;
2512 -> 2497;
2512 -> 2511;
2513 -> 2511;
2514 -> 2512;
2514 -> 2513;
2515 -> 2499;
2515 -> 2513;
2516 -> 2513;
2517 -> 2515;
2517 -> 2508;
2517 -> 2513;
2518 -> 2517;
2518 -> 2511;
2519 -> 2518;
2519 -> 2511;
2520 -> 2495;
2521 -> 2496;
2521 -> 2520;
2521 -> 2519;
2521 -> 2493;
2522 -> 1998;
2523 -> 1998;
2524 -> 2424;
2524 -> 2523;
2525 -> 2524;
2525 -> 2521;
2525 -> 2523;
2526 -> 2523;
2527 -> 2525;
2527 -> 2526;
2527 -> 2523;
2528 -> 2523;
2529 -> 2528;
2529 -> 2523;
2530 -> 2525;
2530 -> 2529;
2530 -> 2521;
2530 -> 2523;
2531 -> 2530;
2532 -> 1998;
2533 -> 1998;
2534 -> 2000;
2534 -> 2533;
2534 -> 1998;
2535 -> 2004;
2535 -> 2534;
2536 -> 2534;
2537 -> 2535;
2537 -> 2536;
2538 -> 2000;
2538 -> 2536;
2539 -> 2538;
2539 -> 2531;
2539 -> 2536;
2540 -> 2539;
2540 -> 2534;
2541 -> 2540;
2541 -> 2534;
2542 -> 2004;
2542 -> 2534;
2543 -> 2534;
2544 -> 2541;
2544 -> 2543;
2545 -> 2542;
2545 -> 2543;
2546 -> 2424;
2546 -> 2543;
2547 -> 2544;
2547 -> 2543;
2548 -> 2534;
2549 -> 2004;
2549 -> 2534;
2550 -> 2534;
2551 -> 2549;
2551 -> 2550;
2552 -> 2000;
2552 -> 2550;
2553 -> 2550;
2554 -> 2551;
2554 -> 2550;
2555 -> 2550;
2556 -> 2554;
2556 -> 2555;
2557 -> 2552;
2557 -> 2555;
2558 -> 2555;
2559 -> 2557;
2559 -> 2558;
2560 -> 2558;
2561 -> 2560;
2561 -> 2559;
2561 -> 2558;
2562 -> 2558;
2563 -> 2559;
2563 -> 2562;
2564 -> 2563;
2564 -> 2531;
2564 -> 2561;
2564 -> 2562;
2565 -> 2564;
2565 -> 2558;
2566 -> 2565;
2566 -> 2555;
2567 -> 2555;
2568 -> 2557;
2568 -> 2567;
2569 -> 2568;
2569 -> 2564;
2569 -> 2567;
2570 -> 2569;
2570 -> 2555;
2571 -> 2570;
2572 -> 2566;
2572 -> 2571;
2572 -> 2570;
2573 -> 2572;
2574 -> 2550;
2575 -> 2553;
2575 -> 2550;
2576 -> 2552;
2576 -> 2569;
2576 -> 2550;
2577 -> 2575;
2577 -> 2576;
2577 -> 2553;
2577 -> 2569;
2577 -> 2550;
2578 -> 2553;
2578 -> 2550;
2579 -> 2552;
2579 -> 2577;
2579 -> 2550;
2580 -> 2553;
2580 -> 2550;
2581 -> 2552;
2581 -> 2579;
2581 -> 2550;
2582 -> 2553;
2582 -> 2550;
2583 -> 2552;
2583 -> 2581;
2583 -> 2550;
2584 -> 2553;
2584 -> 2550;
2585 -> 2552;
2585 -> 2583;
2585 -> 2550;
2586 -> 2553;
2586 -> 2550;
2587 -> 2552;
2587 -> 2585;
2587 -> 2550;
2588 -> 2553;
2588 -> 2550;
2589 -> 2552;
2589 -> 2587;
2589 -> 2550;
2590 -> 2553;
2590 -> 2550;
2591 -> 2552;
2591 -> 2589;
2591 -> 2550;
2592 -> 2553;
2592 -> 2591;
2592 -> 2550;
2593 -> 2592;
2593 -> 2534;
2594 -> 2593;
2594 -> 2534;
2595 -> 2004;
2595 -> 2534;
2596 -> 2534;
2597 -> 2594;
2597 -> 2596;
2598 -> 2595;
2598 -> 2596;
2599 -> 2424;
2599 -> 2596;
2600 -> 2597;
2600 -> 2596;
2601 -> 2534;
2602 -> 2534;
2603 -> 1999;
2603 -> 2602;
2604 -> 2603;
2604 -> 2591;
2604 -> 2602;
2605 -> 2604;
2605 -> 2534;
2606 -> 2424;
2606 -> 2534;
2607 -> 2000;
2607 -> 2534;
2608 -> 2004;
2608 -> 2534;
2609 -> 2534;
2610 -> 2605;
2610 -> 2609;
2611 -> 0;
2611 -> 2609;
2612 -> 2605;
2612 -> 2611;
2612 -> 0;
2612 -> 2534;
2613 -> 2605;
2613 -> 2609;
2614 -> 2609;
2615 -> 2605;
2615 -> 2614;
2615 -> 2612;
2615 -> 2534;
2616 -> 2534;
2617 -> 2424;
2617 -> 2616;
2618 -> 2617;
2618 -> 2615;
2618 -> 2616;
2619 -> 2616;
2620 -> 2618;
2620 -> 2619;
2620 -> 2616;
2621 -> 2616;
2622 -> 2621;
2622 -> 2616;
2623 -> 2534;
2624 -> 2000;
2624 -> 2618;
2624 -> 2534;
2625 -> 2534;
2626 -> 2624;
2626 -> 2625;
2626 -> 2534;
2627 -> 1998;
2628 -> 2000;
2628 -> 2627;
2628 -> 1998;
2629 -> 2424;
2629 -> 2618;
2629 -> 2000;
2629 -> 1998;
2630 -> 1998;
2631 -> 1999;
2631 -> 2630;
2632 -> 2631;
2632 -> 2618;
2632 -> 2630;
2633 -> 2632;
2633 -> 1998;
2634 -> 1998;
2635 -> 2005;
2635 -> 2634;
2635 -> 1998;
2636 -> 1999;
2636 -> 2635;
2637 -> 2004;
2637 -> 2635;
2638 -> 2006;
2638 -> 2635;
2639 -> 2635;
2640 -> 2636;
2640 -> 2639;
2641 -> 2637;
2641 -> 2639;
2642 -> 2638;
2642 -> 2639;
2643 -> 2639;
2644 -> 2640;
2644 -> 2643;
2645 -> 2643;
2646 -> 2644;
2646 -> 2645;
2647 -> 2645;
2648 -> 2646;
2648 -> 2647;
2649 -> 2648;
2649 -> 2633;
2649 -> 2647;
2650 -> 2648;
2650 -> 2633;
2650 -> 2647;
2651 -> 2650;
2651 -> 2645;
2652 -> 2646;
2652 -> 2633;
2652 -> 2645;
2653 -> 2652;
2653 -> 2639;
2654 -> 2642;
2654 -> 2639;
2655 -> 2654;
2655 -> 2653;
2655 -> 1149;
2655 -> 2652;
2655 -> 2639;
2656 -> 2639;
2657 -> 2641;
2657 -> 2655;
2657 -> 2639;
2658 -> 2635;
2659 -> 2635;
2660 -> 2000;
2660 -> 2659;
2660 -> 2635;
2661 -> 2414;
2661 -> 2659;
2661 -> 2635;
2662 -> 2660;
2662 -> 2661;
2662 -> 2635;
2663 -> 2635;
2664 -> 1999;
2664 -> 2663;
2665 -> 2664;
2665 -> 2657;
2665 -> 2663;
2666 -> 2665;
2666 -> 2635;
2667 -> 2414;
2667 -> 2666;
2668 -> 2004;
2668 -> 2666;
2669 -> 2666;
2670 -> 2667;
2670 -> 2669;
2671 -> 2667;
2671 -> 2669;
2672 -> 2667;
2672 -> 2669;
2673 -> 2667;
2673 -> 2669;
2674 -> 2670;
2674 -> 2669;
2675 -> 2669;
2676 -> 2671;
2676 -> 2669;
2677 -> 2672;
2677 -> 2669;
2678 -> 2669;
2679 -> 2674;
2679 -> 2678;
2680 -> 2675;
2680 -> 2678;
2681 -> 2676;
2681 -> 2678;
2682 -> 2675;
2682 -> 2678;
2683 -> 2677;
2683 -> 2678;
2684 -> 2673;
2684 -> 2678;
2685 -> 2679;
2685 -> 2678;
2686 -> 2678;
2687 -> 2682;
2687 -> 2686;
2687 -> 2678;
2688 -> 2679;
2688 -> 2678;
2689 -> 2680;
2689 -> 2678;
2690 -> 2681;
2690 -> 2678;
2691 -> 2683;
2691 -> 2678;
2692 -> 2678;
2693 -> 2688;
2693 -> 2692;
2694 -> 2689;
2694 -> 2692;
2695 -> 2690;
2695 -> 2692;
2696 -> 2691;
2696 -> 2692;
2697 -> 2684;
2697 -> 2692;
2698 -> 2692;
2699 -> 2692;
2700 -> 2693;
2700 -> 2685;
2700 -> 2692;
2701 -> 2700;
2701 -> 2685;
2701 -> 2692;
2702 -> 2693;
2702 -> 2685;
2702 -> 2692;
2703 -> 2693;
2703 -> 2702;
2703 -> 2692;
2704 -> 2696;
2704 -> 2703;
2705 -> 2692;
2706 -> 2697;
2706 -> 2702;
2706 -> 2705;
2706 -> 2692;
2707 -> 2693;
2707 -> 2702;
2707 -> 2692;
2708 -> 2678;
2709 -> 2682;
2709 -> 2708;
2709 -> 2678;
2710 -> 2707;
2710 -> 2709;
2711 -> 1975;
2712 -> 1989;
2712 -> 1975;
2713 -> 2712;
2713 -> 2710;
2713 -> 1975;
2714 -> 1974;
2714 -> 2713;
2715 -> 1989;
2715 -> 2713;
2716 -> 2713;
2717 -> 2714;
2717 -> 2716;
2718 -> 2715;
2718 -> 2716;
2719 -> 1157;
2719 -> 2716;
2720 -> 2719;
2720 -> 2713;
2720 -> 2716;
2721 -> 2719;
2721 -> 2713;
2721 -> 2716;
2722 -> 2713;
2723 -> 1154;
2723 -> 1975;
2724 -> 1989;
2724 -> 1975;
2725 -> 1156;
2725 -> 1975;
2726 -> 2723;
2726 -> 2724;
2726 -> 2725;
2726 -> 1157;
2726 -> 2713;
2726 -> 1149;
2726 -> 1975;
2727 -> 1975;
2728 -> 1972;
2728 -> 2726;
2728 -> 1975;
2729 -> 939;
2730 -> 945;
2730 -> 2729;
2730 -> 2726;
2730 -> 914;
2731 -> 945;
2731 -> 939;
2732 -> 945;
2732 -> 939;
2733 -> 945;
2733 -> 939;
2734 -> 945;
2734 -> 939;
2735 -> 945;
2735 -> 939;
2736 -> 945;
2736 -> 939;
2737 -> 945;
2737 -> 939;
2738 -> 939;
2739 -> 2731;
2739 -> 939;
2740 -> 2733;
2740 -> 939;
2741 -> 2738;
2741 -> 939;
2742 -> 2737;
2742 -> 2739;
2742 -> 2740;
2742 -> 2741;
2742 -> 2730;
2742 -> 2738;
2742 -> 939;
2743 -> 2731;
2743 -> 2742;
2743 -> 939;
2744 -> 939;
2745 -> 2737;
2745 -> 2744;
2746 -> 2744;
2747 -> 2745;
2747 -> 2746;
2748 -> 2747;
2748 -> 2742;
2748 -> 2746;
2749 -> 2747;
2749 -> 2742;
2749 -> 2746;
2750 -> 2749;
2750 -> 2744;
2751 -> 2745;
2751 -> 2742;
2751 -> 2744;
2752 -> 2751;
2752 -> 939;
2753 -> 939;
2754 -> 2738;
2754 -> 939;
2755 -> 939;
2756 -> 2754;
2756 -> 2755;
2757 -> 2737;
2757 -> 2755;
2758 -> 2755;
2759 -> 2757;
2759 -> 2758;
2760 -> 2758;
2761 -> 2759;
2761 -> 2760;
2762 -> 2761;
2762 -> 2752;
2762 -> 2760;
2763 -> 2761;
2763 -> 2752;
2763 -> 2760;
2764 -> 2763;
2764 -> 2758;
2765 -> 2759;
2765 -> 2752;
2765 -> 2758;
2766 -> 2765;
2766 -> 2755;
2767 -> 2755;
2768 -> 2767;
2768 -> 2766;
2768 -> 2765;
2768 -> 2755;
2769 -> 2755;
2770 -> 2769;
2770 -> 939;
2771 -> 2735;
2771 -> 939;
2772 -> 2738;
2772 -> 939;
2773 -> 2736;
2773 -> 939;
2774 -> 2771;
2774 -> 2772;
2774 -> 2773;
2774 -> 2737;
2774 -> 2765;
2774 -> 2730;
2774 -> 939;
2775 -> 939;
2776 -> 2736;
2776 -> 2730;
2776 -> 2774;
2776 -> 939;
2777 -> 939;
2778 -> 2734;
2778 -> 939;
2779 -> 939;
2784 -> 2781;
2784 -> 2780;
2785 -> 2782;
2785 -> 2780;
2786 -> 2783;
2786 -> 2780;
2787 -> 2780;
2788 -> 2737;
2788 -> 939;
2789 -> 2778;
2789 -> 939;
2790 -> 2732;
2790 -> 939;
2791 -> 2777;
2791 -> 939;
2792 -> 2736;
2792 -> 939;
2793 -> 939;
2794 -> 939;
2795 -> 2788;
2795 -> 2794;
2796 -> 2789;
2796 -> 2794;
2797 -> 2790;
2797 -> 2794;
2798 -> 2791;
2798 -> 2794;
2799 -> 2792;
2799 -> 2794;
2800 -> 2793;
2800 -> 2794;
2801 -> 2793;
2801 -> 2794;
2802 -> 2794;
2803 -> 2794;
2804 -> 2797;
2804 -> 2803;
2804 -> 2794;
2805 -> 2794;
2806 -> 2795;
2806 -> 2805;
2807 -> 2805;
2808 -> 2806;
2808 -> 2807;
2809 -> 2808;
2809 -> 2776;
2809 -> 2807;
2810 -> 2808;
2810 -> 2776;
2810 -> 2807;
2811 -> 2810;
2811 -> 2805;
2812 -> 2806;
2812 -> 2776;
2812 -> 2805;
2813 -> 2812;
2813 -> 2794;
2814 -> 2813;
2814 -> 2796;
2814 -> 2794;
2815 -> 2795;
2815 -> 2794;
2816 -> 2802;
2816 -> 2794;
2817 -> 2800;
2817 -> 2794;
2818 -> 2801;
2818 -> 2794;
2819 -> 2794;
2820 -> 2798;
2820 -> 2794;
2821 -> 2799;
2821 -> 2794;
2822 -> 2794;
2823 -> 2814;
2823 -> 2822;
2824 -> 2815;
2824 -> 2822;
2825 -> 2816;
2825 -> 2822;
2826 -> 2817;
2826 -> 2822;
2827 -> 2818;
2827 -> 2822;
2828 -> 2819;
2828 -> 2822;
2829 -> 2819;
2829 -> 2822;
2830 -> 2820;
2830 -> 2822;
2831 -> 2821;
2831 -> 2822;
2832 -> 2819;
2832 -> 2822;
2833 -> 2822;
2834 -> 2833;
2834 -> 2822;
2835 -> 2833;
2835 -> 2822;
2836 -> 2833;
2836 -> 2822;
2837 -> 2833;
2837 -> 2822;
2838 -> 2833;
2838 -> 2822;
2839 -> 2833;
2839 -> 2822;
2840 -> 2833;
2840 -> 2822;
2841 -> 2833;
2841 -> 2822;
2842 -> 2833;
2842 -> 2822;
2843 -> 2833;
2843 -> 2822;
2844 -> 2833;
2844 -> 2822;
2845 -> 2833;
2845 -> 2822;
2846 -> 2823;
2846 -> 2833;
2846 -> 2822;
2847 -> 2824;
2847 -> 2833;
2847 -> 2822;
2848 -> 2825;
2848 -> 2833;
2848 -> 2822;
2849 -> 2826;
2849 -> 2833;
2849 -> 2822;
2850 -> 2827;
2850 -> 2833;
2850 -> 2822;
2851 -> 2828;
2851 -> 2833;
2851 -> 2822;
2852 -> 2829;
2852 -> 2833;
2852 -> 2822;
2853 -> 2830;
2853 -> 2833;
2853 -> 2822;
2854 -> 2831;
2854 -> 2833;
2854 -> 2822;
2855 -> 2794;
2856 -> 2795;
2856 -> 2855;
2857 -> 2855;
2858 -> 2856;
2858 -> 2857;
2859 -> 2858;
2859 -> 2812;
2859 -> 2857;
2860 -> 2858;
2860 -> 2812;
2860 -> 2857;
2861 -> 2860;
2861 -> 2855;
2862 -> 2856;
2862 -> 2812;
2862 -> 2855;
2863 -> 2862;
2863 -> 2794;
2864 -> 2863;
2864 -> 2819;
2864 -> 2862;
2864 -> 2833;
2864 -> 2834;
2864 -> 2846;
2864 -> 2835;
2864 -> 2847;
2864 -> 2836;
2864 -> 2848;
2864 -> 2837;
2864 -> 2849;
2864 -> 2838;
2864 -> 2850;
2864 -> 2839;
2864 -> 2851;
2864 -> 2840;
2864 -> 2852;
2864 -> 2841;
2864 -> 2853;
2864 -> 2842;
2864 -> 2843;
2864 -> 2844;
2864 -> 2845;
2864 -> 2854;
2864 -> 2793;
2864 -> 2777;
2864 -> 2776;
2864 -> 2794;
2865 -> 2794;
2866 -> 2864;
2866 -> 2865;
2867 -> 2864;
2867 -> 2865;
2868 -> 2867;
2868 -> 2864;
2868 -> 2865;
2869 -> 2866;
2869 -> 2868;
2869 -> 2865;
2870 -> 2869;
2871 -> 2869;
2872 -> 2869;
2873 -> 2871;
2873 -> 2872;
2874 -> 2867;
2874 -> 2872;
2875 -> 2874;
2875 -> 2868;
2875 -> 2872;
2876 -> 2872;
2877 -> 2875;
2878 -> 2869;
2879 -> 2869;
2880 -> 2878;
2880 -> 2879;
2881 -> 2867;
2881 -> 2879;
2882 -> 2881;
2882 -> 2868;
2882 -> 2879;
2883 -> 2879;
2884 -> 2882;
2885 -> 2869;
2886 -> 2867;
2886 -> 2885;
2887 -> 2886;
2887 -> 2868;
2887 -> 2885;
2888 -> 2869;
2889 -> 2869;
2890 -> 2889;
2890 -> 2869;
2891 -> 2890;
2892 -> 2890;
2893 -> 2891;
2893 -> 2892;
2894 -> 2867;
2894 -> 2892;
2895 -> 2894;
2895 -> 2868;
2895 -> 2892;
2896 -> 2892;
2897 -> 2895;
2898 -> 2890;
2899 -> 2867;
2899 -> 2898;
2900 -> 2899;
2900 -> 2868;
2900 -> 2887;
2900 -> 2898;
2901 -> 2890;
2902 -> 2890;
2903 -> 2867;
2903 -> 2868;
2903 -> 2902;
2903 -> 2890;
2904 -> 2890;
2905 -> 2902;
2905 -> 2904;
2906 -> 2902;
2906 -> 2904;
2907 -> 2867;
2907 -> 2904;
2908 -> 2905;
2908 -> 2904;
2909 -> 2906;
2909 -> 2904;
2910 -> 2908;
2910 -> 2909;
2910 -> 2904;
2911 -> 2904;
2912 -> 2910;
2912 -> 2911;
2913 -> 2907;
2913 -> 2911;
2914 -> 2913;
2914 -> 2868;
2914 -> 2911;
2915 -> 2911;
2916 -> 2914;
2917 -> 2904;
2918 -> 2890;
2919 -> 2867;
2919 -> 2918;
2920 -> 2919;
2920 -> 2868;
2920 -> 2887;
2920 -> 2900;
2920 -> 2918;
2921 -> 2918;
2922 -> 2919;
2922 -> 2868;
2922 -> 2887;
2922 -> 2900;
2922 -> 2920;
2922 -> 2921;
2922 -> 2918;
2923 -> 2890;
2924 -> 2890;
2925 -> 2890;
2926 -> 2924;
2926 -> 2925;
2927 -> 2867;
2927 -> 2925;
2928 -> 2927;
2928 -> 2868;
2928 -> 2925;
2929 -> 2925;
2930 -> 2928;
2931 -> 2869;
2932 -> 2869;
2933 -> 2931;
2933 -> 2932;
2934 -> 2867;
2934 -> 2932;
2935 -> 2934;
2935 -> 2868;
2935 -> 2932;
2936 -> 2932;
2937 -> 2935;
2938 -> 2869;
2939 -> 2867;
2939 -> 2938;
2940 -> 2939;
2940 -> 2868;
2940 -> 2887;
2940 -> 2900;
2940 -> 2920;
2940 -> 2938;
2941 -> 2869;
2942 -> 2867;
2942 -> 2868;
2942 -> 2865;
2943 -> 2866;
2943 -> 2868;
2943 -> 2887;
2943 -> 2900;
2943 -> 2920;
2943 -> 2940;
2943 -> 2865;
2944 -> 2867;
2944 -> 2868;
2944 -> 2887;
2944 -> 2900;
2944 -> 2920;
2944 -> 2940;
2944 -> 2943;
2945 -> 2867;
2945 -> 2943;
2946 -> 2945;
2946 -> 2943;
2946 -> 2944;
2946 -> 2868;
2946 -> 2887;
2946 -> 2900;
2946 -> 2920;
2946 -> 2940;
2947 -> 2943;
2948 -> 2946;
2948 -> 2947;
2949 -> 2946;
2949 -> 2947;
2950 -> 2949;
2950 -> 2946;
2950 -> 2947;
2951 -> 2947;
2952 -> 2949;
2952 -> 2950;
2952 -> 2951;
2952 -> 2947;
2953 -> 2948;
2953 -> 2947;
2954 -> 2947;
2955 -> 2953;
2955 -> 2954;
2956 -> 2949;
2956 -> 2954;
2957 -> 2956;
2957 -> 2950;
2957 -> 2954;
2958 -> 2955;
2958 -> 2954;
2959 -> 2954;
2960 -> 2958;
2960 -> 2959;
2961 -> 2960;
2961 -> 2959;
2962 -> 2961;
2962 -> 2957;
2962 -> 2959;
2963 -> 2954;
2964 -> 2956;
2964 -> 2962;
2964 -> 2963;
2964 -> 2954;
2965 -> 2955;
2965 -> 2954;
2966 -> 2965;
2966 -> 2962;
2966 -> 2954;
2967 -> 2966;
2967 -> 2954;
2968 -> 2954;
2969 -> 2954;
2970 -> 2969;
2970 -> 2954;
2971 -> 2955;
2971 -> 2954;
2972 -> 2968;
2972 -> 2954;
2973 -> 2969;
2973 -> 2954;
2974 -> 2954;
2975 -> 2971;
2975 -> 2974;
2976 -> 2972;
2976 -> 2974;
2977 -> 2973;
2977 -> 2974;
2978 -> 2956;
2978 -> 2974;
2979 -> 0;
2979 -> 2974;
2980 -> 2974;
2981 -> 2974;
2982 -> 2975;
2982 -> 2966;
2982 -> 2974;
2983 -> 2982;
2983 -> 2966;
2984 -> 2983;
2984 -> 2979;
2984 -> 2982;
2985 -> 2984;
2985 -> 2982;
2986 -> 2982;
2987 -> 2978;
2987 -> 2986;
2987 -> 2982;
2988 -> 2987;
2988 -> 2982;
2989 -> 2974;
2990 -> 2981;
2990 -> 2989;
2990 -> 2974;
2991 -> 0;
2991 -> 2990;
2992 -> 2974;
2993 -> 2992;
2993 -> 2954;
2994 -> 2991;
2994 -> 0;
2994 -> 2954;
2995 -> 2985;
2995 -> 0;
2995 -> 2994;
2996 -> 2994;
2997 -> 2947;
2998 -> 2949;
2998 -> 2987;
2998 -> 2947;
2999 -> 2948;
2999 -> 2987;
2999 -> 2998;
3000 -> 2949;
3000 -> 2999;
3001 -> 2949;
3001 -> 2999;
3002 -> 3001;
3002 -> 2999;
3002 -> 3000;
3003 -> 2999;
3004 -> 3003;
3005 -> 3002;
3005 -> 3004;
3005 -> 3003;
3006 -> 3002;
3006 -> 3003;
3007 -> 3003;
3008 -> 3003;
3009 -> 3008;
3009 -> 3003;
3010 -> 3007;
3010 -> 3003;
3011 -> 3008;
3011 -> 3003;
3012 -> 0;
3012 -> 3003;
3013 -> 3003;
3014 -> 3003;
3015 -> 3002;
3016 -> 3015;
3016 -> 3012;
3016 -> 3002;
3017 -> 3016;
3017 -> 3002;
3018 -> 3002;
3019 -> 3003;
3020 -> 3014;
3020 -> 3019;
3020 -> 3003;
3021 -> 0;
3021 -> 3020;
3022 -> 3003;
3023 -> 3021;
3023 -> 0;
3023 -> 3003;
3024 -> 3017;
3024 -> 0;
3024 -> 3023;
3025 -> 3023;
3026 -> 3002;
3027 -> 3002;
3028 -> 3002;
3029 -> 3002;
3030 -> 3029;
3030 -> 3002;
3031 -> 3028;
3031 -> 3002;
3032 -> 3029;
3032 -> 3002;
3033 -> 0;
3033 -> 3002;
3034 -> 3002;
3035 -> 3002;
3036 -> 3015;
3036 -> 3033;
3036 -> 3002;
3037 -> 3036;
3037 -> 3002;
3038 -> 3002;
3039 -> 3035;
3039 -> 3038;
3039 -> 3002;
3040 -> 0;
3040 -> 3039;
3041 -> 3002;
3042 -> 3040;
3042 -> 0;
3042 -> 3002;
3043 -> 3037;
3043 -> 0;
3043 -> 3042;
3044 -> 3042;
3045 -> 3028;
3045 -> 3002;
3046 -> 3045;
3046 -> 3033;
3046 -> 3028;
3047 -> 3046;
3047 -> 3028;
3048 -> 3028;
3049 -> 3047;
3049 -> 0;
3049 -> 3042;
3050 -> 3028;
3051 -> 3028;
3052 -> 3028;
3053 -> 3052;
3053 -> 3028;
3054 -> 3028;
3055 -> 3052;
3055 -> 3028;
3056 -> 0;
3056 -> 3028;
3057 -> 3028;
3058 -> 3028;
3059 -> 3028;
3060 -> 3059;
3060 -> 3056;
3060 -> 3028;
3061 -> 3060;
3061 -> 3028;
3062 -> 3028;
3063 -> 3058;
3063 -> 3062;
3063 -> 3028;
3064 -> 0;
3064 -> 3063;
3065 -> 3028;
3066 -> 3064;
3066 -> 0;
3066 -> 3028;
3067 -> 3061;
3067 -> 0;
3067 -> 3066;
3068 -> 3066;
3069 -> 3052;
3069 -> 3028;
3070 -> 3052;
3070 -> 3028;
3071 -> 3070;
3071 -> 3056;
3071 -> 3052;
3072 -> 3071;
3072 -> 3052;
3073 -> 3052;
3074 -> 3072;
3074 -> 0;
3074 -> 3066;
3075 -> 2866;
3075 -> 3052;
3075 -> 2865;
3076 -> 3075;
3077 -> 3076;
3078 -> 3075;
3079 -> 3075;
3080 -> 3075;
3081 -> 3079;
3081 -> 3080;
3082 -> 2867;
3082 -> 3080;
3083 -> 3082;
3083 -> 3052;
3083 -> 3080;
3084 -> 3080;
3085 -> 3083;
3086 -> 3075;
3087 -> 3086;
3087 -> 3052;
3087 -> 3076;
3088 -> 3086;
3089 -> 3086;
3089 -> 3052;
3089 -> 3076;
3089 -> 3087;
3089 -> 3088;
3090 -> 3075;
3091 -> 3075;
3092 -> 3075;
3093 -> 3091;
3093 -> 3092;
3094 -> 2867;
3094 -> 3092;
3095 -> 3094;
3095 -> 3052;
3095 -> 3092;
3096 -> 3092;
3097 -> 3095;
3098 -> 2794;
3099 -> 2819;
3099 -> 3087;
3099 -> 3098;
3099 -> 2794;
3100 -> 2802;
3100 -> 2794;
3101 -> 2794;
3102 -> 2800;
3102 -> 3101;
3102 -> 2794;
3103 -> 3102;
3104 -> 2795;
3104 -> 3103;
3105 -> 3103;
3106 -> 3104;
3106 -> 3087;
3106 -> 3105;
3107 -> 3105;
3108 -> 3106;
3108 -> 3102;
3109 -> 3108;
3110 -> 2798;
3110 -> 3108;
3111 -> 2799;
3111 -> 3108;
3112 -> 3108;
3113 -> 3109;
3113 -> 3112;
3114 -> 3109;
3114 -> 3112;
3115 -> 3110;
3115 -> 3112;
3116 -> 3111;
3116 -> 3112;
3117 -> 3113;
3117 -> 3112;
3118 -> 2735;
3118 -> 939;
3119 -> 2777;
3119 -> 939;
3120 -> 2736;
3120 -> 939;
3121 -> 3118;
3121 -> 3119;
3121 -> 3120;
3121 -> 2737;
3121 -> 3117;
3121 -> 939;
3122 -> 939;
3123 -> 945;
3123 -> 939;
3124 -> 945;
3124 -> 939;
3125 -> 945;
3125 -> 939;
3126 -> 945;
3126 -> 939;
3127 -> 939;
3128 -> 3126;
3128 -> 3121;
3128 -> 3127;
3128 -> 939;
3129 -> 3123;
3129 -> 3127;
3129 -> 939;
3130 -> 3128;
3130 -> 3129;
3130 -> 939;
3131 -> 3123;
3131 -> 939;
3132 -> 939;
3133 -> 3131;
3133 -> 3132;
3134 -> 3126;
3134 -> 3132;
3135 -> 3132;
3136 -> 3134;
3136 -> 3121;
3136 -> 3135;
3136 -> 3132;
3137 -> 939;
3138 -> 945;
3138 -> 939;
3139 -> 939;
3140 -> 3138;
3140 -> 3139;
3141 -> 3139;
3142 -> 3140;
3142 -> 3141;
3143 -> 3141;
3144 -> 3142;
3144 -> 3143;
3145 -> 3143;
3146 -> 3144;
3146 -> 3145;
3147 -> 3146;
3147 -> 3121;
3147 -> 3145;
3148 -> 3146;
3148 -> 3121;
3148 -> 3145;
3149 -> 3148;
3149 -> 3143;
3150 -> 3139;
3151 -> 945;
3151 -> 939;
3152 -> 939;
3153 -> 3151;
3153 -> 3152;
3154 -> 3152;
3155 -> 3153;
3155 -> 3154;
3156 -> 3155;
3156 -> 3121;
3156 -> 3154;
3157 -> 3155;
3157 -> 3121;
3157 -> 3154;
3158 -> 3157;
3158 -> 3152;
3159 -> 939;
3160 -> 945;
3160 -> 939;
3161 -> 939;
3162 -> 3160;
3162 -> 3161;
3163 -> 3161;
3164 -> 3162;
3164 -> 3163;
3165 -> 3164;
3165 -> 3121;
3165 -> 3163;
3166 -> 3164;
3166 -> 3121;
3166 -> 3163;
3167 -> 3166;
3167 -> 3161;
3168 -> 945;
3168 -> 939;
3169 -> 945;
3169 -> 939;
3170 -> 939;
3171 -> 3169;
3171 -> 3170;
3172 -> 3171;
3172 -> 3121;
3172 -> 3170;
3173 -> 3172;
3173 -> 939;
3174 -> 3173;
3174 -> 3121;
3174 -> 939;
3175 -> 3173;
3175 -> 939;
3176 -> 3169;
3176 -> 3121;
3176 -> 939;
3177 -> 3173;
3177 -> 3174;
3178 -> 3168;
3178 -> 3121;
3178 -> 3174;
3179 -> 3174;
3180 -> 3177;
3180 -> 3179;
3181 -> 3178;
3181 -> 3179;
3182 -> 3169;
3182 -> 3179;
3183 -> 3182;
3183 -> 3121;
3183 -> 3179;
3184 -> 3180;
3184 -> 3179;
3185 -> 3183;
3185 -> 3184;
3185 -> 3179;
3186 -> 3179;
3187 -> 3180;
3187 -> 3179;
3188 -> 3186;
3188 -> 3179;
3189 -> 3182;
3189 -> 3121;
3189 -> 3187;
3189 -> 3188;
3189 -> 3179;
3190 -> 3180;
3190 -> 3179;
3191 -> 3179;
3192 -> 3179;
3193 -> 3190;
3193 -> 3192;
3194 -> 3191;
3194 -> 3192;
3195 -> 3194;
3195 -> 3192;
3196 -> 3192;
3197 -> 3193;
3197 -> 3196;
3197 -> 3192;
3198 -> 3193;
3198 -> 3194;
3198 -> 3192;
3199 -> 3180;
3199 -> 3179;
3200 -> 3191;
3200 -> 3179;
3201 -> 3182;
3201 -> 3189;
3201 -> 3199;
3201 -> 3200;
3201 -> 3198;
3201 -> 3179;
3202 -> 3201;
3202 -> 3191;
3202 -> 3179;
3203 -> 3180;
3203 -> 3202;
3204 -> 3201;
3204 -> 3202;
3205 -> 3181;
3205 -> 3202;
3206 -> 3202;
3207 -> 3203;
3207 -> 3206;
3208 -> 3204;
3208 -> 3206;
3209 -> 3205;
3209 -> 3206;
3210 -> 3182;
3210 -> 3206;
3211 -> 3210;
3211 -> 3201;
3211 -> 3206;
3212 -> 3206;
3213 -> 3208;
3213 -> 3212;
3214 -> 3213;
3214 -> 3201;
3214 -> 3212;
3215 -> 3214;
3215 -> 3206;
3216 -> 3211;
3216 -> 3201;
3216 -> 3206;
3217 -> 3210;
3217 -> 3201;
3217 -> 0;
3217 -> 3206;
3218 -> 3215;
3218 -> 3201;
3218 -> 3206;
3219 -> 3217;
3219 -> 3218;
3219 -> 3206;
3220 -> 3207;
3220 -> 3201;
3220 -> 3206;
3221 -> 3207;
3221 -> 3201;
3221 -> 3206;
3222 -> 3206;
3223 -> 3210;
3223 -> 3201;
3223 -> 3222;
3223 -> 3206;
3224 -> 3202;
3225 -> 3179;
3226 -> 3180;
3226 -> 3201;
3226 -> 3225;
3226 -> 3179;
3227 -> 3201;
3227 -> 3179;
3228 -> 3201;
3228 -> 3179;
3229 -> 945;
3229 -> 3228;
3229 -> 3226;
3229 -> 914;
3230 -> 945;
3230 -> 939;
3231 -> 3230;
3231 -> 3229;
3231 -> 939;
3232 -> 945;
3232 -> 939;
3233 -> 945;
3233 -> 939;
3234 -> 3233;
3234 -> 3231;
3234 -> 939;
3235 -> 939;
3236 -> 3235;
3236 -> 3234;
3236 -> 3231;
3236 -> 939;
3237 -> 939;
3238 -> 945;
3238 -> 3237;
3238 -> 3231;
3238 -> 914;
3239 -> 945;
3239 -> 939;
3240 -> 945;
3240 -> 939;
3241 -> 3239;
3241 -> 3238;
3241 -> 939;
3242 -> 3240;
3242 -> 3238;
3242 -> 3241;
3243 -> 3239;
3243 -> 3241;
3244 -> 3241;
3245 -> 3242;
3245 -> 3244;
3246 -> 3243;
3246 -> 3244;
3247 -> 3240;
3247 -> 3244;
3248 -> 3245;
3248 -> 3238;
3248 -> 3244;
3249 -> 3248;
3250 -> 3245;
3250 -> 3238;
3250 -> 3248;
3251 -> 3248;
3252 -> 3251;
3252 -> 3250;
3252 -> 3238;
3252 -> 3248;
3253 -> 3246;
3253 -> 3238;
3253 -> 3248;
3254 -> 3247;
3254 -> 3238;
3254 -> 3253;
3255 -> 3245;
3255 -> 3248;
3256 -> 3249;
3256 -> 3248;
3257 -> 3248;
3258 -> 3249;
3258 -> 3256;
3258 -> 3248;
3259 -> 3256;
3259 -> 3244;
3260 -> 945;
3260 -> 3259;
3260 -> 3258;
3260 -> 3256;
3260 -> 914;
3261 -> 945;
3261 -> 939;
3262 -> 3261;
3262 -> 3260;
3262 -> 939;
3263 -> 945;
3263 -> 939;
3264 -> 945;
3264 -> 939;
3265 -> 3263;
3265 -> 3262;
3265 -> 939;
3266 -> 939;
3267 -> 3264;
3267 -> 3262;
3267 -> 3266;
3268 -> 3267;
3268 -> 939;
3269 -> 939;
3270 -> 945;
3270 -> 939;
3271 -> 945;
3271 -> 939;
3272 -> 3270;
3272 -> 3268;
3272 -> 939;
3273 -> 939;
3274 -> 3272;
3274 -> 3273;
3275 -> 3271;
3275 -> 3273;
3276 -> 3275;
3276 -> 3268;
3276 -> 3273;
3277 -> 3276;
3277 -> 939;
3278 -> 939;
3279 -> 945;
3279 -> 939;
3280 -> 945;
3280 -> 939;
3281 -> 3279;
3281 -> 3277;
3281 -> 939;
3282 -> 939;
3283 -> 3281;
3283 -> 3282;
3284 -> 3280;
3284 -> 3282;
3285 -> 3282;
3286 -> 3283;
3286 -> 3282;
3287 -> 3282;
3288 -> 3286;
3288 -> 3287;
3289 -> 3284;
3289 -> 3287;
3290 -> 3287;
3291 -> 3289;
3291 -> 3290;
3292 -> 3290;
3293 -> 3292;
3293 -> 3291;
3293 -> 3290;
3294 -> 3290;
3295 -> 3291;
3295 -> 3294;
3296 -> 3295;
3296 -> 3277;
3296 -> 3293;
3296 -> 3294;
3297 -> 3296;
3297 -> 3290;
3298 -> 3297;
3298 -> 3287;
3299 -> 3287;
3300 -> 3289;
3300 -> 3299;
3301 -> 3296;
3301 -> 3287;
3302 -> 3301;
3303 -> 3298;
3303 -> 3302;
3303 -> 3301;
3304 -> 3303;
3305 -> 3282;
3306 -> 3285;
3306 -> 3282;
3307 -> 3285;
3307 -> 3282;
3308 -> 3285;
3308 -> 3282;
3309 -> 3285;
3309 -> 3282;
3310 -> 3285;
3310 -> 3282;
3311 -> 3285;
3311 -> 3282;
3312 -> 3285;
3312 -> 3282;
3313 -> 3285;
3313 -> 3282;
3314 -> 3285;
3314 -> 3296;
3314 -> 3282;
3315 -> 3314;
3315 -> 939;
3316 -> 939;
3317 -> 945;
3317 -> 939;
3318 -> 945;
3318 -> 939;
3319 -> 939;
3320 -> 3318;
3320 -> 3315;
3320 -> 939;
3321 -> 3319;
3321 -> 3320;
3321 -> 3315;
3321 -> 939;
3322 -> 939;
3323 -> 3319;
3323 -> 3321;
3323 -> 3322;
3323 -> 939;
3324 -> 3319;
3324 -> 3321;
3324 -> 3323;
3325 -> 3324;
3325 -> 3323;
3326 -> 3325;
3326 -> 3324;
3326 -> 0;
3327 -> 3326;
3328 -> 3325;
3328 -> 3324;
3328 -> 3326;
3329 -> 945;
3329 -> 939;
3330 -> 945;
3330 -> 939;
3331 -> 3329;
3331 -> 939;
3332 -> 3329;
3332 -> 3327;
3332 -> 939;
3333 -> 939;
3334 -> 3330;
3334 -> 3333;
3335 -> 3333;
3336 -> 3334;
3336 -> 3335;
3337 -> 3335;
3338 -> 3336;
3338 -> 3337;
3339 -> 3337;
3340 -> 3338;
3340 -> 3339;
3341 -> 3340;
3341 -> 3327;
3341 -> 3339;
3342 -> 3340;
3342 -> 3327;
3342 -> 3339;
3343 -> 3342;
3343 -> 3337;
3344 -> 3333;
3345 -> 3327;
3345 -> 939;
3346 -> 939;
3347 -> 3330;
3347 -> 3346;
3348 -> 945;
3348 -> 939;
3349 -> 945;
3349 -> 939;
3350 -> 945;
3350 -> 939;
3351 -> 945;
3351 -> 939;
3352 -> 939;
3353 -> 3351;
3353 -> 3327;
3353 -> 3352;
3354 -> 3352;
3355 -> 3354;
3356 -> 3355;
3357 -> 3353;
3357 -> 3356;
3358 -> 3357;
3358 -> 3355;
3359 -> 3352;
3360 -> 3353;
3360 -> 939;
3361 -> 3360;
3361 -> 3348;
3361 -> 3353;
3361 -> 939;
3362 -> 939;
3363 -> 3362;
3363 -> 939;
3364 -> 3350;
3364 -> 3363;
3364 -> 3327;
3364 -> 3362;
3364 -> 3353;
3364 -> 939;
3365 -> 939;
3366 -> 3362;
3366 -> 3364;
3366 -> 939;
3367 -> 3366;
3368 -> 3362;
3368 -> 3366;
3368 -> 939;
3369 -> 3367;
3369 -> 939;
3370 -> 945;
3370 -> 3369;
3370 -> 3368;
3370 -> 914;
3371 -> 3329;
3371 -> 3370;
3371 -> 939;
3372 -> 3340;
3372 -> 3370;
3372 -> 3339;
3373 -> 3340;
3373 -> 3370;
3373 -> 3339;
3374 -> 3373;
3374 -> 3337;
3375 -> 3370;
3375 -> 939;
3376 -> 3370;
3376 -> 3356;
3377 -> 3376;
3377 -> 3355;
3378 -> 3370;
3378 -> 939;
3379 -> 3378;
3379 -> 3348;
3379 -> 3370;
3379 -> 939;
3380 -> 945;
3380 -> 939;
3381 -> 945;
3381 -> 939;
3382 -> 939;
3383 -> 945;
3383 -> 3382;
3383 -> 3370;
3383 -> 914;
3384 -> 3329;
3384 -> 3383;
3384 -> 939;
3385 -> 3340;
3385 -> 3383;
3385 -> 3339;
3386 -> 3340;
3386 -> 3383;
3386 -> 3339;
3387 -> 3386;
3387 -> 3337;
3388 -> 3383;
3388 -> 939;
3389 -> 3383;
3389 -> 3356;
3390 -> 3389;
3390 -> 3355;
3391 -> 3383;
3391 -> 939;
3392 -> 3391;
3392 -> 3348;
3392 -> 3383;
3392 -> 939;
3393 -> 3362;
3393 -> 3383;
3394 -> 3383;
3395 -> 3362;
3395 -> 3383;
3396 -> 3395;
3396 -> 3393;
3396 -> 3383;
3397 -> 3383;
3398 -> 3396;
3398 -> 3397;
3398 -> 3383;
3399 -> 3349;
3399 -> 3398;
3400 -> 3396;
3400 -> 3398;
3401 -> 3398;
3402 -> 3399;
3402 -> 3401;
3403 -> 3400;
3403 -> 3401;
3404 -> 3351;
3404 -> 3401;
3405 -> 3403;
3405 -> 3402;
3405 -> 3401;
3406 -> 3405;
3407 -> 3329;
3407 -> 3406;
3407 -> 939;
3408 -> 3340;
3408 -> 3406;
3408 -> 3339;
3409 -> 3340;
3409 -> 3406;
3409 -> 3339;
3410 -> 3409;
3410 -> 3337;
3411 -> 3406;
3411 -> 939;
3412 -> 3406;
3412 -> 3356;
3413 -> 3412;
3413 -> 3355;
3414 -> 3406;
3414 -> 939;
3415 -> 3414;
3415 -> 3348;
3415 -> 3406;
3415 -> 939;
3416 -> 3351;
3416 -> 3406;
3417 -> 945;
3417 -> 939;
3418 -> 945;
3418 -> 939;
3419 -> 3418;
3419 -> 939;
3420 -> 3417;
3420 -> 939;
3421 -> 3418;
3421 -> 3406;
3421 -> 939;
3422 -> 3419;
3422 -> 3420;
3422 -> 3421;
3422 -> 3418;
3422 -> 3406;
3422 -> 939;
3423 -> 939;
3424 -> 3422;
3424 -> 0;
3424 -> 3423;
3425 -> 3423;
3426 -> 3422;
3427 -> 3426;
3427 -> 3422;
3428 -> 3422;
3428 -> 3423;
3429 -> 3423;
3430 -> 3429;
3431 -> 3422;
3431 -> 3430;
3432 -> 3431;
3432 -> 3429;
3433 -> 3423;
3434 -> 3423;
3435 -> 945;
3435 -> 939;
3436 -> 945;
3436 -> 939;
3437 -> 945;
3437 -> 939;
3438 -> 945;
3438 -> 939;
3439 -> 945;
3439 -> 939;
3440 -> 945;
3440 -> 939;
3441 -> 3435;
3441 -> 939;
3442 -> 939;
3443 -> 3438;
3443 -> 3442;
3443 -> 939;
3444 -> 3435;
3444 -> 939;
3445 -> 3436;
3445 -> 939;
3446 -> 3437;
3446 -> 939;
3447 -> 3439;
3447 -> 939;
3448 -> 939;
3449 -> 3444;
3449 -> 3448;
3450 -> 3445;
3450 -> 3448;
3451 -> 3446;
3451 -> 3448;
3452 -> 3447;
3452 -> 3448;
3453 -> 3440;
3453 -> 3448;
3454 -> 3448;
3455 -> 3448;
3456 -> 3449;
3456 -> 3422;
3456 -> 3448;
3457 -> 3456;
3457 -> 3422;
3457 -> 3448;
3458 -> 3449;
3458 -> 3422;
3458 -> 3448;
3459 -> 3452;
3459 -> 3458;
3460 -> 3449;
3460 -> 3422;
3460 -> 3459;
3461 -> 3456;
3461 -> 3459;
3462 -> 3459;
3463 -> 3461;
3463 -> 3462;
3464 -> 3462;
3465 -> 3463;
3465 -> 3464;
3465 -> 3462;
3466 -> 3465;
3467 -> 3463;
3467 -> 3422;
3467 -> 3465;
3468 -> 3462;
3469 -> 3468;
3469 -> 3459;
3470 -> 3460;
3470 -> 3469;
3470 -> 3459;
3471 -> 3449;
3471 -> 3470;
3472 -> 3449;
3472 -> 3422;
3472 -> 3470;
3473 -> 3448;
3474 -> 3453;
3474 -> 3422;
3474 -> 3473;
3474 -> 3448;
3475 -> 939;
3476 -> 3438;
3476 -> 3475;
3476 -> 939;
3477 -> 945;
3477 -> 939;
3478 -> 945;
3478 -> 939;
3479 -> 945;
3479 -> 939;
3480 -> 945;
3480 -> 939;
3481 -> 939;
3482 -> 3479;
3482 -> 3481;
3482 -> 939;
3483 -> 3477;
3483 -> 3422;
3483 -> 939;
3484 -> 3477;
3484 -> 3483;
3485 -> 3478;
3485 -> 3483;
3486 -> 3479;
3486 -> 3483;
3487 -> 3483;
3488 -> 3483;
3489 -> 3484;
3489 -> 3488;
3490 -> 3485;
3490 -> 3488;
3491 -> 3486;
3491 -> 3488;
3492 -> 3487;
3492 -> 3488;
3493 -> 3487;
3493 -> 3488;
3494 -> 3480;
3494 -> 3488;
3495 -> 3489;
3495 -> 3422;
3495 -> 3488;
3496 -> 3488;
3497 -> 3491;
3497 -> 3496;
3497 -> 3488;
3498 -> 3489;
3498 -> 3495;
3498 -> 3488;
3499 -> 3489;
3499 -> 3495;
3499 -> 3498;
3500 -> 3489;
3500 -> 3495;
3500 -> 0;
3500 -> 3488;
3501 -> 3489;
3501 -> 3495;
3501 -> 3488;
3502 -> 3493;
3502 -> 3501;
3503 -> 3502;
3504 -> 3502;
3505 -> 3489;
3505 -> 3495;
3505 -> 3502;
3506 -> 3502;
3507 -> 3505;
3507 -> 3506;
3508 -> 3506;
3509 -> 3507;
3509 -> 3508;
3510 -> 3508;
3511 -> 3509;
3511 -> 3510;
3511 -> 3508;
3512 -> 3508;
3513 -> 3512;
3513 -> 3506;
3514 -> 3489;
3514 -> 3495;
3514 -> 3513;
3515 -> 3489;
3515 -> 3495;
3515 -> 3488;
3516 -> 3494;
3516 -> 3495;
3516 -> 3488;
3517 -> 3489;
3517 -> 3495;
3517 -> 3488;
3518 -> 945;
3518 -> 939;
3519 -> 945;
3519 -> 939;
3520 -> 945;
3520 -> 939;
3521 -> 945;
3521 -> 939;
3522 -> 945;
3522 -> 939;
3523 -> 945;
3523 -> 939;
3524 -> 939;
3525 -> 3520;
3525 -> 3524;
3525 -> 939;
3526 -> 3518;
3526 -> 3516;
3526 -> 939;
3527 -> 3518;
3527 -> 3516;
3527 -> 3526;
3528 -> 3518;
3528 -> 3516;
3528 -> 0;
3528 -> 939;
3529 -> 3518;
3529 -> 3516;
3529 -> 939;
3530 -> 3522;
3530 -> 3529;
3531 -> 3518;
3531 -> 3516;
3531 -> 939;
3532 -> 945;
3532 -> 939;
3533 -> 945;
3533 -> 939;
3534 -> 945;
3534 -> 939;
3535 -> 3534;
3535 -> 3516;
3535 -> 939;
3536 -> 3532;
3536 -> 939;
3537 -> 3535;
3537 -> 3536;
3537 -> 939;
3538 -> 939;
3539 -> 3532;
3539 -> 3538;
3539 -> 939;
3540 -> 939;
3541 -> 3532;
3541 -> 939;
3542 -> 3540;
3542 -> 939;
3543 -> 3534;
3543 -> 3516;
3543 -> 3541;
3543 -> 3542;
3543 -> 939;
3544 -> 3543;
3545 -> 3518;
3545 -> 3544;
3545 -> 939;
3546 -> 3518;
3546 -> 3544;
3546 -> 3545;
3547 -> 3518;
3547 -> 3544;
3547 -> 0;
3547 -> 939;
3548 -> 3518;
3548 -> 3544;
3548 -> 939;
3549 -> 3522;
3549 -> 3548;
3550 -> 3518;
3550 -> 3544;
3550 -> 939;
3551 -> 945;
3551 -> 939;
3552 -> 945;
3552 -> 939;
3553 -> 3551;
3553 -> 939;
3554 -> 939;
3555 -> 3553;
3555 -> 3554;
3555 -> 3544;
3555 -> 939;
3556 -> 3551;
3556 -> 939;
3557 -> 3556;
3557 -> 3544;
3557 -> 3555;
3557 -> 939;
3558 -> 939;
3559 -> 3557;
3559 -> 3558;
3560 -> 3559;
3560 -> 3557;
3560 -> 3558;
3561 -> 3559;
3561 -> 3557;
3561 -> 3560;
3562 -> 3561;
3562 -> 3560;
3563 -> 3560;
3564 -> 3562;
3564 -> 3563;
3565 -> 3564;
3565 -> 3557;
3565 -> 0;
3565 -> 3563;
3566 -> 3564;
3566 -> 3557;
3566 -> 3563;
3567 -> 3563;
3568 -> 3566;
3568 -> 3567;
3569 -> 3567;
3570 -> 3568;
3570 -> 3569;
3570 -> 3567;
3571 -> 3570;
3572 -> 3568;
3572 -> 3557;
3572 -> 3570;
3573 -> 3567;
3574 -> 3573;
3574 -> 3563;
3575 -> 3565;
3575 -> 3574;
3575 -> 3563;
3576 -> 3558;
3577 -> 3576;
3577 -> 939;
3578 -> 3557;
3578 -> 3577;
3578 -> 939;
3579 -> 3551;
3579 -> 939;
3580 -> 3578;
3580 -> 939;
3581 -> 939;
3582 -> 3580;
3582 -> 3581;
3583 -> 3582;
3583 -> 3580;
3583 -> 3581;
3584 -> 3582;
3584 -> 3580;
3584 -> 3583;
3585 -> 3584;
3585 -> 3583;
3586 -> 3583;
3587 -> 3585;
3587 -> 3586;
3588 -> 3587;
3588 -> 3580;
3588 -> 0;
3588 -> 3586;
3589 -> 3587;
3589 -> 3580;
3589 -> 3586;
3590 -> 3586;
3591 -> 3589;
3591 -> 3590;
3592 -> 3590;
3593 -> 3591;
3593 -> 3592;
3593 -> 3590;
3594 -> 3593;
3595 -> 3591;
3595 -> 3580;
3595 -> 3593;
3596 -> 3590;
3597 -> 3596;
3597 -> 3586;
3598 -> 3588;
3598 -> 3597;
3598 -> 3586;
3599 -> 3581;
3600 -> 3578;
3600 -> 939;
3601 -> 3551;
3601 -> 3600;
3602 -> 3600;
3603 -> 3601;
3603 -> 3602;
3603 -> 3544;
3603 -> 3580;
3603 -> 3600;
3604 -> 3478;
3604 -> 3603;
3605 -> 3479;
3605 -> 3603;
3606 -> 3604;
3606 -> 3603;
3607 -> 3605;
3607 -> 3603;
3608 -> 3603;
3609 -> 3603;
3610 -> 3603;
3611 -> 3607;
3611 -> 3610;
3611 -> 3603;
3612 -> 3603;
3613 -> 3603;
3613 -> 3612;
3614 -> 3603;
3614 -> 0;
3615 -> 3603;
3616 -> 3609;
3616 -> 3615;
3617 -> 3616;
3618 -> 3616;
3619 -> 3603;
3619 -> 3616;
3620 -> 3616;
3621 -> 3619;
3621 -> 3620;
3622 -> 3620;
3623 -> 3621;
3623 -> 3622;
3624 -> 3622;
3625 -> 3623;
3625 -> 3624;
3625 -> 3622;
3626 -> 3622;
3627 -> 3626;
3627 -> 3620;
3628 -> 3603;
3628 -> 3627;
3629 -> 3603;
3630 -> 945;
3630 -> 939;
3631 -> 945;
3631 -> 939;
3632 -> 945;
3632 -> 939;
3633 -> 3630;
3633 -> 3603;
3633 -> 939;
3634 -> 939;
3635 -> 3633;
3635 -> 3634;
3635 -> 939;
3636 -> 3631;
3636 -> 0;
3636 -> 3635;
3637 -> 3633;
3637 -> 3631;
3637 -> 3635;
3638 -> 3631;
3638 -> 0;
3638 -> 3637;
3639 -> 3478;
3639 -> 3637;
3640 -> 3479;
3640 -> 3637;
3641 -> 3639;
3641 -> 3637;
3642 -> 3640;
3642 -> 3637;
3643 -> 3637;
3644 -> 3637;
3645 -> 3637;
3646 -> 3642;
3646 -> 3645;
3646 -> 3637;
3647 -> 3637;
3648 -> 3637;
3648 -> 3647;
3649 -> 3637;
3649 -> 0;
3650 -> 3637;
3651 -> 3644;
3651 -> 3650;
3652 -> 3651;
3653 -> 3651;
3654 -> 3637;
3654 -> 3651;
3655 -> 3651;
3656 -> 3654;
3656 -> 3655;
3657 -> 3655;
3658 -> 3656;
3658 -> 3657;
3659 -> 3657;
3660 -> 3658;
3660 -> 3659;
3660 -> 3657;
3661 -> 3657;
3662 -> 3661;
3662 -> 3655;
3663 -> 3637;
3663 -> 3662;
3664 -> 3637;
3665 -> 3518;
3665 -> 3637;
3665 -> 939;
3666 -> 3518;
3666 -> 3637;
3666 -> 3665;
3667 -> 3518;
3667 -> 3637;
3667 -> 0;
3667 -> 939;
3668 -> 3518;
3668 -> 3637;
3668 -> 939;
3669 -> 3522;
3669 -> 3668;
3670 -> 3518;
3670 -> 3637;
3670 -> 939;
3671 -> 3534;
3671 -> 3637;
3671 -> 939;
3672 -> 3637;
3672 -> 3558;
3673 -> 3672;
3673 -> 3637;
3673 -> 3558;
3674 -> 3672;
3674 -> 3637;
3674 -> 3673;
3675 -> 3674;
3675 -> 3673;
3676 -> 3673;
3677 -> 3675;
3677 -> 3676;
3678 -> 3677;
3678 -> 3637;
3678 -> 0;
3678 -> 3676;
3679 -> 3677;
3679 -> 3637;
3679 -> 3676;
3680 -> 3676;
3681 -> 3679;
3681 -> 3680;
3682 -> 3680;
3683 -> 3681;
3683 -> 3682;
3683 -> 3680;
3684 -> 3683;
3685 -> 3681;
3685 -> 3637;
3685 -> 3683;
3686 -> 3680;
3687 -> 3686;
3687 -> 3676;
3688 -> 3678;
3688 -> 3687;
3688 -> 3676;
3689 -> 3637;
3689 -> 3581;
3690 -> 3689;
3690 -> 3637;
3690 -> 3581;
3691 -> 3689;
3691 -> 3637;
3691 -> 3690;
3692 -> 3691;
3692 -> 3690;
3693 -> 3690;
3694 -> 3692;
3694 -> 3693;
3695 -> 3694;
3695 -> 3637;
3695 -> 0;
3695 -> 3693;
3696 -> 3694;
3696 -> 3637;
3696 -> 3693;
3697 -> 3693;
3698 -> 3696;
3698 -> 3697;
3699 -> 3697;
3700 -> 3698;
3700 -> 3699;
3700 -> 3697;
3701 -> 3700;
3702 -> 3698;
3702 -> 3637;
3702 -> 3700;
3703 -> 3697;
3704 -> 3703;
3704 -> 3693;
3705 -> 3695;
3705 -> 3704;
3705 -> 3693;
3706 -> 3449;
3706 -> 3637;
3706 -> 3448;
3707 -> 3706;
3707 -> 3637;
3707 -> 3448;
3708 -> 3449;
3708 -> 3637;
3708 -> 3448;
3709 -> 3452;
3709 -> 3708;
3710 -> 3449;
3710 -> 3637;
3710 -> 3709;
3711 -> 3706;
3711 -> 3709;
3712 -> 3709;
3713 -> 3711;
3713 -> 3712;
3714 -> 3712;
3715 -> 3713;
3715 -> 3714;
3715 -> 3712;
3716 -> 3715;
3717 -> 3713;
3717 -> 3637;
3717 -> 3715;
3718 -> 3712;
3719 -> 3718;
3719 -> 3709;
3720 -> 3710;
3720 -> 3719;
3720 -> 3709;
3721 -> 3449;
3721 -> 3720;
3722 -> 3449;
3722 -> 3637;
3722 -> 3720;
3723 -> 3453;
3723 -> 3637;
3723 -> 3473;
3723 -> 3448;
3724 -> 3660;
3725 -> 3658;
3725 -> 3637;
3725 -> 3660;
3726 -> 945;
3726 -> 939;
3727 -> 3726;
3727 -> 3637;
3727 -> 939;
3728 -> 939;
3729 -> 3168;
3729 -> 3727;
3730 -> 3729;
3730 -> 3727;
3731 -> 3727;
3732 -> 3727;
3733 -> 3233;
3733 -> 3732;
3733 -> 939;
3734 -> 3235;
3734 -> 3733;
3734 -> 3732;
3734 -> 939;
3735 -> 945;
3735 -> 939;
3736 -> 3735;
3736 -> 939;
3737 -> 3736;
3737 -> 3735;
3737 -> 3732;
3737 -> 939;
3738 -> 939;
3739 -> 3263;
3739 -> 3737;
3739 -> 939;
3740 -> 3270;
3740 -> 3737;
3740 -> 939;
3741 -> 3740;
3741 -> 3273;
3742 -> 3279;
3742 -> 3737;
3742 -> 939;
3743 -> 3742;
3743 -> 3282;
3744 -> 3743;
3744 -> 3282;
3745 -> 3744;
3745 -> 3287;
3746 -> 3737;
3746 -> 3290;
3747 -> 3746;
3747 -> 3287;
3748 -> 3737;
3748 -> 3287;
3749 -> 3748;
3750 -> 3747;
3750 -> 3749;
3750 -> 3748;
3751 -> 3750;
3752 -> 3329;
3752 -> 3737;
3752 -> 939;
3753 -> 3340;
3753 -> 3737;
3753 -> 3339;
3754 -> 3340;
3754 -> 3737;
3754 -> 3339;
3755 -> 3754;
3755 -> 3337;
3756 -> 3737;
3756 -> 939;
3757 -> 3737;
3757 -> 3356;
3758 -> 3757;
3758 -> 3355;
3759 -> 3737;
3759 -> 939;
3760 -> 3759;
3760 -> 3348;
3760 -> 3737;
3760 -> 939;
3761 -> 3351;
3761 -> 3737;
3762 -> 3518;
3762 -> 3737;
3762 -> 939;
3763 -> 3518;
3763 -> 3737;
3763 -> 3762;
3764 -> 3518;
3764 -> 3737;
3764 -> 0;
3764 -> 939;
3765 -> 3518;
3765 -> 3737;
3765 -> 939;
3766 -> 3522;
3766 -> 3765;
3767 -> 3766;
3768 -> 3766;
3769 -> 3518;
3769 -> 3737;
3769 -> 3766;
3770 -> 3766;
3771 -> 3769;
3771 -> 3770;
3772 -> 3770;
3773 -> 3771;
3773 -> 3772;
3774 -> 3772;
3775 -> 3773;
3775 -> 3774;
3775 -> 3772;
3776 -> 3772;
3777 -> 3776;
3777 -> 3770;
3778 -> 3518;
3778 -> 3737;
3778 -> 3777;
3779 -> 3518;
3779 -> 3737;
3779 -> 939;
3780 -> 3534;
3780 -> 3737;
3780 -> 939;
3781 -> 3478;
3781 -> 3737;
3782 -> 3479;
3782 -> 3737;
3783 -> 3781;
3783 -> 3737;
3784 -> 3782;
3784 -> 3737;
3785 -> 3737;
3786 -> 3737;
3787 -> 3737;
3788 -> 3784;
3788 -> 3787;
3788 -> 3737;
3789 -> 3737;
3790 -> 3737;
3790 -> 3789;
3791 -> 3737;
3791 -> 0;
3792 -> 3737;
3793 -> 3786;
3793 -> 3792;
3794 -> 3793;
3795 -> 3793;
3796 -> 3737;
3796 -> 3793;
3797 -> 3793;
3798 -> 3796;
3798 -> 3797;
3799 -> 3797;
3800 -> 3798;
3800 -> 3799;
3801 -> 3799;
3802 -> 3800;
3802 -> 3801;
3802 -> 3799;
3803 -> 3799;
3804 -> 3803;
3804 -> 3797;
3805 -> 3737;
3805 -> 3804;
3806 -> 3737;
3807 -> 3534;
3807 -> 3780;
3808 -> 3329;
3808 -> 3807;
3808 -> 939;
3809 -> 3340;
3809 -> 3807;
3809 -> 3339;
3810 -> 3340;
3810 -> 3807;
3810 -> 3339;
3811 -> 3810;
3811 -> 3337;
3812 -> 3807;
3812 -> 939;
3813 -> 3807;
3813 -> 3356;
3814 -> 3813;
3814 -> 3355;
3815 -> 3807;
3815 -> 939;
3816 -> 3815;
3816 -> 3348;
3816 -> 3807;
3816 -> 939;
3817 -> 3478;
3817 -> 3807;
3818 -> 3479;
3818 -> 3807;
3819 -> 3817;
3819 -> 3807;
3820 -> 3818;
3820 -> 3807;
3821 -> 3807;
3822 -> 3807;
3823 -> 3807;
3824 -> 3820;
3824 -> 3823;
3824 -> 3807;
3825 -> 3807;
3826 -> 3807;
3826 -> 3825;
3827 -> 3807;
3827 -> 0;
3828 -> 3807;
3829 -> 3822;
3829 -> 3828;
3830 -> 3829;
3831 -> 3829;
3832 -> 3807;
3832 -> 3829;
3833 -> 3829;
3834 -> 3832;
3834 -> 3833;
3835 -> 3833;
3836 -> 3834;
3836 -> 3835;
3837 -> 3835;
3838 -> 3836;
3838 -> 3837;
3838 -> 3835;
3839 -> 3835;
3840 -> 3839;
3840 -> 3833;
3841 -> 3807;
3841 -> 3840;
3842 -> 3807;
3843 -> 3351;
3843 -> 3807;
3844 -> 3822;
3844 -> 3828;
3845 -> 3807;
3845 -> 3828;
3846 -> 3807;
3846 -> 3845;
3847 -> 3845;
3848 -> 3846;
3848 -> 3847;
3849 -> 3807;
3849 -> 3847;
3850 -> 3848;
3850 -> 3847;
3851 -> 3847;
3852 -> 3849;
3852 -> 3807;
3852 -> 3850;
3852 -> 3851;
3852 -> 3847;
3853 -> 3518;
3853 -> 3852;
3853 -> 939;
3854 -> 3518;
3854 -> 3852;
3854 -> 3853;
3855 -> 3518;
3855 -> 3852;
3855 -> 0;
3855 -> 939;
3856 -> 3522;
3856 -> 3852;
3857 -> 3518;
3857 -> 3852;
3857 -> 939;
3858 -> 3478;
3858 -> 3852;
3859 -> 3479;
3859 -> 3852;
3860 -> 3858;
3860 -> 3852;
3861 -> 3859;
3861 -> 3852;
3862 -> 3852;
3863 -> 3852;
3864 -> 3852;
3865 -> 3861;
3865 -> 3864;
3865 -> 3852;
3866 -> 3852;
3867 -> 3852;
3867 -> 3866;
3868 -> 3852;
3868 -> 0;
3869 -> 3863;
3869 -> 3852;
3870 -> 3869;
3871 -> 3869;
3872 -> 3852;
3872 -> 3869;
3873 -> 3869;
3874 -> 3872;
3874 -> 3873;
3875 -> 3873;
3876 -> 3874;
3876 -> 3875;
3877 -> 3875;
3878 -> 3876;
3878 -> 3877;
3878 -> 3875;
3879 -> 3875;
3880 -> 3879;
3880 -> 3873;
3881 -> 3852;
3881 -> 3880;
3882 -> 3852;
3883 -> 3329;
3883 -> 3852;
3883 -> 939;
3884 -> 3340;
3884 -> 3852;
3884 -> 3339;
3885 -> 3340;
3885 -> 3852;
3885 -> 3339;
3886 -> 3885;
3886 -> 3337;
3887 -> 3852;
3887 -> 939;
3888 -> 3852;
3888 -> 3356;
3889 -> 3888;
3889 -> 3355;
3890 -> 3852;
3890 -> 939;
3891 -> 3890;
3891 -> 3348;
3891 -> 3852;
3891 -> 939;
3892 -> 3351;
3892 -> 3852;
3893 -> 3863;
3893 -> 3852;
3894 -> 945;
3894 -> 939;
3895 -> 939;
3896 -> 3894;
3896 -> 3895;
3897 -> 3895;
3898 -> 3896;
3898 -> 3897;
3899 -> 3898;
3899 -> 3852;
3899 -> 3897;
3900 -> 3898;
3900 -> 3852;
3900 -> 3897;
3901 -> 3900;
3901 -> 3895;
3902 -> 945;
3902 -> 939;
3903 -> 945;
3903 -> 939;
3904 -> 939;
3905 -> 3903;
3905 -> 3904;
3906 -> 939;
3907 -> 945;
3907 -> 939;
3908 -> 3449;
3908 -> 3852;
3908 -> 3448;
3909 -> 3908;
3909 -> 3852;
3909 -> 3448;
3910 -> 3449;
3910 -> 3852;
3910 -> 3448;
3911 -> 3452;
3911 -> 3910;
3912 -> 3449;
3912 -> 3852;
3912 -> 3911;
3913 -> 3908;
3913 -> 3911;
3914 -> 3911;
3915 -> 3913;
3915 -> 3914;
3916 -> 3914;
3917 -> 3915;
3917 -> 3916;
3917 -> 3914;
3918 -> 3917;
3919 -> 3915;
3919 -> 3852;
3919 -> 3917;
3920 -> 3914;
3921 -> 3920;
3921 -> 3911;
3922 -> 3912;
3922 -> 3921;
3922 -> 3911;
3923 -> 3449;
3923 -> 3922;
3924 -> 3449;
3924 -> 3852;
3924 -> 3922;
3925 -> 3453;
3925 -> 3852;
3925 -> 3473;
3925 -> 3448;
3926 -> 3631;
3926 -> 0;
3926 -> 3852;
3927 -> 3856;
3928 -> 3856;
3929 -> 3518;
3929 -> 3852;
3929 -> 3856;
3930 -> 3856;
3931 -> 3929;
3931 -> 3930;
3932 -> 3930;
3933 -> 3931;
3933 -> 3932;
3934 -> 3932;
3935 -> 3933;
3935 -> 3934;
3935 -> 3932;
3936 -> 3932;
3937 -> 3936;
3937 -> 3930;
3938 -> 3518;
3938 -> 3852;
3938 -> 3937;
3939 -> 945;
3939 -> 939;
3940 -> 945;
3940 -> 939;
3941 -> 3940;
3941 -> 3852;
3941 -> 939;
3942 -> 3940;
3942 -> 3852;
3942 -> 939;
3943 -> 3942;
3944 -> 3940;
3944 -> 3943;
3945 -> 3944;
3945 -> 3852;
3945 -> 3943;
3946 -> 3943;
3947 -> 3944;
3947 -> 3852;
3947 -> 3943;
3948 -> 3945;
3948 -> 3852;
3948 -> 3947;
3949 -> 3947;
3950 -> 3949;
3950 -> 3948;
3950 -> 3852;
3950 -> 3947;
3951 -> 3944;
3951 -> 3852;
3951 -> 3943;
3952 -> 3943;
3953 -> 3945;
3953 -> 3852;
3953 -> 3952;
3954 -> 3953;
3954 -> 3943;
3955 -> 3945;
3955 -> 3943;
3956 -> 3946;
3956 -> 3943;
3957 -> 3943;
3958 -> 3955;
3958 -> 3957;
3959 -> 3956;
3959 -> 3957;
3960 -> 3957;
3961 -> 3960;
3961 -> 3957;
3962 -> 3958;
3962 -> 3852;
3962 -> 3957;
3963 -> 3959;
3963 -> 3957;
3964 -> 3957;
3965 -> 3961;
3965 -> 3964;
3966 -> 3962;
3966 -> 3964;
3967 -> 3963;
3967 -> 3964;
3968 -> 3964;
3969 -> 3966;
3969 -> 3968;
3969 -> 3964;
3970 -> 3957;
3971 -> 3957;
3972 -> 3958;
3972 -> 3962;
3972 -> 3971;
3973 -> 3972;
3973 -> 3957;
3974 -> 3960;
3974 -> 3973;
3975 -> 3958;
3975 -> 3962;
3975 -> 3973;
3976 -> 3959;
3976 -> 3973;
3977 -> 3973;
3978 -> 3974;
3978 -> 3977;
3979 -> 3975;
3979 -> 3977;
3980 -> 3976;
3980 -> 3977;
3981 -> 3977;
3982 -> 3979;
3982 -> 3981;
3982 -> 3977;
3983 -> 3973;
3984 -> 3960;
3984 -> 3957;
3985 -> 3984;
3985 -> 3943;
3986 -> 3946;
3986 -> 3943;
3987 -> 3986;
3987 -> 3942;
3988 -> 3987;
3988 -> 3940;
3988 -> 3942;
3989 -> 3942;
3990 -> 3940;
3990 -> 3975;
3990 -> 3988;
3990 -> 3986;
3990 -> 3989;
3990 -> 3942;
3991 -> 3940;
3991 -> 3975;
3991 -> 3988;
3991 -> 939;
3992 -> 945;
3992 -> 939;
3993 -> 945;
3993 -> 939;
3994 -> 945;
3994 -> 939;
3995 -> 3994;
3995 -> 3991;
3995 -> 939;
3996 -> 3995;
3996 -> 3991;
3996 -> 939;
3997 -> 939;
3998 -> 3997;
3998 -> 3996;
3998 -> 939;
3999 -> 945;
3999 -> 939;
4000 -> 0;
4000 -> 939;
4001 -> 945;
4001 -> 4000;
4001 -> 3991;
4001 -> 0;
4001 -> 914;
4002 -> 939;
4003 -> 4002;
4004 -> 4003;
4005 -> 945;
4005 -> 939;
4006 -> 939;
4007 -> 945;
4007 -> 4006;
4007 -> 4001;
4007 -> 914;
4008 -> 945;
4008 -> 939;
4009 -> 939;
4010 -> 4008;
4010 -> 4009;
4011 -> 4010;
4011 -> 4007;
4011 -> 4009;
4012 -> 4010;
4012 -> 4007;
4012 -> 4009;
4013 -> 4012;
4013 -> 939;
4014 -> 945;
4014 -> 939;
4015 -> 945;
4015 -> 939;
4016 -> 4015;
4016 -> 4013;
4016 -> 939;
4017 -> 0;
4017 -> 939;
4018 -> 4015;
4018 -> 4013;
4018 -> 939;
4019 -> 939;
4020 -> 4017;
4020 -> 4019;
4021 -> 4018;
4021 -> 4019;
4022 -> 4015;
4022 -> 4019;
4023 -> 4020;
4023 -> 4019;
4024 -> 4019;
4025 -> 4014;
4025 -> 4023;
4025 -> 4024;
4025 -> 4019;
4026 -> 4019;
4027 -> 4014;
4027 -> 4026;
4027 -> 4019;
4028 -> 4021;
4028 -> 4019;
4029 -> 4019;
4030 -> 4014;
4030 -> 4028;
4030 -> 4029;
4030 -> 4019;
4031 -> 4019;
4032 -> 4014;
4032 -> 4031;
4032 -> 4019;
4033 -> 939;
4034 -> 939;
4035 -> 4015;
4035 -> 4034;
4036 -> 4035;
4036 -> 4013;
4036 -> 4034;
4037 -> 4036;
4037 -> 939;
4038 -> 939;
4039 -> 4015;
4039 -> 4038;
4040 -> 4039;
4040 -> 4013;
4040 -> 4038;
4041 -> 4040;
4041 -> 939;
4042 -> 939;
4043 -> 4015;
4043 -> 4042;
4044 -> 4043;
4044 -> 4013;
4044 -> 4042;
4045 -> 4044;
4045 -> 939;
4046 -> 939;
4047 -> 4015;
4047 -> 4046;
4048 -> 4046;
4049 -> 4047;
4049 -> 4048;
4050 -> 4048;
4051 -> 4049;
4051 -> 4013;
4051 -> 4050;
4052 -> 4050;
4053 -> 4051;
4053 -> 4046;
4054 -> 4053;
4054 -> 4046;
4055 -> 4053;
4055 -> 4046;
4056 -> 4055;
4056 -> 939;
4057 -> 4056;
4057 -> 939;
4058 -> 3631;
4058 -> 0;
4058 -> 4057;
4059 -> 3518;
4059 -> 4057;
4059 -> 939;
4060 -> 3518;
4060 -> 4057;
4060 -> 4059;
4061 -> 3518;
4061 -> 4057;
4061 -> 0;
4061 -> 939;
4062 -> 3522;
4062 -> 4057;
4063 -> 3518;
4063 -> 4057;
4063 -> 939;
4064 -> 3522;
4064 -> 4057;
4065 -> 3478;
4065 -> 4057;
4066 -> 3479;
4066 -> 4057;
4067 -> 4065;
4067 -> 4057;
4068 -> 4066;
4068 -> 4057;
4069 -> 4057;
4070 -> 4057;
4071 -> 4057;
4072 -> 4068;
4072 -> 4071;
4072 -> 4057;
4073 -> 4057;
4074 -> 4057;
4074 -> 4073;
4075 -> 4057;
4075 -> 0;
4076 -> 4070;
4076 -> 4057;
4077 -> 4076;
4078 -> 4076;
4079 -> 4057;
4079 -> 4076;
4080 -> 4076;
4081 -> 4079;
4081 -> 4080;
4082 -> 4080;
4083 -> 4081;
4083 -> 4082;
4084 -> 4082;
4085 -> 4083;
4085 -> 4084;
4085 -> 4082;
4086 -> 4082;
4087 -> 4086;
4087 -> 4080;
4088 -> 4057;
4088 -> 4087;
4089 -> 4057;
4090 -> 945;
4090 -> 939;
4091 -> 939;
4092 -> 4090;
4092 -> 4091;
4092 -> 939;
4093 -> 4092;
4094 -> 4090;
4094 -> 4057;
4094 -> 4093;
4094 -> 4092;
4095 -> 4094;
4096 -> 4095;
4096 -> 3558;
4097 -> 4096;
4097 -> 4095;
4097 -> 3558;
4098 -> 4096;
4098 -> 4095;
4098 -> 4097;
4099 -> 4098;
4099 -> 4097;
4100 -> 4097;
4101 -> 4099;
4101 -> 4100;
4102 -> 4101;
4102 -> 4095;
4102 -> 0;
4102 -> 4100;
4103 -> 4101;
4103 -> 4095;
4103 -> 4100;
4104 -> 4100;
4105 -> 4103;
4105 -> 4104;
4106 -> 4105;
4107 -> 3551;
4107 -> 939;
4108 -> 939;
4109 -> 4107;
4109 -> 4108;
4110 -> 3552;
4110 -> 4108;
4111 -> 4108;
4112 -> 4109;
4112 -> 4108;
4113 -> 4112;
4113 -> 4095;
4113 -> 4108;
4114 -> 4113;
4115 -> 4113;
4116 -> 4114;
4116 -> 4115;
4117 -> 4110;
4117 -> 4115;
4118 -> 4115;
4119 -> 4115;
4120 -> 4116;
4120 -> 4115;
4121 -> 4118;
4121 -> 4115;
4122 -> 4117;
4122 -> 4106;
4122 -> 4120;
4122 -> 4121;
4122 -> 4095;
4122 -> 4115;
4123 -> 4122;
4124 -> 4111;
4124 -> 4123;
4124 -> 4122;
4124 -> 4113;
4125 -> 4124;
4126 -> 4111;
4126 -> 4124;
4126 -> 4108;
4127 -> 3478;
4127 -> 4126;
4128 -> 3479;
4128 -> 4126;
4129 -> 4127;
4129 -> 4126;
4130 -> 4128;
4130 -> 4126;
4131 -> 4126;
4132 -> 4126;
4133 -> 4126;
4134 -> 4130;
4134 -> 4133;
4134 -> 4126;
4135 -> 4126;
4136 -> 4126;
4136 -> 4135;
4137 -> 4126;
4137 -> 0;
4138 -> 4132;
4138 -> 4126;
4139 -> 4138;
4140 -> 4138;
4141 -> 4126;
4141 -> 4138;
4142 -> 4138;
4143 -> 4141;
4143 -> 4142;
4144 -> 4142;
4145 -> 4143;
4145 -> 4144;
4146 -> 4144;
4147 -> 4146;
4147 -> 4142;
4148 -> 4126;
4148 -> 4147;
4149 -> 4126;
4150 -> 3631;
4150 -> 0;
4150 -> 4126;
4151 -> 945;
4151 -> 939;
4152 -> 945;
4152 -> 939;
4153 -> 4152;
4153 -> 4126;
4153 -> 939;
4154 -> 4151;
4154 -> 4126;
4154 -> 939;
4155 -> 939;
4156 -> 4153;
4156 -> 4155;
4157 -> 4154;
4157 -> 4155;
4158 -> 4154;
4158 -> 4155;
4159 -> 4151;
4159 -> 4126;
4159 -> 4155;
4160 -> 4155;
4161 -> 4158;
4161 -> 4160;
4161 -> 4155;
4162 -> 4157;
4162 -> 4156;
4163 -> 4158;
4163 -> 4156;
4164 -> 4162;
4164 -> 4156;
4165 -> 4163;
4165 -> 4156;
4166 -> 4156;
4167 -> 4156;
4168 -> 4159;
4168 -> 4156;
4169 -> 4156;
4170 -> 4165;
4170 -> 4169;
4170 -> 4156;
4171 -> 4156;
4172 -> 4156;
4172 -> 4171;
4173 -> 4156;
4173 -> 0;
4174 -> 4167;
4174 -> 4156;
4175 -> 4174;
4176 -> 4174;
4177 -> 4156;
4177 -> 4174;
4178 -> 4174;
4179 -> 4177;
4179 -> 4178;
4180 -> 4178;
4181 -> 4179;
4181 -> 4180;
4182 -> 4180;
4183 -> 4182;
4183 -> 4178;
4184 -> 4156;
4184 -> 4183;
4185 -> 4156;
4186 -> 3631;
4186 -> 0;
4186 -> 4168;
4187 -> 945;
4187 -> 939;
4188 -> 4187;
4188 -> 4168;
4188 -> 939;
4189 -> 945;
4189 -> 939;
4190 -> 4189;
4190 -> 4188;
4190 -> 0;
4190 -> 939;
4191 -> 945;
4191 -> 939;
4192 -> 4191;
4192 -> 4190;
4192 -> 939;
4193 -> 3631;
4193 -> 0;
4193 -> 4192;
4194 -> 4192;
4194 -> 4155;
4195 -> 4192;
4195 -> 4155;
4196 -> 4195;
4196 -> 4160;
4196 -> 4155;
4197 -> 4194;
4197 -> 4192;
4198 -> 4195;
4198 -> 4192;
4199 -> 4192;
4200 -> 4192;
4201 -> 4192;
4202 -> 4198;
4202 -> 4201;
4202 -> 4192;
4203 -> 4192;
4204 -> 4192;
4204 -> 4203;
4205 -> 4192;
4205 -> 0;
4206 -> 4200;
4206 -> 4192;
4207 -> 4206;
4208 -> 4206;
4209 -> 4192;
4209 -> 4206;
4210 -> 4206;
4211 -> 4209;
4211 -> 4210;
4212 -> 4210;
4213 -> 4211;
4213 -> 4212;
4214 -> 4212;
4215 -> 4214;
4215 -> 4210;
4216 -> 4192;
4216 -> 4215;
4217 -> 4192;
4218 -> 3518;
4218 -> 4192;
4218 -> 939;
4219 -> 3518;
4219 -> 4192;
4219 -> 4218;
4220 -> 3518;
4220 -> 4192;
4220 -> 0;
4220 -> 939;
4221 -> 3522;
4221 -> 4192;
4222 -> 3478;
4222 -> 4192;
4223 -> 3479;
4223 -> 4192;
4224 -> 4222;
4224 -> 4192;
4225 -> 4223;
4225 -> 4192;
4226 -> 4225;
4226 -> 4201;
4226 -> 4192;
4227 -> 4192;
4228 -> 3522;
4228 -> 4192;
4229 -> 3518;
4229 -> 4192;
4229 -> 939;
4230 -> 3477;
4230 -> 4192;
4231 -> 4192;
4232 -> 4230;
4232 -> 4231;
4233 -> 4232;
4233 -> 4192;
4233 -> 4231;
4234 -> 4232;
4234 -> 4192;
4234 -> 4231;
4235 -> 939;
4236 -> 945;
4236 -> 4235;
4236 -> 4234;
4236 -> 914;
4237 -> 3518;
4237 -> 4236;
4237 -> 939;
4238 -> 3518;
4238 -> 4236;
4238 -> 4237;
4239 -> 3518;
4239 -> 4236;
4239 -> 0;
4239 -> 939;
4240 -> 3522;
4240 -> 4236;
4241 -> 4236;
4242 -> 3522;
4242 -> 4236;
4243 -> 3518;
4243 -> 4236;
4243 -> 939;
4244 -> 4236;
4245 -> 4236;
4246 -> 4245;
4246 -> 4244;
4246 -> 4236;
4247 -> 3478;
4247 -> 4236;
4248 -> 3479;
4248 -> 4236;
4249 -> 4247;
4249 -> 4236;
4250 -> 4248;
4250 -> 4236;
4251 -> 4236;
4252 -> 4236;
4253 -> 4236;
4254 -> 4250;
4254 -> 4253;
4254 -> 4236;
4255 -> 4236;
4256 -> 4236;
4256 -> 4255;
4257 -> 4236;
4257 -> 0;
4258 -> 4252;
4258 -> 4236;
4259 -> 4258;
4260 -> 4258;
4261 -> 4236;
4261 -> 4258;
4262 -> 4258;
4263 -> 4261;
4263 -> 4262;
4264 -> 4262;
4265 -> 4263;
4265 -> 4264;
4266 -> 4264;
4267 -> 4266;
4267 -> 4262;
4268 -> 4236;
4268 -> 4267;
4269 -> 4236;
4270 -> 3631;
4270 -> 0;
4270 -> 4236;
4271 -> 945;
4271 -> 939;
4272 -> 4271;
4272 -> 4236;
4272 -> 939;
4273 -> 945;
4273 -> 939;
4274 -> 4273;
4274 -> 4272;
4274 -> 939;
4275 -> 3940;
4275 -> 4274;
4275 -> 939;
4276 -> 945;
4276 -> 939;
4277 -> 4276;
4277 -> 4274;
4277 -> 939;
4278 -> 0;
4278 -> 4277;
4279 -> 3478;
4279 -> 4278;
4280 -> 3479;
4280 -> 4278;
4281 -> 4279;
4281 -> 4278;
4282 -> 4280;
4282 -> 4278;
4283 -> 4278;
4284 -> 4278;
4285 -> 4278;
4286 -> 4282;
4286 -> 4285;
4286 -> 4278;
4287 -> 4278;
4288 -> 4278;
4288 -> 4287;
4289 -> 4278;
4289 -> 0;
4290 -> 4284;
4290 -> 4278;
4291 -> 4290;
4292 -> 4290;
4293 -> 4278;
4293 -> 4290;
4294 -> 4290;
4295 -> 4293;
4295 -> 4294;
4296 -> 4294;
4297 -> 4295;
4297 -> 4296;
4298 -> 4296;
4299 -> 4298;
4299 -> 4294;
4300 -> 4278;
4300 -> 4299;
4301 -> 4278;
4302 -> 3631;
4302 -> 0;
4302 -> 4278;
4303 -> 3518;
4303 -> 4278;
4303 -> 939;
4304 -> 3518;
4304 -> 4278;
4304 -> 4303;
4305 -> 3518;
4305 -> 4278;
4305 -> 0;
4305 -> 939;
4306 -> 3522;
4306 -> 4278;
4307 -> 3518;
4307 -> 4278;
4307 -> 939;
4308 -> 3522;
4308 -> 4278;
4309 -> 4284;
4309 -> 4278;
4310 -> 4276;
4310 -> 4278;
4310 -> 0;
4311 -> 0;
4311 -> 4310;
4312 -> 3478;
4312 -> 4311;
4313 -> 3479;
4313 -> 4311;
4314 -> 4312;
4314 -> 4311;
4315 -> 4313;
4315 -> 4311;
4316 -> 4311;
4317 -> 4311;
4318 -> 4311;
4319 -> 4315;
4319 -> 4318;
4319 -> 4311;
4320 -> 4311;
4321 -> 4311;
4321 -> 4320;
4322 -> 4311;
4322 -> 0;
4323 -> 4317;
4323 -> 4311;
4324 -> 4323;
4325 -> 4323;
4326 -> 4311;
4326 -> 4323;
4327 -> 4323;
4328 -> 4326;
4328 -> 4327;
4329 -> 4327;
4330 -> 4328;
4330 -> 4329;
4331 -> 4329;
4332 -> 4331;
4332 -> 4327;
4333 -> 4311;
4333 -> 4332;
4334 -> 4311;
4335 -> 3631;
4335 -> 0;
4335 -> 4311;
4336 -> 4276;
4336 -> 4311;
4337 -> 0;
4337 -> 4336;
4338 -> 3478;
4338 -> 4337;
4339 -> 3479;
4339 -> 4337;
4340 -> 4338;
4340 -> 4337;
4341 -> 4339;
4341 -> 4337;
4342 -> 4337;
4343 -> 4337;
4344 -> 4337;
4345 -> 4341;
4345 -> 4344;
4345 -> 4337;
4346 -> 4337;
4347 -> 4337;
4347 -> 4346;
4348 -> 4337;
4348 -> 0;
4349 -> 4343;
4349 -> 4337;
4350 -> 4349;
4351 -> 4349;
4352 -> 4337;
4352 -> 4349;
4353 -> 4349;
4354 -> 4352;
4354 -> 4353;
4355 -> 4353;
4356 -> 4354;
4356 -> 4355;
4357 -> 4355;
4358 -> 4357;
4358 -> 4353;
4359 -> 4337;
4359 -> 4358;
4360 -> 4337;
4361 -> 3631;
4361 -> 0;
4361 -> 4337;
4362 -> 945;
4362 -> 939;
4363 -> 4362;
4363 -> 4337;
4363 -> 939;
4364 -> 3518;
4364 -> 4363;
4364 -> 939;
4365 -> 3518;
4365 -> 4363;
4365 -> 4364;
4366 -> 3518;
4366 -> 4363;
4366 -> 0;
4366 -> 939;
4367 -> 3522;
4367 -> 4363;
4368 -> 4367;
4369 -> 4367;
4370 -> 3518;
4370 -> 4363;
4370 -> 4367;
4371 -> 4367;
4372 -> 4370;
4372 -> 4371;
4373 -> 4371;
4374 -> 4372;
4374 -> 4373;
4375 -> 4373;
4376 -> 4375;
4376 -> 4371;
4377 -> 3518;
4377 -> 4363;
4377 -> 4376;
4378 -> 3518;
4378 -> 4363;
4378 -> 939;
4379 -> 4363;
4379 -> 0;
4379 -> 3423;
4380 -> 4363;
4381 -> 4380;
4381 -> 4363;
4382 -> 4363;
4382 -> 3423;
4383 -> 3449;
4383 -> 4363;
4383 -> 3448;
4384 -> 4383;
4384 -> 4363;
4384 -> 3448;
4385 -> 3449;
4385 -> 4363;
4385 -> 3448;
4386 -> 3452;
4386 -> 4385;
4387 -> 3449;
4387 -> 4363;
4387 -> 4386;
4388 -> 4383;
4388 -> 4386;
4389 -> 4386;
4390 -> 4388;
4390 -> 4389;
4391 -> 4390;
4391 -> 4363;
4392 -> 4389;
4393 -> 4392;
4393 -> 4386;
4394 -> 4387;
4394 -> 4393;
4394 -> 4386;
4395 -> 3449;
4395 -> 4394;
4396 -> 3449;
4396 -> 4363;
4396 -> 4394;
4397 -> 3453;
4397 -> 4363;
4397 -> 3473;
4397 -> 3448;
4398 -> 4363;
4399 -> 4363;
4400 -> 4399;
4400 -> 4398;
4400 -> 4363;
4401 -> 3478;
4401 -> 4363;
4402 -> 3479;
4402 -> 4363;
4403 -> 4401;
4403 -> 4363;
4404 -> 4402;
4404 -> 4363;
4405 -> 4363;
4406 -> 4363;
4407 -> 4363;
4408 -> 4404;
4408 -> 4407;
4408 -> 4363;
4409 -> 4363;
4410 -> 4363;
4410 -> 4409;
4411 -> 4363;
4411 -> 0;
4412 -> 4406;
4412 -> 4363;
4413 -> 4412;
4414 -> 4412;
4415 -> 4363;
4415 -> 4412;
4416 -> 4412;
4417 -> 4415;
4417 -> 4416;
4418 -> 4416;
4419 -> 4417;
4419 -> 4418;
4420 -> 4418;
4421 -> 4420;
4421 -> 4416;
4422 -> 4363;
4422 -> 4421;
4423 -> 4363;
4424 -> 3631;
4424 -> 0;
4424 -> 4363;
4425 -> 0;
4425 -> 4424;
4426 -> 4425;
4426 -> 3632;
4426 -> 4363;
4426 -> 4424;
4427 -> 4424;
4428 -> 4427;
4429 -> 4426;
4429 -> 4428;
4430 -> 4429;
4430 -> 4427;
4431 -> 3449;
4431 -> 4426;
4431 -> 3448;
4432 -> 4431;
4432 -> 4426;
4432 -> 3448;
4433 -> 3449;
4433 -> 4426;
4433 -> 3448;
4434 -> 3452;
4434 -> 4433;
4435 -> 3449;
4435 -> 4426;
4435 -> 4434;
4436 -> 4431;
4436 -> 4434;
4437 -> 4434;
4438 -> 4436;
4438 -> 4437;
4439 -> 4438;
4439 -> 4426;
4440 -> 4437;
4441 -> 4440;
4441 -> 4434;
4442 -> 4435;
4442 -> 4441;
4442 -> 4434;
4443 -> 3449;
4443 -> 4442;
4444 -> 3449;
4444 -> 4426;
4444 -> 4442;
4445 -> 3453;
4445 -> 4426;
4445 -> 3473;
4445 -> 3448;
4446 -> 3518;
4446 -> 4426;
4446 -> 939;
4447 -> 3518;
4447 -> 4426;
4447 -> 4446;
4448 -> 3518;
4448 -> 4426;
4448 -> 0;
4448 -> 939;
4449 -> 3522;
4449 -> 4426;
4450 -> 3518;
4450 -> 4426;
4450 -> 939;
4451 -> 3478;
4451 -> 4426;
4452 -> 3479;
4452 -> 4426;
4453 -> 4451;
4453 -> 4426;
4454 -> 4452;
4454 -> 4426;
4455 -> 4426;
4456 -> 4426;
4457 -> 4426;
4458 -> 4454;
4458 -> 4457;
4458 -> 4426;
4459 -> 4426;
4460 -> 4426;
4460 -> 4459;
4461 -> 4426;
4461 -> 0;
4462 -> 4456;
4462 -> 4426;
4463 -> 4462;
4464 -> 4462;
4465 -> 4426;
4465 -> 4462;
4466 -> 4462;
4467 -> 4465;
4467 -> 4466;
4468 -> 4466;
4469 -> 4467;
4469 -> 4468;
4470 -> 4468;
4471 -> 4470;
4471 -> 4466;
4472 -> 4426;
4472 -> 4471;
4473 -> 4426;
4474 -> 4426;
4475 -> 4426;
4476 -> 4475;
4476 -> 4474;
4476 -> 4426;
4477 -> 4469;
4477 -> 4426;
4478 -> 3329;
4478 -> 4426;
4478 -> 939;
4479 -> 3340;
4479 -> 4426;
4479 -> 3339;
4480 -> 3340;
4480 -> 4426;
4480 -> 3339;
4481 -> 4480;
4481 -> 3337;
4482 -> 4426;
4482 -> 939;
4483 -> 4426;
4483 -> 3356;
4484 -> 4483;
4484 -> 3355;
4485 -> 4426;
4485 -> 939;
4486 -> 4485;
4486 -> 3348;
4486 -> 4426;
4486 -> 939;
4487 -> 3351;
4487 -> 4426;
4488 -> 3164;
4488 -> 4426;
4488 -> 3163;
4489 -> 3164;
4489 -> 4426;
4489 -> 3163;
4490 -> 4489;
4490 -> 3161;
4491 -> 914;
4492 -> 927;
4492 -> 4491;
4492 -> 914;
4493 -> 4426;
4493 -> 914;
4494 -> 917;
4494 -> 4493;
4494 -> 4426;
4494 -> 914;
4495 -> 923;
4495 -> 914;
4496 -> 4495;
4496 -> 4494;
4496 -> 914;
4497 -> 4426;
4497 -> 4496;
4497 -> 914;
4498 -> 4496;
4498 -> 4497;
4499 -> 924;
4499 -> 4497;
4500 -> 4497;
4501 -> 4497;
4502 -> 4498;
4502 -> 4501;
4503 -> 4499;
4503 -> 4501;
4504 -> 4500;
4504 -> 4501;
4505 -> 4502;
4505 -> 4504;
4505 -> 4501;
4506 -> 4503;
4506 -> 924;
4506 -> 4501;
4507 -> 4504;
4507 -> 4505;
4507 -> 4506;
4508 -> 4507;
4508 -> 4506;
4509 -> 0;
4509 -> 4506;
4510 -> 4506;
4511 -> 4508;
4511 -> 4510;
4511 -> 4506;
4512 -> 4508;
4512 -> 4511;
4513 -> 4511;
4514 -> 4512;
4514 -> 4513;
4514 -> 4511;
4515 -> 4514;
4515 -> 4511;
4516 -> 4511;
4517 -> 4515;
4517 -> 4516;
4518 -> 4504;
4518 -> 4516;
4519 -> 4517;
4519 -> 4512;
4519 -> 4514;
4519 -> 4516;
4520 -> 4519;
4520 -> 4516;
4521 -> 4517;
4521 -> 4512;
4521 -> 4514;
4521 -> 4516;
4522 -> 4520;
4522 -> 4516;
4523 -> 4516;
4524 -> 4519;
4524 -> 4516;
4525 -> 4520;
4525 -> 4516;
4526 -> 4525;
4526 -> 4522;
4526 -> 4516;
4527 -> 4526;
4527 -> 4504;
4527 -> 4501;
4528 -> 813;
4528 -> 812;
4529 -> 812;
4530 -> 4528;
4530 -> 4529;
4531 -> 4529;
4532 -> 4530;
4532 -> 4531;
4533 -> 4531;
4534 -> 4532;
4534 -> 4533;
4535 -> 4534;
4535 -> 4527;
4535 -> 4533;
4536 -> 4534;
4536 -> 4527;
4536 -> 4533;
4537 -> 4536;
4537 -> 4531;
4538 -> 4532;
4538 -> 4527;
4538 -> 4531;
4539 -> 4538;
4539 -> 812;
4540 -> 804;
4540 -> 4539;
4540 -> 803;
4541 -> 4540;
4541 -> 807;
4541 -> 803;
4542 -> 804;
4542 -> 4540;
4542 -> 803;
4543 -> 4542;
4543 -> 807;
4543 -> 803;
4544 -> 804;
4544 -> 4542;
4544 -> 803;
4545 -> 4544;
4545 -> 807;
4545 -> 803;
4546 -> 804;
4546 -> 4544;
4546 -> 803;
4547 -> 4546;
4547 -> 807;
4547 -> 803;
4548 -> 807;
4548 -> 773;
4548 -> 4546;
4548 -> 803;
4549 -> 803;
4550 -> 4548;
4550 -> 4549;
4551 -> 4549;
4552 -> 4551;
4553 -> 4552;
4554 -> 4550;
4554 -> 4553;
4555 -> 4554;
4555 -> 4552;
4556 -> 803;
4557 -> 799;
4557 -> 4550;
4557 -> 783;
4558 -> 4557;
4558 -> 791;
4558 -> 783;
4559 -> 789;
4559 -> 783;
4560 -> 799;
4560 -> 4559;
4560 -> 4557;
4560 -> 783;
4561 -> 783;
4562 -> 790;
4562 -> 4561;
4562 -> 783;
4563 -> 783;
4564 -> 784;
4564 -> 4563;
4564 -> 783;
4565 -> 4550;
4565 -> 4564;
4566 -> 786;
4566 -> 4564;
4567 -> 784;
4567 -> 4564;
4568 -> 799;
4568 -> 4565;
4568 -> 4566;
4568 -> 4567;
4568 -> 4560;
4568 -> 739;
4568 -> 4564;
4569 -> 785;
4569 -> 4564;
4570 -> 745;
4571 -> 745;
4572 -> 753;
4572 -> 4571;
4572 -> 745;
4573 -> 754;
4573 -> 4571;
4573 -> 745;
4574 -> 4572;
4574 -> 4573;
4574 -> 745;
4575 -> 761;
4575 -> 745;
4576 -> 4575;
4576 -> 708;
4577 -> 708;
4578 -> 732;
4578 -> 4577;
4578 -> 708;
4579 -> 4576;
4579 -> 4578;
4580 -> 4579;
4580 -> 708;
4581 -> 4579;
4581 -> 708;
4582 -> 4581;
4582 -> 670;
4583 -> 4582;
4583 -> 22;
4584 -> 4583;
4584 -> 1;
}