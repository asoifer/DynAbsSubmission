digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 760393"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 760394"];
3 [label="@'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 760395"];
4 [label="prefix = @'\nusing System;\n\n// Need a base class with indexers.\npublic class DATestBase {\n    public int this[int a] { get { return 0; } }\n    public int this[int a, int b] { get { return 0; } }\n}\n\n// Need a struct with a couple fields.\npublic struct A {\n    public int x;\n    public int y;\n}\n\n// Need a struct with non-lifted short-circuiting operators.\npublic struct NLS\n{\n    public static NLS operator&(NLS a, NLS b) { return new NLS { value = a.value & b.value }; }\n    public static NLS operator|(NLS a, NLS b) { return new NLS { value = a.value | b.value }; }\n    public static bool operator true(NLS a) { return a.value; }\n    public static bool operator false(NLS a) { return !a.value; }\n\n    public bool value;\n}\n\n// Need a struct with lifted short-circuiting operators.\npublic struct LS\n{\n    public static LS operator&(LS a, LS b) { return new LS { value = a.value & b.value }; }\n    public static LS operator|(LS a, LS b) { return new LS { value = a.value | b.value }; }\n    public static bool operator true(LS? a) { return a.HasValue && a.Value.value; }\n    public static bool operator false(LS? a) { return a.HasValue && !a.Value.value; }\n\n    public bool value;\n}\n\npublic delegate void D(); public delegate int DI();\npublic delegate void DefP(int a, ref int b, out int c);\n\npublic class DATest : DATestBase {\n    public static volatile bool f;\n    public static volatile int val;\n    public static volatile byte b;\n    public const bool fTrue = true;\n    public const bool fFalse = false;\n    public static int[] arr = { 1, 2, 3 };\n\n    public static bool No() { return f; } // No-op\n    public static bool F(int x) { return f; }\n    public static bool G(out int x) { x = 0; return f; }\n    public static bool Q(bool x) { return f; }\n    public static bool S(A x) { return f; }\n    public static int NNo() { return val; } // No-op\n    public static int NF(int x) { return val; }\n    public static int NG(out int x) { x = 0; return val; }\n    public static int[] AF(int x) { return arr; }\n    public static int[] AG(out int x) { x = 0; return arr; }\n    public static int FA(int[] x) { return val; }\n    public static int GA(out int[] x) { x = arr; return val; }\n    public static IDisposable Res(bool x) { return null; }\n    public static bool FP(params int[] x) { return f; }\n    public static bool GP(out int x, params int[] y) { x = 0; return f; }\n    public static NLS GetNLS() { return new NLS { value = f }; }\n    public static NLS GetNLS(out int x) { x = 0; return new NLS { value = f }; }\n    public static LS GetLS() { return new LS { value = f }; }\n    public static LS? GetLS(out int x) { x = 0; return new LS { value = f }; }\n\n    public class C {\n        public C(params int[] x) { }\n        public C(out int x, params int[] y) { x = 0; }\n    }\n' 760396"];
5 [label="@'\n}' 760397"];
6 [label="suffix = @'\n}' 760398"];
7 [label="param FlowTests(this) 760399"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 760400"];
9 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 760401"];
10 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 760402"];
11 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 760403"];
12 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 760404"];
13 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 760405"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 760406"];
15 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 760407"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 760408"];
17 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 760409"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 760410"];
19 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 760411"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 760412"];
21 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 760413"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 760414"];
23 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 760415"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 760416"];
25 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 760417"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 760418"];
27 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 760419"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 760420"];
29 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 760421"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 760422"];
31 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 760423"];
32 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 760424"];
33 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 760425"];
34 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 760426"];
35 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 760427"];
36 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 760428"];
37 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 760429"];
38 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 760430"];
39 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 760431"];
40 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 760432"];
41 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 760433"];
42 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 760434"];
43 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 760435"];
44 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 760436"];
45 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 760437"];
46 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 760438"];
47 [label="LazyThreadSafetyMode.PublicationOnly 760439"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 760440"];
49 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 760441"];
50 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 760442"];
51 [label="LazyThreadSafetyMode.PublicationOnly 760443"];
52 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 760444"];
53 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 760445"];
54 [label="RuntimeUtilities.IsCoreClrRuntime 760446"];
55 [label="'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' 760447"];
56 [label="new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51') 760448"];
57 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 760449"];
58 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 760450"];
59 [label="LazyThreadSafetyMode.PublicationOnly 760451"];
60 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 760452"];
61 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 760453"];
62 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 760454"];
63 [label="LazyThreadSafetyMode.PublicationOnly 760455"];
64 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 760456"];
65 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 760457"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 760458"];
67 [label="LazyThreadSafetyMode.PublicationOnly 760459"];
68 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 760460"];
69 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 760461"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 760462"];
71 [label="LazyThreadSafetyMode.PublicationOnly 760463"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760464"];
73 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760465"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 760466"];
75 [label="LazyThreadSafetyMode.PublicationOnly 760467"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760468"];
77 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760469"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 760470"];
79 [label="LazyThreadSafetyMode.PublicationOnly 760471"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760472"];
81 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760473"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 760474"];
83 [label="LazyThreadSafetyMode.PublicationOnly 760475"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760476"];
85 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760477"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 760478"];
87 [label="LazyThreadSafetyMode.PublicationOnly 760479"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760480"];
89 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760481"];
90 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 760482"];
91 [label="LazyThreadSafetyMode.PublicationOnly 760483"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760484"];
93 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760485"];
94 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 760486"];
95 [label="LazyThreadSafetyMode.PublicationOnly 760487"];
96 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760488"];
97 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760489"];
98 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 760490"];
99 [label="LazyThreadSafetyMode.PublicationOnly 760491"];
100 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 760492"];
101 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 760493"];
102 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 760494"];
103 [label="LazyThreadSafetyMode.PublicationOnly 760495"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 760496"];
105 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 760497"];
106 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 760498"];
107 [label="LazyThreadSafetyMode.PublicationOnly 760499"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760500"];
109 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760501"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 760502"];
111 [label="LazyThreadSafetyMode.PublicationOnly 760503"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760504"];
113 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760505"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 760506"];
115 [label="LazyThreadSafetyMode.PublicationOnly 760507"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760508"];
117 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760509"];
118 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 760510"];
119 [label="LazyThreadSafetyMode.PublicationOnly 760511"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760512"];
121 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760513"];
122 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 760514"];
123 [label="LazyThreadSafetyMode.PublicationOnly 760515"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 760516"];
125 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 760517"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 760518"];
127 [label="LazyThreadSafetyMode.PublicationOnly 760519"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760520"];
129 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760521"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 760522"];
131 [label="LazyThreadSafetyMode.PublicationOnly 760523"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760524"];
133 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760525"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 760526"];
135 [label="LazyThreadSafetyMode.PublicationOnly 760527"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760528"];
137 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760529"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 760530"];
139 [label="LazyThreadSafetyMode.PublicationOnly 760531"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760532"];
141 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760533"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 760534"];
143 [label="LazyThreadSafetyMode.PublicationOnly 760535"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760536"];
145 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760537"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 760538"];
147 [label="LazyThreadSafetyMode.PublicationOnly 760539"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760540"];
149 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760541"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 760542"];
151 [label="LazyThreadSafetyMode.PublicationOnly 760543"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760544"];
153 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760545"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 760546"];
155 [label="LazyThreadSafetyMode.PublicationOnly 760547"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760548"];
157 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760549"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 760550"];
159 [label="LazyThreadSafetyMode.PublicationOnly 760551"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760552"];
161 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760553"];
162 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 760554"];
163 [label="LazyThreadSafetyMode.PublicationOnly 760555"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760556"];
165 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760557"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 760558"];
167 [label="LazyThreadSafetyMode.PublicationOnly 760559"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760560"];
169 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760561"];
170 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 760562"];
171 [label="LazyThreadSafetyMode.PublicationOnly 760563"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760564"];
173 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760565"];
174 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 760566"];
175 [label="LazyThreadSafetyMode.PublicationOnly 760567"];
176 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760568"];
177 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 760569"];
178 [label="@'R:\\Invalid.dll' 760570"];
179 [label="fullPath: @'R:\\Invalid.dll' 760571"];
180 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 760572"];
181 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 760573"];
182 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 760574"];
183 [label="MscorlibRef_v4_0_30316_17626 760575"];
184 [label="Net451.mscorlib 760576"];
185 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 760577"];
186 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 760578"];
187 [label="'/*<bind>*/' 760579"];
188 [label="StartString = '/*<bind>*/' 760580"];
189 [label="'/*</bind>*/' 760581"];
190 [label="EndString = '/*</bind>*/' 760582"];
191 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 760583"];
192 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 760584"];
193 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 760585"];
194 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 760586"];
195 [label="param CSharpTestBase(this) 760587"];
196 [label="param CommonTestBase(this) 760588"];
197 [label="param TestBase(this) 760589"];
198 [label="_temp 760590"];
199 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 760591"];
200 [label="param UseDef_CondAccess02(this) 760592"];
201 [label="var source = @'\nclass C\n{\n    C M1(out C arg)\n    {\n        arg = this;\n        return arg;\n    }\n\n    C M2( C arg)\n    {\n        return arg;\n    }\n\n    static void Main()\n    {\n        C o;\n\n        var d = new C();\n        var v = d ?. M1(out o) ?. M2(o);\n    }\n}\n'; 760593"];
202 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(); 760594"];
203 [label="source 760595"];
204 [label="param operator(string source) 760596"];
205 [label="source 760597"];
206 [label="new CSharpTestSource(source) 760598"];
207 [label="param CSharpTestSource(object value) 760599"];
208 [label="param CSharpTestSource(this) 760600"];
209 [label="Value 760601"];
210 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(); 760602"];
211 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics(); 760603"];
212 [label="CreateCompilationWithMscorlib45(source) 760604"];
213 [label="param CreateCompilationWithMscorlib45(CSharpTestSource source) 760605"];
214 [label="param CreateCompilationWithMscorlib45(IEnumerable<MetadataReference> references = null) 760606"];
215 [label="param CreateCompilationWithMscorlib45(CSharpCompilationOptions options = null) 760607"];
216 [label="param CreateCompilationWithMscorlib45(CSharpParseOptions parseOptions = null) 760608"];
217 [label="param CreateCompilationWithMscorlib45(string assemblyName = '') 760609"];
218 [label="param CreateCompilationWithMscorlib45(string sourceFileName = '') 760610"];
219 [label="param CreateCompilationWithMscorlib45(bool skipUsesIsNullable = false) 760611"];
220 [label="source 760612"];
221 [label="references 760613"];
222 [label="options 760614"];
223 [label="parseOptions 760615"];
224 [label="TargetFramework.Mscorlib45 760616"];
225 [label="assemblyName 760617"];
226 [label="sourceFileName 760618"];
227 [label="skipUsesIsNullable 760619"];
228 [label="CreateCompilation(source, references, options, parseOptions, TargetFramework.Mscorlib45, assemblyName, sourceFileName, skipUsesIsNullable) 760620"];
229 [label="param CreateCompilation(CSharpTestSource source) 760621"];
230 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 760622"];
231 [label="param CreateCompilation(CSharpCompilationOptions options = null) 760623"];
232 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 760624"];
233 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 760625"];
234 [label="param CreateCompilation(string assemblyName = '') 760626"];
235 [label="param CreateCompilation(string sourceFileName = '') 760627"];
236 [label="param CreateCompilation(bool skipUsesIsNullable = false) 760628"];
237 [label="source 760629"];
238 [label="targetFramework 760630"];
239 [label="references 760631"];
240 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 760632"];
241 [label="param GetReferences(TargetFramework tf) 760633"];
242 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 760634"];
243 [label="var references = GetReferences(tf); 760635"];
244 [label="GetReferences(tf) 760636"];
245 [label="param GetReferences(TargetFramework targetFramework) 760637"];
246 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 760638"];
247 [label="Mscorlib45References 760639"];
248 [label="Net451.mscorlib 760640"];
249 [label="ImmutableArray.Create<MetadataReference>(Net451.mscorlib) 760641"];
250 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 760642"];
251 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 760643"];
252 [label="return references; 760644"];
253 [label="options 760645"];
254 [label="parseOptions 760646"];
255 [label="assemblyName 760647"];
256 [label="sourceFileName 760648"];
257 [label="skipUsesIsNullable 760649"];
258 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 760650"];
259 [label="param CreateEmptyCompilation(CSharpTestSource source) 760651"];
260 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 760652"];
261 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 760653"];
262 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 760654"];
263 [label="param CreateEmptyCompilation(string assemblyName = '') 760655"];
264 [label="param CreateEmptyCompilation(string sourceFileName = '') 760656"];
265 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 760657"];
266 [label="source 760658"];
267 [label="references 760659"];
268 [label="options 760660"];
269 [label="parseOptions 760661"];
270 [label="assemblyName 760662"];
271 [label="sourceFileName 760663"];
272 [label="skipUsesIsNullable 760664"];
273 [label="null 760665"];
274 [label="experimentalFeature: null 760666"];
275 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 760667"];
276 [label="param CreateCompilationCore(CSharpTestSource source) 760668"];
277 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 760669"];
278 [label="param CreateCompilationCore(CSharpCompilationOptions options) 760670"];
279 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 760671"];
280 [label="param CreateCompilationCore(string assemblyName) 760672"];
281 [label="param CreateCompilationCore(string sourceFileName) 760673"];
282 [label="param CreateCompilationCore(bool skipUsesIsNullable) 760674"];
283 [label="param CreateCompilationCore(MessageID? experimentalFeature) 760675"];
284 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 760676"];
285 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 760677"];
286 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 760678"];
287 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 760679"];
288 [label="param GetSyntaxTrees(string sourceFileName = '') 760680"];
289 [label="param GetSyntaxTrees(this) 760681"];
290 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 760682"];
291 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 760683"];
292 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 760684"];
293 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 760685"];
294 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 760686"];
295 [label="param Parse(string text) 760687"];
296 [label="param Parse(string filename = '') 760688"];
297 [label="param Parse(CSharpParseOptions options = null) 760689"];
298 [label="param Parse(Encoding encoding = null) 760690"];
299 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 760691"];
300 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 760692"];
301 [label="kind: SourceCodeKind.Regular 760693"];
302 [label="documentationMode: DocumentationMode.Parse 760694"];
303 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 760695"];
304 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 760696"];
305 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 760697"];
306 [label="SourceCodeKind.Script 760698"];
307 [label="Regular.WithKind(SourceCodeKind.Script) 760699"];
308 [label="Script = Regular.WithKind(SourceCodeKind.Script) 760700"];
309 [label="LanguageVersion.CSharp6 760701"];
310 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 760702"];
311 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 760703"];
312 [label="LanguageVersion.CSharp7 760704"];
313 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 760705"];
314 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 760706"];
315 [label="LanguageVersion.CSharp7_1 760707"];
316 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 760708"];
317 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 760709"];
318 [label="LanguageVersion.CSharp7_2 760710"];
319 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 760711"];
320 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 760712"];
321 [label="LanguageVersion.CSharp7_3 760713"];
322 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 760714"];
323 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 760715"];
324 [label="LanguageVersion.Default 760716"];
325 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 760717"];
326 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 760718"];
327 [label="LanguageVersion.Preview 760719"];
328 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 760720"];
329 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 760721"];
330 [label="LanguageVersion.CSharp8 760722"];
331 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 760723"];
332 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 760724"];
333 [label="LanguageVersion.CSharp9 760725"];
334 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 760726"];
335 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 760727"];
336 [label="DocumentationMode.Diagnose 760728"];
337 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 760729"];
338 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 760730"];
339 [label="Regular 760731"];
340 [label="'UseLegacyStrongNameProvider' 760732"];
341 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 760733"];
342 [label="param WithFeature(this CSharpParseOptions options) 760734"];
343 [label="param WithFeature(string feature) 760735"];
344 [label="param WithFeature(string value = 'true') 760736"];
345 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 760737"];
346 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 760738"];
347 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 760739"];
348 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 760740"];
349 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 760741"];
350 [label="new[] { new KeyValuePair<string, string>(feature, value) } 760742"];
351 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 760743"];
352 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 760744"];
353 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 760745"];
354 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 760746"];
355 [label="1 760747"];
356 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 760748"];
357 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 760749"];
358 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 760750"];
359 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 760751"];
360 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 760752"];
361 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 760753"];
362 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 760754"];
363 [label="LanguageVersion.CSharp8 760755"];
364 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 760756"];
365 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 760757"];
366 [label="RegularWithExtendedPartialMethods = RegularPreview 760758"];
367 [label="new SmallDictionary<string, string> { } 760759"];
368 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 760760"];
369 [label="kind: SourceCodeKind.Regular 760761"];
370 [label="documentationMode: DocumentationMode.None 760762"];
371 [label="languageVersion: LanguageVersion.Preview 760763"];
372 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 760764"];
373 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 760765"];
374 [label="s_experimentalFeatures 760766"];
375 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 760767"];
376 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 760768"];
377 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 760769"];
378 [label="'testV7SwitchBinder' 760770"];
379 [label="'true' 760771"];
380 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 760772"];
381 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 760773"];
382 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 760774"];
383 [label="RegularWithoutRecursivePatterns = Regular7_3 760775"];
384 [label="RegularWithRecursivePatterns = Regular8 760776"];
385 [label="RegularWithoutPatternCombinators = Regular8 760777"];
386 [label="RegularWithPatternCombinators = RegularPreview 760778"];
387 [label="OutputKind.DynamicallyLinkedLibrary 760779"];
388 [label="OptimizationLevel.Release 760780"];
389 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 760781"];
390 [label="param CreateTestOptions(OutputKind outputKind) 760782"];
391 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 760783"];
392 [label="param CreateTestOptions(bool allowUnsafe = false) 760784"];
393 [label="outputKind 760785"];
394 [label="optimizationLevel: optimizationLevel 760786"];
395 [label="warningLevel: Diagnostic.MaxWarningLevel 760787"];
396 [label="allowUnsafe: allowUnsafe 760788"];
397 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760789"];
398 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760790"];
399 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 760791"];
400 [label="OutputKind.ConsoleApplication 760792"];
401 [label="OptimizationLevel.Release 760793"];
402 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 760794"];
403 [label="param CreateTestOptions(OutputKind outputKind) 760795"];
404 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 760796"];
405 [label="param CreateTestOptions(bool allowUnsafe = false) 760797"];
406 [label="outputKind 760798"];
407 [label="optimizationLevel: optimizationLevel 760799"];
408 [label="warningLevel: Diagnostic.MaxWarningLevel 760800"];
409 [label="allowUnsafe: allowUnsafe 760801"];
410 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760802"];
411 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760803"];
412 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 760804"];
413 [label="true 760805"];
414 [label="ReleaseDll.WithDebugPlusMode(true) 760806"];
415 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 760807"];
416 [label="true 760808"];
417 [label="ReleaseExe.WithDebugPlusMode(true) 760809"];
418 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 760810"];
419 [label="OutputKind.DynamicallyLinkedLibrary 760811"];
420 [label="OptimizationLevel.Debug 760812"];
421 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 760813"];
422 [label="param CreateTestOptions(OutputKind outputKind) 760814"];
423 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 760815"];
424 [label="param CreateTestOptions(bool allowUnsafe = false) 760816"];
425 [label="outputKind 760817"];
426 [label="optimizationLevel: optimizationLevel 760818"];
427 [label="warningLevel: Diagnostic.MaxWarningLevel 760819"];
428 [label="allowUnsafe: allowUnsafe 760820"];
429 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760821"];
430 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760822"];
431 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 760823"];
432 [label="OutputKind.ConsoleApplication 760824"];
433 [label="OptimizationLevel.Debug 760825"];
434 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 760826"];
435 [label="param CreateTestOptions(OutputKind outputKind) 760827"];
436 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 760828"];
437 [label="param CreateTestOptions(bool allowUnsafe = false) 760829"];
438 [label="outputKind 760830"];
439 [label="optimizationLevel: optimizationLevel 760831"];
440 [label="warningLevel: Diagnostic.MaxWarningLevel 760832"];
441 [label="allowUnsafe: allowUnsafe 760833"];
442 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760834"];
443 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760835"];
444 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 760836"];
445 [label="OutputKind.WindowsRuntimeMetadata 760837"];
446 [label="OptimizationLevel.Release 760838"];
447 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 760839"];
448 [label="param CreateTestOptions(OutputKind outputKind) 760840"];
449 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 760841"];
450 [label="param CreateTestOptions(bool allowUnsafe = false) 760842"];
451 [label="outputKind 760843"];
452 [label="optimizationLevel: optimizationLevel 760844"];
453 [label="warningLevel: Diagnostic.MaxWarningLevel 760845"];
454 [label="allowUnsafe: allowUnsafe 760846"];
455 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760847"];
456 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760848"];
457 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 760849"];
458 [label="OutputKind.WindowsRuntimeMetadata 760850"];
459 [label="OptimizationLevel.Debug 760851"];
460 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 760852"];
461 [label="param CreateTestOptions(OutputKind outputKind) 760853"];
462 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 760854"];
463 [label="param CreateTestOptions(bool allowUnsafe = false) 760855"];
464 [label="outputKind 760856"];
465 [label="optimizationLevel: optimizationLevel 760857"];
466 [label="warningLevel: Diagnostic.MaxWarningLevel 760858"];
467 [label="allowUnsafe: allowUnsafe 760859"];
468 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760860"];
469 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760861"];
470 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 760862"];
471 [label="OutputKind.NetModule 760863"];
472 [label="OptimizationLevel.Release 760864"];
473 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 760865"];
474 [label="param CreateTestOptions(OutputKind outputKind) 760866"];
475 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 760867"];
476 [label="param CreateTestOptions(bool allowUnsafe = false) 760868"];
477 [label="outputKind 760869"];
478 [label="optimizationLevel: optimizationLevel 760870"];
479 [label="warningLevel: Diagnostic.MaxWarningLevel 760871"];
480 [label="allowUnsafe: allowUnsafe 760872"];
481 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760873"];
482 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760874"];
483 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 760875"];
484 [label="OutputKind.NetModule 760876"];
485 [label="OptimizationLevel.Debug 760877"];
486 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 760878"];
487 [label="param CreateTestOptions(OutputKind outputKind) 760879"];
488 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 760880"];
489 [label="param CreateTestOptions(bool allowUnsafe = false) 760881"];
490 [label="outputKind 760882"];
491 [label="optimizationLevel: optimizationLevel 760883"];
492 [label="warningLevel: Diagnostic.MaxWarningLevel 760884"];
493 [label="allowUnsafe: allowUnsafe 760885"];
494 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760886"];
495 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 760887"];
496 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 760888"];
497 [label="true 760889"];
498 [label="ReleaseDll.WithAllowUnsafe(true) 760890"];
499 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 760891"];
500 [label="true 760892"];
501 [label="ReleaseExe.WithAllowUnsafe(true) 760893"];
502 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 760894"];
503 [label="true 760895"];
504 [label="DebugDll.WithAllowUnsafe(true) 760896"];
505 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 760897"];
506 [label="true 760898"];
507 [label="DebugExe.WithAllowUnsafe(true) 760899"];
508 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 760900"];
509 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 760901"];
510 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 760902"];
511 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 760903"];
512 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 760904"];
513 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 760905"];
514 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 760906"];
515 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 760907"];
516 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 760908"];
517 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 760909"];
518 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 760910"];
519 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 760911"];
520 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 760912"];
521 [label="DebugInformationFormat.Pdb 760913"];
522 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 760914"];
523 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 760915"];
524 [label="options = TestOptions.Regular; 760916"];
525 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 760917"];
526 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 760918"];
527 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 760919"];
528 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 760920"];
529 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 760921"];
530 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 760922"];
531 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 760923"];
532 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 760924"];
533 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 760925"];
534 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 760926"];
535 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 760927"];
536 [label="param CheckSerializable(SyntaxTree tree) 760928"];
537 [label="var stream = new MemoryStream(); 760929"];
538 [label="var root = tree.GetRoot(); 760930"];
539 [label="var root = tree.GetRoot(); 760931"];
540 [label="root.SerializeTo(stream); 760932"];
541 [label="root.SerializeTo(stream); 760933"];
542 [label="root.SerializeTo(stream); 760934"];
543 [label="stream.Position = 0; 760935"];
544 [label="stream.Position 760936"];
545 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 760937"];
546 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 760938"];
547 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 760939"];
548 [label="return tree; 760940"];
549 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 760941"];
550 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 760942"];
551 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 760943"];
552 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 760944"];
553 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 760945"];
554 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 760946"];
555 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 760947"];
556 [label="hasTopLevelStatements 760948"];
557 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 760949"];
558 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 760950"];
559 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 760951"];
560 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 760952"];
561 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 760953"];
562 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 760954"];
563 [label="param ValidateIOperations(Func<Compilation> createCompilation) 760955"];
564 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 760956"];
565 [label="return; 760957"];
566 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 760958"];
567 [label="var compilation = createCompilationLambda(); 760959"];
568 [label="var compilation = createCompilationLambda(); 760960"];
569 [label="return Guid.NewGuid().ToString('D'); 760961"];
570 [label="var compilation = createCompilationLambda(); 760962"];
571 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 760963"];
572 [label="IsNullableEnabled(compilation) 760964"];
573 [label="param IsNullableEnabled(CSharpCompilation compilation) 760965"];
574 [label="var trees = compilation.SyntaxTrees; 760966"];
575 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 760967"];
576 [label="var options = (CSharpParseOptions)trees[0].Options; 760968"];
577 [label="var options = (CSharpParseOptions)trees[0].Options; 760969"];
578 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 760970"];
579 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 760971"];
580 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 760972"];
581 [label="return compilation; 760973"];
582 [label="CreateCompilationWithMscorlib45(source).VerifyDiagnostics() 760974"];
583 [label="param VerifyDiagnostics(this TCompilation c) 760975"];
584 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 760976"];
585 [label="var diagnostics = c.GetDiagnostics(); 760977"];
586 [label="var diagnostics = c.GetDiagnostics(); 760978"];
587 [label="diagnostics.Verify(expected); 760979"];
588 [label="diagnostics.Verify(expected); 760980"];
589 [label="diagnostics.Verify(expected) 760981"];
590 [label="param Verify(this ImmutableArray<Diagnostic> actual) 760982"];
591 [label="param Verify(params DiagnosticDescription[] expected) 760983"];
592 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 760984"];
593 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 760985"];
594 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 760986"];
595 [label="param Verify(this IEnumerable<Diagnostic> actual) 760987"];
596 [label="param Verify(params DiagnosticDescription[] expected) 760988"];
597 [label="Verify(actual, expected, errorCodeOnly: false); 760989"];
598 [label="Verify(actual, expected, errorCodeOnly: false); 760990"];
599 [label="Verify(actual, expected, errorCodeOnly: false); 760991"];
600 [label="Verify(actual, expected, errorCodeOnly: false) 760992"];
601 [label="param Verify(IEnumerable<Diagnostic> actual) 760993"];
602 [label="param Verify(DiagnosticDescription[] expected) 760994"];
603 [label="param Verify(bool errorCodeOnly) 760995"];
604 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 760996"];
605 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 760997"];
606 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 760998"];
607 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 760999"];
608 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 761000"];
609 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 761001"];
610 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 761002"];
611 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 761003"];
612 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 761004"];
613 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 761005"];
614 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 761006"];
615 [label="{ } 761007"];
616 [label="None = { } 761008"];
617 [label="null 761009"];
618 [label="Any = null 761010"];
619 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 761011"];
620 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 761012"];
621 [label="DiagnosticDescription.GetAssertText(expected, actual) 761013"];
622 [label="param GetAssertText(DiagnosticDescription[] expected) 761014"];
623 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 761015"];
624 [label="const int CSharp = 1; 761016"];
625 [label="const int VisualBasic = 2; 761017"];
626 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 761018"];
627 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 761019"];
628 [label="actual.Any() && actual.First() is CSDiagnostic 761020"];
629 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 761021"];
630 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 761022"];
631 [label="int indentDepth = (language == CSharp) ? 4 : 1; 761023"];
632 [label="(language == CSharp) 761024"];
633 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 761025"];
634 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 761026"];
635 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 761027"];
636 [label="IsSortedOrEmpty(expected) 761028"];
637 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 761029"];
638 [label="new LinePositionComparer() 761030"];
639 [label="param LinePositionComparer(this) 761031"];
640 [label="Instance = new LinePositionComparer() 761032"];
641 [label="var comparer = LinePositionComparer.Instance; 761033"];
642 [label="DiagnosticDescription last = null; 761034"];
643 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 761035"];
644 [label="return true; 761036"];
645 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 761037"];
646 [label="actual = Sort(actual); 761038"];
647 [label="Sort(actual) 761039"];
648 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 761040"];
649 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 761041"];
650 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 761042"];
651 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 761043"];
652 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 761044"];
653 [label="var assertText = new StringBuilder(); 761045"];
654 [label="assertText.AppendLine(); 761046"];
655 [label="int i; 761047"];
656 [label="assertText.AppendLine('Expected:'); 761048"];
657 [label="assertText.AppendLine('Expected:'); 761049"];
658 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 761050"];
659 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 761051"];
660 [label="GetCommaSeparatedLines(assertText, expectedText); 761052"];
661 [label="GetCommaSeparatedLines(assertText, expectedText); 761053"];
662 [label="GetCommaSeparatedLines(assertText, expectedText) 761054"];
663 [label="param GetCommaSeparatedLines(StringBuilder sb) 761055"];
664 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 761056"];
665 [label="int n = lines.Count; 761057"];
666 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 761058"];
667 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 761059"];
668 [label="GetCommaSeparatedLines(assertText, expectedText); 761060"];
669 [label="assertText.AppendLine('Actual:'); 761061"];
670 [label="assertText.AppendLine('Actual:'); 761062"];
671 [label="var actualText = ArrayBuilder<string>.GetInstance(); 761063"];
672 [label="var e = actual.GetEnumerator(); 761064"];
673 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 761065"];
674 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 761066"];
675 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 761067"];
676 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 761068"];
677 [label="assertText.AppendLine('Diff:'); 761069"];
678 [label="assertText.AppendLine('Diff:'); 761070"];
679 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 761071"];
680 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 761072"];
681 [label="new[] { '\\r', '\\n' } 761073"];
682 [label="'\\r' 761074"];
683 [label="'\\n' 761075"];
684 [label="new[] { '\\r', '\\n' } 761076"];
685 [label="new[] { '\\r', '\\n' } 761077"];
686 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 761078"];
687 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 761079"];
688 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 761080"];
689 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 761081"];
690 [label="param DiffReport(IEnumerable<T> expected) 761082"];
691 [label="param DiffReport(IEnumerable<T> actual) 761083"];
692 [label="param DiffReport(string separator) 761084"];
693 [label="param DiffReport(IEqualityComparer<T> comparer = null) 761085"];
694 [label="param DiffReport(Func<T, string> toString = null) 761086"];
695 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 761087"];
696 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 761088"];
697 [label="(comparer != null) 761089"];
698 [label="EqualityComparer<T>.Default 761090"];
699 [label="new LCS<T>(EqualityComparer<T>.Default) 761091"];
700 [label="param LCS(IEqualityComparer<T> comparer) 761092"];
701 [label="param LCS(this) 761093"];
702 [label="1 761094"];
703 [label="DeleteCost = 1 761095"];
704 [label="1 761096"];
705 [label="InsertCost = 1 761097"];
706 [label="2 761098"];
707 [label="UpdateCost = 2 761099"];
708 [label="param LongestCommonSubsequence(this) 761100"];
709 [label="_comparer 761101"];
710 [label="_comparer 761102"];
711 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 761103"];
712 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 761104"];
713 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 761105"];
714 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 761106"];
715 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 761107"];
716 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 761108"];
717 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 761109"];
718 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 761110"];
719 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 761111"];
720 [label="lcs.CalculateDiff(expectedList, actualList, toString) 761112"];
721 [label="param CalculateDiff(IList<T> sequenceA) 761113"];
722 [label="param CalculateDiff(IList<T> sequenceB) 761114"];
723 [label="param CalculateDiff(Func<T, string> toString) 761115"];
724 [label="param CalculateDiff(this) 761116"];
725 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 761117"];
726 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 761118"];
727 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 761119"];
728 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 761120"];
729 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 761121"];
730 [label="param GetEdits(TSequence sequenceA) 761122"];
731 [label="param GetEdits(int lengthA) 761123"];
732 [label="param GetEdits(TSequence sequenceB) 761124"];
733 [label="param GetEdits(int lengthB) 761125"];
734 [label="param GetEdits(this) 761126"];
735 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 761127"];
736 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 761128"];
737 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 761129"];
738 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 761130"];
739 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 761131"];
740 [label="param ComputeCostMatrix(TSequence sequenceA) 761132"];
741 [label="param ComputeCostMatrix(int lengthA) 761133"];
742 [label="param ComputeCostMatrix(TSequence sequenceB) 761134"];
743 [label="param ComputeCostMatrix(int lengthB) 761135"];
744 [label="param ComputeCostMatrix(this) 761136"];
745 [label="var la = lengthA + 1; 761137"];
746 [label="var la = lengthA + 1; 761138"];
747 [label="var lb = lengthB + 1; 761139"];
748 [label="var lb = lengthB + 1; 761140"];
749 [label="var d = new int[la, lb]; 761141"];
750 [label="d[0, 0] = 0; 761142"];
751 [label="d[0, 0] 761143"];
752 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 761144"];
753 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 761145"];
754 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 761146"];
755 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 761147"];
756 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 761148"];
757 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 761149"];
758 [label="return d; 761150"];
759 [label="int i = lengthA; 761151"];
760 [label="int j = lengthB; 761152"];
761 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 761153"];
762 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 761154"];
763 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 761155"];
764 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 761156"];
765 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 761157"];
766 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 761158"];
767 [label="param GetEdits(this) 761159"];
768 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 761160"];
769 [label="param CalculateDiff(this) 761161"];
770 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 761162"];
771 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 761163"];
772 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 761164"];
773 [label="actualText.Free(); 761165"];
774 [label="expectedText.Free(); 761166"];
775 [label="return assertText.ToString(); 761167"];
776 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 761168"];
777 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 761169"];
778 [label="diagnostics.Verify(expected); 761170"];
779 [label="VerifyAssemblyIds(c, diagnostics); 761171"];
780 [label="VerifyAssemblyIds(c, diagnostics); 761172"];
781 [label="VerifyAssemblyIds(c, diagnostics) 761173"];
782 [label="param VerifyAssemblyIds(TCompilation c) 761174"];
783 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 761175"];
784 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 761176"];
785 [label="VerifyAssemblyIds(c, diagnostics); 761177"];
786 [label="return c; 761178"];
2 -> 0;
2 -> 1;
4 -> 3;
6 -> 5;
7 -> 1;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
43 -> 42;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 0;
49 -> 48;
50 -> 0;
51 -> 0;
52 -> 50;
52 -> 51;
52 -> 48;
53 -> 52;
54 -> 0;
55 -> 54;
56 -> 55;
56 -> 54;
57 -> 56;
59 -> 0;
60 -> 58;
60 -> 59;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 0;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 52;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 72;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 0;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 76;
93 -> 92;
94 -> 0;
95 -> 0;
96 -> 94;
96 -> 95;
96 -> 0;
97 -> 96;
99 -> 0;
100 -> 98;
100 -> 99;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 92;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 0;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 104;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 136;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 0;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 140;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 0;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 152;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
174 -> 0;
175 -> 0;
176 -> 174;
176 -> 175;
176 -> 0;
177 -> 176;
179 -> 178;
181 -> 179;
181 -> 180;
182 -> 181;
184 -> 0;
184 -> 183;
185 -> 184;
185 -> 0;
186 -> 185;
188 -> 187;
190 -> 189;
192 -> 191;
194 -> 193;
195 -> 7;
196 -> 195;
197 -> 196;
198 -> 197;
198 -> 196;
199 -> 1;
199 -> 2;
199 -> 198;
200 -> 1;
201 -> 1;
202 -> 201;
202 -> 1;
203 -> 1;
204 -> 202;
204 -> 203;
205 -> 204;
205 -> 203;
206 -> 203;
207 -> 205;
207 -> 206;
208 -> 206;
209 -> 207;
209 -> 208;
209 -> 206;
210 -> 206;
210 -> 1;
211 -> 1;
212 -> 1;
213 -> 210;
213 -> 212;
214 -> 211;
214 -> 212;
215 -> 211;
215 -> 212;
216 -> 211;
216 -> 212;
217 -> 211;
217 -> 212;
218 -> 211;
218 -> 212;
219 -> 211;
219 -> 212;
220 -> 213;
220 -> 212;
221 -> 214;
221 -> 212;
222 -> 215;
222 -> 212;
223 -> 216;
223 -> 212;
224 -> 0;
224 -> 212;
225 -> 217;
225 -> 212;
226 -> 218;
226 -> 212;
227 -> 219;
227 -> 212;
228 -> 212;
229 -> 220;
229 -> 228;
230 -> 221;
230 -> 228;
231 -> 222;
231 -> 228;
232 -> 223;
232 -> 228;
233 -> 224;
233 -> 228;
234 -> 225;
234 -> 228;
235 -> 226;
235 -> 228;
236 -> 227;
236 -> 228;
237 -> 229;
237 -> 228;
238 -> 233;
238 -> 228;
239 -> 230;
239 -> 228;
240 -> 228;
241 -> 238;
241 -> 240;
242 -> 239;
242 -> 240;
243 -> 241;
243 -> 240;
244 -> 240;
245 -> 243;
245 -> 244;
246 -> 245;
246 -> 244;
247 -> 246;
248 -> 0;
248 -> 247;
249 -> 248;
249 -> 0;
249 -> 247;
250 -> 240;
251 -> 242;
251 -> 250;
251 -> 240;
252 -> 249;
252 -> 251;
253 -> 231;
253 -> 228;
254 -> 232;
254 -> 228;
255 -> 234;
255 -> 228;
256 -> 235;
256 -> 228;
257 -> 236;
257 -> 228;
258 -> 228;
259 -> 237;
259 -> 258;
260 -> 252;
260 -> 258;
261 -> 253;
261 -> 258;
262 -> 254;
262 -> 258;
263 -> 255;
263 -> 258;
264 -> 256;
264 -> 258;
265 -> 257;
265 -> 258;
266 -> 259;
266 -> 258;
267 -> 260;
267 -> 258;
268 -> 261;
268 -> 258;
269 -> 262;
269 -> 258;
270 -> 263;
270 -> 258;
271 -> 264;
271 -> 258;
272 -> 265;
272 -> 258;
273 -> 258;
274 -> 273;
274 -> 258;
275 -> 258;
276 -> 266;
276 -> 275;
277 -> 267;
277 -> 275;
278 -> 268;
278 -> 275;
279 -> 269;
279 -> 275;
280 -> 270;
280 -> 275;
281 -> 271;
281 -> 275;
282 -> 272;
282 -> 275;
283 -> 274;
283 -> 275;
284 -> 279;
284 -> 275;
285 -> 281;
285 -> 275;
286 -> 275;
287 -> 284;
287 -> 286;
288 -> 285;
288 -> 286;
289 -> 276;
289 -> 286;
290 -> 289;
290 -> 209;
290 -> 286;
291 -> 290;
292 -> 288;
292 -> 290;
293 -> 287;
293 -> 290;
294 -> 290;
295 -> 291;
295 -> 294;
296 -> 292;
296 -> 294;
297 -> 293;
297 -> 294;
298 -> 291;
298 -> 294;
299 -> 294;
300 -> 297;
300 -> 299;
300 -> 294;
301 -> 0;
302 -> 0;
304 -> 301;
304 -> 302;
304 -> 303;
305 -> 304;
306 -> 0;
307 -> 305;
307 -> 304;
307 -> 306;
308 -> 307;
309 -> 0;
310 -> 305;
310 -> 304;
310 -> 309;
311 -> 310;
312 -> 0;
313 -> 305;
313 -> 304;
313 -> 312;
314 -> 313;
315 -> 0;
316 -> 305;
316 -> 304;
316 -> 315;
317 -> 316;
318 -> 0;
319 -> 305;
319 -> 304;
319 -> 318;
320 -> 319;
321 -> 0;
322 -> 305;
322 -> 304;
322 -> 321;
323 -> 322;
324 -> 0;
325 -> 305;
325 -> 304;
325 -> 324;
326 -> 325;
327 -> 0;
328 -> 305;
328 -> 304;
328 -> 327;
329 -> 328;
330 -> 0;
331 -> 305;
331 -> 304;
331 -> 330;
332 -> 331;
333 -> 0;
334 -> 305;
334 -> 304;
334 -> 333;
335 -> 334;
336 -> 0;
337 -> 305;
337 -> 304;
337 -> 336;
338 -> 337;
339 -> 305;
342 -> 339;
342 -> 341;
343 -> 340;
343 -> 341;
344 -> 341;
345 -> 342;
345 -> 304;
345 -> 341;
346 -> 341;
347 -> 343;
347 -> 341;
348 -> 344;
348 -> 341;
349 -> 347;
349 -> 348;
349 -> 341;
350 -> 349;
350 -> 346;
350 -> 341;
351 -> 345;
351 -> 346;
351 -> 304;
351 -> 350;
351 -> 349;
351 -> 341;
352 -> 351;
353 -> 0;
354 -> 353;
356 -> 354;
356 -> 355;
357 -> 305;
357 -> 304;
357 -> 356;
358 -> 357;
359 -> 0;
360 -> 359;
361 -> 305;
361 -> 304;
361 -> 360;
362 -> 361;
363 -> 0;
364 -> 305;
364 -> 304;
364 -> 363;
365 -> 364;
366 -> 329;
368 -> 367;
369 -> 0;
370 -> 0;
371 -> 0;
373 -> 369;
373 -> 370;
373 -> 371;
373 -> 372;
374 -> 368;
375 -> 373;
375 -> 374;
375 -> 367;
376 -> 375;
380 -> 377;
380 -> 378;
380 -> 379;
381 -> 311;
381 -> 304;
381 -> 310;
381 -> 377;
381 -> 380;
382 -> 381;
383 -> 323;
384 -> 332;
385 -> 332;
386 -> 329;
387 -> 0;
388 -> 0;
390 -> 387;
390 -> 389;
391 -> 388;
391 -> 389;
392 -> 389;
393 -> 390;
393 -> 389;
394 -> 391;
394 -> 389;
395 -> 0;
395 -> 389;
396 -> 392;
396 -> 389;
397 -> 389;
398 -> 393;
398 -> 394;
398 -> 395;
398 -> 396;
398 -> 397;
398 -> 389;
399 -> 398;
400 -> 0;
401 -> 0;
403 -> 400;
403 -> 402;
404 -> 401;
404 -> 402;
405 -> 402;
406 -> 403;
406 -> 402;
407 -> 404;
407 -> 402;
408 -> 0;
408 -> 402;
409 -> 405;
409 -> 402;
410 -> 402;
411 -> 406;
411 -> 407;
411 -> 408;
411 -> 409;
411 -> 410;
411 -> 402;
412 -> 411;
414 -> 399;
414 -> 398;
414 -> 413;
415 -> 414;
417 -> 412;
417 -> 411;
417 -> 416;
418 -> 417;
419 -> 0;
420 -> 0;
422 -> 419;
422 -> 421;
423 -> 420;
423 -> 421;
424 -> 421;
425 -> 422;
425 -> 421;
426 -> 423;
426 -> 421;
427 -> 0;
427 -> 421;
428 -> 424;
428 -> 421;
429 -> 421;
430 -> 425;
430 -> 426;
430 -> 427;
430 -> 428;
430 -> 429;
430 -> 421;
431 -> 430;
432 -> 0;
433 -> 0;
435 -> 432;
435 -> 434;
436 -> 433;
436 -> 434;
437 -> 434;
438 -> 435;
438 -> 434;
439 -> 436;
439 -> 434;
440 -> 0;
440 -> 434;
441 -> 437;
441 -> 434;
442 -> 434;
443 -> 438;
443 -> 439;
443 -> 440;
443 -> 441;
443 -> 442;
443 -> 434;
444 -> 443;
445 -> 0;
446 -> 0;
448 -> 445;
448 -> 447;
449 -> 446;
449 -> 447;
450 -> 447;
451 -> 448;
451 -> 447;
452 -> 449;
452 -> 447;
453 -> 0;
453 -> 447;
454 -> 450;
454 -> 447;
455 -> 447;
456 -> 451;
456 -> 452;
456 -> 453;
456 -> 454;
456 -> 455;
456 -> 447;
457 -> 456;
458 -> 0;
459 -> 0;
461 -> 458;
461 -> 460;
462 -> 459;
462 -> 460;
463 -> 460;
464 -> 461;
464 -> 460;
465 -> 462;
465 -> 460;
466 -> 0;
466 -> 460;
467 -> 463;
467 -> 460;
468 -> 460;
469 -> 464;
469 -> 465;
469 -> 466;
469 -> 467;
469 -> 468;
469 -> 460;
470 -> 469;
471 -> 0;
472 -> 0;
474 -> 471;
474 -> 473;
475 -> 472;
475 -> 473;
476 -> 473;
477 -> 474;
477 -> 473;
478 -> 475;
478 -> 473;
479 -> 0;
479 -> 473;
480 -> 476;
480 -> 473;
481 -> 473;
482 -> 477;
482 -> 478;
482 -> 479;
482 -> 480;
482 -> 481;
482 -> 473;
483 -> 482;
484 -> 0;
485 -> 0;
487 -> 484;
487 -> 486;
488 -> 485;
488 -> 486;
489 -> 486;
490 -> 487;
490 -> 486;
491 -> 488;
491 -> 486;
492 -> 0;
492 -> 486;
493 -> 489;
493 -> 486;
494 -> 486;
495 -> 490;
495 -> 491;
495 -> 492;
495 -> 493;
495 -> 494;
495 -> 486;
496 -> 495;
498 -> 399;
498 -> 398;
498 -> 497;
499 -> 498;
501 -> 412;
501 -> 411;
501 -> 500;
502 -> 501;
504 -> 431;
504 -> 430;
504 -> 503;
505 -> 504;
507 -> 444;
507 -> 443;
507 -> 506;
508 -> 507;
509 -> 0;
510 -> 399;
510 -> 398;
510 -> 509;
510 -> 0;
511 -> 510;
512 -> 0;
513 -> 412;
513 -> 411;
513 -> 512;
513 -> 0;
514 -> 513;
515 -> 0;
516 -> 483;
516 -> 482;
516 -> 515;
516 -> 0;
517 -> 516;
518 -> 0;
519 -> 431;
519 -> 430;
519 -> 518;
519 -> 0;
520 -> 519;
521 -> 0;
522 -> 0;
522 -> 521;
523 -> 522;
524 -> 305;
524 -> 300;
525 -> 295;
525 -> 294;
526 -> 0;
526 -> 294;
527 -> 526;
527 -> 298;
527 -> 294;
528 -> 294;
529 -> 525;
529 -> 527;
529 -> 528;
529 -> 0;
529 -> 294;
530 -> 529;
530 -> 294;
531 -> 524;
531 -> 294;
532 -> 296;
532 -> 294;
533 -> 294;
534 -> 530;
534 -> 531;
534 -> 532;
534 -> 533;
534 -> 529;
534 -> 304;
534 -> 294;
535 -> 294;
536 -> 534;
536 -> 535;
537 -> 535;
538 -> 535;
539 -> 536;
539 -> 534;
539 -> 538;
539 -> 535;
540 -> 537;
540 -> 535;
541 -> 535;
542 -> 539;
542 -> 534;
542 -> 538;
542 -> 540;
542 -> 541;
542 -> 537;
542 -> 535;
543 -> 535;
544 -> 543;
544 -> 537;
544 -> 535;
545 -> 537;
545 -> 535;
546 -> 535;
547 -> 545;
547 -> 546;
547 -> 537;
547 -> 544;
547 -> 535;
548 -> 536;
548 -> 535;
549 -> 548;
549 -> 291;
549 -> 290;
550 -> 291;
550 -> 275;
551 -> 275;
552 -> 278;
552 -> 551;
552 -> 275;
553 -> 550;
553 -> 552;
554 -> 552;
555 -> 553;
555 -> 554;
555 -> 291;
555 -> 549;
555 -> 534;
555 -> 552;
556 -> 555;
556 -> 552;
557 -> 399;
557 -> 556;
558 -> 0;
558 -> 275;
559 -> 283;
559 -> 275;
560 -> 280;
560 -> 550;
560 -> 277;
560 -> 557;
560 -> 275;
561 -> 560;
561 -> 275;
562 -> 275;
563 -> 561;
563 -> 562;
564 -> 0;
564 -> 562;
565 -> 564;
566 -> 275;
567 -> 560;
567 -> 291;
567 -> 549;
567 -> 534;
567 -> 249;
567 -> 0;
567 -> 398;
567 -> 275;
568 -> 275;
569 -> 568;
570 -> 567;
570 -> 569;
570 -> 275;
571 -> 570;
571 -> 275;
572 -> 275;
573 -> 571;
573 -> 572;
574 -> 573;
574 -> 570;
574 -> 572;
575 -> 574;
575 -> 570;
575 -> 572;
576 -> 572;
577 -> 574;
577 -> 576;
577 -> 570;
577 -> 572;
578 -> 0;
578 -> 572;
579 -> 577;
579 -> 578;
579 -> 572;
580 -> 282;
580 -> 579;
580 -> 275;
581 -> 570;
581 -> 275;
582 -> 1;
583 -> 581;
583 -> 582;
584 -> 211;
584 -> 582;
585 -> 582;
586 -> 583;
586 -> 585;
586 -> 579;
586 -> 582;
587 -> 586;
587 -> 582;
588 -> 584;
588 -> 582;
589 -> 582;
590 -> 587;
590 -> 589;
591 -> 588;
591 -> 589;
592 -> 590;
592 -> 589;
593 -> 591;
593 -> 589;
594 -> 589;
595 -> 592;
595 -> 594;
596 -> 593;
596 -> 594;
597 -> 595;
597 -> 594;
598 -> 596;
598 -> 594;
599 -> 594;
600 -> 594;
601 -> 597;
601 -> 600;
602 -> 598;
602 -> 600;
603 -> 599;
603 -> 600;
604 -> 600;
605 -> 602;
605 -> 604;
605 -> 600;
606 -> 602;
606 -> 600;
607 -> 602;
607 -> 600;
608 -> 601;
608 -> 600;
609 -> 603;
609 -> 606;
609 -> 607;
609 -> 600;
610 -> 608;
610 -> 609;
610 -> 600;
611 -> 602;
611 -> 600;
612 -> 600;
613 -> 610;
613 -> 612;
613 -> 600;
614 -> 600;
616 -> 615;
618 -> 617;
619 -> 602;
619 -> 600;
620 -> 601;
620 -> 600;
621 -> 600;
622 -> 619;
622 -> 621;
623 -> 620;
623 -> 621;
624 -> 621;
625 -> 621;
626 -> 623;
626 -> 621;
627 -> 626;
627 -> 610;
627 -> 621;
628 -> 627;
628 -> 621;
629 -> 625;
629 -> 628;
630 -> 629;
630 -> 624;
630 -> 621;
631 -> 629;
631 -> 624;
631 -> 621;
632 -> 631;
632 -> 621;
633 -> 622;
633 -> 621;
634 -> 622;
634 -> 621;
635 -> 622;
635 -> 621;
636 -> 621;
637 -> 635;
637 -> 636;
639 -> 638;
640 -> 638;
641 -> 640;
641 -> 636;
642 -> 636;
643 -> 637;
643 -> 636;
644 -> 636;
645 -> 644;
645 -> 621;
646 -> 623;
646 -> 645;
647 -> 645;
648 -> 646;
648 -> 647;
649 -> 648;
649 -> 647;
650 -> 647;
651 -> 640;
651 -> 647;
652 -> 649;
652 -> 650;
652 -> 651;
652 -> 610;
652 -> 647;
653 -> 621;
654 -> 653;
654 -> 621;
655 -> 621;
656 -> 621;
657 -> 653;
657 -> 656;
657 -> 654;
657 -> 621;
658 -> 621;
659 -> 622;
659 -> 621;
660 -> 653;
660 -> 621;
661 -> 658;
661 -> 621;
662 -> 621;
663 -> 660;
663 -> 662;
664 -> 661;
664 -> 662;
665 -> 664;
665 -> 658;
665 -> 662;
666 -> 662;
667 -> 666;
667 -> 665;
667 -> 662;
668 -> 621;
669 -> 621;
670 -> 653;
670 -> 669;
670 -> 657;
670 -> 621;
671 -> 621;
672 -> 652;
672 -> 621;
673 -> 621;
674 -> 672;
674 -> 621;
675 -> 621;
676 -> 673;
676 -> 675;
676 -> 621;
677 -> 621;
678 -> 653;
678 -> 677;
678 -> 670;
678 -> 621;
679 -> 658;
679 -> 621;
680 -> 671;
680 -> 621;
684 -> 682;
684 -> 681;
685 -> 683;
685 -> 681;
686 -> 681;
687 -> 0;
687 -> 621;
688 -> 621;
689 -> 621;
690 -> 679;
690 -> 689;
691 -> 680;
691 -> 689;
692 -> 687;
692 -> 689;
693 -> 688;
693 -> 689;
694 -> 688;
694 -> 689;
695 -> 689;
696 -> 693;
696 -> 695;
696 -> 689;
697 -> 696;
697 -> 689;
698 -> 0;
700 -> 698;
700 -> 699;
701 -> 699;
703 -> 702;
705 -> 704;
707 -> 706;
708 -> 701;
709 -> 701;
709 -> 699;
710 -> 700;
710 -> 701;
710 -> 699;
711 -> 699;
712 -> 689;
713 -> 712;
713 -> 694;
713 -> 689;
714 -> 690;
714 -> 689;
715 -> 691;
715 -> 689;
716 -> 692;
716 -> 689;
717 -> 714;
717 -> 689;
718 -> 715;
718 -> 689;
719 -> 713;
719 -> 689;
720 -> 689;
721 -> 717;
721 -> 720;
722 -> 718;
722 -> 720;
723 -> 719;
723 -> 720;
724 -> 697;
724 -> 720;
725 -> 721;
725 -> 720;
726 -> 721;
726 -> 714;
726 -> 720;
727 -> 722;
727 -> 720;
728 -> 722;
728 -> 715;
728 -> 720;
729 -> 720;
730 -> 725;
730 -> 729;
731 -> 726;
731 -> 729;
732 -> 727;
732 -> 729;
733 -> 728;
733 -> 729;
734 -> 724;
734 -> 729;
735 -> 730;
735 -> 729;
736 -> 731;
736 -> 729;
737 -> 732;
737 -> 729;
738 -> 733;
738 -> 729;
739 -> 729;
740 -> 735;
740 -> 739;
741 -> 736;
741 -> 739;
742 -> 737;
742 -> 739;
743 -> 738;
743 -> 739;
744 -> 734;
744 -> 739;
745 -> 739;
746 -> 741;
746 -> 745;
746 -> 739;
747 -> 739;
748 -> 743;
748 -> 747;
748 -> 739;
749 -> 746;
749 -> 748;
749 -> 739;
750 -> 739;
751 -> 750;
751 -> 749;
751 -> 739;
752 -> 739;
753 -> 752;
753 -> 741;
753 -> 739;
754 -> 739;
755 -> 754;
755 -> 743;
755 -> 739;
756 -> 739;
757 -> 756;
757 -> 741;
757 -> 739;
758 -> 749;
758 -> 739;
759 -> 731;
759 -> 729;
760 -> 733;
760 -> 729;
761 -> 729;
762 -> 759;
762 -> 761;
762 -> 729;
763 -> 729;
764 -> 759;
764 -> 763;
764 -> 729;
765 -> 729;
766 -> 760;
766 -> 765;
766 -> 729;
767 -> 729;
768 -> 767;
768 -> 720;
769 -> 720;
770 -> 769;
770 -> 689;
771 -> 716;
771 -> 770;
771 -> 689;
772 -> 653;
772 -> 771;
772 -> 678;
772 -> 621;
773 -> 671;
773 -> 621;
774 -> 658;
774 -> 621;
775 -> 653;
775 -> 772;
775 -> 621;
776 -> 775;
776 -> 600;
777 -> 589;
778 -> 582;
779 -> 583;
779 -> 582;
780 -> 586;
780 -> 582;
781 -> 582;
782 -> 779;
782 -> 781;
783 -> 780;
783 -> 781;
784 -> 783;
784 -> 781;
785 -> 582;
786 -> 583;
786 -> 582;
}