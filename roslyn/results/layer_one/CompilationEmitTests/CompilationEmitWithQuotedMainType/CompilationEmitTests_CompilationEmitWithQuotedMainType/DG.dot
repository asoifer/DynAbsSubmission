digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 785242"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 785243"];
3 [label="param CompilationEmitTests(this) 785244"];
4 [label="param EmitMetadataTestBase(this) 785245"];
5 [label="param CSharpTestBase(this) 785246"];
6 [label="param CommonTestBase(this) 785247"];
7 [label="param TestBase(this) 785248"];
8 [label="_temp 785249"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 785250"];
10 [label="param CompilationEmitWithQuotedMainType(this) 785251"];
11 [label="string source = @'\nnamespace abc\n{\npublic class X\n{\n    public static void Main()\n    {\n  \n    }\n}\n}'; 785252"];
12 [label="var compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('abc.X')); 785253"];
13 [label="var compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('abc.X')); 785254"];
14 [label="CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('abc.X')) 785255"];
15 [label="param operator(string source) 785256"];
16 [label="source 785257"];
17 [label="new CSharpTestSource(source) 785258"];
18 [label="param CSharpTestSource(object value) 785259"];
19 [label="param CSharpTestSource(this) 785260"];
20 [label="Value 785261"];
21 [label="var compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('abc.X')); 785262"];
22 [label="param CreateCompilation(CSharpTestSource source) 785263"];
23 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 785264"];
24 [label="param CreateCompilation(CSharpCompilationOptions options = null) 785265"];
25 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 785266"];
26 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 785267"];
27 [label="param CreateCompilation(string assemblyName = '') 785268"];
28 [label="param CreateCompilation(string sourceFileName = '') 785269"];
29 [label="param CreateCompilation(bool skipUsesIsNullable = false) 785270"];
30 [label="source 785271"];
31 [label="targetFramework 785272"];
32 [label="references 785273"];
33 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 785274"];
34 [label="param GetReferences(TargetFramework tf) 785275"];
35 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 785276"];
36 [label="var references = GetReferences(tf); 785277"];
37 [label="GetReferences(tf) 785278"];
38 [label="param GetReferences(TargetFramework targetFramework) 785279"];
39 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 785280"];
40 [label="StandardReferences 785281"];
41 [label="RuntimeUtilities.IsCoreClrRuntime 785282"];
42 [label="Mscorlib46ExtendedReferences 785283"];
43 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 785284"];
44 [label="TestBase.ValueTupleRef 785285"];
45 [label="TestReferences.NetFx.ValueTuple.tuplelib 785286"];
46 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 785287"];
47 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 785288"];
48 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 785289"];
49 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 785290"];
50 [label="return references; 785291"];
51 [label="options 785292"];
52 [label="parseOptions 785293"];
53 [label="assemblyName 785294"];
54 [label="sourceFileName 785295"];
55 [label="skipUsesIsNullable 785296"];
56 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 785297"];
57 [label="param CreateEmptyCompilation(CSharpTestSource source) 785298"];
58 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 785299"];
59 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 785300"];
60 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 785301"];
61 [label="param CreateEmptyCompilation(string assemblyName = '') 785302"];
62 [label="param CreateEmptyCompilation(string sourceFileName = '') 785303"];
63 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 785304"];
64 [label="source 785305"];
65 [label="references 785306"];
66 [label="options 785307"];
67 [label="parseOptions 785308"];
68 [label="assemblyName 785309"];
69 [label="sourceFileName 785310"];
70 [label="skipUsesIsNullable 785311"];
71 [label="null 785312"];
72 [label="experimentalFeature: null 785313"];
73 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 785314"];
74 [label="param CreateCompilationCore(CSharpTestSource source) 785315"];
75 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 785316"];
76 [label="param CreateCompilationCore(CSharpCompilationOptions options) 785317"];
77 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 785318"];
78 [label="param CreateCompilationCore(string assemblyName) 785319"];
79 [label="param CreateCompilationCore(string sourceFileName) 785320"];
80 [label="param CreateCompilationCore(bool skipUsesIsNullable) 785321"];
81 [label="param CreateCompilationCore(MessageID? experimentalFeature) 785322"];
82 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 785323"];
83 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 785324"];
84 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 785325"];
85 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 785326"];
86 [label="param GetSyntaxTrees(string sourceFileName = '') 785327"];
87 [label="param GetSyntaxTrees(this) 785328"];
88 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 785329"];
89 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 785330"];
90 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 785331"];
91 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 785332"];
92 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 785333"];
93 [label="param Parse(string text) 785334"];
94 [label="param Parse(string filename = '') 785335"];
95 [label="param Parse(CSharpParseOptions options = null) 785336"];
96 [label="param Parse(Encoding encoding = null) 785337"];
97 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 785338"];
98 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 785339"];
99 [label="options = TestOptions.Regular; 785340"];
100 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 785341"];
101 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 785342"];
102 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 785343"];
103 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 785344"];
104 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 785345"];
105 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 785346"];
106 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 785347"];
107 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 785348"];
108 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 785349"];
109 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 785350"];
110 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 785351"];
111 [label="param CheckSerializable(SyntaxTree tree) 785352"];
112 [label="var stream = new MemoryStream(); 785353"];
113 [label="var root = tree.GetRoot(); 785354"];
114 [label="var root = tree.GetRoot(); 785355"];
115 [label="root.SerializeTo(stream); 785356"];
116 [label="root.SerializeTo(stream); 785357"];
117 [label="root.SerializeTo(stream); 785358"];
118 [label="stream.Position = 0; 785359"];
119 [label="stream.Position 785360"];
120 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 785361"];
121 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 785362"];
122 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 785363"];
123 [label="return tree; 785364"];
124 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 785365"];
125 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 785366"];
126 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 785367"];
127 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 785368"];
128 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 785369"];
129 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 785370"];
130 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 785371"];
131 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 785372"];
132 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 785373"];
133 [label="param ValidateIOperations(Func<Compilation> createCompilation) 785374"];
134 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 785375"];
135 [label="return; 785376"];
136 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 785377"];
137 [label="var compilation = createCompilationLambda(); 785378"];
138 [label="var compilation = createCompilationLambda(); 785379"];
139 [label="return Guid.NewGuid().ToString('D'); 785380"];
140 [label="var compilation = createCompilationLambda(); 785381"];
141 [label="OutputKind.ConsoleApplication 785382"];
142 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 785383"];
143 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 785384"];
144 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 785385"];
145 [label="OutputKind.DynamicallyLinkedLibrary 785386"];
146 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 785387"];
147 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 785388"];
148 [label="true 785389"];
149 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 785390"];
150 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 785391"];
151 [label="param Create(string? assemblyName) 785392"];
152 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 785393"];
153 [label="param Create(IEnumerable<MetadataReference>? references = null) 785394"];
154 [label="param Create(CSharpCompilationOptions? options = null) 785395"];
155 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 785396"];
156 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 785397"];
157 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 785398"];
158 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 785399"];
159 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 785400"];
160 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 785401"];
161 [label="param Create(string? assemblyName) 785402"];
162 [label="param Create(CSharpCompilationOptions options) 785403"];
163 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 785404"];
164 [label="param Create(IEnumerable<MetadataReference>? references) 785405"];
165 [label="param Create(CSharpCompilation? previousSubmission) 785406"];
166 [label="param Create(Type? returnType) 785407"];
167 [label="param Create(Type? hostObjectType) 785408"];
168 [label="param Create(bool isSubmission) 785409"];
169 [label="RoslynDebug.Assert(options != null); 785410"];
170 [label="RoslynDebug.Assert(options != null); 785411"];
171 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 785412"];
172 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 785413"];
173 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 785414"];
174 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 785415"];
175 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 785416"];
176 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 785417"];
177 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 785418"];
178 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 785419"];
179 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 785420"];
180 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 785421"];
181 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 785422"];
182 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 785423"];
183 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 785424"];
184 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 785425"];
185 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 785426"];
186 [label="param SyntaxAndDeclarationManager(string scriptClassName) 785427"];
187 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 785428"];
188 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 785429"];
189 [label="param SyntaxAndDeclarationManager(bool isSubmission) 785430"];
190 [label="param SyntaxAndDeclarationManager(State state) 785431"];
191 [label="param SyntaxAndDeclarationManager(this) 785432"];
192 [label="externalSyntaxTrees 785433"];
193 [label="scriptClassName 785434"];
194 [label="resolver 785435"];
195 [label="messageProvider 785436"];
196 [label="isSubmission 785437"];
197 [label="param SyntaxAndDeclarationManager(this) 785438"];
198 [label="param SyntaxAndDeclarationManager(this) 785439"];
199 [label="_lazyState 785440"];
200 [label="_lazyState 785441"];
201 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 785442"];
202 [label="param CSharpCompilation(string? assemblyName) 785443"];
203 [label="param CSharpCompilation(CSharpCompilationOptions options) 785444"];
204 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 785445"];
205 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 785446"];
206 [label="param CSharpCompilation(Type? submissionReturnType) 785447"];
207 [label="param CSharpCompilation(Type? hostObjectType) 785448"];
208 [label="param CSharpCompilation(bool isSubmission) 785449"];
209 [label="param CSharpCompilation(ReferenceManager? referenceManager) 785450"];
210 [label="param CSharpCompilation(bool reuseReferenceManager) 785451"];
211 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 785452"];
212 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 785453"];
213 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 785454"];
214 [label="param CSharpCompilation(this) 785455"];
215 [label="assemblyName 785456"];
216 [label="options 785457"];
217 [label="references 785458"];
218 [label="previousSubmission 785459"];
219 [label="submissionReturnType 785460"];
220 [label="hostObjectType 785461"];
221 [label="isSubmission 785462"];
222 [label="referenceManager 785463"];
223 [label="reuseReferenceManager 785464"];
224 [label="syntaxAndDeclarations 785465"];
225 [label="syntaxAndDeclarations.ExternalSyntaxTrees 785466"];
226 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 785467"];
227 [label="semanticModelProvider 785468"];
228 [label="eventQueue 785469"];
229 [label="param CSharpCompilation(this) 785470"];
230 [label="param CSharpCompilation(string? assemblyName) 785471"];
231 [label="param CSharpCompilation(CSharpCompilationOptions options) 785472"];
232 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 785473"];
233 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 785474"];
234 [label="param CSharpCompilation(Type? submissionReturnType) 785475"];
235 [label="param CSharpCompilation(Type? hostObjectType) 785476"];
236 [label="param CSharpCompilation(bool isSubmission) 785477"];
237 [label="param CSharpCompilation(ReferenceManager? referenceManager) 785478"];
238 [label="param CSharpCompilation(bool reuseReferenceManager) 785479"];
239 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 785480"];
240 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 785481"];
241 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 785482"];
242 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 785483"];
243 [label="param CSharpCompilation(this) 785484"];
244 [label="assemblyName 785485"];
245 [label="references 785486"];
246 [label="features 785487"];
247 [label="isSubmission 785488"];
248 [label="semanticModelProvider 785489"];
249 [label="eventQueue 785490"];
250 [label="param CSharpCompilation(this) 785491"];
251 [label="param CSharpCompilation(this) 785492"];
252 [label="_options 785493"];
253 [label="_globalImports 785494"];
254 [label="_previousSubmissionImports 785495"];
255 [label="_globalNamespaceAlias 785496"];
256 [label="_scriptClass 785497"];
257 [label="_lazyHostObjectTypeSymbol 785498"];
258 [label="_lazyImportInfos 785499"];
259 [label="_conversions 785500"];
260 [label="_anonymousTypeManager 785501"];
261 [label="_lazyGlobalNamespace 785502"];
262 [label="builtInOperators 785503"];
263 [label="_lazyAssemblySymbol 785504"];
264 [label="_referenceManager 785505"];
265 [label="_syntaxAndDeclarations 785506"];
266 [label="_lazyEntryPoint 785507"];
267 [label="_lazyEmitNullablePublicOnly 785508"];
268 [label="_lazyCompilationUnitCompletedTrees 785509"];
269 [label="NullableAnalysisData 785510"];
270 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 785511"];
271 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 785512"];
272 [label="_externAliasTargets 785513"];
273 [label="_moduleInitializerMethods 785514"];
274 [label="_binderFactories 785515"];
275 [label="_ignoreAccessibilityBinderFactories 785516"];
276 [label="_lazyDeclarationDiagnostics 785517"];
277 [label="_declarationDiagnosticsFrozen 785518"];
278 [label="new DiagnosticBag() 785519"];
279 [label="_additionalCodegenWarnings = new DiagnosticBag() 785520"];
280 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 785521"];
281 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 785522"];
282 [label="WellKnownMemberSignatureComparer 785523"];
283 [label="_options 785524"];
284 [label="this.builtInOperators = new BuiltInOperators(this); 785525"];
285 [label="this.builtInOperators = new BuiltInOperators(this); 785526"];
286 [label="new BuiltInOperators(this) 785527"];
287 [label="param BuiltInOperators(CSharpCompilation compilation) 785528"];
288 [label="param BuiltInOperators(this) 785529"];
289 [label="_compilation 785530"];
290 [label="_builtInUnaryOperators 785531"];
291 [label="_builtInOperators 785532"];
292 [label="_compilation 785533"];
293 [label="this.builtInOperators 785534"];
294 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 785535"];
295 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 785536"];
296 [label="_scriptClass 785537"];
297 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 785538"];
298 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 785539"];
299 [label="_globalImports 785540"];
300 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 785541"];
301 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 785542"];
302 [label="_previousSubmissionImports 785543"];
303 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 785544"];
304 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 785545"];
305 [label="_globalNamespaceAlias 785546"];
306 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 785547"];
307 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 785548"];
308 [label="_anonymousTypeManager 785549"];
309 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 785550"];
310 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 785551"];
311 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 785552"];
312 [label="LanguageVersion? result = null; 785553"];
313 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 785554"];
314 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 785555"];
315 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 785556"];
316 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 785557"];
317 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 785558"];
318 [label="this.LanguageVersion 785559"];
319 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 785560"];
320 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785561"];
321 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785562"];
322 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785563"];
323 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785564"];
324 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785565"];
325 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785566"];
326 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 785567"];
327 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 785568"];
328 [label="this.Options 785569"];
329 [label="get\n            {\n                return _options;\n            } 785570"];
330 [label="return _options; 785571"];
331 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 785572"];
332 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 785573"];
333 [label="_referenceManager 785574"];
334 [label="_syntaxAndDeclarations 785575"];
335 [label="Debug.Assert(_lazyAssemblySymbol is null); 785576"];
336 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 785577"];
337 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 785578"];
338 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 785579"];
339 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 785580"];
340 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 785581"];
341 [label="compilation.AddSyntaxTrees(syntaxTrees) 785582"];
342 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 785583"];
343 [label="param AddSyntaxTrees(this) 785584"];
344 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 785585"];
345 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 785586"];
346 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 785587"];
347 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 785588"];
348 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 785589"];
349 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 785590"];
350 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 785591"];
351 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 785592"];
352 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 785593"];
353 [label="bool reuseReferenceManager = true; 785594"];
354 [label="int i = 0; 785595"];
355 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 785596"];
356 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 785597"];
357 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 785598"];
358 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 785599"];
359 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 785600"];
360 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 785601"];
361 [label="externalSyntaxTrees.Add(tree); 785602"];
362 [label="externalSyntaxTrees.Add(tree); 785603"];
363 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 785604"];
364 [label="i++; 785605"];
365 [label="externalSyntaxTrees.Free(); 785606"];
366 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 785607"];
367 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 785608"];
368 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 785609"];
369 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 785610"];
370 [label="param AddSyntaxTrees(this) 785611"];
371 [label="var scriptClassName = this.ScriptClassName; 785612"];
372 [label="var resolver = this.Resolver; 785613"];
373 [label="var messageProvider = this.MessageProvider; 785614"];
374 [label="var isSubmission = this.IsSubmission; 785615"];
375 [label="var state = _lazyState; 785616"];
376 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 785617"];
377 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 785618"];
378 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 785619"];
379 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 785620"];
380 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 785621"];
381 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 785622"];
382 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 785623"];
383 [label="param WithExternalSyntaxTrees(this) 785624"];
384 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 785625"];
385 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 785626"];
386 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 785627"];
387 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 785628"];
388 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 785629"];
389 [label="param SyntaxAndDeclarationManager(string scriptClassName) 785630"];
390 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 785631"];
391 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 785632"];
392 [label="param SyntaxAndDeclarationManager(bool isSubmission) 785633"];
393 [label="param SyntaxAndDeclarationManager(State state) 785634"];
394 [label="param SyntaxAndDeclarationManager(this) 785635"];
395 [label="param SyntaxAndDeclarationManager(this) 785636"];
396 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 785637"];
397 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 785638"];
398 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 785639"];
399 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 785640"];
400 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 785641"];
401 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 785642"];
402 [label="param Update(ReferenceManager referenceManager) 785643"];
403 [label="param Update(bool reuseReferenceManager) 785644"];
404 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 785645"];
405 [label="param Update(this) 785646"];
406 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 785647"];
407 [label="this.PreviousSubmission 785648"];
408 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 785649"];
409 [label="ScriptCompilationInfo 785650"];
410 [label="ScriptCompilationInfo?.PreviousScriptCompilation 785651"];
411 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 785652"];
412 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 785653"];
413 [label="this.SubmissionReturnType 785654"];
414 [label="=> ScriptCompilationInfo 785655"];
415 [label="ScriptCompilationInfo 785656"];
416 [label="this.HostObjectType 785657"];
417 [label="=> ScriptCompilationInfo 785658"];
418 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 785659"];
419 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 785660"];
420 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 785661"];
421 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 785662"];
422 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 785663"];
423 [label="param CSharpCompilation(string? assemblyName) 785664"];
424 [label="param CSharpCompilation(CSharpCompilationOptions options) 785665"];
425 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 785666"];
426 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 785667"];
427 [label="param CSharpCompilation(Type? submissionReturnType) 785668"];
428 [label="param CSharpCompilation(Type? hostObjectType) 785669"];
429 [label="param CSharpCompilation(bool isSubmission) 785670"];
430 [label="param CSharpCompilation(ReferenceManager? referenceManager) 785671"];
431 [label="param CSharpCompilation(bool reuseReferenceManager) 785672"];
432 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 785673"];
433 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 785674"];
434 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 785675"];
435 [label="param CSharpCompilation(this) 785676"];
436 [label="previousSubmission 785677"];
437 [label="submissionReturnType 785678"];
438 [label="hostObjectType 785679"];
439 [label="syntaxAndDeclarations.ExternalSyntaxTrees 785680"];
440 [label="eventQueue 785681"];
441 [label="param CSharpCompilation(this) 785682"];
442 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 785683"];
443 [label="param CSharpCompilation(Type? submissionReturnType) 785684"];
444 [label="param CSharpCompilation(Type? hostObjectType) 785685"];
445 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 785686"];
446 [label="param CSharpCompilation(this) 785687"];
447 [label="eventQueue 785688"];
448 [label="param CSharpCompilation(this) 785689"];
449 [label="_options 785690"];
450 [label="_globalImports 785691"];
451 [label="_previousSubmissionImports 785692"];
452 [label="_globalNamespaceAlias 785693"];
453 [label="_scriptClass 785694"];
454 [label="_lazyHostObjectTypeSymbol 785695"];
455 [label="_lazyImportInfos 785696"];
456 [label="_conversions 785697"];
457 [label="_anonymousTypeManager 785698"];
458 [label="_lazyGlobalNamespace 785699"];
459 [label="builtInOperators 785700"];
460 [label="_lazyAssemblySymbol 785701"];
461 [label="_referenceManager 785702"];
462 [label="_syntaxAndDeclarations 785703"];
463 [label="_lazyEntryPoint 785704"];
464 [label="_lazyEmitNullablePublicOnly 785705"];
465 [label="_lazyCompilationUnitCompletedTrees 785706"];
466 [label="NullableAnalysisData 785707"];
467 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 785708"];
468 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 785709"];
469 [label="_externAliasTargets 785710"];
470 [label="_moduleInitializerMethods 785711"];
471 [label="_binderFactories 785712"];
472 [label="_ignoreAccessibilityBinderFactories 785713"];
473 [label="_lazyDeclarationDiagnostics 785714"];
474 [label="_declarationDiagnosticsFrozen 785715"];
475 [label="new DiagnosticBag() 785716"];
476 [label="_additionalCodegenWarnings = new DiagnosticBag() 785717"];
477 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 785718"];
478 [label="this.builtInOperators = new BuiltInOperators(this); 785719"];
479 [label="this.builtInOperators = new BuiltInOperators(this); 785720"];
480 [label="new BuiltInOperators(this) 785721"];
481 [label="param BuiltInOperators(CSharpCompilation compilation) 785722"];
482 [label="param BuiltInOperators(this) 785723"];
483 [label="_compilation 785724"];
484 [label="_builtInUnaryOperators 785725"];
485 [label="_builtInOperators 785726"];
486 [label="_compilation 785727"];
487 [label="this.builtInOperators 785728"];
488 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 785729"];
489 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 785730"];
490 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 785731"];
491 [label="LanguageVersion? result = null; 785732"];
492 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 785733"];
493 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 785734"];
494 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 785735"];
495 [label="result = version; 785736"];
496 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 785737"];
497 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785738"];
498 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785739"];
499 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785740"];
500 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785741"];
501 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785742"];
502 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785743"];
503 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 785744"];
504 [label="referenceManager.AssertCanReuseForCompilation(this); 785745"];
505 [label="referenceManager.AssertCanReuseForCompilation(this); 785746"];
506 [label="_referenceManager 785747"];
507 [label="Debug.Assert(_lazyAssemblySymbol is null); 785748"];
508 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 785749"];
509 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 785750"];
510 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 785751"];
511 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 785752"];
512 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 785753"];
513 [label="return compilation; 785754"];
514 [label="var compilation = createCompilationLambda(); 785755"];
515 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 785756"];
516 [label="IsNullableEnabled(compilation) 785757"];
517 [label="param IsNullableEnabled(CSharpCompilation compilation) 785758"];
518 [label="compilation.SyntaxTrees 785759"];
519 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 785760"];
520 [label="_syntaxAndDeclarations.GetLazyState() 785761"];
521 [label="param GetLazyState(this) 785762"];
522 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 785763"];
523 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 785764"];
524 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 785765"];
525 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 785766"];
526 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 785767"];
527 [label="param CreateState(string scriptClassName) 785768"];
528 [label="param CreateState(SourceReferenceResolver resolver) 785769"];
529 [label="param CreateState(CommonMessageProvider messageProvider) 785770"];
530 [label="param CreateState(bool isSubmission) 785771"];
531 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 785772"];
532 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 785773"];
533 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 785774"];
534 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 785775"];
535 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 785776"];
536 [label="var declTable = DeclarationTable.Empty; 785777"];
537 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 785778"];
538 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 785779"];
539 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 785780"];
540 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 785781"];
541 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 785782"];
542 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 785783"];
543 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 785784"];
544 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 785785"];
545 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 785786"];
546 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 785787"];
547 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 785788"];
548 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 785789"];
549 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 785790"];
550 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 785791"];
551 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 785792"];
552 [label="param AppendAllSyntaxTrees(string scriptClassName) 785793"];
553 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 785794"];
554 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 785795"];
555 [label="param AppendAllSyntaxTrees(bool isSubmission) 785796"];
556 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 785797"];
557 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 785798"];
558 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 785799"];
559 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 785800"];
560 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 785801"];
561 [label="var sourceCodeKind = tree.Options.Kind; 785802"];
562 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 785803"];
563 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 785804"];
564 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 785805"];
565 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 785806"];
566 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 785807"];
567 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 785808"];
568 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 785809"];
569 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 785810"];
570 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 785811"];
571 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 785812"];
572 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 785813"];
573 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 785814"];
574 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 785815"];
575 [label="declMapBuilder.Add(tree, lazyRoot); 785816"];
576 [label="declMapBuilder.Add(tree, lazyRoot); 785817"];
577 [label="declMapBuilder.Add(tree, lazyRoot); 785818"];
578 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 785819"];
579 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 785820"];
580 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 785821"];
581 [label="treesBuilder.Add(tree); 785822"];
582 [label="treesBuilder.Add(tree); 785823"];
583 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 785824"];
584 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 785825"];
585 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 785826"];
586 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 785827"];
587 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 785828"];
588 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 785829"];
589 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 785830"];
590 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 785831"];
591 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 785832"];
592 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 785833"];
593 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 785834"];
594 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 785835"];
595 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 785836"];
596 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 785837"];
597 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 785838"];
598 [label="param State(DeclarationTable declarationTable) 785839"];
599 [label="param State(this) 785840"];
600 [label="OrdinalMap 785841"];
601 [label="LoadDirectiveMap 785842"];
602 [label="LoadedSyntaxTreeMap 785843"];
603 [label="RootNamespaces 785844"];
604 [label="DeclarationTable 785845"];
605 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 785846"];
606 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 785847"];
607 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 785848"];
608 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 785849"];
609 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 785850"];
610 [label="this.SyntaxTrees 785851"];
611 [label="this.OrdinalMap 785852"];
612 [label="this.LoadDirectiveMap 785853"];
613 [label="this.LoadedSyntaxTreeMap 785854"];
614 [label="this.RootNamespaces 785855"];
615 [label="this.DeclarationTable 785856"];
616 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 785857"];
617 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 785858"];
618 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 785859"];
619 [label="return _lazyState; 785860"];
620 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 785861"];
621 [label="var trees = compilation.SyntaxTrees; 785862"];
622 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 785863"];
623 [label="var options = (CSharpParseOptions)trees[0].Options; 785864"];
624 [label="var options = (CSharpParseOptions)trees[0].Options; 785865"];
625 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 785866"];
626 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 785867"];
627 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 785868"];
628 [label="return compilation; 785869"];
629 [label="compilation.VerifyDiagnostics(); 785870"];
630 [label="compilation.VerifyDiagnostics(); 785871"];
631 [label="compilation.VerifyDiagnostics() 785872"];
632 [label="param VerifyDiagnostics(this TCompilation c) 785873"];
633 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 785874"];
634 [label="var diagnostics = c.GetDiagnostics(); 785875"];
635 [label="c.GetDiagnostics() 785876"];
636 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 785877"];
637 [label="param GetDiagnostics(this) 785878"];
638 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 785879"];
639 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 785880"];
640 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 785881"];
641 [label="GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken) 785882"];
642 [label="param GetDiagnostics(CompilationStage stage) 785883"];
643 [label="param GetDiagnostics(bool includeEarlierStages) 785884"];
644 [label="param GetDiagnostics(CancellationToken cancellationToken) 785885"];
645 [label="param GetDiagnostics(this) 785886"];
646 [label="var diagnostics = DiagnosticBag.GetInstance(); 785887"];
647 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 785888"];
648 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 785889"];
649 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 785890"];
650 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 785891"];
651 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 785892"];
652 [label="param GetDiagnostics(CompilationStage stage) 785893"];
653 [label="param GetDiagnostics(bool includeEarlierStages) 785894"];
654 [label="param GetDiagnostics(DiagnosticBag diagnostics) 785895"];
655 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 785896"];
656 [label="param GetDiagnostics(this) 785897"];
657 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 785898"];
658 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 785899"];
659 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 785900"];
660 [label="this.SyntaxTrees 785901"];
661 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 785902"];
662 [label="_syntaxAndDeclarations.GetLazyState() 785903"];
663 [label="param GetLazyState(this) 785904"];
664 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 785905"];
665 [label="var syntaxTrees = this.SyntaxTrees; 785906"];
666 [label="this.Options 785907"];
667 [label="get\n            {\n                return _options;\n            } 785908"];
668 [label="return _options; 785909"];
669 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 785910"];
670 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 785911"];
671 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 785912"];
672 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 785913"];
673 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 785914"];
674 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 785915"];
675 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 785916"];
676 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 785917"];
677 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 785918"];
678 [label="ImmutableArray<LoadDirective> loadDirectives; 785919"];
679 [label="loadDirectives 785920"];
680 [label="syntaxAndDeclarations.GetLazyState() 785921"];
681 [label="param GetLazyState(this) 785922"];
682 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 785923"];
683 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 785924"];
684 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 785925"];
685 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 785926"];
686 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 785927"];
687 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 785928"];
688 [label="cancellationToken.ThrowIfCancellationRequested(); 785929"];
689 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 785930"];
690 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 785931"];
691 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 785932"];
692 [label="CheckAssemblyName(builder); 785933"];
693 [label="CheckAssemblyName(builder); 785934"];
694 [label="CheckAssemblyName(builder); 785935"];
695 [label="get { return _syntaxAndDeclarations.MessageProvider; } 785936"];
696 [label="return _syntaxAndDeclarations.MessageProvider; 785937"];
697 [label="Options 785938"];
698 [label="get\n            {\n                return _options;\n            } 785939"];
699 [label="return _options; 785940"];
700 [label="builder.AddRange(Options.Errors); 785941"];
701 [label="Options 785942"];
702 [label="get\n            {\n                return _options;\n            } 785943"];
703 [label="return _options; 785944"];
704 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 785945"];
705 [label="cancellationToken.ThrowIfCancellationRequested(); 785946"];
706 [label="GetBoundReferenceManager() 785947"];
707 [label="param GetBoundReferenceManager(this) 785948"];
708 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 785949"];
709 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 785950"];
710 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 785951"];
711 [label="get { return this.Declarations.ReferenceDirectives; } 785952"];
712 [label="this.Declarations 785953"];
713 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 785954"];
714 [label="_syntaxAndDeclarations.GetLazyState() 785955"];
715 [label="param GetLazyState(this) 785956"];
716 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 785957"];
717 [label="return this.Declarations.ReferenceDirectives; 785958"];
718 [label="get { return _options; } 785959"];
719 [label="return _options; 785960"];
720 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 785961"];
721 [label="_syntaxAndDeclarations.GetLazyState() 785962"];
722 [label="Debug.Assert(_lazyAssemblySymbol is object); 785963"];
723 [label="return _referenceManager; 785964"];
724 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 785965"];
725 [label="cancellationToken.ThrowIfCancellationRequested(); 785966"];
726 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 785967"];
727 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 785968"];
728 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 785969"];
729 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 785970"];
730 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 785971"];
731 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 785972"];
732 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 785973"];
733 [label="param GetSourceDeclarationDiagnostics(this) 785974"];
734 [label="GlobalImports 785975"];
735 [label="=> _globalImports.Value 785976"];
736 [label="_globalImports.Value 785977"];
737 [label="_globalImports.Value 785978"];
738 [label="=> Imports.FromGlobalUsings(this) 785979"];
739 [label="this 785980"];
740 [label="Imports.FromGlobalUsings(this) 785981"];
741 [label="Imports.FromGlobalUsings(this) 785982"];
742 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 785983"];
743 [label="ScriptCompilationInfo 785984"];
744 [label="ScriptCompilationInfo?.PreviousScriptCompilation 785985"];
745 [label="GlobalImports.Complete(cancellationToken); 785986"];
746 [label="GlobalImports.Complete(cancellationToken); 785987"];
747 [label="GlobalImports.Complete(cancellationToken); 785988"];
748 [label="SourceLocation? location = null; 785989"];
749 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 785990"];
750 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 785991"];
751 [label="Assembly 785992"];
752 [label="get\n            {\n                return SourceAssembly;\n            } 785993"];
753 [label="SourceAssembly 785994"];
754 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 785995"];
755 [label="GetBoundReferenceManager() 785996"];
756 [label="param GetBoundReferenceManager(this) 785997"];
757 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 785998"];
758 [label="return _referenceManager; 785999"];
759 [label="GetBoundReferenceManager(); 786000"];
760 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 786001"];
761 [label="return _lazyAssemblySymbol; 786002"];
762 [label="return SourceAssembly; 786003"];
763 [label="Assembly.ForceComplete(location, cancellationToken); 786004"];
764 [label="Assembly.ForceComplete(location, cancellationToken); 786005"];
765 [label="Assembly.ForceComplete(location, cancellationToken); 786006"];
766 [label="Assembly.ForceComplete(location, cancellationToken); 786007"];
767 [label="Assembly.ForceComplete(location, cancellationToken); 786008"];
768 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 786009"];
769 [label="Declarations 786010"];
770 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 786011"];
771 [label="_syntaxAndDeclarations.GetLazyState() 786012"];
772 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 786013"];
773 [label="return Declarations.GetMergedRoot(this); 786014"];
774 [label="return Declarations.GetMergedRoot(this); 786015"];
775 [label="return Declarations.GetMergedRoot(this); 786016"];
776 [label="_syntaxAndDeclarations.GetLazyState() 786017"];
777 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 786018"];
778 [label="SourceAssembly 786019"];
779 [label="GetBoundReferenceManager() 786020"];
780 [label="param GetBoundReferenceManager(this) 786021"];
781 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 786022"];
782 [label="return _referenceManager; 786023"];
783 [label="GetBoundReferenceManager(); 786024"];
784 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 786025"];
785 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 786026"];
786 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 786027"];
787 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 786028"];
788 [label="var diagnostics = new DiagnosticBag(); 786029"];
789 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 786030"];
790 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 786031"];
791 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 786032"];
792 [label="return _lazyDeclarationDiagnostics; 786033"];
793 [label="param SymbolDeclaredEvent(Symbol symbol) 786034"];
794 [label="param SymbolDeclaredEvent(this) 786035"];
795 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 786036"];
796 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 786037"];
797 [label="param GetUnaliasedReferencedAssemblies(this) 786038"];
798 [label="GetBoundReferenceManager() 786039"];
799 [label="param GetBoundReferenceManager(this) 786040"];
800 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 786041"];
801 [label="return _referenceManager; 786042"];
802 [label="var referenceManager = GetBoundReferenceManager(); 786043"];
803 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 786044"];
804 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 786045"];
805 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 786046"];
806 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 786047"];
807 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 786048"];
808 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 786049"];
809 [label="return _additionalCodegenWarnings; 786050"];
810 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 786051"];
811 [label="return _referenceManager; 786052"];
812 [label="GetBoundReferenceManager(); 786053"];
813 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 786054"];
814 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 786055"];
815 [label="param GetSpecialType(SpecialType specialType) 786056"];
816 [label="param GetSpecialType(this) 786057"];
817 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 786058"];
818 [label="NamedTypeSymbol result; 786059"];
819 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 786060"];
820 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 786061"];
821 [label="Assembly 786062"];
822 [label="GetBoundReferenceManager() 786063"];
823 [label="GetBoundReferenceManager(); 786064"];
824 [label="result = Assembly.GetSpecialType(specialType); 786065"];
825 [label="result = Assembly.GetSpecialType(specialType); 786066"];
826 [label="Debug.Assert(result.SpecialType == specialType); 786067"];
827 [label="return result; 786068"];
828 [label="param GetBinder(CSharpSyntaxNode syntax) 786069"];
829 [label="param GetBinder(this) 786070"];
830 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 786071"];
831 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 786072"];
832 [label="GetBinderFactory(syntax.SyntaxTree) 786073"];
833 [label="param GetBinderFactory(SyntaxTree syntaxTree) 786074"];
834 [label="param GetBinderFactory(bool ignoreAccessibility = false) 786075"];
835 [label="param GetBinderFactory(this) 786076"];
836 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 786077"];
837 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 786078"];
838 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 786079"];
839 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 786080"];
840 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 786081"];
841 [label="param GetBinderFactory(SyntaxTree syntaxTree) 786082"];
842 [label="param GetBinderFactory(bool ignoreAccessibility) 786083"];
843 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 786084"];
844 [label="param GetBinderFactory(this) 786085"];
845 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 786086"];
846 [label="ignoreAccessibility 786087"];
847 [label="_binderFactories 786088"];
848 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 786089"];
849 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 786090"];
850 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 786091"];
851 [label="GetSyntaxTreeOrdinal(syntaxTree) 786092"];
852 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 786093"];
853 [label="param GetSyntaxTreeOrdinal(this) 786094"];
854 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 786095"];
855 [label="this.ContainsSyntaxTree(tree) 786096"];
856 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 786097"];
857 [label="param ContainsSyntaxTree(this) 786098"];
858 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 786099"];
859 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 786100"];
860 [label="_syntaxAndDeclarations.GetLazyState() 786101"];
861 [label="param GetLazyState(this) 786102"];
862 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 786103"];
863 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 786104"];
864 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 786105"];
865 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 786106"];
866 [label="_syntaxAndDeclarations.GetLazyState() 786107"];
867 [label="param GetLazyState(this) 786108"];
868 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 786109"];
869 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 786110"];
870 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 786111"];
871 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 786112"];
872 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 786113"];
873 [label="this.SyntaxTrees 786114"];
874 [label="param GetLazyState(this) 786115"];
875 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 786116"];
876 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 786117"];
877 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 786118"];
878 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 786119"];
879 [label="BinderFactory? previousFactory; 786120"];
880 [label="var previousWeakReference = binderFactories[treeNum]; 786121"];
881 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 786122"];
882 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 786123"];
883 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 786124"];
884 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 786125"];
885 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 786126"];
886 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 786127"];
887 [label="param AddNewFactory(SyntaxTree syntaxTree) 786128"];
888 [label="param AddNewFactory(bool ignoreAccessibility) 786129"];
889 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 786130"];
890 [label="param AddNewFactory(this) 786131"];
891 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 786132"];
892 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 786133"];
893 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 786134"];
894 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 786135"];
895 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 786136"];
896 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 786137"];
897 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 786138"];
898 [label="BinderFactory? previousFactory; 786139"];
899 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 786140"];
900 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 786141"];
901 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 786142"];
902 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 786143"];
903 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 786144"];
904 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 786145"];
905 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 786146"];
906 [label="return newFactory; 786147"];
907 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 786148"];
908 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 786149"];
909 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 786150"];
910 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 786151"];
911 [label="GetAllUnaliasedModules(modules); 786152"];
912 [label="GetAllUnaliasedModules(modules) 786153"];
913 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 786154"];
914 [label="param GetAllUnaliasedModules(this) 786155"];
915 [label="Assembly 786156"];
916 [label="get\n            {\n                return SourceAssembly;\n            } 786157"];
917 [label="GetBoundReferenceManager() 786158"];
918 [label="param GetBoundReferenceManager(this) 786159"];
919 [label="GetBoundReferenceManager(); 786160"];
920 [label="modules.AddRange(Assembly.Modules); 786161"];
921 [label="modules.AddRange(Assembly.Modules); 786162"];
922 [label="GetBoundReferenceManager() 786163"];
923 [label="param GetBoundReferenceManager(this) 786164"];
924 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 786165"];
925 [label="return _referenceManager; 786166"];
926 [label="var referenceManager = GetBoundReferenceManager(); 786167"];
927 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 786168"];
928 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 786169"];
929 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 786170"];
930 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 786171"];
931 [label="GetAllUnaliasedModules(modules); 786172"];
932 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 786173"];
933 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 786174"];
934 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 786175"];
935 [label="modules.Free(); 786176"];
936 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 786177"];
937 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 786178"];
938 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 786179"];
939 [label="return _lazyGlobalNamespace; 786180"];
940 [label="get\n            {\n                return Assembly.Modules[0];\n            } 786181"];
941 [label="Assembly 786182"];
942 [label="get\n            {\n                return SourceAssembly;\n            } 786183"];
943 [label="SourceAssembly 786184"];
944 [label="GetBoundReferenceManager() 786185"];
945 [label="param GetBoundReferenceManager(this) 786186"];
946 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 786187"];
947 [label="return _referenceManager; 786188"];
948 [label="GetBoundReferenceManager(); 786189"];
949 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 786190"];
950 [label="return Assembly.Modules[0]; 786191"];
951 [label="return Assembly.Modules[0]; 786192"];
952 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 786193"];
953 [label="param IsNullableAnalysisEnabledIn(this) 786194"];
954 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 786195"];
955 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 786196"];
956 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 786197"];
957 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 786198"];
958 [label="param IsNullableAnalysisEnabledIn(this) 786199"];
959 [label="GetNullableAnalysisValue() 786200"];
960 [label="param GetNullableAnalysisValue(this) 786201"];
961 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 786202"];
962 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 786203"];
963 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 786204"];
964 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 786205"];
965 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 786206"];
966 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 786207"];
967 [label="Options 786208"];
968 [label="get\n            {\n                return _options;\n            } 786209"];
969 [label="return _options; 786210"];
970 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 786211"];
971 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 786212"];
972 [label="param GetBinderFactory(SyntaxTree syntaxTree) 786213"];
973 [label="param GetBinderFactory(bool ignoreAccessibility = false) 786214"];
974 [label="param GetBinderFactory(this) 786215"];
975 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 786216"];
976 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 786217"];
977 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 786218"];
978 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 786219"];
979 [label="param GetBinderFactory(SyntaxTree syntaxTree) 786220"];
980 [label="param GetBinderFactory(bool ignoreAccessibility) 786221"];
981 [label="param GetBinderFactory(this) 786222"];
982 [label="ignoreAccessibility 786223"];
983 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 786224"];
984 [label="GetSyntaxTreeOrdinal(syntaxTree) 786225"];
985 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 786226"];
986 [label="param GetSyntaxTreeOrdinal(this) 786227"];
987 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 786228"];
988 [label="this.ContainsSyntaxTree(tree) 786229"];
989 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 786230"];
990 [label="param ContainsSyntaxTree(this) 786231"];
991 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 786232"];
992 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 786233"];
993 [label="_syntaxAndDeclarations.GetLazyState() 786234"];
994 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 786235"];
995 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 786236"];
996 [label="_syntaxAndDeclarations.GetLazyState() 786237"];
997 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 786238"];
998 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 786239"];
999 [label="BinderFactory? previousFactory; 786240"];
1000 [label="var previousWeakReference = binderFactories[treeNum]; 786241"];
1001 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 786242"];
1002 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 786243"];
1003 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 786244"];
1004 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 786245"];
1005 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 786246"];
1006 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 786247"];
1007 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 786248"];
1008 [label="param AddNewFactory(SyntaxTree syntaxTree) 786249"];
1009 [label="param AddNewFactory(bool ignoreAccessibility) 786250"];
1010 [label="param AddNewFactory(this) 786251"];
1011 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 786252"];
1012 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 786253"];
1013 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 786254"];
1014 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 786255"];
1015 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 786256"];
1016 [label="BinderFactory? previousFactory; 786257"];
1017 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 786258"];
1018 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 786259"];
1019 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 786260"];
1020 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 786261"];
1021 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 786262"];
1022 [label="get\n            {\n                return Assembly.Modules[0];\n            } 786263"];
1023 [label="Assembly 786264"];
1024 [label="get\n            {\n                return SourceAssembly;\n            } 786265"];
1025 [label="SourceAssembly 786266"];
1026 [label="GetBoundReferenceManager() 786267"];
1027 [label="param GetBoundReferenceManager(this) 786268"];
1028 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 786269"];
1029 [label="return _referenceManager; 786270"];
1030 [label="GetBoundReferenceManager(); 786271"];
1031 [label="return Assembly.Modules[0]; 786272"];
1032 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 786273"];
1033 [label="param IsFeatureEnabled(MessageID feature) 786274"];
1034 [label="compilation.SyntaxTrees 786275"];
1035 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 786276"];
1036 [label="_syntaxAndDeclarations.GetLazyState() 786277"];
1037 [label="param GetLazyState(this) 786278"];
1038 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 786279"];
1039 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 786280"];
1040 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 786281"];
1041 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 786282"];
1042 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 786283"];
1043 [label="GetBoundReferenceManager() 786284"];
1044 [label="GetBoundReferenceManager(); 786285"];
1045 [label="Debug.Assert(result.SpecialType == specialType); 786286"];
1046 [label="param ShouldEmitNullableAttributes(Symbol symbol) 786287"];
1047 [label="param ShouldEmitNullableAttributes(this) 786288"];
1048 [label="RoslynDebug.Assert(symbol is object); 786289"];
1049 [label="RoslynDebug.Assert(symbol is object); 786290"];
1050 [label="Debug.Assert(symbol.IsDefinition); 786291"];
1051 [label="SourceModule 786292"];
1052 [label="get\n            {\n                return Assembly.Modules[0];\n            } 786293"];
1053 [label="Assembly 786294"];
1054 [label="get\n            {\n                return SourceAssembly;\n            } 786295"];
1055 [label="SourceAssembly 786296"];
1056 [label="GetBoundReferenceManager() 786297"];
1057 [label="param GetBoundReferenceManager(this) 786298"];
1058 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 786299"];
1059 [label="return _referenceManager; 786300"];
1060 [label="GetBoundReferenceManager(); 786301"];
1061 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 786302"];
1062 [label="return Assembly.Modules[0]; 786303"];
1063 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 786304"];
1064 [label="EmitNullablePublicOnly 786305"];
1065 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 786306"];
1066 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 786307"];
1067 [label="SyntaxTrees 786308"];
1068 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 786309"];
1069 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 786310"];
1070 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 786311"];
1071 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 786312"];
1072 [label="_lazyEmitNullablePublicOnly 786313"];
1073 [label="return _lazyEmitNullablePublicOnly.Value(); 786314"];
1074 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 786315"];
1075 [label="return true; 786316"];
1076 [label="Debug.Assert(symbol.IsDefinition); 786317"];
1077 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 786318"];
1078 [label="return _referenceManager; 786319"];
1079 [label="GetBoundReferenceManager(); 786320"];
1080 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 786321"];
1081 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 786322"];
1082 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 786323"];
1083 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 786324"];
1084 [label="_declarationDiagnosticsFrozen = true; 786325"];
1085 [label="_declarationDiagnosticsFrozen 786326"];
1086 [label="_needsGeneratedAttributes_IsFrozen = true; 786327"];
1087 [label="_needsGeneratedAttributes_IsFrozen 786328"];
1088 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 786329"];
1089 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 786330"];
1090 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 786331"];
1091 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 786332"];
1092 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 786333"];
1093 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 786334"];
1094 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 786335"];
1095 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 786336"];
1096 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 786337"];
1097 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 786338"];
1098 [label="param GetClsComplianceDiagnostics(this) 786339"];
1099 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 786340"];
1100 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 786341"];
1101 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 786342"];
1102 [label="var builder = DiagnosticBag.GetInstance(); 786343"];
1103 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 786344"];
1104 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 786345"];
1105 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 786346"];
1106 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 786347"];
1107 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 786348"];
1108 [label="param CheckCompliance(CSharpCompilation compilation) 786349"];
1109 [label="param CheckCompliance(DiagnosticBag diagnostics) 786350"];
1110 [label="param CheckCompliance(CancellationToken cancellationToken) 786351"];
1111 [label="param CheckCompliance(SyntaxTree filterTree = null) 786352"];
1112 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 786353"];
1113 [label="var queue = new ConcurrentQueue<Diagnostic>(); 786354"];
1114 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 786355"];
1115 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 786356"];
1116 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 786357"];
1117 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 786358"];
1118 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 786359"];
1119 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 786360"];
1120 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 786361"];
1121 [label="param ClsComplianceChecker(CSharpCompilation compilation) 786362"];
1122 [label="param ClsComplianceChecker(SyntaxTree filterTree) 786363"];
1123 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 786364"];
1124 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 786365"];
1125 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 786366"];
1126 [label="param ClsComplianceChecker(this) 786367"];
1127 [label="param ClsComplianceChecker(this) 786368"];
1128 [label="_compilation 786369"];
1129 [label="_filterTree 786370"];
1130 [label="_filterSpanWithinTree 786371"];
1131 [label="_diagnostics 786372"];
1132 [label="_declaredOrInheritedCompliance 786373"];
1133 [label="_compilerTasks 786374"];
1134 [label="_compilation 786375"];
1135 [label="_filterTree 786376"];
1136 [label="_filterSpanWithinTree 786377"];
1137 [label="_diagnostics 786378"];
1138 [label="_cancellationToken 786379"];
1139 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 786380"];
1140 [label="_declaredOrInheritedCompliance 786381"];
1141 [label="ConcurrentAnalysis 786382"];
1142 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 786383"];
1143 [label="null 786384"];
1144 [label="_filterTree == null 786385"];
1145 [label="_compilation.Options 786386"];
1146 [label="get\n            {\n                return _options;\n            } 786387"];
1147 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 786388"];
1148 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 786389"];
1149 [label="_compilerTasks = new ConcurrentStack<Task>(); 786390"];
1150 [label="_compilerTasks 786391"];
1151 [label="compilation.Assembly 786392"];
1152 [label="get\n            {\n                return SourceAssembly;\n            } 786393"];
1153 [label="GetBoundReferenceManager() 786394"];
1154 [label="param GetBoundReferenceManager(this) 786395"];
1155 [label="GetBoundReferenceManager(); 786396"];
1156 [label="checker.Visit(compilation.Assembly); 786397"];
1157 [label="checker.Visit(compilation.Assembly); 786398"];
1158 [label="checker.Visit(compilation.Assembly); 786399"];
1159 [label="param VisitAssembly(AssemblySymbol symbol) 786400"];
1160 [label="param VisitAssembly(this) 786401"];
1161 [label="_cancellationToken.ThrowIfCancellationRequested(); 786402"];
1162 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 786403"];
1163 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 786404"];
1164 [label="GetDeclaredOrInheritedCompliance(symbol) 786405"];
1165 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 786406"];
1166 [label="param GetDeclaredOrInheritedCompliance(this) 786407"];
1167 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 786408"];
1168 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 786409"];
1169 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 786410"];
1170 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 786411"];
1171 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 786412"];
1172 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 786413"];
1173 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 786414"];
1174 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 786415"];
1175 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 786416"];
1176 [label="Compliance compliance; 786417"];
1177 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 786418"];
1178 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 786419"];
1179 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 786420"];
1180 [label="Location ignoredLocation; 786421"];
1181 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 786422"];
1182 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 786423"];
1183 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 786424"];
1184 [label="param GetDeclaredCompliance(Symbol symbol) 786425"];
1185 [label="param GetDeclaredCompliance(out Location attributeLocation) 786426"];
1186 [label="param GetDeclaredCompliance(this) 786427"];
1187 [label="attributeLocation = null; 786428"];
1188 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 786429"];
1189 [label="return null; 786430"];
1190 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 786431"];
1191 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 786432"];
1192 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 786433"];
1193 [label="compliance = Compliance.ImpliedFalse; 786434"];
1194 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 786435"];
1195 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 786436"];
1196 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 786437"];
1197 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 786438"];
1198 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 786439"];
1199 [label="IsTrue(assemblyCompliance) 786440"];
1200 [label="param IsTrue(Compliance compliance) 786441"];
1201 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 786442"];
1202 [label="return false; 786443"];
1203 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 786444"];
1204 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 786445"];
1205 [label="ModuleSymbol module = symbol.Modules[i]; 786446"];
1206 [label="Location attributeLocation; 786447"];
1207 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 786448"];
1208 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 786449"];
1209 [label="GetDeclaredCompliance(module, out attributeLocation) 786450"];
1210 [label="param GetDeclaredCompliance(Symbol symbol) 786451"];
1211 [label="param GetDeclaredCompliance(out Location attributeLocation) 786452"];
1212 [label="param GetDeclaredCompliance(this) 786453"];
1213 [label="attributeLocation = null; 786454"];
1214 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 786455"];
1215 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 786456"];
1216 [label="i == 0 786457"];
1217 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 786458"];
1218 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 786459"];
1219 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 786460"];
1220 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 786461"];
1221 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 786462"];
1222 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 786463"];
1223 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 786464"];
1224 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 786465"];
1225 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 786466"];
1226 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 786467"];
1227 [label="GetDeclaredOrInheritedCompliance(sourceModule) 786468"];
1228 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 786469"];
1229 [label="param GetDeclaredOrInheritedCompliance(this) 786470"];
1230 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 786471"];
1231 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 786472"];
1232 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 786473"];
1233 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 786474"];
1234 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 786475"];
1235 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 786476"];
1236 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 786477"];
1237 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 786478"];
1238 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 786479"];
1239 [label="Compliance compliance; 786480"];
1240 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 786481"];
1241 [label="Location ignoredLocation; 786482"];
1242 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 786483"];
1243 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 786484"];
1244 [label="param GetDeclaredCompliance(out Location attributeLocation) 786485"];
1245 [label="param GetDeclaredCompliance(this) 786486"];
1246 [label="attributeLocation = null; 786487"];
1247 [label="return null; 786488"];
1248 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 786489"];
1249 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 786490"];
1250 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 786491"];
1251 [label="GetInheritedCompliance(symbol) 786492"];
1252 [label="param GetInheritedCompliance(Symbol symbol) 786493"];
1253 [label="param GetInheritedCompliance(this) 786494"];
1254 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 786495"];
1255 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 786496"];
1256 [label="System.Diagnostics.Debug.Assert((object)containing != null); 786497"];
1257 [label="System.Diagnostics.Debug.Assert((object)containing != null); 786498"];
1258 [label="return GetDeclaredOrInheritedCompliance(containing); 786499"];
1259 [label="GetDeclaredOrInheritedCompliance(containing) 786500"];
1260 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 786501"];
1261 [label="param GetDeclaredOrInheritedCompliance(this) 786502"];
1262 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 786503"];
1263 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 786504"];
1264 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 786505"];
1265 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 786506"];
1266 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 786507"];
1267 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 786508"];
1268 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 786509"];
1269 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 786510"];
1270 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 786511"];
1271 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 786512"];
1272 [label="return compliance; 786513"];
1273 [label="IsTrue(GetInheritedCompliance(symbol)) 786514"];
1274 [label="param IsTrue(Compliance compliance) 786515"];
1275 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 786516"];
1276 [label="return false; 786517"];
1277 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 786518"];
1278 [label="param IsTrue(Compliance compliance) 786519"];
1279 [label="Visit(symbol.GlobalNamespace); 786520"];
1280 [label="Visit(symbol.GlobalNamespace); 786521"];
1281 [label="param VisitNamespace(NamespaceSymbol symbol) 786522"];
1282 [label="param VisitNamespace(this) 786523"];
1283 [label="_cancellationToken.ThrowIfCancellationRequested(); 786524"];
1284 [label="if (DoNotVisit(symbol)) return; 786525"];
1285 [label="DoNotVisit(symbol) 786526"];
1286 [label="param DoNotVisit(Symbol symbol) 786527"];
1287 [label="param DoNotVisit(this) 786528"];
1288 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 786529"];
1289 [label="return false; 786530"];
1290 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 786531"];
1291 [label="GetDeclaredOrInheritedCompliance(symbol) 786532"];
1292 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 786533"];
1293 [label="param GetDeclaredOrInheritedCompliance(this) 786534"];
1294 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 786535"];
1295 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 786536"];
1296 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 786537"];
1297 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 786538"];
1298 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 786539"];
1299 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 786540"];
1300 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 786541"];
1301 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 786542"];
1302 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 786543"];
1303 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 786544"];
1304 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 786545"];
1305 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 786546"];
1306 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 786547"];
1307 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 786548"];
1308 [label="return compliance; 786549"];
1309 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 786550"];
1310 [label="param IsTrue(Compliance compliance) 786551"];
1311 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 786552"];
1312 [label="return false; 786553"];
1313 [label="ConcurrentAnalysis 786554"];
1314 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 786555"];
1315 [label="null 786556"];
1316 [label="_filterTree == null 786557"];
1317 [label="_compilation.Options 786558"];
1318 [label="get\n            {\n                return _options;\n            } 786559"];
1319 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 786560"];
1320 [label="VisitNamespaceMembersAsTasks(symbol); 786561"];
1321 [label="VisitNamespaceMembersAsTasks(symbol) 786562"];
1322 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 786563"];
1323 [label="param VisitNamespaceMembersAsTasks(this) 786564"];
1324 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 786565"];
1325 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 786566"];
1326 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 786567"];
1327 [label="VisitNamespaceMembersAsTasks(symbol); 786568"];
1328 [label="checker.WaitForWorkers() 786569"];
1329 [label="param WaitForWorkers(this) 786570"];
1330 [label="var tasks = _compilerTasks; 786571"];
1331 [label="if (tasks == null)\n            {\n                return;\n            } 786572"];
1332 [label="if (tasks == null)\n            {\n                return;\n            } 786573"];
1333 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 786574"];
1334 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 786575"];
1335 [label="curTask.GetAwaiter().GetResult(); 786576"];
1336 [label="checker.WaitForWorkers(); 786577"];
1337 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 786578"];
1338 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 786579"];
1339 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 786580"];
1340 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 786581"];
1341 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 786582"];
1342 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 786583"];
1343 [label="return _lazyClsComplianceDiagnostics; 786584"];
1344 [label="return result.AsImmutable().Concat(clsDiagnostics); 786585"];
1345 [label="return result.AsImmutable().Concat(clsDiagnostics); 786586"];
1346 [label="return result.AsImmutable().Concat(clsDiagnostics); 786587"];
1347 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 786588"];
1348 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 786589"];
1349 [label="cancellationToken.ThrowIfCancellationRequested(); 786590"];
1350 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 786591"];
1351 [label="var methodBodyDiagnostics = DiagnosticBag.GetInstance(); 786592"];
1352 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 786593"];
1353 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 786594"];
1354 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken) 786595"];
1355 [label="param GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics) 786596"];
1356 [label="param GetDiagnosticsForAllMethodBodies(CancellationToken cancellationToken) 786597"];
1357 [label="param GetDiagnosticsForAllMethodBodies(this) 786598"];
1358 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 786599"];
1359 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 786600"];
1360 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 786601"];
1361 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 786602"];
1362 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken) 786603"];
1363 [label="param CompileMethodBodies(CSharpCompilation compilation) 786604"];
1364 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 786605"];
1365 [label="param CompileMethodBodies(bool emittingPdb) 786606"];
1366 [label="param CompileMethodBodies(bool emitTestCoverageData) 786607"];
1367 [label="param CompileMethodBodies(bool hasDeclarationErrors) 786608"];
1368 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 786609"];
1369 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 786610"];
1370 [label="param CompileMethodBodies(CancellationToken cancellationToken) 786611"];
1371 [label="Debug.Assert(compilation != null); 786612"];
1372 [label="Debug.Assert(compilation != null); 786613"];
1373 [label="Debug.Assert(diagnostics != null); 786614"];
1374 [label="Debug.Assert(diagnostics != null); 786615"];
1375 [label="compilation.PreviousSubmission 786616"];
1376 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 786617"];
1377 [label="ScriptCompilationInfo 786618"];
1378 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 786619"];
1379 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 786620"];
1380 [label="MethodSymbol entryPoint = null; 786621"];
1381 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 786622"];
1382 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 786623"];
1383 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 786624"];
1384 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 786625"];
1385 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 786626"];
1386 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 786627"];
1387 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 786628"];
1388 [label="param GetEntryPoint(CSharpCompilation compilation) 786629"];
1389 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 786630"];
1390 [label="param GetEntryPoint(bool hasDeclarationErrors) 786631"];
1391 [label="param GetEntryPoint(DiagnosticBag diagnostics) 786632"];
1392 [label="param GetEntryPoint(CancellationToken cancellationToken) 786633"];
1393 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 786634"];
1394 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 786635"];
1395 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 786636"];
1396 [label="param GetEntryPointAndDiagnostics(this) 786637"];
1397 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 786638"];
1398 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 786639"];
1399 [label="EntryPoint? entryPoint; 786640"];
1400 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 786641"];
1401 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 786642"];
1402 [label="GetBoundReferenceManager() 786643"];
1403 [label="GetBoundReferenceManager(); 786644"];
1404 [label="this.Options 786645"];
1405 [label="return _options; 786646"];
1406 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 786647"];
1407 [label="entryPoint = null; 786648"];
1408 [label="this.Options 786649"];
1409 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 786650"];
1410 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 786651"];
1411 [label="this.Options 786652"];
1412 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 786653"];
1413 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 786654"];
1414 [label="if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    } 786655"];
1415 [label="ImmutableArray<Diagnostic> diagnostics; 786656"];
1416 [label="diagnostics 786657"];
1417 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 786658"];
1418 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 786659"];
1419 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 786660"];
1420 [label="FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics) 786661"];
1421 [label="param FindEntryPoint(MethodSymbol? simpleProgramEntryPointSymbol) 786662"];
1422 [label="param FindEntryPoint(CancellationToken cancellationToken) 786663"];
1423 [label="param FindEntryPoint(out ImmutableArray<Diagnostic> sealedDiagnostics) 786664"];
1424 [label="param FindEntryPoint(this) 786665"];
1425 [label="var diagnostics = DiagnosticBag.GetInstance(); 786666"];
1426 [label="var entryPointCandidates = ArrayBuilder<MethodSymbol>.GetInstance(); 786667"];
1427 [label="NamedTypeSymbol? mainType; 786668"];
1428 [label="this.Options 786669"];
1429 [label="get\n            {\n                return _options;\n            } 786670"];
1430 [label="string? mainTypeName = this.Options.MainTypeName; 786671"];
1431 [label="this.SourceModule 786672"];
1432 [label="get\n            {\n                return Assembly.Modules[0];\n            } 786673"];
1433 [label="GetBoundReferenceManager() 786674"];
1434 [label="param GetBoundReferenceManager(this) 786675"];
1435 [label="GetBoundReferenceManager(); 786676"];
1436 [label="NamespaceSymbol globalNamespace = this.SourceModule.GlobalNamespace; 786677"];
1437 [label="this.ScriptClass 786678"];
1438 [label="get { return _scriptClass.Value; } 786679"];
1439 [label="return _scriptClass.Value; 786680"];
1440 [label="_scriptClass.Value 786681"];
1441 [label="param BindScriptClass(this) 786682"];
1442 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 786683"];
1443 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 786684"];
1444 [label="get { return this.SourceModule.GetPublicSymbol(); } 786685"];
1445 [label="this.SourceModule 786686"];
1446 [label="get\n            {\n                return Assembly.Modules[0];\n            } 786687"];
1447 [label="GetBoundReferenceManager() 786688"];
1448 [label="param GetBoundReferenceManager(this) 786689"];
1449 [label="GetBoundReferenceManager(); 786690"];
1450 [label="return this.SourceModule.GetPublicSymbol(); 786691"];
1451 [label="get\n            {\n                return this.SyntaxTrees;\n            } 786692"];
1452 [label="this.SyntaxTrees 786693"];
1453 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 786694"];
1454 [label="param GetLazyState(this) 786695"];
1455 [label="return this.SyntaxTrees; 786696"];
1456 [label="var scriptClass = this.ScriptClass; 786697"];
1457 [label="if (mainTypeName != null)\n                {\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    }\n\n                    var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity();\n                    if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    }\n\n                    mainType = mainTypeOrNamespace as NamedTypeSymbol;\n                    if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    }\n\n                    AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered());\n                }\n                else\n                {\n                    mainType = null;\n\n                    AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken));\n\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    }\n                } 786698"];
1458 [label="if (mainTypeName != null)\n                {\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    }\n\n                    var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity();\n                    if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    }\n\n                    mainType = mainTypeOrNamespace as NamedTypeSymbol;\n                    if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    }\n\n                    AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered());\n                }\n                else\n                {\n                    mainType = null;\n\n                    AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken));\n\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    }\n                } 786699"];
1459 [label="if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    } 786700"];
1460 [label="var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity(); 786701"];
1461 [label="var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity(); 786702"];
1462 [label="if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    } 786703"];
1463 [label="mainType = mainTypeOrNamespace as NamedTypeSymbol; 786704"];
1464 [label="if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    } 786705"];
1465 [label="if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    } 786706"];
1466 [label="AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered()); 786707"];
1467 [label="AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered()); 786708"];
1468 [label="AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered()) 786709"];
1469 [label="param AddEntryPointCandidates(ArrayBuilder<MethodSymbol> entryPointCandidates) 786710"];
1470 [label="param AddEntryPointCandidates(IEnumerable<Symbol> members) 786711"];
1471 [label="foreach (var member in members)\n            {\n                if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                }\n            } 786712"];
1472 [label="if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                } 786713"];
1473 [label="entryPointCandidates.Add(method); 786714"];
1474 [label="entryPointCandidates.Add(method); 786715"];
1475 [label="AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered()); 786716"];
1476 [label="var taskEntryPoints = ArrayBuilder<(bool IsValid, MethodSymbol Candidate, DiagnosticBag SpecificDiagnostics)>.GetInstance(); 786717"];
1477 [label="DiagnosticBag noMainFoundDiagnostics = DiagnosticBag.GetInstance(); 786718"];
1478 [label="var viableEntryPoints = ArrayBuilder<MethodSymbol>.GetInstance(); 786719"];
1479 [label="foreach (var candidate in entryPointCandidates)\n                {\n                    var perCandidateBag = DiagnosticBag.GetInstance();\n                    var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag);\n\n                    if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    }\n                } 786720"];
1480 [label="foreach (var candidate in entryPointCandidates)\n                {\n                    var perCandidateBag = DiagnosticBag.GetInstance();\n                    var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag);\n\n                    if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    }\n                } 786721"];
1481 [label="var perCandidateBag = DiagnosticBag.GetInstance(); 786722"];
1482 [label="var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag); 786723"];
1483 [label="var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag); 786724"];
1484 [label="HasEntryPointSignature(candidate, perCandidateBag) 786725"];
1485 [label="param HasEntryPointSignature(MethodSymbol method) 786726"];
1486 [label="param HasEntryPointSignature(DiagnosticBag bag) 786727"];
1487 [label="param HasEntryPointSignature(this) 786728"];
1488 [label="if (method.IsVararg)\n            {\n                return (false, false);\n            } 786729"];
1489 [label="TypeSymbol returnType = method.ReturnType; 786730"];
1490 [label="bool returnsTaskOrTaskOfInt = false; 786731"];
1491 [label="if (returnType.SpecialType != SpecialType.System_Int32 && !returnType.IsVoidType())\n            {\n                // Never look for ReturnsAwaitableToVoidOrInt on int32 or void\n                returnsTaskOrTaskOfInt = ReturnsAwaitableToVoidOrInt(method, bag);\n                if (!returnsTaskOrTaskOfInt)\n                {\n                    return (false, false);\n                }\n            } 786732"];
1492 [label="if (returnType.SpecialType != SpecialType.System_Int32 && !returnType.IsVoidType())\n            {\n                // Never look for ReturnsAwaitableToVoidOrInt on int32 or void\n                returnsTaskOrTaskOfInt = ReturnsAwaitableToVoidOrInt(method, bag);\n                if (!returnsTaskOrTaskOfInt)\n                {\n                    return (false, false);\n                }\n            } 786733"];
1493 [label="if (method.RefKind != RefKind.None)\n            {\n                return (false, returnsTaskOrTaskOfInt);\n            } 786734"];
1494 [label="if (method.Parameters.Length == 0)\n            {\n                return (true, returnsTaskOrTaskOfInt);\n            } 786735"];
1495 [label="if (method.Parameters.Length == 0)\n            {\n                return (true, returnsTaskOrTaskOfInt);\n            } 786736"];
1496 [label="return (true, returnsTaskOrTaskOfInt); 786737"];
1497 [label="true 786738"];
1498 [label="returnsTaskOrTaskOfInt 786739"];
1499 [label="if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    } 786740"];
1500 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 786741"];
1501 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 786742"];
1502 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 786743"];
1503 [label="checkValid(candidate, IsCandidate, perCandidateBag) 786744"];
1504 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 786745"];
1505 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 786746"];
1506 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 786747"];
1507 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 786748"];
1508 [label="if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    } 786749"];
1509 [label="if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    } 786750"];
1510 [label="return true; 786751"];
1511 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 786752"];
1512 [label="if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            } 786753"];
1513 [label="diagnostics.AddRange(perCandidateBag); 786754"];
1514 [label="diagnostics.AddRange(perCandidateBag); 786755"];
1515 [label="viableEntryPoints.Add(candidate); 786756"];
1516 [label="viableEntryPoints.Add(candidate); 786757"];
1517 [label="perCandidateBag.Free(); 786758"];
1518 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 786759"];
1519 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 786760"];
1520 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 786761"];
1521 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 786762"];
1522 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 786763"];
1523 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 786764"];
1524 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 786765"];
1525 [label="if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 786766"];
1526 [label="MethodSymbol? entryPoint = null; 786767"];
1527 [label="if (viableEntryPoints.Count == 0)\n                {\n                    if (mainType is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoEntryPoint, NoLocation.Singleton);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoMainInClass, mainType.Locations.First(), mainType);\n                    }\n                }\n                else\n                {\n                    foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    }\n\n                    if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    }\n                } 786768"];
1528 [label="if (viableEntryPoints.Count == 0)\n                {\n                    if (mainType is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoEntryPoint, NoLocation.Singleton);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoMainInClass, mainType.Locations.First(), mainType);\n                    }\n                }\n                else\n                {\n                    foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    }\n\n                    if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    }\n                } 786769"];
1529 [label="foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    } 786770"];
1530 [label="if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        } 786771"];
1531 [label="if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    } 786772"];
1532 [label="if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    } 786773"];
1533 [label="entryPoint = viableEntryPoints[0]; 786774"];
1534 [label="taskEntryPoints.Free(); 786775"];
1535 [label="viableEntryPoints.Free(); 786776"];
1536 [label="noMainFoundDiagnostics.Free(); 786777"];
1537 [label="return entryPoint; 786778"];
1538 [label="entryPointCandidates.Free(); 786779"];
1539 [label="sealedDiagnostics = diagnostics.ToReadOnlyAndFree(); 786780"];
1540 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 786781"];
1541 [label="null 786782"];
1542 [label="ImmutableArray<Diagnostic>.Empty 786783"];
1543 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 786784"];
1544 [label="param EntryPoint(MethodSymbol? methodSymbol) 786785"];
1545 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 786786"];
1546 [label="param EntryPoint(this) 786787"];
1547 [label="MethodSymbol 786788"];
1548 [label="this.MethodSymbol 786789"];
1549 [label="this.Diagnostics 786790"];
1550 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 786791"];
1551 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 786792"];
1552 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 786793"];
1553 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 786794"];
1554 [label="new EntryPoint(entryPointMethod, diagnostics) 786795"];
1555 [label="param EntryPoint(MethodSymbol? methodSymbol) 786796"];
1556 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 786797"];
1557 [label="param EntryPoint(this) 786798"];
1558 [label="MethodSymbol 786799"];
1559 [label="this.MethodSymbol 786800"];
1560 [label="this.Diagnostics 786801"];
1561 [label="this.Options 786802"];
1562 [label="return _options; 786803"];
1563 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 786804"];
1564 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 786805"];
1565 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 786806"];
1566 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 786807"];
1567 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 786808"];
1568 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 786809"];
1569 [label="return _lazyEntryPoint; 786810"];
1570 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 786811"];
1571 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 786812"];
1572 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 786813"];
1573 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 786814"];
1574 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 786815"];
1575 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 786816"];
1576 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 786817"];
1577 [label="SynthesizedEntryPointSymbol synthesizedEntryPoint = entryPoint as SynthesizedEntryPointSymbol; 786818"];
1578 [label="if ((object)synthesizedEntryPoint == null)\n            {\n                var returnType = entryPoint.ReturnType;\n                if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                }\n            } 786819"];
1579 [label="if ((object)synthesizedEntryPoint == null)\n            {\n                var returnType = entryPoint.ReturnType;\n                if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                }\n            } 786820"];
1580 [label="var returnType = entryPoint.ReturnType; 786821"];
1581 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 786822"];
1582 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 786823"];
1583 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 786824"];
1584 [label="GetBoundReferenceManager() 786825"];
1585 [label="param GetBoundReferenceManager(this) 786826"];
1586 [label="GetBoundReferenceManager(); 786827"];
1587 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 786828"];
1588 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 786829"];
1589 [label="return entryPoint; 786830"];
1590 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 786831"];
1591 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 786832"];
1592 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 786833"];
1593 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 786834"];
1594 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 786835"];
1595 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 786836"];
1596 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 786837"];
1597 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 786838"];
1598 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 786839"];
1599 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 786840"];
1600 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 786841"];
1601 [label="param MethodCompiler(CSharpCompilation compilation) 786842"];
1602 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 786843"];
1603 [label="param MethodCompiler(bool emittingPdb) 786844"];
1604 [label="param MethodCompiler(bool emitTestCoverageData) 786845"];
1605 [label="param MethodCompiler(bool hasDeclarationErrors) 786846"];
1606 [label="param MethodCompiler(DiagnosticBag diagnostics) 786847"];
1607 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 786848"];
1608 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 786849"];
1609 [label="param MethodCompiler(CancellationToken cancellationToken) 786850"];
1610 [label="param MethodCompiler(this) 786851"];
1611 [label="param MethodCompiler(this) 786852"];
1612 [label="_compilation 786853"];
1613 [label="_emittingPdb 786854"];
1614 [label="_emitTestCoverageData 786855"];
1615 [label="_diagnostics 786856"];
1616 [label="_hasDeclarationErrors 786857"];
1617 [label="_moduleBeingBuiltOpt 786858"];
1618 [label="_filterOpt 786859"];
1619 [label="_debugDocumentProvider 786860"];
1620 [label="_entryPointOpt 786861"];
1621 [label="_compilerTasks 786862"];
1622 [label="_globalHasErrors 786863"];
1623 [label="Debug.Assert(compilation != null); 786864"];
1624 [label="Debug.Assert(compilation != null); 786865"];
1625 [label="Debug.Assert(diagnostics != null); 786866"];
1626 [label="Debug.Assert(diagnostics != null); 786867"];
1627 [label="_compilation 786868"];
1628 [label="_moduleBeingBuiltOpt 786869"];
1629 [label="_emittingPdb 786870"];
1630 [label="_cancellationToken 786871"];
1631 [label="_diagnostics 786872"];
1632 [label="_filterOpt 786873"];
1633 [label="_entryPointOpt 786874"];
1634 [label="_hasDeclarationErrors 786875"];
1635 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 786876"];
1636 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 786877"];
1637 [label="param SetGlobalErrorIfTrue(bool arg) 786878"];
1638 [label="param SetGlobalErrorIfTrue(this) 786879"];
1639 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 786880"];
1640 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 786881"];
1641 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 786882"];
1642 [label="_emitTestCoverageData 786883"];
1643 [label="compilation.Options 786884"];
1644 [label="get\n            {\n                return _options;\n            } 786885"];
1645 [label="return _options; 786886"];
1646 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 786887"];
1647 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 786888"];
1648 [label="methodCompiler._compilerTasks 786889"];
1649 [label="compilation.SourceModule 786890"];
1650 [label="get\n            {\n                return Assembly.Modules[0];\n            } 786891"];
1651 [label="Assembly 786892"];
1652 [label="get\n            {\n                return SourceAssembly;\n            } 786893"];
1653 [label="SourceAssembly 786894"];
1654 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 786895"];
1655 [label="GetBoundReferenceManager() 786896"];
1656 [label="param GetBoundReferenceManager(this) 786897"];
1657 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 786898"];
1658 [label="return _referenceManager; 786899"];
1659 [label="GetBoundReferenceManager(); 786900"];
1660 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 786901"];
1661 [label="return Assembly.Modules[0]; 786902"];
1662 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 786903"];
1663 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 786904"];
1664 [label="param CompileNamespace(NamespaceSymbol symbol) 786905"];
1665 [label="param CompileNamespace(this) 786906"];
1666 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 786907"];
1667 [label="s.Accept(this, null); 786908"];
1668 [label="s.Accept(this, null); 786909"];
1669 [label="s.Accept(this, null); 786910"];
1670 [label="param VisitNamespace(NamespaceSymbol symbol) 786911"];
1671 [label="param VisitNamespace(TypeCompilationState arg) 786912"];
1672 [label="param VisitNamespace(this) 786913"];
1673 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 786914"];
1674 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 786915"];
1675 [label="PassesFilter(_filterOpt, symbol) 786916"];
1676 [label="param PassesFilter(Predicate<Symbol> filterOpt) 786917"];
1677 [label="param PassesFilter(Symbol symbol) 786918"];
1678 [label="return (filterOpt == null) || filterOpt(symbol); 786919"];
1679 [label="return (filterOpt == null) || filterOpt(symbol); 786920"];
1680 [label="arg = null; 786921"];
1681 [label="_cancellationToken.ThrowIfCancellationRequested(); 786922"];
1682 [label="_compilation.Options 786923"];
1683 [label="get\n            {\n                return _options;\n            } 786924"];
1684 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamespaceAsAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamespace(symbol);\n            } 786925"];
1685 [label="Task worker = CompileNamespaceAsAsync(symbol); 786926"];
1686 [label="CompileNamespaceAsAsync(symbol) 786927"];
1687 [label="param CompileNamespaceAsAsync(NamespaceSymbol symbol) 786928"];
1688 [label="param CompileNamespaceAsAsync(this) 786929"];
1689 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamespace(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 786930"];
1690 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamespace(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 786931"];
1691 [label="Task worker = CompileNamespaceAsAsync(symbol); 786932"];
1692 [label="_compilerTasks.Push(worker); 786933"];
1693 [label="return null; 786934"];
1694 [label="s.Accept(this, null); 786935"];
1695 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 786936"];
1696 [label="methodCompiler.WaitForWorkers() 786937"];
1697 [label="param WaitForWorkers(this) 786938"];
1698 [label="var tasks = _compilerTasks; 786939"];
1699 [label="if (tasks == null)\n            {\n                return;\n            } 786940"];
1700 [label="if (tasks == null)\n            {\n                return;\n            } 786941"];
1701 [label="Task curTask; 786942"];
1702 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 786943"];
1703 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 786944"];
1704 [label="curTask.GetAwaiter().GetResult(); 786945"];
1705 [label="methodCompiler.WaitForWorkers(); 786946"];
1706 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 786947"];
1707 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 786948"];
1708 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 786949"];
1709 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 786950"];
1710 [label="compilation.AdditionalCodegenWarnings 786951"];
1711 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 786952"];
1712 [label="return _additionalCodegenWarnings; 786953"];
1713 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 786954"];
1714 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 786955"];
1715 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 786956"];
1716 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 786957"];
1717 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 786958"];
1718 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 786959"];
1719 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 786960"];
1720 [label="param WarnUnusedFields(CSharpCompilation compilation) 786961"];
1721 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 786962"];
1722 [label="param WarnUnusedFields(CancellationToken cancellationToken) 786963"];
1723 [label="compilation.Assembly 786964"];
1724 [label="get\n            {\n                return SourceAssembly;\n            } 786965"];
1725 [label="SourceAssembly 786966"];
1726 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 786967"];
1727 [label="GetBoundReferenceManager() 786968"];
1728 [label="param GetBoundReferenceManager(this) 786969"];
1729 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 786970"];
1730 [label="return _referenceManager; 786971"];
1731 [label="GetBoundReferenceManager(); 786972"];
1732 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 786973"];
1733 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 786974"];
1734 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 786975"];
1735 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 786976"];
1736 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 786977"];
1737 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 786978"];
1738 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 786979"];
1739 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 786980"];
1740 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 786981"];
1741 [label="new[] { '\\r\\n', '\\r', '\\n' } 786982"];
1742 [label="'\\r\\n' 786983"];
1743 [label="'\\r' 786984"];
1744 [label="'\\n' 786985"];
1745 [label="new[] { '\\r\\n', '\\r', '\\n' } 786986"];
1746 [label="new[] { '\\r\\n', '\\r', '\\n' } 786987"];
1747 [label="new[] { '\\r\\n', '\\r', '\\n' } 786988"];
1748 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 786989"];
1749 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 786990"];
1750 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 786991"];
1751 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 786992"];
1752 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 786993"];
1753 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken) 786994"];
1754 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 786995"];
1755 [label="param WriteDocumentationCommentXml(string? assemblyName) 786996"];
1756 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 786997"];
1757 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 786998"];
1758 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 786999"];
1759 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 787000"];
1760 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 787001"];
1761 [label="StreamWriter writer = null; 787002"];
1762 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 787003"];
1763 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 787004"];
1764 [label="compilation.SourceAssembly 787005"];
1765 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 787006"];
1766 [label="GetBoundReferenceManager() 787007"];
1767 [label="param GetBoundReferenceManager(this) 787008"];
1768 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 787009"];
1769 [label="return _referenceManager; 787010"];
1770 [label="GetBoundReferenceManager(); 787011"];
1771 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 787012"];
1772 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 787013"];
1773 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 787014"];
1774 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 787015"];
1775 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 787016"];
1776 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 787017"];
1777 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 787018"];
1778 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 787019"];
1779 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 787020"];
1780 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 787021"];
1781 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 787022"];
1782 [label="param DocumentationCommentCompiler(string assemblyName) 787023"];
1783 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 787024"];
1784 [label="param DocumentationCommentCompiler(TextWriter writer) 787025"];
1785 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 787026"];
1786 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 787027"];
1787 [label="param DocumentationCommentCompiler(bool processIncludes) 787028"];
1788 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 787029"];
1789 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 787030"];
1790 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 787031"];
1791 [label="param DocumentationCommentCompiler(this) 787032"];
1792 [label="param DocumentationCommentCompiler(this) 787033"];
1793 [label="_assemblyName 787034"];
1794 [label="_compilation 787035"];
1795 [label="_writer 787036"];
1796 [label="_filterTree 787037"];
1797 [label="_filterSpanWithinTree 787038"];
1798 [label="_processIncludes 787039"];
1799 [label="_isForSingleSymbol 787040"];
1800 [label="_diagnostics 787041"];
1801 [label="_lazyComparer 787042"];
1802 [label="_includedFileCache 787043"];
1803 [label="_indentDepth 787044"];
1804 [label="_temporaryStringBuilders 787045"];
1805 [label="_assemblyName 787046"];
1806 [label="_compilation 787047"];
1807 [label="_writer 787048"];
1808 [label="_filterTree 787049"];
1809 [label="_filterSpanWithinTree 787050"];
1810 [label="_processIncludes 787051"];
1811 [label="_isForSingleSymbol 787052"];
1812 [label="_diagnostics 787053"];
1813 [label="_cancellationToken 787054"];
1814 [label="compilation.SourceAssembly 787055"];
1815 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 787056"];
1816 [label="GetBoundReferenceManager() 787057"];
1817 [label="param GetBoundReferenceManager(this) 787058"];
1818 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 787059"];
1819 [label="return _referenceManager; 787060"];
1820 [label="GetBoundReferenceManager(); 787061"];
1821 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 787062"];
1822 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 787063"];
1823 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 787064"];
1824 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 787065"];
1825 [label="param VisitNamespace(NamespaceSymbol symbol) 787066"];
1826 [label="param VisitNamespace(this) 787067"];
1827 [label="_cancellationToken.ThrowIfCancellationRequested(); 787068"];
1828 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 787069"];
1829 [label="Debug.Assert(_assemblyName != null); 787070"];
1830 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 787071"];
1831 [label="WriteLine('<?xml version=\\'1.0\\'?>') 787072"];
1832 [label="param WriteLine(string message) 787073"];
1833 [label="param WriteLine(this) 787074"];
1834 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787075"];
1835 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787076"];
1836 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787077"];
1837 [label="WriteLine('<doc>'); 787078"];
1838 [label="WriteLine('<doc>') 787079"];
1839 [label="param WriteLine(string message) 787080"];
1840 [label="param WriteLine(this) 787081"];
1841 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787082"];
1842 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787083"];
1843 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787084"];
1844 [label="Indent() 787085"];
1845 [label="param Indent(this) 787086"];
1846 [label="_indentDepth 787087"];
1847 [label="Indent(); 787088"];
1848 [label="_compilation.Options 787089"];
1849 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 787090"];
1850 [label="WriteLine('<assembly>'); 787091"];
1851 [label="WriteLine('<assembly>') 787092"];
1852 [label="param WriteLine(string message) 787093"];
1853 [label="param WriteLine(this) 787094"];
1854 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787095"];
1855 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787096"];
1856 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787097"];
1857 [label="Indent() 787098"];
1858 [label="param Indent(this) 787099"];
1859 [label="_indentDepth 787100"];
1860 [label="Indent(); 787101"];
1861 [label="WriteLine('<name>{0}</name>', _assemblyName); 787102"];
1862 [label="WriteLine('<name>{0}</name>', _assemblyName) 787103"];
1863 [label="WriteLine('<name>{0}</name>', _assemblyName) 787104"];
1864 [label="param WriteLine(string format) 787105"];
1865 [label="param WriteLine(params object[] args) 787106"];
1866 [label="param WriteLine(this) 787107"];
1867 [label="WriteLine(string.Format(format, args)); 787108"];
1868 [label="WriteLine(string.Format(format, args)); 787109"];
1869 [label="WriteLine(string.Format(format, args)); 787110"];
1870 [label="WriteLine(string.Format(format, args)) 787111"];
1871 [label="param WriteLine(string message) 787112"];
1872 [label="param WriteLine(this) 787113"];
1873 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787114"];
1874 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787115"];
1875 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787116"];
1876 [label="WriteLine(string.Format(format, args)); 787117"];
1877 [label="Unindent() 787118"];
1878 [label="param Unindent(this) 787119"];
1879 [label="_indentDepth 787120"];
1880 [label="Debug.Assert(_indentDepth >= 0); 787121"];
1881 [label="Debug.Assert(_indentDepth >= 0); 787122"];
1882 [label="Unindent(); 787123"];
1883 [label="WriteLine('</assembly>'); 787124"];
1884 [label="WriteLine('</assembly>') 787125"];
1885 [label="param WriteLine(string message) 787126"];
1886 [label="param WriteLine(this) 787127"];
1887 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787128"];
1888 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787129"];
1889 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787130"];
1890 [label="WriteLine('<members>'); 787131"];
1891 [label="WriteLine('<members>') 787132"];
1892 [label="param WriteLine(string message) 787133"];
1893 [label="param WriteLine(this) 787134"];
1894 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787135"];
1895 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787136"];
1896 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787137"];
1897 [label="Indent() 787138"];
1898 [label="param Indent(this) 787139"];
1899 [label="_indentDepth 787140"];
1900 [label="Indent(); 787141"];
1901 [label="Debug.Assert(!_isForSingleSymbol); 787142"];
1902 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 787143"];
1903 [label="_cancellationToken.ThrowIfCancellationRequested(); 787144"];
1904 [label="s.Accept(this); 787145"];
1905 [label="s.Accept(this); 787146"];
1906 [label="s.Accept(this); 787147"];
1907 [label="Debug.Assert(!_isForSingleSymbol); 787148"];
1908 [label="param VisitNamedType(NamedTypeSymbol symbol) 787149"];
1909 [label="param VisitNamedType(this) 787150"];
1910 [label="_cancellationToken.ThrowIfCancellationRequested(); 787151"];
1911 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 787152"];
1912 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 787153"];
1913 [label="DefaultVisit(symbol); 787154"];
1914 [label="DefaultVisit(symbol) 787155"];
1915 [label="param DefaultVisit(Symbol symbol) 787156"];
1916 [label="param DefaultVisit(this) 787157"];
1917 [label="_cancellationToken.ThrowIfCancellationRequested(); 787158"];
1918 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 787159"];
1919 [label="ShouldSkip(symbol) 787160"];
1920 [label="param ShouldSkip(Symbol symbol) 787161"];
1921 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 787162"];
1922 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 787163"];
1923 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 787164"];
1924 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 787165"];
1925 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 787166"];
1926 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 787167"];
1927 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 787168"];
1928 [label="DocumentationMode maxDocumentationMode; 787169"];
1929 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 787170"];
1930 [label="docCommentNodes 787171"];
1931 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 787172"];
1932 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 787173"];
1933 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 787174"];
1934 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 787175"];
1935 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 787176"];
1936 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 787177"];
1937 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 787178"];
1938 [label="param TryGetDocumentationCommentNodes(this) 787179"];
1939 [label="maxDocumentationMode = DocumentationMode.None; 787180"];
1940 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 787181"];
1941 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 787182"];
1942 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 787183"];
1943 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 787184"];
1944 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 787185"];
1945 [label="currDocumentationMode > maxDocumentationMode 787186"];
1946 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 787187"];
1947 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 787188"];
1948 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 787189"];
1949 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 787190"];
1950 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 787191"];
1951 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 787192"];
1952 [label="return true; 787193"];
1953 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 787194"];
1954 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 787195"];
1955 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 787196"];
1956 [label="return; 787197"];
1957 [label="DefaultVisit(symbol); 787198"];
1958 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 787199"];
1959 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 787200"];
1960 [label="_cancellationToken.ThrowIfCancellationRequested(); 787201"];
1961 [label="member.Accept(this); 787202"];
1962 [label="member.Accept(this); 787203"];
1963 [label="member.Accept(this); 787204"];
1964 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 787205"];
1965 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 787206"];
1966 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 787207"];
1967 [label="DocumentationMode maxDocumentationMode; 787208"];
1968 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 787209"];
1969 [label="docCommentNodes 787210"];
1970 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 787211"];
1971 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 787212"];
1972 [label="maxDocumentationMode = DocumentationMode.None; 787213"];
1973 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 787214"];
1974 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 787215"];
1975 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 787216"];
1976 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 787217"];
1977 [label="currDocumentationMode > maxDocumentationMode 787218"];
1978 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 787219"];
1979 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 787220"];
1980 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 787221"];
1981 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 787222"];
1982 [label="return true; 787223"];
1983 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 787224"];
1984 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 787225"];
1985 [label="return; 787226"];
1986 [label="return; 787227"];
1987 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 787228"];
1988 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 787229"];
1989 [label="Unindent() 787230"];
1990 [label="Debug.Assert(_indentDepth >= 0); 787231"];
1991 [label="Unindent(); 787232"];
1992 [label="WriteLine('</members>'); 787233"];
1993 [label="WriteLine('</members>') 787234"];
1994 [label="param WriteLine(string message) 787235"];
1995 [label="param WriteLine(this) 787236"];
1996 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787237"];
1997 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787238"];
1998 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787239"];
1999 [label="Unindent() 787240"];
2000 [label="_indentDepth 787241"];
2001 [label="Debug.Assert(_indentDepth >= 0); 787242"];
2002 [label="Debug.Assert(_indentDepth >= 0); 787243"];
2003 [label="Unindent(); 787244"];
2004 [label="WriteLine('</doc>'); 787245"];
2005 [label="WriteLine('</doc>') 787246"];
2006 [label="param WriteLine(string message) 787247"];
2007 [label="param WriteLine(this) 787248"];
2008 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787249"];
2009 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787250"];
2010 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 787251"];
2011 [label="Debug.Assert(compiler._indentDepth == 0); 787252"];
2012 [label="Debug.Assert(compiler._indentDepth == 0); 787253"];
2013 [label="writer?.Flush(); 787254"];
2014 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 787255"];
2015 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 787256"];
2016 [label="compilation.SyntaxTrees 787257"];
2017 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 787258"];
2018 [label="_syntaxAndDeclarations.GetLazyState() 787259"];
2019 [label="param GetLazyState(this) 787260"];
2020 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 787261"];
2021 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 787262"];
2022 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 787263"];
2023 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 787264"];
2024 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 787265"];
2025 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 787266"];
2026 [label="param ReportUnprocessed(SyntaxTree tree) 787267"];
2027 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 787268"];
2028 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 787269"];
2029 [label="param ReportUnprocessed(CancellationToken cancellationToken) 787270"];
2030 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 787271"];
2031 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 787272"];
2032 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 787273"];
2033 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 787274"];
2034 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken) 787275"];
2035 [label="param ReportUnusedImports(SyntaxTree? filterTree) 787276"];
2036 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 787277"];
2037 [label="param ReportUnusedImports(CancellationToken cancellationToken) 787278"];
2038 [label="param ReportUnusedImports(this) 787279"];
2039 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 787280"];
2040 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 787281"];
2041 [label="CompleteTrees(filterTree); 787282"];
2042 [label="CompleteTrees(filterTree) 787283"];
2043 [label="param CompleteTrees(SyntaxTree? filterTree) 787284"];
2044 [label="param CompleteTrees(this) 787285"];
2045 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 787286"];
2046 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 787287"];
2047 [label="CompleteTrees(filterTree); 787288"];
2048 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 787289"];
2049 [label="builder.AddRangeAndFree(methodBodyDiagnostics); 787290"];
2050 [label="builder.AddRangeAndFree(methodBodyDiagnostics); 787291"];
2051 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 787292"];
2052 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 787293"];
2053 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 787294"];
2054 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 787295"];
2055 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 787296"];
2056 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 787297"];
2057 [label="return diagnostics.ToReadOnlyAndFree(); 787298"];
2058 [label="diagnostics.Verify(expected); 787299"];
2059 [label="diagnostics.Verify(expected); 787300"];
2060 [label="diagnostics.Verify(expected) 787301"];
2061 [label="param Verify(this ImmutableArray<Diagnostic> actual) 787302"];
2062 [label="param Verify(params DiagnosticDescription[] expected) 787303"];
2063 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 787304"];
2064 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 787305"];
2065 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 787306"];
2066 [label="param Verify(this IEnumerable<Diagnostic> actual) 787307"];
2067 [label="param Verify(params DiagnosticDescription[] expected) 787308"];
2068 [label="Verify(actual, expected, errorCodeOnly: false); 787309"];
2069 [label="Verify(actual, expected, errorCodeOnly: false); 787310"];
2070 [label="Verify(actual, expected, errorCodeOnly: false); 787311"];
2071 [label="Verify(actual, expected, errorCodeOnly: false) 787312"];
2072 [label="param Verify(IEnumerable<Diagnostic> actual) 787313"];
2073 [label="param Verify(DiagnosticDescription[] expected) 787314"];
2074 [label="param Verify(bool errorCodeOnly) 787315"];
2075 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 787316"];
2076 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 787317"];
2077 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 787318"];
2078 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 787319"];
2079 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 787320"];
2080 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 787321"];
2081 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 787322"];
2082 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 787323"];
2083 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 787324"];
2084 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 787325"];
2085 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 787326"];
2086 [label="{ } 787327"];
2087 [label="None = { } 787328"];
2088 [label="null 787329"];
2089 [label="Any = null 787330"];
2090 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 787331"];
2091 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 787332"];
2092 [label="DiagnosticDescription.GetAssertText(expected, actual) 787333"];
2093 [label="param GetAssertText(DiagnosticDescription[] expected) 787334"];
2094 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 787335"];
2095 [label="const int CSharp = 1; 787336"];
2096 [label="const int VisualBasic = 2; 787337"];
2097 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 787338"];
2098 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 787339"];
2099 [label="actual.Any() && actual.First() is CSDiagnostic 787340"];
2100 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 787341"];
2101 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 787342"];
2102 [label="int indentDepth = (language == CSharp) ? 4 : 1; 787343"];
2103 [label="(language == CSharp) 787344"];
2104 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 787345"];
2105 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 787346"];
2106 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 787347"];
2107 [label="IsSortedOrEmpty(expected) 787348"];
2108 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 787349"];
2109 [label="new LinePositionComparer() 787350"];
2110 [label="param LinePositionComparer(this) 787351"];
2111 [label="Instance = new LinePositionComparer() 787352"];
2112 [label="var comparer = LinePositionComparer.Instance; 787353"];
2113 [label="DiagnosticDescription last = null; 787354"];
2114 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 787355"];
2115 [label="return true; 787356"];
2116 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 787357"];
2117 [label="actual = Sort(actual); 787358"];
2118 [label="Sort(actual) 787359"];
2119 [label="param Sort(IEnumerable<Diagnostic> diagnostics) 787360"];
2120 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 787361"];
2121 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 787362"];
2122 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 787363"];
2123 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 787364"];
2124 [label="var assertText = new StringBuilder(); 787365"];
2125 [label="assertText.AppendLine(); 787366"];
2126 [label="int i; 787367"];
2127 [label="assertText.AppendLine('Expected:'); 787368"];
2128 [label="assertText.AppendLine('Expected:'); 787369"];
2129 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 787370"];
2130 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 787371"];
2131 [label="GetCommaSeparatedLines(assertText, expectedText); 787372"];
2132 [label="GetCommaSeparatedLines(assertText, expectedText); 787373"];
2133 [label="GetCommaSeparatedLines(assertText, expectedText) 787374"];
2134 [label="param GetCommaSeparatedLines(StringBuilder sb) 787375"];
2135 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 787376"];
2136 [label="int n = lines.Count; 787377"];
2137 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 787378"];
2138 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 787379"];
2139 [label="GetCommaSeparatedLines(assertText, expectedText); 787380"];
2140 [label="assertText.AppendLine('Actual:'); 787381"];
2141 [label="assertText.AppendLine('Actual:'); 787382"];
2142 [label="var actualText = ArrayBuilder<string>.GetInstance(); 787383"];
2143 [label="var e = actual.GetEnumerator(); 787384"];
2144 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 787385"];
2145 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 787386"];
2146 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 787387"];
2147 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 787388"];
2148 [label="assertText.AppendLine('Diff:'); 787389"];
2149 [label="assertText.AppendLine('Diff:'); 787390"];
2150 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 787391"];
2151 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 787392"];
2152 [label="new[] { '\\r', '\\n' } 787393"];
2153 [label="'\\r' 787394"];
2154 [label="'\\n' 787395"];
2155 [label="new[] { '\\r', '\\n' } 787396"];
2156 [label="new[] { '\\r', '\\n' } 787397"];
2157 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 787398"];
2158 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 787399"];
2159 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 787400"];
2160 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 787401"];
2161 [label="param DiffReport(IEnumerable<T> expected) 787402"];
2162 [label="param DiffReport(IEnumerable<T> actual) 787403"];
2163 [label="param DiffReport(string separator) 787404"];
2164 [label="param DiffReport(IEqualityComparer<T> comparer = null) 787405"];
2165 [label="param DiffReport(Func<T, string> toString = null) 787406"];
2166 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 787407"];
2167 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 787408"];
2168 [label="(comparer != null) 787409"];
2169 [label="EqualityComparer<T>.Default 787410"];
2170 [label="new LCS<T>(EqualityComparer<T>.Default) 787411"];
2171 [label="param LCS(IEqualityComparer<T> comparer) 787412"];
2172 [label="param LCS(this) 787413"];
2173 [label="1 787414"];
2174 [label="DeleteCost = 1 787415"];
2175 [label="1 787416"];
2176 [label="InsertCost = 1 787417"];
2177 [label="2 787418"];
2178 [label="UpdateCost = 2 787419"];
2179 [label="param LongestCommonSubsequence(this) 787420"];
2180 [label="_comparer 787421"];
2181 [label="_comparer 787422"];
2182 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 787423"];
2183 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 787424"];
2184 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 787425"];
2185 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 787426"];
2186 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 787427"];
2187 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 787428"];
2188 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 787429"];
2189 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 787430"];
2190 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 787431"];
2191 [label="lcs.CalculateDiff(expectedList, actualList, toString) 787432"];
2192 [label="param CalculateDiff(IList<T> sequenceA) 787433"];
2193 [label="param CalculateDiff(IList<T> sequenceB) 787434"];
2194 [label="param CalculateDiff(Func<T, string> toString) 787435"];
2195 [label="param CalculateDiff(this) 787436"];
2196 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 787437"];
2197 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 787438"];
2198 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 787439"];
2199 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 787440"];
2200 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 787441"];
2201 [label="param GetEdits(TSequence sequenceA) 787442"];
2202 [label="param GetEdits(int lengthA) 787443"];
2203 [label="param GetEdits(TSequence sequenceB) 787444"];
2204 [label="param GetEdits(int lengthB) 787445"];
2205 [label="param GetEdits(this) 787446"];
2206 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 787447"];
2207 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 787448"];
2208 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 787449"];
2209 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 787450"];
2210 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 787451"];
2211 [label="param ComputeCostMatrix(TSequence sequenceA) 787452"];
2212 [label="param ComputeCostMatrix(int lengthA) 787453"];
2213 [label="param ComputeCostMatrix(TSequence sequenceB) 787454"];
2214 [label="param ComputeCostMatrix(int lengthB) 787455"];
2215 [label="param ComputeCostMatrix(this) 787456"];
2216 [label="var la = lengthA + 1; 787457"];
2217 [label="var la = lengthA + 1; 787458"];
2218 [label="var lb = lengthB + 1; 787459"];
2219 [label="var lb = lengthB + 1; 787460"];
2220 [label="var d = new int[la, lb]; 787461"];
2221 [label="d[0, 0] = 0; 787462"];
2222 [label="d[0, 0] 787463"];
2223 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 787464"];
2224 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 787465"];
2225 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 787466"];
2226 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 787467"];
2227 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 787468"];
2228 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 787469"];
2229 [label="return d; 787470"];
2230 [label="int i = lengthA; 787471"];
2231 [label="int j = lengthB; 787472"];
2232 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 787473"];
2233 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 787474"];
2234 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 787475"];
2235 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 787476"];
2236 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 787477"];
2237 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 787478"];
2238 [label="param GetEdits(this) 787479"];
2239 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 787480"];
2240 [label="param CalculateDiff(this) 787481"];
2241 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 787482"];
2242 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 787483"];
2243 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 787484"];
2244 [label="actualText.Free(); 787485"];
2245 [label="expectedText.Free(); 787486"];
2246 [label="return assertText.ToString(); 787487"];
2247 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 787488"];
2248 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 787489"];
2249 [label="diagnostics.Verify(expected); 787490"];
2250 [label="VerifyAssemblyIds(c, diagnostics); 787491"];
2251 [label="VerifyAssemblyIds(c, diagnostics); 787492"];
2252 [label="VerifyAssemblyIds(c, diagnostics) 787493"];
2253 [label="param VerifyAssemblyIds(TCompilation c) 787494"];
2254 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 787495"];
2255 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 787496"];
2256 [label="VerifyAssemblyIds(c, diagnostics); 787497"];
2257 [label="return c; 787498"];
2258 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('\\'abc.X\\'')); 787499"];
2259 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('\\'abc.X\\'')); 787500"];
2260 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('\\'abc.X\\'')); 787501"];
2261 [label="CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('\\'abc.X\\'')) 787502"];
2262 [label="param operator(string source) 787503"];
2263 [label="source 787504"];
2264 [label="new CSharpTestSource(source) 787505"];
2265 [label="param CSharpTestSource(object value) 787506"];
2266 [label="param CSharpTestSource(this) 787507"];
2267 [label="Value 787508"];
2268 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('\\'abc.X\\'')); 787509"];
2269 [label="param CreateCompilation(CSharpTestSource source) 787510"];
2270 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 787511"];
2271 [label="param CreateCompilation(CSharpCompilationOptions options = null) 787512"];
2272 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 787513"];
2273 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 787514"];
2274 [label="param CreateCompilation(string assemblyName = '') 787515"];
2275 [label="param CreateCompilation(string sourceFileName = '') 787516"];
2276 [label="param CreateCompilation(bool skipUsesIsNullable = false) 787517"];
2277 [label="source 787518"];
2278 [label="targetFramework 787519"];
2279 [label="references 787520"];
2280 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 787521"];
2281 [label="param GetReferences(TargetFramework tf) 787522"];
2282 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 787523"];
2283 [label="var references = GetReferences(tf); 787524"];
2284 [label="GetReferences(tf) 787525"];
2285 [label="param GetReferences(TargetFramework targetFramework) 787526"];
2286 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 787527"];
2287 [label="StandardReferences 787528"];
2288 [label="RuntimeUtilities.IsCoreClrRuntime 787529"];
2289 [label="Mscorlib46ExtendedReferences 787530"];
2290 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 787531"];
2291 [label="TestBase.ValueTupleRef 787532"];
2292 [label="TestReferences.NetFx.ValueTuple.tuplelib 787533"];
2293 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 787534"];
2294 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 787535"];
2295 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 787536"];
2296 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 787537"];
2297 [label="parseOptions 787538"];
2298 [label="assemblyName 787539"];
2299 [label="sourceFileName 787540"];
2300 [label="skipUsesIsNullable 787541"];
2301 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 787542"];
2302 [label="param CreateEmptyCompilation(CSharpTestSource source) 787543"];
2303 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 787544"];
2304 [label="param CreateEmptyCompilation(string assemblyName = '') 787545"];
2305 [label="param CreateEmptyCompilation(string sourceFileName = '') 787546"];
2306 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 787547"];
2307 [label="source 787548"];
2308 [label="parseOptions 787549"];
2309 [label="assemblyName 787550"];
2310 [label="sourceFileName 787551"];
2311 [label="skipUsesIsNullable 787552"];
2312 [label="null 787553"];
2313 [label="experimentalFeature: null 787554"];
2314 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 787555"];
2315 [label="param CreateCompilationCore(CSharpTestSource source) 787556"];
2316 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 787557"];
2317 [label="param CreateCompilationCore(string assemblyName) 787558"];
2318 [label="param CreateCompilationCore(string sourceFileName) 787559"];
2319 [label="param CreateCompilationCore(bool skipUsesIsNullable) 787560"];
2320 [label="param CreateCompilationCore(MessageID? experimentalFeature) 787561"];
2321 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 787562"];
2322 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 787563"];
2323 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 787564"];
2324 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 787565"];
2325 [label="param GetSyntaxTrees(string sourceFileName = '') 787566"];
2326 [label="param GetSyntaxTrees(this) 787567"];
2327 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 787568"];
2328 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 787569"];
2329 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 787570"];
2330 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 787571"];
2331 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 787572"];
2332 [label="param Parse(string text) 787573"];
2333 [label="param Parse(string filename = '') 787574"];
2334 [label="param Parse(CSharpParseOptions options = null) 787575"];
2335 [label="param Parse(Encoding encoding = null) 787576"];
2336 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 787577"];
2337 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 787578"];
2338 [label="options = TestOptions.Regular; 787579"];
2339 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 787580"];
2340 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 787581"];
2341 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 787582"];
2342 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 787583"];
2343 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 787584"];
2344 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 787585"];
2345 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 787586"];
2346 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 787587"];
2347 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 787588"];
2348 [label="var stream = new MemoryStream(); 787589"];
2349 [label="var root = tree.GetRoot(); 787590"];
2350 [label="var root = tree.GetRoot(); 787591"];
2351 [label="root.SerializeTo(stream); 787592"];
2352 [label="root.SerializeTo(stream); 787593"];
2353 [label="root.SerializeTo(stream); 787594"];
2354 [label="stream.Position = 0; 787595"];
2355 [label="stream.Position 787596"];
2356 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 787597"];
2357 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 787598"];
2358 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 787599"];
2359 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 787600"];
2360 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 787601"];
2361 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 787602"];
2362 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 787603"];
2363 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 787604"];
2364 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 787605"];
2365 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 787606"];
2366 [label="param ValidateIOperations(Func<Compilation> createCompilation) 787607"];
2367 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 787608"];
2368 [label="return; 787609"];
2369 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 787610"];
2370 [label="var compilation = createCompilationLambda(); 787611"];
2371 [label="return Guid.NewGuid().ToString('D'); 787612"];
2372 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 787613"];
2373 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 787614"];
2374 [label="param Create(CSharpCompilation? previousSubmission) 787615"];
2375 [label="param Create(Type? returnType) 787616"];
2376 [label="param Create(Type? hostObjectType) 787617"];
2377 [label="param Create(bool isSubmission) 787618"];
2378 [label="RoslynDebug.Assert(options != null); 787619"];
2379 [label="RoslynDebug.Assert(options != null); 787620"];
2380 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 787621"];
2381 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 787622"];
2382 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 787623"];
2383 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 787624"];
2384 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 787625"];
2385 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 787626"];
2386 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 787627"];
2387 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 787628"];
2388 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 787629"];
2389 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 787630"];
2390 [label="param SyntaxAndDeclarationManager(bool isSubmission) 787631"];
2391 [label="param SyntaxAndDeclarationManager(State state) 787632"];
2392 [label="param SyntaxAndDeclarationManager(this) 787633"];
2393 [label="externalSyntaxTrees 787634"];
2394 [label="messageProvider 787635"];
2395 [label="isSubmission 787636"];
2396 [label="param SyntaxAndDeclarationManager(this) 787637"];
2397 [label="_lazyState 787638"];
2398 [label="_lazyState 787639"];
2399 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 787640"];
2400 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 787641"];
2401 [label="param CSharpCompilation(Type? submissionReturnType) 787642"];
2402 [label="param CSharpCompilation(Type? hostObjectType) 787643"];
2403 [label="param CSharpCompilation(bool isSubmission) 787644"];
2404 [label="param CSharpCompilation(ReferenceManager? referenceManager) 787645"];
2405 [label="param CSharpCompilation(bool reuseReferenceManager) 787646"];
2406 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 787647"];
2407 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 787648"];
2408 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 787649"];
2409 [label="param CSharpCompilation(this) 787650"];
2410 [label="previousSubmission 787651"];
2411 [label="submissionReturnType 787652"];
2412 [label="hostObjectType 787653"];
2413 [label="isSubmission 787654"];
2414 [label="referenceManager 787655"];
2415 [label="reuseReferenceManager 787656"];
2416 [label="syntaxAndDeclarations 787657"];
2417 [label="semanticModelProvider 787658"];
2418 [label="eventQueue 787659"];
2419 [label="param CSharpCompilation(this) 787660"];
2420 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 787661"];
2421 [label="param CSharpCompilation(Type? submissionReturnType) 787662"];
2422 [label="param CSharpCompilation(Type? hostObjectType) 787663"];
2423 [label="param CSharpCompilation(bool isSubmission) 787664"];
2424 [label="param CSharpCompilation(ReferenceManager? referenceManager) 787665"];
2425 [label="param CSharpCompilation(bool reuseReferenceManager) 787666"];
2426 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 787667"];
2427 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 787668"];
2428 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 787669"];
2429 [label="param CSharpCompilation(this) 787670"];
2430 [label="isSubmission 787671"];
2431 [label="semanticModelProvider 787672"];
2432 [label="eventQueue 787673"];
2433 [label="param CSharpCompilation(this) 787674"];
2434 [label="_options 787675"];
2435 [label="_globalImports 787676"];
2436 [label="_previousSubmissionImports 787677"];
2437 [label="_globalNamespaceAlias 787678"];
2438 [label="_scriptClass 787679"];
2439 [label="_lazyHostObjectTypeSymbol 787680"];
2440 [label="_lazyImportInfos 787681"];
2441 [label="_conversions 787682"];
2442 [label="_anonymousTypeManager 787683"];
2443 [label="_lazyGlobalNamespace 787684"];
2444 [label="builtInOperators 787685"];
2445 [label="_lazyAssemblySymbol 787686"];
2446 [label="_referenceManager 787687"];
2447 [label="_syntaxAndDeclarations 787688"];
2448 [label="_lazyEntryPoint 787689"];
2449 [label="_lazyEmitNullablePublicOnly 787690"];
2450 [label="_lazyCompilationUnitCompletedTrees 787691"];
2451 [label="NullableAnalysisData 787692"];
2452 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 787693"];
2453 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 787694"];
2454 [label="_externAliasTargets 787695"];
2455 [label="_moduleInitializerMethods 787696"];
2456 [label="_binderFactories 787697"];
2457 [label="_ignoreAccessibilityBinderFactories 787698"];
2458 [label="_lazyDeclarationDiagnostics 787699"];
2459 [label="_declarationDiagnosticsFrozen 787700"];
2460 [label="new DiagnosticBag() 787701"];
2461 [label="_additionalCodegenWarnings = new DiagnosticBag() 787702"];
2462 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 787703"];
2463 [label="this.builtInOperators = new BuiltInOperators(this); 787704"];
2464 [label="this.builtInOperators = new BuiltInOperators(this); 787705"];
2465 [label="new BuiltInOperators(this) 787706"];
2466 [label="param BuiltInOperators(CSharpCompilation compilation) 787707"];
2467 [label="param BuiltInOperators(this) 787708"];
2468 [label="_compilation 787709"];
2469 [label="_builtInUnaryOperators 787710"];
2470 [label="_builtInOperators 787711"];
2471 [label="_compilation 787712"];
2472 [label="this.builtInOperators 787713"];
2473 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 787714"];
2474 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 787715"];
2475 [label="LanguageVersion? result = null; 787716"];
2476 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 787717"];
2477 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 787718"];
2478 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 787719"];
2479 [label="this.LanguageVersion 787720"];
2480 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 787721"];
2481 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787722"];
2482 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787723"];
2483 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787724"];
2484 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787725"];
2485 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787726"];
2486 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787727"];
2487 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 787728"];
2488 [label="this.Options 787729"];
2489 [label="get\n            {\n                return _options;\n            } 787730"];
2490 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 787731"];
2491 [label="_syntaxAndDeclarations 787732"];
2492 [label="Debug.Assert(_lazyAssemblySymbol is null); 787733"];
2493 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 787734"];
2494 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 787735"];
2495 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 787736"];
2496 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 787737"];
2497 [label="int i = 0; 787738"];
2498 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 787739"];
2499 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 787740"];
2500 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 787741"];
2501 [label="i++; 787742"];
2502 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 787743"];
2503 [label="var scriptClassName = this.ScriptClassName; 787744"];
2504 [label="var resolver = this.Resolver; 787745"];
2505 [label="var messageProvider = this.MessageProvider; 787746"];
2506 [label="var isSubmission = this.IsSubmission; 787747"];
2507 [label="this.PreviousSubmission 787748"];
2508 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 787749"];
2509 [label="param CSharpCompilation(Type? submissionReturnType) 787750"];
2510 [label="param CSharpCompilation(Type? hostObjectType) 787751"];
2511 [label="previousSubmission 787752"];
2512 [label="submissionReturnType 787753"];
2513 [label="hostObjectType 787754"];
2514 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 787755"];
2515 [label="param CSharpCompilation(Type? submissionReturnType) 787756"];
2516 [label="param CSharpCompilation(Type? hostObjectType) 787757"];
2517 [label="_compilation 787758"];
2518 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 787759"];
2519 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787760"];
2520 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787761"];
2521 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787762"];
2522 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787763"];
2523 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787764"];
2524 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 787765"];
2525 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 787766"];
2526 [label="Debug.Assert(_lazyAssemblySymbol is null); 787767"];
2527 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 787768"];
2528 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 787769"];
2529 [label="IsNullableEnabled(compilation) 787770"];
2530 [label="compilation.SyntaxTrees 787771"];
2531 [label="_syntaxAndDeclarations.GetLazyState() 787772"];
2532 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 787773"];
2533 [label="param CreateState(SourceReferenceResolver resolver) 787774"];
2534 [label="param CreateState(CommonMessageProvider messageProvider) 787775"];
2535 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 787776"];
2536 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 787777"];
2537 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 787778"];
2538 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 787779"];
2539 [label="var sourceCodeKind = tree.Options.Kind; 787780"];
2540 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 787781"];
2541 [label="OrdinalMap 787782"];
2542 [label="LoadDirectiveMap 787783"];
2543 [label="LoadedSyntaxTreeMap 787784"];
2544 [label="RootNamespaces 787785"];
2545 [label="DeclarationTable 787786"];
2546 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 787787"];
2547 [label="var options = (CSharpParseOptions)trees[0].Options; 787788"];
2548 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 787789"];
2549 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 787790"];
2550 [label="compilation.VerifyDiagnostics(// error CS1555: Could not find ''abc.X'' specified for Main method\n                                          Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'abc.X\\'')); 787791"];
2551 [label="compilation.VerifyDiagnostics(// error CS1555: Could not find ''abc.X'' specified for Main method\n                                          Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'abc.X\\'')); 787792"];
2552 [label="compilation.VerifyDiagnostics(// error CS1555: Could not find ''abc.X'' specified for Main method\n                                          Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'abc.X\\'')); 787793"];
2553 [label="Diagnostic(ErrorCode.ERR_MainClassNotFound) 787794"];
2554 [label="param Diagnostic(object code) 787795"];
2555 [label="param Diagnostic(string squiggledText = null) 787796"];
2556 [label="param Diagnostic(object[] arguments = null) 787797"];
2557 [label="param Diagnostic(LinePosition? startLocation = null) 787798"];
2558 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 787799"];
2559 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 787800"];
2560 [label="param Diagnostic(bool isSuppressed = false) 787801"];
2561 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 787802"];
2562 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 787803"];
2563 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 787804"];
2564 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 787805"];
2565 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 787806"];
2566 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 787807"];
2567 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 787808"];
2568 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 787809"];
2569 [label="param Diagnostic(object code) 787810"];
2570 [label="param Diagnostic(string squiggledText = null) 787811"];
2571 [label="param Diagnostic(object[] arguments = null) 787812"];
2572 [label="param Diagnostic(LinePosition? startLocation = null) 787813"];
2573 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 787814"];
2574 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 787815"];
2575 [label="param Diagnostic(bool isSuppressed = false) 787816"];
2576 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 787817"];
2577 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 787818"];
2578 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 787819"];
2579 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 787820"];
2580 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 787821"];
2581 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 787822"];
2582 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 787823"];
2583 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 787824"];
2584 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 787825"];
2585 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 787826"];
2586 [label="param DiagnosticDescription(object code) 787827"];
2587 [label="param DiagnosticDescription(bool isWarningAsError) 787828"];
2588 [label="param DiagnosticDescription(string squiggledText) 787829"];
2589 [label="param DiagnosticDescription(object[] arguments) 787830"];
2590 [label="param DiagnosticDescription(LinePosition? startLocation) 787831"];
2591 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 787832"];
2592 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 787833"];
2593 [label="param DiagnosticDescription(Type errorCodeType = null) 787834"];
2594 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 787835"];
2595 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 787836"];
2596 [label="param DiagnosticDescription(bool isSuppressed = false) 787837"];
2597 [label="param DiagnosticDescription(this) 787838"];
2598 [label="_code 787839"];
2599 [label="_isWarningAsError 787840"];
2600 [label="_isSuppressed 787841"];
2601 [label="_squiggledText 787842"];
2602 [label="_arguments 787843"];
2603 [label="_startPosition 787844"];
2604 [label="_argumentOrderDoesNotMatter 787845"];
2605 [label="_errorCodeType 787846"];
2606 [label="_ignoreArgumentsWhenComparing 787847"];
2607 [label="_defaultSeverityOpt 787848"];
2608 [label="_effectiveSeverityOpt 787849"];
2609 [label="_syntaxPredicate 787850"];
2610 [label="_showPredicate 787851"];
2611 [label="_location 787852"];
2612 [label="_argumentsAsStrings 787853"];
2613 [label="_code 787854"];
2614 [label="_isWarningAsError 787855"];
2615 [label="_squiggledText 787856"];
2616 [label="_arguments 787857"];
2617 [label="_startPosition 787858"];
2618 [label="_syntaxPredicate 787859"];
2619 [label="_argumentOrderDoesNotMatter 787860"];
2620 [label="_errorCodeType = errorCodeType ?? code.GetType(); 787861"];
2621 [label="_errorCodeType 787862"];
2622 [label="_defaultSeverityOpt 787863"];
2623 [label="_effectiveSeverityOpt 787864"];
2624 [label="_isSuppressed 787865"];
2625 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 787866"];
2626 [label="compilation.VerifyDiagnostics(// error CS1555: Could not find ''abc.X'' specified for Main method\n                                          Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'abc.X\\'')); 787867"];
2627 [label="Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'abc.X\\'') 787868"];
2628 [label="Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'abc.X\\'') 787869"];
2629 [label="param WithArguments(params object[] arguments) 787870"];
2630 [label="param WithArguments(this) 787871"];
2631 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 787872"];
2632 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 787873"];
2633 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 787874"];
2634 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 787875"];
2635 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 787876"];
2636 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 787877"];
2637 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 787878"];
2638 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 787879"];
2639 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 787880"];
2640 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 787881"];
2641 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 787882"];
2642 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 787883"];
2643 [label="param DiagnosticDescription(object code) 787884"];
2644 [label="param DiagnosticDescription(bool isWarningAsError) 787885"];
2645 [label="param DiagnosticDescription(string squiggledText) 787886"];
2646 [label="param DiagnosticDescription(object[] arguments) 787887"];
2647 [label="param DiagnosticDescription(LinePosition? startLocation) 787888"];
2648 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 787889"];
2649 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 787890"];
2650 [label="param DiagnosticDescription(Type errorCodeType = null) 787891"];
2651 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 787892"];
2652 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 787893"];
2653 [label="param DiagnosticDescription(bool isSuppressed = false) 787894"];
2654 [label="param DiagnosticDescription(this) 787895"];
2655 [label="_code 787896"];
2656 [label="_isWarningAsError 787897"];
2657 [label="_isSuppressed 787898"];
2658 [label="_squiggledText 787899"];
2659 [label="_arguments 787900"];
2660 [label="_startPosition 787901"];
2661 [label="_argumentOrderDoesNotMatter 787902"];
2662 [label="_errorCodeType 787903"];
2663 [label="_ignoreArgumentsWhenComparing 787904"];
2664 [label="_defaultSeverityOpt 787905"];
2665 [label="_effectiveSeverityOpt 787906"];
2666 [label="_syntaxPredicate 787907"];
2667 [label="_showPredicate 787908"];
2668 [label="_location 787909"];
2669 [label="_argumentsAsStrings 787910"];
2670 [label="_arguments 787911"];
2671 [label="_argumentOrderDoesNotMatter 787912"];
2672 [label="compilation.VerifyDiagnostics(// error CS1555: Could not find ''abc.X'' specified for Main method\n                                          Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'abc.X\\'')); 787913"];
2673 [label="compilation.VerifyDiagnostics(// error CS1555: Could not find ''abc.X'' specified for Main method\n                                          Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'abc.X\\'')) 787914"];
2674 [label="compilation.VerifyDiagnostics(// error CS1555: Could not find ''abc.X'' specified for Main method\n                                          Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'abc.X\\'')) 787915"];
2675 [label="param VerifyDiagnostics(this TCompilation c) 787916"];
2676 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 787917"];
2677 [label="var diagnostics = c.GetDiagnostics(); 787918"];
2678 [label="c.GetDiagnostics() 787919"];
2679 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 787920"];
2680 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 787921"];
2681 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 787922"];
2682 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 787923"];
2683 [label="GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken) 787924"];
2684 [label="param GetDiagnostics(CompilationStage stage) 787925"];
2685 [label="param GetDiagnostics(bool includeEarlierStages) 787926"];
2686 [label="param GetDiagnostics(CancellationToken cancellationToken) 787927"];
2687 [label="var diagnostics = DiagnosticBag.GetInstance(); 787928"];
2688 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 787929"];
2689 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 787930"];
2690 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 787931"];
2691 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 787932"];
2692 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 787933"];
2693 [label="param GetDiagnostics(CompilationStage stage) 787934"];
2694 [label="param GetDiagnostics(bool includeEarlierStages) 787935"];
2695 [label="param GetDiagnostics(DiagnosticBag diagnostics) 787936"];
2696 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 787937"];
2697 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 787938"];
2698 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 787939"];
2699 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 787940"];
2700 [label="this.SyntaxTrees 787941"];
2701 [label="_syntaxAndDeclarations.GetLazyState() 787942"];
2702 [label="param GetLazyState(this) 787943"];
2703 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 787944"];
2704 [label="this.Options 787945"];
2705 [label="return _options; 787946"];
2706 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 787947"];
2707 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 787948"];
2708 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 787949"];
2709 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 787950"];
2710 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 787951"];
2711 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 787952"];
2712 [label="CheckAssemblyName(builder); 787953"];
2713 [label="CheckAssemblyName(builder); 787954"];
2714 [label="CheckAssemblyName(builder); 787955"];
2715 [label="Options 787956"];
2716 [label="Options 787957"];
2717 [label="get\n            {\n                return _options;\n            } 787958"];
2718 [label="return _options; 787959"];
2719 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 787960"];
2720 [label="GetBoundReferenceManager() 787961"];
2721 [label="Debug.Assert(_lazyAssemblySymbol is object); 787962"];
2722 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 787963"];
2723 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 787964"];
2724 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 787965"];
2725 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 787966"];
2726 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 787967"];
2727 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 787968"];
2728 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 787969"];
2729 [label="GlobalImports 787970"];
2730 [label="_globalImports.Value 787971"];
2731 [label="Imports.FromGlobalUsings(this) 787972"];
2732 [label="GlobalImports.Complete(cancellationToken); 787973"];
2733 [label="SourceLocation? location = null; 787974"];
2734 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 787975"];
2735 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 787976"];
2736 [label="Assembly 787977"];
2737 [label="SourceAssembly 787978"];
2738 [label="GetBoundReferenceManager() 787979"];
2739 [label="param GetBoundReferenceManager(this) 787980"];
2740 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 787981"];
2741 [label="return _referenceManager; 787982"];
2742 [label="GetBoundReferenceManager(); 787983"];
2743 [label="Assembly.ForceComplete(location, cancellationToken); 787984"];
2744 [label="Assembly.ForceComplete(location, cancellationToken); 787985"];
2745 [label="Assembly.ForceComplete(location, cancellationToken); 787986"];
2746 [label="Declarations 787987"];
2747 [label="_syntaxAndDeclarations.GetLazyState() 787988"];
2748 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 787989"];
2749 [label="return Declarations.GetMergedRoot(this); 787990"];
2750 [label="_syntaxAndDeclarations.GetLazyState() 787991"];
2751 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 787992"];
2752 [label="SourceAssembly 787993"];
2753 [label="GetBoundReferenceManager() 787994"];
2754 [label="param GetBoundReferenceManager(this) 787995"];
2755 [label="GetBoundReferenceManager(); 787996"];
2756 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 787997"];
2757 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 787998"];
2758 [label="param SymbolDeclaredEvent(Symbol symbol) 787999"];
2759 [label="param SymbolDeclaredEvent(this) 788000"];
2760 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 788001"];
2761 [label="GetBoundReferenceManager() 788002"];
2762 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 788003"];
2763 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 788004"];
2764 [label="NamedTypeSymbol result; 788005"];
2765 [label="GetBoundReferenceManager() 788006"];
2766 [label="GetBoundReferenceManager(); 788007"];
2767 [label="Debug.Assert(result.SpecialType == specialType); 788008"];
2768 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 788009"];
2769 [label="GetBinderFactory(syntax.SyntaxTree) 788010"];
2770 [label="param GetBinderFactory(bool ignoreAccessibility = false) 788011"];
2771 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 788012"];
2772 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 788013"];
2773 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 788014"];
2774 [label="param GetBinderFactory(bool ignoreAccessibility) 788015"];
2775 [label="ignoreAccessibility 788016"];
2776 [label="GetSyntaxTreeOrdinal(syntaxTree) 788017"];
2777 [label="this.ContainsSyntaxTree(tree) 788018"];
2778 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 788019"];
2779 [label="_syntaxAndDeclarations.GetLazyState() 788020"];
2780 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 788021"];
2781 [label="_syntaxAndDeclarations.GetLazyState() 788022"];
2782 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 788023"];
2783 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 788024"];
2784 [label="BinderFactory? previousFactory; 788025"];
2785 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 788026"];
2786 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 788027"];
2787 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 788028"];
2788 [label="param AddNewFactory(bool ignoreAccessibility) 788029"];
2789 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 788030"];
2790 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 788031"];
2791 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 788032"];
2792 [label="BinderFactory? previousFactory; 788033"];
2793 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 788034"];
2794 [label="Assembly 788035"];
2795 [label="SourceAssembly 788036"];
2796 [label="GetBoundReferenceManager() 788037"];
2797 [label="param GetBoundReferenceManager(this) 788038"];
2798 [label="GetBoundReferenceManager(); 788039"];
2799 [label="return Assembly.Modules[0]; 788040"];
2800 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 788041"];
2801 [label="GetNullableAnalysisValue() 788042"];
2802 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 788043"];
2803 [label="Options 788044"];
2804 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 788045"];
2805 [label="param GetBinderFactory(bool ignoreAccessibility = false) 788046"];
2806 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 788047"];
2807 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 788048"];
2808 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 788049"];
2809 [label="param GetBinderFactory(bool ignoreAccessibility) 788050"];
2810 [label="ignoreAccessibility 788051"];
2811 [label="GetSyntaxTreeOrdinal(syntaxTree) 788052"];
2812 [label="this.ContainsSyntaxTree(tree) 788053"];
2813 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 788054"];
2814 [label="_syntaxAndDeclarations.GetLazyState() 788055"];
2815 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 788056"];
2816 [label="_syntaxAndDeclarations.GetLazyState() 788057"];
2817 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 788058"];
2818 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 788059"];
2819 [label="BinderFactory? previousFactory; 788060"];
2820 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 788061"];
2821 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 788062"];
2822 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 788063"];
2823 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 788064"];
2824 [label="param AddNewFactory(bool ignoreAccessibility) 788065"];
2825 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 788066"];
2826 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 788067"];
2827 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 788068"];
2828 [label="BinderFactory? previousFactory; 788069"];
2829 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 788070"];
2830 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 788071"];
2831 [label="Assembly 788072"];
2832 [label="SourceAssembly 788073"];
2833 [label="GetBoundReferenceManager() 788074"];
2834 [label="param GetBoundReferenceManager(this) 788075"];
2835 [label="GetBoundReferenceManager(); 788076"];
2836 [label="return Assembly.Modules[0]; 788077"];
2837 [label="compilation.SyntaxTrees 788078"];
2838 [label="_syntaxAndDeclarations.GetLazyState() 788079"];
2839 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 788080"];
2840 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 788081"];
2841 [label="GetBoundReferenceManager(); 788082"];
2842 [label="Debug.Assert(result.SpecialType == specialType); 788083"];
2843 [label="Debug.Assert(symbol.IsDefinition); 788084"];
2844 [label="SourceModule 788085"];
2845 [label="Assembly 788086"];
2846 [label="SourceAssembly 788087"];
2847 [label="GetBoundReferenceManager() 788088"];
2848 [label="param GetBoundReferenceManager(this) 788089"];
2849 [label="GetBoundReferenceManager(); 788090"];
2850 [label="return Assembly.Modules[0]; 788091"];
2851 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 788092"];
2852 [label="EmitNullablePublicOnly 788093"];
2853 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 788094"];
2854 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 788095"];
2855 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 788096"];
2856 [label="_declarationDiagnosticsFrozen = true; 788097"];
2857 [label="_needsGeneratedAttributes_IsFrozen = true; 788098"];
2858 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 788099"];
2859 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 788100"];
2860 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 788101"];
2861 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 788102"];
2862 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 788103"];
2863 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 788104"];
2864 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 788105"];
2865 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 788106"];
2866 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 788107"];
2867 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 788108"];
2868 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 788109"];
2869 [label="param CheckCompliance(DiagnosticBag diagnostics) 788110"];
2870 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 788111"];
2871 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 788112"];
2872 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 788113"];
2873 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 788114"];
2874 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 788115"];
2875 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 788116"];
2876 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 788117"];
2877 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 788118"];
2878 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 788119"];
2879 [label="Location ignoredLocation; 788120"];
2880 [label="param GetDeclaredCompliance(out Location attributeLocation) 788121"];
2881 [label="param GetDeclaredCompliance(this) 788122"];
2882 [label="attributeLocation = null; 788123"];
2883 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 788124"];
2884 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 788125"];
2885 [label="IsTrue(assemblyCompliance) 788126"];
2886 [label="param IsTrue(Compliance compliance) 788127"];
2887 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 788128"];
2888 [label="return false; 788129"];
2889 [label="Location attributeLocation; 788130"];
2890 [label="param GetDeclaredCompliance(out Location attributeLocation) 788131"];
2891 [label="param GetDeclaredCompliance(this) 788132"];
2892 [label="attributeLocation = null; 788133"];
2893 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 788134"];
2894 [label="i == 0 788135"];
2895 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 788136"];
2896 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 788137"];
2897 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 788138"];
2898 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 788139"];
2899 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 788140"];
2900 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 788141"];
2901 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 788142"];
2902 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 788143"];
2903 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 788144"];
2904 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 788145"];
2905 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 788146"];
2906 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 788147"];
2907 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 788148"];
2908 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 788149"];
2909 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 788150"];
2910 [label="System.Diagnostics.Debug.Assert((object)containing != null); 788151"];
2911 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 788152"];
2912 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 788153"];
2913 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 788154"];
2914 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 788155"];
2915 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 788156"];
2916 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 788157"];
2917 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 788158"];
2918 [label="return compliance; 788159"];
2919 [label="IsTrue(GetInheritedCompliance(symbol)) 788160"];
2920 [label="param IsTrue(Compliance compliance) 788161"];
2921 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 788162"];
2922 [label="return false; 788163"];
2923 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 788164"];
2924 [label="param IsTrue(Compliance compliance) 788165"];
2925 [label="if (DoNotVisit(symbol)) return; 788166"];
2926 [label="DoNotVisit(symbol) 788167"];
2927 [label="param DoNotVisit(Symbol symbol) 788168"];
2928 [label="param DoNotVisit(this) 788169"];
2929 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 788170"];
2930 [label="return false; 788171"];
2931 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 788172"];
2932 [label="param IsTrue(Compliance compliance) 788173"];
2933 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 788174"];
2934 [label="return false; 788175"];
2935 [label="if (tasks == null)\n            {\n                return;\n            } 788176"];
2936 [label="if (tasks == null)\n            {\n                return;\n            } 788177"];
2937 [label="checker.WaitForWorkers(); 788178"];
2938 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 788179"];
2939 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 788180"];
2940 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 788181"];
2941 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 788182"];
2942 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 788183"];
2943 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 788184"];
2944 [label="var methodBodyDiagnostics = DiagnosticBag.GetInstance(); 788185"];
2945 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 788186"];
2946 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 788187"];
2947 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken) 788188"];
2948 [label="param GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics) 788189"];
2949 [label="param GetDiagnosticsForAllMethodBodies(CancellationToken cancellationToken) 788190"];
2950 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 788191"];
2951 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 788192"];
2952 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 788193"];
2953 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken) 788194"];
2954 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 788195"];
2955 [label="param CompileMethodBodies(bool emittingPdb) 788196"];
2956 [label="param CompileMethodBodies(bool emitTestCoverageData) 788197"];
2957 [label="param CompileMethodBodies(bool hasDeclarationErrors) 788198"];
2958 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 788199"];
2959 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 788200"];
2960 [label="param CompileMethodBodies(CancellationToken cancellationToken) 788201"];
2961 [label="Debug.Assert(compilation != null); 788202"];
2962 [label="Debug.Assert(compilation != null); 788203"];
2963 [label="Debug.Assert(diagnostics != null); 788204"];
2964 [label="Debug.Assert(diagnostics != null); 788205"];
2965 [label="compilation.PreviousSubmission 788206"];
2966 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 788207"];
2967 [label="ScriptCompilationInfo 788208"];
2968 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 788209"];
2969 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 788210"];
2970 [label="MethodSymbol entryPoint = null; 788211"];
2971 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 788212"];
2972 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 788213"];
2973 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 788214"];
2974 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 788215"];
2975 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 788216"];
2976 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 788217"];
2977 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 788218"];
2978 [label="param GetEntryPoint(bool hasDeclarationErrors) 788219"];
2979 [label="param GetEntryPoint(DiagnosticBag diagnostics) 788220"];
2980 [label="param GetEntryPoint(CancellationToken cancellationToken) 788221"];
2981 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 788222"];
2982 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 788223"];
2983 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 788224"];
2984 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 788225"];
2985 [label="EntryPoint? entryPoint; 788226"];
2986 [label="GetBoundReferenceManager(); 788227"];
2987 [label="this.Options 788228"];
2988 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 788229"];
2989 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 788230"];
2990 [label="this.Options 788231"];
2991 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 788232"];
2992 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 788233"];
2993 [label="ImmutableArray<Diagnostic> diagnostics; 788234"];
2994 [label="diagnostics 788235"];
2995 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 788236"];
2996 [label="param FindEntryPoint(MethodSymbol? simpleProgramEntryPointSymbol) 788237"];
2997 [label="param FindEntryPoint(CancellationToken cancellationToken) 788238"];
2998 [label="param FindEntryPoint(out ImmutableArray<Diagnostic> sealedDiagnostics) 788239"];
2999 [label="NamedTypeSymbol? mainType; 788240"];
3000 [label="var scriptClass = this.ScriptClass; 788241"];
3001 [label="if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    } 788242"];
3002 [label="if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    } 788243"];
3003 [label="diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName); 788244"];
3004 [label="diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName); 788245"];
3005 [label="diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName); 788246"];
3006 [label="diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName) 788247"];
3007 [label="return null; 788248"];
3008 [label="MethodSymbol 788249"];
3009 [label="this.Options 788250"];
3010 [label="return _options; 788251"];
3011 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 788252"];
3012 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 788253"];
3013 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 788254"];
3014 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 788255"];
3015 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 788256"];
3016 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 788257"];
3017 [label="return null; 788258"];
3018 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 788259"];
3019 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 788260"];
3020 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 788261"];
3021 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 788262"];
3022 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 788263"];
3023 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 788264"];
3024 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 788265"];
3025 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 788266"];
3026 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 788267"];
3027 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 788268"];
3028 [label="param MethodCompiler(bool emittingPdb) 788269"];
3029 [label="param MethodCompiler(bool emitTestCoverageData) 788270"];
3030 [label="param MethodCompiler(bool hasDeclarationErrors) 788271"];
3031 [label="param MethodCompiler(DiagnosticBag diagnostics) 788272"];
3032 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 788273"];
3033 [label="param MethodCompiler(CancellationToken cancellationToken) 788274"];
3034 [label="param MethodCompiler(this) 788275"];
3035 [label="param MethodCompiler(this) 788276"];
3036 [label="_compilation 788277"];
3037 [label="_emittingPdb 788278"];
3038 [label="_emitTestCoverageData 788279"];
3039 [label="_diagnostics 788280"];
3040 [label="_hasDeclarationErrors 788281"];
3041 [label="_moduleBeingBuiltOpt 788282"];
3042 [label="_filterOpt 788283"];
3043 [label="_debugDocumentProvider 788284"];
3044 [label="_entryPointOpt 788285"];
3045 [label="_compilerTasks 788286"];
3046 [label="_globalHasErrors 788287"];
3047 [label="Debug.Assert(compilation != null); 788288"];
3048 [label="Debug.Assert(compilation != null); 788289"];
3049 [label="Debug.Assert(diagnostics != null); 788290"];
3050 [label="Debug.Assert(diagnostics != null); 788291"];
3051 [label="_moduleBeingBuiltOpt 788292"];
3052 [label="_emittingPdb 788293"];
3053 [label="_cancellationToken 788294"];
3054 [label="_diagnostics 788295"];
3055 [label="_filterOpt 788296"];
3056 [label="_hasDeclarationErrors 788297"];
3057 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 788298"];
3058 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 788299"];
3059 [label="param SetGlobalErrorIfTrue(bool arg) 788300"];
3060 [label="param SetGlobalErrorIfTrue(this) 788301"];
3061 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 788302"];
3062 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 788303"];
3063 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 788304"];
3064 [label="_emitTestCoverageData 788305"];
3065 [label="compilation.Options 788306"];
3066 [label="compilation.SourceModule 788307"];
3067 [label="Assembly 788308"];
3068 [label="SourceAssembly 788309"];
3069 [label="GetBoundReferenceManager() 788310"];
3070 [label="param GetBoundReferenceManager(this) 788311"];
3071 [label="GetBoundReferenceManager(); 788312"];
3072 [label="return Assembly.Modules[0]; 788313"];
3073 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 788314"];
3074 [label="param CompileNamespace(this) 788315"];
3075 [label="param VisitNamespace(NamespaceSymbol symbol) 788316"];
3076 [label="param VisitNamespace(TypeCompilationState arg) 788317"];
3077 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 788318"];
3078 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 788319"];
3079 [label="PassesFilter(_filterOpt, symbol) 788320"];
3080 [label="param PassesFilter(Predicate<Symbol> filterOpt) 788321"];
3081 [label="param PassesFilter(Symbol symbol) 788322"];
3082 [label="return (filterOpt == null) || filterOpt(symbol); 788323"];
3083 [label="return (filterOpt == null) || filterOpt(symbol); 788324"];
3084 [label="arg = null; 788325"];
3085 [label="param CompileNamespaceAsAsync(NamespaceSymbol symbol) 788326"];
3086 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 788327"];
3087 [label="methodCompiler.WaitForWorkers() 788328"];
3088 [label="param WaitForWorkers(this) 788329"];
3089 [label="if (tasks == null)\n            {\n                return;\n            } 788330"];
3090 [label="if (tasks == null)\n            {\n                return;\n            } 788331"];
3091 [label="Task curTask; 788332"];
3092 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 788333"];
3093 [label="methodCompiler.WaitForWorkers(); 788334"];
3094 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 788335"];
3095 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 788336"];
3096 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 788337"];
3097 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 788338"];
3098 [label="compilation.AdditionalCodegenWarnings 788339"];
3099 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 788340"];
3100 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 788341"];
3101 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 788342"];
3102 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 788343"];
3103 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 788344"];
3104 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 788345"];
3105 [label="param WarnUnusedFields(CancellationToken cancellationToken) 788346"];
3106 [label="compilation.Assembly 788347"];
3107 [label="SourceAssembly 788348"];
3108 [label="GetBoundReferenceManager() 788349"];
3109 [label="param GetBoundReferenceManager(this) 788350"];
3110 [label="GetBoundReferenceManager(); 788351"];
3111 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 788352"];
3112 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 788353"];
3113 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 788354"];
3114 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 788355"];
3115 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 788356"];
3116 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 788357"];
3117 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 788358"];
3118 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 788359"];
3119 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken) 788360"];
3120 [label="param WriteDocumentationCommentXml(string? assemblyName) 788361"];
3121 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 788362"];
3122 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 788363"];
3123 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 788364"];
3124 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 788365"];
3125 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 788366"];
3126 [label="StreamWriter writer = null; 788367"];
3127 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 788368"];
3128 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 788369"];
3129 [label="compilation.SourceAssembly 788370"];
3130 [label="GetBoundReferenceManager() 788371"];
3131 [label="param GetBoundReferenceManager(this) 788372"];
3132 [label="GetBoundReferenceManager(); 788373"];
3133 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 788374"];
3134 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 788375"];
3135 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 788376"];
3136 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 788377"];
3137 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 788378"];
3138 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 788379"];
3139 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 788380"];
3140 [label="param DocumentationCommentCompiler(TextWriter writer) 788381"];
3141 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 788382"];
3142 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 788383"];
3143 [label="param DocumentationCommentCompiler(bool processIncludes) 788384"];
3144 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 788385"];
3145 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 788386"];
3146 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 788387"];
3147 [label="param DocumentationCommentCompiler(this) 788388"];
3148 [label="param DocumentationCommentCompiler(this) 788389"];
3149 [label="_assemblyName 788390"];
3150 [label="_compilation 788391"];
3151 [label="_writer 788392"];
3152 [label="_filterTree 788393"];
3153 [label="_filterSpanWithinTree 788394"];
3154 [label="_processIncludes 788395"];
3155 [label="_isForSingleSymbol 788396"];
3156 [label="_diagnostics 788397"];
3157 [label="_lazyComparer 788398"];
3158 [label="_includedFileCache 788399"];
3159 [label="_indentDepth 788400"];
3160 [label="_temporaryStringBuilders 788401"];
3161 [label="_writer 788402"];
3162 [label="_filterTree 788403"];
3163 [label="_filterSpanWithinTree 788404"];
3164 [label="_processIncludes 788405"];
3165 [label="_isForSingleSymbol 788406"];
3166 [label="_diagnostics 788407"];
3167 [label="_cancellationToken 788408"];
3168 [label="compilation.SourceAssembly 788409"];
3169 [label="GetBoundReferenceManager() 788410"];
3170 [label="param GetBoundReferenceManager(this) 788411"];
3171 [label="GetBoundReferenceManager(); 788412"];
3172 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 788413"];
3173 [label="Debug.Assert(_assemblyName != null); 788414"];
3174 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 788415"];
3175 [label="WriteLine('<?xml version=\\'1.0\\'?>') 788416"];
3176 [label="param WriteLine(string message) 788417"];
3177 [label="param WriteLine(this) 788418"];
3178 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788419"];
3179 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788420"];
3180 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788421"];
3181 [label="WriteLine('<doc>'); 788422"];
3182 [label="WriteLine('<doc>') 788423"];
3183 [label="param WriteLine(string message) 788424"];
3184 [label="param WriteLine(this) 788425"];
3185 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788426"];
3186 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788427"];
3187 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788428"];
3188 [label="Indent(); 788429"];
3189 [label="WriteLine('<assembly>'); 788430"];
3190 [label="WriteLine('<assembly>') 788431"];
3191 [label="param WriteLine(string message) 788432"];
3192 [label="param WriteLine(this) 788433"];
3193 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788434"];
3194 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788435"];
3195 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788436"];
3196 [label="Indent(); 788437"];
3197 [label="WriteLine('<name>{0}</name>', _assemblyName); 788438"];
3198 [label="WriteLine('<name>{0}</name>', _assemblyName) 788439"];
3199 [label="WriteLine('<name>{0}</name>', _assemblyName) 788440"];
3200 [label="param WriteLine(string format) 788441"];
3201 [label="param WriteLine(params object[] args) 788442"];
3202 [label="param WriteLine(this) 788443"];
3203 [label="WriteLine(string.Format(format, args)); 788444"];
3204 [label="WriteLine(string.Format(format, args)); 788445"];
3205 [label="WriteLine(string.Format(format, args)); 788446"];
3206 [label="WriteLine(string.Format(format, args)) 788447"];
3207 [label="param WriteLine(string message) 788448"];
3208 [label="param WriteLine(this) 788449"];
3209 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788450"];
3210 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788451"];
3211 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788452"];
3212 [label="WriteLine(string.Format(format, args)); 788453"];
3213 [label="Debug.Assert(_indentDepth >= 0); 788454"];
3214 [label="Unindent(); 788455"];
3215 [label="WriteLine('</assembly>'); 788456"];
3216 [label="WriteLine('</assembly>') 788457"];
3217 [label="param WriteLine(string message) 788458"];
3218 [label="param WriteLine(this) 788459"];
3219 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788460"];
3220 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788461"];
3221 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788462"];
3222 [label="WriteLine('<members>'); 788463"];
3223 [label="WriteLine('<members>') 788464"];
3224 [label="param WriteLine(string message) 788465"];
3225 [label="param WriteLine(this) 788466"];
3226 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788467"];
3227 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788468"];
3228 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788469"];
3229 [label="Indent(); 788470"];
3230 [label="Debug.Assert(!_isForSingleSymbol); 788471"];
3231 [label="Debug.Assert(!_isForSingleSymbol); 788472"];
3232 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 788473"];
3233 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 788474"];
3234 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 788475"];
3235 [label="DocumentationMode maxDocumentationMode; 788476"];
3236 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 788477"];
3237 [label="docCommentNodes 788478"];
3238 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 788479"];
3239 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 788480"];
3240 [label="maxDocumentationMode = DocumentationMode.None; 788481"];
3241 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 788482"];
3242 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 788483"];
3243 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 788484"];
3244 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 788485"];
3245 [label="currDocumentationMode > maxDocumentationMode 788486"];
3246 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 788487"];
3247 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 788488"];
3248 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 788489"];
3249 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 788490"];
3250 [label="return true; 788491"];
3251 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 788492"];
3252 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 788493"];
3253 [label="return; 788494"];
3254 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 788495"];
3255 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 788496"];
3256 [label="currDocumentationMode > maxDocumentationMode 788497"];
3257 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 788498"];
3258 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 788499"];
3259 [label="return; 788500"];
3260 [label="Debug.Assert(_indentDepth >= 0); 788501"];
3261 [label="Unindent(); 788502"];
3262 [label="WriteLine('</members>'); 788503"];
3263 [label="WriteLine('</members>') 788504"];
3264 [label="param WriteLine(string message) 788505"];
3265 [label="param WriteLine(this) 788506"];
3266 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788507"];
3267 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788508"];
3268 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788509"];
3269 [label="Unindent(); 788510"];
3270 [label="WriteLine('</doc>'); 788511"];
3271 [label="WriteLine('</doc>') 788512"];
3272 [label="param WriteLine(string message) 788513"];
3273 [label="param WriteLine(this) 788514"];
3274 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788515"];
3275 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788516"];
3276 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 788517"];
3277 [label="Debug.Assert(compiler._indentDepth == 0); 788518"];
3278 [label="Debug.Assert(compiler._indentDepth == 0); 788519"];
3279 [label="writer?.Flush(); 788520"];
3280 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 788521"];
3281 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 788522"];
3282 [label="compilation.SyntaxTrees 788523"];
3283 [label="_syntaxAndDeclarations.GetLazyState() 788524"];
3284 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 788525"];
3285 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 788526"];
3286 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 788527"];
3287 [label="param ReportUnprocessed(CancellationToken cancellationToken) 788528"];
3288 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 788529"];
3289 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 788530"];
3290 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 788531"];
3291 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken) 788532"];
3292 [label="param ReportUnusedImports(SyntaxTree? filterTree) 788533"];
3293 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 788534"];
3294 [label="param ReportUnusedImports(CancellationToken cancellationToken) 788535"];
3295 [label="param ReportUnusedImports(this) 788536"];
3296 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 788537"];
3297 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 788538"];
3298 [label="CompleteTrees(filterTree); 788539"];
3299 [label="CompleteTrees(filterTree) 788540"];
3300 [label="param CompleteTrees(SyntaxTree? filterTree) 788541"];
3301 [label="param CompleteTrees(this) 788542"];
3302 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 788543"];
3303 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 788544"];
3304 [label="CompleteTrees(filterTree); 788545"];
3305 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 788546"];
3306 [label="builder.AddRangeAndFree(methodBodyDiagnostics); 788547"];
3307 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 788548"];
3308 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 788549"];
3309 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 788550"];
3310 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 788551"];
3311 [label="{ ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 788552"];
3312 [label="s_alinkWarnings = { ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 788553"];
3313 [label="param Filter(Diagnostic d) 788554"];
3314 [label="param Filter(int warningLevelOption) 788555"];
3315 [label="param Filter(NullableContextOptions nullableOption) 788556"];
3316 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 788557"];
3317 [label="param Filter(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 788558"];
3318 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 788559"];
3319 [label="param Filter(CancellationToken cancellationToken) 788560"];
3320 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 788561"];
3321 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 788562"];
3322 [label="if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 788563"];
3323 [label="if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                } 788564"];
3324 [label="return d; 788565"];
3325 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 788566"];
3326 [label="diagnostics.Verify(expected); 788567"];
3327 [label="diagnostics.Verify(expected) 788568"];
3328 [label="param Verify(params DiagnosticDescription[] expected) 788569"];
3329 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 788570"];
3330 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 788571"];
3331 [label="param Verify(params DiagnosticDescription[] expected) 788572"];
3332 [label="Verify(actual, expected, errorCodeOnly: false); 788573"];
3333 [label="Verify(actual, expected, errorCodeOnly: false); 788574"];
3334 [label="Verify(actual, expected, errorCodeOnly: false) 788575"];
3335 [label="param Verify(DiagnosticDescription[] expected) 788576"];
3336 [label="param Verify(bool errorCodeOnly) 788577"];
3337 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 788578"];
3338 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 788579"];
3339 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 788580"];
3340 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 788581"];
3341 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 788582"];
3342 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 788583"];
3343 [label="=> _defaultSeverityOpt 788584"];
3344 [label="_defaultSeverityOpt 788585"];
3345 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 788586"];
3346 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 788587"];
3347 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 788588"];
3348 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 788589"];
3349 [label="=> _effectiveSeverityOpt 788590"];
3350 [label="_effectiveSeverityOpt 788591"];
3351 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 788592"];
3352 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 788593"];
3353 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 788594"];
3354 [label="param DiagnosticDescription(Diagnostic d) 788595"];
3355 [label="param DiagnosticDescription(bool errorCodeOnly) 788596"];
3356 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 788597"];
3357 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 788598"];
3358 [label="param DiagnosticDescription(this) 788599"];
3359 [label="_code 788600"];
3360 [label="_isWarningAsError 788601"];
3361 [label="_isSuppressed 788602"];
3362 [label="_squiggledText 788603"];
3363 [label="_arguments 788604"];
3364 [label="_startPosition 788605"];
3365 [label="_argumentOrderDoesNotMatter 788606"];
3366 [label="_errorCodeType 788607"];
3367 [label="_defaultSeverityOpt 788608"];
3368 [label="_effectiveSeverityOpt 788609"];
3369 [label="_syntaxPredicate 788610"];
3370 [label="_code 788611"];
3371 [label="_isWarningAsError 788612"];
3372 [label="_isSuppressed 788613"];
3373 [label="_location 788614"];
3374 [label="includeDefaultSeverity 788615"];
3375 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 788616"];
3376 [label="_defaultSeverityOpt 788617"];
3377 [label="includeEffectiveSeverity 788618"];
3378 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 788619"];
3379 [label="_effectiveSeverityOpt 788620"];
3380 [label="DiagnosticWithInfo dinfo = null; 788621"];
3381 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 788622"];
3382 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 788623"];
3383 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 788624"];
3384 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 788625"];
3385 [label="dinfo = d as DiagnosticWithInfo; 788626"];
3386 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 788627"];
3387 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 788628"];
3388 [label="_errorCodeType 788629"];
3389 [label="_code 788630"];
3390 [label="_ignoreArgumentsWhenComparing 788631"];
3391 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 788632"];
3392 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 788633"];
3393 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 788634"];
3394 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 788635"];
3395 [label="_arguments 788636"];
3396 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 788637"];
3397 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 788638"];
3398 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 788639"];
3399 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 788640"];
3400 [label="_startPosition 788641"];
3401 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 788642"];
3402 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 788643"];
3403 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 788644"];
3404 [label="int index = unmatched.IndexOf(d); 788645"];
3405 [label="int index = unmatched.IndexOf(d); 788646"];
3406 [label="param Equals(object obj) 788647"];
3407 [label="param Equals(this) 788648"];
3408 [label="var d = obj as DiagnosticDescription; 788649"];
3409 [label="if (d == null)\n                return false; 788650"];
3410 [label="if (d == null)\n                return false; 788651"];
3411 [label="if (!_code.Equals(d._code))\n                return false; 788652"];
3412 [label="if (!_code.Equals(d._code))\n                return false; 788653"];
3413 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 788654"];
3414 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 788655"];
3415 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 788656"];
3416 [label="if (_squiggledText != d._squiggledText)\n                    return false; 788657"];
3417 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 788658"];
3418 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 788659"];
3419 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 788660"];
3420 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 788661"];
3421 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 788662"];
3422 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 788663"];
3423 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 788664"];
3424 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 788665"];
3425 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 788666"];
3426 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 788667"];
3427 [label="if (d._arguments == null)\n                    return false; 788668"];
3428 [label="GetArgumentsAsStrings() 788669"];
3429 [label="param GetArgumentsAsStrings(this) 788670"];
3430 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 788671"];
3431 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 788672"];
3432 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 788673"];
3433 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 788674"];
3434 [label="_argumentsAsStrings 788675"];
3435 [label="return _argumentsAsStrings; 788676"];
3436 [label="var args1 = GetArgumentsAsStrings(); 788677"];
3437 [label="d.GetArgumentsAsStrings() 788678"];
3438 [label="param GetArgumentsAsStrings(this) 788679"];
3439 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 788680"];
3440 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 788681"];
3441 [label="return _argumentsAsStrings; 788682"];
3442 [label="var args2 = d.GetArgumentsAsStrings(); 788683"];
3443 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 788684"];
3444 [label="if (!args1.SequenceEqual(args2))\n                        return false; 788685"];
3445 [label="if (!args1.SequenceEqual(args2))\n                        return false; 788686"];
3446 [label="if (!args1.SequenceEqual(args2))\n                        return false; 788687"];
3447 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 788688"];
3448 [label="return true; 788689"];
3449 [label="int index = unmatched.IndexOf(d); 788690"];
3450 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 788691"];
3451 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 788692"];
3452 [label="unmatched.RemoveAt(index); 788693"];
3453 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 788694"];
3454 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 788695"];
3455 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 788696"];
3456 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 788697"];
3457 [label="DiagnosticDescription.GetAssertText(expected, actual) 788698"];
3458 [label="param GetAssertText(DiagnosticDescription[] expected) 788699"];
3459 [label="const int CSharp = 1; 788700"];
3460 [label="const int VisualBasic = 2; 788701"];
3461 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 788702"];
3462 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 788703"];
3463 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 788704"];
3464 [label="actual.Any() && actual.First() is CSDiagnostic 788705"];
3465 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 788706"];
3466 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 788707"];
3467 [label="int indentDepth = (language == CSharp) ? 4 : 1; 788708"];
3468 [label="(language == CSharp) 788709"];
3469 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 788710"];
3470 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 788711"];
3471 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 788712"];
3472 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 788713"];
3473 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 788714"];
3474 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 788715"];
3475 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 788716"];
3476 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 788717"];
3477 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 788718"];
3478 [label="IsSortedOrEmpty(expected) 788719"];
3479 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 788720"];
3480 [label="var comparer = LinePositionComparer.Instance; 788721"];
3481 [label="DiagnosticDescription last = null; 788722"];
3482 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 788723"];
3483 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 788724"];
3484 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 788725"];
3485 [label="return false; 788726"];
3486 [label="var assertText = new StringBuilder(); 788727"];
3487 [label="assertText.AppendLine(); 788728"];
3488 [label="int i; 788729"];
3489 [label="assertText.AppendLine('Expected:'); 788730"];
3490 [label="assertText.AppendLine('Expected:'); 788731"];
3491 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 788732"];
3492 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 788733"];
3493 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 788734"];
3494 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 788735"];
3495 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 788736"];
3496 [label="GetDiagnosticDescription(d, indentDepth) 788737"];
3497 [label="param GetDiagnosticDescription(DiagnosticDescription d) 788738"];
3498 [label="param GetDiagnosticDescription(int indentDepth) 788739"];
3499 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788740"];
3500 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788741"];
3501 [label="d.ToString() 788742"];
3502 [label="param ToString(this) 788743"];
3503 [label="var sb = new StringBuilder(); 788744"];
3504 [label="sb.Append('Diagnostic('); 788745"];
3505 [label="sb.Append('Diagnostic('); 788746"];
3506 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 788747"];
3507 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 788748"];
3508 [label="sb.Append(_errorCodeType.Name); 788749"];
3509 [label="sb.Append(_errorCodeType.Name); 788750"];
3510 [label="sb.Append('.'); 788751"];
3511 [label="sb.Append('.'); 788752"];
3512 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 788753"];
3513 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 788754"];
3514 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 788755"];
3515 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 788756"];
3516 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 788757"];
3517 [label="sb.Append(')'); 788758"];
3518 [label="sb.Append(')'); 788759"];
3519 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 788760"];
3520 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 788761"];
3521 [label="sb.Append('.WithArguments('); 788762"];
3522 [label="sb.Append('.WithArguments('); 788763"];
3523 [label="GetArgumentsAsStrings() 788764"];
3524 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 788765"];
3525 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 788766"];
3526 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 788767"];
3527 [label="sb.Append('\\''); 788768"];
3528 [label="sb.Append('\\''); 788769"];
3529 [label="sb.Append(argumentStrings.Current); 788770"];
3530 [label="sb.Append(argumentStrings.Current); 788771"];
3531 [label="sb.Append('\\''); 788772"];
3532 [label="sb.Append('\\''); 788773"];
3533 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 788774"];
3534 [label="sb.Append(')'); 788775"];
3535 [label="sb.Append(')'); 788776"];
3536 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 788777"];
3537 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 788778"];
3538 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 788779"];
3539 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 788780"];
3540 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 788781"];
3541 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 788782"];
3542 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 788783"];
3543 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 788784"];
3544 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 788785"];
3545 [label="return sb.ToString(); 788786"];
3546 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788787"];
3547 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788788"];
3548 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 788789"];
3549 [label="GetCommaSeparatedLines(assertText, expectedText); 788790"];
3550 [label="GetCommaSeparatedLines(assertText, expectedText); 788791"];
3551 [label="GetCommaSeparatedLines(assertText, expectedText) 788792"];
3552 [label="param GetCommaSeparatedLines(StringBuilder sb) 788793"];
3553 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 788794"];
3554 [label="int n = lines.Count; 788795"];
3555 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 788796"];
3556 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 788797"];
3557 [label="sb.Append(lines[i]); 788798"];
3558 [label="sb.Append(lines[i]); 788799"];
3559 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 788800"];
3560 [label="sb.AppendLine(); 788801"];
3561 [label="GetCommaSeparatedLines(assertText, expectedText); 788802"];
3562 [label="assertText.AppendLine('Actual:'); 788803"];
3563 [label="assertText.AppendLine('Actual:'); 788804"];
3564 [label="var actualText = ArrayBuilder<string>.GetInstance(); 788805"];
3565 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 788806"];
3566 [label="Diagnostic d = e.Current; 788807"];
3567 [label="string message = d.ToString(); 788808"];
3568 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 788809"];
3569 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 788810"];
3570 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 788811"];
3571 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 788812"];
3572 [label="Indent(assertText, indentDepth); 788813"];
3573 [label="Indent(assertText, indentDepth); 788814"];
3574 [label="Indent(assertText, indentDepth) 788815"];
3575 [label="param Indent(StringBuilder sb) 788816"];
3576 [label="param Indent(int count) 788817"];
3577 [label="sb.Append(' ', 4 * count); 788818"];
3578 [label="sb.Append(' ', 4 * count); 788819"];
3579 [label="sb.Append(' ', 4 * count); 788820"];
3580 [label="Indent(assertText, indentDepth); 788821"];
3581 [label="assertText.Append('// '); 788822"];
3582 [label="assertText.Append('// '); 788823"];
3583 [label="assertText.AppendLine(d.ToString()); 788824"];
3584 [label="assertText.AppendLine(d.ToString()); 788825"];
3585 [label="var l = d.Location; 788826"];
3586 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 788827"];
3587 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 788828"];
3588 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 788829"];
3589 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 788830"];
3590 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 788831"];
3591 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 788832"];
3592 [label="param DiagnosticDescription(Diagnostic d) 788833"];
3593 [label="param DiagnosticDescription(bool errorCodeOnly) 788834"];
3594 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 788835"];
3595 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 788836"];
3596 [label="param DiagnosticDescription(this) 788837"];
3597 [label="_code 788838"];
3598 [label="_isWarningAsError 788839"];
3599 [label="_isSuppressed 788840"];
3600 [label="_arguments 788841"];
3601 [label="_startPosition 788842"];
3602 [label="_errorCodeType 788843"];
3603 [label="_defaultSeverityOpt 788844"];
3604 [label="_effectiveSeverityOpt 788845"];
3605 [label="_code 788846"];
3606 [label="_isWarningAsError 788847"];
3607 [label="_isSuppressed 788848"];
3608 [label="_location 788849"];
3609 [label="DiagnosticWithInfo dinfo = null; 788850"];
3610 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 788851"];
3611 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 788852"];
3612 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 788853"];
3613 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 788854"];
3614 [label="var diffDescription = description; 788855"];
3615 [label="var idx = Array.IndexOf(expected, description); 788856"];
3616 [label="var idx = Array.IndexOf(expected, description); 788857"];
3617 [label="var idx = Array.IndexOf(expected, description); 788858"];
3618 [label="var idx = Array.IndexOf(expected, description); 788859"];
3619 [label="if (d == null)\n                return false; 788860"];
3620 [label="if (d == null)\n                return false; 788861"];
3621 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 788862"];
3622 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 788863"];
3623 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 788864"];
3624 [label="if (_squiggledText != d._squiggledText)\n                    return false; 788865"];
3625 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 788866"];
3626 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 788867"];
3627 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 788868"];
3628 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 788869"];
3629 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 788870"];
3630 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 788871"];
3631 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 788872"];
3632 [label="if (d._arguments == null)\n                    return false; 788873"];
3633 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 788874"];
3634 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 788875"];
3635 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 788876"];
3636 [label="diffDescription = expected[idx]; 788877"];
3637 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 788878"];
3638 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 788879"];
3639 [label="GetDiagnosticDescription(description, indentDepth) 788880"];
3640 [label="param GetDiagnosticDescription(DiagnosticDescription d) 788881"];
3641 [label="param GetDiagnosticDescription(int indentDepth) 788882"];
3642 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788883"];
3643 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788884"];
3644 [label="var sb = new StringBuilder(); 788885"];
3645 [label="sb.Append('Diagnostic('); 788886"];
3646 [label="sb.Append('Diagnostic('); 788887"];
3647 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 788888"];
3648 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 788889"];
3649 [label="sb.Append(_errorCodeType.Name); 788890"];
3650 [label="sb.Append(_errorCodeType.Name); 788891"];
3651 [label="sb.Append('.'); 788892"];
3652 [label="sb.Append('.'); 788893"];
3653 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 788894"];
3654 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 788895"];
3655 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 788896"];
3656 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 788897"];
3657 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 788898"];
3658 [label="sb.Append(')'); 788899"];
3659 [label="sb.Append(')'); 788900"];
3660 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 788901"];
3661 [label="sb.Append('.WithArguments('); 788902"];
3662 [label="sb.Append('.WithArguments('); 788903"];
3663 [label="sb.Append('\\''); 788904"];
3664 [label="sb.Append('\\''); 788905"];
3665 [label="sb.Append(argumentStrings.Current); 788906"];
3666 [label="sb.Append(argumentStrings.Current); 788907"];
3667 [label="sb.Append('\\''); 788908"];
3668 [label="sb.Append('\\''); 788909"];
3669 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 788910"];
3670 [label="sb.Append(')'); 788911"];
3671 [label="sb.Append(')'); 788912"];
3672 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 788913"];
3673 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 788914"];
3674 [label="sb.Append('.WithLocation('); 788915"];
3675 [label="sb.Append('.WithLocation('); 788916"];
3676 [label="sb.Append(_startPosition.Value.Line + 1); 788917"];
3677 [label="sb.Append(_startPosition.Value.Line + 1); 788918"];
3678 [label="sb.Append(', '); 788919"];
3679 [label="sb.Append(', '); 788920"];
3680 [label="sb.Append(_startPosition.Value.Character + 1); 788921"];
3681 [label="sb.Append(_startPosition.Value.Character + 1); 788922"];
3682 [label="sb.Append(')'); 788923"];
3683 [label="sb.Append(')'); 788924"];
3684 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 788925"];
3685 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 788926"];
3686 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 788927"];
3687 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 788928"];
3688 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 788929"];
3689 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 788930"];
3690 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 788931"];
3691 [label="return sb.ToString(); 788932"];
3692 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788933"];
3693 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788934"];
3694 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 788935"];
3695 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 788936"];
3696 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 788937"];
3697 [label="GetDiagnosticDescription(diffDescription, indentDepth) 788938"];
3698 [label="param GetDiagnosticDescription(DiagnosticDescription d) 788939"];
3699 [label="param GetDiagnosticDescription(int indentDepth) 788940"];
3700 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788941"];
3701 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788942"];
3702 [label="var sb = new StringBuilder(); 788943"];
3703 [label="sb.Append('Diagnostic('); 788944"];
3704 [label="sb.Append('Diagnostic('); 788945"];
3705 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 788946"];
3706 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 788947"];
3707 [label="sb.Append(_errorCodeType.Name); 788948"];
3708 [label="sb.Append(_errorCodeType.Name); 788949"];
3709 [label="sb.Append('.'); 788950"];
3710 [label="sb.Append('.'); 788951"];
3711 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 788952"];
3712 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 788953"];
3713 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 788954"];
3714 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 788955"];
3715 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 788956"];
3716 [label="sb.Append(')'); 788957"];
3717 [label="sb.Append(')'); 788958"];
3718 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 788959"];
3719 [label="sb.Append('.WithArguments('); 788960"];
3720 [label="sb.Append('.WithArguments('); 788961"];
3721 [label="sb.Append('\\''); 788962"];
3722 [label="sb.Append('\\''); 788963"];
3723 [label="sb.Append(argumentStrings.Current); 788964"];
3724 [label="sb.Append(argumentStrings.Current); 788965"];
3725 [label="sb.Append('\\''); 788966"];
3726 [label="sb.Append('\\''); 788967"];
3727 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 788968"];
3728 [label="sb.Append(')'); 788969"];
3729 [label="sb.Append(')'); 788970"];
3730 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 788971"];
3731 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 788972"];
3732 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 788973"];
3733 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 788974"];
3734 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 788975"];
3735 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 788976"];
3736 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 788977"];
3737 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 788978"];
3738 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 788979"];
3739 [label="return sb.ToString(); 788980"];
3740 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788981"];
3741 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 788982"];
3742 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 788983"];
3743 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 788984"];
3744 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 788985"];
3745 [label="assertText.AppendLine(); 788986"];
3746 [label="assertText.AppendLine('Diff:'); 788987"];
3747 [label="assertText.AppendLine('Diff:'); 788988"];
3748 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 788989"];
3749 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 788990"];
3750 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 788991"];
3751 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 788992"];
3752 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 788993"];
3753 [label="param DiffReport(IEnumerable<T> expected) 788994"];
3754 [label="param DiffReport(IEnumerable<T> actual) 788995"];
3755 [label="param DiffReport(string separator) 788996"];
3756 [label="param DiffReport(IEqualityComparer<T> comparer = null) 788997"];
3757 [label="param DiffReport(Func<T, string> toString = null) 788998"];
3758 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 788999"];
3759 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 789000"];
3760 [label="(comparer != null) 789001"];
3761 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 789002"];
3762 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 789003"];
3763 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 789004"];
3764 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 789005"];
3765 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 789006"];
3766 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 789007"];
3767 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 789008"];
3768 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 789009"];
3769 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 789010"];
3770 [label="lcs.CalculateDiff(expectedList, actualList, toString) 789011"];
3771 [label="param CalculateDiff(IList<T> sequenceA) 789012"];
3772 [label="param CalculateDiff(IList<T> sequenceB) 789013"];
3773 [label="param CalculateDiff(Func<T, string> toString) 789014"];
3774 [label="param CalculateDiff(this) 789015"];
3775 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 789016"];
3776 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 789017"];
3777 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 789018"];
3778 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 789019"];
3779 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 789020"];
3780 [label="param GetEdits(TSequence sequenceA) 789021"];
3781 [label="param GetEdits(int lengthA) 789022"];
3782 [label="param GetEdits(TSequence sequenceB) 789023"];
3783 [label="param GetEdits(int lengthB) 789024"];
3784 [label="param GetEdits(this) 789025"];
3785 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 789026"];
3786 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 789027"];
3787 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 789028"];
3788 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 789029"];
3789 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 789030"];
3790 [label="param ComputeCostMatrix(TSequence sequenceA) 789031"];
3791 [label="param ComputeCostMatrix(int lengthA) 789032"];
3792 [label="param ComputeCostMatrix(TSequence sequenceB) 789033"];
3793 [label="param ComputeCostMatrix(int lengthB) 789034"];
3794 [label="param ComputeCostMatrix(this) 789035"];
3795 [label="var la = lengthA + 1; 789036"];
3796 [label="var la = lengthA + 1; 789037"];
3797 [label="var lb = lengthB + 1; 789038"];
3798 [label="var lb = lengthB + 1; 789039"];
3799 [label="var d = new int[la, lb]; 789040"];
3800 [label="d[0, 0] = 0; 789041"];
3801 [label="d[0, 0] 789042"];
3802 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 789043"];
3803 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 789044"];
3804 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 789045"];
3805 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 789046"];
3806 [label="d[i, 0] 789047"];
3807 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 789048"];
3808 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 789049"];
3809 [label="d[0, j] = d[0, j - 1] + InsertCost; 789050"];
3810 [label="d[0, j] = d[0, j - 1] + InsertCost; 789051"];
3811 [label="d[0, j] 789052"];
3812 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 789053"];
3813 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 789054"];
3814 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 789055"];
3815 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 789056"];
3816 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 789057"];
3817 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 789058"];
3818 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 789059"];
3819 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 789060"];
3820 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 789061"];
3821 [label="param ItemsEqual(IList<T> sequenceA) 789062"];
3822 [label="param ItemsEqual(int indexA) 789063"];
3823 [label="param ItemsEqual(IList<T> sequenceB) 789064"];
3824 [label="param ItemsEqual(int indexB) 789065"];
3825 [label="param ItemsEqual(this) 789066"];
3826 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 789067"];
3827 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 789068"];
3828 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 789069"];
3829 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 789070"];
3830 [label="int m2 = d[i - 1, j] + DeleteCost; 789071"];
3831 [label="int m2 = d[i - 1, j] + DeleteCost; 789072"];
3832 [label="int m3 = d[i, j - 1] + InsertCost; 789073"];
3833 [label="int m3 = d[i, j - 1] + InsertCost; 789074"];
3834 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 789075"];
3835 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 789076"];
3836 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 789077"];
3837 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 789078"];
3838 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 789079"];
3839 [label="d[i, j] 789080"];
3840 [label="return d; 789081"];
3841 [label="int i = lengthA; 789082"];
3842 [label="int j = lengthB; 789083"];
3843 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 789084"];
3844 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 789085"];
3845 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 789086"];
3846 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 789087"];
3847 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 789088"];
3848 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 789089"];
3849 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 789090"];
3850 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 789091"];
3851 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 789092"];
3852 [label="i--; 789093"];
3853 [label="j--; 789094"];
3854 [label="yield return new Edit(EditKind.Update, i, j); 789095"];
3855 [label="yield return new Edit(EditKind.Update, i, j); 789096"];
3856 [label="yield return new Edit(EditKind.Update, i, j); 789097"];
3857 [label="yield return new Edit(EditKind.Update, i, j); 789098"];
3858 [label="new Edit(EditKind.Update, i, j) 789099"];
3859 [label="param Edit(EditKind kind) 789100"];
3860 [label="param Edit(int indexA) 789101"];
3861 [label="param Edit(int indexB) 789102"];
3862 [label="param Edit(this) 789103"];
3863 [label="this.Kind 789104"];
3864 [label="this.IndexA 789105"];
3865 [label="this.IndexB 789106"];
3866 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 789107"];
3867 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 789108"];
3868 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 789109"];
3869 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 789110"];
3870 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 789111"];
3871 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 789112"];
3872 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 789113"];
3873 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 789114"];
3874 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 789115"];
3875 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 789116"];
3876 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 789117"];
3877 [label="actualText.Free(); 789118"];
3878 [label="expectedText.Free(); 789119"];
3879 [label="return assertText.ToString(); 789120"];
3880 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 789121"];
3881 [label="diagnostics.Verify(expected); 789122"];
3882 [label="VerifyAssemblyIds(c, diagnostics); 789123"];
3883 [label="VerifyAssemblyIds(c, diagnostics); 789124"];
3884 [label="VerifyAssemblyIds(c, diagnostics) 789125"];
3885 [label="param VerifyAssemblyIds(TCompilation c) 789126"];
3886 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 789127"];
3887 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 789128"];
3888 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 789129"];
3889 [label="c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code) 789130"];
3890 [label="param IsUnreferencedAssemblyIdentityDiagnosticCode(int code) 789131"];
3891 [label="=> code == (int)ErrorCode.ERR_NoTypeDef 789132"];
3892 [label="code == (int)ErrorCode.ERR_NoTypeDef 789133"];
3893 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 789134"];
3894 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 789135"];
3895 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 789136"];
3896 [label="=> code == (int)ErrorCode.ERR_NoTypeDef 789137"];
3897 [label="CustomAssert.True(assemblyIds.IsEmpty); 789138"];
3898 [label="VerifyAssemblyIds(c, diagnostics); 789139"];
3899 [label="return c; 789140"];
3900 [label="source = @'\nnamespace решения\n{\npublic class X\n{\n    public static void Main()\n    {\n  \n    }\n}\n}'; 789141"];
3901 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('решения.X')); 789142"];
3902 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('решения.X')); 789143"];
3903 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('решения.X')); 789144"];
3904 [label="CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('решения.X')) 789145"];
3905 [label="param operator(string source) 789146"];
3906 [label="source 789147"];
3907 [label="new CSharpTestSource(source) 789148"];
3908 [label="param CSharpTestSource(object value) 789149"];
3909 [label="param CSharpTestSource(this) 789150"];
3910 [label="Value 789151"];
3911 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('решения.X')); 789152"];
3912 [label="param CreateCompilation(CSharpTestSource source) 789153"];
3913 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 789154"];
3914 [label="param CreateCompilation(CSharpCompilationOptions options = null) 789155"];
3915 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 789156"];
3916 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 789157"];
3917 [label="param CreateCompilation(string assemblyName = '') 789158"];
3918 [label="param CreateCompilation(string sourceFileName = '') 789159"];
3919 [label="param CreateCompilation(bool skipUsesIsNullable = false) 789160"];
3920 [label="source 789161"];
3921 [label="targetFramework 789162"];
3922 [label="references 789163"];
3923 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 789164"];
3924 [label="param GetReferences(TargetFramework tf) 789165"];
3925 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 789166"];
3926 [label="var references = GetReferences(tf); 789167"];
3927 [label="GetReferences(tf) 789168"];
3928 [label="param GetReferences(TargetFramework targetFramework) 789169"];
3929 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 789170"];
3930 [label="StandardReferences 789171"];
3931 [label="RuntimeUtilities.IsCoreClrRuntime 789172"];
3932 [label="Mscorlib46ExtendedReferences 789173"];
3933 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 789174"];
3934 [label="TestBase.ValueTupleRef 789175"];
3935 [label="TestReferences.NetFx.ValueTuple.tuplelib 789176"];
3936 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 789177"];
3937 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 789178"];
3938 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 789179"];
3939 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 789180"];
3940 [label="parseOptions 789181"];
3941 [label="assemblyName 789182"];
3942 [label="sourceFileName 789183"];
3943 [label="skipUsesIsNullable 789184"];
3944 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 789185"];
3945 [label="param CreateEmptyCompilation(CSharpTestSource source) 789186"];
3946 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 789187"];
3947 [label="param CreateEmptyCompilation(string assemblyName = '') 789188"];
3948 [label="param CreateEmptyCompilation(string sourceFileName = '') 789189"];
3949 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 789190"];
3950 [label="source 789191"];
3951 [label="parseOptions 789192"];
3952 [label="assemblyName 789193"];
3953 [label="sourceFileName 789194"];
3954 [label="skipUsesIsNullable 789195"];
3955 [label="null 789196"];
3956 [label="experimentalFeature: null 789197"];
3957 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 789198"];
3958 [label="param CreateCompilationCore(CSharpTestSource source) 789199"];
3959 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 789200"];
3960 [label="param CreateCompilationCore(string assemblyName) 789201"];
3961 [label="param CreateCompilationCore(string sourceFileName) 789202"];
3962 [label="param CreateCompilationCore(bool skipUsesIsNullable) 789203"];
3963 [label="param CreateCompilationCore(MessageID? experimentalFeature) 789204"];
3964 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 789205"];
3965 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 789206"];
3966 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 789207"];
3967 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 789208"];
3968 [label="param GetSyntaxTrees(string sourceFileName = '') 789209"];
3969 [label="param GetSyntaxTrees(this) 789210"];
3970 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 789211"];
3971 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 789212"];
3972 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 789213"];
3973 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 789214"];
3974 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 789215"];
3975 [label="param Parse(string text) 789216"];
3976 [label="param Parse(string filename = '') 789217"];
3977 [label="param Parse(CSharpParseOptions options = null) 789218"];
3978 [label="param Parse(Encoding encoding = null) 789219"];
3979 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 789220"];
3980 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 789221"];
3981 [label="options = TestOptions.Regular; 789222"];
3982 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 789223"];
3983 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 789224"];
3984 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 789225"];
3985 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 789226"];
3986 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 789227"];
3987 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 789228"];
3988 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 789229"];
3989 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 789230"];
3990 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 789231"];
3991 [label="var stream = new MemoryStream(); 789232"];
3992 [label="var root = tree.GetRoot(); 789233"];
3993 [label="var root = tree.GetRoot(); 789234"];
3994 [label="root.SerializeTo(stream); 789235"];
3995 [label="root.SerializeTo(stream); 789236"];
3996 [label="root.SerializeTo(stream); 789237"];
3997 [label="stream.Position = 0; 789238"];
3998 [label="stream.Position 789239"];
3999 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 789240"];
4000 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 789241"];
4001 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 789242"];
4002 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 789243"];
4003 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 789244"];
4004 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 789245"];
4005 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 789246"];
4006 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 789247"];
4007 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 789248"];
4008 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 789249"];
4009 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 789250"];
4010 [label="param ValidateIOperations(Func<Compilation> createCompilation) 789251"];
4011 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 789252"];
4012 [label="return; 789253"];
4013 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 789254"];
4014 [label="var compilation = createCompilationLambda(); 789255"];
4015 [label="return Guid.NewGuid().ToString('D'); 789256"];
4016 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 789257"];
4017 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 789258"];
4018 [label="param Create(CSharpCompilation? previousSubmission) 789259"];
4019 [label="param Create(Type? returnType) 789260"];
4020 [label="param Create(Type? hostObjectType) 789261"];
4021 [label="param Create(bool isSubmission) 789262"];
4022 [label="RoslynDebug.Assert(options != null); 789263"];
4023 [label="RoslynDebug.Assert(options != null); 789264"];
4024 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 789265"];
4025 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789266"];
4026 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789267"];
4027 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789268"];
4028 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789269"];
4029 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789270"];
4030 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 789271"];
4031 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 789272"];
4032 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 789273"];
4033 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 789274"];
4034 [label="param SyntaxAndDeclarationManager(bool isSubmission) 789275"];
4035 [label="param SyntaxAndDeclarationManager(State state) 789276"];
4036 [label="param SyntaxAndDeclarationManager(this) 789277"];
4037 [label="externalSyntaxTrees 789278"];
4038 [label="messageProvider 789279"];
4039 [label="isSubmission 789280"];
4040 [label="param SyntaxAndDeclarationManager(this) 789281"];
4041 [label="_lazyState 789282"];
4042 [label="_lazyState 789283"];
4043 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 789284"];
4044 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 789285"];
4045 [label="param CSharpCompilation(Type? submissionReturnType) 789286"];
4046 [label="param CSharpCompilation(Type? hostObjectType) 789287"];
4047 [label="param CSharpCompilation(bool isSubmission) 789288"];
4048 [label="param CSharpCompilation(ReferenceManager? referenceManager) 789289"];
4049 [label="param CSharpCompilation(bool reuseReferenceManager) 789290"];
4050 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 789291"];
4051 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 789292"];
4052 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 789293"];
4053 [label="param CSharpCompilation(this) 789294"];
4054 [label="previousSubmission 789295"];
4055 [label="submissionReturnType 789296"];
4056 [label="hostObjectType 789297"];
4057 [label="isSubmission 789298"];
4058 [label="referenceManager 789299"];
4059 [label="reuseReferenceManager 789300"];
4060 [label="syntaxAndDeclarations 789301"];
4061 [label="semanticModelProvider 789302"];
4062 [label="eventQueue 789303"];
4063 [label="param CSharpCompilation(this) 789304"];
4064 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 789305"];
4065 [label="param CSharpCompilation(Type? submissionReturnType) 789306"];
4066 [label="param CSharpCompilation(Type? hostObjectType) 789307"];
4067 [label="param CSharpCompilation(bool isSubmission) 789308"];
4068 [label="param CSharpCompilation(ReferenceManager? referenceManager) 789309"];
4069 [label="param CSharpCompilation(bool reuseReferenceManager) 789310"];
4070 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 789311"];
4071 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 789312"];
4072 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 789313"];
4073 [label="param CSharpCompilation(this) 789314"];
4074 [label="isSubmission 789315"];
4075 [label="semanticModelProvider 789316"];
4076 [label="eventQueue 789317"];
4077 [label="param CSharpCompilation(this) 789318"];
4078 [label="_options 789319"];
4079 [label="_globalImports 789320"];
4080 [label="_previousSubmissionImports 789321"];
4081 [label="_globalNamespaceAlias 789322"];
4082 [label="_scriptClass 789323"];
4083 [label="_lazyHostObjectTypeSymbol 789324"];
4084 [label="_lazyImportInfos 789325"];
4085 [label="_conversions 789326"];
4086 [label="_anonymousTypeManager 789327"];
4087 [label="_lazyGlobalNamespace 789328"];
4088 [label="builtInOperators 789329"];
4089 [label="_lazyAssemblySymbol 789330"];
4090 [label="_referenceManager 789331"];
4091 [label="_syntaxAndDeclarations 789332"];
4092 [label="_lazyEntryPoint 789333"];
4093 [label="_lazyEmitNullablePublicOnly 789334"];
4094 [label="_lazyCompilationUnitCompletedTrees 789335"];
4095 [label="NullableAnalysisData 789336"];
4096 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 789337"];
4097 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 789338"];
4098 [label="_externAliasTargets 789339"];
4099 [label="_moduleInitializerMethods 789340"];
4100 [label="_binderFactories 789341"];
4101 [label="_ignoreAccessibilityBinderFactories 789342"];
4102 [label="_lazyDeclarationDiagnostics 789343"];
4103 [label="_declarationDiagnosticsFrozen 789344"];
4104 [label="new DiagnosticBag() 789345"];
4105 [label="_additionalCodegenWarnings = new DiagnosticBag() 789346"];
4106 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 789347"];
4107 [label="this.builtInOperators = new BuiltInOperators(this); 789348"];
4108 [label="this.builtInOperators = new BuiltInOperators(this); 789349"];
4109 [label="new BuiltInOperators(this) 789350"];
4110 [label="param BuiltInOperators(CSharpCompilation compilation) 789351"];
4111 [label="param BuiltInOperators(this) 789352"];
4112 [label="_compilation 789353"];
4113 [label="_builtInUnaryOperators 789354"];
4114 [label="_builtInOperators 789355"];
4115 [label="_compilation 789356"];
4116 [label="this.builtInOperators 789357"];
4117 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 789358"];
4118 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 789359"];
4119 [label="LanguageVersion? result = null; 789360"];
4120 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 789361"];
4121 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 789362"];
4122 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 789363"];
4123 [label="this.LanguageVersion 789364"];
4124 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 789365"];
4125 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789366"];
4126 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789367"];
4127 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789368"];
4128 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789369"];
4129 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789370"];
4130 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789371"];
4131 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 789372"];
4132 [label="this.Options 789373"];
4133 [label="get\n            {\n                return _options;\n            } 789374"];
4134 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 789375"];
4135 [label="_syntaxAndDeclarations 789376"];
4136 [label="Debug.Assert(_lazyAssemblySymbol is null); 789377"];
4137 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 789378"];
4138 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 789379"];
4139 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 789380"];
4140 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 789381"];
4141 [label="int i = 0; 789382"];
4142 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 789383"];
4143 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 789384"];
4144 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 789385"];
4145 [label="i++; 789386"];
4146 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 789387"];
4147 [label="var scriptClassName = this.ScriptClassName; 789388"];
4148 [label="var resolver = this.Resolver; 789389"];
4149 [label="var messageProvider = this.MessageProvider; 789390"];
4150 [label="var isSubmission = this.IsSubmission; 789391"];
4151 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 789392"];
4152 [label="param CSharpCompilation(Type? submissionReturnType) 789393"];
4153 [label="param CSharpCompilation(Type? hostObjectType) 789394"];
4154 [label="previousSubmission 789395"];
4155 [label="submissionReturnType 789396"];
4156 [label="hostObjectType 789397"];
4157 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 789398"];
4158 [label="param CSharpCompilation(Type? submissionReturnType) 789399"];
4159 [label="param CSharpCompilation(Type? hostObjectType) 789400"];
4160 [label="_compilation 789401"];
4161 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 789402"];
4162 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789403"];
4163 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789404"];
4164 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789405"];
4165 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789406"];
4166 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789407"];
4167 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 789408"];
4168 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 789409"];
4169 [label="Debug.Assert(_lazyAssemblySymbol is null); 789410"];
4170 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 789411"];
4171 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 789412"];
4172 [label="IsNullableEnabled(compilation) 789413"];
4173 [label="compilation.SyntaxTrees 789414"];
4174 [label="_syntaxAndDeclarations.GetLazyState() 789415"];
4175 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 789416"];
4176 [label="param CreateState(CommonMessageProvider messageProvider) 789417"];
4177 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 789418"];
4178 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 789419"];
4179 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 789420"];
4180 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 789421"];
4181 [label="var sourceCodeKind = tree.Options.Kind; 789422"];
4182 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 789423"];
4183 [label="OrdinalMap 789424"];
4184 [label="LoadDirectiveMap 789425"];
4185 [label="LoadedSyntaxTreeMap 789426"];
4186 [label="RootNamespaces 789427"];
4187 [label="DeclarationTable 789428"];
4188 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 789429"];
4189 [label="var options = (CSharpParseOptions)trees[0].Options; 789430"];
4190 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 789431"];
4191 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 789432"];
4192 [label="compilation.VerifyDiagnostics(); 789433"];
4193 [label="compilation.VerifyDiagnostics(); 789434"];
4194 [label="compilation.VerifyDiagnostics() 789435"];
4195 [label="param VerifyDiagnostics(this TCompilation c) 789436"];
4196 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 789437"];
4197 [label="var diagnostics = c.GetDiagnostics(); 789438"];
4198 [label="c.GetDiagnostics() 789439"];
4199 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 789440"];
4200 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 789441"];
4201 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 789442"];
4202 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 789443"];
4203 [label="GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken) 789444"];
4204 [label="param GetDiagnostics(CompilationStage stage) 789445"];
4205 [label="param GetDiagnostics(bool includeEarlierStages) 789446"];
4206 [label="param GetDiagnostics(CancellationToken cancellationToken) 789447"];
4207 [label="var diagnostics = DiagnosticBag.GetInstance(); 789448"];
4208 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 789449"];
4209 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 789450"];
4210 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 789451"];
4211 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 789452"];
4212 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 789453"];
4213 [label="param GetDiagnostics(CompilationStage stage) 789454"];
4214 [label="param GetDiagnostics(bool includeEarlierStages) 789455"];
4215 [label="param GetDiagnostics(DiagnosticBag diagnostics) 789456"];
4216 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 789457"];
4217 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 789458"];
4218 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 789459"];
4219 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 789460"];
4220 [label="this.SyntaxTrees 789461"];
4221 [label="_syntaxAndDeclarations.GetLazyState() 789462"];
4222 [label="param GetLazyState(this) 789463"];
4223 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 789464"];
4224 [label="this.Options 789465"];
4225 [label="return _options; 789466"];
4226 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 789467"];
4227 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 789468"];
4228 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 789469"];
4229 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 789470"];
4230 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 789471"];
4231 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 789472"];
4232 [label="CheckAssemblyName(builder); 789473"];
4233 [label="CheckAssemblyName(builder); 789474"];
4234 [label="CheckAssemblyName(builder); 789475"];
4235 [label="Options 789476"];
4236 [label="Options 789477"];
4237 [label="get\n            {\n                return _options;\n            } 789478"];
4238 [label="return _options; 789479"];
4239 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 789480"];
4240 [label="GetBoundReferenceManager() 789481"];
4241 [label="Debug.Assert(_lazyAssemblySymbol is object); 789482"];
4242 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 789483"];
4243 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 789484"];
4244 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 789485"];
4245 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 789486"];
4246 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 789487"];
4247 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 789488"];
4248 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 789489"];
4249 [label="GlobalImports 789490"];
4250 [label="_globalImports.Value 789491"];
4251 [label="Imports.FromGlobalUsings(this) 789492"];
4252 [label="GlobalImports.Complete(cancellationToken); 789493"];
4253 [label="SourceLocation? location = null; 789494"];
4254 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 789495"];
4255 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 789496"];
4256 [label="Assembly 789497"];
4257 [label="SourceAssembly 789498"];
4258 [label="GetBoundReferenceManager() 789499"];
4259 [label="GetBoundReferenceManager(); 789500"];
4260 [label="Assembly.ForceComplete(location, cancellationToken); 789501"];
4261 [label="Assembly.ForceComplete(location, cancellationToken); 789502"];
4262 [label="Assembly.ForceComplete(location, cancellationToken); 789503"];
4263 [label="Declarations 789504"];
4264 [label="_syntaxAndDeclarations.GetLazyState() 789505"];
4265 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 789506"];
4266 [label="return Declarations.GetMergedRoot(this); 789507"];
4267 [label="_syntaxAndDeclarations.GetLazyState() 789508"];
4268 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 789509"];
4269 [label="SourceAssembly 789510"];
4270 [label="GetBoundReferenceManager() 789511"];
4271 [label="GetBoundReferenceManager(); 789512"];
4272 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 789513"];
4273 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 789514"];
4274 [label="param SymbolDeclaredEvent(Symbol symbol) 789515"];
4275 [label="param SymbolDeclaredEvent(this) 789516"];
4276 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 789517"];
4277 [label="GetBoundReferenceManager() 789518"];
4278 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 789519"];
4279 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 789520"];
4280 [label="NamedTypeSymbol result; 789521"];
4281 [label="GetBoundReferenceManager(); 789522"];
4282 [label="Debug.Assert(result.SpecialType == specialType); 789523"];
4283 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 789524"];
4284 [label="GetBinderFactory(syntax.SyntaxTree) 789525"];
4285 [label="param GetBinderFactory(bool ignoreAccessibility = false) 789526"];
4286 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 789527"];
4287 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 789528"];
4288 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 789529"];
4289 [label="param GetBinderFactory(bool ignoreAccessibility) 789530"];
4290 [label="ignoreAccessibility 789531"];
4291 [label="GetSyntaxTreeOrdinal(syntaxTree) 789532"];
4292 [label="this.ContainsSyntaxTree(tree) 789533"];
4293 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 789534"];
4294 [label="_syntaxAndDeclarations.GetLazyState() 789535"];
4295 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 789536"];
4296 [label="_syntaxAndDeclarations.GetLazyState() 789537"];
4297 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 789538"];
4298 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 789539"];
4299 [label="BinderFactory? previousFactory; 789540"];
4300 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 789541"];
4301 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 789542"];
4302 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 789543"];
4303 [label="param AddNewFactory(bool ignoreAccessibility) 789544"];
4304 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 789545"];
4305 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 789546"];
4306 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 789547"];
4307 [label="BinderFactory? previousFactory; 789548"];
4308 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 789549"];
4309 [label="Assembly 789550"];
4310 [label="SourceAssembly 789551"];
4311 [label="GetBoundReferenceManager() 789552"];
4312 [label="GetBoundReferenceManager(); 789553"];
4313 [label="return Assembly.Modules[0]; 789554"];
4314 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 789555"];
4315 [label="GetNullableAnalysisValue() 789556"];
4316 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 789557"];
4317 [label="Options 789558"];
4318 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 789559"];
4319 [label="param GetBinderFactory(bool ignoreAccessibility = false) 789560"];
4320 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 789561"];
4321 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 789562"];
4322 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 789563"];
4323 [label="param GetBinderFactory(bool ignoreAccessibility) 789564"];
4324 [label="ignoreAccessibility 789565"];
4325 [label="GetSyntaxTreeOrdinal(syntaxTree) 789566"];
4326 [label="this.ContainsSyntaxTree(tree) 789567"];
4327 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 789568"];
4328 [label="_syntaxAndDeclarations.GetLazyState() 789569"];
4329 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 789570"];
4330 [label="_syntaxAndDeclarations.GetLazyState() 789571"];
4331 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 789572"];
4332 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 789573"];
4333 [label="BinderFactory? previousFactory; 789574"];
4334 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 789575"];
4335 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 789576"];
4336 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 789577"];
4337 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 789578"];
4338 [label="param AddNewFactory(bool ignoreAccessibility) 789579"];
4339 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 789580"];
4340 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 789581"];
4341 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 789582"];
4342 [label="BinderFactory? previousFactory; 789583"];
4343 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 789584"];
4344 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 789585"];
4345 [label="Assembly 789586"];
4346 [label="SourceAssembly 789587"];
4347 [label="GetBoundReferenceManager() 789588"];
4348 [label="GetBoundReferenceManager(); 789589"];
4349 [label="return Assembly.Modules[0]; 789590"];
4350 [label="compilation.SyntaxTrees 789591"];
4351 [label="_syntaxAndDeclarations.GetLazyState() 789592"];
4352 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 789593"];
4353 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 789594"];
4354 [label="Debug.Assert(symbol.IsDefinition); 789595"];
4355 [label="SourceModule 789596"];
4356 [label="Assembly 789597"];
4357 [label="SourceAssembly 789598"];
4358 [label="GetBoundReferenceManager() 789599"];
4359 [label="GetBoundReferenceManager(); 789600"];
4360 [label="return Assembly.Modules[0]; 789601"];
4361 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 789602"];
4362 [label="EmitNullablePublicOnly 789603"];
4363 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 789604"];
4364 [label="_declarationDiagnosticsFrozen = true; 789605"];
4365 [label="_needsGeneratedAttributes_IsFrozen = true; 789606"];
4366 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 789607"];
4367 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 789608"];
4368 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 789609"];
4369 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 789610"];
4370 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 789611"];
4371 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 789612"];
4372 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 789613"];
4373 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 789614"];
4374 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 789615"];
4375 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 789616"];
4376 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 789617"];
4377 [label="param CheckCompliance(DiagnosticBag diagnostics) 789618"];
4378 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 789619"];
4379 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 789620"];
4380 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 789621"];
4381 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 789622"];
4382 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 789623"];
4383 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 789624"];
4384 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 789625"];
4385 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 789626"];
4386 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 789627"];
4387 [label="param GetDeclaredCompliance(out Location attributeLocation) 789628"];
4388 [label="param GetDeclaredCompliance(this) 789629"];
4389 [label="attributeLocation = null; 789630"];
4390 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 789631"];
4391 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 789632"];
4392 [label="IsTrue(assemblyCompliance) 789633"];
4393 [label="param IsTrue(Compliance compliance) 789634"];
4394 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 789635"];
4395 [label="return false; 789636"];
4396 [label="Location attributeLocation; 789637"];
4397 [label="param GetDeclaredCompliance(out Location attributeLocation) 789638"];
4398 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 789639"];
4399 [label="i == 0 789640"];
4400 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 789641"];
4401 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 789642"];
4402 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 789643"];
4403 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 789644"];
4404 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 789645"];
4405 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 789646"];
4406 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 789647"];
4407 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 789648"];
4408 [label="System.Diagnostics.Debug.Assert((object)containing != null); 789649"];
4409 [label="return compliance; 789650"];
4410 [label="IsTrue(GetInheritedCompliance(symbol)) 789651"];
4411 [label="param IsTrue(Compliance compliance) 789652"];
4412 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 789653"];
4413 [label="return false; 789654"];
4414 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 789655"];
4415 [label="param IsTrue(Compliance compliance) 789656"];
4416 [label="if (DoNotVisit(symbol)) return; 789657"];
4417 [label="DoNotVisit(symbol) 789658"];
4418 [label="param DoNotVisit(Symbol symbol) 789659"];
4419 [label="param DoNotVisit(this) 789660"];
4420 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 789661"];
4421 [label="return false; 789662"];
4422 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 789663"];
4423 [label="param IsTrue(Compliance compliance) 789664"];
4424 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 789665"];
4425 [label="return false; 789666"];
4426 [label="if (tasks == null)\n            {\n                return;\n            } 789667"];
4427 [label="checker.WaitForWorkers(); 789668"];
4428 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 789669"];
4429 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 789670"];
4430 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 789671"];
4431 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 789672"];
4432 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 789673"];
4433 [label="var methodBodyDiagnostics = DiagnosticBag.GetInstance(); 789674"];
4434 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 789675"];
4435 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 789676"];
4436 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken) 789677"];
4437 [label="param GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics) 789678"];
4438 [label="param GetDiagnosticsForAllMethodBodies(CancellationToken cancellationToken) 789679"];
4439 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 789680"];
4440 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 789681"];
4441 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 789682"];
4442 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken) 789683"];
4443 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 789684"];
4444 [label="param CompileMethodBodies(bool emittingPdb) 789685"];
4445 [label="param CompileMethodBodies(bool emitTestCoverageData) 789686"];
4446 [label="param CompileMethodBodies(bool hasDeclarationErrors) 789687"];
4447 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 789688"];
4448 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 789689"];
4449 [label="param CompileMethodBodies(CancellationToken cancellationToken) 789690"];
4450 [label="Debug.Assert(compilation != null); 789691"];
4451 [label="Debug.Assert(compilation != null); 789692"];
4452 [label="Debug.Assert(diagnostics != null); 789693"];
4453 [label="Debug.Assert(diagnostics != null); 789694"];
4454 [label="compilation.PreviousSubmission 789695"];
4455 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 789696"];
4456 [label="ScriptCompilationInfo 789697"];
4457 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 789698"];
4458 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 789699"];
4459 [label="MethodSymbol entryPoint = null; 789700"];
4460 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 789701"];
4461 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 789702"];
4462 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 789703"];
4463 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 789704"];
4464 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 789705"];
4465 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 789706"];
4466 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 789707"];
4467 [label="param GetEntryPoint(bool hasDeclarationErrors) 789708"];
4468 [label="param GetEntryPoint(DiagnosticBag diagnostics) 789709"];
4469 [label="param GetEntryPoint(CancellationToken cancellationToken) 789710"];
4470 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 789711"];
4471 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 789712"];
4472 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 789713"];
4473 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 789714"];
4474 [label="EntryPoint? entryPoint; 789715"];
4475 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 789716"];
4476 [label="this.Options 789717"];
4477 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 789718"];
4478 [label="ImmutableArray<Diagnostic> diagnostics; 789719"];
4479 [label="diagnostics 789720"];
4480 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 789721"];
4481 [label="param FindEntryPoint(MethodSymbol? simpleProgramEntryPointSymbol) 789722"];
4482 [label="param FindEntryPoint(CancellationToken cancellationToken) 789723"];
4483 [label="param FindEntryPoint(out ImmutableArray<Diagnostic> sealedDiagnostics) 789724"];
4484 [label="NamedTypeSymbol? mainType; 789725"];
4485 [label="var scriptClass = this.ScriptClass; 789726"];
4486 [label="if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    } 789727"];
4487 [label="if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    } 789728"];
4488 [label="if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    } 789729"];
4489 [label="var taskEntryPoints = ArrayBuilder<(bool IsValid, MethodSymbol Candidate, DiagnosticBag SpecificDiagnostics)>.GetInstance(); 789730"];
4490 [label="DiagnosticBag noMainFoundDiagnostics = DiagnosticBag.GetInstance(); 789731"];
4491 [label="param HasEntryPointSignature(DiagnosticBag bag) 789732"];
4492 [label="param HasEntryPointSignature(this) 789733"];
4493 [label="if (method.IsVararg)\n            {\n                return (false, false);\n            } 789734"];
4494 [label="bool returnsTaskOrTaskOfInt = false; 789735"];
4495 [label="if (method.RefKind != RefKind.None)\n            {\n                return (false, returnsTaskOrTaskOfInt);\n            } 789736"];
4496 [label="returnsTaskOrTaskOfInt 789737"];
4497 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 789738"];
4498 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 789739"];
4499 [label="if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    } 789740"];
4500 [label="if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    } 789741"];
4501 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 789742"];
4502 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 789743"];
4503 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 789744"];
4504 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 789745"];
4505 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 789746"];
4506 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 789747"];
4507 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 789748"];
4508 [label="if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 789749"];
4509 [label="MethodSymbol? entryPoint = null; 789750"];
4510 [label="taskEntryPoints.Free(); 789751"];
4511 [label="noMainFoundDiagnostics.Free(); 789752"];
4512 [label="MethodSymbol 789753"];
4513 [label="this.Options 789754"];
4514 [label="return _options; 789755"];
4515 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 789756"];
4516 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 789757"];
4517 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 789758"];
4518 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 789759"];
4519 [label="if ((object)synthesizedEntryPoint == null)\n            {\n                var returnType = entryPoint.ReturnType;\n                if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                }\n            } 789760"];
4520 [label="GetBoundReferenceManager(); 789761"];
4521 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 789762"];
4522 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 789763"];
4523 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 789764"];
4524 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 789765"];
4525 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 789766"];
4526 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 789767"];
4527 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 789768"];
4528 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 789769"];
4529 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 789770"];
4530 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 789771"];
4531 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 789772"];
4532 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 789773"];
4533 [label="param MethodCompiler(bool emittingPdb) 789774"];
4534 [label="param MethodCompiler(bool emitTestCoverageData) 789775"];
4535 [label="param MethodCompiler(bool hasDeclarationErrors) 789776"];
4536 [label="param MethodCompiler(DiagnosticBag diagnostics) 789777"];
4537 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 789778"];
4538 [label="param MethodCompiler(CancellationToken cancellationToken) 789779"];
4539 [label="param MethodCompiler(this) 789780"];
4540 [label="param MethodCompiler(this) 789781"];
4541 [label="_compilation 789782"];
4542 [label="_emittingPdb 789783"];
4543 [label="_emitTestCoverageData 789784"];
4544 [label="_diagnostics 789785"];
4545 [label="_hasDeclarationErrors 789786"];
4546 [label="_moduleBeingBuiltOpt 789787"];
4547 [label="_filterOpt 789788"];
4548 [label="_debugDocumentProvider 789789"];
4549 [label="_entryPointOpt 789790"];
4550 [label="_compilerTasks 789791"];
4551 [label="_globalHasErrors 789792"];
4552 [label="Debug.Assert(compilation != null); 789793"];
4553 [label="Debug.Assert(compilation != null); 789794"];
4554 [label="Debug.Assert(diagnostics != null); 789795"];
4555 [label="Debug.Assert(diagnostics != null); 789796"];
4556 [label="_moduleBeingBuiltOpt 789797"];
4557 [label="_emittingPdb 789798"];
4558 [label="_cancellationToken 789799"];
4559 [label="_diagnostics 789800"];
4560 [label="_filterOpt 789801"];
4561 [label="_hasDeclarationErrors 789802"];
4562 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 789803"];
4563 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 789804"];
4564 [label="param SetGlobalErrorIfTrue(bool arg) 789805"];
4565 [label="param SetGlobalErrorIfTrue(this) 789806"];
4566 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 789807"];
4567 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 789808"];
4568 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 789809"];
4569 [label="_emitTestCoverageData 789810"];
4570 [label="compilation.Options 789811"];
4571 [label="compilation.SourceModule 789812"];
4572 [label="Assembly 789813"];
4573 [label="SourceAssembly 789814"];
4574 [label="GetBoundReferenceManager() 789815"];
4575 [label="GetBoundReferenceManager(); 789816"];
4576 [label="return Assembly.Modules[0]; 789817"];
4577 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 789818"];
4578 [label="param CompileNamespace(this) 789819"];
4579 [label="param VisitNamespace(NamespaceSymbol symbol) 789820"];
4580 [label="param VisitNamespace(TypeCompilationState arg) 789821"];
4581 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 789822"];
4582 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 789823"];
4583 [label="PassesFilter(_filterOpt, symbol) 789824"];
4584 [label="param PassesFilter(Predicate<Symbol> filterOpt) 789825"];
4585 [label="param PassesFilter(Symbol symbol) 789826"];
4586 [label="return (filterOpt == null) || filterOpt(symbol); 789827"];
4587 [label="return (filterOpt == null) || filterOpt(symbol); 789828"];
4588 [label="arg = null; 789829"];
4589 [label="param CompileNamespaceAsAsync(NamespaceSymbol symbol) 789830"];
4590 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 789831"];
4591 [label="methodCompiler.WaitForWorkers() 789832"];
4592 [label="param WaitForWorkers(this) 789833"];
4593 [label="if (tasks == null)\n            {\n                return;\n            } 789834"];
4594 [label="if (tasks == null)\n            {\n                return;\n            } 789835"];
4595 [label="Task curTask; 789836"];
4596 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 789837"];
4597 [label="methodCompiler.WaitForWorkers(); 789838"];
4598 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 789839"];
4599 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 789840"];
4600 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 789841"];
4601 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 789842"];
4602 [label="compilation.AdditionalCodegenWarnings 789843"];
4603 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 789844"];
4604 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 789845"];
4605 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 789846"];
4606 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 789847"];
4607 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 789848"];
4608 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 789849"];
4609 [label="param WarnUnusedFields(CancellationToken cancellationToken) 789850"];
4610 [label="compilation.Assembly 789851"];
4611 [label="SourceAssembly 789852"];
4612 [label="GetBoundReferenceManager() 789853"];
4613 [label="GetBoundReferenceManager(); 789854"];
4614 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 789855"];
4615 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 789856"];
4616 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 789857"];
4617 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 789858"];
4618 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 789859"];
4619 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 789860"];
4620 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 789861"];
4621 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 789862"];
4622 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken) 789863"];
4623 [label="param WriteDocumentationCommentXml(string? assemblyName) 789864"];
4624 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 789865"];
4625 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 789866"];
4626 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 789867"];
4627 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 789868"];
4628 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 789869"];
4629 [label="StreamWriter writer = null; 789870"];
4630 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 789871"];
4631 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 789872"];
4632 [label="compilation.SourceAssembly 789873"];
4633 [label="GetBoundReferenceManager() 789874"];
4634 [label="GetBoundReferenceManager(); 789875"];
4635 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 789876"];
4636 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 789877"];
4637 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 789878"];
4638 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 789879"];
4639 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 789880"];
4640 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 789881"];
4641 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 789882"];
4642 [label="param DocumentationCommentCompiler(TextWriter writer) 789883"];
4643 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 789884"];
4644 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 789885"];
4645 [label="param DocumentationCommentCompiler(bool processIncludes) 789886"];
4646 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 789887"];
4647 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 789888"];
4648 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 789889"];
4649 [label="param DocumentationCommentCompiler(this) 789890"];
4650 [label="param DocumentationCommentCompiler(this) 789891"];
4651 [label="_assemblyName 789892"];
4652 [label="_compilation 789893"];
4653 [label="_writer 789894"];
4654 [label="_filterTree 789895"];
4655 [label="_filterSpanWithinTree 789896"];
4656 [label="_processIncludes 789897"];
4657 [label="_isForSingleSymbol 789898"];
4658 [label="_diagnostics 789899"];
4659 [label="_lazyComparer 789900"];
4660 [label="_includedFileCache 789901"];
4661 [label="_indentDepth 789902"];
4662 [label="_temporaryStringBuilders 789903"];
4663 [label="_writer 789904"];
4664 [label="_filterTree 789905"];
4665 [label="_filterSpanWithinTree 789906"];
4666 [label="_processIncludes 789907"];
4667 [label="_isForSingleSymbol 789908"];
4668 [label="_diagnostics 789909"];
4669 [label="_cancellationToken 789910"];
4670 [label="compilation.SourceAssembly 789911"];
4671 [label="GetBoundReferenceManager() 789912"];
4672 [label="GetBoundReferenceManager(); 789913"];
4673 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 789914"];
4674 [label="Debug.Assert(_assemblyName != null); 789915"];
4675 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 789916"];
4676 [label="WriteLine('<?xml version=\\'1.0\\'?>') 789917"];
4677 [label="param WriteLine(string message) 789918"];
4678 [label="param WriteLine(this) 789919"];
4679 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789920"];
4680 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789921"];
4681 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789922"];
4682 [label="WriteLine('<doc>'); 789923"];
4683 [label="WriteLine('<doc>') 789924"];
4684 [label="param WriteLine(string message) 789925"];
4685 [label="param WriteLine(this) 789926"];
4686 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789927"];
4687 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789928"];
4688 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789929"];
4689 [label="Indent(); 789930"];
4690 [label="WriteLine('<assembly>'); 789931"];
4691 [label="WriteLine('<assembly>') 789932"];
4692 [label="param WriteLine(string message) 789933"];
4693 [label="param WriteLine(this) 789934"];
4694 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789935"];
4695 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789936"];
4696 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789937"];
4697 [label="Indent(); 789938"];
4698 [label="WriteLine('<name>{0}</name>', _assemblyName); 789939"];
4699 [label="WriteLine('<name>{0}</name>', _assemblyName) 789940"];
4700 [label="WriteLine('<name>{0}</name>', _assemblyName) 789941"];
4701 [label="param WriteLine(string format) 789942"];
4702 [label="param WriteLine(params object[] args) 789943"];
4703 [label="param WriteLine(this) 789944"];
4704 [label="WriteLine(string.Format(format, args)); 789945"];
4705 [label="WriteLine(string.Format(format, args)); 789946"];
4706 [label="WriteLine(string.Format(format, args)); 789947"];
4707 [label="WriteLine(string.Format(format, args)) 789948"];
4708 [label="param WriteLine(string message) 789949"];
4709 [label="param WriteLine(this) 789950"];
4710 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789951"];
4711 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789952"];
4712 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789953"];
4713 [label="WriteLine(string.Format(format, args)); 789954"];
4714 [label="Debug.Assert(_indentDepth >= 0); 789955"];
4715 [label="Unindent(); 789956"];
4716 [label="WriteLine('</assembly>'); 789957"];
4717 [label="WriteLine('</assembly>') 789958"];
4718 [label="param WriteLine(string message) 789959"];
4719 [label="param WriteLine(this) 789960"];
4720 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789961"];
4721 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789962"];
4722 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789963"];
4723 [label="WriteLine('<members>'); 789964"];
4724 [label="WriteLine('<members>') 789965"];
4725 [label="param WriteLine(string message) 789966"];
4726 [label="param WriteLine(this) 789967"];
4727 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789968"];
4728 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789969"];
4729 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 789970"];
4730 [label="Indent(); 789971"];
4731 [label="Debug.Assert(!_isForSingleSymbol); 789972"];
4732 [label="Debug.Assert(!_isForSingleSymbol); 789973"];
4733 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 789974"];
4734 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 789975"];
4735 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 789976"];
4736 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 789977"];
4737 [label="docCommentNodes 789978"];
4738 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 789979"];
4739 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 789980"];
4740 [label="maxDocumentationMode = DocumentationMode.None; 789981"];
4741 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 789982"];
4742 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 789983"];
4743 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 789984"];
4744 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 789985"];
4745 [label="currDocumentationMode > maxDocumentationMode 789986"];
4746 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 789987"];
4747 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 789988"];
4748 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 789989"];
4749 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 789990"];
4750 [label="return true; 789991"];
4751 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 789992"];
4752 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 789993"];
4753 [label="return; 789994"];
4754 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 789995"];
4755 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 789996"];
4756 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 789997"];
4757 [label="currDocumentationMode > maxDocumentationMode 789998"];
4758 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 789999"];
4759 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 790000"];
4760 [label="return; 790001"];
4761 [label="Debug.Assert(_indentDepth >= 0); 790002"];
4762 [label="Unindent(); 790003"];
4763 [label="WriteLine('</members>'); 790004"];
4764 [label="WriteLine('</members>') 790005"];
4765 [label="param WriteLine(string message) 790006"];
4766 [label="param WriteLine(this) 790007"];
4767 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 790008"];
4768 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 790009"];
4769 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 790010"];
4770 [label="Unindent(); 790011"];
4771 [label="WriteLine('</doc>'); 790012"];
4772 [label="WriteLine('</doc>') 790013"];
4773 [label="param WriteLine(string message) 790014"];
4774 [label="param WriteLine(this) 790015"];
4775 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 790016"];
4776 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 790017"];
4777 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 790018"];
4778 [label="Debug.Assert(compiler._indentDepth == 0); 790019"];
4779 [label="Debug.Assert(compiler._indentDepth == 0); 790020"];
4780 [label="writer?.Flush(); 790021"];
4781 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 790022"];
4782 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 790023"];
4783 [label="compilation.SyntaxTrees 790024"];
4784 [label="_syntaxAndDeclarations.GetLazyState() 790025"];
4785 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790026"];
4786 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 790027"];
4787 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 790028"];
4788 [label="param ReportUnprocessed(CancellationToken cancellationToken) 790029"];
4789 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 790030"];
4790 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 790031"];
4791 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 790032"];
4792 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken) 790033"];
4793 [label="param ReportUnusedImports(SyntaxTree? filterTree) 790034"];
4794 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 790035"];
4795 [label="param ReportUnusedImports(CancellationToken cancellationToken) 790036"];
4796 [label="param ReportUnusedImports(this) 790037"];
4797 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 790038"];
4798 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 790039"];
4799 [label="CompleteTrees(filterTree); 790040"];
4800 [label="CompleteTrees(filterTree) 790041"];
4801 [label="param CompleteTrees(SyntaxTree? filterTree) 790042"];
4802 [label="param CompleteTrees(this) 790043"];
4803 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 790044"];
4804 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 790045"];
4805 [label="CompleteTrees(filterTree); 790046"];
4806 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 790047"];
4807 [label="builder.AddRangeAndFree(methodBodyDiagnostics); 790048"];
4808 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 790049"];
4809 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 790050"];
4810 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 790051"];
4811 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 790052"];
4812 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 790053"];
4813 [label="diagnostics.Verify(expected); 790054"];
4814 [label="diagnostics.Verify(expected) 790055"];
4815 [label="param Verify(params DiagnosticDescription[] expected) 790056"];
4816 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 790057"];
4817 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 790058"];
4818 [label="param Verify(params DiagnosticDescription[] expected) 790059"];
4819 [label="Verify(actual, expected, errorCodeOnly: false); 790060"];
4820 [label="Verify(actual, expected, errorCodeOnly: false); 790061"];
4821 [label="Verify(actual, expected, errorCodeOnly: false) 790062"];
4822 [label="param Verify(DiagnosticDescription[] expected) 790063"];
4823 [label="param Verify(bool errorCodeOnly) 790064"];
4824 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 790065"];
4825 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 790066"];
4826 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 790067"];
4827 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 790068"];
4828 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 790069"];
4829 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 790070"];
4830 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 790071"];
4831 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 790072"];
4832 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 790073"];
4833 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 790074"];
4834 [label="DiagnosticDescription.GetAssertText(expected, actual) 790075"];
4835 [label="param GetAssertText(DiagnosticDescription[] expected) 790076"];
4836 [label="const int CSharp = 1; 790077"];
4837 [label="const int VisualBasic = 2; 790078"];
4838 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 790079"];
4839 [label="int indentDepth = (language == CSharp) ? 4 : 1; 790080"];
4840 [label="(language == CSharp) 790081"];
4841 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 790082"];
4842 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 790083"];
4843 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 790084"];
4844 [label="IsSortedOrEmpty(expected) 790085"];
4845 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 790086"];
4846 [label="var comparer = LinePositionComparer.Instance; 790087"];
4847 [label="DiagnosticDescription last = null; 790088"];
4848 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 790089"];
4849 [label="return true; 790090"];
4850 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 790091"];
4851 [label="Sort(actual) 790092"];
4852 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 790093"];
4853 [label="return diagnostics.OrderBy(d => d.Location.GetMappedLineSpan().StartLinePosition, LinePositionComparer.Instance); 790094"];
4854 [label="var assertText = new StringBuilder(); 790095"];
4855 [label="assertText.AppendLine(); 790096"];
4856 [label="int i; 790097"];
4857 [label="assertText.AppendLine('Expected:'); 790098"];
4858 [label="assertText.AppendLine('Expected:'); 790099"];
4859 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 790100"];
4860 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 790101"];
4861 [label="GetCommaSeparatedLines(assertText, expectedText); 790102"];
4862 [label="GetCommaSeparatedLines(assertText, expectedText); 790103"];
4863 [label="GetCommaSeparatedLines(assertText, expectedText) 790104"];
4864 [label="param GetCommaSeparatedLines(StringBuilder sb) 790105"];
4865 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 790106"];
4866 [label="int n = lines.Count; 790107"];
4867 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 790108"];
4868 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 790109"];
4869 [label="GetCommaSeparatedLines(assertText, expectedText); 790110"];
4870 [label="assertText.AppendLine('Actual:'); 790111"];
4871 [label="assertText.AppendLine('Actual:'); 790112"];
4872 [label="var actualText = ArrayBuilder<string>.GetInstance(); 790113"];
4873 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 790114"];
4874 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 790115"];
4875 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 790116"];
4876 [label="assertText.AppendLine('Diff:'); 790117"];
4877 [label="assertText.AppendLine('Diff:'); 790118"];
4878 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 790119"];
4879 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 790120"];
4880 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 790121"];
4881 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 790122"];
4882 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 790123"];
4883 [label="param DiffReport(IEnumerable<T> expected) 790124"];
4884 [label="param DiffReport(IEnumerable<T> actual) 790125"];
4885 [label="param DiffReport(string separator) 790126"];
4886 [label="param DiffReport(IEqualityComparer<T> comparer = null) 790127"];
4887 [label="param DiffReport(Func<T, string> toString = null) 790128"];
4888 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 790129"];
4889 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 790130"];
4890 [label="(comparer != null) 790131"];
4891 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 790132"];
4892 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 790133"];
4893 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 790134"];
4894 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 790135"];
4895 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 790136"];
4896 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 790137"];
4897 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 790138"];
4898 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 790139"];
4899 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 790140"];
4900 [label="lcs.CalculateDiff(expectedList, actualList, toString) 790141"];
4901 [label="param CalculateDiff(IList<T> sequenceA) 790142"];
4902 [label="param CalculateDiff(IList<T> sequenceB) 790143"];
4903 [label="param CalculateDiff(Func<T, string> toString) 790144"];
4904 [label="param CalculateDiff(this) 790145"];
4905 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 790146"];
4906 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 790147"];
4907 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 790148"];
4908 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 790149"];
4909 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 790150"];
4910 [label="param GetEdits(TSequence sequenceA) 790151"];
4911 [label="param GetEdits(int lengthA) 790152"];
4912 [label="param GetEdits(TSequence sequenceB) 790153"];
4913 [label="param GetEdits(int lengthB) 790154"];
4914 [label="param GetEdits(this) 790155"];
4915 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 790156"];
4916 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 790157"];
4917 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 790158"];
4918 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 790159"];
4919 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 790160"];
4920 [label="param ComputeCostMatrix(TSequence sequenceA) 790161"];
4921 [label="param ComputeCostMatrix(int lengthA) 790162"];
4922 [label="param ComputeCostMatrix(TSequence sequenceB) 790163"];
4923 [label="param ComputeCostMatrix(int lengthB) 790164"];
4924 [label="param ComputeCostMatrix(this) 790165"];
4925 [label="var la = lengthA + 1; 790166"];
4926 [label="var la = lengthA + 1; 790167"];
4927 [label="var lb = lengthB + 1; 790168"];
4928 [label="var lb = lengthB + 1; 790169"];
4929 [label="var d = new int[la, lb]; 790170"];
4930 [label="d[0, 0] = 0; 790171"];
4931 [label="d[0, 0] 790172"];
4932 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 790173"];
4933 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 790174"];
4934 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 790175"];
4935 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 790176"];
4936 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 790177"];
4937 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 790178"];
4938 [label="return d; 790179"];
4939 [label="int i = lengthA; 790180"];
4940 [label="int j = lengthB; 790181"];
4941 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 790182"];
4942 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 790183"];
4943 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 790184"];
4944 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 790185"];
4945 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 790186"];
4946 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 790187"];
4947 [label="param GetEdits(this) 790188"];
4948 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 790189"];
4949 [label="param CalculateDiff(this) 790190"];
4950 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 790191"];
4951 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 790192"];
4952 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 790193"];
4953 [label="actualText.Free(); 790194"];
4954 [label="expectedText.Free(); 790195"];
4955 [label="return assertText.ToString(); 790196"];
4956 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 790197"];
4957 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 790198"];
4958 [label="diagnostics.Verify(expected); 790199"];
4959 [label="VerifyAssemblyIds(c, diagnostics) 790200"];
4960 [label="VerifyAssemblyIds(c, diagnostics); 790201"];
4961 [label="return c; 790202"];
4962 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('\\'решения.X\\'')); 790203"];
4963 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('\\'решения.X\\'')); 790204"];
4964 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('\\'решения.X\\'')); 790205"];
4965 [label="CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('\\'решения.X\\'')) 790206"];
4966 [label="param operator(string source) 790207"];
4967 [label="source 790208"];
4968 [label="new CSharpTestSource(source) 790209"];
4969 [label="param CSharpTestSource(object value) 790210"];
4970 [label="param CSharpTestSource(this) 790211"];
4971 [label="Value 790212"];
4972 [label="compilation = CreateCompilation(source, options: TestOptions.ReleaseExe.WithMainTypeName('\\'решения.X\\'')); 790213"];
4973 [label="param CreateCompilation(CSharpTestSource source) 790214"];
4974 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 790215"];
4975 [label="param CreateCompilation(CSharpCompilationOptions options = null) 790216"];
4976 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 790217"];
4977 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 790218"];
4978 [label="param CreateCompilation(string assemblyName = '') 790219"];
4979 [label="param CreateCompilation(string sourceFileName = '') 790220"];
4980 [label="param CreateCompilation(bool skipUsesIsNullable = false) 790221"];
4981 [label="source 790222"];
4982 [label="targetFramework 790223"];
4983 [label="references 790224"];
4984 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 790225"];
4985 [label="param GetReferences(TargetFramework tf) 790226"];
4986 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 790227"];
4987 [label="var references = GetReferences(tf); 790228"];
4988 [label="GetReferences(tf) 790229"];
4989 [label="param GetReferences(TargetFramework targetFramework) 790230"];
4990 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 790231"];
4991 [label="StandardReferences 790232"];
4992 [label="RuntimeUtilities.IsCoreClrRuntime 790233"];
4993 [label="Mscorlib46ExtendedReferences 790234"];
4994 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 790235"];
4995 [label="TestBase.ValueTupleRef 790236"];
4996 [label="TestReferences.NetFx.ValueTuple.tuplelib 790237"];
4997 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 790238"];
4998 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 790239"];
4999 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 790240"];
5000 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 790241"];
5001 [label="parseOptions 790242"];
5002 [label="assemblyName 790243"];
5003 [label="sourceFileName 790244"];
5004 [label="skipUsesIsNullable 790245"];
5005 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 790246"];
5006 [label="param CreateEmptyCompilation(CSharpTestSource source) 790247"];
5007 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 790248"];
5008 [label="param CreateEmptyCompilation(string assemblyName = '') 790249"];
5009 [label="param CreateEmptyCompilation(string sourceFileName = '') 790250"];
5010 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 790251"];
5011 [label="source 790252"];
5012 [label="parseOptions 790253"];
5013 [label="assemblyName 790254"];
5014 [label="sourceFileName 790255"];
5015 [label="skipUsesIsNullable 790256"];
5016 [label="null 790257"];
5017 [label="experimentalFeature: null 790258"];
5018 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 790259"];
5019 [label="param CreateCompilationCore(CSharpTestSource source) 790260"];
5020 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 790261"];
5021 [label="param CreateCompilationCore(string assemblyName) 790262"];
5022 [label="param CreateCompilationCore(string sourceFileName) 790263"];
5023 [label="param CreateCompilationCore(bool skipUsesIsNullable) 790264"];
5024 [label="param CreateCompilationCore(MessageID? experimentalFeature) 790265"];
5025 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 790266"];
5026 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 790267"];
5027 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 790268"];
5028 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 790269"];
5029 [label="param GetSyntaxTrees(string sourceFileName = '') 790270"];
5030 [label="param GetSyntaxTrees(this) 790271"];
5031 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 790272"];
5032 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 790273"];
5033 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 790274"];
5034 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 790275"];
5035 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 790276"];
5036 [label="param Parse(string text) 790277"];
5037 [label="param Parse(string filename = '') 790278"];
5038 [label="param Parse(CSharpParseOptions options = null) 790279"];
5039 [label="param Parse(Encoding encoding = null) 790280"];
5040 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 790281"];
5041 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 790282"];
5042 [label="options = TestOptions.Regular; 790283"];
5043 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 790284"];
5044 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 790285"];
5045 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 790286"];
5046 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 790287"];
5047 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 790288"];
5048 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 790289"];
5049 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 790290"];
5050 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 790291"];
5051 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 790292"];
5052 [label="var stream = new MemoryStream(); 790293"];
5053 [label="var root = tree.GetRoot(); 790294"];
5054 [label="var root = tree.GetRoot(); 790295"];
5055 [label="root.SerializeTo(stream); 790296"];
5056 [label="root.SerializeTo(stream); 790297"];
5057 [label="root.SerializeTo(stream); 790298"];
5058 [label="stream.Position = 0; 790299"];
5059 [label="stream.Position 790300"];
5060 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 790301"];
5061 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 790302"];
5062 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 790303"];
5063 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 790304"];
5064 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 790305"];
5065 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 790306"];
5066 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 790307"];
5067 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 790308"];
5068 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 790309"];
5069 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 790310"];
5070 [label="param ValidateIOperations(Func<Compilation> createCompilation) 790311"];
5071 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 790312"];
5072 [label="return; 790313"];
5073 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 790314"];
5074 [label="var compilation = createCompilationLambda(); 790315"];
5075 [label="return Guid.NewGuid().ToString('D'); 790316"];
5076 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 790317"];
5077 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 790318"];
5078 [label="param Create(CSharpCompilation? previousSubmission) 790319"];
5079 [label="param Create(Type? returnType) 790320"];
5080 [label="param Create(Type? hostObjectType) 790321"];
5081 [label="param Create(bool isSubmission) 790322"];
5082 [label="RoslynDebug.Assert(options != null); 790323"];
5083 [label="RoslynDebug.Assert(options != null); 790324"];
5084 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 790325"];
5085 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 790326"];
5086 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 790327"];
5087 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 790328"];
5088 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 790329"];
5089 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 790330"];
5090 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 790331"];
5091 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 790332"];
5092 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 790333"];
5093 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 790334"];
5094 [label="param SyntaxAndDeclarationManager(bool isSubmission) 790335"];
5095 [label="param SyntaxAndDeclarationManager(State state) 790336"];
5096 [label="param SyntaxAndDeclarationManager(this) 790337"];
5097 [label="externalSyntaxTrees 790338"];
5098 [label="messageProvider 790339"];
5099 [label="isSubmission 790340"];
5100 [label="param SyntaxAndDeclarationManager(this) 790341"];
5101 [label="_lazyState 790342"];
5102 [label="_lazyState 790343"];
5103 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 790344"];
5104 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 790345"];
5105 [label="param CSharpCompilation(Type? submissionReturnType) 790346"];
5106 [label="param CSharpCompilation(Type? hostObjectType) 790347"];
5107 [label="param CSharpCompilation(bool isSubmission) 790348"];
5108 [label="param CSharpCompilation(ReferenceManager? referenceManager) 790349"];
5109 [label="param CSharpCompilation(bool reuseReferenceManager) 790350"];
5110 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 790351"];
5111 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 790352"];
5112 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 790353"];
5113 [label="param CSharpCompilation(this) 790354"];
5114 [label="previousSubmission 790355"];
5115 [label="submissionReturnType 790356"];
5116 [label="hostObjectType 790357"];
5117 [label="isSubmission 790358"];
5118 [label="referenceManager 790359"];
5119 [label="reuseReferenceManager 790360"];
5120 [label="syntaxAndDeclarations 790361"];
5121 [label="semanticModelProvider 790362"];
5122 [label="eventQueue 790363"];
5123 [label="param CSharpCompilation(this) 790364"];
5124 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 790365"];
5125 [label="param CSharpCompilation(Type? submissionReturnType) 790366"];
5126 [label="param CSharpCompilation(Type? hostObjectType) 790367"];
5127 [label="param CSharpCompilation(bool isSubmission) 790368"];
5128 [label="param CSharpCompilation(ReferenceManager? referenceManager) 790369"];
5129 [label="param CSharpCompilation(bool reuseReferenceManager) 790370"];
5130 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 790371"];
5131 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 790372"];
5132 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 790373"];
5133 [label="param CSharpCompilation(this) 790374"];
5134 [label="isSubmission 790375"];
5135 [label="semanticModelProvider 790376"];
5136 [label="eventQueue 790377"];
5137 [label="param CSharpCompilation(this) 790378"];
5138 [label="_options 790379"];
5139 [label="_globalImports 790380"];
5140 [label="_previousSubmissionImports 790381"];
5141 [label="_globalNamespaceAlias 790382"];
5142 [label="_scriptClass 790383"];
5143 [label="_lazyHostObjectTypeSymbol 790384"];
5144 [label="_lazyImportInfos 790385"];
5145 [label="_conversions 790386"];
5146 [label="_anonymousTypeManager 790387"];
5147 [label="_lazyGlobalNamespace 790388"];
5148 [label="builtInOperators 790389"];
5149 [label="_lazyAssemblySymbol 790390"];
5150 [label="_referenceManager 790391"];
5151 [label="_syntaxAndDeclarations 790392"];
5152 [label="_lazyEntryPoint 790393"];
5153 [label="_lazyEmitNullablePublicOnly 790394"];
5154 [label="_lazyCompilationUnitCompletedTrees 790395"];
5155 [label="NullableAnalysisData 790396"];
5156 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 790397"];
5157 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 790398"];
5158 [label="_externAliasTargets 790399"];
5159 [label="_moduleInitializerMethods 790400"];
5160 [label="_binderFactories 790401"];
5161 [label="_ignoreAccessibilityBinderFactories 790402"];
5162 [label="_lazyDeclarationDiagnostics 790403"];
5163 [label="_declarationDiagnosticsFrozen 790404"];
5164 [label="new DiagnosticBag() 790405"];
5165 [label="_additionalCodegenWarnings = new DiagnosticBag() 790406"];
5166 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 790407"];
5167 [label="this.builtInOperators = new BuiltInOperators(this); 790408"];
5168 [label="this.builtInOperators = new BuiltInOperators(this); 790409"];
5169 [label="new BuiltInOperators(this) 790410"];
5170 [label="param BuiltInOperators(CSharpCompilation compilation) 790411"];
5171 [label="param BuiltInOperators(this) 790412"];
5172 [label="_compilation 790413"];
5173 [label="_builtInUnaryOperators 790414"];
5174 [label="_builtInOperators 790415"];
5175 [label="_compilation 790416"];
5176 [label="this.builtInOperators 790417"];
5177 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 790418"];
5178 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 790419"];
5179 [label="LanguageVersion? result = null; 790420"];
5180 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 790421"];
5181 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 790422"];
5182 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 790423"];
5183 [label="this.LanguageVersion 790424"];
5184 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 790425"];
5185 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790426"];
5186 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790427"];
5187 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790428"];
5188 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790429"];
5189 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790430"];
5190 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790431"];
5191 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 790432"];
5192 [label="this.Options 790433"];
5193 [label="get\n            {\n                return _options;\n            } 790434"];
5194 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 790435"];
5195 [label="_syntaxAndDeclarations 790436"];
5196 [label="Debug.Assert(_lazyAssemblySymbol is null); 790437"];
5197 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 790438"];
5198 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 790439"];
5199 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 790440"];
5200 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 790441"];
5201 [label="int i = 0; 790442"];
5202 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 790443"];
5203 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 790444"];
5204 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 790445"];
5205 [label="i++; 790446"];
5206 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 790447"];
5207 [label="var scriptClassName = this.ScriptClassName; 790448"];
5208 [label="var resolver = this.Resolver; 790449"];
5209 [label="var messageProvider = this.MessageProvider; 790450"];
5210 [label="var isSubmission = this.IsSubmission; 790451"];
5211 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 790452"];
5212 [label="param CSharpCompilation(Type? submissionReturnType) 790453"];
5213 [label="param CSharpCompilation(Type? hostObjectType) 790454"];
5214 [label="previousSubmission 790455"];
5215 [label="submissionReturnType 790456"];
5216 [label="hostObjectType 790457"];
5217 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 790458"];
5218 [label="param CSharpCompilation(Type? submissionReturnType) 790459"];
5219 [label="param CSharpCompilation(Type? hostObjectType) 790460"];
5220 [label="_compilation 790461"];
5221 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 790462"];
5222 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790463"];
5223 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790464"];
5224 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790465"];
5225 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790466"];
5226 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790467"];
5227 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 790468"];
5228 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 790469"];
5229 [label="Debug.Assert(_lazyAssemblySymbol is null); 790470"];
5230 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 790471"];
5231 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 790472"];
5232 [label="IsNullableEnabled(compilation) 790473"];
5233 [label="compilation.SyntaxTrees 790474"];
5234 [label="_syntaxAndDeclarations.GetLazyState() 790475"];
5235 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790476"];
5236 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 790477"];
5237 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 790478"];
5238 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 790479"];
5239 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 790480"];
5240 [label="var sourceCodeKind = tree.Options.Kind; 790481"];
5241 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 790482"];
5242 [label="OrdinalMap 790483"];
5243 [label="LoadDirectiveMap 790484"];
5244 [label="LoadedSyntaxTreeMap 790485"];
5245 [label="RootNamespaces 790486"];
5246 [label="DeclarationTable 790487"];
5247 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 790488"];
5248 [label="var options = (CSharpParseOptions)trees[0].Options; 790489"];
5249 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 790490"];
5250 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 790491"];
5251 [label="compilation.VerifyDiagnostics(Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'решения.X\\'')); 790492"];
5252 [label="compilation.VerifyDiagnostics(Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'решения.X\\'')); 790493"];
5253 [label="compilation.VerifyDiagnostics(Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'решения.X\\'')); 790494"];
5254 [label="Diagnostic(ErrorCode.ERR_MainClassNotFound) 790495"];
5255 [label="param Diagnostic(object code) 790496"];
5256 [label="param Diagnostic(string squiggledText = null) 790497"];
5257 [label="param Diagnostic(object[] arguments = null) 790498"];
5258 [label="param Diagnostic(LinePosition? startLocation = null) 790499"];
5259 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 790500"];
5260 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 790501"];
5261 [label="param Diagnostic(bool isSuppressed = false) 790502"];
5262 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 790503"];
5263 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 790504"];
5264 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 790505"];
5265 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 790506"];
5266 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 790507"];
5267 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 790508"];
5268 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 790509"];
5269 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 790510"];
5270 [label="param Diagnostic(object code) 790511"];
5271 [label="param Diagnostic(string squiggledText = null) 790512"];
5272 [label="param Diagnostic(object[] arguments = null) 790513"];
5273 [label="param Diagnostic(LinePosition? startLocation = null) 790514"];
5274 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 790515"];
5275 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 790516"];
5276 [label="param Diagnostic(bool isSuppressed = false) 790517"];
5277 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 790518"];
5278 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 790519"];
5279 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 790520"];
5280 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 790521"];
5281 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 790522"];
5282 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 790523"];
5283 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 790524"];
5284 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 790525"];
5285 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 790526"];
5286 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 790527"];
5287 [label="param DiagnosticDescription(object code) 790528"];
5288 [label="param DiagnosticDescription(bool isWarningAsError) 790529"];
5289 [label="param DiagnosticDescription(string squiggledText) 790530"];
5290 [label="param DiagnosticDescription(object[] arguments) 790531"];
5291 [label="param DiagnosticDescription(LinePosition? startLocation) 790532"];
5292 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 790533"];
5293 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 790534"];
5294 [label="param DiagnosticDescription(Type errorCodeType = null) 790535"];
5295 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 790536"];
5296 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 790537"];
5297 [label="param DiagnosticDescription(bool isSuppressed = false) 790538"];
5298 [label="param DiagnosticDescription(this) 790539"];
5299 [label="_code 790540"];
5300 [label="_isWarningAsError 790541"];
5301 [label="_isSuppressed 790542"];
5302 [label="_squiggledText 790543"];
5303 [label="_arguments 790544"];
5304 [label="_startPosition 790545"];
5305 [label="_argumentOrderDoesNotMatter 790546"];
5306 [label="_errorCodeType 790547"];
5307 [label="_ignoreArgumentsWhenComparing 790548"];
5308 [label="_defaultSeverityOpt 790549"];
5309 [label="_effectiveSeverityOpt 790550"];
5310 [label="_syntaxPredicate 790551"];
5311 [label="_showPredicate 790552"];
5312 [label="_location 790553"];
5313 [label="_argumentsAsStrings 790554"];
5314 [label="_code 790555"];
5315 [label="_isWarningAsError 790556"];
5316 [label="_squiggledText 790557"];
5317 [label="_arguments 790558"];
5318 [label="_startPosition 790559"];
5319 [label="_syntaxPredicate 790560"];
5320 [label="_argumentOrderDoesNotMatter 790561"];
5321 [label="_errorCodeType = errorCodeType ?? code.GetType(); 790562"];
5322 [label="_errorCodeType 790563"];
5323 [label="_defaultSeverityOpt 790564"];
5324 [label="_effectiveSeverityOpt 790565"];
5325 [label="_isSuppressed 790566"];
5326 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 790567"];
5327 [label="compilation.VerifyDiagnostics(Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'решения.X\\'')); 790568"];
5328 [label="Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'решения.X\\'') 790569"];
5329 [label="Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'решения.X\\'') 790570"];
5330 [label="param WithArguments(params object[] arguments) 790571"];
5331 [label="param WithArguments(this) 790572"];
5332 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 790573"];
5333 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 790574"];
5334 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 790575"];
5335 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 790576"];
5336 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 790577"];
5337 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 790578"];
5338 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 790579"];
5339 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 790580"];
5340 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 790581"];
5341 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 790582"];
5342 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 790583"];
5343 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 790584"];
5344 [label="param DiagnosticDescription(object code) 790585"];
5345 [label="param DiagnosticDescription(bool isWarningAsError) 790586"];
5346 [label="param DiagnosticDescription(string squiggledText) 790587"];
5347 [label="param DiagnosticDescription(object[] arguments) 790588"];
5348 [label="param DiagnosticDescription(LinePosition? startLocation) 790589"];
5349 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 790590"];
5350 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 790591"];
5351 [label="param DiagnosticDescription(Type errorCodeType = null) 790592"];
5352 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 790593"];
5353 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 790594"];
5354 [label="param DiagnosticDescription(bool isSuppressed = false) 790595"];
5355 [label="param DiagnosticDescription(this) 790596"];
5356 [label="_code 790597"];
5357 [label="_isWarningAsError 790598"];
5358 [label="_isSuppressed 790599"];
5359 [label="_squiggledText 790600"];
5360 [label="_arguments 790601"];
5361 [label="_startPosition 790602"];
5362 [label="_argumentOrderDoesNotMatter 790603"];
5363 [label="_errorCodeType 790604"];
5364 [label="_ignoreArgumentsWhenComparing 790605"];
5365 [label="_defaultSeverityOpt 790606"];
5366 [label="_effectiveSeverityOpt 790607"];
5367 [label="_syntaxPredicate 790608"];
5368 [label="_showPredicate 790609"];
5369 [label="_location 790610"];
5370 [label="_argumentsAsStrings 790611"];
5371 [label="_arguments 790612"];
5372 [label="_argumentOrderDoesNotMatter 790613"];
5373 [label="compilation.VerifyDiagnostics(Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'решения.X\\'')); 790614"];
5374 [label="compilation.VerifyDiagnostics(Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'решения.X\\'')) 790615"];
5375 [label="compilation.VerifyDiagnostics(Diagnostic(ErrorCode.ERR_MainClassNotFound).WithArguments('\\'решения.X\\'')) 790616"];
5376 [label="param VerifyDiagnostics(this TCompilation c) 790617"];
5377 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 790618"];
5378 [label="var diagnostics = c.GetDiagnostics(); 790619"];
5379 [label="c.GetDiagnostics() 790620"];
5380 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 790621"];
5381 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 790622"];
5382 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 790623"];
5383 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 790624"];
5384 [label="GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken) 790625"];
5385 [label="param GetDiagnostics(CompilationStage stage) 790626"];
5386 [label="param GetDiagnostics(bool includeEarlierStages) 790627"];
5387 [label="param GetDiagnostics(CancellationToken cancellationToken) 790628"];
5388 [label="var diagnostics = DiagnosticBag.GetInstance(); 790629"];
5389 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 790630"];
5390 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 790631"];
5391 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 790632"];
5392 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 790633"];
5393 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 790634"];
5394 [label="param GetDiagnostics(CompilationStage stage) 790635"];
5395 [label="param GetDiagnostics(bool includeEarlierStages) 790636"];
5396 [label="param GetDiagnostics(DiagnosticBag diagnostics) 790637"];
5397 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 790638"];
5398 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 790639"];
5399 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 790640"];
5400 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 790641"];
5401 [label="this.SyntaxTrees 790642"];
5402 [label="_syntaxAndDeclarations.GetLazyState() 790643"];
5403 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790644"];
5404 [label="this.Options 790645"];
5405 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 790646"];
5406 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 790647"];
5407 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 790648"];
5408 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 790649"];
5409 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 790650"];
5410 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 790651"];
5411 [label="CheckAssemblyName(builder); 790652"];
5412 [label="CheckAssemblyName(builder); 790653"];
5413 [label="Options 790654"];
5414 [label="Options 790655"];
5415 [label="get\n            {\n                return _options;\n            } 790656"];
5416 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 790657"];
5417 [label="GetBoundReferenceManager() 790658"];
5418 [label="Debug.Assert(_lazyAssemblySymbol is object); 790659"];
5419 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 790660"];
5420 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 790661"];
5421 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 790662"];
5422 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 790663"];
5423 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 790664"];
5424 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 790665"];
5425 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 790666"];
5426 [label="GlobalImports 790667"];
5427 [label="_globalImports.Value 790668"];
5428 [label="Imports.FromGlobalUsings(this) 790669"];
5429 [label="GlobalImports.Complete(cancellationToken); 790670"];
5430 [label="SourceLocation? location = null; 790671"];
5431 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 790672"];
5432 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 790673"];
5433 [label="Assembly 790674"];
5434 [label="SourceAssembly 790675"];
5435 [label="GetBoundReferenceManager() 790676"];
5436 [label="GetBoundReferenceManager(); 790677"];
5437 [label="Assembly.ForceComplete(location, cancellationToken); 790678"];
5438 [label="Assembly.ForceComplete(location, cancellationToken); 790679"];
5439 [label="Assembly.ForceComplete(location, cancellationToken); 790680"];
5440 [label="Declarations 790681"];
5441 [label="_syntaxAndDeclarations.GetLazyState() 790682"];
5442 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790683"];
5443 [label="return Declarations.GetMergedRoot(this); 790684"];
5444 [label="_syntaxAndDeclarations.GetLazyState() 790685"];
5445 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790686"];
5446 [label="SourceAssembly 790687"];
5447 [label="GetBoundReferenceManager() 790688"];
5448 [label="GetBoundReferenceManager(); 790689"];
5449 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 790690"];
5450 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 790691"];
5451 [label="param SymbolDeclaredEvent(Symbol symbol) 790692"];
5452 [label="param SymbolDeclaredEvent(this) 790693"];
5453 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 790694"];
5454 [label="GetBoundReferenceManager() 790695"];
5455 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 790696"];
5456 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 790697"];
5457 [label="NamedTypeSymbol result; 790698"];
5458 [label="GetBoundReferenceManager(); 790699"];
5459 [label="Debug.Assert(result.SpecialType == specialType); 790700"];
5460 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 790701"];
5461 [label="GetBinderFactory(syntax.SyntaxTree) 790702"];
5462 [label="param GetBinderFactory(bool ignoreAccessibility = false) 790703"];
5463 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 790704"];
5464 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 790705"];
5465 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 790706"];
5466 [label="param GetBinderFactory(bool ignoreAccessibility) 790707"];
5467 [label="ignoreAccessibility 790708"];
5468 [label="GetSyntaxTreeOrdinal(syntaxTree) 790709"];
5469 [label="this.ContainsSyntaxTree(tree) 790710"];
5470 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 790711"];
5471 [label="_syntaxAndDeclarations.GetLazyState() 790712"];
5472 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790713"];
5473 [label="_syntaxAndDeclarations.GetLazyState() 790714"];
5474 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790715"];
5475 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 790716"];
5476 [label="BinderFactory? previousFactory; 790717"];
5477 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 790718"];
5478 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 790719"];
5479 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 790720"];
5480 [label="param AddNewFactory(bool ignoreAccessibility) 790721"];
5481 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 790722"];
5482 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 790723"];
5483 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 790724"];
5484 [label="BinderFactory? previousFactory; 790725"];
5485 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 790726"];
5486 [label="Assembly 790727"];
5487 [label="SourceAssembly 790728"];
5488 [label="GetBoundReferenceManager() 790729"];
5489 [label="GetBoundReferenceManager(); 790730"];
5490 [label="return Assembly.Modules[0]; 790731"];
5491 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 790732"];
5492 [label="GetNullableAnalysisValue() 790733"];
5493 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 790734"];
5494 [label="Options 790735"];
5495 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 790736"];
5496 [label="param GetBinderFactory(bool ignoreAccessibility = false) 790737"];
5497 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 790738"];
5498 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 790739"];
5499 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 790740"];
5500 [label="param GetBinderFactory(bool ignoreAccessibility) 790741"];
5501 [label="ignoreAccessibility 790742"];
5502 [label="GetSyntaxTreeOrdinal(syntaxTree) 790743"];
5503 [label="this.ContainsSyntaxTree(tree) 790744"];
5504 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 790745"];
5505 [label="_syntaxAndDeclarations.GetLazyState() 790746"];
5506 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790747"];
5507 [label="_syntaxAndDeclarations.GetLazyState() 790748"];
5508 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790749"];
5509 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 790750"];
5510 [label="BinderFactory? previousFactory; 790751"];
5511 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 790752"];
5512 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 790753"];
5513 [label="return previousFactory; 790754"];
5514 [label="compilation.SyntaxTrees 790755"];
5515 [label="_syntaxAndDeclarations.GetLazyState() 790756"];
5516 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 790757"];
5517 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 790758"];
5518 [label="GetBoundReferenceManager(); 790759"];
5519 [label="Debug.Assert(result.SpecialType == specialType); 790760"];
5520 [label="Debug.Assert(symbol.IsDefinition); 790761"];
5521 [label="SourceModule 790762"];
5522 [label="Assembly 790763"];
5523 [label="SourceAssembly 790764"];
5524 [label="GetBoundReferenceManager() 790765"];
5525 [label="GetBoundReferenceManager(); 790766"];
5526 [label="return Assembly.Modules[0]; 790767"];
5527 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 790768"];
5528 [label="EmitNullablePublicOnly 790769"];
5529 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 790770"];
5530 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 790771"];
5531 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 790772"];
5532 [label="_declarationDiagnosticsFrozen = true; 790773"];
5533 [label="_needsGeneratedAttributes_IsFrozen = true; 790774"];
5534 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 790775"];
5535 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 790776"];
5536 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 790777"];
5537 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 790778"];
5538 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 790779"];
5539 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 790780"];
5540 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 790781"];
5541 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 790782"];
5542 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 790783"];
5543 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 790784"];
5544 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 790785"];
5545 [label="param CheckCompliance(DiagnosticBag diagnostics) 790786"];
5546 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 790787"];
5547 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 790788"];
5548 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 790789"];
5549 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 790790"];
5550 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 790791"];
5551 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 790792"];
5552 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 790793"];
5553 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 790794"];
5554 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 790795"];
5555 [label="param GetDeclaredCompliance(out Location attributeLocation) 790796"];
5556 [label="param GetDeclaredCompliance(this) 790797"];
5557 [label="attributeLocation = null; 790798"];
5558 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 790799"];
5559 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 790800"];
5560 [label="IsTrue(assemblyCompliance) 790801"];
5561 [label="param IsTrue(Compliance compliance) 790802"];
5562 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 790803"];
5563 [label="return false; 790804"];
5564 [label="Location attributeLocation; 790805"];
5565 [label="param GetDeclaredCompliance(out Location attributeLocation) 790806"];
5566 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 790807"];
5567 [label="i == 0 790808"];
5568 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 790809"];
5569 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 790810"];
5570 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 790811"];
5571 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 790812"];
5572 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 790813"];
5573 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 790814"];
5574 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 790815"];
5575 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 790816"];
5576 [label="System.Diagnostics.Debug.Assert((object)containing != null); 790817"];
5577 [label="return compliance; 790818"];
5578 [label="IsTrue(GetInheritedCompliance(symbol)) 790819"];
5579 [label="param IsTrue(Compliance compliance) 790820"];
5580 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 790821"];
5581 [label="return false; 790822"];
5582 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 790823"];
5583 [label="param IsTrue(Compliance compliance) 790824"];
5584 [label="if (DoNotVisit(symbol)) return; 790825"];
5585 [label="DoNotVisit(symbol) 790826"];
5586 [label="param DoNotVisit(Symbol symbol) 790827"];
5587 [label="param DoNotVisit(this) 790828"];
5588 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 790829"];
5589 [label="return false; 790830"];
5590 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 790831"];
5591 [label="param IsTrue(Compliance compliance) 790832"];
5592 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 790833"];
5593 [label="return false; 790834"];
5594 [label="if (tasks == null)\n            {\n                return;\n            } 790835"];
5595 [label="checker.WaitForWorkers(); 790836"];
5596 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 790837"];
5597 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 790838"];
5598 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 790839"];
5599 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 790840"];
5600 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 790841"];
5601 [label="var methodBodyDiagnostics = DiagnosticBag.GetInstance(); 790842"];
5602 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 790843"];
5603 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 790844"];
5604 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken) 790845"];
5605 [label="param GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics) 790846"];
5606 [label="param GetDiagnosticsForAllMethodBodies(CancellationToken cancellationToken) 790847"];
5607 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 790848"];
5608 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 790849"];
5609 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 790850"];
5610 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken) 790851"];
5611 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 790852"];
5612 [label="param CompileMethodBodies(bool emittingPdb) 790853"];
5613 [label="param CompileMethodBodies(bool emitTestCoverageData) 790854"];
5614 [label="param CompileMethodBodies(bool hasDeclarationErrors) 790855"];
5615 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 790856"];
5616 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 790857"];
5617 [label="param CompileMethodBodies(CancellationToken cancellationToken) 790858"];
5618 [label="Debug.Assert(compilation != null); 790859"];
5619 [label="Debug.Assert(compilation != null); 790860"];
5620 [label="Debug.Assert(diagnostics != null); 790861"];
5621 [label="Debug.Assert(diagnostics != null); 790862"];
5622 [label="compilation.PreviousSubmission 790863"];
5623 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 790864"];
5624 [label="ScriptCompilationInfo 790865"];
5625 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 790866"];
5626 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 790867"];
5627 [label="MethodSymbol entryPoint = null; 790868"];
5628 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 790869"];
5629 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 790870"];
5630 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 790871"];
5631 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 790872"];
5632 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 790873"];
5633 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 790874"];
5634 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 790875"];
5635 [label="param GetEntryPoint(bool hasDeclarationErrors) 790876"];
5636 [label="param GetEntryPoint(DiagnosticBag diagnostics) 790877"];
5637 [label="param GetEntryPoint(CancellationToken cancellationToken) 790878"];
5638 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 790879"];
5639 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 790880"];
5640 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 790881"];
5641 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 790882"];
5642 [label="EntryPoint? entryPoint; 790883"];
5643 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 790884"];
5644 [label="ImmutableArray<Diagnostic> diagnostics; 790885"];
5645 [label="diagnostics 790886"];
5646 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 790887"];
5647 [label="param FindEntryPoint(MethodSymbol? simpleProgramEntryPointSymbol) 790888"];
5648 [label="param FindEntryPoint(CancellationToken cancellationToken) 790889"];
5649 [label="param FindEntryPoint(out ImmutableArray<Diagnostic> sealedDiagnostics) 790890"];
5650 [label="NamedTypeSymbol? mainType; 790891"];
5651 [label="var scriptClass = this.ScriptClass; 790892"];
5652 [label="if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    } 790893"];
5653 [label="MethodSymbol 790894"];
5654 [label="this.Options 790895"];
5655 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 790896"];
5656 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 790897"];
5657 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 790898"];
5658 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 790899"];
5659 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 790900"];
5660 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 790901"];
5661 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 790902"];
5662 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 790903"];
5663 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 790904"];
5664 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 790905"];
5665 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 790906"];
5666 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 790907"];
5667 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 790908"];
5668 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 790909"];
5669 [label="param MethodCompiler(bool emittingPdb) 790910"];
5670 [label="param MethodCompiler(bool emitTestCoverageData) 790911"];
5671 [label="param MethodCompiler(bool hasDeclarationErrors) 790912"];
5672 [label="param MethodCompiler(DiagnosticBag diagnostics) 790913"];
5673 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 790914"];
5674 [label="param MethodCompiler(CancellationToken cancellationToken) 790915"];
5675 [label="param MethodCompiler(this) 790916"];
5676 [label="param MethodCompiler(this) 790917"];
5677 [label="_compilation 790918"];
5678 [label="_emittingPdb 790919"];
5679 [label="_emitTestCoverageData 790920"];
5680 [label="_diagnostics 790921"];
5681 [label="_hasDeclarationErrors 790922"];
5682 [label="_moduleBeingBuiltOpt 790923"];
5683 [label="_filterOpt 790924"];
5684 [label="_debugDocumentProvider 790925"];
5685 [label="_entryPointOpt 790926"];
5686 [label="_compilerTasks 790927"];
5687 [label="_globalHasErrors 790928"];
5688 [label="Debug.Assert(compilation != null); 790929"];
5689 [label="Debug.Assert(compilation != null); 790930"];
5690 [label="Debug.Assert(diagnostics != null); 790931"];
5691 [label="Debug.Assert(diagnostics != null); 790932"];
5692 [label="_moduleBeingBuiltOpt 790933"];
5693 [label="_emittingPdb 790934"];
5694 [label="_cancellationToken 790935"];
5695 [label="_diagnostics 790936"];
5696 [label="_filterOpt 790937"];
5697 [label="_hasDeclarationErrors 790938"];
5698 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 790939"];
5699 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 790940"];
5700 [label="param SetGlobalErrorIfTrue(bool arg) 790941"];
5701 [label="param SetGlobalErrorIfTrue(this) 790942"];
5702 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 790943"];
5703 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 790944"];
5704 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 790945"];
5705 [label="_emitTestCoverageData 790946"];
5706 [label="compilation.Options 790947"];
5707 [label="compilation.SourceModule 790948"];
5708 [label="Assembly 790949"];
5709 [label="SourceAssembly 790950"];
5710 [label="GetBoundReferenceManager() 790951"];
5711 [label="GetBoundReferenceManager(); 790952"];
5712 [label="return Assembly.Modules[0]; 790953"];
5713 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 790954"];
5714 [label="param CompileNamespace(this) 790955"];
5715 [label="param VisitNamespace(TypeCompilationState arg) 790956"];
5716 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 790957"];
5717 [label="PassesFilter(_filterOpt, symbol) 790958"];
5718 [label="param PassesFilter(Predicate<Symbol> filterOpt) 790959"];
5719 [label="param PassesFilter(Symbol symbol) 790960"];
5720 [label="return (filterOpt == null) || filterOpt(symbol); 790961"];
5721 [label="return (filterOpt == null) || filterOpt(symbol); 790962"];
5722 [label="arg = null; 790963"];
5723 [label="param CompileNamespaceAsAsync(NamespaceSymbol symbol) 790964"];
5724 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 790965"];
5725 [label="methodCompiler.WaitForWorkers() 790966"];
5726 [label="param WaitForWorkers(this) 790967"];
5727 [label="if (tasks == null)\n            {\n                return;\n            } 790968"];
5728 [label="if (tasks == null)\n            {\n                return;\n            } 790969"];
5729 [label="Task curTask; 790970"];
5730 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 790971"];
5731 [label="methodCompiler.WaitForWorkers(); 790972"];
5732 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 790973"];
5733 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 790974"];
5734 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 790975"];
5735 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 790976"];
5736 [label="compilation.AdditionalCodegenWarnings 790977"];
5737 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 790978"];
5738 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 790979"];
5739 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 790980"];
5740 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 790981"];
5741 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 790982"];
5742 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 790983"];
5743 [label="param WarnUnusedFields(CancellationToken cancellationToken) 790984"];
5744 [label="compilation.Assembly 790985"];
5745 [label="SourceAssembly 790986"];
5746 [label="GetBoundReferenceManager() 790987"];
5747 [label="GetBoundReferenceManager(); 790988"];
5748 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 790989"];
5749 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 790990"];
5750 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 790991"];
5751 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 790992"];
5752 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 790993"];
5753 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 790994"];
5754 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 790995"];
5755 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 790996"];
5756 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken) 790997"];
5757 [label="param WriteDocumentationCommentXml(string? assemblyName) 790998"];
5758 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 790999"];
5759 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 791000"];
5760 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 791001"];
5761 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 791002"];
5762 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 791003"];
5763 [label="StreamWriter writer = null; 791004"];
5764 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 791005"];
5765 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 791006"];
5766 [label="compilation.SourceAssembly 791007"];
5767 [label="GetBoundReferenceManager() 791008"];
5768 [label="GetBoundReferenceManager(); 791009"];
5769 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 791010"];
5770 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 791011"];
5771 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 791012"];
5772 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 791013"];
5773 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 791014"];
5774 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 791015"];
5775 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 791016"];
5776 [label="param DocumentationCommentCompiler(TextWriter writer) 791017"];
5777 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 791018"];
5778 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 791019"];
5779 [label="param DocumentationCommentCompiler(bool processIncludes) 791020"];
5780 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 791021"];
5781 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 791022"];
5782 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 791023"];
5783 [label="param DocumentationCommentCompiler(this) 791024"];
5784 [label="param DocumentationCommentCompiler(this) 791025"];
5785 [label="_assemblyName 791026"];
5786 [label="_compilation 791027"];
5787 [label="_writer 791028"];
5788 [label="_filterTree 791029"];
5789 [label="_filterSpanWithinTree 791030"];
5790 [label="_processIncludes 791031"];
5791 [label="_isForSingleSymbol 791032"];
5792 [label="_diagnostics 791033"];
5793 [label="_lazyComparer 791034"];
5794 [label="_includedFileCache 791035"];
5795 [label="_indentDepth 791036"];
5796 [label="_temporaryStringBuilders 791037"];
5797 [label="_writer 791038"];
5798 [label="_filterTree 791039"];
5799 [label="_filterSpanWithinTree 791040"];
5800 [label="_processIncludes 791041"];
5801 [label="_isForSingleSymbol 791042"];
5802 [label="_diagnostics 791043"];
5803 [label="_cancellationToken 791044"];
5804 [label="compilation.SourceAssembly 791045"];
5805 [label="GetBoundReferenceManager() 791046"];
5806 [label="GetBoundReferenceManager(); 791047"];
5807 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 791048"];
5808 [label="Debug.Assert(_assemblyName != null); 791049"];
5809 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 791050"];
5810 [label="WriteLine('<?xml version=\\'1.0\\'?>') 791051"];
5811 [label="param WriteLine(string message) 791052"];
5812 [label="param WriteLine(this) 791053"];
5813 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791054"];
5814 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791055"];
5815 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791056"];
5816 [label="WriteLine('<doc>'); 791057"];
5817 [label="WriteLine('<doc>') 791058"];
5818 [label="param WriteLine(string message) 791059"];
5819 [label="param WriteLine(this) 791060"];
5820 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791061"];
5821 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791062"];
5822 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791063"];
5823 [label="Indent(); 791064"];
5824 [label="WriteLine('<assembly>'); 791065"];
5825 [label="WriteLine('<assembly>') 791066"];
5826 [label="param WriteLine(string message) 791067"];
5827 [label="param WriteLine(this) 791068"];
5828 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791069"];
5829 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791070"];
5830 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791071"];
5831 [label="Indent(); 791072"];
5832 [label="WriteLine('<name>{0}</name>', _assemblyName); 791073"];
5833 [label="WriteLine('<name>{0}</name>', _assemblyName) 791074"];
5834 [label="WriteLine('<name>{0}</name>', _assemblyName) 791075"];
5835 [label="param WriteLine(string format) 791076"];
5836 [label="param WriteLine(params object[] args) 791077"];
5837 [label="param WriteLine(this) 791078"];
5838 [label="WriteLine(string.Format(format, args)); 791079"];
5839 [label="WriteLine(string.Format(format, args)); 791080"];
5840 [label="WriteLine(string.Format(format, args)); 791081"];
5841 [label="WriteLine(string.Format(format, args)) 791082"];
5842 [label="param WriteLine(string message) 791083"];
5843 [label="param WriteLine(this) 791084"];
5844 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791085"];
5845 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791086"];
5846 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791087"];
5847 [label="WriteLine(string.Format(format, args)); 791088"];
5848 [label="Debug.Assert(_indentDepth >= 0); 791089"];
5849 [label="Unindent(); 791090"];
5850 [label="WriteLine('</assembly>'); 791091"];
5851 [label="WriteLine('</assembly>') 791092"];
5852 [label="param WriteLine(string message) 791093"];
5853 [label="param WriteLine(this) 791094"];
5854 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791095"];
5855 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791096"];
5856 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791097"];
5857 [label="WriteLine('<members>'); 791098"];
5858 [label="WriteLine('<members>') 791099"];
5859 [label="param WriteLine(string message) 791100"];
5860 [label="param WriteLine(this) 791101"];
5861 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791102"];
5862 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791103"];
5863 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791104"];
5864 [label="Indent(); 791105"];
5865 [label="Debug.Assert(!_isForSingleSymbol); 791106"];
5866 [label="Debug.Assert(!_isForSingleSymbol); 791107"];
5867 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 791108"];
5868 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 791109"];
5869 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 791110"];
5870 [label="docCommentNodes 791111"];
5871 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 791112"];
5872 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 791113"];
5873 [label="maxDocumentationMode = DocumentationMode.None; 791114"];
5874 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 791115"];
5875 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 791116"];
5876 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 791117"];
5877 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 791118"];
5878 [label="currDocumentationMode > maxDocumentationMode 791119"];
5879 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 791120"];
5880 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 791121"];
5881 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 791122"];
5882 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 791123"];
5883 [label="return true; 791124"];
5884 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 791125"];
5885 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 791126"];
5886 [label="return; 791127"];
5887 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 791128"];
5888 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 791129"];
5889 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 791130"];
5890 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 791131"];
5891 [label="currDocumentationMode > maxDocumentationMode 791132"];
5892 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 791133"];
5893 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 791134"];
5894 [label="return; 791135"];
5895 [label="Debug.Assert(_indentDepth >= 0); 791136"];
5896 [label="Unindent(); 791137"];
5897 [label="WriteLine('</members>'); 791138"];
5898 [label="WriteLine('</members>') 791139"];
5899 [label="param WriteLine(string message) 791140"];
5900 [label="param WriteLine(this) 791141"];
5901 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791142"];
5902 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791143"];
5903 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791144"];
5904 [label="Unindent(); 791145"];
5905 [label="WriteLine('</doc>'); 791146"];
5906 [label="WriteLine('</doc>') 791147"];
5907 [label="param WriteLine(string message) 791148"];
5908 [label="param WriteLine(this) 791149"];
5909 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791150"];
5910 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791151"];
5911 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 791152"];
5912 [label="Debug.Assert(compiler._indentDepth == 0); 791153"];
5913 [label="Debug.Assert(compiler._indentDepth == 0); 791154"];
5914 [label="writer?.Flush(); 791155"];
5915 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 791156"];
5916 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 791157"];
5917 [label="compilation.SyntaxTrees 791158"];
5918 [label="_syntaxAndDeclarations.GetLazyState() 791159"];
5919 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 791160"];
5920 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 791161"];
5921 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 791162"];
5922 [label="param ReportUnprocessed(CancellationToken cancellationToken) 791163"];
5923 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 791164"];
5924 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 791165"];
5925 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 791166"];
5926 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken) 791167"];
5927 [label="param ReportUnusedImports(SyntaxTree? filterTree) 791168"];
5928 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 791169"];
5929 [label="param ReportUnusedImports(CancellationToken cancellationToken) 791170"];
5930 [label="param ReportUnusedImports(this) 791171"];
5931 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 791172"];
5932 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 791173"];
5933 [label="CompleteTrees(filterTree); 791174"];
5934 [label="CompleteTrees(filterTree) 791175"];
5935 [label="param CompleteTrees(SyntaxTree? filterTree) 791176"];
5936 [label="param CompleteTrees(this) 791177"];
5937 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 791178"];
5938 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 791179"];
5939 [label="CompleteTrees(filterTree); 791180"];
5940 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 791181"];
5941 [label="builder.AddRangeAndFree(methodBodyDiagnostics); 791182"];
5942 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 791183"];
5943 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 791184"];
5944 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 791185"];
5945 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 791186"];
5946 [label="param Filter(int warningLevelOption) 791187"];
5947 [label="param Filter(NullableContextOptions nullableOption) 791188"];
5948 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 791189"];
5949 [label="param Filter(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 791190"];
5950 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 791191"];
5951 [label="param Filter(CancellationToken cancellationToken) 791192"];
5952 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 791193"];
5953 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 791194"];
5954 [label="diagnostics.Verify(expected); 791195"];
5955 [label="diagnostics.Verify(expected) 791196"];
5956 [label="param Verify(params DiagnosticDescription[] expected) 791197"];
5957 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 791198"];
5958 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 791199"];
5959 [label="param Verify(params DiagnosticDescription[] expected) 791200"];
5960 [label="Verify(actual, expected, errorCodeOnly: false); 791201"];
5961 [label="Verify(actual, expected, errorCodeOnly: false); 791202"];
5962 [label="Verify(actual, expected, errorCodeOnly: false) 791203"];
5963 [label="param Verify(DiagnosticDescription[] expected) 791204"];
5964 [label="param Verify(bool errorCodeOnly) 791205"];
5965 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 791206"];
5966 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 791207"];
5967 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 791208"];
5968 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 791209"];
5969 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 791210"];
5970 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 791211"];
5971 [label="=> _defaultSeverityOpt 791212"];
5972 [label="_defaultSeverityOpt 791213"];
5973 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 791214"];
5974 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 791215"];
5975 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 791216"];
5976 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 791217"];
5977 [label="=> _effectiveSeverityOpt 791218"];
5978 [label="_effectiveSeverityOpt 791219"];
5979 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 791220"];
5980 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 791221"];
5981 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 791222"];
5982 [label="_code 791223"];
5983 [label="_isWarningAsError 791224"];
5984 [label="_isSuppressed 791225"];
5985 [label="_arguments 791226"];
5986 [label="_startPosition 791227"];
5987 [label="_errorCodeType 791228"];
5988 [label="_defaultSeverityOpt 791229"];
5989 [label="_effectiveSeverityOpt 791230"];
5990 [label="_code 791231"];
5991 [label="DiagnosticWithInfo dinfo = null; 791232"];
5992 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 791233"];
5993 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 791234"];
5994 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 791235"];
5995 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 791236"];
5996 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 791237"];
5997 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 791238"];
5998 [label="int index = unmatched.IndexOf(d); 791239"];
5999 [label="if (d == null)\n                return false; 791240"];
6000 [label="if (d == null)\n                return false; 791241"];
6001 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 791242"];
6002 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 791243"];
6003 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 791244"];
6004 [label="if (_squiggledText != d._squiggledText)\n                    return false; 791245"];
6005 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 791246"];
6006 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 791247"];
6007 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 791248"];
6008 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 791249"];
6009 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 791250"];
6010 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 791251"];
6011 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 791252"];
6012 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 791253"];
6013 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 791254"];
6014 [label="if (d._arguments == null)\n                    return false; 791255"];
6015 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 791256"];
6016 [label="return true; 791257"];
6017 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 791258"];
6018 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 791259"];
6019 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 791260"];
6020 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 791261"];
6021 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 791262"];
6022 [label="DiagnosticDescription.GetAssertText(expected, actual) 791263"];
6023 [label="param GetAssertText(DiagnosticDescription[] expected) 791264"];
6024 [label="const int CSharp = 1; 791265"];
6025 [label="const int VisualBasic = 2; 791266"];
6026 [label="int indentDepth = (language == CSharp) ? 4 : 1; 791267"];
6027 [label="(language == CSharp) 791268"];
6028 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 791269"];
6029 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 791270"];
6030 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 791271"];
6031 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 791272"];
6032 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 791273"];
6033 [label="IsSortedOrEmpty(expected) 791274"];
6034 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 791275"];
6035 [label="var comparer = LinePositionComparer.Instance; 791276"];
6036 [label="DiagnosticDescription last = null; 791277"];
6037 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 791278"];
6038 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 791279"];
6039 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 791280"];
6040 [label="return false; 791281"];
6041 [label="var assertText = new StringBuilder(); 791282"];
6042 [label="assertText.AppendLine(); 791283"];
6043 [label="int i; 791284"];
6044 [label="assertText.AppendLine('Expected:'); 791285"];
6045 [label="assertText.AppendLine('Expected:'); 791286"];
6046 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 791287"];
6047 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 791288"];
6048 [label="param GetDiagnosticDescription(int indentDepth) 791289"];
6049 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 791290"];
6050 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 791291"];
6051 [label="var sb = new StringBuilder(); 791292"];
6052 [label="sb.Append('Diagnostic('); 791293"];
6053 [label="sb.Append('Diagnostic('); 791294"];
6054 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 791295"];
6055 [label="sb.Append(_errorCodeType.Name); 791296"];
6056 [label="sb.Append(_errorCodeType.Name); 791297"];
6057 [label="sb.Append('.'); 791298"];
6058 [label="sb.Append('.'); 791299"];
6059 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 791300"];
6060 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 791301"];
6061 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 791302"];
6062 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 791303"];
6063 [label="sb.Append(')'); 791304"];
6064 [label="sb.Append(')'); 791305"];
6065 [label="sb.Append('.WithArguments('); 791306"];
6066 [label="sb.Append('.WithArguments('); 791307"];
6067 [label="sb.Append('\\''); 791308"];
6068 [label="sb.Append('\\''); 791309"];
6069 [label="sb.Append(argumentStrings.Current); 791310"];
6070 [label="sb.Append(argumentStrings.Current); 791311"];
6071 [label="sb.Append('\\''); 791312"];
6072 [label="sb.Append('\\''); 791313"];
6073 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 791314"];
6074 [label="sb.Append(')'); 791315"];
6075 [label="sb.Append(')'); 791316"];
6076 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 791317"];
6077 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 791318"];
6078 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 791319"];
6079 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 791320"];
6080 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 791321"];
6081 [label="return sb.ToString(); 791322"];
6082 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 791323"];
6083 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 791324"];
6084 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 791325"];
6085 [label="GetCommaSeparatedLines(assertText, expectedText); 791326"];
6086 [label="GetCommaSeparatedLines(assertText, expectedText); 791327"];
6087 [label="GetCommaSeparatedLines(assertText, expectedText) 791328"];
6088 [label="param GetCommaSeparatedLines(StringBuilder sb) 791329"];
6089 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 791330"];
6090 [label="int n = lines.Count; 791331"];
6091 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 791332"];
6092 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 791333"];
6093 [label="sb.Append(lines[i]); 791334"];
6094 [label="sb.Append(lines[i]); 791335"];
6095 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 791336"];
6096 [label="sb.AppendLine(); 791337"];
6097 [label="GetCommaSeparatedLines(assertText, expectedText); 791338"];
6098 [label="assertText.AppendLine('Actual:'); 791339"];
6099 [label="assertText.AppendLine('Actual:'); 791340"];
6100 [label="var actualText = ArrayBuilder<string>.GetInstance(); 791341"];
6101 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 791342"];
6102 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 791343"];
6103 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 791344"];
6104 [label="Indent(assertText, indentDepth); 791345"];
6105 [label="Indent(assertText, indentDepth); 791346"];
6106 [label="Indent(assertText, indentDepth) 791347"];
6107 [label="param Indent(StringBuilder sb) 791348"];
6108 [label="param Indent(int count) 791349"];
6109 [label="sb.Append(' ', 4 * count); 791350"];
6110 [label="sb.Append(' ', 4 * count); 791351"];
6111 [label="sb.Append(' ', 4 * count); 791352"];
6112 [label="Indent(assertText, indentDepth); 791353"];
6113 [label="assertText.Append('// '); 791354"];
6114 [label="assertText.Append('// '); 791355"];
6115 [label="var l = d.Location; 791356"];
6116 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 791357"];
6117 [label="_code 791358"];
6118 [label="_isWarningAsError 791359"];
6119 [label="_isSuppressed 791360"];
6120 [label="_arguments 791361"];
6121 [label="_startPosition 791362"];
6122 [label="_errorCodeType 791363"];
6123 [label="_defaultSeverityOpt 791364"];
6124 [label="_effectiveSeverityOpt 791365"];
6125 [label="_code 791366"];
6126 [label="DiagnosticWithInfo dinfo = null; 791367"];
6127 [label="var diffDescription = description; 791368"];
6128 [label="if (d == null)\n                return false; 791369"];
6129 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 791370"];
6130 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 791371"];
6131 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 791372"];
6132 [label="if (_squiggledText != d._squiggledText)\n                    return false; 791373"];
6133 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 791374"];
6134 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 791375"];
6135 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 791376"];
6136 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 791377"];
6137 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 791378"];
6138 [label="sb.Append('.WithLocation('); 791379"];
6139 [label="sb.Append('.WithLocation('); 791380"];
6140 [label="sb.Append(_startPosition.Value.Line + 1); 791381"];
6141 [label="sb.Append(_startPosition.Value.Line + 1); 791382"];
6142 [label="sb.Append(', '); 791383"];
6143 [label="sb.Append(', '); 791384"];
6144 [label="sb.Append(_startPosition.Value.Character + 1); 791385"];
6145 [label="sb.Append(_startPosition.Value.Character + 1); 791386"];
6146 [label="sb.Append(')'); 791387"];
6147 [label="sb.Append(')'); 791388"];
6148 [label="return sb.ToString(); 791389"];
6149 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 791390"];
6150 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 791391"];
6151 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 791392"];
6152 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 791393"];
6153 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 791394"];
6154 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 791395"];
6155 [label="assertText.AppendLine(); 791396"];
6156 [label="assertText.AppendLine('Diff:'); 791397"];
6157 [label="assertText.AppendLine('Diff:'); 791398"];
6158 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 791399"];
6159 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 791400"];
6160 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 791401"];
6161 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 791402"];
6162 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 791403"];
6163 [label="param DiffReport(IEnumerable<T> expected) 791404"];
6164 [label="param DiffReport(IEnumerable<T> actual) 791405"];
6165 [label="param DiffReport(string separator) 791406"];
6166 [label="param DiffReport(IEqualityComparer<T> comparer = null) 791407"];
6167 [label="param DiffReport(Func<T, string> toString = null) 791408"];
6168 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 791409"];
6169 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 791410"];
6170 [label="(comparer != null) 791411"];
6171 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 791412"];
6172 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 791413"];
6173 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 791414"];
6174 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 791415"];
6175 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 791416"];
6176 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 791417"];
6177 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 791418"];
6178 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 791419"];
6179 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 791420"];
6180 [label="lcs.CalculateDiff(expectedList, actualList, toString) 791421"];
6181 [label="param CalculateDiff(IList<T> sequenceA) 791422"];
6182 [label="param CalculateDiff(IList<T> sequenceB) 791423"];
6183 [label="param CalculateDiff(Func<T, string> toString) 791424"];
6184 [label="param CalculateDiff(this) 791425"];
6185 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 791426"];
6186 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 791427"];
6187 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 791428"];
6188 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 791429"];
6189 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 791430"];
6190 [label="param GetEdits(TSequence sequenceA) 791431"];
6191 [label="param GetEdits(int lengthA) 791432"];
6192 [label="param GetEdits(TSequence sequenceB) 791433"];
6193 [label="param GetEdits(int lengthB) 791434"];
6194 [label="param GetEdits(this) 791435"];
6195 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 791436"];
6196 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 791437"];
6197 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 791438"];
6198 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 791439"];
6199 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 791440"];
6200 [label="param ComputeCostMatrix(TSequence sequenceA) 791441"];
6201 [label="param ComputeCostMatrix(int lengthA) 791442"];
6202 [label="param ComputeCostMatrix(TSequence sequenceB) 791443"];
6203 [label="param ComputeCostMatrix(int lengthB) 791444"];
6204 [label="param ComputeCostMatrix(this) 791445"];
6205 [label="var la = lengthA + 1; 791446"];
6206 [label="var la = lengthA + 1; 791447"];
6207 [label="var lb = lengthB + 1; 791448"];
6208 [label="var lb = lengthB + 1; 791449"];
6209 [label="var d = new int[la, lb]; 791450"];
6210 [label="d[0, 0] = 0; 791451"];
6211 [label="d[0, 0] 791452"];
6212 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 791453"];
6213 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 791454"];
6214 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 791455"];
6215 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 791456"];
6216 [label="d[i, 0] 791457"];
6217 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 791458"];
6218 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 791459"];
6219 [label="d[0, j] = d[0, j - 1] + InsertCost; 791460"];
6220 [label="d[0, j] = d[0, j - 1] + InsertCost; 791461"];
6221 [label="d[0, j] 791462"];
6222 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 791463"];
6223 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 791464"];
6224 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 791465"];
6225 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 791466"];
6226 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 791467"];
6227 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 791468"];
6228 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 791469"];
6229 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 791470"];
6230 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 791471"];
6231 [label="param ItemsEqual(IList<T> sequenceA) 791472"];
6232 [label="param ItemsEqual(int indexA) 791473"];
6233 [label="param ItemsEqual(IList<T> sequenceB) 791474"];
6234 [label="param ItemsEqual(int indexB) 791475"];
6235 [label="param ItemsEqual(this) 791476"];
6236 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 791477"];
6237 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 791478"];
6238 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 791479"];
6239 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 791480"];
6240 [label="int m2 = d[i - 1, j] + DeleteCost; 791481"];
6241 [label="int m2 = d[i - 1, j] + DeleteCost; 791482"];
6242 [label="int m3 = d[i, j - 1] + InsertCost; 791483"];
6243 [label="int m3 = d[i, j - 1] + InsertCost; 791484"];
6244 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 791485"];
6245 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 791486"];
6246 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 791487"];
6247 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 791488"];
6248 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 791489"];
6249 [label="d[i, j] 791490"];
6250 [label="return d; 791491"];
6251 [label="int i = lengthA; 791492"];
6252 [label="int j = lengthB; 791493"];
6253 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 791494"];
6254 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 791495"];
6255 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 791496"];
6256 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 791497"];
6257 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 791498"];
6258 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 791499"];
6259 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 791500"];
6260 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 791501"];
6261 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 791502"];
6262 [label="i--; 791503"];
6263 [label="j--; 791504"];
6264 [label="yield return new Edit(EditKind.Update, i, j); 791505"];
6265 [label="yield return new Edit(EditKind.Update, i, j); 791506"];
6266 [label="yield return new Edit(EditKind.Update, i, j); 791507"];
6267 [label="yield return new Edit(EditKind.Update, i, j); 791508"];
6268 [label="new Edit(EditKind.Update, i, j) 791509"];
6269 [label="param Edit(EditKind kind) 791510"];
6270 [label="param Edit(int indexA) 791511"];
6271 [label="param Edit(int indexB) 791512"];
6272 [label="param Edit(this) 791513"];
6273 [label="this.Kind 791514"];
6274 [label="this.IndexA 791515"];
6275 [label="this.IndexB 791516"];
6276 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 791517"];
6277 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 791518"];
6278 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 791519"];
6279 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 791520"];
6280 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 791521"];
6281 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 791522"];
6282 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 791523"];
6283 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 791524"];
6284 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 791525"];
6285 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 791526"];
6286 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 791527"];
6287 [label="actualText.Free(); 791528"];
6288 [label="expectedText.Free(); 791529"];
6289 [label="return assertText.ToString(); 791530"];
6290 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 791531"];
6291 [label="diagnostics.Verify(expected); 791532"];
6292 [label="VerifyAssemblyIds(c, diagnostics) 791533"];
6293 [label="=> code == (int)ErrorCode.ERR_NoTypeDef 791534"];
6294 [label="=> code == (int)ErrorCode.ERR_NoTypeDef 791535"];
6295 [label="CustomAssert.True(assemblyIds.IsEmpty); 791536"];
6296 [label="VerifyAssemblyIds(c, diagnostics); 791537"];
6297 [label="return c; 791538"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 11;
12 -> 1;
13 -> 1;
14 -> 1;
15 -> 13;
15 -> 14;
16 -> 15;
16 -> 14;
17 -> 14;
18 -> 16;
18 -> 17;
19 -> 17;
20 -> 18;
20 -> 19;
20 -> 17;
21 -> 17;
21 -> 1;
22 -> 12;
22 -> 14;
23 -> 13;
23 -> 14;
24 -> 13;
24 -> 14;
25 -> 13;
25 -> 14;
26 -> 21;
26 -> 14;
27 -> 13;
27 -> 14;
28 -> 13;
28 -> 14;
29 -> 13;
29 -> 14;
30 -> 22;
30 -> 14;
31 -> 26;
31 -> 14;
32 -> 23;
32 -> 14;
33 -> 14;
34 -> 31;
34 -> 33;
35 -> 32;
35 -> 33;
36 -> 34;
36 -> 33;
37 -> 33;
38 -> 36;
38 -> 37;
39 -> 38;
39 -> 37;
40 -> 39;
41 -> 0;
41 -> 40;
42 -> 41;
43 -> 42;
44 -> 42;
45 -> 0;
45 -> 44;
46 -> 45;
46 -> 43;
46 -> 42;
47 -> 46;
47 -> 40;
48 -> 33;
49 -> 35;
49 -> 48;
49 -> 33;
50 -> 47;
50 -> 49;
51 -> 24;
51 -> 14;
52 -> 25;
52 -> 14;
53 -> 27;
53 -> 14;
54 -> 28;
54 -> 14;
55 -> 29;
55 -> 14;
56 -> 14;
57 -> 30;
57 -> 56;
58 -> 50;
58 -> 56;
59 -> 51;
59 -> 56;
60 -> 52;
60 -> 56;
61 -> 53;
61 -> 56;
62 -> 54;
62 -> 56;
63 -> 55;
63 -> 56;
64 -> 57;
64 -> 56;
65 -> 58;
65 -> 56;
66 -> 59;
66 -> 56;
67 -> 60;
67 -> 56;
68 -> 61;
68 -> 56;
69 -> 62;
69 -> 56;
70 -> 63;
70 -> 56;
71 -> 56;
72 -> 71;
72 -> 56;
73 -> 56;
74 -> 64;
74 -> 73;
75 -> 65;
75 -> 73;
76 -> 66;
76 -> 73;
77 -> 67;
77 -> 73;
78 -> 68;
78 -> 73;
79 -> 69;
79 -> 73;
80 -> 70;
80 -> 73;
81 -> 72;
81 -> 73;
82 -> 77;
82 -> 73;
83 -> 79;
83 -> 73;
84 -> 73;
85 -> 82;
85 -> 84;
86 -> 83;
86 -> 84;
87 -> 74;
87 -> 84;
88 -> 87;
88 -> 12;
88 -> 84;
89 -> 88;
90 -> 86;
90 -> 88;
91 -> 85;
91 -> 88;
92 -> 88;
93 -> 89;
93 -> 92;
94 -> 90;
94 -> 92;
95 -> 91;
95 -> 92;
96 -> 89;
96 -> 92;
97 -> 92;
98 -> 95;
98 -> 97;
98 -> 92;
99 -> 0;
99 -> 98;
100 -> 93;
100 -> 92;
101 -> 0;
101 -> 92;
102 -> 101;
102 -> 96;
102 -> 92;
103 -> 92;
104 -> 100;
104 -> 102;
104 -> 103;
104 -> 0;
104 -> 92;
105 -> 104;
105 -> 92;
106 -> 99;
106 -> 92;
107 -> 94;
107 -> 92;
108 -> 92;
109 -> 105;
109 -> 106;
109 -> 107;
109 -> 108;
109 -> 104;
109 -> 0;
109 -> 92;
110 -> 92;
111 -> 109;
111 -> 110;
112 -> 110;
113 -> 110;
114 -> 111;
114 -> 109;
114 -> 113;
114 -> 110;
115 -> 112;
115 -> 110;
116 -> 110;
117 -> 114;
117 -> 109;
117 -> 113;
117 -> 115;
117 -> 116;
117 -> 112;
117 -> 110;
118 -> 110;
119 -> 118;
119 -> 112;
119 -> 110;
120 -> 112;
120 -> 110;
121 -> 110;
122 -> 120;
122 -> 121;
122 -> 112;
122 -> 119;
122 -> 110;
123 -> 111;
123 -> 110;
124 -> 123;
124 -> 89;
124 -> 88;
125 -> 89;
125 -> 73;
126 -> 73;
127 -> 76;
127 -> 126;
127 -> 73;
128 -> 0;
128 -> 73;
129 -> 81;
129 -> 73;
130 -> 78;
130 -> 125;
130 -> 75;
130 -> 76;
130 -> 73;
131 -> 130;
131 -> 73;
132 -> 73;
133 -> 131;
133 -> 132;
134 -> 0;
134 -> 132;
135 -> 134;
136 -> 73;
137 -> 130;
137 -> 89;
137 -> 124;
137 -> 109;
137 -> 46;
137 -> 0;
137 -> 13;
137 -> 43;
137 -> 73;
138 -> 73;
139 -> 138;
140 -> 137;
140 -> 139;
140 -> 73;
141 -> 0;
143 -> 141;
143 -> 142;
144 -> 143;
145 -> 0;
147 -> 145;
147 -> 146;
149 -> 147;
149 -> 148;
150 -> 149;
151 -> 137;
151 -> 138;
152 -> 137;
152 -> 138;
153 -> 137;
153 -> 138;
154 -> 137;
154 -> 138;
155 -> 151;
155 -> 138;
156 -> 154;
156 -> 138;
157 -> 152;
157 -> 138;
158 -> 153;
158 -> 138;
159 -> 138;
160 -> 138;
161 -> 155;
161 -> 160;
162 -> 156;
162 -> 160;
163 -> 157;
163 -> 160;
164 -> 158;
164 -> 160;
165 -> 159;
165 -> 160;
166 -> 159;
166 -> 160;
167 -> 159;
167 -> 160;
168 -> 159;
168 -> 160;
169 -> 160;
170 -> 162;
170 -> 169;
170 -> 160;
171 -> 168;
171 -> 160;
172 -> 164;
172 -> 160;
173 -> 172;
173 -> 140;
173 -> 160;
174 -> 161;
174 -> 160;
175 -> 162;
175 -> 160;
176 -> 173;
176 -> 160;
177 -> 165;
177 -> 160;
178 -> 166;
178 -> 160;
179 -> 167;
179 -> 160;
180 -> 168;
180 -> 160;
181 -> 160;
182 -> 0;
182 -> 160;
183 -> 162;
183 -> 173;
183 -> 160;
184 -> 160;
185 -> 182;
185 -> 184;
186 -> 183;
186 -> 184;
187 -> 183;
187 -> 184;
188 -> 182;
188 -> 184;
189 -> 180;
189 -> 184;
190 -> 181;
190 -> 184;
191 -> 181;
191 -> 184;
192 -> 185;
192 -> 184;
193 -> 186;
193 -> 184;
194 -> 187;
194 -> 184;
195 -> 188;
195 -> 184;
196 -> 189;
196 -> 184;
197 -> 184;
198 -> 197;
198 -> 192;
198 -> 193;
198 -> 194;
198 -> 195;
198 -> 196;
198 -> 0;
198 -> 173;
198 -> 184;
199 -> 197;
199 -> 184;
200 -> 190;
200 -> 197;
200 -> 184;
201 -> 160;
202 -> 174;
202 -> 201;
203 -> 175;
203 -> 201;
204 -> 176;
204 -> 201;
205 -> 177;
205 -> 201;
206 -> 178;
206 -> 201;
207 -> 179;
207 -> 201;
208 -> 180;
208 -> 201;
209 -> 181;
209 -> 201;
210 -> 181;
210 -> 201;
211 -> 181;
211 -> 201;
212 -> 181;
212 -> 201;
213 -> 181;
213 -> 201;
214 -> 181;
214 -> 201;
215 -> 202;
215 -> 201;
216 -> 203;
216 -> 201;
217 -> 204;
217 -> 201;
218 -> 205;
218 -> 201;
219 -> 206;
219 -> 201;
220 -> 207;
220 -> 201;
221 -> 208;
221 -> 201;
222 -> 209;
222 -> 201;
223 -> 210;
223 -> 201;
224 -> 211;
224 -> 201;
225 -> 211;
225 -> 198;
225 -> 201;
226 -> 225;
226 -> 198;
226 -> 199;
226 -> 200;
226 -> 201;
227 -> 212;
227 -> 201;
228 -> 213;
228 -> 201;
229 -> 201;
230 -> 215;
230 -> 229;
231 -> 216;
231 -> 229;
232 -> 217;
232 -> 229;
233 -> 218;
233 -> 229;
234 -> 219;
234 -> 229;
235 -> 220;
235 -> 229;
236 -> 221;
236 -> 229;
237 -> 222;
237 -> 229;
238 -> 223;
238 -> 229;
239 -> 224;
239 -> 229;
240 -> 226;
240 -> 229;
241 -> 227;
241 -> 229;
242 -> 228;
242 -> 229;
243 -> 214;
243 -> 229;
244 -> 230;
244 -> 229;
245 -> 232;
245 -> 229;
246 -> 240;
246 -> 229;
247 -> 236;
247 -> 229;
248 -> 241;
248 -> 229;
249 -> 242;
249 -> 229;
250 -> 229;
251 -> 250;
251 -> 244;
251 -> 245;
251 -> 246;
251 -> 247;
251 -> 248;
251 -> 249;
251 -> 173;
251 -> 226;
251 -> 229;
252 -> 250;
252 -> 229;
253 -> 250;
253 -> 229;
254 -> 250;
254 -> 229;
255 -> 250;
255 -> 229;
256 -> 250;
256 -> 229;
257 -> 250;
257 -> 229;
258 -> 250;
258 -> 229;
259 -> 250;
259 -> 229;
260 -> 250;
260 -> 229;
261 -> 250;
261 -> 229;
262 -> 250;
262 -> 229;
263 -> 250;
263 -> 229;
264 -> 250;
264 -> 229;
265 -> 250;
265 -> 229;
266 -> 250;
266 -> 229;
267 -> 250;
267 -> 229;
268 -> 250;
268 -> 229;
269 -> 250;
269 -> 229;
270 -> 250;
270 -> 229;
271 -> 250;
271 -> 229;
272 -> 250;
272 -> 229;
273 -> 250;
273 -> 229;
274 -> 250;
274 -> 229;
275 -> 250;
275 -> 229;
276 -> 250;
276 -> 229;
277 -> 250;
277 -> 229;
278 -> 229;
279 -> 278;
279 -> 250;
279 -> 229;
280 -> 250;
280 -> 229;
281 -> 280;
281 -> 251;
281 -> 252;
281 -> 253;
281 -> 254;
281 -> 255;
281 -> 256;
281 -> 257;
281 -> 258;
281 -> 259;
281 -> 260;
281 -> 261;
281 -> 262;
281 -> 263;
281 -> 264;
281 -> 265;
281 -> 266;
281 -> 267;
281 -> 268;
281 -> 269;
281 -> 270;
281 -> 271;
281 -> 272;
281 -> 273;
281 -> 274;
281 -> 275;
281 -> 276;
281 -> 277;
281 -> 279;
281 -> 278;
281 -> 229;
282 -> 281;
282 -> 250;
282 -> 229;
283 -> 231;
283 -> 250;
283 -> 229;
284 -> 250;
284 -> 229;
285 -> 229;
286 -> 229;
287 -> 284;
287 -> 286;
288 -> 285;
288 -> 286;
289 -> 288;
289 -> 286;
290 -> 288;
290 -> 286;
291 -> 288;
291 -> 286;
292 -> 287;
292 -> 288;
292 -> 286;
293 -> 285;
293 -> 250;
293 -> 229;
294 -> 250;
294 -> 281;
294 -> 229;
295 -> 294;
295 -> 281;
295 -> 282;
295 -> 283;
295 -> 293;
295 -> 292;
295 -> 290;
295 -> 291;
295 -> 229;
296 -> 295;
296 -> 250;
296 -> 229;
297 -> 250;
297 -> 295;
297 -> 229;
298 -> 297;
298 -> 295;
298 -> 296;
298 -> 229;
299 -> 298;
299 -> 250;
299 -> 229;
300 -> 250;
300 -> 298;
300 -> 229;
301 -> 300;
301 -> 298;
301 -> 299;
301 -> 229;
302 -> 301;
302 -> 250;
302 -> 229;
303 -> 250;
303 -> 301;
303 -> 229;
304 -> 303;
304 -> 301;
304 -> 302;
304 -> 229;
305 -> 304;
305 -> 250;
305 -> 229;
306 -> 250;
306 -> 229;
307 -> 306;
307 -> 304;
307 -> 305;
307 -> 229;
308 -> 307;
308 -> 250;
308 -> 229;
309 -> 239;
309 -> 307;
309 -> 229;
310 -> 229;
311 -> 309;
311 -> 310;
312 -> 310;
313 -> 311;
313 -> 310;
314 -> 313;
314 -> 307;
314 -> 308;
314 -> 310;
315 -> 0;
315 -> 310;
316 -> 315;
316 -> 312;
316 -> 310;
317 -> 316;
317 -> 229;
318 -> 317;
318 -> 250;
318 -> 229;
319 -> 236;
319 -> 229;
320 -> 319;
321 -> 233;
321 -> 320;
321 -> 319;
322 -> 234;
322 -> 320;
322 -> 319;
323 -> 321;
323 -> 322;
323 -> 319;
324 -> 235;
324 -> 320;
324 -> 319;
325 -> 323;
325 -> 324;
325 -> 319;
326 -> 238;
326 -> 229;
327 -> 250;
327 -> 307;
327 -> 308;
327 -> 318;
327 -> 326;
328 -> 326;
329 -> 250;
329 -> 328;
330 -> 329;
330 -> 327;
330 -> 328;
331 -> 237;
331 -> 326;
332 -> 327;
332 -> 330;
332 -> 331;
332 -> 326;
333 -> 332;
333 -> 250;
333 -> 326;
334 -> 239;
334 -> 250;
334 -> 229;
335 -> 250;
335 -> 332;
335 -> 229;
336 -> 229;
337 -> 250;
337 -> 332;
337 -> 336;
337 -> 229;
338 -> 160;
339 -> 163;
339 -> 338;
339 -> 160;
340 -> 163;
340 -> 339;
341 -> 339;
342 -> 340;
342 -> 341;
343 -> 181;
343 -> 341;
344 -> 341;
345 -> 342;
345 -> 344;
345 -> 341;
346 -> 342;
346 -> 341;
347 -> 346;
347 -> 332;
347 -> 333;
347 -> 334;
347 -> 341;
348 -> 341;
349 -> 343;
349 -> 347;
349 -> 341;
350 -> 348;
350 -> 341;
351 -> 349;
351 -> 347;
351 -> 341;
352 -> 350;
352 -> 351;
352 -> 348;
352 -> 347;
352 -> 341;
353 -> 341;
354 -> 341;
355 -> 342;
355 -> 341;
356 -> 355;
356 -> 352;
356 -> 341;
357 -> 356;
358 -> 356;
359 -> 356;
360 -> 343;
360 -> 359;
360 -> 356;
361 -> 356;
362 -> 348;
362 -> 361;
362 -> 359;
362 -> 356;
363 -> 353;
363 -> 356;
363 -> 362;
364 -> 354;
364 -> 356;
365 -> 348;
365 -> 362;
365 -> 341;
366 -> 343;
366 -> 365;
366 -> 341;
367 -> 342;
367 -> 341;
368 -> 341;
369 -> 367;
369 -> 368;
370 -> 349;
370 -> 368;
371 -> 370;
371 -> 365;
371 -> 368;
372 -> 370;
372 -> 365;
372 -> 368;
373 -> 370;
373 -> 365;
373 -> 368;
374 -> 370;
374 -> 365;
374 -> 368;
375 -> 370;
375 -> 365;
375 -> 368;
376 -> 369;
376 -> 368;
377 -> 370;
377 -> 365;
377 -> 376;
377 -> 368;
378 -> 368;
379 -> 375;
379 -> 378;
379 -> 368;
380 -> 377;
380 -> 379;
381 -> 379;
382 -> 380;
382 -> 381;
383 -> 370;
383 -> 381;
384 -> 382;
384 -> 381;
385 -> 383;
385 -> 377;
385 -> 381;
386 -> 381;
387 -> 381;
388 -> 384;
388 -> 387;
389 -> 385;
389 -> 387;
390 -> 385;
390 -> 387;
391 -> 385;
391 -> 387;
392 -> 385;
392 -> 387;
393 -> 386;
393 -> 387;
394 -> 386;
394 -> 387;
395 -> 387;
395 -> 388;
395 -> 389;
395 -> 390;
395 -> 391;
395 -> 392;
395 -> 377;
396 -> 386;
396 -> 379;
397 -> 396;
397 -> 341;
398 -> 343;
398 -> 395;
398 -> 341;
399 -> 363;
399 -> 341;
400 -> 397;
400 -> 341;
401 -> 341;
402 -> 398;
402 -> 401;
403 -> 399;
403 -> 401;
404 -> 400;
404 -> 401;
405 -> 343;
405 -> 401;
406 -> 405;
406 -> 395;
406 -> 401;
407 -> 401;
408 -> 405;
408 -> 407;
409 -> 408;
409 -> 395;
409 -> 407;
410 -> 409;
410 -> 407;
411 -> 410;
411 -> 401;
412 -> 405;
412 -> 395;
412 -> 387;
412 -> 393;
412 -> 401;
413 -> 401;
414 -> 412;
414 -> 413;
415 -> 414;
415 -> 412;
415 -> 413;
416 -> 401;
417 -> 415;
417 -> 416;
418 -> 402;
418 -> 401;
419 -> 403;
419 -> 401;
420 -> 404;
420 -> 401;
421 -> 401;
422 -> 401;
423 -> 406;
423 -> 422;
424 -> 406;
424 -> 422;
425 -> 406;
425 -> 422;
426 -> 411;
426 -> 422;
427 -> 415;
427 -> 422;
428 -> 417;
428 -> 422;
429 -> 417;
429 -> 422;
430 -> 418;
430 -> 422;
431 -> 419;
431 -> 422;
432 -> 420;
432 -> 422;
433 -> 417;
433 -> 422;
434 -> 421;
434 -> 422;
435 -> 421;
435 -> 422;
436 -> 426;
436 -> 422;
437 -> 427;
437 -> 422;
438 -> 428;
438 -> 422;
439 -> 432;
439 -> 417;
439 -> 422;
440 -> 434;
440 -> 422;
441 -> 422;
442 -> 436;
442 -> 441;
443 -> 437;
443 -> 441;
444 -> 438;
444 -> 441;
445 -> 440;
445 -> 441;
446 -> 435;
446 -> 441;
447 -> 445;
447 -> 441;
448 -> 441;
449 -> 448;
449 -> 441;
450 -> 448;
450 -> 441;
451 -> 448;
451 -> 441;
452 -> 448;
452 -> 441;
453 -> 448;
453 -> 441;
454 -> 448;
454 -> 441;
455 -> 448;
455 -> 441;
456 -> 448;
456 -> 441;
457 -> 448;
457 -> 441;
458 -> 448;
458 -> 441;
459 -> 448;
459 -> 441;
460 -> 448;
460 -> 441;
461 -> 448;
461 -> 441;
462 -> 448;
462 -> 441;
463 -> 448;
463 -> 441;
464 -> 448;
464 -> 441;
465 -> 448;
465 -> 441;
466 -> 448;
466 -> 441;
467 -> 448;
467 -> 441;
468 -> 448;
468 -> 441;
469 -> 448;
469 -> 441;
470 -> 448;
470 -> 441;
471 -> 448;
471 -> 441;
472 -> 448;
472 -> 441;
473 -> 448;
473 -> 441;
474 -> 448;
474 -> 441;
475 -> 441;
476 -> 475;
476 -> 448;
476 -> 441;
477 -> 448;
477 -> 441;
478 -> 448;
478 -> 441;
479 -> 441;
480 -> 441;
481 -> 478;
481 -> 480;
482 -> 479;
482 -> 480;
483 -> 482;
483 -> 480;
484 -> 482;
484 -> 480;
485 -> 482;
485 -> 480;
486 -> 481;
486 -> 482;
486 -> 480;
487 -> 479;
487 -> 448;
487 -> 441;
488 -> 448;
488 -> 441;
489 -> 441;
490 -> 439;
490 -> 489;
491 -> 489;
492 -> 490;
492 -> 489;
493 -> 492;
493 -> 439;
494 -> 492;
495 -> 493;
495 -> 494;
496 -> 429;
496 -> 441;
497 -> 496;
498 -> 442;
498 -> 497;
498 -> 496;
499 -> 443;
499 -> 497;
499 -> 496;
500 -> 498;
500 -> 499;
500 -> 496;
501 -> 444;
501 -> 497;
501 -> 496;
502 -> 500;
502 -> 501;
502 -> 496;
503 -> 430;
503 -> 431;
504 -> 448;
504 -> 431;
505 -> 430;
505 -> 504;
505 -> 439;
505 -> 495;
505 -> 431;
506 -> 430;
506 -> 448;
506 -> 431;
507 -> 448;
507 -> 505;
507 -> 441;
508 -> 441;
509 -> 448;
509 -> 505;
509 -> 508;
509 -> 441;
510 -> 421;
510 -> 341;
511 -> 510;
511 -> 339;
512 -> 511;
512 -> 505;
512 -> 160;
513 -> 511;
513 -> 160;
514 -> 137;
514 -> 513;
514 -> 505;
514 -> 506;
514 -> 432;
514 -> 73;
515 -> 514;
515 -> 73;
516 -> 73;
517 -> 515;
517 -> 516;
518 -> 516;
519 -> 517;
519 -> 518;
520 -> 518;
521 -> 519;
521 -> 514;
521 -> 520;
522 -> 520;
523 -> 521;
523 -> 514;
523 -> 522;
523 -> 520;
524 -> 521;
524 -> 514;
524 -> 523;
525 -> 523;
526 -> 524;
526 -> 525;
527 -> 524;
527 -> 525;
528 -> 524;
528 -> 525;
529 -> 524;
529 -> 525;
530 -> 524;
530 -> 525;
531 -> 525;
532 -> 525;
533 -> 525;
534 -> 525;
535 -> 525;
536 -> 0;
536 -> 525;
537 -> 526;
537 -> 525;
538 -> 531;
538 -> 537;
539 -> 537;
540 -> 527;
540 -> 537;
541 -> 528;
541 -> 537;
542 -> 529;
542 -> 537;
543 -> 530;
543 -> 537;
544 -> 532;
544 -> 537;
545 -> 533;
545 -> 537;
546 -> 534;
546 -> 537;
547 -> 535;
547 -> 537;
548 -> 536;
548 -> 537;
549 -> 537;
550 -> 538;
550 -> 549;
551 -> 539;
551 -> 549;
552 -> 540;
552 -> 549;
553 -> 541;
553 -> 549;
554 -> 542;
554 -> 549;
555 -> 543;
555 -> 549;
556 -> 544;
556 -> 549;
557 -> 545;
557 -> 549;
558 -> 546;
558 -> 549;
559 -> 547;
559 -> 549;
560 -> 548;
560 -> 549;
561 -> 551;
561 -> 514;
561 -> 549;
562 -> 561;
562 -> 0;
562 -> 549;
563 -> 551;
563 -> 549;
564 -> 552;
564 -> 549;
565 -> 555;
565 -> 549;
566 -> 559;
566 -> 549;
567 -> 560;
567 -> 549;
568 -> 549;
569 -> 563;
569 -> 568;
570 -> 564;
570 -> 568;
571 -> 565;
571 -> 568;
572 -> 566;
572 -> 568;
573 -> 567;
573 -> 568;
574 -> 569;
574 -> 570;
574 -> 571;
574 -> 568;
575 -> 569;
575 -> 568;
576 -> 574;
576 -> 568;
577 -> 572;
577 -> 575;
577 -> 576;
577 -> 535;
577 -> 574;
577 -> 568;
578 -> 574;
578 -> 568;
579 -> 573;
579 -> 578;
579 -> 0;
579 -> 577;
579 -> 568;
580 -> 549;
581 -> 551;
581 -> 549;
582 -> 550;
582 -> 581;
582 -> 531;
582 -> 579;
582 -> 549;
583 -> 551;
583 -> 549;
584 -> 556;
584 -> 532;
584 -> 549;
585 -> 556;
585 -> 583;
585 -> 584;
585 -> 532;
585 -> 582;
585 -> 549;
586 -> 531;
586 -> 585;
586 -> 525;
587 -> 532;
587 -> 585;
587 -> 525;
588 -> 533;
588 -> 525;
589 -> 534;
589 -> 525;
590 -> 579;
590 -> 525;
591 -> 525;
592 -> 525;
593 -> 586;
593 -> 592;
594 -> 587;
594 -> 592;
595 -> 588;
595 -> 592;
596 -> 589;
596 -> 592;
597 -> 587;
597 -> 592;
598 -> 590;
598 -> 592;
599 -> 591;
599 -> 592;
600 -> 599;
600 -> 592;
601 -> 599;
601 -> 592;
602 -> 599;
602 -> 592;
603 -> 599;
603 -> 592;
604 -> 599;
604 -> 592;
605 -> 593;
605 -> 592;
606 -> 593;
606 -> 586;
606 -> 592;
607 -> 593;
607 -> 592;
608 -> 597;
608 -> 605;
608 -> 592;
609 -> 0;
609 -> 592;
610 -> 593;
610 -> 599;
610 -> 592;
611 -> 594;
611 -> 599;
611 -> 592;
612 -> 595;
612 -> 599;
612 -> 592;
613 -> 596;
613 -> 599;
613 -> 592;
614 -> 597;
614 -> 599;
614 -> 592;
615 -> 598;
615 -> 599;
615 -> 592;
616 -> 591;
616 -> 523;
617 -> 523;
618 -> 524;
618 -> 616;
618 -> 617;
618 -> 611;
618 -> 612;
618 -> 613;
618 -> 614;
618 -> 615;
618 -> 610;
618 -> 608;
618 -> 586;
618 -> 588;
618 -> 589;
618 -> 523;
619 -> 521;
619 -> 618;
619 -> 520;
620 -> 619;
620 -> 518;
621 -> 620;
621 -> 516;
622 -> 621;
622 -> 618;
622 -> 516;
623 -> 516;
624 -> 621;
624 -> 623;
624 -> 618;
624 -> 516;
625 -> 0;
625 -> 516;
626 -> 624;
626 -> 625;
626 -> 516;
627 -> 80;
627 -> 626;
627 -> 73;
628 -> 514;
628 -> 73;
629 -> 628;
629 -> 1;
630 -> 1;
631 -> 1;
632 -> 629;
632 -> 631;
633 -> 630;
633 -> 631;
634 -> 631;
635 -> 631;
636 -> 634;
636 -> 635;
637 -> 632;
637 -> 635;
638 -> 0;
638 -> 635;
639 -> 635;
640 -> 636;
640 -> 635;
641 -> 635;
642 -> 638;
642 -> 641;
643 -> 639;
643 -> 641;
644 -> 640;
644 -> 641;
645 -> 637;
645 -> 641;
646 -> 641;
647 -> 642;
647 -> 641;
648 -> 643;
648 -> 641;
649 -> 646;
649 -> 641;
650 -> 644;
650 -> 641;
651 -> 641;
652 -> 647;
652 -> 651;
653 -> 648;
653 -> 651;
654 -> 649;
654 -> 651;
655 -> 650;
655 -> 651;
656 -> 645;
656 -> 651;
657 -> 651;
658 -> 652;
658 -> 0;
658 -> 651;
659 -> 658;
659 -> 653;
659 -> 651;
660 -> 659;
661 -> 656;
661 -> 660;
662 -> 660;
663 -> 661;
663 -> 626;
663 -> 662;
664 -> 662;
665 -> 663;
665 -> 659;
666 -> 659;
667 -> 656;
667 -> 666;
668 -> 667;
668 -> 626;
668 -> 666;
669 -> 668;
669 -> 659;
670 -> 669;
671 -> 665;
671 -> 626;
671 -> 669;
672 -> 655;
672 -> 669;
673 -> 670;
673 -> 671;
673 -> 672;
673 -> 634;
673 -> 669;
674 -> 673;
674 -> 670;
675 -> 673;
675 -> 670;
676 -> 673;
676 -> 670;
677 -> 673;
677 -> 670;
678 -> 670;
679 -> 678;
679 -> 670;
680 -> 670;
681 -> 675;
681 -> 680;
682 -> 681;
682 -> 670;
683 -> 676;
683 -> 670;
684 -> 678;
684 -> 670;
685 -> 682;
685 -> 673;
685 -> 683;
685 -> 684;
685 -> 679;
685 -> 670;
686 -> 659;
687 -> 665;
687 -> 659;
688 -> 655;
688 -> 634;
688 -> 685;
688 -> 687;
689 -> 687;
689 -> 626;
690 -> 652;
690 -> 0;
690 -> 651;
691 -> 690;
691 -> 653;
691 -> 651;
692 -> 657;
692 -> 691;
693 -> 692;
693 -> 656;
693 -> 657;
693 -> 626;
693 -> 691;
694 -> 691;
695 -> 693;
695 -> 694;
696 -> 695;
696 -> 693;
696 -> 694;
697 -> 691;
698 -> 656;
698 -> 697;
699 -> 698;
699 -> 696;
699 -> 697;
700 -> 699;
700 -> 691;
701 -> 691;
702 -> 656;
702 -> 701;
703 -> 702;
703 -> 700;
703 -> 701;
704 -> 703;
704 -> 691;
705 -> 655;
705 -> 688;
705 -> 691;
706 -> 691;
707 -> 656;
707 -> 706;
708 -> 707;
708 -> 700;
708 -> 706;
709 -> 707;
709 -> 708;
710 -> 708;
711 -> 709;
711 -> 710;
712 -> 710;
713 -> 711;
713 -> 712;
714 -> 712;
715 -> 713;
715 -> 709;
715 -> 714;
716 -> 715;
716 -> 712;
717 -> 716;
717 -> 710;
718 -> 709;
718 -> 710;
719 -> 718;
719 -> 717;
719 -> 710;
720 -> 709;
720 -> 710;
721 -> 710;
722 -> 707;
722 -> 719;
722 -> 708;
723 -> 707;
723 -> 719;
723 -> 706;
724 -> 723;
724 -> 691;
725 -> 655;
725 -> 705;
725 -> 691;
726 -> 655;
726 -> 691;
727 -> 691;
728 -> 691;
729 -> 727;
729 -> 728;
730 -> 727;
730 -> 728;
731 -> 727;
731 -> 728;
732 -> 726;
732 -> 728;
733 -> 656;
733 -> 728;
734 -> 728;
735 -> 733;
735 -> 734;
736 -> 735;
736 -> 724;
736 -> 734;
737 -> 734;
738 -> 736;
738 -> 737;
739 -> 738;
739 -> 737;
740 -> 739;
740 -> 736;
740 -> 737;
741 -> 737;
742 -> 740;
742 -> 741;
743 -> 742;
743 -> 740;
743 -> 741;
744 -> 743;
744 -> 741;
745 -> 744;
745 -> 728;
746 -> 732;
746 -> 728;
747 -> 745;
747 -> 746;
747 -> 744;
747 -> 725;
747 -> 728;
748 -> 728;
749 -> 728;
750 -> 729;
750 -> 749;
750 -> 728;
751 -> 728;
752 -> 733;
752 -> 751;
753 -> 751;
754 -> 752;
754 -> 753;
755 -> 753;
756 -> 754;
756 -> 755;
757 -> 756;
757 -> 747;
757 -> 755;
758 -> 756;
758 -> 747;
758 -> 755;
759 -> 758;
759 -> 753;
760 -> 754;
760 -> 747;
760 -> 753;
761 -> 754;
761 -> 760;
761 -> 753;
762 -> 761;
762 -> 751;
763 -> 762;
763 -> 728;
764 -> 748;
764 -> 728;
765 -> 732;
765 -> 728;
766 -> 764;
766 -> 765;
766 -> 763;
766 -> 725;
766 -> 760;
766 -> 728;
767 -> 728;
768 -> 766;
768 -> 767;
769 -> 767;
770 -> 768;
770 -> 769;
771 -> 769;
772 -> 771;
773 -> 770;
773 -> 767;
774 -> 768;
774 -> 767;
775 -> 767;
776 -> 775;
777 -> 776;
778 -> 767;
779 -> 778;
780 -> 766;
780 -> 779;
781 -> 780;
781 -> 773;
781 -> 779;
782 -> 780;
782 -> 773;
782 -> 779;
783 -> 782;
783 -> 778;
784 -> 766;
784 -> 767;
785 -> 784;
785 -> 773;
785 -> 767;
786 -> 767;
787 -> 784;
787 -> 773;
787 -> 786;
787 -> 767;
788 -> 787;
789 -> 784;
789 -> 773;
789 -> 787;
790 -> 788;
790 -> 787;
791 -> 787;
792 -> 784;
792 -> 790;
792 -> 767;
793 -> 766;
793 -> 767;
794 -> 766;
794 -> 767;
795 -> 794;
795 -> 792;
795 -> 767;
796 -> 766;
796 -> 767;
797 -> 766;
797 -> 767;
798 -> 767;
799 -> 797;
799 -> 798;
800 -> 799;
800 -> 792;
800 -> 798;
801 -> 799;
801 -> 792;
801 -> 798;
802 -> 801;
802 -> 767;
803 -> 767;
804 -> 803;
804 -> 802;
804 -> 792;
804 -> 767;
805 -> 803;
805 -> 804;
806 -> 802;
806 -> 805;
806 -> 803;
807 -> 796;
807 -> 806;
807 -> 805;
808 -> 766;
808 -> 767;
809 -> 808;
809 -> 807;
809 -> 767;
810 -> 780;
810 -> 809;
810 -> 779;
811 -> 780;
811 -> 809;
811 -> 779;
812 -> 811;
812 -> 778;
813 -> 784;
813 -> 809;
813 -> 767;
814 -> 794;
814 -> 809;
814 -> 767;
815 -> 766;
815 -> 767;
816 -> 766;
816 -> 767;
817 -> 815;
817 -> 0;
817 -> 767;
818 -> 767;
819 -> 815;
819 -> 767;
820 -> 816;
820 -> 819;
820 -> 809;
820 -> 767;
821 -> 820;
822 -> 821;
823 -> 822;
823 -> 821;
824 -> 821;
824 -> 820;
825 -> 815;
825 -> 820;
826 -> 824;
826 -> 815;
826 -> 767;
827 -> 824;
827 -> 767;
828 -> 766;
828 -> 767;
829 -> 766;
829 -> 767;
830 -> 828;
830 -> 827;
830 -> 767;
831 -> 767;
832 -> 767;
833 -> 830;
833 -> 832;
834 -> 831;
834 -> 832;
835 -> 829;
835 -> 832;
836 -> 834;
836 -> 832;
837 -> 833;
837 -> 832;
838 -> 832;
839 -> 835;
839 -> 827;
839 -> 832;
840 -> 832;
841 -> 837;
841 -> 840;
842 -> 838;
842 -> 840;
843 -> 839;
843 -> 840;
844 -> 835;
844 -> 840;
845 -> 843;
845 -> 840;
846 -> 842;
846 -> 840;
847 -> 844;
847 -> 827;
847 -> 846;
848 -> 844;
848 -> 827;
848 -> 847;
848 -> 840;
849 -> 845;
849 -> 848;
849 -> 827;
849 -> 847;
849 -> 840;
850 -> 841;
850 -> 840;
851 -> 840;
852 -> 850;
852 -> 851;
853 -> 844;
853 -> 851;
854 -> 852;
854 -> 851;
855 -> 851;
856 -> 854;
856 -> 855;
857 -> 853;
857 -> 855;
858 -> 855;
859 -> 856;
859 -> 858;
859 -> 855;
860 -> 855;
861 -> 857;
861 -> 849;
861 -> 860;
862 -> 860;
863 -> 861;
863 -> 855;
864 -> 856;
864 -> 855;
865 -> 863;
865 -> 849;
865 -> 864;
865 -> 855;
866 -> 851;
867 -> 853;
867 -> 865;
867 -> 866;
868 -> 866;
869 -> 867;
869 -> 851;
870 -> 849;
870 -> 840;
871 -> 840;
872 -> 870;
872 -> 871;
872 -> 840;
873 -> 872;
874 -> 873;
874 -> 869;
875 -> 874;
875 -> 872;
876 -> 849;
876 -> 872;
877 -> 875;
877 -> 872;
878 -> 872;
879 -> 840;
880 -> 877;
880 -> 869;
880 -> 840;
881 -> 840;
882 -> 880;
882 -> 881;
882 -> 840;
883 -> 841;
883 -> 840;
884 -> 842;
884 -> 840;
885 -> 877;
885 -> 869;
885 -> 840;
886 -> 840;
887 -> 883;
887 -> 886;
888 -> 884;
888 -> 886;
889 -> 885;
889 -> 886;
890 -> 844;
890 -> 886;
891 -> 890;
891 -> 886;
892 -> 887;
892 -> 886;
893 -> 888;
893 -> 886;
894 -> 891;
894 -> 892;
894 -> 893;
894 -> 877;
894 -> 886;
895 -> 886;
896 -> 894;
896 -> 886;
897 -> 886;
898 -> 897;
899 -> 889;
899 -> 897;
900 -> 897;
901 -> 899;
901 -> 900;
901 -> 897;
902 -> 889;
902 -> 897;
903 -> 896;
903 -> 897;
904 -> 899;
904 -> 897;
905 -> 902;
905 -> 903;
905 -> 904;
905 -> 896;
905 -> 897;
906 -> 894;
906 -> 905;
907 -> 828;
907 -> 767;
908 -> 906;
908 -> 831;
909 -> 908;
909 -> 906;
909 -> 831;
910 -> 909;
911 -> 910;
911 -> 909;
912 -> 909;
913 -> 911;
913 -> 912;
914 -> 908;
914 -> 912;
915 -> 912;
916 -> 914;
916 -> 915;
917 -> 915;
918 -> 916;
918 -> 917;
919 -> 918;
919 -> 915;
920 -> 916;
920 -> 912;
921 -> 913;
921 -> 920;
921 -> 910;
921 -> 916;
921 -> 912;
922 -> 912;
923 -> 914;
923 -> 922;
924 -> 923;
924 -> 921;
924 -> 922;
925 -> 923;
925 -> 921;
925 -> 922;
926 -> 925;
926 -> 912;
927 -> 912;
928 -> 927;
928 -> 926;
928 -> 921;
928 -> 912;
929 -> 927;
929 -> 928;
930 -> 926;
930 -> 929;
930 -> 927;
931 -> 909;
932 -> 908;
932 -> 909;
933 -> 932;
933 -> 930;
933 -> 909;
934 -> 909;
935 -> 910;
935 -> 933;
935 -> 909;
936 -> 908;
936 -> 935;
936 -> 909;
937 -> 933;
937 -> 909;
938 -> 909;
939 -> 908;
939 -> 936;
939 -> 831;
940 -> 906;
940 -> 831;
941 -> 831;
942 -> 940;
942 -> 941;
943 -> 941;
944 -> 943;
945 -> 942;
945 -> 944;
946 -> 945;
946 -> 939;
946 -> 944;
947 -> 945;
947 -> 939;
947 -> 944;
948 -> 947;
948 -> 943;
949 -> 942;
949 -> 939;
949 -> 943;
950 -> 949;
950 -> 831;
951 -> 831;
952 -> 766;
952 -> 767;
953 -> 766;
953 -> 767;
954 -> 952;
954 -> 950;
954 -> 767;
955 -> 767;
956 -> 954;
956 -> 955;
957 -> 954;
957 -> 955;
958 -> 953;
958 -> 955;
959 -> 955;
960 -> 958;
960 -> 959;
961 -> 959;
962 -> 960;
962 -> 961;
962 -> 950;
962 -> 959;
963 -> 962;
963 -> 959;
964 -> 963;
964 -> 955;
965 -> 957;
965 -> 955;
966 -> 956;
966 -> 965;
966 -> 962;
966 -> 950;
966 -> 955;
967 -> 955;
968 -> 958;
968 -> 967;
969 -> 968;
969 -> 966;
969 -> 967;
970 -> 955;
971 -> 969;
971 -> 964;
971 -> 955;
972 -> 766;
972 -> 767;
973 -> 766;
973 -> 767;
974 -> 766;
974 -> 767;
975 -> 973;
975 -> 767;
976 -> 972;
976 -> 767;
977 -> 767;
978 -> 767;
979 -> 976;
979 -> 978;
980 -> 977;
980 -> 978;
981 -> 974;
981 -> 978;
982 -> 980;
982 -> 978;
983 -> 979;
983 -> 978;
984 -> 978;
985 -> 983;
985 -> 984;
986 -> 981;
986 -> 984;
987 -> 985;
987 -> 984;
988 -> 984;
989 -> 987;
989 -> 988;
990 -> 986;
990 -> 988;
991 -> 988;
992 -> 989;
992 -> 991;
992 -> 988;
993 -> 988;
994 -> 993;
995 -> 989;
995 -> 988;
996 -> 984;
997 -> 996;
998 -> 978;
999 -> 978;
1000 -> 971;
1000 -> 978;
1001 -> 978;
1002 -> 1000;
1002 -> 1001;
1002 -> 978;
1003 -> 999;
1003 -> 978;
1004 -> 1000;
1004 -> 1003;
1004 -> 971;
1004 -> 978;
1005 -> 979;
1005 -> 978;
1006 -> 980;
1006 -> 978;
1007 -> 978;
1008 -> 1005;
1008 -> 1007;
1009 -> 1006;
1009 -> 1007;
1010 -> 981;
1010 -> 1007;
1011 -> 1010;
1011 -> 1007;
1012 -> 1008;
1012 -> 1007;
1013 -> 1009;
1013 -> 1007;
1014 -> 1007;
1015 -> 1007;
1016 -> 1015;
1017 -> 1015;
1018 -> 1004;
1018 -> 1017;
1018 -> 1015;
1019 -> 1016;
1019 -> 1015;
1020 -> 1004;
1020 -> 1019;
1020 -> 1015;
1021 -> 766;
1021 -> 767;
1022 -> 766;
1022 -> 767;
1023 -> 767;
1024 -> 1022;
1024 -> 1023;
1025 -> 1023;
1026 -> 1025;
1027 -> 1024;
1027 -> 1026;
1028 -> 1027;
1028 -> 1020;
1028 -> 1026;
1029 -> 1027;
1029 -> 1020;
1029 -> 1026;
1030 -> 1029;
1030 -> 1025;
1031 -> 767;
1032 -> 766;
1032 -> 767;
1033 -> 766;
1033 -> 767;
1034 -> 767;
1035 -> 1032;
1035 -> 1034;
1036 -> 1034;
1037 -> 1035;
1037 -> 1020;
1037 -> 1036;
1038 -> 1036;
1039 -> 1037;
1039 -> 767;
1040 -> 1033;
1040 -> 767;
1041 -> 1039;
1041 -> 1040;
1041 -> 767;
1042 -> 767;
1043 -> 1041;
1044 -> 1043;
1044 -> 1041;
1045 -> 1041;
1045 -> 815;
1045 -> 767;
1046 -> 766;
1046 -> 767;
1047 -> 766;
1047 -> 767;
1048 -> 1046;
1048 -> 767;
1049 -> 1048;
1049 -> 1041;
1049 -> 767;
1050 -> 1046;
1050 -> 1049;
1050 -> 767;
1051 -> 767;
1052 -> 1047;
1052 -> 1051;
1053 -> 1051;
1054 -> 1052;
1054 -> 1053;
1055 -> 1053;
1056 -> 1055;
1057 -> 1054;
1057 -> 1056;
1058 -> 1057;
1058 -> 1049;
1058 -> 1056;
1059 -> 1057;
1059 -> 1049;
1059 -> 1056;
1060 -> 1059;
1060 -> 1055;
1061 -> 1054;
1061 -> 1049;
1061 -> 1055;
1062 -> 1051;
1063 -> 1061;
1063 -> 767;
1064 -> 767;
1065 -> 1047;
1065 -> 1064;
1066 -> 1065;
1066 -> 1061;
1066 -> 1064;
1067 -> 1066;
1068 -> 1067;
1068 -> 1066;
1069 -> 1066;
1070 -> 1068;
1070 -> 1069;
1070 -> 1066;
1071 -> 1070;
1071 -> 1066;
1072 -> 1071;
1072 -> 1065;
1072 -> 1066;
1073 -> 1065;
1073 -> 1070;
1073 -> 1072;
1073 -> 1064;
1074 -> 1073;
1074 -> 767;
1075 -> 1074;
1076 -> 1046;
1076 -> 1075;
1076 -> 767;
1077 -> 1057;
1077 -> 1075;
1077 -> 1056;
1078 -> 1057;
1078 -> 1075;
1078 -> 1056;
1079 -> 1078;
1079 -> 1055;
1080 -> 1075;
1080 -> 767;
1081 -> 794;
1081 -> 1075;
1081 -> 767;
1082 -> 784;
1082 -> 1075;
1082 -> 767;
1083 -> 729;
1083 -> 728;
1084 -> 1083;
1085 -> 1084;
1085 -> 733;
1085 -> 1083;
1086 -> 1083;
1087 -> 1086;
1087 -> 733;
1087 -> 1083;
1088 -> 733;
1088 -> 1075;
1088 -> 1085;
1088 -> 1087;
1088 -> 728;
1089 -> 728;
1090 -> 731;
1090 -> 1089;
1090 -> 728;
1091 -> 729;
1091 -> 728;
1092 -> 730;
1092 -> 728;
1093 -> 732;
1093 -> 728;
1094 -> 728;
1095 -> 1091;
1095 -> 1094;
1096 -> 1092;
1096 -> 1094;
1097 -> 1093;
1097 -> 1094;
1098 -> 733;
1098 -> 1094;
1099 -> 1094;
1100 -> 1095;
1100 -> 1099;
1100 -> 1094;
1101 -> 1098;
1101 -> 1088;
1101 -> 1094;
1102 -> 1101;
1103 -> 1098;
1103 -> 1101;
1104 -> 1102;
1104 -> 1101;
1105 -> 1097;
1105 -> 1101;
1106 -> 1101;
1107 -> 1101;
1108 -> 1103;
1108 -> 1107;
1109 -> 1104;
1109 -> 1107;
1110 -> 1105;
1110 -> 1107;
1111 -> 1106;
1111 -> 1107;
1112 -> 1106;
1112 -> 1107;
1113 -> 1107;
1114 -> 1108;
1114 -> 1107;
1115 -> 1111;
1115 -> 1107;
1116 -> 1112;
1116 -> 1107;
1117 -> 1113;
1117 -> 1107;
1118 -> 1110;
1118 -> 1107;
1119 -> 1107;
1120 -> 1107;
1121 -> 1114;
1121 -> 1120;
1122 -> 1115;
1122 -> 1120;
1123 -> 1116;
1123 -> 1120;
1124 -> 1117;
1124 -> 1120;
1125 -> 1118;
1125 -> 1120;
1126 -> 1119;
1126 -> 1120;
1127 -> 1120;
1128 -> 1127;
1128 -> 1120;
1129 -> 1127;
1129 -> 1120;
1130 -> 1127;
1130 -> 1120;
1131 -> 1127;
1131 -> 1120;
1132 -> 1127;
1132 -> 1120;
1133 -> 1127;
1133 -> 1120;
1134 -> 1121;
1134 -> 1127;
1134 -> 1120;
1135 -> 1122;
1135 -> 1127;
1135 -> 1120;
1136 -> 1123;
1136 -> 1127;
1136 -> 1120;
1137 -> 1124;
1137 -> 1127;
1137 -> 1120;
1138 -> 1125;
1138 -> 1127;
1138 -> 1120;
1139 -> 0;
1139 -> 1120;
1140 -> 1139;
1140 -> 1127;
1140 -> 1120;
1141 -> 1120;
1142 -> 1127;
1142 -> 1141;
1143 -> 1141;
1144 -> 1142;
1144 -> 1127;
1144 -> 1129;
1144 -> 1135;
1144 -> 1143;
1144 -> 1141;
1145 -> 1141;
1146 -> 1142;
1146 -> 1127;
1146 -> 1128;
1146 -> 1134;
1146 -> 1145;
1147 -> 1144;
1147 -> 1146;
1147 -> 1127;
1147 -> 1088;
1147 -> 1141;
1148 -> 1147;
1148 -> 1120;
1149 -> 1148;
1150 -> 1149;
1150 -> 1127;
1150 -> 1148;
1151 -> 1107;
1152 -> 1108;
1152 -> 1151;
1153 -> 1151;
1154 -> 1152;
1154 -> 1153;
1155 -> 1154;
1155 -> 1151;
1156 -> 1152;
1156 -> 1107;
1157 -> 1156;
1157 -> 1119;
1157 -> 1152;
1157 -> 1127;
1157 -> 1128;
1157 -> 1134;
1157 -> 1129;
1157 -> 1135;
1157 -> 1130;
1157 -> 1136;
1157 -> 1131;
1157 -> 1137;
1157 -> 1132;
1157 -> 1140;
1157 -> 1133;
1157 -> 1150;
1157 -> 1138;
1157 -> 1106;
1157 -> 1113;
1157 -> 725;
1157 -> 1139;
1157 -> 1149;
1157 -> 1107;
1158 -> 1107;
1159 -> 1157;
1159 -> 1158;
1160 -> 1157;
1160 -> 1158;
1161 -> 1160;
1161 -> 1157;
1161 -> 1158;
1162 -> 1159;
1162 -> 1158;
1163 -> 1159;
1163 -> 1158;
1164 -> 1158;
1165 -> 1163;
1165 -> 1164;
1166 -> 1160;
1166 -> 1164;
1167 -> 1165;
1167 -> 1161;
1167 -> 0;
1167 -> 1164;
1168 -> 1164;
1169 -> 1165;
1169 -> 1161;
1169 -> 0;
1169 -> 1164;
1170 -> 1165;
1170 -> 1161;
1170 -> 0;
1170 -> 1169;
1171 -> 1165;
1171 -> 1161;
1171 -> 0;
1171 -> 1164;
1172 -> 1165;
1172 -> 1161;
1172 -> 0;
1172 -> 1164;
1173 -> 1165;
1173 -> 1161;
1173 -> 0;
1173 -> 1164;
1174 -> 1165;
1174 -> 1161;
1174 -> 0;
1174 -> 1164;
1175 -> 1165;
1175 -> 1161;
1175 -> 0;
1175 -> 1164;
1176 -> 1164;
1177 -> 1165;
1177 -> 1164;
1178 -> 1176;
1178 -> 1164;
1179 -> 1166;
1179 -> 1161;
1179 -> 1177;
1179 -> 1178;
1179 -> 1164;
1180 -> 1164;
1181 -> 1165;
1181 -> 1164;
1182 -> 1180;
1182 -> 1164;
1183 -> 1164;
1184 -> 1181;
1184 -> 1183;
1185 -> 1182;
1185 -> 1183;
1186 -> 1166;
1186 -> 1183;
1187 -> 1183;
1188 -> 1184;
1188 -> 1179;
1188 -> 1183;
1189 -> 1183;
1190 -> 1189;
1190 -> 1164;
1191 -> 1190;
1191 -> 1164;
1192 -> 1165;
1192 -> 1188;
1192 -> 0;
1192 -> 1191;
1193 -> 0;
1193 -> 1192;
1194 -> 1165;
1194 -> 1188;
1194 -> 0;
1194 -> 1164;
1195 -> 1194;
1195 -> 1164;
1196 -> 1193;
1196 -> 1195;
1197 -> 1196;
1197 -> 0;
1197 -> 1158;
1198 -> 1196;
1198 -> 1158;
1199 -> 1158;
1200 -> 1198;
1200 -> 1199;
1201 -> 1200;
1201 -> 1199;
1202 -> 1201;
1203 -> 1158;
1204 -> 1203;
1204 -> 1159;
1204 -> 1196;
1204 -> 1158;
1205 -> 1159;
1205 -> 1196;
1205 -> 1203;
1205 -> 1204;
1206 -> 1204;
1207 -> 1205;
1207 -> 1204;
1208 -> 1206;
1208 -> 1204;
1209 -> 1204;
1210 -> 1207;
1210 -> 1209;
1211 -> 1208;
1211 -> 1209;
1212 -> 1160;
1212 -> 1209;
1213 -> 1209;
1214 -> 1209;
1214 -> 1204;
1215 -> 1204;
1216 -> 1215;
1216 -> 1204;
1217 -> 1213;
1217 -> 1216;
1218 -> 1204;
1219 -> 1217;
1219 -> 1218;
1219 -> 1204;
1220 -> 1219;
1220 -> 1214;
1220 -> 1204;
1221 -> 1214;
1221 -> 1204;
1222 -> 1202;
1222 -> 1221;
1223 -> 1202;
1223 -> 1158;
1224 -> 1158;
1225 -> 1159;
1225 -> 1210;
1225 -> 1224;
1225 -> 1158;
1226 -> 1225;
1226 -> 1158;
1227 -> 1158;
1228 -> 1226;
1228 -> 1227;
1229 -> 1160;
1229 -> 1227;
1230 -> 1228;
1230 -> 1225;
1230 -> 0;
1230 -> 1227;
1231 -> 1227;
1232 -> 1228;
1232 -> 1225;
1232 -> 0;
1232 -> 1227;
1233 -> 1228;
1233 -> 1225;
1233 -> 0;
1233 -> 1232;
1234 -> 1228;
1234 -> 1225;
1234 -> 0;
1234 -> 1227;
1235 -> 1228;
1235 -> 1225;
1235 -> 0;
1235 -> 1227;
1236 -> 1228;
1236 -> 1225;
1236 -> 0;
1236 -> 1227;
1237 -> 1228;
1237 -> 1225;
1237 -> 0;
1237 -> 1227;
1238 -> 1228;
1238 -> 1225;
1238 -> 0;
1238 -> 1227;
1239 -> 1227;
1240 -> 1239;
1240 -> 1227;
1241 -> 1227;
1242 -> 1241;
1242 -> 1227;
1243 -> 1227;
1244 -> 1242;
1244 -> 1243;
1245 -> 1229;
1245 -> 1243;
1246 -> 1243;
1247 -> 1243;
1248 -> 1247;
1248 -> 1227;
1249 -> 1248;
1249 -> 1227;
1250 -> 1228;
1251 -> 1228;
1252 -> 1250;
1252 -> 1251;
1253 -> 1229;
1253 -> 1251;
1254 -> 1252;
1254 -> 1228;
1254 -> 0;
1254 -> 1251;
1255 -> 1252;
1255 -> 1228;
1255 -> 1251;
1256 -> 1251;
1257 -> 1255;
1257 -> 1256;
1257 -> 1251;
1258 -> 1255;
1258 -> 1251;
1259 -> 1251;
1260 -> 1258;
1260 -> 1259;
1261 -> 1253;
1261 -> 1259;
1262 -> 1260;
1262 -> 1228;
1262 -> 0;
1262 -> 1259;
1263 -> 1259;
1264 -> 1260;
1264 -> 1228;
1264 -> 0;
1264 -> 1259;
1265 -> 1260;
1265 -> 1228;
1265 -> 0;
1265 -> 1264;
1266 -> 1260;
1266 -> 1228;
1266 -> 0;
1266 -> 1259;
1267 -> 1260;
1267 -> 1228;
1267 -> 0;
1267 -> 1259;
1268 -> 1260;
1268 -> 1228;
1268 -> 0;
1268 -> 1259;
1269 -> 1260;
1269 -> 1228;
1269 -> 0;
1269 -> 1259;
1270 -> 1260;
1270 -> 1228;
1270 -> 0;
1270 -> 1259;
1271 -> 1261;
1271 -> 1228;
1271 -> 1260;
1271 -> 1259;
1272 -> 1271;
1273 -> 1228;
1274 -> 1272;
1274 -> 1273;
1275 -> 1274;
1275 -> 1273;
1276 -> 1275;
1277 -> 1158;
1278 -> 1276;
1278 -> 1277;
1279 -> 1159;
1279 -> 1271;
1279 -> 1158;
1280 -> 1158;
1281 -> 1279;
1281 -> 1280;
1282 -> 1279;
1282 -> 1280;
1283 -> 1282;
1283 -> 1279;
1283 -> 1280;
1284 -> 1281;
1284 -> 1280;
1285 -> 1280;
1286 -> 1284;
1286 -> 1285;
1287 -> 1282;
1287 -> 1285;
1288 -> 1286;
1288 -> 1283;
1288 -> 0;
1288 -> 1285;
1289 -> 1288;
1290 -> 1281;
1290 -> 1280;
1291 -> 1280;
1292 -> 1290;
1292 -> 1291;
1293 -> 1282;
1293 -> 1291;
1294 -> 1292;
1294 -> 1283;
1294 -> 0;
1294 -> 1291;
1295 -> 1291;
1296 -> 1292;
1296 -> 1283;
1296 -> 0;
1296 -> 1291;
1297 -> 1292;
1297 -> 1283;
1297 -> 1296;
1298 -> 1296;
1299 -> 1297;
1299 -> 1298;
1300 -> 1299;
1300 -> 1283;
1300 -> 0;
1300 -> 1298;
1301 -> 1298;
1302 -> 1299;
1302 -> 1283;
1302 -> 0;
1303 -> 1299;
1303 -> 1283;
1303 -> 0;
1303 -> 1298;
1304 -> 1299;
1304 -> 1283;
1304 -> 0;
1304 -> 1298;
1305 -> 1299;
1305 -> 1283;
1305 -> 0;
1305 -> 1298;
1306 -> 1299;
1306 -> 1283;
1306 -> 0;
1306 -> 1298;
1307 -> 1299;
1307 -> 1283;
1307 -> 0;
1307 -> 1298;
1308 -> 1299;
1309 -> 1280;
1310 -> 1308;
1310 -> 1309;
1311 -> 1310;
1311 -> 1309;
1312 -> 1311;
1313 -> 1280;
1314 -> 1282;
1314 -> 1313;
1315 -> 1313;
1316 -> 1314;
1316 -> 1299;
1316 -> 1315;
1316 -> 1313;
1317 -> 1313;
1318 -> 1314;
1318 -> 1299;
1318 -> 1317;
1319 -> 1316;
1319 -> 1280;
1320 -> 1281;
1320 -> 1319;
1321 -> 1319;
1322 -> 1320;
1322 -> 1321;
1323 -> 1282;
1323 -> 1321;
1324 -> 1322;
1324 -> 1299;
1324 -> 1321;
1325 -> 1324;
1326 -> 1323;
1326 -> 1324;
1327 -> 1319;
1328 -> 1107;
1329 -> 1119;
1329 -> 1328;
1330 -> 1329;
1330 -> 1326;
1330 -> 1328;
1331 -> 1328;
1332 -> 1330;
1332 -> 1331;
1332 -> 1328;
1333 -> 1328;
1334 -> 1330;
1334 -> 1333;
1334 -> 1326;
1334 -> 1328;
1335 -> 1334;
1336 -> 1107;
1337 -> 1113;
1337 -> 1107;
1338 -> 1337;
1338 -> 1335;
1338 -> 1107;
1339 -> 1098;
1339 -> 1335;
1339 -> 1101;
1340 -> 1102;
1340 -> 1101;
1341 -> 1339;
1341 -> 1340;
1341 -> 1335;
1341 -> 1101;
1342 -> 1098;
1342 -> 1341;
1342 -> 1094;
1343 -> 1098;
1343 -> 1341;
1343 -> 1094;
1344 -> 1088;
1344 -> 728;
1345 -> 1344;
1345 -> 1341;
1345 -> 728;
1346 -> 1343;
1346 -> 728;
1347 -> 691;
1348 -> 656;
1348 -> 1346;
1348 -> 1347;
1348 -> 691;
1349 -> 655;
1349 -> 1346;
1349 -> 651;
1350 -> 652;
1350 -> 0;
1350 -> 651;
1351 -> 1350;
1352 -> 1351;
1352 -> 1350;
1353 -> 655;
1353 -> 1350;
1354 -> 1350;
1355 -> 1352;
1355 -> 1354;
1356 -> 1353;
1356 -> 1354;
1357 -> 656;
1357 -> 1354;
1358 -> 1357;
1358 -> 1354;
1359 -> 1354;
1360 -> 1355;
1360 -> 1354;
1361 -> 1356;
1361 -> 1354;
1362 -> 1354;
1363 -> 1358;
1363 -> 1362;
1364 -> 1359;
1364 -> 1362;
1365 -> 1359;
1365 -> 1362;
1366 -> 1359;
1366 -> 1362;
1367 -> 1359;
1367 -> 1362;
1368 -> 1360;
1368 -> 1362;
1369 -> 1359;
1369 -> 1362;
1370 -> 1361;
1370 -> 1362;
1371 -> 1362;
1372 -> 1363;
1372 -> 1371;
1372 -> 1362;
1373 -> 1362;
1374 -> 1368;
1374 -> 1373;
1374 -> 1362;
1375 -> 1362;
1376 -> 1363;
1376 -> 1375;
1377 -> 1376;
1377 -> 1349;
1377 -> 1375;
1378 -> 1377;
1378 -> 1362;
1379 -> 1362;
1380 -> 1362;
1381 -> 1369;
1381 -> 1362;
1382 -> 1363;
1382 -> 1381;
1383 -> 1364;
1383 -> 1381;
1384 -> 1367;
1384 -> 1381;
1385 -> 1368;
1385 -> 1381;
1386 -> 1370;
1386 -> 1381;
1387 -> 1381;
1388 -> 1382;
1388 -> 1387;
1389 -> 1383;
1389 -> 1387;
1390 -> 1384;
1390 -> 1387;
1391 -> 1385;
1391 -> 1387;
1392 -> 1386;
1392 -> 1387;
1393 -> 1392;
1393 -> 1387;
1394 -> 1387;
1395 -> 1393;
1395 -> 1394;
1396 -> 1388;
1396 -> 1394;
1397 -> 1394;
1398 -> 1396;
1398 -> 1349;
1398 -> 1397;
1398 -> 1394;
1399 -> 1398;
1400 -> 1396;
1400 -> 1398;
1401 -> 1398;
1402 -> 1401;
1403 -> 1402;
1403 -> 1401;
1404 -> 1398;
1405 -> 1404;
1405 -> 1400;
1406 -> 1405;
1406 -> 1398;
1407 -> 1406;
1408 -> 1406;
1409 -> 1408;
1409 -> 1406;
1410 -> 1406;
1411 -> 1406;
1412 -> 1411;
1412 -> 1406;
1413 -> 1409;
1413 -> 1412;
1413 -> 1406;
1414 -> 1407;
1414 -> 1406;
1415 -> 1414;
1416 -> 1415;
1416 -> 1414;
1417 -> 1400;
1417 -> 1414;
1418 -> 1395;
1418 -> 1414;
1419 -> 1415;
1419 -> 1414;
1420 -> 1414;
1421 -> 1417;
1421 -> 1420;
1422 -> 1418;
1422 -> 1420;
1423 -> 1419;
1423 -> 1420;
1424 -> 1396;
1424 -> 1420;
1425 -> 1420;
1426 -> 1420;
1427 -> 1420;
1428 -> 1420;
1429 -> 1424;
1429 -> 1428;
1430 -> 1429;
1430 -> 1420;
1431 -> 1420;
1432 -> 1424;
1432 -> 1431;
1433 -> 1431;
1434 -> 1432;
1434 -> 1433;
1435 -> 1434;
1435 -> 1431;
1436 -> 1432;
1436 -> 1420;
1437 -> 1420;
1438 -> 1424;
1438 -> 1437;
1439 -> 1438;
1439 -> 1432;
1439 -> 1437;
1440 -> 1437;
1441 -> 1439;
1441 -> 1440;
1442 -> 1441;
1442 -> 1439;
1442 -> 1440;
1443 -> 1440;
1444 -> 1442;
1444 -> 1443;
1445 -> 1443;
1446 -> 1444;
1446 -> 1445;
1447 -> 1445;
1448 -> 1446;
1448 -> 1447;
1449 -> 1448;
1449 -> 1445;
1450 -> 1446;
1450 -> 1443;
1451 -> 1442;
1451 -> 1443;
1452 -> 1443;
1453 -> 1451;
1453 -> 1452;
1454 -> 1453;
1454 -> 1450;
1454 -> 1452;
1455 -> 1454;
1455 -> 1443;
1456 -> 1455;
1456 -> 1420;
1457 -> 1420;
1458 -> 1430;
1458 -> 1457;
1458 -> 1420;
1459 -> 1456;
1459 -> 1458;
1460 -> 1458;
1461 -> 1436;
1461 -> 1460;
1461 -> 1455;
1461 -> 1458;
1462 -> 1461;
1462 -> 1458;
1463 -> 1461;
1463 -> 1458;
1464 -> 1463;
1464 -> 1458;
1465 -> 1463;
1465 -> 1461;
1465 -> 0;
1465 -> 1458;
1466 -> 1426;
1466 -> 1458;
1467 -> 1463;
1467 -> 1461;
1467 -> 1458;
1468 -> 1458;
1469 -> 1466;
1469 -> 1468;
1470 -> 1467;
1470 -> 1468;
1471 -> 1470;
1471 -> 1468;
1472 -> 1471;
1473 -> 1472;
1474 -> 1469;
1474 -> 1473;
1474 -> 1426;
1474 -> 1467;
1474 -> 1472;
1475 -> 1458;
1476 -> 1420;
1477 -> 1420;
1478 -> 1420;
1479 -> 1426;
1479 -> 1420;
1480 -> 1479;
1480 -> 1474;
1480 -> 1420;
1481 -> 1480;
1482 -> 1480;
1483 -> 1481;
1483 -> 1480;
1484 -> 1480;
1485 -> 1482;
1485 -> 1484;
1486 -> 1483;
1486 -> 1484;
1487 -> 1424;
1487 -> 1484;
1488 -> 1485;
1488 -> 1474;
1488 -> 1484;
1489 -> 1485;
1489 -> 1474;
1489 -> 1484;
1490 -> 1484;
1491 -> 1489;
1491 -> 1474;
1491 -> 0;
1491 -> 1484;
1492 -> 1489;
1492 -> 1484;
1493 -> 1485;
1493 -> 1492;
1493 -> 0;
1493 -> 1484;
1494 -> 1484;
1495 -> 1485;
1495 -> 1492;
1495 -> 1494;
1495 -> 1484;
1496 -> 1495;
1497 -> 1496;
1497 -> 1495;
1498 -> 1490;
1498 -> 1496;
1498 -> 1495;
1499 -> 1497;
1499 -> 1480;
1500 -> 1480;
1500 -> 1499;
1501 -> 1497;
1501 -> 1499;
1502 -> 1481;
1502 -> 1499;
1503 -> 1499;
1504 -> 1500;
1504 -> 1503;
1505 -> 1501;
1505 -> 1503;
1506 -> 1502;
1506 -> 1503;
1507 -> 1424;
1507 -> 1503;
1508 -> 1505;
1508 -> 1503;
1509 -> 1504;
1509 -> 1492;
1509 -> 1503;
1510 -> 1503;
1511 -> 1510;
1511 -> 1499;
1512 -> 1480;
1512 -> 1492;
1512 -> 1511;
1513 -> 1481;
1513 -> 1512;
1514 -> 1425;
1514 -> 1513;
1514 -> 1481;
1514 -> 1512;
1515 -> 1480;
1515 -> 1512;
1516 -> 1478;
1516 -> 1515;
1516 -> 1492;
1516 -> 1512;
1517 -> 1481;
1517 -> 1514;
1517 -> 1499;
1518 -> 1420;
1519 -> 1478;
1519 -> 1516;
1519 -> 1518;
1519 -> 1420;
1520 -> 0;
1520 -> 1519;
1521 -> 1519;
1522 -> 1476;
1522 -> 1521;
1522 -> 1519;
1523 -> 1420;
1524 -> 1478;
1524 -> 1516;
1524 -> 1523;
1524 -> 1420;
1525 -> 1463;
1525 -> 1524;
1526 -> 1420;
1527 -> 1420;
1528 -> 1478;
1528 -> 1516;
1528 -> 1527;
1528 -> 1420;
1529 -> 1478;
1529 -> 1528;
1530 -> 1529;
1531 -> 1528;
1532 -> 1478;
1532 -> 1530;
1532 -> 1531;
1532 -> 1528;
1533 -> 1532;
1534 -> 1476;
1534 -> 1420;
1535 -> 1478;
1535 -> 1533;
1535 -> 1420;
1536 -> 1477;
1536 -> 1420;
1537 -> 1533;
1537 -> 1420;
1538 -> 1426;
1538 -> 1535;
1538 -> 1420;
1539 -> 1425;
1539 -> 1517;
1539 -> 1420;
1540 -> 1537;
1540 -> 1414;
1542 -> 0;
1544 -> 1541;
1544 -> 1543;
1545 -> 1542;
1545 -> 1543;
1546 -> 1543;
1547 -> 1546;
1547 -> 1543;
1548 -> 1544;
1548 -> 1546;
1548 -> 1543;
1549 -> 1545;
1549 -> 1546;
1549 -> 1543;
1550 -> 1543;
1551 -> 1540;
1551 -> 1414;
1552 -> 1539;
1552 -> 1414;
1553 -> 1414;
1554 -> 1414;
1555 -> 1551;
1555 -> 1554;
1556 -> 1552;
1556 -> 1554;
1557 -> 1553;
1557 -> 1554;
1558 -> 1557;
1558 -> 1554;
1559 -> 1555;
1559 -> 1557;
1559 -> 1554;
1560 -> 1556;
1560 -> 1557;
1560 -> 1554;
1561 -> 1406;
1562 -> 1561;
1562 -> 1538;
1563 -> 1562;
1563 -> 1406;
1564 -> 1406;
1565 -> 1396;
1565 -> 1538;
1565 -> 1398;
1566 -> 1553;
1566 -> 1398;
1567 -> 1398;
1568 -> 1565;
1568 -> 1566;
1568 -> 1567;
1568 -> 1559;
1568 -> 1560;
1568 -> 1538;
1568 -> 1539;
1568 -> 1398;
1569 -> 1396;
1569 -> 1568;
1569 -> 1394;
1570 -> 1569;
1570 -> 1387;
1571 -> 1570;
1571 -> 1568;
1571 -> 1387;
1572 -> 1570;
1572 -> 1568;
1572 -> 1387;
1573 -> 1391;
1573 -> 1572;
1573 -> 1351;
1573 -> 1568;
1573 -> 1387;
1574 -> 1570;
1574 -> 1573;
1574 -> 1387;
1575 -> 1387;
1576 -> 1574;
1576 -> 1575;
1576 -> 1387;
1577 -> 1574;
1577 -> 1387;
1578 -> 1387;
1579 -> 1577;
1579 -> 1578;
1579 -> 1387;
1580 -> 1574;
1580 -> 1573;
1580 -> 1579;
1581 -> 1580;
1581 -> 1579;
1582 -> 1388;
1582 -> 1579;
1583 -> 1579;
1584 -> 1583;
1585 -> 1581;
1585 -> 1584;
1586 -> 1585;
1586 -> 1583;
1587 -> 1387;
1588 -> 1577;
1588 -> 1587;
1588 -> 1387;
1589 -> 1574;
1589 -> 1387;
1590 -> 1363;
1590 -> 1362;
1591 -> 1364;
1591 -> 1362;
1592 -> 1365;
1592 -> 1362;
1593 -> 1366;
1593 -> 1362;
1594 -> 1367;
1594 -> 1362;
1595 -> 1368;
1595 -> 1362;
1596 -> 1369;
1596 -> 1362;
1597 -> 1589;
1597 -> 1362;
1598 -> 1370;
1598 -> 1362;
1599 -> 1362;
1600 -> 1362;
1601 -> 1590;
1601 -> 1600;
1602 -> 1591;
1602 -> 1600;
1603 -> 1592;
1603 -> 1600;
1604 -> 1593;
1604 -> 1600;
1605 -> 1594;
1605 -> 1600;
1606 -> 1595;
1606 -> 1600;
1607 -> 1596;
1607 -> 1600;
1608 -> 1597;
1608 -> 1600;
1609 -> 1598;
1609 -> 1600;
1610 -> 1599;
1610 -> 1600;
1611 -> 1600;
1612 -> 1611;
1612 -> 1600;
1613 -> 1611;
1613 -> 1600;
1614 -> 1611;
1614 -> 1600;
1615 -> 1611;
1615 -> 1600;
1616 -> 1611;
1616 -> 1600;
1617 -> 1611;
1617 -> 1600;
1618 -> 1611;
1618 -> 1600;
1619 -> 1611;
1619 -> 1600;
1620 -> 1611;
1620 -> 1600;
1621 -> 1611;
1621 -> 1600;
1622 -> 1611;
1622 -> 1600;
1623 -> 1600;
1624 -> 1601;
1624 -> 1623;
1624 -> 1600;
1625 -> 1600;
1626 -> 1606;
1626 -> 1625;
1626 -> 1600;
1627 -> 1601;
1627 -> 1611;
1627 -> 1600;
1628 -> 1602;
1628 -> 1611;
1628 -> 1600;
1629 -> 1603;
1629 -> 1611;
1629 -> 1600;
1630 -> 1609;
1630 -> 1611;
1630 -> 1600;
1631 -> 1606;
1631 -> 1611;
1631 -> 1600;
1632 -> 1607;
1632 -> 1611;
1632 -> 1600;
1633 -> 1608;
1633 -> 1611;
1633 -> 1600;
1634 -> 1605;
1634 -> 1611;
1634 -> 1600;
1635 -> 1605;
1635 -> 1600;
1636 -> 1600;
1637 -> 1635;
1637 -> 1636;
1638 -> 1611;
1638 -> 1636;
1639 -> 1637;
1639 -> 1636;
1640 -> 1600;
1641 -> 1603;
1641 -> 1604;
1641 -> 1600;
1642 -> 1604;
1642 -> 1611;
1642 -> 1600;
1643 -> 1362;
1644 -> 1363;
1644 -> 1643;
1645 -> 1644;
1645 -> 1581;
1645 -> 1643;
1646 -> 1645;
1646 -> 1362;
1647 -> 1646;
1648 -> 1647;
1648 -> 1599;
1648 -> 1646;
1649 -> 1362;
1650 -> 1363;
1650 -> 1649;
1651 -> 1649;
1652 -> 1650;
1652 -> 1651;
1653 -> 1651;
1654 -> 1652;
1654 -> 1653;
1655 -> 1653;
1656 -> 1654;
1656 -> 1655;
1657 -> 1656;
1657 -> 1581;
1657 -> 1655;
1658 -> 1656;
1658 -> 1581;
1658 -> 1655;
1659 -> 1658;
1659 -> 1653;
1660 -> 1654;
1660 -> 1581;
1660 -> 1653;
1661 -> 1649;
1662 -> 1660;
1662 -> 1362;
1663 -> 1362;
1664 -> 1662;
1664 -> 1663;
1665 -> 1599;
1665 -> 1663;
1666 -> 1664;
1666 -> 1660;
1666 -> 1663;
1667 -> 1665;
1667 -> 1666;
1668 -> 1666;
1669 -> 1667;
1669 -> 1668;
1669 -> 1666;
1669 -> 1611;
1669 -> 1612;
1669 -> 1627;
1669 -> 1613;
1669 -> 1629;
1669 -> 1614;
1669 -> 1642;
1669 -> 1615;
1669 -> 1631;
1669 -> 1616;
1669 -> 1634;
1669 -> 1617;
1669 -> 1628;
1669 -> 1618;
1669 -> 1632;
1669 -> 1619;
1669 -> 1620;
1669 -> 1633;
1669 -> 1621;
1669 -> 1648;
1669 -> 1622;
1669 -> 1630;
1669 -> 1349;
1669 -> 1647;
1670 -> 1669;
1670 -> 1668;
1671 -> 1669;
1671 -> 1668;
1672 -> 1669;
1672 -> 1668;
1673 -> 1672;
1673 -> 1669;
1673 -> 1668;
1674 -> 1670;
1674 -> 1668;
1675 -> 1668;
1676 -> 1673;
1676 -> 1675;
1677 -> 1674;
1677 -> 1675;
1678 -> 1675;
1679 -> 1676;
1679 -> 1678;
1679 -> 1675;
1680 -> 1668;
1681 -> 1672;
1681 -> 1669;
1681 -> 1668;
1682 -> 1668;
1683 -> 1672;
1683 -> 1681;
1683 -> 1682;
1684 -> 1683;
1684 -> 1668;
1685 -> 1670;
1685 -> 1684;
1686 -> 1684;
1687 -> 1685;
1687 -> 1686;
1688 -> 1672;
1688 -> 1686;
1689 -> 1686;
1690 -> 1688;
1690 -> 1681;
1690 -> 1686;
1691 -> 1690;
1691 -> 1684;
1692 -> 1691;
1692 -> 1684;
1693 -> 1668;
1694 -> 1669;
1694 -> 1693;
1694 -> 1692;
1694 -> 1666;
1695 -> 1362;
1696 -> 1362;
1697 -> 1599;
1697 -> 1696;
1698 -> 1697;
1698 -> 1694;
1698 -> 1696;
1699 -> 1696;
1700 -> 1698;
1700 -> 1699;
1700 -> 1696;
1701 -> 1696;
1702 -> 1701;
1702 -> 1696;
1703 -> 1698;
1703 -> 1702;
1703 -> 1694;
1703 -> 1696;
1704 -> 1703;
1705 -> 1362;
1706 -> 1362;
1707 -> 1364;
1707 -> 1706;
1707 -> 1362;
1708 -> 1362;
1709 -> 1364;
1709 -> 1708;
1709 -> 1362;
1710 -> 1362;
1711 -> 1363;
1711 -> 1710;
1712 -> 1711;
1712 -> 1704;
1712 -> 1710;
1713 -> 1712;
1713 -> 1362;
1714 -> 1362;
1715 -> 1369;
1715 -> 1714;
1715 -> 1362;
1716 -> 1363;
1716 -> 1715;
1717 -> 1368;
1717 -> 1715;
1718 -> 1370;
1718 -> 1715;
1719 -> 1715;
1720 -> 1716;
1720 -> 1719;
1721 -> 1717;
1721 -> 1719;
1722 -> 1718;
1722 -> 1719;
1723 -> 1719;
1724 -> 1720;
1724 -> 1723;
1725 -> 1723;
1726 -> 1724;
1726 -> 1725;
1727 -> 1725;
1728 -> 1726;
1728 -> 1727;
1729 -> 1728;
1729 -> 1713;
1729 -> 1727;
1730 -> 1728;
1730 -> 1713;
1730 -> 1727;
1731 -> 1730;
1731 -> 1725;
1732 -> 1726;
1732 -> 1713;
1732 -> 1725;
1733 -> 1732;
1733 -> 1719;
1734 -> 1722;
1734 -> 1719;
1735 -> 1734;
1735 -> 1733;
1735 -> 1349;
1735 -> 1732;
1735 -> 1719;
1736 -> 1719;
1737 -> 1721;
1737 -> 1735;
1737 -> 1719;
1738 -> 1715;
1739 -> 1715;
1740 -> 1364;
1740 -> 1739;
1740 -> 1715;
1745 -> 1742;
1745 -> 1741;
1746 -> 1743;
1746 -> 1741;
1747 -> 1744;
1747 -> 1741;
1748 -> 1741;
1749 -> 1357;
1749 -> 1354;
1750 -> 1354;
1751 -> 1355;
1751 -> 1354;
1752 -> 1356;
1752 -> 1354;
1753 -> 1354;
1754 -> 1749;
1754 -> 1753;
1755 -> 1750;
1755 -> 1753;
1756 -> 1750;
1756 -> 1753;
1757 -> 1751;
1757 -> 1753;
1758 -> 1752;
1758 -> 1753;
1759 -> 1750;
1759 -> 1753;
1760 -> 1750;
1760 -> 1753;
1761 -> 1753;
1762 -> 1753;
1763 -> 1756;
1763 -> 1762;
1763 -> 1753;
1764 -> 1753;
1765 -> 1754;
1765 -> 1764;
1766 -> 1764;
1767 -> 1765;
1767 -> 1766;
1768 -> 1767;
1768 -> 1737;
1768 -> 1766;
1769 -> 1767;
1769 -> 1737;
1769 -> 1766;
1770 -> 1769;
1770 -> 1764;
1771 -> 1765;
1771 -> 1737;
1771 -> 1764;
1772 -> 1771;
1772 -> 1753;
1773 -> 1772;
1773 -> 1755;
1773 -> 1753;
1774 -> 1754;
1774 -> 1753;
1775 -> 1761;
1775 -> 1753;
1776 -> 1759;
1776 -> 1753;
1777 -> 1760;
1777 -> 1753;
1778 -> 1753;
1779 -> 1757;
1779 -> 1753;
1780 -> 1758;
1780 -> 1753;
1781 -> 1753;
1782 -> 1773;
1782 -> 1781;
1783 -> 1774;
1783 -> 1781;
1784 -> 1775;
1784 -> 1781;
1785 -> 1776;
1785 -> 1781;
1786 -> 1777;
1786 -> 1781;
1787 -> 1778;
1787 -> 1781;
1788 -> 1778;
1788 -> 1781;
1789 -> 1779;
1789 -> 1781;
1790 -> 1780;
1790 -> 1781;
1791 -> 1778;
1791 -> 1781;
1792 -> 1781;
1793 -> 1792;
1793 -> 1781;
1794 -> 1792;
1794 -> 1781;
1795 -> 1792;
1795 -> 1781;
1796 -> 1792;
1796 -> 1781;
1797 -> 1792;
1797 -> 1781;
1798 -> 1792;
1798 -> 1781;
1799 -> 1792;
1799 -> 1781;
1800 -> 1792;
1800 -> 1781;
1801 -> 1792;
1801 -> 1781;
1802 -> 1792;
1802 -> 1781;
1803 -> 1792;
1803 -> 1781;
1804 -> 1792;
1804 -> 1781;
1805 -> 1782;
1805 -> 1792;
1805 -> 1781;
1806 -> 1783;
1806 -> 1792;
1806 -> 1781;
1807 -> 1784;
1807 -> 1792;
1807 -> 1781;
1808 -> 1785;
1808 -> 1792;
1808 -> 1781;
1809 -> 1786;
1809 -> 1792;
1809 -> 1781;
1810 -> 1787;
1810 -> 1792;
1810 -> 1781;
1811 -> 1788;
1811 -> 1792;
1811 -> 1781;
1812 -> 1789;
1812 -> 1792;
1812 -> 1781;
1813 -> 1790;
1813 -> 1792;
1813 -> 1781;
1814 -> 1753;
1815 -> 1754;
1815 -> 1814;
1816 -> 1814;
1817 -> 1815;
1817 -> 1816;
1818 -> 1817;
1818 -> 1771;
1818 -> 1816;
1819 -> 1817;
1819 -> 1771;
1819 -> 1816;
1820 -> 1819;
1820 -> 1814;
1821 -> 1815;
1821 -> 1771;
1821 -> 1814;
1822 -> 1821;
1822 -> 1753;
1823 -> 1822;
1823 -> 1778;
1823 -> 1821;
1823 -> 1792;
1823 -> 1793;
1823 -> 1805;
1823 -> 1794;
1823 -> 1806;
1823 -> 1795;
1823 -> 1807;
1823 -> 1796;
1823 -> 1808;
1823 -> 1797;
1823 -> 1809;
1823 -> 1798;
1823 -> 1810;
1823 -> 1799;
1823 -> 1811;
1823 -> 1800;
1823 -> 1812;
1823 -> 1801;
1823 -> 1802;
1823 -> 1803;
1823 -> 1804;
1823 -> 1813;
1823 -> 1750;
1823 -> 1349;
1823 -> 1753;
1824 -> 1753;
1825 -> 1823;
1825 -> 1824;
1826 -> 1823;
1826 -> 1824;
1827 -> 1826;
1827 -> 1823;
1827 -> 1824;
1828 -> 1825;
1828 -> 1827;
1828 -> 1824;
1829 -> 1828;
1830 -> 1828;
1831 -> 1828;
1832 -> 1830;
1832 -> 1831;
1833 -> 1826;
1833 -> 1831;
1834 -> 1833;
1834 -> 1827;
1834 -> 1831;
1835 -> 1831;
1836 -> 1834;
1837 -> 1828;
1838 -> 1828;
1839 -> 1837;
1839 -> 1838;
1840 -> 1826;
1840 -> 1838;
1841 -> 1840;
1841 -> 1827;
1841 -> 1838;
1842 -> 1838;
1843 -> 1841;
1844 -> 1828;
1845 -> 1826;
1845 -> 1844;
1846 -> 1845;
1846 -> 1827;
1846 -> 1844;
1847 -> 1828;
1848 -> 1828;
1849 -> 1848;
1849 -> 1828;
1850 -> 1849;
1851 -> 1849;
1852 -> 1850;
1852 -> 1851;
1853 -> 1826;
1853 -> 1851;
1854 -> 1853;
1854 -> 1827;
1854 -> 1851;
1855 -> 1851;
1856 -> 1854;
1857 -> 1849;
1858 -> 1826;
1858 -> 1857;
1859 -> 1858;
1859 -> 1827;
1859 -> 1846;
1859 -> 1857;
1860 -> 1849;
1861 -> 1849;
1862 -> 1826;
1862 -> 1827;
1862 -> 1861;
1862 -> 1849;
1863 -> 1849;
1864 -> 1861;
1864 -> 1863;
1865 -> 1861;
1865 -> 1863;
1866 -> 1826;
1866 -> 1863;
1867 -> 1864;
1867 -> 1863;
1868 -> 1865;
1868 -> 1863;
1869 -> 1867;
1869 -> 1868;
1869 -> 1863;
1870 -> 1863;
1871 -> 1869;
1871 -> 1870;
1872 -> 1866;
1872 -> 1870;
1873 -> 1872;
1873 -> 1827;
1873 -> 1870;
1874 -> 1870;
1875 -> 1873;
1876 -> 1863;
1877 -> 1849;
1878 -> 1826;
1878 -> 1877;
1879 -> 1878;
1879 -> 1827;
1879 -> 1846;
1879 -> 1859;
1879 -> 1877;
1880 -> 1877;
1881 -> 1878;
1881 -> 1827;
1881 -> 1846;
1881 -> 1859;
1881 -> 1879;
1881 -> 1880;
1881 -> 1877;
1882 -> 1849;
1883 -> 1849;
1884 -> 1849;
1885 -> 1883;
1885 -> 1884;
1886 -> 1826;
1886 -> 1884;
1887 -> 1886;
1887 -> 1827;
1887 -> 1884;
1888 -> 1884;
1889 -> 1887;
1890 -> 1828;
1891 -> 1828;
1892 -> 1890;
1892 -> 1891;
1893 -> 1826;
1893 -> 1891;
1894 -> 1893;
1894 -> 1827;
1894 -> 1891;
1895 -> 1891;
1896 -> 1894;
1897 -> 1828;
1898 -> 1826;
1898 -> 1897;
1899 -> 1898;
1899 -> 1827;
1899 -> 1846;
1899 -> 1859;
1899 -> 1879;
1899 -> 1897;
1900 -> 1828;
1901 -> 1826;
1901 -> 1827;
1901 -> 1824;
1902 -> 1825;
1902 -> 1827;
1902 -> 1846;
1902 -> 1859;
1902 -> 1879;
1902 -> 1899;
1902 -> 1824;
1903 -> 1826;
1903 -> 1827;
1903 -> 1846;
1903 -> 1859;
1903 -> 1879;
1903 -> 1899;
1903 -> 1902;
1904 -> 1826;
1904 -> 1902;
1905 -> 1904;
1905 -> 1902;
1905 -> 1903;
1905 -> 1827;
1905 -> 1846;
1905 -> 1859;
1905 -> 1879;
1905 -> 1899;
1906 -> 1902;
1907 -> 1905;
1907 -> 1906;
1908 -> 1905;
1909 -> 1905;
1910 -> 1909;
1910 -> 1905;
1911 -> 1905;
1912 -> 1909;
1912 -> 1910;
1912 -> 1911;
1912 -> 1905;
1913 -> 1908;
1913 -> 1905;
1914 -> 1905;
1915 -> 1913;
1915 -> 1914;
1916 -> 1909;
1916 -> 1914;
1917 -> 1916;
1917 -> 1910;
1917 -> 1914;
1918 -> 1915;
1918 -> 1914;
1919 -> 1914;
1920 -> 1918;
1920 -> 1919;
1921 -> 1920;
1921 -> 1919;
1922 -> 1921;
1922 -> 1917;
1922 -> 1919;
1923 -> 1914;
1924 -> 1916;
1924 -> 1922;
1924 -> 1923;
1924 -> 1914;
1925 -> 1915;
1925 -> 1914;
1926 -> 1925;
1926 -> 1922;
1926 -> 1914;
1927 -> 1926;
1927 -> 1914;
1928 -> 1914;
1929 -> 1914;
1930 -> 1929;
1930 -> 1914;
1931 -> 1915;
1931 -> 1914;
1932 -> 1928;
1932 -> 1914;
1933 -> 1929;
1933 -> 1914;
1934 -> 1914;
1935 -> 1931;
1935 -> 1934;
1936 -> 1932;
1936 -> 1934;
1937 -> 1933;
1937 -> 1934;
1938 -> 1916;
1938 -> 1934;
1939 -> 0;
1939 -> 1934;
1940 -> 1934;
1941 -> 1934;
1942 -> 1935;
1942 -> 1926;
1942 -> 1934;
1943 -> 1942;
1943 -> 1926;
1944 -> 1943;
1944 -> 1939;
1944 -> 1942;
1945 -> 1944;
1945 -> 1942;
1946 -> 1942;
1947 -> 1938;
1947 -> 1946;
1947 -> 1942;
1948 -> 1947;
1948 -> 1942;
1949 -> 1934;
1950 -> 1941;
1950 -> 1949;
1950 -> 1934;
1951 -> 0;
1951 -> 1950;
1952 -> 1934;
1953 -> 1952;
1953 -> 1914;
1954 -> 1951;
1954 -> 0;
1954 -> 1914;
1955 -> 1945;
1955 -> 0;
1955 -> 1954;
1956 -> 1954;
1957 -> 1905;
1958 -> 1909;
1958 -> 1947;
1958 -> 1905;
1959 -> 1908;
1959 -> 1947;
1959 -> 1958;
1960 -> 1909;
1960 -> 1959;
1961 -> 1909;
1961 -> 1959;
1962 -> 1961;
1962 -> 1959;
1962 -> 1960;
1963 -> 1959;
1964 -> 1963;
1965 -> 1962;
1965 -> 1964;
1965 -> 1963;
1966 -> 1962;
1966 -> 1963;
1967 -> 1963;
1968 -> 1963;
1969 -> 1968;
1969 -> 1963;
1970 -> 1967;
1970 -> 1963;
1971 -> 1968;
1971 -> 1963;
1972 -> 0;
1972 -> 1963;
1973 -> 1963;
1974 -> 1963;
1975 -> 1962;
1976 -> 1975;
1976 -> 1972;
1976 -> 1962;
1977 -> 1976;
1977 -> 1962;
1978 -> 1962;
1979 -> 1963;
1980 -> 1974;
1980 -> 1979;
1980 -> 1963;
1981 -> 0;
1981 -> 1980;
1982 -> 1963;
1983 -> 1981;
1983 -> 0;
1983 -> 1963;
1984 -> 1977;
1984 -> 0;
1984 -> 1983;
1985 -> 1983;
1986 -> 1962;
1987 -> 1905;
1987 -> 1962;
1987 -> 1906;
1988 -> 1825;
1988 -> 1962;
1988 -> 1824;
1989 -> 1988;
1990 -> 1989;
1991 -> 1988;
1992 -> 1988;
1993 -> 1988;
1994 -> 1992;
1994 -> 1993;
1995 -> 1826;
1995 -> 1993;
1996 -> 1995;
1996 -> 1962;
1996 -> 1993;
1997 -> 1993;
1998 -> 1996;
1999 -> 1988;
2000 -> 1999;
2000 -> 1962;
2000 -> 1989;
2001 -> 1999;
2002 -> 1999;
2002 -> 1962;
2002 -> 1989;
2002 -> 2000;
2002 -> 2001;
2003 -> 1988;
2004 -> 1988;
2005 -> 1988;
2006 -> 2004;
2006 -> 2005;
2007 -> 1826;
2007 -> 2005;
2008 -> 2007;
2008 -> 1962;
2008 -> 2005;
2009 -> 2005;
2010 -> 2008;
2011 -> 1753;
2012 -> 1778;
2012 -> 2000;
2012 -> 2011;
2012 -> 1753;
2013 -> 1761;
2013 -> 1753;
2014 -> 1753;
2015 -> 1759;
2015 -> 2014;
2015 -> 1753;
2016 -> 2015;
2017 -> 1754;
2017 -> 2016;
2018 -> 2016;
2019 -> 2017;
2019 -> 2000;
2019 -> 2018;
2020 -> 2018;
2021 -> 2019;
2021 -> 2015;
2022 -> 2021;
2023 -> 1757;
2023 -> 2021;
2024 -> 1758;
2024 -> 2021;
2025 -> 2021;
2026 -> 2022;
2026 -> 2025;
2027 -> 2022;
2027 -> 2025;
2028 -> 2023;
2028 -> 2025;
2029 -> 2024;
2029 -> 2025;
2030 -> 2026;
2030 -> 2025;
2031 -> 1354;
2032 -> 1355;
2032 -> 1354;
2033 -> 1356;
2033 -> 1354;
2034 -> 1354;
2035 -> 2031;
2035 -> 2034;
2036 -> 2032;
2036 -> 2034;
2037 -> 2033;
2037 -> 2034;
2038 -> 1357;
2038 -> 2034;
2039 -> 2034;
2040 -> 2038;
2040 -> 2030;
2040 -> 2039;
2040 -> 2034;
2041 -> 2035;
2041 -> 2034;
2042 -> 2034;
2043 -> 2041;
2043 -> 2042;
2044 -> 2038;
2044 -> 2042;
2045 -> 2042;
2046 -> 2044;
2046 -> 2030;
2046 -> 2045;
2046 -> 2042;
2047 -> 2034;
2048 -> 1350;
2049 -> 1351;
2049 -> 1350;
2050 -> 657;
2050 -> 2049;
2050 -> 2030;
2050 -> 1350;
2051 -> 654;
2051 -> 651;
2052 -> 657;
2052 -> 651;
2053 -> 655;
2053 -> 651;
2054 -> 2051;
2054 -> 2052;
2054 -> 2053;
2054 -> 656;
2054 -> 646;
2054 -> 2050;
2054 -> 651;
2055 -> 651;
2056 -> 641;
2057 -> 646;
2057 -> 2054;
2057 -> 641;
2058 -> 2057;
2058 -> 631;
2059 -> 633;
2059 -> 631;
2060 -> 631;
2061 -> 2058;
2061 -> 2060;
2062 -> 2059;
2062 -> 2060;
2063 -> 2061;
2063 -> 2060;
2064 -> 2062;
2064 -> 2060;
2065 -> 2060;
2066 -> 2063;
2066 -> 2065;
2067 -> 2064;
2067 -> 2065;
2068 -> 2066;
2068 -> 2065;
2069 -> 2067;
2069 -> 2065;
2070 -> 2065;
2071 -> 2065;
2072 -> 2068;
2072 -> 2071;
2073 -> 2069;
2073 -> 2071;
2074 -> 2070;
2074 -> 2071;
2075 -> 2071;
2076 -> 2073;
2076 -> 2075;
2076 -> 2071;
2077 -> 2073;
2077 -> 2071;
2078 -> 2073;
2078 -> 2071;
2079 -> 2072;
2079 -> 2071;
2080 -> 2074;
2080 -> 2077;
2080 -> 2078;
2080 -> 2071;
2081 -> 2079;
2081 -> 2080;
2081 -> 2071;
2082 -> 2073;
2082 -> 2071;
2083 -> 2071;
2084 -> 2081;
2084 -> 2083;
2084 -> 2071;
2085 -> 2071;
2087 -> 2086;
2089 -> 2088;
2090 -> 2073;
2090 -> 2071;
2091 -> 2072;
2091 -> 2071;
2092 -> 2071;
2093 -> 2090;
2093 -> 2092;
2094 -> 2091;
2094 -> 2092;
2095 -> 2092;
2096 -> 2092;
2097 -> 2094;
2097 -> 2092;
2098 -> 2097;
2098 -> 2081;
2098 -> 2092;
2099 -> 2098;
2099 -> 2092;
2100 -> 2096;
2100 -> 2099;
2101 -> 2100;
2101 -> 2095;
2101 -> 2092;
2102 -> 2100;
2102 -> 2095;
2102 -> 2092;
2103 -> 2102;
2103 -> 2092;
2104 -> 2093;
2104 -> 2092;
2105 -> 2093;
2105 -> 2092;
2106 -> 2093;
2106 -> 2092;
2107 -> 2092;
2108 -> 2106;
2108 -> 2107;
2110 -> 2109;
2111 -> 2109;
2112 -> 2111;
2112 -> 2107;
2113 -> 2107;
2114 -> 2108;
2114 -> 2107;
2115 -> 2107;
2116 -> 2115;
2116 -> 2092;
2117 -> 2094;
2117 -> 2116;
2118 -> 2116;
2119 -> 2117;
2119 -> 2118;
2120 -> 2119;
2120 -> 2118;
2121 -> 2118;
2122 -> 2111;
2122 -> 2118;
2123 -> 2120;
2123 -> 2121;
2123 -> 2122;
2123 -> 2081;
2123 -> 2118;
2124 -> 2092;
2125 -> 2124;
2125 -> 2092;
2126 -> 2092;
2127 -> 2092;
2128 -> 2124;
2128 -> 2127;
2128 -> 2125;
2128 -> 2092;
2129 -> 2092;
2130 -> 2093;
2130 -> 2092;
2131 -> 2124;
2131 -> 2092;
2132 -> 2129;
2132 -> 2092;
2133 -> 2092;
2134 -> 2131;
2134 -> 2133;
2135 -> 2132;
2135 -> 2133;
2136 -> 2135;
2136 -> 2129;
2136 -> 2133;
2137 -> 2133;
2138 -> 2137;
2138 -> 2136;
2138 -> 2133;
2139 -> 2092;
2140 -> 2092;
2141 -> 2124;
2141 -> 2140;
2141 -> 2128;
2141 -> 2092;
2142 -> 2092;
2143 -> 2123;
2143 -> 2092;
2144 -> 2092;
2145 -> 2143;
2145 -> 2092;
2146 -> 2092;
2147 -> 2144;
2147 -> 2146;
2147 -> 2092;
2148 -> 2092;
2149 -> 2124;
2149 -> 2148;
2149 -> 2141;
2149 -> 2092;
2150 -> 2129;
2150 -> 2092;
2151 -> 2142;
2151 -> 2092;
2155 -> 2153;
2155 -> 2152;
2156 -> 2154;
2156 -> 2152;
2157 -> 2152;
2158 -> 0;
2158 -> 2092;
2159 -> 2092;
2160 -> 2092;
2161 -> 2150;
2161 -> 2160;
2162 -> 2151;
2162 -> 2160;
2163 -> 2158;
2163 -> 2160;
2164 -> 2159;
2164 -> 2160;
2165 -> 2159;
2165 -> 2160;
2166 -> 2160;
2167 -> 2164;
2167 -> 2166;
2167 -> 2160;
2168 -> 2167;
2168 -> 2160;
2169 -> 0;
2171 -> 2169;
2171 -> 2170;
2172 -> 2170;
2174 -> 2173;
2176 -> 2175;
2178 -> 2177;
2179 -> 2172;
2180 -> 2172;
2180 -> 2170;
2181 -> 2171;
2181 -> 2172;
2181 -> 2170;
2182 -> 2170;
2183 -> 2160;
2184 -> 2183;
2184 -> 2165;
2184 -> 2160;
2185 -> 2161;
2185 -> 2160;
2186 -> 2162;
2186 -> 2160;
2187 -> 2163;
2187 -> 2160;
2188 -> 2185;
2188 -> 2160;
2189 -> 2186;
2189 -> 2160;
2190 -> 2184;
2190 -> 2160;
2191 -> 2160;
2192 -> 2188;
2192 -> 2191;
2193 -> 2189;
2193 -> 2191;
2194 -> 2190;
2194 -> 2191;
2195 -> 2168;
2195 -> 2191;
2196 -> 2192;
2196 -> 2191;
2197 -> 2192;
2197 -> 2185;
2197 -> 2191;
2198 -> 2193;
2198 -> 2191;
2199 -> 2193;
2199 -> 2186;
2199 -> 2191;
2200 -> 2191;
2201 -> 2196;
2201 -> 2200;
2202 -> 2197;
2202 -> 2200;
2203 -> 2198;
2203 -> 2200;
2204 -> 2199;
2204 -> 2200;
2205 -> 2195;
2205 -> 2200;
2206 -> 2201;
2206 -> 2200;
2207 -> 2202;
2207 -> 2200;
2208 -> 2203;
2208 -> 2200;
2209 -> 2204;
2209 -> 2200;
2210 -> 2200;
2211 -> 2206;
2211 -> 2210;
2212 -> 2207;
2212 -> 2210;
2213 -> 2208;
2213 -> 2210;
2214 -> 2209;
2214 -> 2210;
2215 -> 2205;
2215 -> 2210;
2216 -> 2210;
2217 -> 2212;
2217 -> 2216;
2217 -> 2210;
2218 -> 2210;
2219 -> 2214;
2219 -> 2218;
2219 -> 2210;
2220 -> 2217;
2220 -> 2219;
2220 -> 2210;
2221 -> 2210;
2222 -> 2221;
2222 -> 2220;
2222 -> 2210;
2223 -> 2210;
2224 -> 2223;
2224 -> 2212;
2224 -> 2210;
2225 -> 2210;
2226 -> 2225;
2226 -> 2214;
2226 -> 2210;
2227 -> 2210;
2228 -> 2227;
2228 -> 2212;
2228 -> 2210;
2229 -> 2220;
2229 -> 2210;
2230 -> 2202;
2230 -> 2200;
2231 -> 2204;
2231 -> 2200;
2232 -> 2200;
2233 -> 2230;
2233 -> 2232;
2233 -> 2200;
2234 -> 2200;
2235 -> 2230;
2235 -> 2234;
2235 -> 2200;
2236 -> 2200;
2237 -> 2231;
2237 -> 2236;
2237 -> 2200;
2238 -> 2200;
2239 -> 2238;
2239 -> 2191;
2240 -> 2191;
2241 -> 2240;
2241 -> 2160;
2242 -> 2187;
2242 -> 2241;
2242 -> 2160;
2243 -> 2124;
2243 -> 2242;
2243 -> 2149;
2243 -> 2092;
2244 -> 2142;
2244 -> 2092;
2245 -> 2129;
2245 -> 2092;
2246 -> 2124;
2246 -> 2243;
2246 -> 2092;
2247 -> 2246;
2247 -> 2071;
2248 -> 2060;
2249 -> 631;
2250 -> 632;
2250 -> 631;
2251 -> 2057;
2251 -> 631;
2252 -> 631;
2253 -> 2250;
2253 -> 2252;
2254 -> 2251;
2254 -> 2252;
2255 -> 2254;
2255 -> 2252;
2256 -> 631;
2257 -> 632;
2257 -> 631;
2258 -> 11;
2258 -> 1;
2259 -> 1;
2260 -> 0;
2260 -> 2259;
2260 -> 2145;
2260 -> 1;
2261 -> 1;
2262 -> 2259;
2262 -> 2261;
2263 -> 2262;
2263 -> 2261;
2264 -> 2261;
2265 -> 2263;
2265 -> 2264;
2266 -> 2264;
2267 -> 2265;
2267 -> 2266;
2267 -> 2264;
2268 -> 2264;
2268 -> 1;
2269 -> 2258;
2269 -> 2261;
2270 -> 2259;
2270 -> 2261;
2271 -> 2260;
2271 -> 2261;
2272 -> 2259;
2272 -> 2261;
2273 -> 2268;
2273 -> 2261;
2274 -> 2259;
2274 -> 2261;
2275 -> 2259;
2275 -> 2261;
2276 -> 2259;
2276 -> 2261;
2277 -> 2269;
2277 -> 2261;
2278 -> 2273;
2278 -> 2261;
2279 -> 2270;
2279 -> 2261;
2280 -> 2261;
2281 -> 2278;
2281 -> 2280;
2282 -> 2279;
2282 -> 2280;
2283 -> 2281;
2283 -> 2280;
2284 -> 2280;
2285 -> 2283;
2285 -> 2284;
2286 -> 2285;
2286 -> 2284;
2287 -> 2286;
2288 -> 0;
2288 -> 2287;
2289 -> 2288;
2290 -> 2289;
2291 -> 2289;
2292 -> 0;
2292 -> 2291;
2293 -> 2292;
2293 -> 2290;
2293 -> 2289;
2294 -> 2290;
2294 -> 2293;
2294 -> 2260;
2294 -> 2289;
2295 -> 2280;
2296 -> 2282;
2296 -> 2295;
2296 -> 2280;
2297 -> 2272;
2297 -> 2261;
2298 -> 2274;
2298 -> 2261;
2299 -> 2275;
2299 -> 2261;
2300 -> 2276;
2300 -> 2261;
2301 -> 2261;
2302 -> 2277;
2302 -> 2301;
2303 -> 2297;
2303 -> 2301;
2304 -> 2298;
2304 -> 2301;
2305 -> 2299;
2305 -> 2301;
2306 -> 2300;
2306 -> 2301;
2307 -> 2302;
2307 -> 2301;
2308 -> 2303;
2308 -> 2301;
2309 -> 2304;
2309 -> 2301;
2310 -> 2305;
2310 -> 2301;
2311 -> 2306;
2311 -> 2301;
2312 -> 2301;
2313 -> 2312;
2313 -> 2301;
2314 -> 2301;
2315 -> 2307;
2315 -> 2314;
2316 -> 2308;
2316 -> 2314;
2317 -> 2309;
2317 -> 2314;
2318 -> 2310;
2318 -> 2314;
2319 -> 2311;
2319 -> 2314;
2320 -> 2313;
2320 -> 2314;
2321 -> 2316;
2321 -> 2314;
2322 -> 2318;
2322 -> 2314;
2323 -> 2314;
2324 -> 2321;
2324 -> 2323;
2325 -> 2322;
2325 -> 2323;
2326 -> 2315;
2326 -> 2323;
2327 -> 2326;
2327 -> 2258;
2327 -> 2323;
2328 -> 2327;
2329 -> 2325;
2329 -> 2327;
2330 -> 2324;
2330 -> 2327;
2331 -> 2327;
2332 -> 2328;
2332 -> 2331;
2333 -> 2329;
2333 -> 2331;
2334 -> 2330;
2334 -> 2331;
2335 -> 2328;
2335 -> 2331;
2336 -> 2331;
2337 -> 2334;
2337 -> 2336;
2337 -> 2331;
2338 -> 0;
2338 -> 2337;
2339 -> 2332;
2339 -> 2331;
2340 -> 0;
2340 -> 2331;
2341 -> 2340;
2341 -> 2335;
2341 -> 2331;
2342 -> 2331;
2343 -> 2339;
2343 -> 2341;
2343 -> 2342;
2343 -> 2260;
2343 -> 2331;
2344 -> 2338;
2344 -> 2331;
2345 -> 2333;
2345 -> 2331;
2346 -> 2331;
2347 -> 2331;
2348 -> 2347;
2349 -> 2347;
2350 -> 2343;
2350 -> 2349;
2350 -> 2347;
2351 -> 2348;
2351 -> 2347;
2352 -> 2347;
2353 -> 2350;
2353 -> 2343;
2353 -> 2349;
2353 -> 2351;
2353 -> 2352;
2353 -> 2348;
2353 -> 2347;
2354 -> 2347;
2355 -> 2354;
2355 -> 2348;
2355 -> 2347;
2356 -> 2348;
2356 -> 2347;
2357 -> 2347;
2358 -> 2356;
2358 -> 2357;
2358 -> 2348;
2358 -> 2355;
2358 -> 2347;
2359 -> 2328;
2359 -> 2314;
2360 -> 2314;
2361 -> 2271;
2361 -> 2360;
2361 -> 2314;
2362 -> 0;
2362 -> 2314;
2363 -> 2320;
2363 -> 2314;
2364 -> 2294;
2364 -> 2314;
2365 -> 2314;
2366 -> 2364;
2366 -> 2365;
2367 -> 0;
2367 -> 2365;
2368 -> 2367;
2369 -> 2314;
2370 -> 2314;
2371 -> 2370;
2372 -> 2370;
2373 -> 2370;
2374 -> 2372;
2374 -> 2373;
2375 -> 2372;
2375 -> 2373;
2376 -> 2372;
2376 -> 2373;
2377 -> 2372;
2377 -> 2373;
2378 -> 2373;
2379 -> 2294;
2379 -> 2378;
2379 -> 2373;
2380 -> 2377;
2380 -> 2373;
2381 -> 2374;
2381 -> 2373;
2382 -> 2375;
2382 -> 2373;
2383 -> 2376;
2383 -> 2373;
2384 -> 2377;
2384 -> 2373;
2385 -> 2373;
2386 -> 0;
2386 -> 2373;
2387 -> 2373;
2388 -> 2386;
2388 -> 2387;
2389 -> 2386;
2389 -> 2387;
2390 -> 2384;
2390 -> 2387;
2391 -> 2385;
2391 -> 2387;
2392 -> 2385;
2392 -> 2387;
2393 -> 2388;
2393 -> 2387;
2394 -> 2389;
2394 -> 2387;
2395 -> 2390;
2395 -> 2387;
2396 -> 2387;
2397 -> 2396;
2397 -> 2387;
2398 -> 2391;
2398 -> 2396;
2398 -> 2387;
2399 -> 2373;
2400 -> 2381;
2400 -> 2399;
2401 -> 2382;
2401 -> 2399;
2402 -> 2383;
2402 -> 2399;
2403 -> 2384;
2403 -> 2399;
2404 -> 2385;
2404 -> 2399;
2405 -> 2385;
2405 -> 2399;
2406 -> 2385;
2406 -> 2399;
2407 -> 2385;
2407 -> 2399;
2408 -> 2385;
2408 -> 2399;
2409 -> 2385;
2409 -> 2399;
2410 -> 2400;
2410 -> 2399;
2411 -> 2401;
2411 -> 2399;
2412 -> 2402;
2412 -> 2399;
2413 -> 2403;
2413 -> 2399;
2414 -> 2404;
2414 -> 2399;
2415 -> 2405;
2415 -> 2399;
2416 -> 2406;
2416 -> 2399;
2417 -> 2407;
2417 -> 2399;
2418 -> 2408;
2418 -> 2399;
2419 -> 2399;
2420 -> 2410;
2420 -> 2419;
2421 -> 2411;
2421 -> 2419;
2422 -> 2412;
2422 -> 2419;
2423 -> 2413;
2423 -> 2419;
2424 -> 2414;
2424 -> 2419;
2425 -> 2415;
2425 -> 2419;
2426 -> 2416;
2426 -> 2419;
2427 -> 2417;
2427 -> 2419;
2428 -> 2418;
2428 -> 2419;
2429 -> 2409;
2429 -> 2419;
2430 -> 2423;
2430 -> 2419;
2431 -> 2427;
2431 -> 2419;
2432 -> 2428;
2432 -> 2419;
2433 -> 2419;
2434 -> 2433;
2434 -> 2419;
2435 -> 2433;
2435 -> 2419;
2436 -> 2433;
2436 -> 2419;
2437 -> 2433;
2437 -> 2419;
2438 -> 2433;
2438 -> 2419;
2439 -> 2433;
2439 -> 2419;
2440 -> 2433;
2440 -> 2419;
2441 -> 2433;
2441 -> 2419;
2442 -> 2433;
2442 -> 2419;
2443 -> 2433;
2443 -> 2419;
2444 -> 2433;
2444 -> 2419;
2445 -> 2433;
2445 -> 2419;
2446 -> 2433;
2446 -> 2419;
2447 -> 2433;
2447 -> 2419;
2448 -> 2433;
2448 -> 2419;
2449 -> 2433;
2449 -> 2419;
2450 -> 2433;
2450 -> 2419;
2451 -> 2433;
2451 -> 2419;
2452 -> 2433;
2452 -> 2419;
2453 -> 2433;
2453 -> 2419;
2454 -> 2433;
2454 -> 2419;
2455 -> 2433;
2455 -> 2419;
2456 -> 2433;
2456 -> 2419;
2457 -> 2433;
2457 -> 2419;
2458 -> 2433;
2458 -> 2419;
2459 -> 2433;
2459 -> 2419;
2460 -> 2419;
2461 -> 2460;
2461 -> 2433;
2461 -> 2419;
2462 -> 2433;
2462 -> 2419;
2463 -> 2433;
2463 -> 2419;
2464 -> 2419;
2465 -> 2419;
2466 -> 2463;
2466 -> 2465;
2467 -> 2464;
2467 -> 2465;
2468 -> 2467;
2468 -> 2465;
2469 -> 2467;
2469 -> 2465;
2470 -> 2467;
2470 -> 2465;
2471 -> 2466;
2471 -> 2467;
2471 -> 2465;
2472 -> 2464;
2472 -> 2433;
2472 -> 2419;
2473 -> 2433;
2473 -> 2419;
2474 -> 2419;
2475 -> 2474;
2476 -> 0;
2476 -> 2474;
2477 -> 2476;
2477 -> 2475;
2477 -> 2474;
2478 -> 2477;
2478 -> 2419;
2479 -> 2478;
2479 -> 2433;
2479 -> 2419;
2480 -> 2423;
2480 -> 2419;
2481 -> 2480;
2482 -> 2420;
2482 -> 2481;
2482 -> 2480;
2483 -> 2421;
2483 -> 2481;
2483 -> 2480;
2484 -> 2482;
2484 -> 2483;
2484 -> 2480;
2485 -> 2422;
2485 -> 2481;
2485 -> 2480;
2486 -> 2484;
2486 -> 2485;
2486 -> 2480;
2487 -> 2425;
2487 -> 2419;
2488 -> 2487;
2489 -> 2433;
2489 -> 2488;
2490 -> 2424;
2490 -> 2487;
2491 -> 2426;
2491 -> 2433;
2491 -> 2419;
2492 -> 2433;
2492 -> 2294;
2492 -> 2419;
2493 -> 2419;
2494 -> 2433;
2494 -> 2294;
2494 -> 2493;
2494 -> 2419;
2495 -> 2373;
2496 -> 2294;
2497 -> 2294;
2498 -> 2294;
2499 -> 2294;
2500 -> 2294;
2501 -> 2497;
2501 -> 2294;
2502 -> 2294;
2503 -> 2294;
2504 -> 2294;
2505 -> 2294;
2506 -> 2294;
2507 -> 2294;
2508 -> 2507;
2508 -> 2294;
2509 -> 2507;
2509 -> 2294;
2510 -> 2507;
2510 -> 2294;
2511 -> 2508;
2511 -> 2294;
2512 -> 2509;
2512 -> 2294;
2513 -> 2510;
2513 -> 2294;
2514 -> 2511;
2514 -> 2507;
2515 -> 2512;
2515 -> 2507;
2516 -> 2513;
2516 -> 2507;
2517 -> 2507;
2518 -> 2507;
2519 -> 2518;
2520 -> 2514;
2520 -> 2519;
2520 -> 2518;
2521 -> 2515;
2521 -> 2519;
2521 -> 2518;
2522 -> 2520;
2522 -> 2521;
2522 -> 2518;
2523 -> 2516;
2523 -> 2519;
2523 -> 2518;
2524 -> 2522;
2524 -> 2523;
2524 -> 2518;
2525 -> 2507;
2526 -> 2507;
2527 -> 2507;
2528 -> 2507;
2528 -> 2373;
2529 -> 2314;
2530 -> 2529;
2531 -> 2530;
2532 -> 2531;
2533 -> 2507;
2534 -> 2507;
2535 -> 2533;
2535 -> 2507;
2536 -> 2534;
2536 -> 2507;
2537 -> 2533;
2537 -> 2507;
2538 -> 2533;
2538 -> 2507;
2539 -> 2507;
2540 -> 2539;
2540 -> 0;
2540 -> 2507;
2541 -> 2533;
2541 -> 2507;
2542 -> 2533;
2542 -> 2507;
2543 -> 2533;
2543 -> 2507;
2544 -> 2533;
2544 -> 2507;
2545 -> 2533;
2545 -> 2507;
2546 -> 2533;
2546 -> 2529;
2547 -> 2529;
2548 -> 0;
2548 -> 2529;
2549 -> 2319;
2549 -> 2533;
2549 -> 2314;
2550 -> 2507;
2550 -> 1;
2551 -> 1;
2552 -> 0;
2552 -> 1;
2553 -> 1;
2554 -> 2552;
2554 -> 2553;
2555 -> 2551;
2555 -> 2553;
2556 -> 2551;
2556 -> 2553;
2557 -> 2551;
2557 -> 2553;
2558 -> 2551;
2558 -> 2553;
2559 -> 2551;
2559 -> 2553;
2560 -> 2551;
2560 -> 2553;
2561 -> 2554;
2561 -> 2553;
2562 -> 2555;
2562 -> 2553;
2563 -> 2556;
2563 -> 2553;
2564 -> 2557;
2564 -> 2553;
2565 -> 2558;
2565 -> 2553;
2566 -> 2559;
2566 -> 2553;
2567 -> 2560;
2567 -> 2553;
2568 -> 2553;
2569 -> 2561;
2569 -> 2568;
2570 -> 2562;
2570 -> 2568;
2571 -> 2563;
2571 -> 2568;
2572 -> 2564;
2572 -> 2568;
2573 -> 2565;
2573 -> 2568;
2574 -> 2566;
2574 -> 2568;
2575 -> 2567;
2575 -> 2568;
2576 -> 2569;
2576 -> 2568;
2577 -> 2569;
2577 -> 2568;
2578 -> 2568;
2579 -> 2570;
2579 -> 2568;
2580 -> 2571;
2580 -> 2568;
2581 -> 2572;
2581 -> 2568;
2582 -> 2573;
2582 -> 2568;
2583 -> 2574;
2583 -> 2568;
2584 -> 2575;
2584 -> 2568;
2585 -> 2568;
2586 -> 2577;
2586 -> 2585;
2587 -> 2578;
2587 -> 2585;
2588 -> 2579;
2588 -> 2585;
2589 -> 2580;
2589 -> 2585;
2590 -> 2581;
2590 -> 2585;
2591 -> 2582;
2591 -> 2585;
2592 -> 2583;
2592 -> 2585;
2593 -> 2577;
2593 -> 2585;
2594 -> 2584;
2594 -> 2585;
2595 -> 2578;
2595 -> 2585;
2596 -> 2578;
2596 -> 2585;
2597 -> 2578;
2597 -> 2585;
2598 -> 2597;
2598 -> 2585;
2599 -> 2597;
2599 -> 2585;
2600 -> 2597;
2600 -> 2585;
2601 -> 2597;
2601 -> 2585;
2602 -> 2597;
2602 -> 2585;
2603 -> 2597;
2603 -> 2585;
2604 -> 2597;
2604 -> 2585;
2605 -> 2597;
2605 -> 2585;
2606 -> 2597;
2606 -> 2585;
2607 -> 2597;
2607 -> 2585;
2608 -> 2597;
2608 -> 2585;
2609 -> 2597;
2609 -> 2585;
2610 -> 2597;
2610 -> 2585;
2611 -> 2597;
2611 -> 2585;
2612 -> 2597;
2612 -> 2585;
2613 -> 2586;
2613 -> 2597;
2613 -> 2585;
2614 -> 2587;
2614 -> 2597;
2614 -> 2585;
2615 -> 2588;
2615 -> 2597;
2615 -> 2585;
2616 -> 2589;
2616 -> 2597;
2616 -> 2585;
2617 -> 2590;
2617 -> 2597;
2617 -> 2585;
2618 -> 2591;
2618 -> 2597;
2618 -> 2585;
2619 -> 2592;
2619 -> 2597;
2619 -> 2585;
2620 -> 2593;
2620 -> 2585;
2621 -> 2620;
2621 -> 2597;
2621 -> 2585;
2622 -> 2594;
2622 -> 2597;
2622 -> 2585;
2623 -> 2595;
2623 -> 2597;
2623 -> 2585;
2624 -> 2596;
2624 -> 2597;
2624 -> 2585;
2625 -> 2578;
2625 -> 2553;
2626 -> 2625;
2626 -> 1;
2627 -> 2551;
2627 -> 1;
2628 -> 1;
2629 -> 2551;
2629 -> 2628;
2630 -> 2626;
2630 -> 2628;
2631 -> 2630;
2631 -> 2613;
2631 -> 2628;
2632 -> 2630;
2632 -> 2614;
2632 -> 2628;
2633 -> 2630;
2633 -> 2615;
2633 -> 2628;
2634 -> 2629;
2634 -> 2628;
2635 -> 2630;
2635 -> 2617;
2635 -> 2628;
2636 -> 2630;
2636 -> 2618;
2636 -> 2628;
2637 -> 2628;
2638 -> 2630;
2638 -> 2621;
2638 -> 2628;
2639 -> 2630;
2639 -> 2622;
2639 -> 2628;
2640 -> 2630;
2640 -> 2623;
2640 -> 2628;
2641 -> 2630;
2641 -> 2624;
2641 -> 2628;
2642 -> 2628;
2643 -> 2631;
2643 -> 2642;
2644 -> 2632;
2644 -> 2642;
2645 -> 2633;
2645 -> 2642;
2646 -> 2634;
2646 -> 2642;
2647 -> 2635;
2647 -> 2642;
2648 -> 2636;
2648 -> 2642;
2649 -> 2637;
2649 -> 2642;
2650 -> 2638;
2650 -> 2642;
2651 -> 2639;
2651 -> 2642;
2652 -> 2640;
2652 -> 2642;
2653 -> 2641;
2653 -> 2642;
2654 -> 2637;
2654 -> 2642;
2655 -> 2654;
2655 -> 2642;
2656 -> 2654;
2656 -> 2642;
2657 -> 2654;
2657 -> 2642;
2658 -> 2654;
2658 -> 2642;
2659 -> 2654;
2659 -> 2642;
2660 -> 2654;
2660 -> 2642;
2661 -> 2654;
2661 -> 2642;
2662 -> 2654;
2662 -> 2642;
2663 -> 2654;
2663 -> 2642;
2664 -> 2654;
2664 -> 2642;
2665 -> 2654;
2665 -> 2642;
2666 -> 2654;
2666 -> 2642;
2667 -> 2654;
2667 -> 2642;
2668 -> 2654;
2668 -> 2642;
2669 -> 2654;
2669 -> 2642;
2670 -> 2646;
2670 -> 2654;
2670 -> 2642;
2671 -> 2649;
2671 -> 2654;
2671 -> 2642;
2672 -> 2637;
2672 -> 1;
2673 -> 2672;
2673 -> 2551;
2673 -> 1;
2674 -> 1;
2675 -> 2550;
2675 -> 2674;
2676 -> 2551;
2676 -> 2674;
2677 -> 2674;
2678 -> 2674;
2679 -> 2677;
2679 -> 2678;
2680 -> 0;
2680 -> 2678;
2681 -> 2678;
2682 -> 2679;
2682 -> 2678;
2683 -> 2678;
2684 -> 2680;
2684 -> 2683;
2685 -> 2681;
2685 -> 2683;
2686 -> 2682;
2686 -> 2683;
2687 -> 2683;
2688 -> 2684;
2688 -> 2683;
2689 -> 2685;
2689 -> 2683;
2690 -> 2687;
2690 -> 2683;
2691 -> 2686;
2691 -> 2683;
2692 -> 2683;
2693 -> 2688;
2693 -> 2692;
2694 -> 2689;
2694 -> 2692;
2695 -> 2690;
2695 -> 2692;
2696 -> 2691;
2696 -> 2692;
2697 -> 2692;
2698 -> 2693;
2698 -> 0;
2698 -> 2692;
2699 -> 2698;
2699 -> 2694;
2699 -> 2692;
2700 -> 2699;
2701 -> 2700;
2702 -> 2675;
2702 -> 2533;
2702 -> 2701;
2703 -> 2701;
2704 -> 2699;
2705 -> 2675;
2705 -> 2533;
2705 -> 2704;
2706 -> 2705;
2707 -> 2705;
2708 -> 2699;
2709 -> 2702;
2709 -> 2533;
2710 -> 2693;
2710 -> 0;
2710 -> 2692;
2711 -> 2710;
2711 -> 2694;
2711 -> 2692;
2712 -> 2697;
2712 -> 2711;
2713 -> 2712;
2713 -> 2675;
2713 -> 2697;
2713 -> 2533;
2713 -> 2711;
2714 -> 2711;
2715 -> 2711;
2716 -> 2711;
2717 -> 2675;
2717 -> 2716;
2718 -> 2717;
2718 -> 2713;
2718 -> 2716;
2719 -> 2718;
2719 -> 2711;
2720 -> 2711;
2721 -> 2675;
2721 -> 2713;
2722 -> 2696;
2722 -> 2711;
2723 -> 2711;
2724 -> 2711;
2725 -> 2723;
2725 -> 2724;
2726 -> 2723;
2726 -> 2724;
2727 -> 2723;
2727 -> 2724;
2728 -> 2722;
2728 -> 2724;
2729 -> 2724;
2730 -> 2729;
2731 -> 2730;
2732 -> 2728;
2732 -> 2724;
2733 -> 2724;
2734 -> 2724;
2735 -> 2725;
2735 -> 2734;
2735 -> 2724;
2736 -> 2724;
2737 -> 2736;
2738 -> 2737;
2739 -> 2675;
2739 -> 2738;
2740 -> 2739;
2740 -> 2713;
2740 -> 2738;
2741 -> 2739;
2741 -> 2713;
2741 -> 2738;
2742 -> 2741;
2742 -> 2737;
2743 -> 2733;
2743 -> 2724;
2744 -> 2728;
2744 -> 2724;
2745 -> 2724;
2746 -> 2745;
2747 -> 2746;
2748 -> 2747;
2749 -> 2745;
2750 -> 2749;
2751 -> 2750;
2752 -> 2745;
2753 -> 2752;
2754 -> 2713;
2754 -> 2753;
2755 -> 2754;
2755 -> 2752;
2756 -> 2713;
2756 -> 2745;
2757 -> 2745;
2758 -> 2713;
2758 -> 2745;
2759 -> 2713;
2759 -> 2745;
2760 -> 2759;
2760 -> 2713;
2760 -> 2745;
2761 -> 2745;
2762 -> 2745;
2763 -> 2713;
2763 -> 0;
2763 -> 2745;
2764 -> 2745;
2765 -> 2713;
2766 -> 2765;
2766 -> 2713;
2767 -> 2713;
2767 -> 2745;
2768 -> 2745;
2769 -> 2745;
2770 -> 2768;
2770 -> 2769;
2771 -> 2770;
2771 -> 2769;
2772 -> 2769;
2773 -> 2769;
2774 -> 2772;
2774 -> 2773;
2775 -> 2774;
2775 -> 2773;
2776 -> 2773;
2777 -> 2776;
2778 -> 2777;
2779 -> 2777;
2780 -> 2779;
2781 -> 2776;
2782 -> 2781;
2783 -> 2773;
2784 -> 2773;
2785 -> 2773;
2786 -> 2774;
2786 -> 2773;
2787 -> 2773;
2788 -> 2786;
2788 -> 2787;
2789 -> 2788;
2789 -> 2787;
2790 -> 2787;
2791 -> 2787;
2792 -> 2791;
2793 -> 2791;
2794 -> 2768;
2795 -> 2794;
2796 -> 2795;
2797 -> 2713;
2797 -> 2796;
2798 -> 2797;
2798 -> 2795;
2799 -> 2768;
2800 -> 2745;
2801 -> 2800;
2802 -> 2801;
2803 -> 2800;
2804 -> 2800;
2805 -> 2713;
2805 -> 2745;
2806 -> 2805;
2806 -> 2745;
2807 -> 2745;
2808 -> 2745;
2809 -> 2807;
2809 -> 2808;
2810 -> 2809;
2810 -> 2808;
2811 -> 2808;
2812 -> 2811;
2813 -> 2812;
2814 -> 2812;
2815 -> 2814;
2816 -> 2811;
2817 -> 2816;
2818 -> 2808;
2819 -> 2808;
2820 -> 2808;
2821 -> 2819;
2821 -> 2808;
2822 -> 2809;
2822 -> 2808;
2823 -> 2808;
2824 -> 2822;
2824 -> 2823;
2825 -> 2824;
2825 -> 2823;
2826 -> 2823;
2827 -> 2823;
2828 -> 2827;
2829 -> 2827;
2830 -> 2828;
2830 -> 2827;
2831 -> 2745;
2832 -> 2831;
2833 -> 2832;
2834 -> 2713;
2834 -> 2833;
2835 -> 2834;
2835 -> 2832;
2836 -> 2745;
2837 -> 2745;
2838 -> 2837;
2839 -> 2838;
2840 -> 2745;
2841 -> 2765;
2842 -> 2765;
2842 -> 2713;
2842 -> 2745;
2843 -> 2713;
2843 -> 2765;
2843 -> 2745;
2844 -> 2745;
2845 -> 2844;
2846 -> 2845;
2847 -> 2846;
2848 -> 2713;
2848 -> 2847;
2849 -> 2848;
2849 -> 2846;
2850 -> 2844;
2851 -> 2765;
2851 -> 2745;
2852 -> 2745;
2853 -> 2759;
2853 -> 2765;
2853 -> 2745;
2854 -> 2713;
2854 -> 2765;
2854 -> 2745;
2855 -> 2725;
2855 -> 2724;
2856 -> 2855;
2857 -> 2855;
2858 -> 2724;
2859 -> 2727;
2859 -> 2858;
2859 -> 2724;
2860 -> 2725;
2860 -> 2724;
2861 -> 2726;
2861 -> 2724;
2862 -> 2728;
2862 -> 2724;
2863 -> 2724;
2864 -> 2860;
2864 -> 2863;
2865 -> 2861;
2865 -> 2863;
2866 -> 2862;
2866 -> 2863;
2867 -> 2863;
2868 -> 2864;
2868 -> 2867;
2868 -> 2863;
2869 -> 2765;
2870 -> 2765;
2871 -> 2765;
2871 -> 0;
2872 -> 2765;
2873 -> 2765;
2873 -> 0;
2874 -> 2765;
2874 -> 0;
2875 -> 2765;
2875 -> 0;
2876 -> 2765;
2876 -> 0;
2877 -> 2765;
2877 -> 0;
2878 -> 2765;
2878 -> 0;
2879 -> 2765;
2880 -> 2879;
2880 -> 2765;
2881 -> 2765;
2882 -> 2765;
2883 -> 2879;
2883 -> 0;
2883 -> 2765;
2884 -> 2879;
2884 -> 2765;
2885 -> 2765;
2886 -> 2884;
2886 -> 2885;
2887 -> 2886;
2887 -> 2885;
2888 -> 2887;
2889 -> 2879;
2890 -> 2889;
2890 -> 2879;
2891 -> 2765;
2891 -> 2879;
2892 -> 2879;
2893 -> 2879;
2894 -> 2893;
2894 -> 2879;
2895 -> 2892;
2895 -> 2894;
2896 -> 2879;
2897 -> 2895;
2897 -> 2896;
2897 -> 2879;
2898 -> 2897;
2898 -> 2889;
2898 -> 2879;
2899 -> 2889;
2899 -> 2879;
2900 -> 2888;
2900 -> 2899;
2901 -> 2888;
2901 -> 2765;
2902 -> 2879;
2902 -> 0;
2902 -> 2765;
2903 -> 2879;
2903 -> 0;
2904 -> 2879;
2904 -> 0;
2904 -> 2765;
2905 -> 2879;
2905 -> 0;
2905 -> 2765;
2906 -> 2879;
2906 -> 0;
2906 -> 2765;
2907 -> 2879;
2907 -> 0;
2907 -> 2765;
2908 -> 2879;
2908 -> 0;
2908 -> 2765;
2909 -> 2879;
2909 -> 0;
2910 -> 2879;
2911 -> 2879;
2911 -> 0;
2912 -> 2879;
2913 -> 2879;
2913 -> 0;
2914 -> 2879;
2914 -> 0;
2915 -> 2879;
2915 -> 0;
2916 -> 2879;
2916 -> 0;
2917 -> 2879;
2917 -> 0;
2918 -> 2879;
2919 -> 2879;
2920 -> 2918;
2920 -> 2919;
2921 -> 2920;
2921 -> 2919;
2922 -> 2921;
2923 -> 2765;
2924 -> 2922;
2924 -> 2923;
2925 -> 2879;
2926 -> 2879;
2927 -> 2925;
2927 -> 2926;
2928 -> 2879;
2928 -> 2926;
2929 -> 2927;
2929 -> 2879;
2929 -> 0;
2929 -> 2926;
2930 -> 2929;
2931 -> 2879;
2932 -> 2918;
2932 -> 2931;
2933 -> 2932;
2933 -> 2931;
2934 -> 2933;
2935 -> 2765;
2936 -> 2879;
2936 -> 2935;
2936 -> 2765;
2937 -> 2765;
2938 -> 2765;
2939 -> 2938;
2939 -> 2879;
2939 -> 2765;
2940 -> 2675;
2940 -> 2879;
2940 -> 2863;
2941 -> 2711;
2942 -> 2675;
2942 -> 2879;
2942 -> 2941;
2942 -> 2711;
2943 -> 2693;
2943 -> 0;
2943 -> 2692;
2944 -> 2943;
2945 -> 2944;
2945 -> 2943;
2946 -> 2696;
2946 -> 2943;
2947 -> 2943;
2948 -> 2945;
2948 -> 2947;
2949 -> 2946;
2949 -> 2947;
2950 -> 2947;
2951 -> 2948;
2951 -> 2947;
2952 -> 2949;
2952 -> 2947;
2953 -> 2947;
2954 -> 2950;
2954 -> 2953;
2955 -> 2950;
2955 -> 2953;
2956 -> 2950;
2956 -> 2953;
2957 -> 2950;
2957 -> 2953;
2958 -> 2951;
2958 -> 2953;
2959 -> 2950;
2959 -> 2953;
2960 -> 2952;
2960 -> 2953;
2961 -> 2953;
2962 -> 2675;
2962 -> 2961;
2962 -> 2953;
2963 -> 2953;
2964 -> 2958;
2964 -> 2963;
2964 -> 2953;
2965 -> 2953;
2966 -> 2675;
2966 -> 2965;
2967 -> 2966;
2967 -> 2879;
2967 -> 2965;
2968 -> 2967;
2968 -> 2953;
2969 -> 2953;
2970 -> 2953;
2971 -> 2959;
2971 -> 2953;
2972 -> 2954;
2972 -> 2971;
2973 -> 2957;
2973 -> 2971;
2974 -> 2958;
2974 -> 2971;
2975 -> 2960;
2975 -> 2971;
2976 -> 2971;
2977 -> 2972;
2977 -> 2976;
2978 -> 2973;
2978 -> 2976;
2979 -> 2974;
2979 -> 2976;
2980 -> 2975;
2980 -> 2976;
2981 -> 2980;
2981 -> 2976;
2982 -> 2976;
2983 -> 2981;
2983 -> 2982;
2984 -> 2982;
2985 -> 2879;
2986 -> 2879;
2987 -> 2879;
2988 -> 2987;
2988 -> 2879;
2989 -> 2879;
2990 -> 2879;
2991 -> 2990;
2991 -> 2879;
2992 -> 2988;
2992 -> 2991;
2992 -> 2879;
2993 -> 2879;
2994 -> 2993;
2994 -> 2879;
2995 -> 2983;
2995 -> 2879;
2996 -> 2879;
2997 -> 2995;
2997 -> 2879;
2998 -> 2993;
2998 -> 2879;
2999 -> 2879;
3000 -> 2879;
3001 -> 3000;
3001 -> 2987;
3002 -> 2987;
3003 -> 2879;
3003 -> 3002;
3004 -> 0;
3004 -> 3002;
3005 -> 3002;
3006 -> 2987;
3006 -> 3005;
3006 -> 3002;
3007 -> 3002;
3008 -> 2879;
3009 -> 2879;
3010 -> 3009;
3010 -> 2987;
3011 -> 3010;
3011 -> 2879;
3012 -> 2879;
3013 -> 2987;
3013 -> 3007;
3013 -> 3006;
3013 -> 2879;
3014 -> 3013;
3014 -> 2976;
3015 -> 2976;
3016 -> 3013;
3016 -> 3015;
3016 -> 2976;
3017 -> 3016;
3018 -> 2954;
3018 -> 2953;
3019 -> 2955;
3019 -> 2953;
3020 -> 2956;
3020 -> 2953;
3021 -> 2957;
3021 -> 2953;
3022 -> 2958;
3022 -> 2953;
3023 -> 2959;
3023 -> 2953;
3024 -> 2960;
3024 -> 2953;
3025 -> 2953;
3026 -> 2953;
3027 -> 3018;
3027 -> 3026;
3028 -> 3019;
3028 -> 3026;
3029 -> 3020;
3029 -> 3026;
3030 -> 3021;
3030 -> 3026;
3031 -> 3022;
3031 -> 3026;
3032 -> 3023;
3032 -> 3026;
3033 -> 3024;
3033 -> 3026;
3034 -> 3025;
3034 -> 3026;
3035 -> 3026;
3036 -> 3035;
3036 -> 3026;
3037 -> 3035;
3037 -> 3026;
3038 -> 3035;
3038 -> 3026;
3039 -> 3035;
3039 -> 3026;
3040 -> 3035;
3040 -> 3026;
3041 -> 3035;
3041 -> 3026;
3042 -> 3035;
3042 -> 3026;
3043 -> 3035;
3043 -> 3026;
3044 -> 3035;
3044 -> 3026;
3045 -> 3035;
3045 -> 3026;
3046 -> 3035;
3046 -> 3026;
3047 -> 3026;
3048 -> 2675;
3048 -> 3047;
3048 -> 3026;
3049 -> 3026;
3050 -> 3031;
3050 -> 3049;
3050 -> 3026;
3051 -> 3027;
3051 -> 3035;
3051 -> 3026;
3052 -> 3028;
3052 -> 3035;
3052 -> 3026;
3053 -> 3033;
3053 -> 3035;
3053 -> 3026;
3054 -> 3031;
3054 -> 3035;
3054 -> 3026;
3055 -> 3032;
3055 -> 3035;
3055 -> 3026;
3056 -> 3030;
3056 -> 3035;
3056 -> 3026;
3057 -> 3030;
3057 -> 3026;
3058 -> 3026;
3059 -> 3057;
3059 -> 3058;
3060 -> 3035;
3060 -> 3058;
3061 -> 3059;
3061 -> 3058;
3062 -> 3026;
3063 -> 3028;
3063 -> 3029;
3063 -> 3026;
3064 -> 3029;
3064 -> 3035;
3064 -> 3026;
3065 -> 2953;
3066 -> 2953;
3067 -> 3066;
3068 -> 3067;
3069 -> 3068;
3070 -> 2675;
3070 -> 3069;
3071 -> 3013;
3071 -> 3068;
3072 -> 3066;
3073 -> 2953;
3074 -> 3025;
3074 -> 3073;
3075 -> 3017;
3075 -> 3013;
3076 -> 3017;
3076 -> 3013;
3077 -> 3017;
3077 -> 3013;
3078 -> 3075;
3078 -> 3013;
3079 -> 3013;
3080 -> 3077;
3080 -> 3079;
3081 -> 3078;
3081 -> 3079;
3082 -> 3079;
3083 -> 3080;
3083 -> 3082;
3083 -> 3079;
3084 -> 3013;
3085 -> 3075;
3085 -> 3017;
3086 -> 2953;
3087 -> 2953;
3088 -> 3025;
3088 -> 3087;
3089 -> 3087;
3090 -> 3017;
3090 -> 3089;
3090 -> 3087;
3091 -> 3087;
3092 -> 3091;
3092 -> 3087;
3093 -> 2953;
3094 -> 2953;
3095 -> 2954;
3095 -> 3094;
3095 -> 2953;
3096 -> 2953;
3097 -> 2954;
3097 -> 3096;
3097 -> 2953;
3098 -> 2953;
3099 -> 2953;
3100 -> 2959;
3100 -> 3099;
3100 -> 2953;
3101 -> 2958;
3101 -> 3100;
3102 -> 2960;
3102 -> 3100;
3103 -> 3100;
3104 -> 3101;
3104 -> 3103;
3105 -> 3102;
3105 -> 3103;
3106 -> 3103;
3107 -> 3106;
3108 -> 3107;
3109 -> 2675;
3109 -> 3108;
3110 -> 3017;
3110 -> 3107;
3111 -> 3105;
3111 -> 3103;
3112 -> 3103;
3113 -> 3100;
3114 -> 3100;
3115 -> 2954;
3115 -> 3114;
3115 -> 3100;
3116 -> 2947;
3117 -> 2948;
3117 -> 2947;
3118 -> 2949;
3118 -> 2947;
3119 -> 2947;
3120 -> 3116;
3120 -> 3119;
3121 -> 3116;
3121 -> 3119;
3122 -> 3117;
3122 -> 3119;
3123 -> 3118;
3123 -> 3119;
3124 -> 3116;
3124 -> 3119;
3125 -> 3116;
3125 -> 3119;
3126 -> 3119;
3127 -> 3119;
3128 -> 3121;
3128 -> 3127;
3128 -> 3119;
3129 -> 3119;
3130 -> 3129;
3131 -> 2675;
3131 -> 3130;
3132 -> 3017;
3132 -> 3129;
3133 -> 3126;
3133 -> 3119;
3134 -> 3124;
3134 -> 3119;
3135 -> 3125;
3135 -> 3119;
3136 -> 3119;
3137 -> 3122;
3137 -> 3119;
3138 -> 3123;
3138 -> 3119;
3139 -> 3119;
3140 -> 3133;
3140 -> 3139;
3141 -> 3134;
3141 -> 3139;
3142 -> 3135;
3142 -> 3139;
3143 -> 3136;
3143 -> 3139;
3144 -> 3136;
3144 -> 3139;
3145 -> 3137;
3145 -> 3139;
3146 -> 3138;
3146 -> 3139;
3147 -> 3136;
3147 -> 3139;
3148 -> 3139;
3149 -> 3148;
3149 -> 3139;
3150 -> 3148;
3150 -> 3139;
3151 -> 3148;
3151 -> 3139;
3152 -> 3148;
3152 -> 3139;
3153 -> 3148;
3153 -> 3139;
3154 -> 3148;
3154 -> 3139;
3155 -> 3148;
3155 -> 3139;
3156 -> 3148;
3156 -> 3139;
3157 -> 3148;
3157 -> 3139;
3158 -> 3148;
3158 -> 3139;
3159 -> 3148;
3159 -> 3139;
3160 -> 3148;
3160 -> 3139;
3161 -> 3140;
3161 -> 3148;
3161 -> 3139;
3162 -> 3141;
3162 -> 3148;
3162 -> 3139;
3163 -> 3142;
3163 -> 3148;
3163 -> 3139;
3164 -> 3143;
3164 -> 3148;
3164 -> 3139;
3165 -> 3144;
3165 -> 3148;
3165 -> 3139;
3166 -> 3145;
3166 -> 3148;
3166 -> 3139;
3167 -> 3146;
3167 -> 3148;
3167 -> 3139;
3168 -> 3119;
3169 -> 3168;
3170 -> 2675;
3170 -> 3169;
3171 -> 3017;
3171 -> 3168;
3172 -> 3119;
3173 -> 3017;
3174 -> 3017;
3175 -> 3017;
3176 -> 3174;
3176 -> 3175;
3177 -> 3017;
3177 -> 3175;
3178 -> 3177;
3178 -> 3017;
3178 -> 3175;
3179 -> 3175;
3180 -> 3178;
3181 -> 3017;
3182 -> 3017;
3183 -> 3181;
3183 -> 3182;
3184 -> 3017;
3184 -> 3182;
3185 -> 3184;
3185 -> 3017;
3185 -> 3182;
3186 -> 3182;
3187 -> 3185;
3188 -> 3017;
3189 -> 3017;
3190 -> 3017;
3191 -> 3189;
3191 -> 3190;
3192 -> 3017;
3192 -> 3190;
3193 -> 3192;
3193 -> 3017;
3193 -> 3190;
3194 -> 3190;
3195 -> 3193;
3196 -> 3017;
3197 -> 3017;
3198 -> 3017;
3198 -> 3197;
3199 -> 3017;
3200 -> 3197;
3200 -> 3199;
3201 -> 3197;
3201 -> 3199;
3202 -> 3017;
3202 -> 3199;
3203 -> 3200;
3203 -> 3199;
3204 -> 3201;
3204 -> 3199;
3205 -> 3203;
3205 -> 3204;
3205 -> 3199;
3206 -> 3199;
3207 -> 3205;
3207 -> 3206;
3208 -> 3202;
3208 -> 3206;
3209 -> 3208;
3209 -> 3017;
3209 -> 3206;
3210 -> 3206;
3211 -> 3209;
3212 -> 3199;
3213 -> 3017;
3214 -> 3017;
3215 -> 3017;
3216 -> 3017;
3217 -> 3215;
3217 -> 3216;
3218 -> 3017;
3218 -> 3216;
3219 -> 3218;
3219 -> 3017;
3219 -> 3216;
3220 -> 3216;
3221 -> 3219;
3222 -> 3017;
3223 -> 3017;
3224 -> 3222;
3224 -> 3223;
3225 -> 3017;
3225 -> 3223;
3226 -> 3225;
3226 -> 3017;
3226 -> 3223;
3227 -> 3223;
3228 -> 3226;
3229 -> 3017;
3230 -> 3017;
3230 -> 3172;
3231 -> 3017;
3232 -> 3017;
3233 -> 3017;
3234 -> 3017;
3235 -> 3017;
3236 -> 3017;
3237 -> 3236;
3237 -> 3017;
3238 -> 3235;
3238 -> 3017;
3239 -> 3236;
3239 -> 3017;
3240 -> 0;
3240 -> 3017;
3241 -> 3017;
3242 -> 3017;
3243 -> 3017;
3244 -> 3243;
3244 -> 3240;
3244 -> 3017;
3245 -> 3244;
3245 -> 3017;
3246 -> 3017;
3247 -> 3017;
3248 -> 3242;
3248 -> 3247;
3248 -> 3017;
3249 -> 0;
3249 -> 3248;
3250 -> 3017;
3251 -> 3249;
3251 -> 0;
3251 -> 3017;
3252 -> 3245;
3252 -> 0;
3252 -> 3251;
3253 -> 3251;
3254 -> 3235;
3254 -> 3017;
3255 -> 3254;
3255 -> 3240;
3255 -> 3235;
3256 -> 3255;
3256 -> 3235;
3257 -> 3235;
3258 -> 3256;
3258 -> 0;
3258 -> 3251;
3259 -> 3235;
3260 -> 3235;
3261 -> 3235;
3262 -> 3235;
3263 -> 3235;
3264 -> 3262;
3264 -> 3263;
3265 -> 3017;
3265 -> 3263;
3266 -> 3265;
3266 -> 3235;
3266 -> 3263;
3267 -> 3263;
3268 -> 3266;
3269 -> 3235;
3270 -> 3235;
3271 -> 3235;
3272 -> 3270;
3272 -> 3271;
3273 -> 3017;
3273 -> 3271;
3274 -> 3273;
3274 -> 3235;
3274 -> 3271;
3275 -> 3271;
3276 -> 3274;
3277 -> 3119;
3278 -> 3136;
3278 -> 3235;
3278 -> 3277;
3278 -> 3119;
3279 -> 3126;
3279 -> 3119;
3280 -> 3119;
3281 -> 3124;
3281 -> 3280;
3281 -> 3119;
3282 -> 3281;
3283 -> 3282;
3284 -> 3283;
3285 -> 3235;
3286 -> 3235;
3287 -> 3235;
3288 -> 2947;
3289 -> 2948;
3289 -> 2947;
3290 -> 2949;
3290 -> 2947;
3291 -> 2947;
3292 -> 3288;
3292 -> 3291;
3293 -> 3289;
3293 -> 3291;
3294 -> 3290;
3294 -> 3291;
3295 -> 2675;
3295 -> 3291;
3296 -> 3291;
3297 -> 3295;
3297 -> 3235;
3297 -> 3296;
3297 -> 3291;
3298 -> 3292;
3298 -> 3291;
3299 -> 3291;
3300 -> 3298;
3300 -> 3299;
3301 -> 3295;
3301 -> 3299;
3302 -> 3299;
3303 -> 3301;
3303 -> 3235;
3303 -> 3302;
3303 -> 3299;
3304 -> 3291;
3305 -> 2943;
3306 -> 2944;
3306 -> 2943;
3307 -> 2695;
3307 -> 2692;
3308 -> 2697;
3308 -> 2692;
3309 -> 2696;
3309 -> 2692;
3310 -> 2692;
3312 -> 3311;
3313 -> 3235;
3313 -> 3310;
3314 -> 3235;
3314 -> 3310;
3315 -> 3235;
3315 -> 3310;
3316 -> 3235;
3316 -> 3310;
3317 -> 3235;
3317 -> 3310;
3318 -> 3235;
3318 -> 3310;
3319 -> 3235;
3319 -> 3310;
3320 -> 3310;
3321 -> 3313;
3321 -> 3320;
3321 -> 3310;
3322 -> 3313;
3322 -> 3235;
3322 -> 3321;
3323 -> 3313;
3323 -> 3322;
3324 -> 3313;
3324 -> 3323;
3325 -> 2683;
3326 -> 2676;
3326 -> 2674;
3327 -> 2674;
3328 -> 3326;
3328 -> 3327;
3329 -> 3328;
3329 -> 3327;
3330 -> 3327;
3331 -> 3329;
3331 -> 3330;
3332 -> 3331;
3332 -> 3330;
3333 -> 3330;
3334 -> 3330;
3335 -> 3332;
3335 -> 3334;
3336 -> 3333;
3336 -> 3334;
3337 -> 3334;
3338 -> 3335;
3338 -> 3337;
3338 -> 3334;
3339 -> 3335;
3339 -> 3334;
3340 -> 3339;
3340 -> 2551;
3340 -> 2673;
3340 -> 2643;
3340 -> 2644;
3340 -> 2653;
3340 -> 2645;
3340 -> 2670;
3340 -> 2647;
3340 -> 2671;
3340 -> 2650;
3340 -> 2663;
3340 -> 2651;
3340 -> 2652;
3340 -> 2648;
3340 -> 2667;
3340 -> 2668;
3340 -> 2669;
3340 -> 2627;
3340 -> 2577;
3340 -> 3334;
3341 -> 3334;
3342 -> 3339;
3342 -> 3341;
3342 -> 2551;
3342 -> 2673;
3342 -> 2643;
3342 -> 2644;
3342 -> 2653;
3342 -> 2645;
3342 -> 2670;
3342 -> 2647;
3342 -> 2671;
3342 -> 2650;
3342 -> 2663;
3342 -> 2651;
3342 -> 2652;
3342 -> 2648;
3342 -> 2667;
3342 -> 2668;
3342 -> 2669;
3342 -> 2627;
3342 -> 2577;
3342 -> 3334;
3343 -> 3342;
3343 -> 3341;
3344 -> 3343;
3344 -> 3342;
3344 -> 3341;
3345 -> 3335;
3345 -> 3334;
3346 -> 3345;
3346 -> 3344;
3346 -> 3334;
3347 -> 3334;
3348 -> 3345;
3348 -> 3347;
3348 -> 3344;
3348 -> 3334;
3349 -> 3348;
3349 -> 3347;
3350 -> 3349;
3350 -> 3348;
3350 -> 3347;
3351 -> 3336;
3351 -> 3344;
3351 -> 3350;
3351 -> 3334;
3352 -> 3324;
3352 -> 3351;
3352 -> 3334;
3353 -> 3334;
3354 -> 3352;
3354 -> 3353;
3355 -> 3352;
3355 -> 3353;
3356 -> 3352;
3356 -> 3353;
3357 -> 3352;
3357 -> 3353;
3358 -> 3352;
3358 -> 3353;
3359 -> 3358;
3359 -> 3353;
3360 -> 3358;
3360 -> 3353;
3361 -> 3358;
3361 -> 3353;
3362 -> 3358;
3362 -> 3353;
3363 -> 3358;
3363 -> 3353;
3364 -> 3358;
3364 -> 3353;
3365 -> 3358;
3365 -> 3353;
3366 -> 3358;
3366 -> 3353;
3367 -> 3358;
3367 -> 3353;
3368 -> 3358;
3368 -> 3353;
3369 -> 3358;
3369 -> 3353;
3370 -> 3354;
3370 -> 3352;
3370 -> 3358;
3370 -> 3353;
3371 -> 3354;
3371 -> 3352;
3371 -> 3358;
3371 -> 3353;
3372 -> 3354;
3372 -> 3352;
3372 -> 3358;
3372 -> 3353;
3373 -> 3354;
3373 -> 3352;
3373 -> 3358;
3373 -> 3353;
3374 -> 3356;
3374 -> 3353;
3375 -> 3374;
3376 -> 3375;
3376 -> 3358;
3376 -> 3353;
3377 -> 3357;
3377 -> 3353;
3378 -> 3377;
3379 -> 3378;
3379 -> 3358;
3379 -> 3353;
3380 -> 3353;
3381 -> 3353;
3382 -> 3354;
3382 -> 3352;
3382 -> 3381;
3382 -> 3353;
3383 -> 3354;
3383 -> 3352;
3383 -> 3353;
3384 -> 0;
3384 -> 3353;
3385 -> 3354;
3385 -> 3382;
3386 -> 3382;
3387 -> 3385;
3387 -> 3386;
3387 -> 3382;
3388 -> 3385;
3388 -> 3383;
3388 -> 3358;
3388 -> 3387;
3389 -> 3354;
3389 -> 3383;
3389 -> 3358;
3389 -> 3387;
3390 -> 3355;
3390 -> 3358;
3390 -> 3353;
3391 -> 3358;
3391 -> 3390;
3391 -> 3353;
3392 -> 3358;
3392 -> 3373;
3392 -> 3383;
3392 -> 3391;
3393 -> 3391;
3394 -> 3385;
3394 -> 3393;
3394 -> 3391;
3395 -> 3385;
3395 -> 3383;
3395 -> 3358;
3395 -> 3394;
3396 -> 3391;
3397 -> 3358;
3397 -> 3395;
3397 -> 3396;
3397 -> 3391;
3398 -> 3358;
3398 -> 3395;
3398 -> 3383;
3398 -> 3396;
3398 -> 3391;
3399 -> 3358;
3399 -> 3373;
3399 -> 3383;
3399 -> 3353;
3400 -> 3399;
3400 -> 3358;
3400 -> 3353;
3401 -> 3352;
3401 -> 3399;
3401 -> 3389;
3401 -> 3371;
3401 -> 3372;
3401 -> 3362;
3401 -> 3395;
3401 -> 3400;
3401 -> 3365;
3401 -> 3388;
3401 -> 3390;
3401 -> 3376;
3401 -> 3379;
3401 -> 3369;
3401 -> 3358;
3401 -> 3373;
3401 -> 3334;
3402 -> 3335;
3402 -> 3334;
3403 -> 3402;
3403 -> 3350;
3403 -> 3334;
3404 -> 3403;
3405 -> 3404;
3405 -> 3401;
3405 -> 3350;
3405 -> 3403;
3406 -> 3405;
3406 -> 3404;
3407 -> 3405;
3407 -> 3404;
3408 -> 3406;
3408 -> 3404;
3409 -> 3404;
3410 -> 3408;
3410 -> 3409;
3410 -> 3404;
3411 -> 3408;
3411 -> 3405;
3411 -> 3404;
3412 -> 3407;
3412 -> 3405;
3412 -> 3411;
3412 -> 3404;
3413 -> 3407;
3413 -> 3412;
3413 -> 3408;
3413 -> 3404;
3414 -> 3407;
3414 -> 3412;
3414 -> 3408;
3414 -> 3404;
3415 -> 3407;
3415 -> 3412;
3415 -> 3404;
3416 -> 3407;
3416 -> 3412;
3416 -> 3408;
3416 -> 3415;
3417 -> 3404;
3418 -> 3407;
3418 -> 3412;
3418 -> 3417;
3418 -> 3404;
3419 -> 3418;
3420 -> 3404;
3421 -> 3407;
3421 -> 3412;
3421 -> 3420;
3421 -> 3404;
3422 -> 3404;
3423 -> 3408;
3423 -> 3412;
3423 -> 3422;
3423 -> 3404;
3424 -> 3407;
3424 -> 3412;
3424 -> 3408;
3424 -> 3404;
3425 -> 3404;
3426 -> 3407;
3426 -> 3412;
3426 -> 3425;
3426 -> 3404;
3427 -> 3426;
3428 -> 3426;
3429 -> 3407;
3429 -> 3428;
3430 -> 3428;
3431 -> 3429;
3431 -> 3412;
3431 -> 3430;
3431 -> 3428;
3432 -> 3429;
3432 -> 3412;
3432 -> 3431;
3433 -> 3431;
3434 -> 3432;
3434 -> 3429;
3434 -> 3431;
3435 -> 3429;
3435 -> 3412;
3435 -> 3434;
3435 -> 3428;
3436 -> 3435;
3436 -> 3426;
3437 -> 3426;
3438 -> 3408;
3438 -> 3437;
3439 -> 3437;
3440 -> 3438;
3440 -> 3412;
3440 -> 3434;
3440 -> 3439;
3440 -> 3437;
3441 -> 3438;
3441 -> 3412;
3441 -> 3434;
3441 -> 3440;
3441 -> 3437;
3442 -> 3441;
3442 -> 3426;
3443 -> 3407;
3443 -> 3412;
3443 -> 3408;
3443 -> 3426;
3444 -> 3436;
3444 -> 3443;
3445 -> 3442;
3445 -> 3443;
3446 -> 3444;
3446 -> 3445;
3446 -> 3412;
3446 -> 3434;
3446 -> 3440;
3446 -> 3432;
3446 -> 3433;
3446 -> 3443;
3447 -> 3407;
3447 -> 3446;
3447 -> 3408;
3447 -> 3404;
3448 -> 3404;
3449 -> 3405;
3449 -> 3448;
3449 -> 3446;
3449 -> 3403;
3450 -> 3403;
3451 -> 3449;
3451 -> 3450;
3451 -> 3403;
3452 -> 3449;
3452 -> 3451;
3453 -> 3334;
3454 -> 3401;
3454 -> 3452;
3454 -> 3453;
3454 -> 3334;
3455 -> 3334;
3456 -> 3335;
3456 -> 3334;
3457 -> 3334;
3458 -> 3456;
3458 -> 3457;
3459 -> 3457;
3460 -> 3457;
3461 -> 3324;
3461 -> 3457;
3462 -> 3461;
3462 -> 3452;
3462 -> 3457;
3463 -> 3452;
3463 -> 3457;
3464 -> 3462;
3464 -> 3457;
3465 -> 3459;
3465 -> 3464;
3466 -> 3465;
3466 -> 3457;
3467 -> 3465;
3467 -> 3457;
3468 -> 3467;
3468 -> 3457;
3469 -> 3458;
3469 -> 3457;
3470 -> 3469;
3470 -> 3452;
3470 -> 3457;
3471 -> 3457;
3472 -> 3469;
3472 -> 3471;
3472 -> 3452;
3472 -> 3457;
3473 -> 3458;
3473 -> 3457;
3474 -> 3473;
3474 -> 3472;
3474 -> 3457;
3475 -> 3457;
3476 -> 3473;
3476 -> 3475;
3476 -> 3472;
3476 -> 3457;
3477 -> 3458;
3477 -> 3457;
3478 -> 3457;
3479 -> 3477;
3479 -> 3478;
3480 -> 2111;
3480 -> 3478;
3481 -> 3478;
3482 -> 3479;
3482 -> 3478;
3483 -> 3482;
3483 -> 3476;
3483 -> 3478;
3484 -> 3483;
3485 -> 3484;
3486 -> 3457;
3487 -> 3486;
3487 -> 3457;
3488 -> 3457;
3489 -> 3457;
3490 -> 3486;
3490 -> 3489;
3490 -> 3487;
3490 -> 3457;
3491 -> 3457;
3492 -> 3458;
3492 -> 3457;
3493 -> 3492;
3493 -> 3476;
3493 -> 3457;
3494 -> 3493;
3495 -> 3468;
3495 -> 3493;
3496 -> 3493;
3497 -> 3494;
3497 -> 3496;
3498 -> 3495;
3498 -> 3496;
3499 -> 3496;
3500 -> 3499;
3500 -> 3498;
3500 -> 3496;
3501 -> 3496;
3502 -> 3497;
3502 -> 3501;
3503 -> 3501;
3504 -> 3501;
3505 -> 3503;
3505 -> 3504;
3505 -> 3501;
3506 -> 3501;
3507 -> 3502;
3507 -> 3476;
3507 -> 3506;
3507 -> 3501;
3508 -> 3502;
3508 -> 3476;
3508 -> 3507;
3509 -> 3503;
3509 -> 3508;
3509 -> 3505;
3509 -> 3507;
3510 -> 3507;
3511 -> 3503;
3511 -> 3510;
3511 -> 3509;
3511 -> 3507;
3512 -> 3502;
3512 -> 3476;
3512 -> 3507;
3513 -> 3503;
3513 -> 3512;
3513 -> 3511;
3513 -> 3507;
3514 -> 3501;
3515 -> 3502;
3515 -> 3476;
3515 -> 3514;
3515 -> 3501;
3516 -> 3502;
3516 -> 3476;
3516 -> 3501;
3517 -> 3501;
3518 -> 3503;
3518 -> 3517;
3518 -> 3513;
3518 -> 3501;
3519 -> 3501;
3520 -> 3502;
3520 -> 3476;
3520 -> 3519;
3520 -> 3501;
3521 -> 3520;
3522 -> 3503;
3522 -> 3521;
3522 -> 3518;
3522 -> 3520;
3523 -> 3520;
3524 -> 3523;
3524 -> 3520;
3525 -> 3520;
3526 -> 3524;
3526 -> 3520;
3527 -> 3526;
3528 -> 3503;
3528 -> 3527;
3528 -> 3522;
3528 -> 3526;
3529 -> 3524;
3529 -> 3526;
3530 -> 3503;
3530 -> 3529;
3530 -> 3528;
3530 -> 3526;
3531 -> 3526;
3532 -> 3503;
3532 -> 3531;
3532 -> 3530;
3532 -> 3526;
3533 -> 3526;
3534 -> 3520;
3535 -> 3503;
3535 -> 3534;
3535 -> 3532;
3535 -> 3520;
3536 -> 3501;
3537 -> 3502;
3537 -> 3526;
3537 -> 3536;
3537 -> 3501;
3538 -> 3502;
3538 -> 3526;
3538 -> 3501;
3539 -> 3501;
3540 -> 3502;
3540 -> 3526;
3540 -> 3539;
3540 -> 3501;
3541 -> 3501;
3542 -> 3502;
3542 -> 3526;
3542 -> 3541;
3542 -> 3501;
3543 -> 3501;
3544 -> 3502;
3544 -> 3526;
3544 -> 3543;
3544 -> 3501;
3545 -> 3503;
3545 -> 3535;
3545 -> 3501;
3546 -> 3545;
3546 -> 3496;
3547 -> 3500;
3547 -> 3546;
3547 -> 3496;
3548 -> 3491;
3548 -> 3547;
3548 -> 3493;
3549 -> 3486;
3549 -> 3457;
3550 -> 3491;
3550 -> 3457;
3551 -> 3457;
3552 -> 3549;
3552 -> 3551;
3553 -> 3550;
3553 -> 3551;
3554 -> 3553;
3554 -> 3548;
3554 -> 3551;
3555 -> 3551;
3556 -> 3555;
3556 -> 3554;
3556 -> 3551;
3557 -> 3553;
3557 -> 3555;
3557 -> 3548;
3557 -> 3556;
3558 -> 3552;
3558 -> 3557;
3558 -> 3490;
3558 -> 3556;
3559 -> 3556;
3560 -> 3552;
3560 -> 3558;
3560 -> 3556;
3561 -> 3457;
3562 -> 3457;
3563 -> 3486;
3563 -> 3562;
3563 -> 3560;
3563 -> 3457;
3564 -> 3457;
3565 -> 3457;
3566 -> 3526;
3567 -> 3566;
3567 -> 3526;
3568 -> 3567;
3568 -> 3526;
3569 -> 3526;
3570 -> 3526;
3571 -> 3466;
3571 -> 3526;
3572 -> 3486;
3572 -> 3571;
3573 -> 3468;
3573 -> 3571;
3574 -> 3571;
3575 -> 3572;
3575 -> 3574;
3576 -> 3573;
3576 -> 3574;
3577 -> 3574;
3578 -> 3577;
3578 -> 3576;
3578 -> 3574;
3579 -> 3575;
3579 -> 3577;
3579 -> 3578;
3579 -> 3563;
3579 -> 3574;
3580 -> 3571;
3581 -> 3571;
3582 -> 3486;
3582 -> 3581;
3582 -> 3579;
3582 -> 3571;
3583 -> 3566;
3583 -> 3567;
3583 -> 3571;
3584 -> 3486;
3584 -> 3583;
3584 -> 3582;
3584 -> 3571;
3585 -> 3566;
3585 -> 3583;
3585 -> 3571;
3586 -> 3585;
3586 -> 3583;
3586 -> 3571;
3587 -> 3566;
3587 -> 3526;
3588 -> 3526;
3589 -> 3470;
3589 -> 3526;
3590 -> 3474;
3590 -> 3526;
3591 -> 3526;
3592 -> 3587;
3592 -> 3591;
3593 -> 3588;
3593 -> 3591;
3594 -> 3589;
3594 -> 3591;
3595 -> 3590;
3595 -> 3591;
3596 -> 3588;
3596 -> 3591;
3597 -> 3596;
3597 -> 3591;
3598 -> 3596;
3598 -> 3591;
3599 -> 3596;
3599 -> 3591;
3600 -> 3596;
3600 -> 3591;
3601 -> 3596;
3601 -> 3591;
3602 -> 3596;
3602 -> 3591;
3603 -> 3596;
3603 -> 3591;
3604 -> 3596;
3604 -> 3591;
3605 -> 3592;
3605 -> 3583;
3605 -> 3596;
3605 -> 3591;
3606 -> 3592;
3606 -> 3583;
3606 -> 3596;
3606 -> 3591;
3607 -> 3592;
3607 -> 3583;
3607 -> 3596;
3607 -> 3591;
3608 -> 3592;
3608 -> 3583;
3608 -> 3596;
3608 -> 3591;
3609 -> 3591;
3610 -> 3592;
3610 -> 3583;
3610 -> 3591;
3611 -> 3596;
3611 -> 3608;
3611 -> 3610;
3612 -> 3596;
3613 -> 3596;
3613 -> 3610;
3613 -> 3612;
3614 -> 3588;
3614 -> 3526;
3615 -> 3458;
3615 -> 3526;
3616 -> 3588;
3616 -> 3526;
3617 -> 3615;
3617 -> 3616;
3617 -> 3608;
3617 -> 3610;
3617 -> 3606;
3617 -> 3607;
3617 -> 3596;
3617 -> 3593;
3617 -> 3594;
3617 -> 3595;
3617 -> 3526;
3618 -> 3526;
3619 -> 3618;
3620 -> 3617;
3620 -> 3619;
3620 -> 3618;
3621 -> 3617;
3621 -> 3618;
3622 -> 3617;
3622 -> 3618;
3623 -> 3617;
3623 -> 3618;
3624 -> 3617;
3624 -> 3623;
3625 -> 3618;
3626 -> 3617;
3626 -> 3625;
3626 -> 3618;
3627 -> 3618;
3628 -> 3617;
3628 -> 3627;
3628 -> 3618;
3629 -> 3618;
3630 -> 3617;
3630 -> 3629;
3630 -> 3618;
3631 -> 3617;
3631 -> 3618;
3632 -> 3617;
3633 -> 3617;
3633 -> 3618;
3634 -> 3526;
3635 -> 3617;
3635 -> 3634;
3635 -> 3526;
3636 -> 3458;
3636 -> 3617;
3636 -> 3635;
3637 -> 3588;
3637 -> 3526;
3638 -> 3468;
3638 -> 3526;
3639 -> 3526;
3640 -> 3637;
3640 -> 3639;
3641 -> 3638;
3641 -> 3639;
3642 -> 3639;
3643 -> 3642;
3643 -> 3641;
3643 -> 3639;
3644 -> 3639;
3645 -> 3639;
3646 -> 3644;
3646 -> 3645;
3646 -> 3639;
3647 -> 3639;
3648 -> 3640;
3648 -> 3617;
3648 -> 3647;
3648 -> 3639;
3649 -> 3640;
3649 -> 3617;
3649 -> 3648;
3650 -> 3644;
3650 -> 3649;
3650 -> 3646;
3650 -> 3648;
3651 -> 3648;
3652 -> 3644;
3652 -> 3651;
3652 -> 3650;
3652 -> 3648;
3653 -> 3640;
3653 -> 3617;
3653 -> 3648;
3654 -> 3644;
3654 -> 3653;
3654 -> 3652;
3654 -> 3648;
3655 -> 3639;
3656 -> 3640;
3656 -> 3617;
3656 -> 3655;
3656 -> 3639;
3657 -> 3640;
3657 -> 3617;
3657 -> 3639;
3658 -> 3639;
3659 -> 3644;
3659 -> 3658;
3659 -> 3654;
3659 -> 3639;
3660 -> 3640;
3660 -> 3617;
3660 -> 3639;
3661 -> 3660;
3662 -> 3644;
3662 -> 3661;
3662 -> 3659;
3662 -> 3660;
3663 -> 3660;
3664 -> 3644;
3664 -> 3663;
3664 -> 3662;
3664 -> 3660;
3665 -> 3660;
3666 -> 3644;
3666 -> 3665;
3666 -> 3664;
3666 -> 3660;
3667 -> 3660;
3668 -> 3644;
3668 -> 3667;
3668 -> 3666;
3668 -> 3660;
3669 -> 3660;
3670 -> 3660;
3671 -> 3644;
3671 -> 3670;
3671 -> 3668;
3671 -> 3660;
3672 -> 3639;
3673 -> 3640;
3673 -> 3660;
3673 -> 3672;
3673 -> 3639;
3674 -> 3673;
3675 -> 3644;
3675 -> 3674;
3675 -> 3671;
3675 -> 3673;
3676 -> 3673;
3677 -> 3644;
3677 -> 3676;
3677 -> 3675;
3677 -> 3673;
3678 -> 3673;
3679 -> 3644;
3679 -> 3678;
3679 -> 3677;
3679 -> 3673;
3680 -> 3673;
3681 -> 3644;
3681 -> 3680;
3681 -> 3679;
3681 -> 3673;
3682 -> 3673;
3683 -> 3644;
3683 -> 3682;
3683 -> 3681;
3683 -> 3673;
3684 -> 3640;
3684 -> 3660;
3684 -> 3639;
3685 -> 3639;
3686 -> 3640;
3686 -> 3660;
3686 -> 3685;
3686 -> 3639;
3687 -> 3639;
3688 -> 3640;
3688 -> 3660;
3688 -> 3687;
3688 -> 3639;
3689 -> 3639;
3690 -> 3640;
3690 -> 3660;
3690 -> 3689;
3690 -> 3639;
3691 -> 3644;
3691 -> 3683;
3691 -> 3639;
3692 -> 3691;
3692 -> 3639;
3693 -> 3643;
3693 -> 3692;
3693 -> 3639;
3694 -> 3486;
3694 -> 3693;
3694 -> 3584;
3694 -> 3526;
3695 -> 3636;
3695 -> 3526;
3696 -> 3468;
3696 -> 3526;
3697 -> 3526;
3698 -> 3695;
3698 -> 3697;
3699 -> 3696;
3699 -> 3697;
3700 -> 3697;
3701 -> 3700;
3701 -> 3699;
3701 -> 3697;
3702 -> 3697;
3703 -> 3697;
3704 -> 3702;
3704 -> 3703;
3704 -> 3697;
3705 -> 3697;
3706 -> 3698;
3706 -> 3660;
3706 -> 3705;
3706 -> 3697;
3707 -> 3698;
3707 -> 3660;
3707 -> 3706;
3708 -> 3702;
3708 -> 3707;
3708 -> 3704;
3708 -> 3706;
3709 -> 3706;
3710 -> 3702;
3710 -> 3709;
3710 -> 3708;
3710 -> 3706;
3711 -> 3698;
3711 -> 3660;
3711 -> 3706;
3712 -> 3702;
3712 -> 3711;
3712 -> 3710;
3712 -> 3706;
3713 -> 3697;
3714 -> 3698;
3714 -> 3660;
3714 -> 3713;
3714 -> 3697;
3715 -> 3698;
3715 -> 3660;
3715 -> 3697;
3716 -> 3697;
3717 -> 3702;
3717 -> 3716;
3717 -> 3712;
3717 -> 3697;
3718 -> 3698;
3718 -> 3660;
3718 -> 3697;
3719 -> 3718;
3720 -> 3702;
3720 -> 3719;
3720 -> 3717;
3720 -> 3718;
3721 -> 3718;
3722 -> 3702;
3722 -> 3721;
3722 -> 3720;
3722 -> 3718;
3723 -> 3718;
3724 -> 3702;
3724 -> 3723;
3724 -> 3722;
3724 -> 3718;
3725 -> 3718;
3726 -> 3702;
3726 -> 3725;
3726 -> 3724;
3726 -> 3718;
3727 -> 3718;
3728 -> 3718;
3729 -> 3702;
3729 -> 3728;
3729 -> 3726;
3729 -> 3718;
3730 -> 3697;
3731 -> 3698;
3731 -> 3718;
3731 -> 3730;
3731 -> 3697;
3732 -> 3698;
3732 -> 3718;
3732 -> 3697;
3733 -> 3697;
3734 -> 3698;
3734 -> 3718;
3734 -> 3733;
3734 -> 3697;
3735 -> 3697;
3736 -> 3698;
3736 -> 3718;
3736 -> 3735;
3736 -> 3697;
3737 -> 3697;
3738 -> 3698;
3738 -> 3718;
3738 -> 3737;
3738 -> 3697;
3739 -> 3702;
3739 -> 3729;
3739 -> 3697;
3740 -> 3739;
3740 -> 3697;
3741 -> 3701;
3741 -> 3740;
3741 -> 3697;
3742 -> 3564;
3742 -> 3741;
3742 -> 3526;
3743 -> 3457;
3744 -> 3526;
3744 -> 3743;
3744 -> 3457;
3745 -> 3486;
3745 -> 3694;
3745 -> 3744;
3746 -> 3457;
3747 -> 3486;
3747 -> 3746;
3747 -> 3745;
3747 -> 3457;
3748 -> 3491;
3748 -> 3457;
3749 -> 3564;
3749 -> 3457;
3750 -> 0;
3750 -> 3457;
3751 -> 3457;
3752 -> 3457;
3753 -> 3748;
3753 -> 3752;
3754 -> 3749;
3754 -> 3752;
3755 -> 3750;
3755 -> 3752;
3756 -> 3751;
3756 -> 3752;
3757 -> 3751;
3757 -> 3752;
3758 -> 3752;
3759 -> 3756;
3759 -> 3758;
3759 -> 3752;
3760 -> 3759;
3760 -> 3752;
3761 -> 2168;
3761 -> 3760;
3762 -> 3752;
3763 -> 3762;
3763 -> 3757;
3763 -> 3752;
3764 -> 3753;
3764 -> 3752;
3765 -> 3754;
3765 -> 3752;
3766 -> 3755;
3766 -> 3752;
3767 -> 3764;
3767 -> 3752;
3768 -> 3765;
3768 -> 3752;
3769 -> 3763;
3769 -> 3752;
3770 -> 3752;
3771 -> 3767;
3771 -> 3770;
3772 -> 3768;
3772 -> 3770;
3773 -> 3769;
3773 -> 3770;
3774 -> 3761;
3774 -> 3770;
3775 -> 3771;
3775 -> 3770;
3776 -> 3771;
3776 -> 3764;
3776 -> 3770;
3777 -> 3772;
3777 -> 3770;
3778 -> 3772;
3778 -> 3765;
3778 -> 3770;
3779 -> 3770;
3780 -> 3775;
3780 -> 3779;
3781 -> 3776;
3781 -> 3779;
3782 -> 3777;
3782 -> 3779;
3783 -> 3778;
3783 -> 3779;
3784 -> 3774;
3784 -> 3779;
3785 -> 3780;
3785 -> 3779;
3786 -> 3781;
3786 -> 3779;
3787 -> 3782;
3787 -> 3779;
3788 -> 3783;
3788 -> 3779;
3789 -> 3779;
3790 -> 3785;
3790 -> 3789;
3791 -> 3786;
3791 -> 3789;
3792 -> 3787;
3792 -> 3789;
3793 -> 3788;
3793 -> 3789;
3794 -> 3784;
3794 -> 3789;
3795 -> 3789;
3796 -> 3791;
3796 -> 3795;
3796 -> 3789;
3797 -> 3789;
3798 -> 3793;
3798 -> 3797;
3798 -> 3789;
3799 -> 3796;
3799 -> 3798;
3799 -> 3789;
3800 -> 3789;
3801 -> 3800;
3801 -> 3799;
3801 -> 3789;
3802 -> 3789;
3803 -> 3802;
3803 -> 3791;
3803 -> 3789;
3804 -> 3803;
3805 -> 3799;
3805 -> 3801;
3805 -> 3804;
3805 -> 3803;
3806 -> 3805;
3806 -> 3802;
3806 -> 3804;
3806 -> 3799;
3806 -> 3803;
3807 -> 3789;
3808 -> 3807;
3808 -> 3793;
3808 -> 3789;
3809 -> 3808;
3810 -> 3799;
3810 -> 3801;
3810 -> 3806;
3810 -> 3809;
3810 -> 3808;
3811 -> 3810;
3811 -> 3809;
3811 -> 3807;
3811 -> 3799;
3811 -> 3808;
3812 -> 3789;
3813 -> 3812;
3813 -> 3791;
3813 -> 3789;
3814 -> 3813;
3815 -> 3814;
3815 -> 3793;
3815 -> 3813;
3816 -> 3815;
3817 -> 3799;
3817 -> 3801;
3817 -> 3806;
3817 -> 3811;
3817 -> 3816;
3817 -> 3815;
3818 -> 3790;
3818 -> 3815;
3819 -> 3792;
3819 -> 3815;
3820 -> 3815;
3821 -> 3818;
3821 -> 3820;
3822 -> 3816;
3822 -> 3820;
3823 -> 3819;
3823 -> 3820;
3824 -> 3816;
3824 -> 3820;
3825 -> 3794;
3825 -> 3820;
3826 -> 3821;
3826 -> 3764;
3826 -> 3822;
3826 -> 3820;
3827 -> 3823;
3827 -> 3765;
3827 -> 3824;
3827 -> 3820;
3828 -> 3825;
3828 -> 0;
3828 -> 3826;
3828 -> 3827;
3828 -> 3764;
3828 -> 3765;
3828 -> 3820;
3829 -> 3817;
3829 -> 3828;
3829 -> 3815;
3830 -> 3815;
3831 -> 3799;
3831 -> 3801;
3831 -> 3806;
3831 -> 3811;
3831 -> 3830;
3831 -> 3814;
3831 -> 3815;
3832 -> 3815;
3833 -> 3799;
3833 -> 3801;
3833 -> 3806;
3833 -> 3811;
3833 -> 3812;
3833 -> 3832;
3833 -> 3815;
3834 -> 3829;
3834 -> 3815;
3835 -> 3831;
3835 -> 3815;
3836 -> 3834;
3836 -> 3835;
3836 -> 3815;
3837 -> 3833;
3837 -> 3815;
3838 -> 3836;
3838 -> 3837;
3838 -> 3815;
3839 -> 3838;
3839 -> 3812;
3839 -> 3814;
3839 -> 3799;
3839 -> 3815;
3840 -> 3799;
3840 -> 3789;
3841 -> 3781;
3841 -> 3779;
3842 -> 3783;
3842 -> 3779;
3843 -> 3779;
3844 -> 3841;
3844 -> 3843;
3844 -> 3779;
3845 -> 3842;
3845 -> 3843;
3845 -> 3779;
3846 -> 3844;
3846 -> 3845;
3846 -> 3779;
3847 -> 3840;
3847 -> 3799;
3847 -> 3801;
3847 -> 3806;
3847 -> 3811;
3847 -> 3839;
3847 -> 3841;
3847 -> 3842;
3847 -> 3846;
3848 -> 3846;
3849 -> 3840;
3849 -> 3799;
3849 -> 3801;
3849 -> 3806;
3849 -> 3811;
3849 -> 3839;
3849 -> 3848;
3849 -> 3842;
3849 -> 3846;
3850 -> 3840;
3850 -> 3799;
3850 -> 3801;
3850 -> 3806;
3850 -> 3811;
3850 -> 3839;
3850 -> 3841;
3850 -> 3842;
3850 -> 3849;
3851 -> 3849;
3852 -> 3841;
3852 -> 3851;
3853 -> 3842;
3853 -> 3851;
3854 -> 3851;
3855 -> 0;
3855 -> 3851;
3856 -> 3852;
3856 -> 3851;
3857 -> 3853;
3857 -> 3851;
3858 -> 3851;
3859 -> 3855;
3859 -> 3858;
3860 -> 3856;
3860 -> 3858;
3861 -> 3857;
3861 -> 3858;
3862 -> 3854;
3862 -> 3858;
3863 -> 3859;
3863 -> 3862;
3863 -> 3858;
3864 -> 3860;
3864 -> 3862;
3864 -> 3858;
3865 -> 3861;
3865 -> 3862;
3865 -> 3858;
3866 -> 3779;
3867 -> 3852;
3867 -> 3866;
3867 -> 3779;
3868 -> 3779;
3869 -> 3853;
3869 -> 3868;
3869 -> 3779;
3870 -> 3854;
3870 -> 3863;
3870 -> 3864;
3870 -> 3865;
3870 -> 3770;
3871 -> 3870;
3872 -> 3871;
3873 -> 3772;
3873 -> 3765;
3873 -> 3828;
3873 -> 3870;
3873 -> 3871;
3874 -> 3773;
3874 -> 3873;
3874 -> 3762;
3874 -> 3871;
3875 -> 3766;
3875 -> 3872;
3875 -> 3752;
3876 -> 3486;
3876 -> 3875;
3876 -> 3747;
3876 -> 3457;
3877 -> 3564;
3877 -> 3742;
3877 -> 3457;
3878 -> 3491;
3878 -> 3557;
3878 -> 3457;
3879 -> 3486;
3879 -> 3876;
3879 -> 3457;
3880 -> 3327;
3881 -> 2674;
3882 -> 2675;
3882 -> 2674;
3883 -> 3324;
3883 -> 2674;
3884 -> 2674;
3885 -> 3882;
3885 -> 3884;
3886 -> 3883;
3886 -> 3884;
3887 -> 3886;
3887 -> 3884;
3888 -> 3887;
3888 -> 3324;
3888 -> 3718;
3889 -> 3887;
3890 -> 3888;
3890 -> 3889;
3891 -> 3885;
3891 -> 3889;
3892 -> 3890;
3892 -> 0;
3892 -> 3889;
3893 -> 3887;
3893 -> 3892;
3894 -> 3893;
3894 -> 3885;
3894 -> 3324;
3894 -> 3718;
3894 -> 3892;
3895 -> 3892;
3896 -> 3894;
3896 -> 3895;
3897 -> 3894;
3897 -> 3892;
3898 -> 2674;
3899 -> 2675;
3899 -> 2674;
3900 -> 1;
3901 -> 3900;
3901 -> 1;
3902 -> 1;
3903 -> 0;
3903 -> 3902;
3903 -> 3894;
3903 -> 1;
3904 -> 1;
3905 -> 3902;
3905 -> 3904;
3906 -> 3905;
3906 -> 3904;
3907 -> 3904;
3908 -> 3906;
3908 -> 3907;
3909 -> 3907;
3910 -> 3908;
3910 -> 3909;
3910 -> 3907;
3911 -> 3907;
3911 -> 1;
3912 -> 3901;
3912 -> 3904;
3913 -> 3902;
3913 -> 3904;
3914 -> 3903;
3914 -> 3904;
3915 -> 3902;
3915 -> 3904;
3916 -> 3911;
3916 -> 3904;
3917 -> 3902;
3917 -> 3904;
3918 -> 3902;
3918 -> 3904;
3919 -> 3902;
3919 -> 3904;
3920 -> 3912;
3920 -> 3904;
3921 -> 3916;
3921 -> 3904;
3922 -> 3913;
3922 -> 3904;
3923 -> 3904;
3924 -> 3921;
3924 -> 3923;
3925 -> 3922;
3925 -> 3923;
3926 -> 3924;
3926 -> 3923;
3927 -> 3923;
3928 -> 3926;
3928 -> 3927;
3929 -> 3928;
3929 -> 3927;
3930 -> 3929;
3931 -> 0;
3931 -> 3930;
3932 -> 3931;
3933 -> 3932;
3934 -> 3932;
3935 -> 0;
3935 -> 3934;
3936 -> 3935;
3936 -> 3933;
3936 -> 3932;
3937 -> 3933;
3937 -> 3936;
3937 -> 3903;
3937 -> 3932;
3938 -> 3923;
3939 -> 3925;
3939 -> 3938;
3939 -> 3923;
3940 -> 3915;
3940 -> 3904;
3941 -> 3917;
3941 -> 3904;
3942 -> 3918;
3942 -> 3904;
3943 -> 3919;
3943 -> 3904;
3944 -> 3904;
3945 -> 3920;
3945 -> 3944;
3946 -> 3940;
3946 -> 3944;
3947 -> 3941;
3947 -> 3944;
3948 -> 3942;
3948 -> 3944;
3949 -> 3943;
3949 -> 3944;
3950 -> 3945;
3950 -> 3944;
3951 -> 3946;
3951 -> 3944;
3952 -> 3947;
3952 -> 3944;
3953 -> 3948;
3953 -> 3944;
3954 -> 3949;
3954 -> 3944;
3955 -> 3944;
3956 -> 3955;
3956 -> 3944;
3957 -> 3944;
3958 -> 3950;
3958 -> 3957;
3959 -> 3951;
3959 -> 3957;
3960 -> 3952;
3960 -> 3957;
3961 -> 3953;
3961 -> 3957;
3962 -> 3954;
3962 -> 3957;
3963 -> 3956;
3963 -> 3957;
3964 -> 3959;
3964 -> 3957;
3965 -> 3961;
3965 -> 3957;
3966 -> 3957;
3967 -> 3964;
3967 -> 3966;
3968 -> 3965;
3968 -> 3966;
3969 -> 3958;
3969 -> 3966;
3970 -> 3969;
3970 -> 3901;
3970 -> 3966;
3971 -> 3970;
3972 -> 3968;
3972 -> 3970;
3973 -> 3967;
3973 -> 3970;
3974 -> 3970;
3975 -> 3971;
3975 -> 3974;
3976 -> 3972;
3976 -> 3974;
3977 -> 3973;
3977 -> 3974;
3978 -> 3971;
3978 -> 3974;
3979 -> 3974;
3980 -> 3977;
3980 -> 3979;
3980 -> 3974;
3981 -> 0;
3981 -> 3980;
3982 -> 3975;
3982 -> 3974;
3983 -> 0;
3983 -> 3974;
3984 -> 3983;
3984 -> 3978;
3984 -> 3974;
3985 -> 3974;
3986 -> 3982;
3986 -> 3984;
3986 -> 3985;
3986 -> 3903;
3986 -> 3974;
3987 -> 3981;
3987 -> 3974;
3988 -> 3976;
3988 -> 3974;
3989 -> 3974;
3990 -> 3974;
3991 -> 3990;
3992 -> 3990;
3993 -> 3986;
3993 -> 3992;
3993 -> 3990;
3994 -> 3991;
3994 -> 3990;
3995 -> 3990;
3996 -> 3993;
3996 -> 3986;
3996 -> 3992;
3996 -> 3994;
3996 -> 3995;
3996 -> 3991;
3996 -> 3990;
3997 -> 3990;
3998 -> 3997;
3998 -> 3991;
3998 -> 3990;
3999 -> 3991;
3999 -> 3990;
4000 -> 3990;
4001 -> 3999;
4001 -> 4000;
4001 -> 3991;
4001 -> 3998;
4001 -> 3990;
4002 -> 3971;
4002 -> 3957;
4003 -> 3957;
4004 -> 3914;
4004 -> 4003;
4004 -> 3957;
4005 -> 0;
4005 -> 3957;
4006 -> 3963;
4006 -> 3957;
4007 -> 3960;
4007 -> 4002;
4007 -> 3937;
4007 -> 3914;
4007 -> 3957;
4008 -> 4007;
4008 -> 3957;
4009 -> 3957;
4010 -> 4008;
4010 -> 4009;
4011 -> 0;
4011 -> 4009;
4012 -> 4011;
4013 -> 3957;
4014 -> 3957;
4015 -> 4014;
4016 -> 4014;
4017 -> 4014;
4018 -> 4016;
4018 -> 4017;
4019 -> 4016;
4019 -> 4017;
4020 -> 4016;
4020 -> 4017;
4021 -> 4016;
4021 -> 4017;
4022 -> 4017;
4023 -> 4007;
4023 -> 4022;
4023 -> 4017;
4024 -> 4021;
4024 -> 4017;
4025 -> 4018;
4025 -> 4017;
4026 -> 4019;
4026 -> 4017;
4027 -> 4020;
4027 -> 4017;
4028 -> 4021;
4028 -> 4017;
4029 -> 4017;
4030 -> 0;
4030 -> 4017;
4031 -> 4017;
4032 -> 4030;
4032 -> 4031;
4033 -> 4030;
4033 -> 4031;
4034 -> 4028;
4034 -> 4031;
4035 -> 4029;
4035 -> 4031;
4036 -> 4029;
4036 -> 4031;
4037 -> 4032;
4037 -> 4031;
4038 -> 4033;
4038 -> 4031;
4039 -> 4034;
4039 -> 4031;
4040 -> 4031;
4041 -> 4040;
4041 -> 4031;
4042 -> 4035;
4042 -> 4040;
4042 -> 4031;
4043 -> 4017;
4044 -> 4025;
4044 -> 4043;
4045 -> 4026;
4045 -> 4043;
4046 -> 4027;
4046 -> 4043;
4047 -> 4028;
4047 -> 4043;
4048 -> 4029;
4048 -> 4043;
4049 -> 4029;
4049 -> 4043;
4050 -> 4029;
4050 -> 4043;
4051 -> 4029;
4051 -> 4043;
4052 -> 4029;
4052 -> 4043;
4053 -> 4029;
4053 -> 4043;
4054 -> 4044;
4054 -> 4043;
4055 -> 4045;
4055 -> 4043;
4056 -> 4046;
4056 -> 4043;
4057 -> 4047;
4057 -> 4043;
4058 -> 4048;
4058 -> 4043;
4059 -> 4049;
4059 -> 4043;
4060 -> 4050;
4060 -> 4043;
4061 -> 4051;
4061 -> 4043;
4062 -> 4052;
4062 -> 4043;
4063 -> 4043;
4064 -> 4054;
4064 -> 4063;
4065 -> 4055;
4065 -> 4063;
4066 -> 4056;
4066 -> 4063;
4067 -> 4057;
4067 -> 4063;
4068 -> 4058;
4068 -> 4063;
4069 -> 4059;
4069 -> 4063;
4070 -> 4060;
4070 -> 4063;
4071 -> 4061;
4071 -> 4063;
4072 -> 4062;
4072 -> 4063;
4073 -> 4053;
4073 -> 4063;
4074 -> 4067;
4074 -> 4063;
4075 -> 4071;
4075 -> 4063;
4076 -> 4072;
4076 -> 4063;
4077 -> 4063;
4078 -> 4077;
4078 -> 4063;
4079 -> 4077;
4079 -> 4063;
4080 -> 4077;
4080 -> 4063;
4081 -> 4077;
4081 -> 4063;
4082 -> 4077;
4082 -> 4063;
4083 -> 4077;
4083 -> 4063;
4084 -> 4077;
4084 -> 4063;
4085 -> 4077;
4085 -> 4063;
4086 -> 4077;
4086 -> 4063;
4087 -> 4077;
4087 -> 4063;
4088 -> 4077;
4088 -> 4063;
4089 -> 4077;
4089 -> 4063;
4090 -> 4077;
4090 -> 4063;
4091 -> 4077;
4091 -> 4063;
4092 -> 4077;
4092 -> 4063;
4093 -> 4077;
4093 -> 4063;
4094 -> 4077;
4094 -> 4063;
4095 -> 4077;
4095 -> 4063;
4096 -> 4077;
4096 -> 4063;
4097 -> 4077;
4097 -> 4063;
4098 -> 4077;
4098 -> 4063;
4099 -> 4077;
4099 -> 4063;
4100 -> 4077;
4100 -> 4063;
4101 -> 4077;
4101 -> 4063;
4102 -> 4077;
4102 -> 4063;
4103 -> 4077;
4103 -> 4063;
4104 -> 4063;
4105 -> 4104;
4105 -> 4077;
4105 -> 4063;
4106 -> 4077;
4106 -> 4063;
4107 -> 4077;
4107 -> 4063;
4108 -> 4063;
4109 -> 4063;
4110 -> 4107;
4110 -> 4109;
4111 -> 4108;
4111 -> 4109;
4112 -> 4111;
4112 -> 4109;
4113 -> 4111;
4113 -> 4109;
4114 -> 4111;
4114 -> 4109;
4115 -> 4110;
4115 -> 4111;
4115 -> 4109;
4116 -> 4108;
4116 -> 4077;
4116 -> 4063;
4117 -> 4077;
4117 -> 4063;
4118 -> 4063;
4119 -> 4118;
4120 -> 0;
4120 -> 4118;
4121 -> 4120;
4121 -> 4119;
4121 -> 4118;
4122 -> 4121;
4122 -> 4063;
4123 -> 4122;
4123 -> 4077;
4123 -> 4063;
4124 -> 4067;
4124 -> 4063;
4125 -> 4124;
4126 -> 4064;
4126 -> 4125;
4126 -> 4124;
4127 -> 4065;
4127 -> 4125;
4127 -> 4124;
4128 -> 4126;
4128 -> 4127;
4128 -> 4124;
4129 -> 4066;
4129 -> 4125;
4129 -> 4124;
4130 -> 4128;
4130 -> 4129;
4130 -> 4124;
4131 -> 4069;
4131 -> 4063;
4132 -> 4131;
4133 -> 4077;
4133 -> 4132;
4134 -> 4068;
4134 -> 4131;
4135 -> 4070;
4135 -> 4077;
4135 -> 4063;
4136 -> 4077;
4136 -> 4007;
4136 -> 4063;
4137 -> 4063;
4138 -> 4077;
4138 -> 4007;
4138 -> 4137;
4138 -> 4063;
4139 -> 4017;
4140 -> 4007;
4141 -> 4007;
4142 -> 4007;
4143 -> 4007;
4144 -> 4007;
4145 -> 4141;
4145 -> 4007;
4146 -> 4007;
4147 -> 4007;
4148 -> 4007;
4149 -> 4007;
4150 -> 4007;
4151 -> 4007;
4152 -> 4007;
4153 -> 4007;
4154 -> 4151;
4154 -> 4007;
4155 -> 4152;
4155 -> 4007;
4156 -> 4153;
4156 -> 4007;
4157 -> 4154;
4157 -> 4007;
4158 -> 4155;
4158 -> 4007;
4159 -> 4156;
4159 -> 4007;
4160 -> 4007;
4161 -> 4007;
4162 -> 4161;
4163 -> 4157;
4163 -> 4162;
4163 -> 4161;
4164 -> 4158;
4164 -> 4162;
4164 -> 4161;
4165 -> 4163;
4165 -> 4164;
4165 -> 4161;
4166 -> 4159;
4166 -> 4162;
4166 -> 4161;
4167 -> 4165;
4167 -> 4166;
4167 -> 4161;
4168 -> 4007;
4169 -> 4007;
4170 -> 4007;
4171 -> 4007;
4171 -> 4017;
4172 -> 3957;
4173 -> 4172;
4174 -> 4173;
4175 -> 4174;
4176 -> 4007;
4177 -> 4007;
4178 -> 4176;
4178 -> 4007;
4179 -> 4176;
4179 -> 4007;
4180 -> 4176;
4180 -> 4007;
4181 -> 4007;
4182 -> 4181;
4182 -> 0;
4182 -> 4007;
4183 -> 4176;
4183 -> 4007;
4184 -> 4176;
4184 -> 4007;
4185 -> 4176;
4185 -> 4007;
4186 -> 4176;
4186 -> 4007;
4187 -> 4176;
4187 -> 4007;
4188 -> 4176;
4188 -> 4172;
4189 -> 4172;
4190 -> 0;
4190 -> 4172;
4191 -> 3962;
4191 -> 4176;
4191 -> 3957;
4192 -> 4007;
4192 -> 1;
4193 -> 1;
4194 -> 1;
4195 -> 4192;
4195 -> 4194;
4196 -> 4193;
4196 -> 4194;
4197 -> 4194;
4198 -> 4194;
4199 -> 4197;
4199 -> 4198;
4200 -> 0;
4200 -> 4198;
4201 -> 4198;
4202 -> 4199;
4202 -> 4198;
4203 -> 4198;
4204 -> 4200;
4204 -> 4203;
4205 -> 4201;
4205 -> 4203;
4206 -> 4202;
4206 -> 4203;
4207 -> 4203;
4208 -> 4204;
4208 -> 4203;
4209 -> 4205;
4209 -> 4203;
4210 -> 4207;
4210 -> 4203;
4211 -> 4206;
4211 -> 4203;
4212 -> 4203;
4213 -> 4208;
4213 -> 4212;
4214 -> 4209;
4214 -> 4212;
4215 -> 4210;
4215 -> 4212;
4216 -> 4211;
4216 -> 4212;
4217 -> 4212;
4218 -> 4213;
4218 -> 0;
4218 -> 4212;
4219 -> 4218;
4219 -> 4214;
4219 -> 4212;
4220 -> 4219;
4221 -> 4220;
4222 -> 4195;
4222 -> 4176;
4222 -> 4221;
4223 -> 4221;
4224 -> 4219;
4225 -> 4195;
4225 -> 4176;
4225 -> 4224;
4226 -> 4225;
4227 -> 4225;
4228 -> 4219;
4229 -> 4222;
4229 -> 4176;
4230 -> 4213;
4230 -> 0;
4230 -> 4212;
4231 -> 4230;
4231 -> 4214;
4231 -> 4212;
4232 -> 4217;
4232 -> 4231;
4233 -> 4232;
4233 -> 4195;
4233 -> 4217;
4233 -> 4176;
4233 -> 4231;
4234 -> 4231;
4235 -> 4231;
4236 -> 4231;
4237 -> 4195;
4237 -> 4236;
4238 -> 4237;
4238 -> 4233;
4238 -> 4236;
4239 -> 4238;
4239 -> 4231;
4240 -> 4231;
4241 -> 4195;
4241 -> 4233;
4242 -> 4216;
4242 -> 4231;
4243 -> 4231;
4244 -> 4231;
4245 -> 4243;
4245 -> 4244;
4246 -> 4243;
4246 -> 4244;
4247 -> 4243;
4247 -> 4244;
4248 -> 4242;
4248 -> 4244;
4249 -> 4244;
4250 -> 4249;
4251 -> 4250;
4252 -> 4248;
4252 -> 4244;
4253 -> 4244;
4254 -> 4244;
4255 -> 4245;
4255 -> 4254;
4255 -> 4244;
4256 -> 4244;
4257 -> 4256;
4258 -> 4257;
4259 -> 4233;
4259 -> 4257;
4260 -> 4253;
4260 -> 4244;
4261 -> 4248;
4261 -> 4244;
4262 -> 4244;
4263 -> 4262;
4264 -> 4263;
4265 -> 4264;
4266 -> 4262;
4267 -> 4266;
4268 -> 4267;
4269 -> 4262;
4270 -> 4269;
4271 -> 4233;
4271 -> 4269;
4272 -> 4233;
4272 -> 4262;
4273 -> 4262;
4274 -> 4233;
4274 -> 4262;
4275 -> 4233;
4275 -> 4262;
4276 -> 4275;
4276 -> 4233;
4276 -> 4262;
4277 -> 4262;
4278 -> 4262;
4279 -> 4233;
4279 -> 0;
4279 -> 4262;
4280 -> 4262;
4281 -> 4233;
4282 -> 4233;
4282 -> 4262;
4283 -> 4262;
4284 -> 4262;
4285 -> 4283;
4285 -> 4284;
4286 -> 4285;
4286 -> 4284;
4287 -> 4284;
4288 -> 4284;
4289 -> 4287;
4289 -> 4288;
4290 -> 4289;
4290 -> 4288;
4291 -> 4288;
4292 -> 4291;
4293 -> 4292;
4294 -> 4292;
4295 -> 4294;
4296 -> 4291;
4297 -> 4296;
4298 -> 4288;
4299 -> 4288;
4300 -> 4288;
4301 -> 4289;
4301 -> 4288;
4302 -> 4288;
4303 -> 4301;
4303 -> 4302;
4304 -> 4303;
4304 -> 4302;
4305 -> 4302;
4306 -> 4302;
4307 -> 4306;
4308 -> 4306;
4309 -> 4283;
4310 -> 4309;
4311 -> 4310;
4312 -> 4233;
4312 -> 4310;
4313 -> 4283;
4314 -> 4262;
4315 -> 4314;
4316 -> 4315;
4317 -> 4314;
4318 -> 4314;
4319 -> 4233;
4319 -> 4262;
4320 -> 4319;
4320 -> 4262;
4321 -> 4262;
4322 -> 4262;
4323 -> 4321;
4323 -> 4322;
4324 -> 4323;
4324 -> 4322;
4325 -> 4322;
4326 -> 4325;
4327 -> 4326;
4328 -> 4326;
4329 -> 4328;
4330 -> 4325;
4331 -> 4330;
4332 -> 4322;
4333 -> 4322;
4334 -> 4322;
4335 -> 4333;
4335 -> 4322;
4336 -> 4323;
4336 -> 4322;
4337 -> 4322;
4338 -> 4336;
4338 -> 4337;
4339 -> 4338;
4339 -> 4337;
4340 -> 4337;
4341 -> 4337;
4342 -> 4341;
4343 -> 4341;
4344 -> 4342;
4344 -> 4341;
4345 -> 4262;
4346 -> 4345;
4347 -> 4346;
4348 -> 4233;
4348 -> 4346;
4349 -> 4262;
4350 -> 4262;
4351 -> 4350;
4352 -> 4351;
4353 -> 4262;
4354 -> 4233;
4354 -> 4262;
4355 -> 4262;
4356 -> 4355;
4357 -> 4356;
4358 -> 4357;
4359 -> 4233;
4359 -> 4357;
4360 -> 4355;
4361 -> 4233;
4361 -> 4262;
4362 -> 4262;
4363 -> 4245;
4363 -> 4244;
4364 -> 4363;
4365 -> 4363;
4366 -> 4244;
4367 -> 4247;
4367 -> 4366;
4367 -> 4244;
4368 -> 4245;
4368 -> 4244;
4369 -> 4246;
4369 -> 4244;
4370 -> 4248;
4370 -> 4244;
4371 -> 4244;
4372 -> 4368;
4372 -> 4371;
4373 -> 4369;
4373 -> 4371;
4374 -> 4370;
4374 -> 4371;
4375 -> 4371;
4376 -> 4372;
4376 -> 4375;
4376 -> 4371;
4377 -> 4233;
4378 -> 4233;
4379 -> 4233;
4379 -> 0;
4380 -> 4233;
4381 -> 4233;
4381 -> 0;
4382 -> 4233;
4382 -> 0;
4383 -> 4233;
4383 -> 0;
4384 -> 4233;
4384 -> 0;
4385 -> 4233;
4385 -> 0;
4386 -> 4233;
4386 -> 0;
4387 -> 4233;
4388 -> 4233;
4389 -> 4233;
4390 -> 4233;
4390 -> 0;
4391 -> 4233;
4392 -> 4233;
4393 -> 4391;
4393 -> 4392;
4394 -> 4393;
4394 -> 4392;
4395 -> 4394;
4396 -> 4233;
4397 -> 4396;
4397 -> 4233;
4398 -> 4233;
4399 -> 4398;
4399 -> 4233;
4400 -> 4389;
4400 -> 4399;
4401 -> 4233;
4402 -> 4400;
4402 -> 4401;
4402 -> 4233;
4403 -> 4402;
4403 -> 4396;
4403 -> 4233;
4404 -> 4396;
4404 -> 4233;
4405 -> 4395;
4405 -> 4404;
4406 -> 4395;
4406 -> 4233;
4407 -> 4233;
4407 -> 0;
4408 -> 4233;
4409 -> 4233;
4410 -> 4233;
4411 -> 4409;
4411 -> 4410;
4412 -> 4411;
4412 -> 4410;
4413 -> 4412;
4414 -> 4233;
4415 -> 4413;
4415 -> 4414;
4416 -> 4233;
4417 -> 4233;
4418 -> 4416;
4418 -> 4417;
4419 -> 4233;
4419 -> 4417;
4420 -> 4418;
4420 -> 4233;
4420 -> 0;
4420 -> 4417;
4421 -> 4420;
4422 -> 4233;
4423 -> 4409;
4423 -> 4422;
4424 -> 4423;
4424 -> 4422;
4425 -> 4424;
4426 -> 4233;
4427 -> 4233;
4428 -> 4233;
4429 -> 4195;
4429 -> 4233;
4429 -> 4371;
4430 -> 4231;
4431 -> 4195;
4431 -> 4233;
4431 -> 4430;
4431 -> 4231;
4432 -> 4213;
4432 -> 0;
4432 -> 4212;
4433 -> 4432;
4434 -> 4433;
4434 -> 4432;
4435 -> 4216;
4435 -> 4432;
4436 -> 4432;
4437 -> 4434;
4437 -> 4436;
4438 -> 4435;
4438 -> 4436;
4439 -> 4436;
4440 -> 4437;
4440 -> 4436;
4441 -> 4438;
4441 -> 4436;
4442 -> 4436;
4443 -> 4439;
4443 -> 4442;
4444 -> 4439;
4444 -> 4442;
4445 -> 4439;
4445 -> 4442;
4446 -> 4439;
4446 -> 4442;
4447 -> 4440;
4447 -> 4442;
4448 -> 4439;
4448 -> 4442;
4449 -> 4441;
4449 -> 4442;
4450 -> 4442;
4451 -> 4195;
4451 -> 4450;
4451 -> 4442;
4452 -> 4442;
4453 -> 4447;
4453 -> 4452;
4453 -> 4442;
4454 -> 4442;
4455 -> 4195;
4455 -> 4454;
4456 -> 4455;
4456 -> 4233;
4456 -> 4454;
4457 -> 4456;
4457 -> 4442;
4458 -> 4442;
4459 -> 4442;
4460 -> 4448;
4460 -> 4442;
4461 -> 4443;
4461 -> 4460;
4462 -> 4446;
4462 -> 4460;
4463 -> 4447;
4463 -> 4460;
4464 -> 4449;
4464 -> 4460;
4465 -> 4460;
4466 -> 4461;
4466 -> 4465;
4467 -> 4462;
4467 -> 4465;
4468 -> 4463;
4468 -> 4465;
4469 -> 4464;
4469 -> 4465;
4470 -> 4469;
4470 -> 4465;
4471 -> 4465;
4472 -> 4470;
4472 -> 4471;
4473 -> 4471;
4474 -> 4233;
4475 -> 4233;
4476 -> 4233;
4477 -> 4476;
4477 -> 4233;
4478 -> 4233;
4479 -> 4478;
4479 -> 4233;
4480 -> 4472;
4480 -> 4233;
4481 -> 4233;
4482 -> 4480;
4482 -> 4233;
4483 -> 4478;
4483 -> 4233;
4484 -> 4233;
4485 -> 4233;
4486 -> 4485;
4486 -> 4476;
4487 -> 4476;
4488 -> 4476;
4488 -> 0;
4489 -> 4233;
4490 -> 4233;
4491 -> 4476;
4492 -> 4233;
4492 -> 4476;
4493 -> 4476;
4494 -> 4476;
4495 -> 4476;
4495 -> 0;
4496 -> 4494;
4496 -> 4476;
4497 -> 4476;
4498 -> 4233;
4498 -> 4476;
4499 -> 4497;
4499 -> 4476;
4500 -> 4497;
4500 -> 4476;
4501 -> 4233;
4502 -> 4233;
4502 -> 4476;
4502 -> 4501;
4503 -> 0;
4503 -> 4502;
4504 -> 4502;
4505 -> 4489;
4505 -> 4504;
4505 -> 4502;
4506 -> 4233;
4507 -> 4233;
4507 -> 4476;
4507 -> 4506;
4508 -> 4476;
4508 -> 4507;
4509 -> 4233;
4510 -> 4489;
4510 -> 4233;
4511 -> 4490;
4511 -> 4233;
4512 -> 4476;
4512 -> 4233;
4513 -> 4233;
4514 -> 4513;
4514 -> 4476;
4515 -> 4514;
4515 -> 4233;
4516 -> 4233;
4517 -> 4476;
4517 -> 4465;
4518 -> 4465;
4519 -> 4465;
4520 -> 4476;
4521 -> 4465;
4522 -> 4476;
4522 -> 4521;
4522 -> 4465;
4523 -> 4443;
4523 -> 4442;
4524 -> 4444;
4524 -> 4442;
4525 -> 4445;
4525 -> 4442;
4526 -> 4446;
4526 -> 4442;
4527 -> 4447;
4527 -> 4442;
4528 -> 4448;
4528 -> 4442;
4529 -> 4449;
4529 -> 4442;
4530 -> 4442;
4531 -> 4442;
4532 -> 4523;
4532 -> 4531;
4533 -> 4524;
4533 -> 4531;
4534 -> 4525;
4534 -> 4531;
4535 -> 4526;
4535 -> 4531;
4536 -> 4527;
4536 -> 4531;
4537 -> 4528;
4537 -> 4531;
4538 -> 4529;
4538 -> 4531;
4539 -> 4530;
4539 -> 4531;
4540 -> 4531;
4541 -> 4540;
4541 -> 4531;
4542 -> 4540;
4542 -> 4531;
4543 -> 4540;
4543 -> 4531;
4544 -> 4540;
4544 -> 4531;
4545 -> 4540;
4545 -> 4531;
4546 -> 4540;
4546 -> 4531;
4547 -> 4540;
4547 -> 4531;
4548 -> 4540;
4548 -> 4531;
4549 -> 4540;
4549 -> 4531;
4550 -> 4540;
4550 -> 4531;
4551 -> 4540;
4551 -> 4531;
4552 -> 4531;
4553 -> 4195;
4553 -> 4552;
4553 -> 4531;
4554 -> 4531;
4555 -> 4536;
4555 -> 4554;
4555 -> 4531;
4556 -> 4532;
4556 -> 4540;
4556 -> 4531;
4557 -> 4533;
4557 -> 4540;
4557 -> 4531;
4558 -> 4538;
4558 -> 4540;
4558 -> 4531;
4559 -> 4536;
4559 -> 4540;
4559 -> 4531;
4560 -> 4537;
4560 -> 4540;
4560 -> 4531;
4561 -> 4535;
4561 -> 4540;
4561 -> 4531;
4562 -> 4535;
4562 -> 4531;
4563 -> 4531;
4564 -> 4562;
4564 -> 4563;
4565 -> 4540;
4565 -> 4563;
4566 -> 4564;
4566 -> 4563;
4567 -> 4531;
4568 -> 4533;
4568 -> 4534;
4568 -> 4531;
4569 -> 4534;
4569 -> 4540;
4569 -> 4531;
4570 -> 4442;
4571 -> 4442;
4572 -> 4571;
4573 -> 4572;
4574 -> 4573;
4575 -> 4476;
4575 -> 4573;
4576 -> 4571;
4577 -> 4442;
4578 -> 4530;
4578 -> 4577;
4579 -> 4476;
4580 -> 4476;
4581 -> 4476;
4582 -> 4579;
4582 -> 4476;
4583 -> 4476;
4584 -> 4581;
4584 -> 4583;
4585 -> 4582;
4585 -> 4583;
4586 -> 4583;
4587 -> 4584;
4587 -> 4586;
4587 -> 4583;
4588 -> 4476;
4589 -> 4579;
4589 -> 4476;
4590 -> 4442;
4591 -> 4442;
4592 -> 4530;
4592 -> 4591;
4593 -> 4591;
4594 -> 4579;
4594 -> 4593;
4594 -> 4591;
4595 -> 4591;
4596 -> 4595;
4596 -> 4591;
4597 -> 4442;
4598 -> 4442;
4599 -> 4443;
4599 -> 4598;
4599 -> 4442;
4600 -> 4442;
4601 -> 4443;
4601 -> 4600;
4601 -> 4442;
4602 -> 4442;
4603 -> 4442;
4604 -> 4448;
4604 -> 4603;
4604 -> 4442;
4605 -> 4447;
4605 -> 4604;
4606 -> 4449;
4606 -> 4604;
4607 -> 4604;
4608 -> 4605;
4608 -> 4607;
4609 -> 4606;
4609 -> 4607;
4610 -> 4607;
4611 -> 4610;
4612 -> 4611;
4613 -> 4579;
4613 -> 4611;
4614 -> 4609;
4614 -> 4607;
4615 -> 4607;
4616 -> 4604;
4617 -> 4604;
4618 -> 4443;
4618 -> 4617;
4618 -> 4604;
4619 -> 4436;
4620 -> 4437;
4620 -> 4436;
4621 -> 4438;
4621 -> 4436;
4622 -> 4436;
4623 -> 4619;
4623 -> 4622;
4624 -> 4619;
4624 -> 4622;
4625 -> 4620;
4625 -> 4622;
4626 -> 4621;
4626 -> 4622;
4627 -> 4619;
4627 -> 4622;
4628 -> 4619;
4628 -> 4622;
4629 -> 4622;
4630 -> 4622;
4631 -> 4624;
4631 -> 4630;
4631 -> 4622;
4632 -> 4622;
4633 -> 4632;
4634 -> 4579;
4634 -> 4632;
4635 -> 4629;
4635 -> 4622;
4636 -> 4627;
4636 -> 4622;
4637 -> 4628;
4637 -> 4622;
4638 -> 4622;
4639 -> 4625;
4639 -> 4622;
4640 -> 4626;
4640 -> 4622;
4641 -> 4622;
4642 -> 4635;
4642 -> 4641;
4643 -> 4636;
4643 -> 4641;
4644 -> 4637;
4644 -> 4641;
4645 -> 4638;
4645 -> 4641;
4646 -> 4638;
4646 -> 4641;
4647 -> 4639;
4647 -> 4641;
4648 -> 4640;
4648 -> 4641;
4649 -> 4638;
4649 -> 4641;
4650 -> 4641;
4651 -> 4650;
4651 -> 4641;
4652 -> 4650;
4652 -> 4641;
4653 -> 4650;
4653 -> 4641;
4654 -> 4650;
4654 -> 4641;
4655 -> 4650;
4655 -> 4641;
4656 -> 4650;
4656 -> 4641;
4657 -> 4650;
4657 -> 4641;
4658 -> 4650;
4658 -> 4641;
4659 -> 4650;
4659 -> 4641;
4660 -> 4650;
4660 -> 4641;
4661 -> 4650;
4661 -> 4641;
4662 -> 4650;
4662 -> 4641;
4663 -> 4642;
4663 -> 4650;
4663 -> 4641;
4664 -> 4643;
4664 -> 4650;
4664 -> 4641;
4665 -> 4644;
4665 -> 4650;
4665 -> 4641;
4666 -> 4645;
4666 -> 4650;
4666 -> 4641;
4667 -> 4646;
4667 -> 4650;
4667 -> 4641;
4668 -> 4647;
4668 -> 4650;
4668 -> 4641;
4669 -> 4648;
4669 -> 4650;
4669 -> 4641;
4670 -> 4622;
4671 -> 4670;
4672 -> 4579;
4672 -> 4670;
4673 -> 4622;
4674 -> 4579;
4675 -> 4579;
4676 -> 4579;
4677 -> 4675;
4677 -> 4676;
4678 -> 4579;
4678 -> 4676;
4679 -> 4678;
4679 -> 4579;
4679 -> 4676;
4680 -> 4676;
4681 -> 4679;
4682 -> 4579;
4683 -> 4579;
4684 -> 4682;
4684 -> 4683;
4685 -> 4579;
4685 -> 4683;
4686 -> 4685;
4686 -> 4579;
4686 -> 4683;
4687 -> 4683;
4688 -> 4686;
4689 -> 4579;
4690 -> 4579;
4691 -> 4579;
4692 -> 4690;
4692 -> 4691;
4693 -> 4579;
4693 -> 4691;
4694 -> 4693;
4694 -> 4579;
4694 -> 4691;
4695 -> 4691;
4696 -> 4694;
4697 -> 4579;
4698 -> 4579;
4699 -> 4579;
4699 -> 4698;
4700 -> 4579;
4701 -> 4698;
4701 -> 4700;
4702 -> 4698;
4702 -> 4700;
4703 -> 4579;
4703 -> 4700;
4704 -> 4701;
4704 -> 4700;
4705 -> 4702;
4705 -> 4700;
4706 -> 4704;
4706 -> 4705;
4706 -> 4700;
4707 -> 4700;
4708 -> 4706;
4708 -> 4707;
4709 -> 4703;
4709 -> 4707;
4710 -> 4709;
4710 -> 4579;
4710 -> 4707;
4711 -> 4707;
4712 -> 4710;
4713 -> 4700;
4714 -> 4579;
4715 -> 4579;
4716 -> 4579;
4717 -> 4579;
4718 -> 4716;
4718 -> 4717;
4719 -> 4579;
4719 -> 4717;
4720 -> 4719;
4720 -> 4579;
4720 -> 4717;
4721 -> 4717;
4722 -> 4720;
4723 -> 4579;
4724 -> 4579;
4725 -> 4723;
4725 -> 4724;
4726 -> 4579;
4726 -> 4724;
4727 -> 4726;
4727 -> 4579;
4727 -> 4724;
4728 -> 4724;
4729 -> 4727;
4730 -> 4579;
4731 -> 4579;
4731 -> 4673;
4732 -> 4579;
4733 -> 4579;
4734 -> 4579;
4735 -> 4579;
4736 -> 4579;
4737 -> 4736;
4737 -> 4579;
4738 -> 4579;
4739 -> 4736;
4739 -> 4579;
4740 -> 0;
4740 -> 4579;
4741 -> 4579;
4742 -> 4579;
4743 -> 4579;
4744 -> 4743;
4744 -> 4740;
4744 -> 4579;
4745 -> 4744;
4745 -> 4579;
4746 -> 4579;
4747 -> 4579;
4748 -> 4742;
4748 -> 4747;
4748 -> 4579;
4749 -> 0;
4749 -> 4748;
4750 -> 4579;
4751 -> 4749;
4751 -> 0;
4751 -> 4579;
4752 -> 4745;
4752 -> 0;
4752 -> 4751;
4753 -> 4751;
4754 -> 4736;
4754 -> 4579;
4755 -> 4736;
4755 -> 4579;
4756 -> 4755;
4756 -> 4740;
4756 -> 4736;
4757 -> 4756;
4757 -> 4736;
4758 -> 4736;
4759 -> 4757;
4759 -> 0;
4759 -> 4751;
4760 -> 4736;
4761 -> 4736;
4762 -> 4736;
4763 -> 4736;
4764 -> 4736;
4765 -> 4763;
4765 -> 4764;
4766 -> 4579;
4766 -> 4764;
4767 -> 4766;
4767 -> 4736;
4767 -> 4764;
4768 -> 4764;
4769 -> 4767;
4770 -> 4736;
4771 -> 4736;
4772 -> 4736;
4773 -> 4771;
4773 -> 4772;
4774 -> 4579;
4774 -> 4772;
4775 -> 4774;
4775 -> 4736;
4775 -> 4772;
4776 -> 4772;
4777 -> 4775;
4778 -> 4622;
4779 -> 4638;
4779 -> 4736;
4779 -> 4778;
4779 -> 4622;
4780 -> 4629;
4780 -> 4622;
4781 -> 4622;
4782 -> 4627;
4782 -> 4781;
4782 -> 4622;
4783 -> 4782;
4784 -> 4783;
4785 -> 4784;
4786 -> 4736;
4787 -> 4736;
4788 -> 4736;
4789 -> 4436;
4790 -> 4437;
4790 -> 4436;
4791 -> 4438;
4791 -> 4436;
4792 -> 4436;
4793 -> 4789;
4793 -> 4792;
4794 -> 4790;
4794 -> 4792;
4795 -> 4791;
4795 -> 4792;
4796 -> 4195;
4796 -> 4792;
4797 -> 4792;
4798 -> 4796;
4798 -> 4736;
4798 -> 4797;
4798 -> 4792;
4799 -> 4793;
4799 -> 4792;
4800 -> 4792;
4801 -> 4799;
4801 -> 4800;
4802 -> 4796;
4802 -> 4800;
4803 -> 4800;
4804 -> 4802;
4804 -> 4736;
4804 -> 4803;
4804 -> 4800;
4805 -> 4792;
4806 -> 4432;
4807 -> 4433;
4807 -> 4432;
4808 -> 4215;
4808 -> 4212;
4809 -> 4217;
4809 -> 4212;
4810 -> 4216;
4810 -> 4212;
4811 -> 4212;
4812 -> 4203;
4813 -> 4196;
4813 -> 4194;
4814 -> 4194;
4815 -> 4813;
4815 -> 4814;
4816 -> 4815;
4816 -> 4814;
4817 -> 4814;
4818 -> 4816;
4818 -> 4817;
4819 -> 4818;
4819 -> 4817;
4820 -> 4817;
4821 -> 4817;
4822 -> 4819;
4822 -> 4821;
4823 -> 4820;
4823 -> 4821;
4824 -> 4821;
4825 -> 4822;
4825 -> 4824;
4825 -> 4821;
4826 -> 4822;
4826 -> 4821;
4827 -> 4822;
4827 -> 4821;
4828 -> 4823;
4828 -> 4826;
4828 -> 4827;
4828 -> 4821;
4829 -> 4822;
4829 -> 4821;
4830 -> 4821;
4831 -> 4736;
4831 -> 4830;
4831 -> 4821;
4832 -> 4821;
4833 -> 4822;
4833 -> 4821;
4834 -> 4821;
4835 -> 4833;
4835 -> 4834;
4836 -> 4834;
4837 -> 4834;
4838 -> 4837;
4838 -> 4736;
4839 -> 4838;
4839 -> 4836;
4839 -> 4834;
4840 -> 4839;
4840 -> 4834;
4841 -> 4835;
4841 -> 4834;
4842 -> 4835;
4842 -> 4834;
4843 -> 4835;
4843 -> 4834;
4844 -> 4834;
4845 -> 4843;
4845 -> 4844;
4846 -> 2111;
4846 -> 4844;
4847 -> 4844;
4848 -> 4845;
4848 -> 4844;
4849 -> 4844;
4850 -> 4849;
4850 -> 4834;
4851 -> 4850;
4852 -> 4851;
4853 -> 2111;
4853 -> 4851;
4854 -> 4834;
4855 -> 4854;
4855 -> 4834;
4856 -> 4834;
4857 -> 4834;
4858 -> 4854;
4858 -> 4857;
4858 -> 4855;
4858 -> 4834;
4859 -> 4834;
4860 -> 4835;
4860 -> 4834;
4861 -> 4854;
4861 -> 4834;
4862 -> 4859;
4862 -> 4834;
4863 -> 4834;
4864 -> 4861;
4864 -> 4863;
4865 -> 4862;
4865 -> 4863;
4866 -> 4865;
4866 -> 4859;
4866 -> 4863;
4867 -> 4863;
4868 -> 4867;
4868 -> 4866;
4868 -> 4863;
4869 -> 4834;
4870 -> 4834;
4871 -> 4854;
4871 -> 4870;
4871 -> 4858;
4871 -> 4834;
4872 -> 4834;
4873 -> 4834;
4874 -> 4834;
4875 -> 4873;
4875 -> 4874;
4875 -> 4834;
4876 -> 4834;
4877 -> 4854;
4877 -> 4876;
4877 -> 4871;
4877 -> 4834;
4878 -> 4859;
4878 -> 4834;
4879 -> 4872;
4879 -> 4834;
4880 -> 0;
4880 -> 4834;
4881 -> 4834;
4882 -> 4834;
4883 -> 4878;
4883 -> 4882;
4884 -> 4879;
4884 -> 4882;
4885 -> 4880;
4885 -> 4882;
4886 -> 4881;
4886 -> 4882;
4887 -> 4881;
4887 -> 4882;
4888 -> 4882;
4889 -> 4886;
4889 -> 4888;
4889 -> 4882;
4890 -> 4889;
4890 -> 4882;
4891 -> 3761;
4891 -> 4890;
4892 -> 4882;
4893 -> 4892;
4893 -> 4887;
4893 -> 4882;
4894 -> 4883;
4894 -> 4882;
4895 -> 4884;
4895 -> 4882;
4896 -> 4885;
4896 -> 4882;
4897 -> 4894;
4897 -> 4882;
4898 -> 4895;
4898 -> 4882;
4899 -> 4893;
4899 -> 4882;
4900 -> 4882;
4901 -> 4897;
4901 -> 4900;
4902 -> 4898;
4902 -> 4900;
4903 -> 4899;
4903 -> 4900;
4904 -> 4891;
4904 -> 4900;
4905 -> 4901;
4905 -> 4900;
4906 -> 4901;
4906 -> 4894;
4906 -> 4900;
4907 -> 4902;
4907 -> 4900;
4908 -> 4902;
4908 -> 4895;
4908 -> 4900;
4909 -> 4900;
4910 -> 4905;
4910 -> 4909;
4911 -> 4906;
4911 -> 4909;
4912 -> 4907;
4912 -> 4909;
4913 -> 4908;
4913 -> 4909;
4914 -> 4904;
4914 -> 4909;
4915 -> 4910;
4915 -> 4909;
4916 -> 4911;
4916 -> 4909;
4917 -> 4912;
4917 -> 4909;
4918 -> 4913;
4918 -> 4909;
4919 -> 4909;
4920 -> 4915;
4920 -> 4919;
4921 -> 4916;
4921 -> 4919;
4922 -> 4917;
4922 -> 4919;
4923 -> 4918;
4923 -> 4919;
4924 -> 4914;
4924 -> 4919;
4925 -> 4919;
4926 -> 4921;
4926 -> 4925;
4926 -> 4919;
4927 -> 4919;
4928 -> 4923;
4928 -> 4927;
4928 -> 4919;
4929 -> 4926;
4929 -> 4928;
4929 -> 4919;
4930 -> 4919;
4931 -> 4930;
4931 -> 4929;
4931 -> 4919;
4932 -> 4919;
4933 -> 4932;
4933 -> 4921;
4933 -> 4919;
4934 -> 4919;
4935 -> 4934;
4935 -> 4923;
4935 -> 4919;
4936 -> 4919;
4937 -> 4936;
4937 -> 4921;
4937 -> 4919;
4938 -> 4929;
4938 -> 4919;
4939 -> 4911;
4939 -> 4909;
4940 -> 4913;
4940 -> 4909;
4941 -> 4909;
4942 -> 4939;
4942 -> 4941;
4942 -> 4909;
4943 -> 4909;
4944 -> 4939;
4944 -> 4943;
4944 -> 4909;
4945 -> 4909;
4946 -> 4940;
4946 -> 4945;
4946 -> 4909;
4947 -> 4909;
4948 -> 4947;
4948 -> 4900;
4949 -> 4900;
4950 -> 4949;
4950 -> 4882;
4951 -> 4896;
4951 -> 4950;
4951 -> 4882;
4952 -> 4854;
4952 -> 4951;
4952 -> 4877;
4952 -> 4834;
4953 -> 4872;
4953 -> 4834;
4954 -> 4859;
4954 -> 4834;
4955 -> 4854;
4955 -> 4952;
4955 -> 4834;
4956 -> 4955;
4956 -> 4821;
4957 -> 4814;
4958 -> 4194;
4959 -> 4194;
4960 -> 4194;
4961 -> 4195;
4961 -> 4194;
4962 -> 3900;
4962 -> 1;
4963 -> 1;
4964 -> 0;
4964 -> 4963;
4964 -> 4736;
4964 -> 1;
4965 -> 1;
4966 -> 4963;
4966 -> 4965;
4967 -> 4966;
4967 -> 4965;
4968 -> 4965;
4969 -> 4967;
4969 -> 4968;
4970 -> 4968;
4971 -> 4969;
4971 -> 4970;
4971 -> 4968;
4972 -> 4968;
4972 -> 1;
4973 -> 4962;
4973 -> 4965;
4974 -> 4963;
4974 -> 4965;
4975 -> 4964;
4975 -> 4965;
4976 -> 4963;
4976 -> 4965;
4977 -> 4972;
4977 -> 4965;
4978 -> 4963;
4978 -> 4965;
4979 -> 4963;
4979 -> 4965;
4980 -> 4963;
4980 -> 4965;
4981 -> 4973;
4981 -> 4965;
4982 -> 4977;
4982 -> 4965;
4983 -> 4974;
4983 -> 4965;
4984 -> 4965;
4985 -> 4982;
4985 -> 4984;
4986 -> 4983;
4986 -> 4984;
4987 -> 4985;
4987 -> 4984;
4988 -> 4984;
4989 -> 4987;
4989 -> 4988;
4990 -> 4989;
4990 -> 4988;
4991 -> 4990;
4992 -> 0;
4992 -> 4991;
4993 -> 4992;
4994 -> 4993;
4995 -> 4993;
4996 -> 0;
4996 -> 4995;
4997 -> 4996;
4997 -> 4994;
4997 -> 4993;
4998 -> 4994;
4998 -> 4997;
4998 -> 4964;
4998 -> 4993;
4999 -> 4984;
5000 -> 4986;
5000 -> 4999;
5000 -> 4984;
5001 -> 4976;
5001 -> 4965;
5002 -> 4978;
5002 -> 4965;
5003 -> 4979;
5003 -> 4965;
5004 -> 4980;
5004 -> 4965;
5005 -> 4965;
5006 -> 4981;
5006 -> 5005;
5007 -> 5001;
5007 -> 5005;
5008 -> 5002;
5008 -> 5005;
5009 -> 5003;
5009 -> 5005;
5010 -> 5004;
5010 -> 5005;
5011 -> 5006;
5011 -> 5005;
5012 -> 5007;
5012 -> 5005;
5013 -> 5008;
5013 -> 5005;
5014 -> 5009;
5014 -> 5005;
5015 -> 5010;
5015 -> 5005;
5016 -> 5005;
5017 -> 5016;
5017 -> 5005;
5018 -> 5005;
5019 -> 5011;
5019 -> 5018;
5020 -> 5012;
5020 -> 5018;
5021 -> 5013;
5021 -> 5018;
5022 -> 5014;
5022 -> 5018;
5023 -> 5015;
5023 -> 5018;
5024 -> 5017;
5024 -> 5018;
5025 -> 5020;
5025 -> 5018;
5026 -> 5022;
5026 -> 5018;
5027 -> 5018;
5028 -> 5025;
5028 -> 5027;
5029 -> 5026;
5029 -> 5027;
5030 -> 5019;
5030 -> 5027;
5031 -> 5030;
5031 -> 4962;
5031 -> 5027;
5032 -> 5031;
5033 -> 5029;
5033 -> 5031;
5034 -> 5028;
5034 -> 5031;
5035 -> 5031;
5036 -> 5032;
5036 -> 5035;
5037 -> 5033;
5037 -> 5035;
5038 -> 5034;
5038 -> 5035;
5039 -> 5032;
5039 -> 5035;
5040 -> 5035;
5041 -> 5038;
5041 -> 5040;
5041 -> 5035;
5042 -> 0;
5042 -> 5041;
5043 -> 5036;
5043 -> 5035;
5044 -> 0;
5044 -> 5035;
5045 -> 5044;
5045 -> 5039;
5045 -> 5035;
5046 -> 5035;
5047 -> 5043;
5047 -> 5045;
5047 -> 5046;
5047 -> 4964;
5047 -> 5035;
5048 -> 5042;
5048 -> 5035;
5049 -> 5037;
5049 -> 5035;
5050 -> 5035;
5051 -> 5035;
5052 -> 5051;
5053 -> 5051;
5054 -> 5047;
5054 -> 5053;
5054 -> 5051;
5055 -> 5052;
5055 -> 5051;
5056 -> 5051;
5057 -> 5054;
5057 -> 5047;
5057 -> 5053;
5057 -> 5055;
5057 -> 5056;
5057 -> 5052;
5057 -> 5051;
5058 -> 5051;
5059 -> 5058;
5059 -> 5052;
5059 -> 5051;
5060 -> 5052;
5060 -> 5051;
5061 -> 5051;
5062 -> 5060;
5062 -> 5061;
5062 -> 5052;
5062 -> 5059;
5062 -> 5051;
5063 -> 5032;
5063 -> 5018;
5064 -> 5018;
5065 -> 4975;
5065 -> 5064;
5065 -> 5018;
5066 -> 0;
5066 -> 5018;
5067 -> 5024;
5067 -> 5018;
5068 -> 4998;
5068 -> 5018;
5069 -> 5018;
5070 -> 5068;
5070 -> 5069;
5071 -> 0;
5071 -> 5069;
5072 -> 5071;
5073 -> 5018;
5074 -> 5018;
5075 -> 5074;
5076 -> 5074;
5077 -> 5074;
5078 -> 5076;
5078 -> 5077;
5079 -> 5076;
5079 -> 5077;
5080 -> 5076;
5080 -> 5077;
5081 -> 5076;
5081 -> 5077;
5082 -> 5077;
5083 -> 4998;
5083 -> 5082;
5083 -> 5077;
5084 -> 5081;
5084 -> 5077;
5085 -> 5078;
5085 -> 5077;
5086 -> 5079;
5086 -> 5077;
5087 -> 5080;
5087 -> 5077;
5088 -> 5081;
5088 -> 5077;
5089 -> 5077;
5090 -> 0;
5090 -> 5077;
5091 -> 5077;
5092 -> 5090;
5092 -> 5091;
5093 -> 5090;
5093 -> 5091;
5094 -> 5088;
5094 -> 5091;
5095 -> 5089;
5095 -> 5091;
5096 -> 5089;
5096 -> 5091;
5097 -> 5092;
5097 -> 5091;
5098 -> 5093;
5098 -> 5091;
5099 -> 5094;
5099 -> 5091;
5100 -> 5091;
5101 -> 5100;
5101 -> 5091;
5102 -> 5095;
5102 -> 5100;
5102 -> 5091;
5103 -> 5077;
5104 -> 5085;
5104 -> 5103;
5105 -> 5086;
5105 -> 5103;
5106 -> 5087;
5106 -> 5103;
5107 -> 5088;
5107 -> 5103;
5108 -> 5089;
5108 -> 5103;
5109 -> 5089;
5109 -> 5103;
5110 -> 5089;
5110 -> 5103;
5111 -> 5089;
5111 -> 5103;
5112 -> 5089;
5112 -> 5103;
5113 -> 5089;
5113 -> 5103;
5114 -> 5104;
5114 -> 5103;
5115 -> 5105;
5115 -> 5103;
5116 -> 5106;
5116 -> 5103;
5117 -> 5107;
5117 -> 5103;
5118 -> 5108;
5118 -> 5103;
5119 -> 5109;
5119 -> 5103;
5120 -> 5110;
5120 -> 5103;
5121 -> 5111;
5121 -> 5103;
5122 -> 5112;
5122 -> 5103;
5123 -> 5103;
5124 -> 5114;
5124 -> 5123;
5125 -> 5115;
5125 -> 5123;
5126 -> 5116;
5126 -> 5123;
5127 -> 5117;
5127 -> 5123;
5128 -> 5118;
5128 -> 5123;
5129 -> 5119;
5129 -> 5123;
5130 -> 5120;
5130 -> 5123;
5131 -> 5121;
5131 -> 5123;
5132 -> 5122;
5132 -> 5123;
5133 -> 5113;
5133 -> 5123;
5134 -> 5127;
5134 -> 5123;
5135 -> 5131;
5135 -> 5123;
5136 -> 5132;
5136 -> 5123;
5137 -> 5123;
5138 -> 5137;
5138 -> 5123;
5139 -> 5137;
5139 -> 5123;
5140 -> 5137;
5140 -> 5123;
5141 -> 5137;
5141 -> 5123;
5142 -> 5137;
5142 -> 5123;
5143 -> 5137;
5143 -> 5123;
5144 -> 5137;
5144 -> 5123;
5145 -> 5137;
5145 -> 5123;
5146 -> 5137;
5146 -> 5123;
5147 -> 5137;
5147 -> 5123;
5148 -> 5137;
5148 -> 5123;
5149 -> 5137;
5149 -> 5123;
5150 -> 5137;
5150 -> 5123;
5151 -> 5137;
5151 -> 5123;
5152 -> 5137;
5152 -> 5123;
5153 -> 5137;
5153 -> 5123;
5154 -> 5137;
5154 -> 5123;
5155 -> 5137;
5155 -> 5123;
5156 -> 5137;
5156 -> 5123;
5157 -> 5137;
5157 -> 5123;
5158 -> 5137;
5158 -> 5123;
5159 -> 5137;
5159 -> 5123;
5160 -> 5137;
5160 -> 5123;
5161 -> 5137;
5161 -> 5123;
5162 -> 5137;
5162 -> 5123;
5163 -> 5137;
5163 -> 5123;
5164 -> 5123;
5165 -> 5164;
5165 -> 5137;
5165 -> 5123;
5166 -> 5137;
5166 -> 5123;
5167 -> 5137;
5167 -> 5123;
5168 -> 5123;
5169 -> 5123;
5170 -> 5167;
5170 -> 5169;
5171 -> 5168;
5171 -> 5169;
5172 -> 5171;
5172 -> 5169;
5173 -> 5171;
5173 -> 5169;
5174 -> 5171;
5174 -> 5169;
5175 -> 5170;
5175 -> 5171;
5175 -> 5169;
5176 -> 5168;
5176 -> 5137;
5176 -> 5123;
5177 -> 5137;
5177 -> 5123;
5178 -> 5123;
5179 -> 5178;
5180 -> 0;
5180 -> 5178;
5181 -> 5180;
5181 -> 5179;
5181 -> 5178;
5182 -> 5181;
5182 -> 5123;
5183 -> 5182;
5183 -> 5137;
5183 -> 5123;
5184 -> 5127;
5184 -> 5123;
5185 -> 5184;
5186 -> 5124;
5186 -> 5185;
5186 -> 5184;
5187 -> 5125;
5187 -> 5185;
5187 -> 5184;
5188 -> 5186;
5188 -> 5187;
5188 -> 5184;
5189 -> 5126;
5189 -> 5185;
5189 -> 5184;
5190 -> 5188;
5190 -> 5189;
5190 -> 5184;
5191 -> 5129;
5191 -> 5123;
5192 -> 5191;
5193 -> 5137;
5193 -> 5192;
5194 -> 5128;
5194 -> 5191;
5195 -> 5130;
5195 -> 5137;
5195 -> 5123;
5196 -> 5137;
5196 -> 4998;
5196 -> 5123;
5197 -> 5123;
5198 -> 5137;
5198 -> 4998;
5198 -> 5197;
5198 -> 5123;
5199 -> 5077;
5200 -> 4998;
5201 -> 4998;
5202 -> 4998;
5203 -> 4998;
5204 -> 4998;
5205 -> 5201;
5205 -> 4998;
5206 -> 4998;
5207 -> 4998;
5208 -> 4998;
5209 -> 4998;
5210 -> 4998;
5211 -> 4998;
5212 -> 4998;
5213 -> 4998;
5214 -> 5211;
5214 -> 4998;
5215 -> 5212;
5215 -> 4998;
5216 -> 5213;
5216 -> 4998;
5217 -> 5214;
5217 -> 4998;
5218 -> 5215;
5218 -> 4998;
5219 -> 5216;
5219 -> 4998;
5220 -> 4998;
5221 -> 4998;
5222 -> 5221;
5223 -> 5217;
5223 -> 5222;
5223 -> 5221;
5224 -> 5218;
5224 -> 5222;
5224 -> 5221;
5225 -> 5223;
5225 -> 5224;
5225 -> 5221;
5226 -> 5219;
5226 -> 5222;
5226 -> 5221;
5227 -> 5225;
5227 -> 5226;
5227 -> 5221;
5228 -> 4998;
5229 -> 4998;
5230 -> 4998;
5231 -> 4998;
5231 -> 5077;
5232 -> 5018;
5233 -> 5232;
5234 -> 5233;
5235 -> 5234;
5236 -> 4998;
5237 -> 4998;
5238 -> 4998;
5239 -> 4998;
5240 -> 4998;
5241 -> 5240;
5241 -> 0;
5241 -> 4998;
5242 -> 4998;
5243 -> 4998;
5244 -> 4998;
5245 -> 4998;
5246 -> 4998;
5247 -> 4998;
5247 -> 5232;
5248 -> 5232;
5249 -> 0;
5249 -> 5232;
5250 -> 5023;
5250 -> 4998;
5250 -> 5018;
5251 -> 4998;
5251 -> 1;
5252 -> 1;
5253 -> 0;
5253 -> 1;
5254 -> 1;
5255 -> 5253;
5255 -> 5254;
5256 -> 5252;
5256 -> 5254;
5257 -> 5252;
5257 -> 5254;
5258 -> 5252;
5258 -> 5254;
5259 -> 5252;
5259 -> 5254;
5260 -> 5252;
5260 -> 5254;
5261 -> 5252;
5261 -> 5254;
5262 -> 5255;
5262 -> 5254;
5263 -> 5256;
5263 -> 5254;
5264 -> 5257;
5264 -> 5254;
5265 -> 5258;
5265 -> 5254;
5266 -> 5259;
5266 -> 5254;
5267 -> 5260;
5267 -> 5254;
5268 -> 5261;
5268 -> 5254;
5269 -> 5254;
5270 -> 5262;
5270 -> 5269;
5271 -> 5263;
5271 -> 5269;
5272 -> 5264;
5272 -> 5269;
5273 -> 5265;
5273 -> 5269;
5274 -> 5266;
5274 -> 5269;
5275 -> 5267;
5275 -> 5269;
5276 -> 5268;
5276 -> 5269;
5277 -> 5270;
5277 -> 5269;
5278 -> 5270;
5278 -> 5269;
5279 -> 5269;
5280 -> 5271;
5280 -> 5269;
5281 -> 5272;
5281 -> 5269;
5282 -> 5273;
5282 -> 5269;
5283 -> 5274;
5283 -> 5269;
5284 -> 5275;
5284 -> 5269;
5285 -> 5276;
5285 -> 5269;
5286 -> 5269;
5287 -> 5278;
5287 -> 5286;
5288 -> 5279;
5288 -> 5286;
5289 -> 5280;
5289 -> 5286;
5290 -> 5281;
5290 -> 5286;
5291 -> 5282;
5291 -> 5286;
5292 -> 5283;
5292 -> 5286;
5293 -> 5284;
5293 -> 5286;
5294 -> 5278;
5294 -> 5286;
5295 -> 5285;
5295 -> 5286;
5296 -> 5279;
5296 -> 5286;
5297 -> 5279;
5297 -> 5286;
5298 -> 5279;
5298 -> 5286;
5299 -> 5298;
5299 -> 5286;
5300 -> 5298;
5300 -> 5286;
5301 -> 5298;
5301 -> 5286;
5302 -> 5298;
5302 -> 5286;
5303 -> 5298;
5303 -> 5286;
5304 -> 5298;
5304 -> 5286;
5305 -> 5298;
5305 -> 5286;
5306 -> 5298;
5306 -> 5286;
5307 -> 5298;
5307 -> 5286;
5308 -> 5298;
5308 -> 5286;
5309 -> 5298;
5309 -> 5286;
5310 -> 5298;
5310 -> 5286;
5311 -> 5298;
5311 -> 5286;
5312 -> 5298;
5312 -> 5286;
5313 -> 5298;
5313 -> 5286;
5314 -> 5287;
5314 -> 5298;
5314 -> 5286;
5315 -> 5288;
5315 -> 5298;
5315 -> 5286;
5316 -> 5289;
5316 -> 5298;
5316 -> 5286;
5317 -> 5290;
5317 -> 5298;
5317 -> 5286;
5318 -> 5291;
5318 -> 5298;
5318 -> 5286;
5319 -> 5292;
5319 -> 5298;
5319 -> 5286;
5320 -> 5293;
5320 -> 5298;
5320 -> 5286;
5321 -> 5294;
5321 -> 5286;
5322 -> 5321;
5322 -> 5298;
5322 -> 5286;
5323 -> 5295;
5323 -> 5298;
5323 -> 5286;
5324 -> 5296;
5324 -> 5298;
5324 -> 5286;
5325 -> 5297;
5325 -> 5298;
5325 -> 5286;
5326 -> 5279;
5326 -> 5254;
5327 -> 5326;
5327 -> 1;
5328 -> 5252;
5328 -> 1;
5329 -> 1;
5330 -> 5252;
5330 -> 5329;
5331 -> 5327;
5331 -> 5329;
5332 -> 5331;
5332 -> 5314;
5332 -> 5329;
5333 -> 5331;
5333 -> 5315;
5333 -> 5329;
5334 -> 5331;
5334 -> 5316;
5334 -> 5329;
5335 -> 5330;
5335 -> 5329;
5336 -> 5331;
5336 -> 5318;
5336 -> 5329;
5337 -> 5331;
5337 -> 5319;
5337 -> 5329;
5338 -> 5329;
5339 -> 5331;
5339 -> 5322;
5339 -> 5329;
5340 -> 5331;
5340 -> 5323;
5340 -> 5329;
5341 -> 5331;
5341 -> 5324;
5341 -> 5329;
5342 -> 5331;
5342 -> 5325;
5342 -> 5329;
5343 -> 5329;
5344 -> 5332;
5344 -> 5343;
5345 -> 5333;
5345 -> 5343;
5346 -> 5334;
5346 -> 5343;
5347 -> 5335;
5347 -> 5343;
5348 -> 5336;
5348 -> 5343;
5349 -> 5337;
5349 -> 5343;
5350 -> 5338;
5350 -> 5343;
5351 -> 5339;
5351 -> 5343;
5352 -> 5340;
5352 -> 5343;
5353 -> 5341;
5353 -> 5343;
5354 -> 5342;
5354 -> 5343;
5355 -> 5338;
5355 -> 5343;
5356 -> 5355;
5356 -> 5343;
5357 -> 5355;
5357 -> 5343;
5358 -> 5355;
5358 -> 5343;
5359 -> 5355;
5359 -> 5343;
5360 -> 5355;
5360 -> 5343;
5361 -> 5355;
5361 -> 5343;
5362 -> 5355;
5362 -> 5343;
5363 -> 5355;
5363 -> 5343;
5364 -> 5355;
5364 -> 5343;
5365 -> 5355;
5365 -> 5343;
5366 -> 5355;
5366 -> 5343;
5367 -> 5355;
5367 -> 5343;
5368 -> 5355;
5368 -> 5343;
5369 -> 5355;
5369 -> 5343;
5370 -> 5355;
5370 -> 5343;
5371 -> 5347;
5371 -> 5355;
5371 -> 5343;
5372 -> 5350;
5372 -> 5355;
5372 -> 5343;
5373 -> 5338;
5373 -> 1;
5374 -> 5373;
5374 -> 5252;
5374 -> 1;
5375 -> 1;
5376 -> 5251;
5376 -> 5375;
5377 -> 5252;
5377 -> 5375;
5378 -> 5375;
5379 -> 5375;
5380 -> 5378;
5380 -> 5379;
5381 -> 0;
5381 -> 5379;
5382 -> 5379;
5383 -> 5380;
5383 -> 5379;
5384 -> 5379;
5385 -> 5381;
5385 -> 5384;
5386 -> 5382;
5386 -> 5384;
5387 -> 5383;
5387 -> 5384;
5388 -> 5384;
5389 -> 5385;
5389 -> 5384;
5390 -> 5386;
5390 -> 5384;
5391 -> 5388;
5391 -> 5384;
5392 -> 5387;
5392 -> 5384;
5393 -> 5384;
5394 -> 5389;
5394 -> 5393;
5395 -> 5390;
5395 -> 5393;
5396 -> 5391;
5396 -> 5393;
5397 -> 5392;
5397 -> 5393;
5398 -> 5393;
5399 -> 5394;
5399 -> 0;
5399 -> 5393;
5400 -> 5399;
5400 -> 5395;
5400 -> 5393;
5401 -> 5400;
5402 -> 5401;
5403 -> 5402;
5404 -> 5400;
5405 -> 5376;
5406 -> 5376;
5407 -> 5400;
5408 -> 5376;
5408 -> 4998;
5409 -> 5394;
5409 -> 0;
5409 -> 5393;
5410 -> 5409;
5410 -> 5395;
5410 -> 5393;
5411 -> 5398;
5411 -> 5410;
5412 -> 5410;
5413 -> 5410;
5414 -> 5410;
5415 -> 5376;
5415 -> 5414;
5416 -> 5415;
5416 -> 5410;
5417 -> 5410;
5418 -> 5376;
5419 -> 5397;
5419 -> 5410;
5420 -> 5410;
5421 -> 5410;
5422 -> 5420;
5422 -> 5421;
5423 -> 5420;
5423 -> 5421;
5424 -> 5420;
5424 -> 5421;
5425 -> 5419;
5425 -> 5421;
5426 -> 5421;
5427 -> 5426;
5428 -> 5427;
5429 -> 5425;
5429 -> 5421;
5430 -> 5421;
5431 -> 5421;
5432 -> 5422;
5432 -> 5431;
5432 -> 5421;
5433 -> 5421;
5434 -> 5433;
5435 -> 5434;
5436 -> 5376;
5436 -> 5434;
5437 -> 5430;
5437 -> 5421;
5438 -> 5425;
5438 -> 5421;
5439 -> 5421;
5440 -> 5439;
5441 -> 5440;
5442 -> 5441;
5443 -> 5439;
5444 -> 5443;
5445 -> 5444;
5446 -> 5439;
5447 -> 5446;
5448 -> 5376;
5448 -> 5446;
5449 -> 5376;
5449 -> 5439;
5450 -> 5439;
5451 -> 5376;
5451 -> 5439;
5452 -> 5376;
5452 -> 5439;
5453 -> 5452;
5453 -> 5376;
5453 -> 5439;
5454 -> 5439;
5455 -> 5439;
5456 -> 5376;
5456 -> 0;
5456 -> 5439;
5457 -> 5439;
5458 -> 5376;
5459 -> 5376;
5459 -> 5439;
5460 -> 5439;
5461 -> 5439;
5462 -> 5460;
5462 -> 5461;
5463 -> 5462;
5463 -> 5461;
5464 -> 5461;
5465 -> 5461;
5466 -> 5464;
5466 -> 5465;
5467 -> 5466;
5467 -> 5465;
5468 -> 5465;
5469 -> 5468;
5470 -> 5469;
5471 -> 5469;
5472 -> 5471;
5473 -> 5468;
5474 -> 5473;
5475 -> 5465;
5476 -> 5465;
5477 -> 5465;
5478 -> 5466;
5478 -> 5465;
5479 -> 5465;
5480 -> 5478;
5480 -> 5479;
5481 -> 5480;
5481 -> 5479;
5482 -> 5479;
5483 -> 5479;
5484 -> 5483;
5485 -> 5483;
5486 -> 5460;
5487 -> 5486;
5488 -> 5487;
5489 -> 5376;
5489 -> 5487;
5490 -> 5460;
5491 -> 5439;
5492 -> 5491;
5493 -> 5492;
5494 -> 5491;
5495 -> 5491;
5496 -> 5376;
5496 -> 5439;
5497 -> 5496;
5497 -> 5439;
5498 -> 5439;
5499 -> 5439;
5500 -> 5498;
5500 -> 5499;
5501 -> 5500;
5501 -> 5499;
5502 -> 5499;
5503 -> 5502;
5504 -> 5503;
5505 -> 5503;
5506 -> 5505;
5507 -> 5502;
5508 -> 5507;
5509 -> 5499;
5510 -> 5499;
5511 -> 5499;
5512 -> 5510;
5512 -> 5499;
5513 -> 5376;
5514 -> 5439;
5515 -> 5514;
5516 -> 5515;
5517 -> 5439;
5518 -> 5513;
5519 -> 5513;
5519 -> 5376;
5519 -> 5439;
5520 -> 5376;
5520 -> 5513;
5520 -> 5439;
5521 -> 5439;
5522 -> 5521;
5523 -> 5522;
5524 -> 5523;
5525 -> 5513;
5525 -> 5523;
5526 -> 5521;
5527 -> 5513;
5527 -> 5439;
5528 -> 5439;
5529 -> 5452;
5529 -> 5513;
5529 -> 5439;
5530 -> 5376;
5530 -> 5513;
5530 -> 5439;
5531 -> 5422;
5531 -> 5421;
5532 -> 5531;
5533 -> 5531;
5534 -> 5421;
5535 -> 5424;
5535 -> 5534;
5535 -> 5421;
5536 -> 5422;
5536 -> 5421;
5537 -> 5423;
5537 -> 5421;
5538 -> 5425;
5538 -> 5421;
5539 -> 5421;
5540 -> 5536;
5540 -> 5539;
5541 -> 5537;
5541 -> 5539;
5542 -> 5538;
5542 -> 5539;
5543 -> 5539;
5544 -> 5540;
5544 -> 5543;
5544 -> 5539;
5545 -> 5513;
5546 -> 5513;
5547 -> 5513;
5547 -> 0;
5548 -> 5513;
5549 -> 5513;
5549 -> 0;
5550 -> 5513;
5550 -> 0;
5551 -> 5513;
5551 -> 0;
5552 -> 5513;
5552 -> 0;
5553 -> 5513;
5553 -> 0;
5554 -> 5513;
5554 -> 0;
5555 -> 5513;
5556 -> 5513;
5557 -> 5513;
5558 -> 5513;
5558 -> 0;
5559 -> 5513;
5560 -> 5513;
5561 -> 5559;
5561 -> 5560;
5562 -> 5561;
5562 -> 5560;
5563 -> 5562;
5564 -> 5513;
5565 -> 5564;
5565 -> 5513;
5566 -> 5513;
5567 -> 5566;
5567 -> 5513;
5568 -> 5557;
5568 -> 5567;
5569 -> 5513;
5570 -> 5568;
5570 -> 5569;
5570 -> 5513;
5571 -> 5570;
5571 -> 5564;
5571 -> 5513;
5572 -> 5564;
5572 -> 5513;
5573 -> 5563;
5573 -> 5572;
5574 -> 5563;
5574 -> 5513;
5575 -> 5513;
5575 -> 0;
5576 -> 5513;
5577 -> 5513;
5578 -> 5513;
5579 -> 5577;
5579 -> 5578;
5580 -> 5579;
5580 -> 5578;
5581 -> 5580;
5582 -> 5513;
5583 -> 5581;
5583 -> 5582;
5584 -> 5513;
5585 -> 5513;
5586 -> 5584;
5586 -> 5585;
5587 -> 5513;
5587 -> 5585;
5588 -> 5586;
5588 -> 5513;
5588 -> 0;
5588 -> 5585;
5589 -> 5588;
5590 -> 5513;
5591 -> 5577;
5591 -> 5590;
5592 -> 5591;
5592 -> 5590;
5593 -> 5592;
5594 -> 5513;
5595 -> 5513;
5596 -> 5513;
5597 -> 5376;
5597 -> 5513;
5597 -> 5539;
5598 -> 5410;
5599 -> 5376;
5599 -> 5513;
5599 -> 5598;
5599 -> 5410;
5600 -> 5394;
5600 -> 0;
5600 -> 5393;
5601 -> 5600;
5602 -> 5601;
5602 -> 5600;
5603 -> 5397;
5603 -> 5600;
5604 -> 5600;
5605 -> 5602;
5605 -> 5604;
5606 -> 5603;
5606 -> 5604;
5607 -> 5604;
5608 -> 5605;
5608 -> 5604;
5609 -> 5606;
5609 -> 5604;
5610 -> 5604;
5611 -> 5607;
5611 -> 5610;
5612 -> 5607;
5612 -> 5610;
5613 -> 5607;
5613 -> 5610;
5614 -> 5607;
5614 -> 5610;
5615 -> 5608;
5615 -> 5610;
5616 -> 5607;
5616 -> 5610;
5617 -> 5609;
5617 -> 5610;
5618 -> 5610;
5619 -> 5376;
5619 -> 5618;
5619 -> 5610;
5620 -> 5610;
5621 -> 5615;
5621 -> 5620;
5621 -> 5610;
5622 -> 5610;
5623 -> 5376;
5623 -> 5622;
5624 -> 5623;
5624 -> 5513;
5624 -> 5622;
5625 -> 5624;
5625 -> 5610;
5626 -> 5610;
5627 -> 5610;
5628 -> 5616;
5628 -> 5610;
5629 -> 5611;
5629 -> 5628;
5630 -> 5614;
5630 -> 5628;
5631 -> 5615;
5631 -> 5628;
5632 -> 5617;
5632 -> 5628;
5633 -> 5628;
5634 -> 5629;
5634 -> 5633;
5635 -> 5630;
5635 -> 5633;
5636 -> 5631;
5636 -> 5633;
5637 -> 5632;
5637 -> 5633;
5638 -> 5637;
5638 -> 5633;
5639 -> 5633;
5640 -> 5638;
5640 -> 5639;
5641 -> 5639;
5642 -> 5513;
5643 -> 5513;
5644 -> 5513;
5645 -> 5644;
5645 -> 5513;
5646 -> 5640;
5646 -> 5513;
5647 -> 5513;
5648 -> 5646;
5648 -> 5513;
5649 -> 5644;
5649 -> 5513;
5650 -> 5513;
5651 -> 5513;
5652 -> 5651;
5652 -> 5513;
5653 -> 5644;
5653 -> 5513;
5654 -> 5513;
5655 -> 5654;
5655 -> 5513;
5656 -> 5513;
5657 -> 5644;
5657 -> 5633;
5658 -> 5633;
5659 -> 5611;
5659 -> 5610;
5660 -> 5612;
5660 -> 5610;
5661 -> 5613;
5661 -> 5610;
5662 -> 5614;
5662 -> 5610;
5663 -> 5615;
5663 -> 5610;
5664 -> 5616;
5664 -> 5610;
5665 -> 5617;
5665 -> 5610;
5666 -> 5610;
5667 -> 5610;
5668 -> 5659;
5668 -> 5667;
5669 -> 5660;
5669 -> 5667;
5670 -> 5661;
5670 -> 5667;
5671 -> 5662;
5671 -> 5667;
5672 -> 5663;
5672 -> 5667;
5673 -> 5664;
5673 -> 5667;
5674 -> 5665;
5674 -> 5667;
5675 -> 5666;
5675 -> 5667;
5676 -> 5667;
5677 -> 5676;
5677 -> 5667;
5678 -> 5676;
5678 -> 5667;
5679 -> 5676;
5679 -> 5667;
5680 -> 5676;
5680 -> 5667;
5681 -> 5676;
5681 -> 5667;
5682 -> 5676;
5682 -> 5667;
5683 -> 5676;
5683 -> 5667;
5684 -> 5676;
5684 -> 5667;
5685 -> 5676;
5685 -> 5667;
5686 -> 5676;
5686 -> 5667;
5687 -> 5676;
5687 -> 5667;
5688 -> 5667;
5689 -> 5376;
5689 -> 5688;
5689 -> 5667;
5690 -> 5667;
5691 -> 5672;
5691 -> 5690;
5691 -> 5667;
5692 -> 5668;
5692 -> 5676;
5692 -> 5667;
5693 -> 5669;
5693 -> 5676;
5693 -> 5667;
5694 -> 5674;
5694 -> 5676;
5694 -> 5667;
5695 -> 5672;
5695 -> 5676;
5695 -> 5667;
5696 -> 5673;
5696 -> 5676;
5696 -> 5667;
5697 -> 5671;
5697 -> 5676;
5697 -> 5667;
5698 -> 5671;
5698 -> 5667;
5699 -> 5667;
5700 -> 5698;
5700 -> 5699;
5701 -> 5676;
5701 -> 5699;
5702 -> 5700;
5702 -> 5699;
5703 -> 5667;
5704 -> 5669;
5704 -> 5670;
5704 -> 5667;
5705 -> 5670;
5705 -> 5676;
5705 -> 5667;
5706 -> 5610;
5707 -> 5610;
5708 -> 5707;
5709 -> 5708;
5710 -> 5709;
5711 -> 5644;
5711 -> 5709;
5712 -> 5707;
5713 -> 5610;
5714 -> 5666;
5714 -> 5713;
5715 -> 5644;
5716 -> 5644;
5717 -> 5644;
5718 -> 5716;
5718 -> 5717;
5719 -> 5716;
5719 -> 5717;
5720 -> 5717;
5721 -> 5718;
5721 -> 5720;
5721 -> 5717;
5722 -> 5644;
5723 -> 5644;
5724 -> 5610;
5725 -> 5610;
5726 -> 5666;
5726 -> 5725;
5727 -> 5725;
5728 -> 5644;
5728 -> 5727;
5728 -> 5725;
5729 -> 5725;
5730 -> 5729;
5730 -> 5725;
5731 -> 5610;
5732 -> 5610;
5733 -> 5611;
5733 -> 5732;
5733 -> 5610;
5734 -> 5610;
5735 -> 5611;
5735 -> 5734;
5735 -> 5610;
5736 -> 5610;
5737 -> 5610;
5738 -> 5616;
5738 -> 5737;
5738 -> 5610;
5739 -> 5615;
5739 -> 5738;
5740 -> 5617;
5740 -> 5738;
5741 -> 5738;
5742 -> 5739;
5742 -> 5741;
5743 -> 5740;
5743 -> 5741;
5744 -> 5741;
5745 -> 5744;
5746 -> 5745;
5747 -> 5644;
5747 -> 5745;
5748 -> 5743;
5748 -> 5741;
5749 -> 5741;
5750 -> 5738;
5751 -> 5738;
5752 -> 5611;
5752 -> 5751;
5752 -> 5738;
5753 -> 5604;
5754 -> 5605;
5754 -> 5604;
5755 -> 5606;
5755 -> 5604;
5756 -> 5604;
5757 -> 5753;
5757 -> 5756;
5758 -> 5753;
5758 -> 5756;
5759 -> 5754;
5759 -> 5756;
5760 -> 5755;
5760 -> 5756;
5761 -> 5753;
5761 -> 5756;
5762 -> 5753;
5762 -> 5756;
5763 -> 5756;
5764 -> 5756;
5765 -> 5758;
5765 -> 5764;
5765 -> 5756;
5766 -> 5756;
5767 -> 5766;
5768 -> 5644;
5768 -> 5766;
5769 -> 5763;
5769 -> 5756;
5770 -> 5761;
5770 -> 5756;
5771 -> 5762;
5771 -> 5756;
5772 -> 5756;
5773 -> 5759;
5773 -> 5756;
5774 -> 5760;
5774 -> 5756;
5775 -> 5756;
5776 -> 5769;
5776 -> 5775;
5777 -> 5770;
5777 -> 5775;
5778 -> 5771;
5778 -> 5775;
5779 -> 5772;
5779 -> 5775;
5780 -> 5772;
5780 -> 5775;
5781 -> 5773;
5781 -> 5775;
5782 -> 5774;
5782 -> 5775;
5783 -> 5772;
5783 -> 5775;
5784 -> 5775;
5785 -> 5784;
5785 -> 5775;
5786 -> 5784;
5786 -> 5775;
5787 -> 5784;
5787 -> 5775;
5788 -> 5784;
5788 -> 5775;
5789 -> 5784;
5789 -> 5775;
5790 -> 5784;
5790 -> 5775;
5791 -> 5784;
5791 -> 5775;
5792 -> 5784;
5792 -> 5775;
5793 -> 5784;
5793 -> 5775;
5794 -> 5784;
5794 -> 5775;
5795 -> 5784;
5795 -> 5775;
5796 -> 5784;
5796 -> 5775;
5797 -> 5776;
5797 -> 5784;
5797 -> 5775;
5798 -> 5777;
5798 -> 5784;
5798 -> 5775;
5799 -> 5778;
5799 -> 5784;
5799 -> 5775;
5800 -> 5779;
5800 -> 5784;
5800 -> 5775;
5801 -> 5780;
5801 -> 5784;
5801 -> 5775;
5802 -> 5781;
5802 -> 5784;
5802 -> 5775;
5803 -> 5782;
5803 -> 5784;
5803 -> 5775;
5804 -> 5756;
5805 -> 5804;
5806 -> 5644;
5806 -> 5804;
5807 -> 5756;
5808 -> 5644;
5809 -> 5644;
5810 -> 5644;
5811 -> 5809;
5811 -> 5810;
5812 -> 5644;
5812 -> 5810;
5813 -> 5812;
5813 -> 5644;
5813 -> 5810;
5814 -> 5810;
5815 -> 5813;
5816 -> 5644;
5817 -> 5644;
5818 -> 5816;
5818 -> 5817;
5819 -> 5644;
5819 -> 5817;
5820 -> 5819;
5820 -> 5644;
5820 -> 5817;
5821 -> 5817;
5822 -> 5820;
5823 -> 5644;
5824 -> 5644;
5825 -> 5644;
5826 -> 5824;
5826 -> 5825;
5827 -> 5644;
5827 -> 5825;
5828 -> 5827;
5828 -> 5644;
5828 -> 5825;
5829 -> 5825;
5830 -> 5828;
5831 -> 5644;
5832 -> 5644;
5833 -> 5644;
5833 -> 5832;
5834 -> 5644;
5835 -> 5832;
5835 -> 5834;
5836 -> 5832;
5836 -> 5834;
5837 -> 5644;
5837 -> 5834;
5838 -> 5835;
5838 -> 5834;
5839 -> 5836;
5839 -> 5834;
5840 -> 5838;
5840 -> 5839;
5840 -> 5834;
5841 -> 5834;
5842 -> 5840;
5842 -> 5841;
5843 -> 5837;
5843 -> 5841;
5844 -> 5843;
5844 -> 5644;
5844 -> 5841;
5845 -> 5841;
5846 -> 5844;
5847 -> 5834;
5848 -> 5644;
5849 -> 5644;
5850 -> 5644;
5851 -> 5644;
5852 -> 5850;
5852 -> 5851;
5853 -> 5644;
5853 -> 5851;
5854 -> 5853;
5854 -> 5644;
5854 -> 5851;
5855 -> 5851;
5856 -> 5854;
5857 -> 5644;
5858 -> 5644;
5859 -> 5857;
5859 -> 5858;
5860 -> 5644;
5860 -> 5858;
5861 -> 5860;
5861 -> 5644;
5861 -> 5858;
5862 -> 5858;
5863 -> 5861;
5864 -> 5644;
5865 -> 5644;
5865 -> 5807;
5866 -> 5644;
5867 -> 5644;
5868 -> 5644;
5869 -> 5644;
5870 -> 5644;
5871 -> 5644;
5872 -> 5644;
5873 -> 0;
5873 -> 5644;
5874 -> 5644;
5875 -> 5644;
5876 -> 5644;
5877 -> 5876;
5877 -> 5873;
5877 -> 5644;
5878 -> 5877;
5878 -> 5644;
5879 -> 5644;
5880 -> 5644;
5881 -> 5875;
5881 -> 5880;
5881 -> 5644;
5882 -> 0;
5882 -> 5881;
5883 -> 5644;
5884 -> 5882;
5884 -> 0;
5884 -> 5644;
5885 -> 5878;
5885 -> 0;
5885 -> 5884;
5886 -> 5884;
5887 -> 5883;
5887 -> 5644;
5888 -> 5883;
5888 -> 5644;
5889 -> 5883;
5889 -> 5644;
5890 -> 5889;
5890 -> 5873;
5890 -> 5883;
5891 -> 5890;
5891 -> 5883;
5892 -> 5883;
5893 -> 5891;
5893 -> 0;
5893 -> 5884;
5894 -> 5883;
5895 -> 5883;
5896 -> 5883;
5897 -> 5883;
5898 -> 5883;
5899 -> 5897;
5899 -> 5898;
5900 -> 5644;
5900 -> 5898;
5901 -> 5900;
5901 -> 5883;
5901 -> 5898;
5902 -> 5898;
5903 -> 5901;
5904 -> 5883;
5905 -> 5883;
5906 -> 5883;
5907 -> 5905;
5907 -> 5906;
5908 -> 5644;
5908 -> 5906;
5909 -> 5908;
5909 -> 5883;
5909 -> 5906;
5910 -> 5906;
5911 -> 5909;
5912 -> 5756;
5913 -> 5772;
5913 -> 5883;
5913 -> 5912;
5913 -> 5756;
5914 -> 5763;
5914 -> 5756;
5915 -> 5756;
5916 -> 5761;
5916 -> 5915;
5916 -> 5756;
5917 -> 5916;
5918 -> 5917;
5919 -> 5918;
5920 -> 5883;
5921 -> 5883;
5922 -> 5883;
5923 -> 5604;
5924 -> 5605;
5924 -> 5604;
5925 -> 5606;
5925 -> 5604;
5926 -> 5604;
5927 -> 5923;
5927 -> 5926;
5928 -> 5924;
5928 -> 5926;
5929 -> 5925;
5929 -> 5926;
5930 -> 5376;
5930 -> 5926;
5931 -> 5926;
5932 -> 5930;
5932 -> 5883;
5932 -> 5931;
5932 -> 5926;
5933 -> 5927;
5933 -> 5926;
5934 -> 5926;
5935 -> 5933;
5935 -> 5934;
5936 -> 5930;
5936 -> 5934;
5937 -> 5934;
5938 -> 5936;
5938 -> 5883;
5938 -> 5937;
5938 -> 5934;
5939 -> 5926;
5940 -> 5600;
5941 -> 5601;
5941 -> 5600;
5942 -> 5396;
5942 -> 5393;
5943 -> 5398;
5943 -> 5393;
5944 -> 5397;
5944 -> 5393;
5945 -> 5393;
5946 -> 5883;
5946 -> 5945;
5947 -> 5883;
5947 -> 5945;
5948 -> 5883;
5948 -> 5945;
5949 -> 5883;
5949 -> 5945;
5950 -> 5883;
5950 -> 5945;
5951 -> 5883;
5951 -> 5945;
5952 -> 5945;
5953 -> 5384;
5954 -> 5377;
5954 -> 5375;
5955 -> 5375;
5956 -> 5954;
5956 -> 5955;
5957 -> 5956;
5957 -> 5955;
5958 -> 5955;
5959 -> 5957;
5959 -> 5958;
5960 -> 5959;
5960 -> 5958;
5961 -> 5958;
5962 -> 5958;
5963 -> 5960;
5963 -> 5962;
5964 -> 5961;
5964 -> 5962;
5965 -> 5962;
5966 -> 5963;
5966 -> 5965;
5966 -> 5962;
5967 -> 5963;
5967 -> 5962;
5968 -> 5967;
5968 -> 5252;
5968 -> 5374;
5968 -> 5344;
5968 -> 5345;
5968 -> 5354;
5968 -> 5346;
5968 -> 5371;
5968 -> 5348;
5968 -> 5372;
5968 -> 5351;
5968 -> 5364;
5968 -> 5352;
5968 -> 5353;
5968 -> 5349;
5968 -> 5368;
5968 -> 5369;
5968 -> 5370;
5968 -> 5328;
5968 -> 5278;
5968 -> 5962;
5969 -> 5962;
5970 -> 5967;
5970 -> 5969;
5970 -> 5252;
5970 -> 5374;
5970 -> 5344;
5970 -> 5345;
5970 -> 5354;
5970 -> 5346;
5970 -> 5371;
5970 -> 5348;
5970 -> 5372;
5970 -> 5351;
5970 -> 5364;
5970 -> 5352;
5970 -> 5353;
5970 -> 5349;
5970 -> 5368;
5970 -> 5369;
5970 -> 5370;
5970 -> 5328;
5970 -> 5278;
5970 -> 5962;
5971 -> 5970;
5971 -> 5969;
5972 -> 5971;
5972 -> 5970;
5972 -> 5969;
5973 -> 5963;
5973 -> 5962;
5974 -> 5973;
5974 -> 5972;
5974 -> 5962;
5975 -> 5962;
5976 -> 5973;
5976 -> 5975;
5976 -> 5972;
5976 -> 5962;
5977 -> 5976;
5977 -> 5975;
5978 -> 5977;
5978 -> 5976;
5978 -> 5975;
5979 -> 5964;
5979 -> 5972;
5979 -> 5978;
5979 -> 5962;
5980 -> 5883;
5980 -> 5979;
5980 -> 5962;
5981 -> 5962;
5982 -> 5980;
5982 -> 5981;
5983 -> 5980;
5983 -> 5981;
5984 -> 5980;
5984 -> 5981;
5985 -> 5980;
5985 -> 5981;
5986 -> 5980;
5986 -> 5981;
5987 -> 5980;
5987 -> 5981;
5988 -> 5980;
5988 -> 5981;
5989 -> 5980;
5989 -> 5981;
5990 -> 5980;
5990 -> 5981;
5991 -> 5981;
5992 -> 5981;
5993 -> 0;
5993 -> 5981;
5994 -> 5980;
5995 -> 5980;
5996 -> 5963;
5996 -> 5962;
5997 -> 5996;
5997 -> 5978;
5997 -> 5962;
5998 -> 5997;
5999 -> 5998;
6000 -> 5980;
6000 -> 5999;
6000 -> 5998;
6001 -> 5980;
6001 -> 5998;
6002 -> 5980;
6002 -> 5998;
6003 -> 5980;
6003 -> 5998;
6004 -> 5980;
6004 -> 6003;
6005 -> 5998;
6006 -> 5980;
6006 -> 6005;
6006 -> 5998;
6007 -> 6006;
6008 -> 5998;
6009 -> 5980;
6009 -> 6008;
6009 -> 5998;
6010 -> 5998;
6011 -> 5980;
6011 -> 6010;
6011 -> 5998;
6012 -> 5980;
6012 -> 5998;
6013 -> 5998;
6014 -> 5980;
6015 -> 5980;
6015 -> 5998;
6016 -> 5998;
6017 -> 5997;
6018 -> 5962;
6019 -> 5980;
6019 -> 6018;
6019 -> 5962;
6020 -> 5962;
6021 -> 5963;
6021 -> 5962;
6022 -> 5962;
6023 -> 6021;
6023 -> 6022;
6024 -> 6022;
6025 -> 6022;
6026 -> 5980;
6026 -> 6022;
6027 -> 6026;
6027 -> 6022;
6028 -> 6023;
6028 -> 6022;
6029 -> 6022;
6030 -> 6023;
6030 -> 6022;
6031 -> 6022;
6032 -> 6023;
6032 -> 6022;
6033 -> 6022;
6034 -> 6032;
6034 -> 6033;
6035 -> 2111;
6035 -> 6033;
6036 -> 6033;
6037 -> 6034;
6037 -> 6033;
6038 -> 6037;
6038 -> 5980;
6038 -> 6033;
6039 -> 6038;
6040 -> 6039;
6041 -> 6022;
6042 -> 6041;
6042 -> 6022;
6043 -> 6022;
6044 -> 6022;
6045 -> 6041;
6045 -> 6044;
6045 -> 6042;
6045 -> 6022;
6046 -> 6022;
6047 -> 6023;
6047 -> 6022;
6048 -> 6027;
6048 -> 5980;
6049 -> 5980;
6050 -> 6049;
6050 -> 6048;
6050 -> 5980;
6051 -> 5980;
6052 -> 5980;
6053 -> 6051;
6053 -> 6052;
6053 -> 5980;
6054 -> 5980;
6055 -> 5980;
6055 -> 6054;
6056 -> 6051;
6056 -> 6055;
6056 -> 6053;
6056 -> 6054;
6057 -> 6054;
6058 -> 6051;
6058 -> 6057;
6058 -> 6056;
6058 -> 6054;
6059 -> 5980;
6059 -> 6054;
6060 -> 6051;
6060 -> 6059;
6060 -> 6058;
6060 -> 6054;
6061 -> 5980;
6062 -> 5980;
6063 -> 5980;
6064 -> 6051;
6064 -> 6063;
6064 -> 6060;
6064 -> 5980;
6065 -> 5980;
6066 -> 6051;
6066 -> 6065;
6066 -> 6064;
6066 -> 5980;
6067 -> 5980;
6068 -> 6051;
6068 -> 6067;
6068 -> 6066;
6068 -> 5980;
6069 -> 5980;
6070 -> 6051;
6070 -> 6069;
6070 -> 6068;
6070 -> 5980;
6071 -> 5980;
6072 -> 6051;
6072 -> 6071;
6072 -> 6070;
6072 -> 5980;
6073 -> 5980;
6074 -> 5980;
6075 -> 6051;
6075 -> 6074;
6075 -> 6072;
6075 -> 5980;
6076 -> 5980;
6077 -> 5980;
6078 -> 5980;
6079 -> 5980;
6080 -> 5980;
6081 -> 6051;
6081 -> 6075;
6081 -> 5980;
6082 -> 6081;
6082 -> 5980;
6083 -> 6050;
6083 -> 6082;
6083 -> 5980;
6084 -> 6046;
6084 -> 6083;
6084 -> 5980;
6085 -> 6041;
6085 -> 6022;
6086 -> 6046;
6086 -> 6022;
6087 -> 6022;
6088 -> 6085;
6088 -> 6087;
6089 -> 6086;
6089 -> 6087;
6090 -> 6089;
6090 -> 6084;
6090 -> 6087;
6091 -> 6087;
6092 -> 6091;
6092 -> 6090;
6092 -> 6087;
6093 -> 6089;
6093 -> 6091;
6093 -> 6084;
6093 -> 6092;
6094 -> 6088;
6094 -> 6093;
6094 -> 6045;
6094 -> 6092;
6095 -> 6092;
6096 -> 6088;
6096 -> 6094;
6096 -> 6092;
6097 -> 6022;
6098 -> 6022;
6099 -> 6041;
6099 -> 6098;
6099 -> 6096;
6099 -> 6022;
6100 -> 6022;
6101 -> 6022;
6102 -> 5980;
6103 -> 5980;
6104 -> 6041;
6104 -> 5980;
6105 -> 6027;
6105 -> 5980;
6106 -> 5980;
6107 -> 6104;
6107 -> 6106;
6108 -> 6105;
6108 -> 6106;
6109 -> 6106;
6110 -> 6109;
6110 -> 6108;
6110 -> 6106;
6111 -> 6107;
6111 -> 6109;
6111 -> 6110;
6111 -> 6099;
6111 -> 6106;
6112 -> 5980;
6113 -> 5980;
6114 -> 6041;
6114 -> 6113;
6114 -> 6111;
6114 -> 5980;
6115 -> 5980;
6116 -> 6115;
6116 -> 5980;
6117 -> 5980;
6118 -> 5980;
6119 -> 5980;
6120 -> 5980;
6121 -> 5980;
6122 -> 5980;
6123 -> 5980;
6124 -> 5980;
6125 -> 5980;
6126 -> 5980;
6127 -> 5980;
6128 -> 5980;
6129 -> 5980;
6130 -> 5980;
6131 -> 5980;
6132 -> 5980;
6132 -> 6131;
6133 -> 5980;
6134 -> 5980;
6135 -> 5980;
6136 -> 5980;
6137 -> 5980;
6138 -> 6076;
6139 -> 6051;
6139 -> 6138;
6139 -> 6075;
6139 -> 6076;
6140 -> 6076;
6141 -> 6051;
6141 -> 6140;
6141 -> 6139;
6141 -> 6076;
6142 -> 6076;
6143 -> 6051;
6143 -> 6142;
6143 -> 6141;
6143 -> 6076;
6144 -> 6076;
6145 -> 6051;
6145 -> 6144;
6145 -> 6143;
6145 -> 6076;
6146 -> 6076;
6147 -> 6051;
6147 -> 6146;
6147 -> 6145;
6147 -> 6076;
6148 -> 6051;
6148 -> 6147;
6148 -> 5980;
6149 -> 6148;
6149 -> 5980;
6150 -> 6050;
6150 -> 6149;
6150 -> 5980;
6151 -> 6041;
6151 -> 6150;
6151 -> 6114;
6151 -> 5980;
6152 -> 6100;
6152 -> 6083;
6152 -> 5980;
6153 -> 6022;
6154 -> 5980;
6154 -> 6153;
6154 -> 6022;
6155 -> 6041;
6155 -> 6151;
6155 -> 6154;
6156 -> 6022;
6157 -> 6041;
6157 -> 6156;
6157 -> 6155;
6157 -> 6022;
6158 -> 6046;
6158 -> 6022;
6159 -> 6100;
6159 -> 6022;
6160 -> 0;
6160 -> 6022;
6161 -> 6022;
6162 -> 6022;
6163 -> 6158;
6163 -> 6162;
6164 -> 6159;
6164 -> 6162;
6165 -> 6160;
6165 -> 6162;
6166 -> 6161;
6166 -> 6162;
6167 -> 6161;
6167 -> 6162;
6168 -> 6162;
6169 -> 6166;
6169 -> 6168;
6169 -> 6162;
6170 -> 6169;
6170 -> 6162;
6171 -> 4891;
6171 -> 6170;
6172 -> 6162;
6173 -> 6172;
6173 -> 6167;
6173 -> 6162;
6174 -> 6163;
6174 -> 6162;
6175 -> 6164;
6175 -> 6162;
6176 -> 6165;
6176 -> 6162;
6177 -> 6174;
6177 -> 6162;
6178 -> 6175;
6178 -> 6162;
6179 -> 6173;
6179 -> 6162;
6180 -> 6162;
6181 -> 6177;
6181 -> 6180;
6182 -> 6178;
6182 -> 6180;
6183 -> 6179;
6183 -> 6180;
6184 -> 6171;
6184 -> 6180;
6185 -> 6181;
6185 -> 6180;
6186 -> 6181;
6186 -> 6174;
6186 -> 6180;
6187 -> 6182;
6187 -> 6180;
6188 -> 6182;
6188 -> 6175;
6188 -> 6180;
6189 -> 6180;
6190 -> 6185;
6190 -> 6189;
6191 -> 6186;
6191 -> 6189;
6192 -> 6187;
6192 -> 6189;
6193 -> 6188;
6193 -> 6189;
6194 -> 6184;
6194 -> 6189;
6195 -> 6190;
6195 -> 6189;
6196 -> 6191;
6196 -> 6189;
6197 -> 6192;
6197 -> 6189;
6198 -> 6193;
6198 -> 6189;
6199 -> 6189;
6200 -> 6195;
6200 -> 6199;
6201 -> 6196;
6201 -> 6199;
6202 -> 6197;
6202 -> 6199;
6203 -> 6198;
6203 -> 6199;
6204 -> 6194;
6204 -> 6199;
6205 -> 6199;
6206 -> 6201;
6206 -> 6205;
6206 -> 6199;
6207 -> 6199;
6208 -> 6203;
6208 -> 6207;
6208 -> 6199;
6209 -> 6206;
6209 -> 6208;
6209 -> 6199;
6210 -> 6199;
6211 -> 6210;
6211 -> 6209;
6211 -> 6199;
6212 -> 6199;
6213 -> 6212;
6213 -> 6201;
6213 -> 6199;
6214 -> 6213;
6215 -> 6209;
6215 -> 6211;
6215 -> 6214;
6215 -> 6213;
6216 -> 6215;
6216 -> 6212;
6216 -> 6214;
6216 -> 6209;
6216 -> 6213;
6217 -> 6199;
6218 -> 6217;
6218 -> 6203;
6218 -> 6199;
6219 -> 6218;
6220 -> 6209;
6220 -> 6211;
6220 -> 6216;
6220 -> 6219;
6220 -> 6218;
6221 -> 6220;
6221 -> 6219;
6221 -> 6217;
6221 -> 6209;
6221 -> 6218;
6222 -> 6199;
6223 -> 6222;
6223 -> 6201;
6223 -> 6199;
6224 -> 6223;
6225 -> 6224;
6225 -> 6203;
6225 -> 6223;
6226 -> 6225;
6227 -> 6209;
6227 -> 6211;
6227 -> 6216;
6227 -> 6221;
6227 -> 6226;
6227 -> 6225;
6228 -> 6200;
6228 -> 6225;
6229 -> 6202;
6229 -> 6225;
6230 -> 6225;
6231 -> 6228;
6231 -> 6230;
6232 -> 6226;
6232 -> 6230;
6233 -> 6229;
6233 -> 6230;
6234 -> 6226;
6234 -> 6230;
6235 -> 6204;
6235 -> 6230;
6236 -> 6231;
6236 -> 6174;
6236 -> 6232;
6236 -> 6230;
6237 -> 6233;
6237 -> 6175;
6237 -> 6234;
6237 -> 6230;
6238 -> 6235;
6238 -> 0;
6238 -> 6236;
6238 -> 6237;
6238 -> 6174;
6238 -> 6175;
6238 -> 6230;
6239 -> 6227;
6239 -> 6238;
6239 -> 6225;
6240 -> 6225;
6241 -> 6209;
6241 -> 6211;
6241 -> 6216;
6241 -> 6221;
6241 -> 6240;
6241 -> 6224;
6241 -> 6225;
6242 -> 6225;
6243 -> 6209;
6243 -> 6211;
6243 -> 6216;
6243 -> 6221;
6243 -> 6222;
6243 -> 6242;
6243 -> 6225;
6244 -> 6239;
6244 -> 6225;
6245 -> 6241;
6245 -> 6225;
6246 -> 6244;
6246 -> 6245;
6246 -> 6225;
6247 -> 6243;
6247 -> 6225;
6248 -> 6246;
6248 -> 6247;
6248 -> 6225;
6249 -> 6248;
6249 -> 6222;
6249 -> 6224;
6249 -> 6209;
6249 -> 6225;
6250 -> 6209;
6250 -> 6199;
6251 -> 6191;
6251 -> 6189;
6252 -> 6193;
6252 -> 6189;
6253 -> 6189;
6254 -> 6251;
6254 -> 6253;
6254 -> 6189;
6255 -> 6252;
6255 -> 6253;
6255 -> 6189;
6256 -> 6254;
6256 -> 6255;
6256 -> 6189;
6257 -> 6250;
6257 -> 6209;
6257 -> 6211;
6257 -> 6216;
6257 -> 6221;
6257 -> 6249;
6257 -> 6251;
6257 -> 6252;
6257 -> 6256;
6258 -> 6256;
6259 -> 6250;
6259 -> 6209;
6259 -> 6211;
6259 -> 6216;
6259 -> 6221;
6259 -> 6249;
6259 -> 6258;
6259 -> 6252;
6259 -> 6256;
6260 -> 6250;
6260 -> 6209;
6260 -> 6211;
6260 -> 6216;
6260 -> 6221;
6260 -> 6249;
6260 -> 6251;
6260 -> 6252;
6260 -> 6259;
6261 -> 6259;
6262 -> 6251;
6262 -> 6261;
6263 -> 6252;
6263 -> 6261;
6264 -> 6261;
6265 -> 0;
6265 -> 6261;
6266 -> 6262;
6266 -> 6261;
6267 -> 6263;
6267 -> 6261;
6268 -> 6261;
6269 -> 6265;
6269 -> 6268;
6270 -> 6266;
6270 -> 6268;
6271 -> 6267;
6271 -> 6268;
6272 -> 6264;
6272 -> 6268;
6273 -> 6269;
6273 -> 6272;
6273 -> 6268;
6274 -> 6270;
6274 -> 6272;
6274 -> 6268;
6275 -> 6271;
6275 -> 6272;
6275 -> 6268;
6276 -> 6189;
6277 -> 6262;
6277 -> 6276;
6277 -> 6189;
6278 -> 6189;
6279 -> 6263;
6279 -> 6278;
6279 -> 6189;
6280 -> 6264;
6280 -> 6273;
6280 -> 6274;
6280 -> 6275;
6280 -> 6180;
6281 -> 6280;
6282 -> 6281;
6283 -> 6182;
6283 -> 6175;
6283 -> 6238;
6283 -> 6280;
6283 -> 6281;
6284 -> 6183;
6284 -> 6283;
6284 -> 6172;
6284 -> 6281;
6285 -> 6176;
6285 -> 6282;
6285 -> 6162;
6286 -> 6041;
6286 -> 6285;
6286 -> 6157;
6286 -> 6022;
6287 -> 6100;
6287 -> 6152;
6287 -> 6022;
6288 -> 6046;
6288 -> 6093;
6288 -> 6022;
6289 -> 6041;
6289 -> 6286;
6289 -> 6022;
6290 -> 5955;
6291 -> 5375;
6292 -> 5375;
6293 -> 5376;
6293 -> 5883;
6294 -> 5980;
6295 -> 5980;
6296 -> 5375;
6297 -> 5376;
6297 -> 5375;
}