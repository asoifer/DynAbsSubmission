digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 779084"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 779085"];
3 [label="param CompilationEmitTests(this) 779086"];
4 [label="param EmitMetadataTestBase(this) 779087"];
5 [label="param CSharpTestBase(this) 779088"];
6 [label="param CommonTestBase(this) 779089"];
7 [label="param TestBase(this) 779090"];
8 [label="_temp 779091"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 779092"];
10 [label="param CheckUnsafeAttributes6(this) 779093"];
11 [label="string source = @'\nusing System.Security;\nusing System.Security.Permissions;\n\n[assembly: SecurityPermission(SecurityAction.RequestMinimum, RemotingConfiguration = true)]\n[assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n[module: UnverifiableCode]\n\nclass C\n{\n    public static void Main()\n    {\n    }\n}'; 779094"];
12 [label="var compilation = CreateCompilation(source, options: TestOptions.ReleaseDll); 779095"];
13 [label="source 779096"];
14 [label="param operator(string source) 779097"];
15 [label="source 779098"];
16 [label="new CSharpTestSource(source) 779099"];
17 [label="param CSharpTestSource(object value) 779100"];
18 [label="param CSharpTestSource(this) 779101"];
19 [label="Value 779102"];
20 [label="var compilation = CreateCompilation(source, options: TestOptions.ReleaseDll); 779103"];
21 [label="var compilation = CreateCompilation(source, options: TestOptions.ReleaseDll); 779104"];
22 [label="var compilation = CreateCompilation(source, options: TestOptions.ReleaseDll); 779105"];
23 [label="CreateCompilation(source, options: TestOptions.ReleaseDll) 779106"];
24 [label="param CreateCompilation(CSharpTestSource source) 779107"];
25 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 779108"];
26 [label="param CreateCompilation(CSharpCompilationOptions options = null) 779109"];
27 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 779110"];
28 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 779111"];
29 [label="param CreateCompilation(string assemblyName = '') 779112"];
30 [label="param CreateCompilation(string sourceFileName = '') 779113"];
31 [label="param CreateCompilation(bool skipUsesIsNullable = false) 779114"];
32 [label="source 779115"];
33 [label="targetFramework 779116"];
34 [label="references 779117"];
35 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 779118"];
36 [label="param GetReferences(TargetFramework tf) 779119"];
37 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 779120"];
38 [label="var references = GetReferences(tf); 779121"];
39 [label="GetReferences(tf) 779122"];
40 [label="param GetReferences(TargetFramework targetFramework) 779123"];
41 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 779124"];
42 [label="StandardReferences 779125"];
43 [label="RuntimeUtilities.IsCoreClrRuntime 779126"];
44 [label="Mscorlib46ExtendedReferences 779127"];
45 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 779128"];
46 [label="TestBase.ValueTupleRef 779129"];
47 [label="TestReferences.NetFx.ValueTuple.tuplelib 779130"];
48 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 779131"];
49 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 779132"];
50 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 779133"];
51 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 779134"];
52 [label="return references; 779135"];
53 [label="options 779136"];
54 [label="parseOptions 779137"];
55 [label="assemblyName 779138"];
56 [label="sourceFileName 779139"];
57 [label="skipUsesIsNullable 779140"];
58 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 779141"];
59 [label="param CreateEmptyCompilation(CSharpTestSource source) 779142"];
60 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 779143"];
61 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 779144"];
62 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 779145"];
63 [label="param CreateEmptyCompilation(string assemblyName = '') 779146"];
64 [label="param CreateEmptyCompilation(string sourceFileName = '') 779147"];
65 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 779148"];
66 [label="source 779149"];
67 [label="references 779150"];
68 [label="options 779151"];
69 [label="parseOptions 779152"];
70 [label="assemblyName 779153"];
71 [label="sourceFileName 779154"];
72 [label="skipUsesIsNullable 779155"];
73 [label="null 779156"];
74 [label="experimentalFeature: null 779157"];
75 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 779158"];
76 [label="param CreateCompilationCore(CSharpTestSource source) 779159"];
77 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 779160"];
78 [label="param CreateCompilationCore(CSharpCompilationOptions options) 779161"];
79 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 779162"];
80 [label="param CreateCompilationCore(string assemblyName) 779163"];
81 [label="param CreateCompilationCore(string sourceFileName) 779164"];
82 [label="param CreateCompilationCore(bool skipUsesIsNullable) 779165"];
83 [label="param CreateCompilationCore(MessageID? experimentalFeature) 779166"];
84 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 779167"];
85 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 779168"];
86 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 779169"];
87 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 779170"];
88 [label="param GetSyntaxTrees(string sourceFileName = '') 779171"];
89 [label="param GetSyntaxTrees(this) 779172"];
90 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 779173"];
91 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 779174"];
92 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 779175"];
93 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 779176"];
94 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 779177"];
95 [label="param Parse(string text) 779178"];
96 [label="param Parse(string filename = '') 779179"];
97 [label="param Parse(CSharpParseOptions options = null) 779180"];
98 [label="param Parse(Encoding encoding = null) 779181"];
99 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 779182"];
100 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 779183"];
101 [label="options = TestOptions.Regular; 779184"];
102 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 779185"];
103 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 779186"];
104 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 779187"];
105 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 779188"];
106 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 779189"];
107 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 779190"];
108 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 779191"];
109 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 779192"];
110 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 779193"];
111 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 779194"];
112 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 779195"];
113 [label="param CheckSerializable(SyntaxTree tree) 779196"];
114 [label="var stream = new MemoryStream(); 779197"];
115 [label="var root = tree.GetRoot(); 779198"];
116 [label="var root = tree.GetRoot(); 779199"];
117 [label="root.SerializeTo(stream); 779200"];
118 [label="root.SerializeTo(stream); 779201"];
119 [label="root.SerializeTo(stream); 779202"];
120 [label="stream.Position = 0; 779203"];
121 [label="stream.Position 779204"];
122 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 779205"];
123 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 779206"];
124 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 779207"];
125 [label="return tree; 779208"];
126 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 779209"];
127 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 779210"];
128 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 779211"];
129 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 779212"];
130 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 779213"];
131 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 779214"];
132 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 779215"];
133 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 779216"];
134 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 779217"];
135 [label="param ValidateIOperations(Func<Compilation> createCompilation) 779218"];
136 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 779219"];
137 [label="return; 779220"];
138 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 779221"];
139 [label="var compilation = createCompilationLambda(); 779222"];
140 [label="var compilation = createCompilationLambda(); 779223"];
141 [label="return Guid.NewGuid().ToString('D'); 779224"];
142 [label="var compilation = createCompilationLambda(); 779225"];
143 [label="OutputKind.ConsoleApplication 779226"];
144 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 779227"];
145 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 779228"];
146 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 779229"];
147 [label="OutputKind.DynamicallyLinkedLibrary 779230"];
148 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 779231"];
149 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 779232"];
150 [label="true 779233"];
151 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 779234"];
152 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 779235"];
153 [label="param Create(string? assemblyName) 779236"];
154 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 779237"];
155 [label="param Create(IEnumerable<MetadataReference>? references = null) 779238"];
156 [label="param Create(CSharpCompilationOptions? options = null) 779239"];
157 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 779240"];
158 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 779241"];
159 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 779242"];
160 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 779243"];
161 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 779244"];
162 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 779245"];
163 [label="param Create(string? assemblyName) 779246"];
164 [label="param Create(CSharpCompilationOptions options) 779247"];
165 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 779248"];
166 [label="param Create(IEnumerable<MetadataReference>? references) 779249"];
167 [label="param Create(CSharpCompilation? previousSubmission) 779250"];
168 [label="param Create(Type? returnType) 779251"];
169 [label="param Create(Type? hostObjectType) 779252"];
170 [label="param Create(bool isSubmission) 779253"];
171 [label="RoslynDebug.Assert(options != null); 779254"];
172 [label="RoslynDebug.Assert(options != null); 779255"];
173 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 779256"];
174 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 779257"];
175 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 779258"];
176 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 779259"];
177 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 779260"];
178 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 779261"];
179 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 779262"];
180 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 779263"];
181 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 779264"];
182 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 779265"];
183 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 779266"];
184 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 779267"];
185 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 779268"];
186 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 779269"];
187 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 779270"];
188 [label="param SyntaxAndDeclarationManager(string scriptClassName) 779271"];
189 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 779272"];
190 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 779273"];
191 [label="param SyntaxAndDeclarationManager(bool isSubmission) 779274"];
192 [label="param SyntaxAndDeclarationManager(State state) 779275"];
193 [label="param SyntaxAndDeclarationManager(this) 779276"];
194 [label="externalSyntaxTrees 779277"];
195 [label="scriptClassName 779278"];
196 [label="resolver 779279"];
197 [label="messageProvider 779280"];
198 [label="isSubmission 779281"];
199 [label="param SyntaxAndDeclarationManager(this) 779282"];
200 [label="param SyntaxAndDeclarationManager(this) 779283"];
201 [label="_lazyState 779284"];
202 [label="_lazyState 779285"];
203 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 779286"];
204 [label="param CSharpCompilation(string? assemblyName) 779287"];
205 [label="param CSharpCompilation(CSharpCompilationOptions options) 779288"];
206 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 779289"];
207 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 779290"];
208 [label="param CSharpCompilation(Type? submissionReturnType) 779291"];
209 [label="param CSharpCompilation(Type? hostObjectType) 779292"];
210 [label="param CSharpCompilation(bool isSubmission) 779293"];
211 [label="param CSharpCompilation(ReferenceManager? referenceManager) 779294"];
212 [label="param CSharpCompilation(bool reuseReferenceManager) 779295"];
213 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 779296"];
214 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 779297"];
215 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 779298"];
216 [label="param CSharpCompilation(this) 779299"];
217 [label="assemblyName 779300"];
218 [label="options 779301"];
219 [label="references 779302"];
220 [label="previousSubmission 779303"];
221 [label="submissionReturnType 779304"];
222 [label="hostObjectType 779305"];
223 [label="isSubmission 779306"];
224 [label="referenceManager 779307"];
225 [label="reuseReferenceManager 779308"];
226 [label="syntaxAndDeclarations 779309"];
227 [label="syntaxAndDeclarations.ExternalSyntaxTrees 779310"];
228 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 779311"];
229 [label="semanticModelProvider 779312"];
230 [label="eventQueue 779313"];
231 [label="param CSharpCompilation(this) 779314"];
232 [label="param CSharpCompilation(string? assemblyName) 779315"];
233 [label="param CSharpCompilation(CSharpCompilationOptions options) 779316"];
234 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 779317"];
235 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 779318"];
236 [label="param CSharpCompilation(Type? submissionReturnType) 779319"];
237 [label="param CSharpCompilation(Type? hostObjectType) 779320"];
238 [label="param CSharpCompilation(bool isSubmission) 779321"];
239 [label="param CSharpCompilation(ReferenceManager? referenceManager) 779322"];
240 [label="param CSharpCompilation(bool reuseReferenceManager) 779323"];
241 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 779324"];
242 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 779325"];
243 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 779326"];
244 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 779327"];
245 [label="param CSharpCompilation(this) 779328"];
246 [label="assemblyName 779329"];
247 [label="references 779330"];
248 [label="features 779331"];
249 [label="isSubmission 779332"];
250 [label="semanticModelProvider 779333"];
251 [label="eventQueue 779334"];
252 [label="param CSharpCompilation(this) 779335"];
253 [label="param CSharpCompilation(this) 779336"];
254 [label="_options 779337"];
255 [label="_globalImports 779338"];
256 [label="_previousSubmissionImports 779339"];
257 [label="_globalNamespaceAlias 779340"];
258 [label="_scriptClass 779341"];
259 [label="_lazyHostObjectTypeSymbol 779342"];
260 [label="_lazyImportInfos 779343"];
261 [label="_conversions 779344"];
262 [label="_anonymousTypeManager 779345"];
263 [label="_lazyGlobalNamespace 779346"];
264 [label="builtInOperators 779347"];
265 [label="_lazyAssemblySymbol 779348"];
266 [label="_referenceManager 779349"];
267 [label="_syntaxAndDeclarations 779350"];
268 [label="_lazyEntryPoint 779351"];
269 [label="_lazyEmitNullablePublicOnly 779352"];
270 [label="_lazyCompilationUnitCompletedTrees 779353"];
271 [label="NullableAnalysisData 779354"];
272 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 779355"];
273 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 779356"];
274 [label="_externAliasTargets 779357"];
275 [label="_moduleInitializerMethods 779358"];
276 [label="_binderFactories 779359"];
277 [label="_ignoreAccessibilityBinderFactories 779360"];
278 [label="_lazyDeclarationDiagnostics 779361"];
279 [label="_declarationDiagnosticsFrozen 779362"];
280 [label="new DiagnosticBag() 779363"];
281 [label="_additionalCodegenWarnings = new DiagnosticBag() 779364"];
282 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 779365"];
283 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 779366"];
284 [label="WellKnownMemberSignatureComparer 779367"];
285 [label="_options 779368"];
286 [label="this.builtInOperators = new BuiltInOperators(this); 779369"];
287 [label="this.builtInOperators = new BuiltInOperators(this); 779370"];
288 [label="new BuiltInOperators(this) 779371"];
289 [label="param BuiltInOperators(CSharpCompilation compilation) 779372"];
290 [label="param BuiltInOperators(this) 779373"];
291 [label="_compilation 779374"];
292 [label="_builtInUnaryOperators 779375"];
293 [label="_builtInOperators 779376"];
294 [label="_compilation 779377"];
295 [label="this.builtInOperators 779378"];
296 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 779379"];
297 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 779380"];
298 [label="_scriptClass 779381"];
299 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 779382"];
300 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 779383"];
301 [label="_globalImports 779384"];
302 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 779385"];
303 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 779386"];
304 [label="_previousSubmissionImports 779387"];
305 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 779388"];
306 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 779389"];
307 [label="_globalNamespaceAlias 779390"];
308 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 779391"];
309 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 779392"];
310 [label="_anonymousTypeManager 779393"];
311 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 779394"];
312 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 779395"];
313 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 779396"];
314 [label="LanguageVersion? result = null; 779397"];
315 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 779398"];
316 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 779399"];
317 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 779400"];
318 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 779401"];
319 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 779402"];
320 [label="this.LanguageVersion 779403"];
321 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 779404"];
322 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779405"];
323 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779406"];
324 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779407"];
325 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779408"];
326 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779409"];
327 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779410"];
328 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 779411"];
329 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 779412"];
330 [label="this.Options 779413"];
331 [label="get\n            {\n                return _options;\n            } 779414"];
332 [label="return _options; 779415"];
333 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 779416"];
334 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 779417"];
335 [label="_referenceManager 779418"];
336 [label="_syntaxAndDeclarations 779419"];
337 [label="Debug.Assert(_lazyAssemblySymbol is null); 779420"];
338 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 779421"];
339 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 779422"];
340 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 779423"];
341 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 779424"];
342 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 779425"];
343 [label="compilation.AddSyntaxTrees(syntaxTrees) 779426"];
344 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 779427"];
345 [label="param AddSyntaxTrees(this) 779428"];
346 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 779429"];
347 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 779430"];
348 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 779431"];
349 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 779432"];
350 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 779433"];
351 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 779434"];
352 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 779435"];
353 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 779436"];
354 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 779437"];
355 [label="bool reuseReferenceManager = true; 779438"];
356 [label="int i = 0; 779439"];
357 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 779440"];
358 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 779441"];
359 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 779442"];
360 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 779443"];
361 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 779444"];
362 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 779445"];
363 [label="externalSyntaxTrees.Add(tree); 779446"];
364 [label="externalSyntaxTrees.Add(tree); 779447"];
365 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 779448"];
366 [label="i++; 779449"];
367 [label="externalSyntaxTrees.Free(); 779450"];
368 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 779451"];
369 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 779452"];
370 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 779453"];
371 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 779454"];
372 [label="param AddSyntaxTrees(this) 779455"];
373 [label="var scriptClassName = this.ScriptClassName; 779456"];
374 [label="var resolver = this.Resolver; 779457"];
375 [label="var messageProvider = this.MessageProvider; 779458"];
376 [label="var isSubmission = this.IsSubmission; 779459"];
377 [label="var state = _lazyState; 779460"];
378 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 779461"];
379 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 779462"];
380 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 779463"];
381 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 779464"];
382 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 779465"];
383 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 779466"];
384 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 779467"];
385 [label="param WithExternalSyntaxTrees(this) 779468"];
386 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 779469"];
387 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 779470"];
388 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 779471"];
389 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 779472"];
390 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 779473"];
391 [label="param SyntaxAndDeclarationManager(string scriptClassName) 779474"];
392 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 779475"];
393 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 779476"];
394 [label="param SyntaxAndDeclarationManager(bool isSubmission) 779477"];
395 [label="param SyntaxAndDeclarationManager(State state) 779478"];
396 [label="param SyntaxAndDeclarationManager(this) 779479"];
397 [label="param SyntaxAndDeclarationManager(this) 779480"];
398 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 779481"];
399 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 779482"];
400 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 779483"];
401 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 779484"];
402 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 779485"];
403 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 779486"];
404 [label="param Update(ReferenceManager referenceManager) 779487"];
405 [label="param Update(bool reuseReferenceManager) 779488"];
406 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 779489"];
407 [label="param Update(this) 779490"];
408 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 779491"];
409 [label="this.PreviousSubmission 779492"];
410 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 779493"];
411 [label="ScriptCompilationInfo 779494"];
412 [label="ScriptCompilationInfo?.PreviousScriptCompilation 779495"];
413 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 779496"];
414 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 779497"];
415 [label="this.SubmissionReturnType 779498"];
416 [label="=> ScriptCompilationInfo 779499"];
417 [label="ScriptCompilationInfo 779500"];
418 [label="this.HostObjectType 779501"];
419 [label="=> ScriptCompilationInfo 779502"];
420 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 779503"];
421 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 779504"];
422 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 779505"];
423 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 779506"];
424 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 779507"];
425 [label="param CSharpCompilation(string? assemblyName) 779508"];
426 [label="param CSharpCompilation(CSharpCompilationOptions options) 779509"];
427 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 779510"];
428 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 779511"];
429 [label="param CSharpCompilation(Type? submissionReturnType) 779512"];
430 [label="param CSharpCompilation(Type? hostObjectType) 779513"];
431 [label="param CSharpCompilation(bool isSubmission) 779514"];
432 [label="param CSharpCompilation(ReferenceManager? referenceManager) 779515"];
433 [label="param CSharpCompilation(bool reuseReferenceManager) 779516"];
434 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 779517"];
435 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 779518"];
436 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 779519"];
437 [label="param CSharpCompilation(this) 779520"];
438 [label="previousSubmission 779521"];
439 [label="submissionReturnType 779522"];
440 [label="hostObjectType 779523"];
441 [label="syntaxAndDeclarations.ExternalSyntaxTrees 779524"];
442 [label="eventQueue 779525"];
443 [label="param CSharpCompilation(this) 779526"];
444 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 779527"];
445 [label="param CSharpCompilation(Type? submissionReturnType) 779528"];
446 [label="param CSharpCompilation(Type? hostObjectType) 779529"];
447 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 779530"];
448 [label="param CSharpCompilation(this) 779531"];
449 [label="eventQueue 779532"];
450 [label="param CSharpCompilation(this) 779533"];
451 [label="_options 779534"];
452 [label="_globalImports 779535"];
453 [label="_previousSubmissionImports 779536"];
454 [label="_globalNamespaceAlias 779537"];
455 [label="_scriptClass 779538"];
456 [label="_lazyHostObjectTypeSymbol 779539"];
457 [label="_lazyImportInfos 779540"];
458 [label="_conversions 779541"];
459 [label="_anonymousTypeManager 779542"];
460 [label="_lazyGlobalNamespace 779543"];
461 [label="builtInOperators 779544"];
462 [label="_lazyAssemblySymbol 779545"];
463 [label="_referenceManager 779546"];
464 [label="_syntaxAndDeclarations 779547"];
465 [label="_lazyEntryPoint 779548"];
466 [label="_lazyEmitNullablePublicOnly 779549"];
467 [label="_lazyCompilationUnitCompletedTrees 779550"];
468 [label="NullableAnalysisData 779551"];
469 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 779552"];
470 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 779553"];
471 [label="_externAliasTargets 779554"];
472 [label="_moduleInitializerMethods 779555"];
473 [label="_binderFactories 779556"];
474 [label="_ignoreAccessibilityBinderFactories 779557"];
475 [label="_lazyDeclarationDiagnostics 779558"];
476 [label="_declarationDiagnosticsFrozen 779559"];
477 [label="new DiagnosticBag() 779560"];
478 [label="_additionalCodegenWarnings = new DiagnosticBag() 779561"];
479 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 779562"];
480 [label="this.builtInOperators = new BuiltInOperators(this); 779563"];
481 [label="this.builtInOperators = new BuiltInOperators(this); 779564"];
482 [label="new BuiltInOperators(this) 779565"];
483 [label="param BuiltInOperators(CSharpCompilation compilation) 779566"];
484 [label="param BuiltInOperators(this) 779567"];
485 [label="_compilation 779568"];
486 [label="_builtInUnaryOperators 779569"];
487 [label="_builtInOperators 779570"];
488 [label="_compilation 779571"];
489 [label="this.builtInOperators 779572"];
490 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 779573"];
491 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 779574"];
492 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 779575"];
493 [label="LanguageVersion? result = null; 779576"];
494 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 779577"];
495 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 779578"];
496 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 779579"];
497 [label="result = version; 779580"];
498 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 779581"];
499 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779582"];
500 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779583"];
501 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779584"];
502 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779585"];
503 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779586"];
504 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 779587"];
505 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 779588"];
506 [label="referenceManager.AssertCanReuseForCompilation(this); 779589"];
507 [label="referenceManager.AssertCanReuseForCompilation(this); 779590"];
508 [label="_referenceManager 779591"];
509 [label="Debug.Assert(_lazyAssemblySymbol is null); 779592"];
510 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 779593"];
511 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 779594"];
512 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 779595"];
513 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 779596"];
514 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 779597"];
515 [label="return compilation; 779598"];
516 [label="var compilation = createCompilationLambda(); 779599"];
517 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 779600"];
518 [label="IsNullableEnabled(compilation) 779601"];
519 [label="param IsNullableEnabled(CSharpCompilation compilation) 779602"];
520 [label="compilation.SyntaxTrees 779603"];
521 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 779604"];
522 [label="_syntaxAndDeclarations.GetLazyState() 779605"];
523 [label="param GetLazyState(this) 779606"];
524 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 779607"];
525 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 779608"];
526 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 779609"];
527 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 779610"];
528 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 779611"];
529 [label="param CreateState(string scriptClassName) 779612"];
530 [label="param CreateState(SourceReferenceResolver resolver) 779613"];
531 [label="param CreateState(CommonMessageProvider messageProvider) 779614"];
532 [label="param CreateState(bool isSubmission) 779615"];
533 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 779616"];
534 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 779617"];
535 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 779618"];
536 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 779619"];
537 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 779620"];
538 [label="var declTable = DeclarationTable.Empty; 779621"];
539 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 779622"];
540 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 779623"];
541 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 779624"];
542 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 779625"];
543 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 779626"];
544 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 779627"];
545 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 779628"];
546 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 779629"];
547 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 779630"];
548 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 779631"];
549 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 779632"];
550 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 779633"];
551 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 779634"];
552 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 779635"];
553 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 779636"];
554 [label="param AppendAllSyntaxTrees(string scriptClassName) 779637"];
555 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 779638"];
556 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 779639"];
557 [label="param AppendAllSyntaxTrees(bool isSubmission) 779640"];
558 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 779641"];
559 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 779642"];
560 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 779643"];
561 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 779644"];
562 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 779645"];
563 [label="var sourceCodeKind = tree.Options.Kind; 779646"];
564 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 779647"];
565 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 779648"];
566 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 779649"];
567 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 779650"];
568 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 779651"];
569 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 779652"];
570 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 779653"];
571 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 779654"];
572 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 779655"];
573 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 779656"];
574 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 779657"];
575 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 779658"];
576 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 779659"];
577 [label="declMapBuilder.Add(tree, lazyRoot); 779660"];
578 [label="declMapBuilder.Add(tree, lazyRoot); 779661"];
579 [label="declMapBuilder.Add(tree, lazyRoot); 779662"];
580 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 779663"];
581 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 779664"];
582 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 779665"];
583 [label="treesBuilder.Add(tree); 779666"];
584 [label="treesBuilder.Add(tree); 779667"];
585 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 779668"];
586 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 779669"];
587 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 779670"];
588 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 779671"];
589 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 779672"];
590 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 779673"];
591 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 779674"];
592 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 779675"];
593 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 779676"];
594 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 779677"];
595 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 779678"];
596 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 779679"];
597 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 779680"];
598 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 779681"];
599 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 779682"];
600 [label="param State(DeclarationTable declarationTable) 779683"];
601 [label="param State(this) 779684"];
602 [label="OrdinalMap 779685"];
603 [label="LoadDirectiveMap 779686"];
604 [label="LoadedSyntaxTreeMap 779687"];
605 [label="RootNamespaces 779688"];
606 [label="DeclarationTable 779689"];
607 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 779690"];
608 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 779691"];
609 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 779692"];
610 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 779693"];
611 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 779694"];
612 [label="this.SyntaxTrees 779695"];
613 [label="this.OrdinalMap 779696"];
614 [label="this.LoadDirectiveMap 779697"];
615 [label="this.LoadedSyntaxTreeMap 779698"];
616 [label="this.RootNamespaces 779699"];
617 [label="this.DeclarationTable 779700"];
618 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 779701"];
619 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 779702"];
620 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 779703"];
621 [label="return _lazyState; 779704"];
622 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 779705"];
623 [label="var trees = compilation.SyntaxTrees; 779706"];
624 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 779707"];
625 [label="var options = (CSharpParseOptions)trees[0].Options; 779708"];
626 [label="var options = (CSharpParseOptions)trees[0].Options; 779709"];
627 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 779710"];
628 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 779711"];
629 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 779712"];
630 [label="return compilation; 779713"];
631 [label="compilation.VerifyDiagnostics(\n                // (5,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, RemotingConfiguration = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'),\n                // (6,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.')); 779714"];
632 [label="compilation.VerifyDiagnostics(\n                // (5,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, RemotingConfiguration = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'),\n                // (6,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.')); 779715"];
633 [label="compilation.VerifyDiagnostics(\n                // (5,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, RemotingConfiguration = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'),\n                // (6,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.')); 779716"];
634 [label="Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum') 779717"];
635 [label="param Diagnostic(object code) 779718"];
636 [label="param Diagnostic(string squiggledText = null) 779719"];
637 [label="param Diagnostic(object[] arguments = null) 779720"];
638 [label="param Diagnostic(LinePosition? startLocation = null) 779721"];
639 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 779722"];
640 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 779723"];
641 [label="param Diagnostic(bool isSuppressed = false) 779724"];
642 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779725"];
643 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779726"];
644 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779727"];
645 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779728"];
646 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779729"];
647 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779730"];
648 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779731"];
649 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 779732"];
650 [label="param Diagnostic(object code) 779733"];
651 [label="param Diagnostic(string squiggledText = null) 779734"];
652 [label="param Diagnostic(object[] arguments = null) 779735"];
653 [label="param Diagnostic(LinePosition? startLocation = null) 779736"];
654 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 779737"];
655 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 779738"];
656 [label="param Diagnostic(bool isSuppressed = false) 779739"];
657 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 779740"];
658 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779741"];
659 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779742"];
660 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779743"];
661 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779744"];
662 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779745"];
663 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779746"];
664 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779747"];
665 [label="{ } 779748"];
666 [label="None = { } 779749"];
667 [label="null 779750"];
668 [label="Any = null 779751"];
669 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779752"];
670 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 779753"];
671 [label="param DiagnosticDescription(object code) 779754"];
672 [label="param DiagnosticDescription(bool isWarningAsError) 779755"];
673 [label="param DiagnosticDescription(string squiggledText) 779756"];
674 [label="param DiagnosticDescription(object[] arguments) 779757"];
675 [label="param DiagnosticDescription(LinePosition? startLocation) 779758"];
676 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 779759"];
677 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 779760"];
678 [label="param DiagnosticDescription(Type errorCodeType = null) 779761"];
679 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 779762"];
680 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 779763"];
681 [label="param DiagnosticDescription(bool isSuppressed = false) 779764"];
682 [label="param DiagnosticDescription(this) 779765"];
683 [label="_code 779766"];
684 [label="_isWarningAsError 779767"];
685 [label="_isSuppressed 779768"];
686 [label="_squiggledText 779769"];
687 [label="_arguments 779770"];
688 [label="_startPosition 779771"];
689 [label="_argumentOrderDoesNotMatter 779772"];
690 [label="_errorCodeType 779773"];
691 [label="_ignoreArgumentsWhenComparing 779774"];
692 [label="_defaultSeverityOpt 779775"];
693 [label="_effectiveSeverityOpt 779776"];
694 [label="_syntaxPredicate 779777"];
695 [label="_showPredicate 779778"];
696 [label="_location 779779"];
697 [label="_argumentsAsStrings 779780"];
698 [label="_code 779781"];
699 [label="_isWarningAsError 779782"];
700 [label="_squiggledText 779783"];
701 [label="_arguments 779784"];
702 [label="_startPosition 779785"];
703 [label="_syntaxPredicate 779786"];
704 [label="_argumentOrderDoesNotMatter 779787"];
705 [label="_errorCodeType = errorCodeType ?? code.GetType(); 779788"];
706 [label="_errorCodeType 779789"];
707 [label="_defaultSeverityOpt 779790"];
708 [label="_effectiveSeverityOpt 779791"];
709 [label="_isSuppressed 779792"];
710 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779793"];
711 [label="compilation.VerifyDiagnostics(\n                // (5,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, RemotingConfiguration = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'),\n                // (6,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.')); 779794"];
712 [label="Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.') 779795"];
713 [label="Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.') 779796"];
714 [label="param WithArguments(params object[] arguments) 779797"];
715 [label="param WithArguments(this) 779798"];
716 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779799"];
717 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779800"];
718 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779801"];
719 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779802"];
720 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779803"];
721 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779804"];
722 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779805"];
723 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779806"];
724 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779807"];
725 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779808"];
726 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779809"];
727 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 779810"];
728 [label="param DiagnosticDescription(object code) 779811"];
729 [label="param DiagnosticDescription(bool isWarningAsError) 779812"];
730 [label="param DiagnosticDescription(string squiggledText) 779813"];
731 [label="param DiagnosticDescription(object[] arguments) 779814"];
732 [label="param DiagnosticDescription(LinePosition? startLocation) 779815"];
733 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 779816"];
734 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 779817"];
735 [label="param DiagnosticDescription(Type errorCodeType = null) 779818"];
736 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 779819"];
737 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 779820"];
738 [label="param DiagnosticDescription(bool isSuppressed = false) 779821"];
739 [label="param DiagnosticDescription(this) 779822"];
740 [label="_code 779823"];
741 [label="_isWarningAsError 779824"];
742 [label="_isSuppressed 779825"];
743 [label="_squiggledText 779826"];
744 [label="_arguments 779827"];
745 [label="_startPosition 779828"];
746 [label="_argumentOrderDoesNotMatter 779829"];
747 [label="_errorCodeType 779830"];
748 [label="_ignoreArgumentsWhenComparing 779831"];
749 [label="_defaultSeverityOpt 779832"];
750 [label="_effectiveSeverityOpt 779833"];
751 [label="_syntaxPredicate 779834"];
752 [label="_showPredicate 779835"];
753 [label="_location 779836"];
754 [label="_argumentsAsStrings 779837"];
755 [label="_arguments 779838"];
756 [label="_argumentOrderDoesNotMatter 779839"];
757 [label="compilation.VerifyDiagnostics(\n                // (5,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, RemotingConfiguration = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'),\n                // (6,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.')); 779840"];
758 [label="Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum') 779841"];
759 [label="param Diagnostic(object code) 779842"];
760 [label="param Diagnostic(string squiggledText = null) 779843"];
761 [label="param Diagnostic(object[] arguments = null) 779844"];
762 [label="param Diagnostic(LinePosition? startLocation = null) 779845"];
763 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 779846"];
764 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 779847"];
765 [label="param Diagnostic(bool isSuppressed = false) 779848"];
766 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779849"];
767 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779850"];
768 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779851"];
769 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779852"];
770 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779853"];
771 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779854"];
772 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779855"];
773 [label="TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed) 779856"];
774 [label="param Diagnostic(object code) 779857"];
775 [label="param Diagnostic(string squiggledText = null) 779858"];
776 [label="param Diagnostic(object[] arguments = null) 779859"];
777 [label="param Diagnostic(LinePosition? startLocation = null) 779860"];
778 [label="param Diagnostic(Func<SyntaxNode, bool> syntaxNodePredicate = null) 779861"];
779 [label="param Diagnostic(bool argumentOrderDoesNotMatter = false) 779862"];
780 [label="param Diagnostic(bool isSuppressed = false) 779863"];
781 [label="Debug.Assert(code is Microsoft.CodeAnalysis.CSharp.ErrorCode ||\n                         code is Microsoft.CodeAnalysis.VisualBasic.ERRID ||\n                         code is int ||\n                         code is string); 779864"];
782 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779865"];
783 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779866"];
784 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779867"];
785 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779868"];
786 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779869"];
787 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779870"];
788 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779871"];
789 [label="return new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed); 779872"];
790 [label="new DiagnosticDescription(\n                code as string ?? (object)(int)code,\n                false,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                code.GetType(),\n                isSuppressed: isSuppressed) 779873"];
791 [label="param DiagnosticDescription(object code) 779874"];
792 [label="param DiagnosticDescription(bool isWarningAsError) 779875"];
793 [label="param DiagnosticDescription(string squiggledText) 779876"];
794 [label="param DiagnosticDescription(object[] arguments) 779877"];
795 [label="param DiagnosticDescription(LinePosition? startLocation) 779878"];
796 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 779879"];
797 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 779880"];
798 [label="param DiagnosticDescription(Type errorCodeType = null) 779881"];
799 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 779882"];
800 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 779883"];
801 [label="param DiagnosticDescription(bool isSuppressed = false) 779884"];
802 [label="param DiagnosticDescription(this) 779885"];
803 [label="_code 779886"];
804 [label="_isWarningAsError 779887"];
805 [label="_isSuppressed 779888"];
806 [label="_squiggledText 779889"];
807 [label="_arguments 779890"];
808 [label="_startPosition 779891"];
809 [label="_argumentOrderDoesNotMatter 779892"];
810 [label="_errorCodeType 779893"];
811 [label="_ignoreArgumentsWhenComparing 779894"];
812 [label="_defaultSeverityOpt 779895"];
813 [label="_effectiveSeverityOpt 779896"];
814 [label="_syntaxPredicate 779897"];
815 [label="_showPredicate 779898"];
816 [label="_location 779899"];
817 [label="_argumentsAsStrings 779900"];
818 [label="_code 779901"];
819 [label="_isWarningAsError 779902"];
820 [label="_squiggledText 779903"];
821 [label="_arguments 779904"];
822 [label="_startPosition 779905"];
823 [label="_syntaxPredicate 779906"];
824 [label="_argumentOrderDoesNotMatter 779907"];
825 [label="_errorCodeType = errorCodeType ?? code.GetType(); 779908"];
826 [label="_errorCodeType 779909"];
827 [label="_defaultSeverityOpt 779910"];
828 [label="_effectiveSeverityOpt 779911"];
829 [label="_isSuppressed 779912"];
830 [label="return TestHelpers.Diagnostic(\n                code,\n                squiggledText,\n                arguments,\n                startLocation,\n                syntaxNodePredicate,\n                argumentOrderDoesNotMatter,\n                isSuppressed: isSuppressed); 779913"];
831 [label="compilation.VerifyDiagnostics(\n                // (5,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, RemotingConfiguration = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'),\n                // (6,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.')); 779914"];
832 [label="Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.') 779915"];
833 [label="Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.') 779916"];
834 [label="param WithArguments(params object[] arguments) 779917"];
835 [label="param WithArguments(this) 779918"];
836 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779919"];
837 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779920"];
838 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779921"];
839 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779922"];
840 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779923"];
841 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779924"];
842 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779925"];
843 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779926"];
844 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779927"];
845 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779928"];
846 [label="return new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed); 779929"];
847 [label="new DiagnosticDescription(_code, _isWarningAsError, _squiggledText, arguments, _startPosition, _syntaxPredicate, false, _errorCodeType, _defaultSeverityOpt, _effectiveSeverityOpt, _isSuppressed) 779930"];
848 [label="param DiagnosticDescription(object code) 779931"];
849 [label="param DiagnosticDescription(bool isWarningAsError) 779932"];
850 [label="param DiagnosticDescription(string squiggledText) 779933"];
851 [label="param DiagnosticDescription(object[] arguments) 779934"];
852 [label="param DiagnosticDescription(LinePosition? startLocation) 779935"];
853 [label="param DiagnosticDescription(Func<SyntaxNode, bool> syntaxNodePredicate) 779936"];
854 [label="param DiagnosticDescription(bool argumentOrderDoesNotMatter) 779937"];
855 [label="param DiagnosticDescription(Type errorCodeType = null) 779938"];
856 [label="param DiagnosticDescription(DiagnosticSeverity? defaultSeverityOpt = null) 779939"];
857 [label="param DiagnosticDescription(DiagnosticSeverity? effectiveSeverityOpt = null) 779940"];
858 [label="param DiagnosticDescription(bool isSuppressed = false) 779941"];
859 [label="param DiagnosticDescription(this) 779942"];
860 [label="_code 779943"];
861 [label="_isWarningAsError 779944"];
862 [label="_isSuppressed 779945"];
863 [label="_squiggledText 779946"];
864 [label="_arguments 779947"];
865 [label="_startPosition 779948"];
866 [label="_argumentOrderDoesNotMatter 779949"];
867 [label="_errorCodeType 779950"];
868 [label="_ignoreArgumentsWhenComparing 779951"];
869 [label="_defaultSeverityOpt 779952"];
870 [label="_effectiveSeverityOpt 779953"];
871 [label="_syntaxPredicate 779954"];
872 [label="_showPredicate 779955"];
873 [label="_location 779956"];
874 [label="_argumentsAsStrings 779957"];
875 [label="_arguments 779958"];
876 [label="_argumentOrderDoesNotMatter 779959"];
877 [label="compilation.VerifyDiagnostics(\n                // (5,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, RemotingConfiguration = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'),\n                // (6,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.')); 779960"];
878 [label="compilation.VerifyDiagnostics(\n                // (5,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, RemotingConfiguration = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'),\n                // (6,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.')) 779961"];
879 [label="compilation.VerifyDiagnostics(\n                // (5,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, RemotingConfiguration = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'),\n                // (6,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.')) 779962"];
880 [label="compilation.VerifyDiagnostics(\n                // (5,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, RemotingConfiguration = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'),\n                // (6,31): warning CS0618: 'System.Security.Permissions.SecurityAction.RequestMinimum' is obsolete: 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.'\n                // [assembly: SecurityPermission(SecurityAction.RequestMinimum, UnmanagedCode = true)]\n                Diagnostic(ErrorCode.WRN_DeprecatedSymbolStr, 'SecurityAction.RequestMinimum').WithArguments('System.Security.Permissions.SecurityAction.RequestMinimum', 'Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.')) 779963"];
881 [label="param VerifyDiagnostics(this TCompilation c) 779964"];
882 [label="param VerifyDiagnostics(params DiagnosticDescription[] expected) 779965"];
883 [label="var diagnostics = c.GetDiagnostics(); 779966"];
884 [label="c.GetDiagnostics() 779967"];
885 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 779968"];
886 [label="param GetDiagnostics(this) 779969"];
887 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 779970"];
888 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 779971"];
889 [label="return GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken); 779972"];
890 [label="GetDiagnostics(DefaultDiagnosticsStage, true, cancellationToken) 779973"];
891 [label="param GetDiagnostics(CompilationStage stage) 779974"];
892 [label="param GetDiagnostics(bool includeEarlierStages) 779975"];
893 [label="param GetDiagnostics(CancellationToken cancellationToken) 779976"];
894 [label="param GetDiagnostics(this) 779977"];
895 [label="var diagnostics = DiagnosticBag.GetInstance(); 779978"];
896 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 779979"];
897 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 779980"];
898 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 779981"];
899 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 779982"];
900 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 779983"];
901 [label="param GetDiagnostics(CompilationStage stage) 779984"];
902 [label="param GetDiagnostics(bool includeEarlierStages) 779985"];
903 [label="param GetDiagnostics(DiagnosticBag diagnostics) 779986"];
904 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 779987"];
905 [label="param GetDiagnostics(this) 779988"];
906 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 779989"];
907 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 779990"];
908 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 779991"];
909 [label="this.SyntaxTrees 779992"];
910 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 779993"];
911 [label="_syntaxAndDeclarations.GetLazyState() 779994"];
912 [label="param GetLazyState(this) 779995"];
913 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 779996"];
914 [label="var syntaxTrees = this.SyntaxTrees; 779997"];
915 [label="this.Options 779998"];
916 [label="get\n            {\n                return _options;\n            } 779999"];
917 [label="return _options; 780000"];
918 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 780001"];
919 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 780002"];
920 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 780003"];
921 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 780004"];
922 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 780005"];
923 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 780006"];
924 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 780007"];
925 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 780008"];
926 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 780009"];
927 [label="ImmutableArray<LoadDirective> loadDirectives; 780010"];
928 [label="loadDirectives 780011"];
929 [label="syntaxAndDeclarations.GetLazyState() 780012"];
930 [label="param GetLazyState(this) 780013"];
931 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 780014"];
932 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 780015"];
933 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 780016"];
934 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 780017"];
935 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 780018"];
936 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 780019"];
937 [label="cancellationToken.ThrowIfCancellationRequested(); 780020"];
938 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 780021"];
939 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 780022"];
940 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 780023"];
941 [label="CheckAssemblyName(builder); 780024"];
942 [label="CheckAssemblyName(builder); 780025"];
943 [label="CheckAssemblyName(builder); 780026"];
944 [label="get { return _syntaxAndDeclarations.MessageProvider; } 780027"];
945 [label="return _syntaxAndDeclarations.MessageProvider; 780028"];
946 [label="Options 780029"];
947 [label="get\n            {\n                return _options;\n            } 780030"];
948 [label="return _options; 780031"];
949 [label="builder.AddRange(Options.Errors); 780032"];
950 [label="Options 780033"];
951 [label="get\n            {\n                return _options;\n            } 780034"];
952 [label="return _options; 780035"];
953 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 780036"];
954 [label="cancellationToken.ThrowIfCancellationRequested(); 780037"];
955 [label="GetBoundReferenceManager() 780038"];
956 [label="param GetBoundReferenceManager(this) 780039"];
957 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780040"];
958 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 780041"];
959 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 780042"];
960 [label="get { return this.Declarations.ReferenceDirectives; } 780043"];
961 [label="this.Declarations 780044"];
962 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 780045"];
963 [label="_syntaxAndDeclarations.GetLazyState() 780046"];
964 [label="param GetLazyState(this) 780047"];
965 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 780048"];
966 [label="return this.Declarations.ReferenceDirectives; 780049"];
967 [label="get { return _options; } 780050"];
968 [label="return _options; 780051"];
969 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 780052"];
970 [label="_syntaxAndDeclarations.GetLazyState() 780053"];
971 [label="Debug.Assert(_lazyAssemblySymbol is object); 780054"];
972 [label="return _referenceManager; 780055"];
973 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 780056"];
974 [label="cancellationToken.ThrowIfCancellationRequested(); 780057"];
975 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 780058"];
976 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 780059"];
977 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 780060"];
978 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 780061"];
979 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 780062"];
980 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 780063"];
981 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 780064"];
982 [label="param GetSourceDeclarationDiagnostics(this) 780065"];
983 [label="GlobalImports 780066"];
984 [label="=> _globalImports.Value 780067"];
985 [label="_globalImports.Value 780068"];
986 [label="_globalImports.Value 780069"];
987 [label="=> Imports.FromGlobalUsings(this) 780070"];
988 [label="this 780071"];
989 [label="Imports.FromGlobalUsings(this) 780072"];
990 [label="Imports.FromGlobalUsings(this) 780073"];
991 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 780074"];
992 [label="ScriptCompilationInfo 780075"];
993 [label="ScriptCompilationInfo?.PreviousScriptCompilation 780076"];
994 [label="GlobalImports.Complete(cancellationToken); 780077"];
995 [label="GlobalImports.Complete(cancellationToken); 780078"];
996 [label="GlobalImports.Complete(cancellationToken); 780079"];
997 [label="SourceLocation? location = null; 780080"];
998 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 780081"];
999 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 780082"];
1000 [label="Assembly 780083"];
1001 [label="get\n            {\n                return SourceAssembly;\n            } 780084"];
1002 [label="SourceAssembly 780085"];
1003 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 780086"];
1004 [label="GetBoundReferenceManager() 780087"];
1005 [label="param GetBoundReferenceManager(this) 780088"];
1006 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780089"];
1007 [label="return _referenceManager; 780090"];
1008 [label="GetBoundReferenceManager(); 780091"];
1009 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 780092"];
1010 [label="return _lazyAssemblySymbol; 780093"];
1011 [label="return SourceAssembly; 780094"];
1012 [label="Assembly.ForceComplete(location, cancellationToken); 780095"];
1013 [label="Assembly.ForceComplete(location, cancellationToken); 780096"];
1014 [label="Assembly.ForceComplete(location, cancellationToken); 780097"];
1015 [label="Assembly.ForceComplete(location, cancellationToken); 780098"];
1016 [label="Assembly.ForceComplete(location, cancellationToken); 780099"];
1017 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 780100"];
1018 [label="Declarations 780101"];
1019 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 780102"];
1020 [label="_syntaxAndDeclarations.GetLazyState() 780103"];
1021 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 780104"];
1022 [label="return Declarations.GetMergedRoot(this); 780105"];
1023 [label="return Declarations.GetMergedRoot(this); 780106"];
1024 [label="return Declarations.GetMergedRoot(this); 780107"];
1025 [label="_syntaxAndDeclarations.GetLazyState() 780108"];
1026 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 780109"];
1027 [label="param GetBinderFactory(SyntaxTree syntaxTree) 780110"];
1028 [label="param GetBinderFactory(bool ignoreAccessibility = false) 780111"];
1029 [label="param GetBinderFactory(this) 780112"];
1030 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 780113"];
1031 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 780114"];
1032 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 780115"];
1033 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 780116"];
1034 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 780117"];
1035 [label="param GetBinderFactory(SyntaxTree syntaxTree) 780118"];
1036 [label="param GetBinderFactory(bool ignoreAccessibility) 780119"];
1037 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 780120"];
1038 [label="param GetBinderFactory(this) 780121"];
1039 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 780122"];
1040 [label="ignoreAccessibility 780123"];
1041 [label="_binderFactories 780124"];
1042 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 780125"];
1043 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 780126"];
1044 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 780127"];
1045 [label="GetSyntaxTreeOrdinal(syntaxTree) 780128"];
1046 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 780129"];
1047 [label="param GetSyntaxTreeOrdinal(this) 780130"];
1048 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 780131"];
1049 [label="this.ContainsSyntaxTree(tree) 780132"];
1050 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 780133"];
1051 [label="param ContainsSyntaxTree(this) 780134"];
1052 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 780135"];
1053 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 780136"];
1054 [label="_syntaxAndDeclarations.GetLazyState() 780137"];
1055 [label="param GetLazyState(this) 780138"];
1056 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 780139"];
1057 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 780140"];
1058 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 780141"];
1059 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 780142"];
1060 [label="_syntaxAndDeclarations.GetLazyState() 780143"];
1061 [label="param GetLazyState(this) 780144"];
1062 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 780145"];
1063 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 780146"];
1064 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 780147"];
1065 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 780148"];
1066 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 780149"];
1067 [label="this.SyntaxTrees 780150"];
1068 [label="param GetLazyState(this) 780151"];
1069 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 780152"];
1070 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 780153"];
1071 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 780154"];
1072 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 780155"];
1073 [label="BinderFactory? previousFactory; 780156"];
1074 [label="var previousWeakReference = binderFactories[treeNum]; 780157"];
1075 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 780158"];
1076 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 780159"];
1077 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 780160"];
1078 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 780161"];
1079 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 780162"];
1080 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 780163"];
1081 [label="param AddNewFactory(SyntaxTree syntaxTree) 780164"];
1082 [label="param AddNewFactory(bool ignoreAccessibility) 780165"];
1083 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 780166"];
1084 [label="param AddNewFactory(this) 780167"];
1085 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 780168"];
1086 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 780169"];
1087 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 780170"];
1088 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 780171"];
1089 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 780172"];
1090 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 780173"];
1091 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 780174"];
1092 [label="BinderFactory? previousFactory; 780175"];
1093 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 780176"];
1094 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 780177"];
1095 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 780178"];
1096 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 780179"];
1097 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 780180"];
1098 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 780181"];
1099 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 780182"];
1100 [label="return newFactory; 780183"];
1101 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 780184"];
1102 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 780185"];
1103 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 780186"];
1104 [label="GetAllUnaliasedModules(modules); 780187"];
1105 [label="GetAllUnaliasedModules(modules) 780188"];
1106 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 780189"];
1107 [label="param GetAllUnaliasedModules(this) 780190"];
1108 [label="Assembly 780191"];
1109 [label="get\n            {\n                return SourceAssembly;\n            } 780192"];
1110 [label="GetBoundReferenceManager() 780193"];
1111 [label="param GetBoundReferenceManager(this) 780194"];
1112 [label="GetBoundReferenceManager(); 780195"];
1113 [label="modules.AddRange(Assembly.Modules); 780196"];
1114 [label="modules.AddRange(Assembly.Modules); 780197"];
1115 [label="GetBoundReferenceManager() 780198"];
1116 [label="param GetBoundReferenceManager(this) 780199"];
1117 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780200"];
1118 [label="return _referenceManager; 780201"];
1119 [label="var referenceManager = GetBoundReferenceManager(); 780202"];
1120 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 780203"];
1121 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 780204"];
1122 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 780205"];
1123 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 780206"];
1124 [label="GetAllUnaliasedModules(modules); 780207"];
1125 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 780208"];
1126 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 780209"];
1127 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 780210"];
1128 [label="modules.Free(); 780211"];
1129 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 780212"];
1130 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 780213"];
1131 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 780214"];
1132 [label="return _lazyGlobalNamespace; 780215"];
1133 [label="get\n            {\n                return Assembly.Modules[0];\n            } 780216"];
1134 [label="Assembly 780217"];
1135 [label="get\n            {\n                return SourceAssembly;\n            } 780218"];
1136 [label="SourceAssembly 780219"];
1137 [label="GetBoundReferenceManager() 780220"];
1138 [label="param GetBoundReferenceManager(this) 780221"];
1139 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780222"];
1140 [label="return _referenceManager; 780223"];
1141 [label="GetBoundReferenceManager(); 780224"];
1142 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 780225"];
1143 [label="return Assembly.Modules[0]; 780226"];
1144 [label="return Assembly.Modules[0]; 780227"];
1145 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 780228"];
1146 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 780229"];
1147 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 780230"];
1148 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 780231"];
1149 [label="var diagnostics = new DiagnosticBag(); 780232"];
1150 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 780233"];
1151 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 780234"];
1152 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 780235"];
1153 [label="return _lazyDeclarationDiagnostics; 780236"];
1154 [label="param SymbolDeclaredEvent(Symbol symbol) 780237"];
1155 [label="param SymbolDeclaredEvent(this) 780238"];
1156 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 780239"];
1157 [label="param RecordImport(UsingDirectiveSyntax syntax) 780240"];
1158 [label="param RecordImport(this) 780241"];
1159 [label="RecordImportInternal(syntax); 780242"];
1160 [label="RecordImportInternal(syntax) 780243"];
1161 [label="param RecordImportInternal(CSharpSyntaxNode syntax) 780244"];
1162 [label="param RecordImportInternal(this) 780245"];
1163 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 780246"];
1164 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 780247"];
1165 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 780248"];
1166 [label="new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span) 780249"];
1167 [label="param ImportInfo(SyntaxTree tree) 780250"];
1168 [label="param ImportInfo(SyntaxKind kind) 780251"];
1169 [label="param ImportInfo(TextSpan span) 780252"];
1170 [label="param ImportInfo(this) 780253"];
1171 [label="this.Tree 780254"];
1172 [label="this.Kind 780255"];
1173 [label="this.Span 780256"];
1174 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 780257"];
1175 [label="param GetHashCode(this) 780258"];
1176 [label="return Hash.Combine(Tree, Span.Start); 780259"];
1177 [label="RecordImportInternal(syntax); 780260"];
1178 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780261"];
1179 [label="return _referenceManager; 780262"];
1180 [label="GetBoundReferenceManager(); 780263"];
1181 [label="SourceAssembly 780264"];
1182 [label="GetBoundReferenceManager() 780265"];
1183 [label="param GetBoundReferenceManager(this) 780266"];
1184 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780267"];
1185 [label="return _referenceManager; 780268"];
1186 [label="GetBoundReferenceManager(); 780269"];
1187 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 780270"];
1188 [label="param GetUnaliasedReferencedAssemblies(this) 780271"];
1189 [label="GetBoundReferenceManager() 780272"];
1190 [label="param GetBoundReferenceManager(this) 780273"];
1191 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780274"];
1192 [label="return _referenceManager; 780275"];
1193 [label="var referenceManager = GetBoundReferenceManager(); 780276"];
1194 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 780277"];
1195 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 780278"];
1196 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 780279"];
1197 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 780280"];
1198 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 780281"];
1199 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 780282"];
1200 [label="return _additionalCodegenWarnings; 780283"];
1201 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780284"];
1202 [label="return _referenceManager; 780285"];
1203 [label="GetBoundReferenceManager(); 780286"];
1204 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780287"];
1205 [label="return _referenceManager; 780288"];
1206 [label="GetBoundReferenceManager(); 780289"];
1207 [label="param GetSpecialType(SpecialType specialType) 780290"];
1208 [label="param GetSpecialType(this) 780291"];
1209 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 780292"];
1210 [label="NamedTypeSymbol result; 780293"];
1211 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 780294"];
1212 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 780295"];
1213 [label="Assembly 780296"];
1214 [label="GetBoundReferenceManager() 780297"];
1215 [label="GetBoundReferenceManager(); 780298"];
1216 [label="result = Assembly.GetSpecialType(specialType); 780299"];
1217 [label="result = Assembly.GetSpecialType(specialType); 780300"];
1218 [label="Debug.Assert(result.SpecialType == specialType); 780301"];
1219 [label="return result; 780302"];
1220 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780303"];
1221 [label="return _referenceManager; 780304"];
1222 [label="GetBoundReferenceManager(); 780305"];
1223 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 780306"];
1224 [label="param IsNullableAnalysisEnabledIn(this) 780307"];
1225 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 780308"];
1226 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 780309"];
1227 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 780310"];
1228 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 780311"];
1229 [label="param IsNullableAnalysisEnabledIn(this) 780312"];
1230 [label="GetNullableAnalysisValue() 780313"];
1231 [label="param GetNullableAnalysisValue(this) 780314"];
1232 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 780315"];
1233 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 780316"];
1234 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 780317"];
1235 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 780318"];
1236 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 780319"];
1237 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 780320"];
1238 [label="Options 780321"];
1239 [label="get\n            {\n                return _options;\n            } 780322"];
1240 [label="return _options; 780323"];
1241 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 780324"];
1242 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 780325"];
1243 [label="get\n            {\n                var value = GetNullableAnalysisValue();\n#if DEBUG\n                return value != false;\n#else\n                return value == true;\n#endif\n            } 780326"];
1244 [label="GetNullableAnalysisValue() 780327"];
1245 [label="param GetNullableAnalysisValue(this) 780328"];
1246 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 780329"];
1247 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 780330"];
1248 [label="var value = GetNullableAnalysisValue(); 780331"];
1249 [label="return value != false; 780332"];
1250 [label="return value != false; 780333"];
1251 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780334"];
1252 [label="return _referenceManager; 780335"];
1253 [label="GetBoundReferenceManager(); 780336"];
1254 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780337"];
1255 [label="return _referenceManager; 780338"];
1256 [label="GetBoundReferenceManager(); 780339"];
1257 [label="GetBoundReferenceManager() 780340"];
1258 [label="GetBoundReferenceManager(); 780341"];
1259 [label="Debug.Assert(result.SpecialType == specialType); 780342"];
1260 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 780343"];
1261 [label="var previousWeakReference = binderFactories[treeNum]; 780344"];
1262 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 780345"];
1263 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 780346"];
1264 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 780347"];
1265 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 780348"];
1266 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 780349"];
1267 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 780350"];
1268 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780351"];
1269 [label="return _referenceManager; 780352"];
1270 [label="GetBoundReferenceManager(); 780353"];
1271 [label="param Equals(ImportInfo other) 780354"];
1272 [label="param Equals(this) 780355"];
1273 [label="return\n                    other.Kind == this.Kind &&\n                    other.Tree == this.Tree &&\n                    other.Span == this.Span; 780356"];
1274 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780357"];
1275 [label="return _referenceManager; 780358"];
1276 [label="GetBoundReferenceManager(); 780359"];
1277 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780360"];
1278 [label="return _referenceManager; 780361"];
1279 [label="GetBoundReferenceManager(); 780362"];
1280 [label="param GetImports(SingleNamespaceDeclaration declaration) 780363"];
1281 [label="param GetImports(this) 780364"];
1282 [label="return GetBinderFactory(declaration.SyntaxReference.SyntaxTree).GetImportsBinder((CSharpSyntaxNode)declaration.SyntaxReference.GetSyntax()).GetImports(basesBeingResolved: null); 780365"];
1283 [label="return GetBinderFactory(declaration.SyntaxReference.SyntaxTree).GetImportsBinder((CSharpSyntaxNode)declaration.SyntaxReference.GetSyntax()).GetImports(basesBeingResolved: null); 780366"];
1284 [label="GetBinderFactory(declaration.SyntaxReference.SyntaxTree) 780367"];
1285 [label="param GetBinderFactory(SyntaxTree syntaxTree) 780368"];
1286 [label="param GetBinderFactory(bool ignoreAccessibility = false) 780369"];
1287 [label="param GetBinderFactory(this) 780370"];
1288 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 780371"];
1289 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 780372"];
1290 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 780373"];
1291 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 780374"];
1292 [label="param GetBinderFactory(bool ignoreAccessibility) 780375"];
1293 [label="param GetBinderFactory(this) 780376"];
1294 [label="ignoreAccessibility 780377"];
1295 [label="_binderFactories 780378"];
1296 [label="GetSyntaxTreeOrdinal(syntaxTree) 780379"];
1297 [label="param GetSyntaxTreeOrdinal(this) 780380"];
1298 [label="this.ContainsSyntaxTree(tree) 780381"];
1299 [label="param ContainsSyntaxTree(this) 780382"];
1300 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 780383"];
1301 [label="_syntaxAndDeclarations.GetLazyState() 780384"];
1302 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 780385"];
1303 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 780386"];
1304 [label="_syntaxAndDeclarations.GetLazyState() 780387"];
1305 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 780388"];
1306 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 780389"];
1307 [label="BinderFactory? previousFactory; 780390"];
1308 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 780391"];
1309 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 780392"];
1310 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 780393"];
1311 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 780394"];
1312 [label="param AddNewFactory(bool ignoreAccessibility) 780395"];
1313 [label="param AddNewFactory(this) 780396"];
1314 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 780397"];
1315 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 780398"];
1316 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 780399"];
1317 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 780400"];
1318 [label="BinderFactory? previousFactory; 780401"];
1319 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 780402"];
1320 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 780403"];
1321 [label="Assembly 780404"];
1322 [label="SourceAssembly 780405"];
1323 [label="GetBoundReferenceManager() 780406"];
1324 [label="param GetBoundReferenceManager(this) 780407"];
1325 [label="GetBoundReferenceManager(); 780408"];
1326 [label="return Assembly.Modules[0]; 780409"];
1327 [label="RecordImportInternal(syntax) 780410"];
1328 [label="LazyInitializer.EnsureInitialized(ref _lazyImportInfos)!.\n                Add(new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span)); 780411"];
1329 [label="new ImportInfo(syntax.SyntaxTree, syntax.Kind(), syntax.Span) 780412"];
1330 [label="param ImportInfo(this) 780413"];
1331 [label="RecordImportInternal(syntax); 780414"];
1332 [label="SourceAssembly 780415"];
1333 [label="GetBoundReferenceManager() 780416"];
1334 [label="param GetBoundReferenceManager(this) 780417"];
1335 [label="GetBoundReferenceManager(); 780418"];
1336 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 780419"];
1337 [label="GetBoundReferenceManager() 780420"];
1338 [label="param GetBoundReferenceManager(this) 780421"];
1339 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780422"];
1340 [label="return _referenceManager; 780423"];
1341 [label="GetBoundReferenceManager(); 780424"];
1342 [label="GetBoundReferenceManager() 780425"];
1343 [label="GetBoundReferenceManager(); 780426"];
1344 [label="Debug.Assert(result.SpecialType == specialType); 780427"];
1345 [label="param GetBinder(CSharpSyntaxNode syntax) 780428"];
1346 [label="param GetBinder(this) 780429"];
1347 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 780430"];
1348 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 780431"];
1349 [label="GetBinderFactory(syntax.SyntaxTree) 780432"];
1350 [label="param GetBinderFactory(SyntaxTree syntaxTree) 780433"];
1351 [label="param GetBinderFactory(bool ignoreAccessibility = false) 780434"];
1352 [label="param GetBinderFactory(this) 780435"];
1353 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 780436"];
1354 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 780437"];
1355 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 780438"];
1356 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 780439"];
1357 [label="param GetBinderFactory(bool ignoreAccessibility) 780440"];
1358 [label="param GetBinderFactory(this) 780441"];
1359 [label="ignoreAccessibility 780442"];
1360 [label="_binderFactories 780443"];
1361 [label="GetSyntaxTreeOrdinal(syntaxTree) 780444"];
1362 [label="param GetSyntaxTreeOrdinal(this) 780445"];
1363 [label="this.ContainsSyntaxTree(tree) 780446"];
1364 [label="param ContainsSyntaxTree(this) 780447"];
1365 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 780448"];
1366 [label="_syntaxAndDeclarations.GetLazyState() 780449"];
1367 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 780450"];
1368 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 780451"];
1369 [label="_syntaxAndDeclarations.GetLazyState() 780452"];
1370 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 780453"];
1371 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 780454"];
1372 [label="BinderFactory? previousFactory; 780455"];
1373 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 780456"];
1374 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 780457"];
1375 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 780458"];
1376 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 780459"];
1377 [label="param AddNewFactory(bool ignoreAccessibility) 780460"];
1378 [label="param AddNewFactory(this) 780461"];
1379 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 780462"];
1380 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 780463"];
1381 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 780464"];
1382 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 780465"];
1383 [label="BinderFactory? previousFactory; 780466"];
1384 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 780467"];
1385 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 780468"];
1386 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 780469"];
1387 [label="Assembly 780470"];
1388 [label="SourceAssembly 780471"];
1389 [label="GetBoundReferenceManager() 780472"];
1390 [label="param GetBoundReferenceManager(this) 780473"];
1391 [label="GetBoundReferenceManager(); 780474"];
1392 [label="return Assembly.Modules[0]; 780475"];
1393 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780476"];
1394 [label="return _referenceManager; 780477"];
1395 [label="GetBoundReferenceManager(); 780478"];
1396 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 780479"];
1397 [label="param IsFeatureEnabled(MessageID feature) 780480"];
1398 [label="compilation.SyntaxTrees 780481"];
1399 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 780482"];
1400 [label="_syntaxAndDeclarations.GetLazyState() 780483"];
1401 [label="param GetLazyState(this) 780484"];
1402 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 780485"];
1403 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 780486"];
1404 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 780487"];
1405 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 780488"];
1406 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 780489"];
1407 [label="GetBoundReferenceManager() 780490"];
1408 [label="GetBoundReferenceManager(); 780491"];
1409 [label="Debug.Assert(result.SpecialType == specialType); 780492"];
1410 [label="param ShouldEmitNullableAttributes(Symbol symbol) 780493"];
1411 [label="param ShouldEmitNullableAttributes(this) 780494"];
1412 [label="RoslynDebug.Assert(symbol is object); 780495"];
1413 [label="RoslynDebug.Assert(symbol is object); 780496"];
1414 [label="Debug.Assert(symbol.IsDefinition); 780497"];
1415 [label="SourceModule 780498"];
1416 [label="get\n            {\n                return Assembly.Modules[0];\n            } 780499"];
1417 [label="Assembly 780500"];
1418 [label="get\n            {\n                return SourceAssembly;\n            } 780501"];
1419 [label="SourceAssembly 780502"];
1420 [label="GetBoundReferenceManager() 780503"];
1421 [label="param GetBoundReferenceManager(this) 780504"];
1422 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780505"];
1423 [label="return _referenceManager; 780506"];
1424 [label="GetBoundReferenceManager(); 780507"];
1425 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 780508"];
1426 [label="return Assembly.Modules[0]; 780509"];
1427 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 780510"];
1428 [label="EmitNullablePublicOnly 780511"];
1429 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 780512"];
1430 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 780513"];
1431 [label="SyntaxTrees 780514"];
1432 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 780515"];
1433 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 780516"];
1434 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 780517"];
1435 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 780518"];
1436 [label="_lazyEmitNullablePublicOnly 780519"];
1437 [label="return _lazyEmitNullablePublicOnly.Value(); 780520"];
1438 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 780521"];
1439 [label="return true; 780522"];
1440 [label="Debug.Assert(symbol.IsDefinition); 780523"];
1441 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780524"];
1442 [label="return _referenceManager; 780525"];
1443 [label="GetBoundReferenceManager(); 780526"];
1444 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 780527"];
1445 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 780528"];
1446 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 780529"];
1447 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 780530"];
1448 [label="_declarationDiagnosticsFrozen = true; 780531"];
1449 [label="_declarationDiagnosticsFrozen 780532"];
1450 [label="_needsGeneratedAttributes_IsFrozen = true; 780533"];
1451 [label="_needsGeneratedAttributes_IsFrozen 780534"];
1452 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 780535"];
1453 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 780536"];
1454 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 780537"];
1455 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 780538"];
1456 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 780539"];
1457 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 780540"];
1458 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 780541"];
1459 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 780542"];
1460 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 780543"];
1461 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 780544"];
1462 [label="param GetClsComplianceDiagnostics(this) 780545"];
1463 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 780546"];
1464 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 780547"];
1465 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 780548"];
1466 [label="var builder = DiagnosticBag.GetInstance(); 780549"];
1467 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 780550"];
1468 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 780551"];
1469 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 780552"];
1470 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 780553"];
1471 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 780554"];
1472 [label="param CheckCompliance(CSharpCompilation compilation) 780555"];
1473 [label="param CheckCompliance(DiagnosticBag diagnostics) 780556"];
1474 [label="param CheckCompliance(CancellationToken cancellationToken) 780557"];
1475 [label="param CheckCompliance(SyntaxTree filterTree = null) 780558"];
1476 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 780559"];
1477 [label="var queue = new ConcurrentQueue<Diagnostic>(); 780560"];
1478 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 780561"];
1479 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 780562"];
1480 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 780563"];
1481 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 780564"];
1482 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 780565"];
1483 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 780566"];
1484 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 780567"];
1485 [label="param ClsComplianceChecker(CSharpCompilation compilation) 780568"];
1486 [label="param ClsComplianceChecker(SyntaxTree filterTree) 780569"];
1487 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 780570"];
1488 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 780571"];
1489 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 780572"];
1490 [label="param ClsComplianceChecker(this) 780573"];
1491 [label="param ClsComplianceChecker(this) 780574"];
1492 [label="_compilation 780575"];
1493 [label="_filterTree 780576"];
1494 [label="_filterSpanWithinTree 780577"];
1495 [label="_diagnostics 780578"];
1496 [label="_declaredOrInheritedCompliance 780579"];
1497 [label="_compilerTasks 780580"];
1498 [label="_compilation 780581"];
1499 [label="_filterTree 780582"];
1500 [label="_filterSpanWithinTree 780583"];
1501 [label="_diagnostics 780584"];
1502 [label="_cancellationToken 780585"];
1503 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 780586"];
1504 [label="_declaredOrInheritedCompliance 780587"];
1505 [label="ConcurrentAnalysis 780588"];
1506 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 780589"];
1507 [label="null 780590"];
1508 [label="_filterTree == null 780591"];
1509 [label="_compilation.Options 780592"];
1510 [label="get\n            {\n                return _options;\n            } 780593"];
1511 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 780594"];
1512 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 780595"];
1513 [label="_compilerTasks = new ConcurrentStack<Task>(); 780596"];
1514 [label="_compilerTasks 780597"];
1515 [label="compilation.Assembly 780598"];
1516 [label="get\n            {\n                return SourceAssembly;\n            } 780599"];
1517 [label="GetBoundReferenceManager() 780600"];
1518 [label="param GetBoundReferenceManager(this) 780601"];
1519 [label="GetBoundReferenceManager(); 780602"];
1520 [label="checker.Visit(compilation.Assembly); 780603"];
1521 [label="checker.Visit(compilation.Assembly); 780604"];
1522 [label="checker.Visit(compilation.Assembly); 780605"];
1523 [label="param VisitAssembly(AssemblySymbol symbol) 780606"];
1524 [label="param VisitAssembly(this) 780607"];
1525 [label="_cancellationToken.ThrowIfCancellationRequested(); 780608"];
1526 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 780609"];
1527 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 780610"];
1528 [label="GetDeclaredOrInheritedCompliance(symbol) 780611"];
1529 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 780612"];
1530 [label="param GetDeclaredOrInheritedCompliance(this) 780613"];
1531 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 780614"];
1532 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 780615"];
1533 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 780616"];
1534 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 780617"];
1535 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 780618"];
1536 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 780619"];
1537 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 780620"];
1538 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 780621"];
1539 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 780622"];
1540 [label="Compliance compliance; 780623"];
1541 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 780624"];
1542 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 780625"];
1543 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 780626"];
1544 [label="Location ignoredLocation; 780627"];
1545 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 780628"];
1546 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 780629"];
1547 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 780630"];
1548 [label="param GetDeclaredCompliance(Symbol symbol) 780631"];
1549 [label="param GetDeclaredCompliance(out Location attributeLocation) 780632"];
1550 [label="param GetDeclaredCompliance(this) 780633"];
1551 [label="attributeLocation = null; 780634"];
1552 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 780635"];
1553 [label="if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                } 780636"];
1554 [label="if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                } 780637"];
1555 [label="return null; 780638"];
1556 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 780639"];
1557 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 780640"];
1558 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 780641"];
1559 [label="compliance = Compliance.ImpliedFalse; 780642"];
1560 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 780643"];
1561 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 780644"];
1562 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 780645"];
1563 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 780646"];
1564 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 780647"];
1565 [label="IsTrue(assemblyCompliance) 780648"];
1566 [label="param IsTrue(Compliance compliance) 780649"];
1567 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 780650"];
1568 [label="return false; 780651"];
1569 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 780652"];
1570 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 780653"];
1571 [label="ModuleSymbol module = symbol.Modules[i]; 780654"];
1572 [label="Location attributeLocation; 780655"];
1573 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 780656"];
1574 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 780657"];
1575 [label="GetDeclaredCompliance(module, out attributeLocation) 780658"];
1576 [label="param GetDeclaredCompliance(Symbol symbol) 780659"];
1577 [label="param GetDeclaredCompliance(out Location attributeLocation) 780660"];
1578 [label="param GetDeclaredCompliance(this) 780661"];
1579 [label="attributeLocation = null; 780662"];
1580 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 780663"];
1581 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 780664"];
1582 [label="i == 0 780665"];
1583 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 780666"];
1584 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 780667"];
1585 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 780668"];
1586 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 780669"];
1587 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 780670"];
1588 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 780671"];
1589 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 780672"];
1590 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 780673"];
1591 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 780674"];
1592 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 780675"];
1593 [label="GetDeclaredOrInheritedCompliance(sourceModule) 780676"];
1594 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 780677"];
1595 [label="param GetDeclaredOrInheritedCompliance(this) 780678"];
1596 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 780679"];
1597 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 780680"];
1598 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 780681"];
1599 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 780682"];
1600 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 780683"];
1601 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 780684"];
1602 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 780685"];
1603 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 780686"];
1604 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 780687"];
1605 [label="Compliance compliance; 780688"];
1606 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 780689"];
1607 [label="Location ignoredLocation; 780690"];
1608 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 780691"];
1609 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 780692"];
1610 [label="param GetDeclaredCompliance(out Location attributeLocation) 780693"];
1611 [label="param GetDeclaredCompliance(this) 780694"];
1612 [label="attributeLocation = null; 780695"];
1613 [label="return null; 780696"];
1614 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 780697"];
1615 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 780698"];
1616 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 780699"];
1617 [label="GetInheritedCompliance(symbol) 780700"];
1618 [label="param GetInheritedCompliance(Symbol symbol) 780701"];
1619 [label="param GetInheritedCompliance(this) 780702"];
1620 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 780703"];
1621 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 780704"];
1622 [label="System.Diagnostics.Debug.Assert((object)containing != null); 780705"];
1623 [label="System.Diagnostics.Debug.Assert((object)containing != null); 780706"];
1624 [label="return GetDeclaredOrInheritedCompliance(containing); 780707"];
1625 [label="GetDeclaredOrInheritedCompliance(containing) 780708"];
1626 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 780709"];
1627 [label="param GetDeclaredOrInheritedCompliance(this) 780710"];
1628 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 780711"];
1629 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 780712"];
1630 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 780713"];
1631 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 780714"];
1632 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 780715"];
1633 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 780716"];
1634 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 780717"];
1635 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 780718"];
1636 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 780719"];
1637 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 780720"];
1638 [label="return compliance; 780721"];
1639 [label="IsTrue(GetInheritedCompliance(symbol)) 780722"];
1640 [label="param IsTrue(Compliance compliance) 780723"];
1641 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 780724"];
1642 [label="return false; 780725"];
1643 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 780726"];
1644 [label="param IsTrue(Compliance compliance) 780727"];
1645 [label="Visit(symbol.GlobalNamespace); 780728"];
1646 [label="Visit(symbol.GlobalNamespace); 780729"];
1647 [label="param VisitNamespace(NamespaceSymbol symbol) 780730"];
1648 [label="param VisitNamespace(this) 780731"];
1649 [label="_cancellationToken.ThrowIfCancellationRequested(); 780732"];
1650 [label="if (DoNotVisit(symbol)) return; 780733"];
1651 [label="DoNotVisit(symbol) 780734"];
1652 [label="param DoNotVisit(Symbol symbol) 780735"];
1653 [label="param DoNotVisit(this) 780736"];
1654 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 780737"];
1655 [label="return false; 780738"];
1656 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 780739"];
1657 [label="GetDeclaredOrInheritedCompliance(symbol) 780740"];
1658 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 780741"];
1659 [label="param GetDeclaredOrInheritedCompliance(this) 780742"];
1660 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 780743"];
1661 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 780744"];
1662 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 780745"];
1663 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 780746"];
1664 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 780747"];
1665 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 780748"];
1666 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 780749"];
1667 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 780750"];
1668 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 780751"];
1669 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 780752"];
1670 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 780753"];
1671 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 780754"];
1672 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 780755"];
1673 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 780756"];
1674 [label="return compliance; 780757"];
1675 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 780758"];
1676 [label="param IsTrue(Compliance compliance) 780759"];
1677 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 780760"];
1678 [label="return false; 780761"];
1679 [label="ConcurrentAnalysis 780762"];
1680 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 780763"];
1681 [label="null 780764"];
1682 [label="_filterTree == null 780765"];
1683 [label="_compilation.Options 780766"];
1684 [label="get\n            {\n                return _options;\n            } 780767"];
1685 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 780768"];
1686 [label="VisitNamespaceMembersAsTasks(symbol); 780769"];
1687 [label="VisitNamespaceMembersAsTasks(symbol) 780770"];
1688 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 780771"];
1689 [label="param VisitNamespaceMembersAsTasks(this) 780772"];
1690 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 780773"];
1691 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 780774"];
1692 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 780775"];
1693 [label="VisitNamespaceMembersAsTasks(symbol); 780776"];
1694 [label="checker.WaitForWorkers() 780777"];
1695 [label="param WaitForWorkers(this) 780778"];
1696 [label="var tasks = _compilerTasks; 780779"];
1697 [label="if (tasks == null)\n            {\n                return;\n            } 780780"];
1698 [label="if (tasks == null)\n            {\n                return;\n            } 780781"];
1699 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 780782"];
1700 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 780783"];
1701 [label="curTask.GetAwaiter().GetResult(); 780784"];
1702 [label="checker.WaitForWorkers(); 780785"];
1703 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 780786"];
1704 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 780787"];
1705 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 780788"];
1706 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 780789"];
1707 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 780790"];
1708 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 780791"];
1709 [label="return _lazyClsComplianceDiagnostics; 780792"];
1710 [label="return result.AsImmutable().Concat(clsDiagnostics); 780793"];
1711 [label="return result.AsImmutable().Concat(clsDiagnostics); 780794"];
1712 [label="return result.AsImmutable().Concat(clsDiagnostics); 780795"];
1713 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 780796"];
1714 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 780797"];
1715 [label="cancellationToken.ThrowIfCancellationRequested(); 780798"];
1716 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 780799"];
1717 [label="var methodBodyDiagnostics = DiagnosticBag.GetInstance(); 780800"];
1718 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 780801"];
1719 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 780802"];
1720 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken) 780803"];
1721 [label="param GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics) 780804"];
1722 [label="param GetDiagnosticsForAllMethodBodies(CancellationToken cancellationToken) 780805"];
1723 [label="param GetDiagnosticsForAllMethodBodies(this) 780806"];
1724 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 780807"];
1725 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 780808"];
1726 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 780809"];
1727 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken); 780810"];
1728 [label="MethodCompiler.CompileMethodBodies(\n                compilation: this,\n                moduleBeingBuiltOpt: null,\n                emittingPdb: false,\n                emitTestCoverageData: false,\n                hasDeclarationErrors: false,\n                diagnostics: diagnostics,\n                filterOpt: null,\n                cancellationToken: cancellationToken) 780811"];
1729 [label="param CompileMethodBodies(CSharpCompilation compilation) 780812"];
1730 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 780813"];
1731 [label="param CompileMethodBodies(bool emittingPdb) 780814"];
1732 [label="param CompileMethodBodies(bool emitTestCoverageData) 780815"];
1733 [label="param CompileMethodBodies(bool hasDeclarationErrors) 780816"];
1734 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 780817"];
1735 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 780818"];
1736 [label="param CompileMethodBodies(CancellationToken cancellationToken) 780819"];
1737 [label="Debug.Assert(compilation != null); 780820"];
1738 [label="Debug.Assert(compilation != null); 780821"];
1739 [label="Debug.Assert(diagnostics != null); 780822"];
1740 [label="Debug.Assert(diagnostics != null); 780823"];
1741 [label="compilation.PreviousSubmission 780824"];
1742 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 780825"];
1743 [label="ScriptCompilationInfo 780826"];
1744 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 780827"];
1745 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 780828"];
1746 [label="MethodSymbol entryPoint = null; 780829"];
1747 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 780830"];
1748 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 780831"];
1749 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 780832"];
1750 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 780833"];
1751 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 780834"];
1752 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 780835"];
1753 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 780836"];
1754 [label="param GetEntryPoint(CSharpCompilation compilation) 780837"];
1755 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 780838"];
1756 [label="param GetEntryPoint(bool hasDeclarationErrors) 780839"];
1757 [label="param GetEntryPoint(DiagnosticBag diagnostics) 780840"];
1758 [label="param GetEntryPoint(CancellationToken cancellationToken) 780841"];
1759 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 780842"];
1760 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 780843"];
1761 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 780844"];
1762 [label="param GetEntryPointAndDiagnostics(this) 780845"];
1763 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 780846"];
1764 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 780847"];
1765 [label="EntryPoint? entryPoint; 780848"];
1766 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 780849"];
1767 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 780850"];
1768 [label="GetBoundReferenceManager() 780851"];
1769 [label="GetBoundReferenceManager(); 780852"];
1770 [label="this.Options 780853"];
1771 [label="return _options; 780854"];
1772 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 780855"];
1773 [label="this.ScriptClass 780856"];
1774 [label="get { return _scriptClass.Value; } 780857"];
1775 [label="return _scriptClass.Value; 780858"];
1776 [label="_scriptClass.Value 780859"];
1777 [label="param BindScriptClass(this) 780860"];
1778 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 780861"];
1779 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 780862"];
1780 [label="get { return this.SourceModule.GetPublicSymbol(); } 780863"];
1781 [label="this.SourceModule 780864"];
1782 [label="get\n            {\n                return Assembly.Modules[0];\n            } 780865"];
1783 [label="GetBoundReferenceManager() 780866"];
1784 [label="param GetBoundReferenceManager(this) 780867"];
1785 [label="GetBoundReferenceManager(); 780868"];
1786 [label="return this.SourceModule.GetPublicSymbol(); 780869"];
1787 [label="get\n            {\n                return this.SyntaxTrees;\n            } 780870"];
1788 [label="this.SyntaxTrees 780871"];
1789 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 780872"];
1790 [label="param GetLazyState(this) 780873"];
1791 [label="return this.SyntaxTrees; 780874"];
1792 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 780875"];
1793 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 780876"];
1794 [label="if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    } 780877"];
1795 [label="null 780878"];
1796 [label="ImmutableArray<Diagnostic>.Empty 780879"];
1797 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 780880"];
1798 [label="param EntryPoint(MethodSymbol? methodSymbol) 780881"];
1799 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 780882"];
1800 [label="param EntryPoint(this) 780883"];
1801 [label="MethodSymbol 780884"];
1802 [label="this.MethodSymbol 780885"];
1803 [label="this.Diagnostics 780886"];
1804 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 780887"];
1805 [label="entryPoint = EntryPoint.None; 780888"];
1806 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 780889"];
1807 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 780890"];
1808 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 780891"];
1809 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 780892"];
1810 [label="return _lazyEntryPoint; 780893"];
1811 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 780894"];
1812 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 780895"];
1813 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 780896"];
1814 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 780897"];
1815 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 780898"];
1816 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 780899"];
1817 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 780900"];
1818 [label="return null; 780901"];
1819 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 780902"];
1820 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 780903"];
1821 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 780904"];
1822 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 780905"];
1823 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 780906"];
1824 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 780907"];
1825 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 780908"];
1826 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 780909"];
1827 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 780910"];
1828 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 780911"];
1829 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 780912"];
1830 [label="param MethodCompiler(CSharpCompilation compilation) 780913"];
1831 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 780914"];
1832 [label="param MethodCompiler(bool emittingPdb) 780915"];
1833 [label="param MethodCompiler(bool emitTestCoverageData) 780916"];
1834 [label="param MethodCompiler(bool hasDeclarationErrors) 780917"];
1835 [label="param MethodCompiler(DiagnosticBag diagnostics) 780918"];
1836 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 780919"];
1837 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 780920"];
1838 [label="param MethodCompiler(CancellationToken cancellationToken) 780921"];
1839 [label="param MethodCompiler(this) 780922"];
1840 [label="param MethodCompiler(this) 780923"];
1841 [label="_compilation 780924"];
1842 [label="_emittingPdb 780925"];
1843 [label="_emitTestCoverageData 780926"];
1844 [label="_diagnostics 780927"];
1845 [label="_hasDeclarationErrors 780928"];
1846 [label="_moduleBeingBuiltOpt 780929"];
1847 [label="_filterOpt 780930"];
1848 [label="_debugDocumentProvider 780931"];
1849 [label="_entryPointOpt 780932"];
1850 [label="_compilerTasks 780933"];
1851 [label="_globalHasErrors 780934"];
1852 [label="Debug.Assert(compilation != null); 780935"];
1853 [label="Debug.Assert(compilation != null); 780936"];
1854 [label="Debug.Assert(diagnostics != null); 780937"];
1855 [label="Debug.Assert(diagnostics != null); 780938"];
1856 [label="_compilation 780939"];
1857 [label="_moduleBeingBuiltOpt 780940"];
1858 [label="_emittingPdb 780941"];
1859 [label="_cancellationToken 780942"];
1860 [label="_diagnostics 780943"];
1861 [label="_filterOpt 780944"];
1862 [label="_entryPointOpt 780945"];
1863 [label="_hasDeclarationErrors 780946"];
1864 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 780947"];
1865 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 780948"];
1866 [label="param SetGlobalErrorIfTrue(bool arg) 780949"];
1867 [label="param SetGlobalErrorIfTrue(this) 780950"];
1868 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 780951"];
1869 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 780952"];
1870 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 780953"];
1871 [label="_emitTestCoverageData 780954"];
1872 [label="compilation.Options 780955"];
1873 [label="get\n            {\n                return _options;\n            } 780956"];
1874 [label="return _options; 780957"];
1875 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 780958"];
1876 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 780959"];
1877 [label="methodCompiler._compilerTasks 780960"];
1878 [label="compilation.SourceModule 780961"];
1879 [label="get\n            {\n                return Assembly.Modules[0];\n            } 780962"];
1880 [label="Assembly 780963"];
1881 [label="get\n            {\n                return SourceAssembly;\n            } 780964"];
1882 [label="SourceAssembly 780965"];
1883 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 780966"];
1884 [label="GetBoundReferenceManager() 780967"];
1885 [label="param GetBoundReferenceManager(this) 780968"];
1886 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 780969"];
1887 [label="return _referenceManager; 780970"];
1888 [label="GetBoundReferenceManager(); 780971"];
1889 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 780972"];
1890 [label="return Assembly.Modules[0]; 780973"];
1891 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 780974"];
1892 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 780975"];
1893 [label="param CompileNamespace(NamespaceSymbol symbol) 780976"];
1894 [label="param CompileNamespace(this) 780977"];
1895 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 780978"];
1896 [label="s.Accept(this, null); 780979"];
1897 [label="s.Accept(this, null); 780980"];
1898 [label="s.Accept(this, null); 780981"];
1899 [label="param VisitNamedType(NamedTypeSymbol symbol) 780982"];
1900 [label="param VisitNamedType(TypeCompilationState arg) 780983"];
1901 [label="param VisitNamedType(this) 780984"];
1902 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 780985"];
1903 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 780986"];
1904 [label="PassesFilter(_filterOpt, symbol) 780987"];
1905 [label="param PassesFilter(Predicate<Symbol> filterOpt) 780988"];
1906 [label="param PassesFilter(Symbol symbol) 780989"];
1907 [label="return (filterOpt == null) || filterOpt(symbol); 780990"];
1908 [label="return (filterOpt == null) || filterOpt(symbol); 780991"];
1909 [label="arg = null; 780992"];
1910 [label="_cancellationToken.ThrowIfCancellationRequested(); 780993"];
1911 [label="_compilation.Options 780994"];
1912 [label="get\n            {\n                return _options;\n            } 780995"];
1913 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 780996"];
1914 [label="Task worker = CompileNamedTypeAsync(symbol); 780997"];
1915 [label="CompileNamedTypeAsync(symbol) 780998"];
1916 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 780999"];
1917 [label="param CompileNamedTypeAsync(this) 781000"];
1918 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 781001"];
1919 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 781002"];
1920 [label="Task worker = CompileNamedTypeAsync(symbol); 781003"];
1921 [label="_compilerTasks.Push(worker); 781004"];
1922 [label="return null; 781005"];
1923 [label="s.Accept(this, null); 781006"];
1924 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 781007"];
1925 [label="methodCompiler.WaitForWorkers() 781008"];
1926 [label="param WaitForWorkers(this) 781009"];
1927 [label="var tasks = _compilerTasks; 781010"];
1928 [label="if (tasks == null)\n            {\n                return;\n            } 781011"];
1929 [label="if (tasks == null)\n            {\n                return;\n            } 781012"];
1930 [label="Task curTask; 781013"];
1931 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 781014"];
1932 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 781015"];
1933 [label="curTask.GetAwaiter().GetResult(); 781016"];
1934 [label="methodCompiler.WaitForWorkers(); 781017"];
1935 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 781018"];
1936 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 781019"];
1937 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 781020"];
1938 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 781021"];
1939 [label="compilation.AdditionalCodegenWarnings 781022"];
1940 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 781023"];
1941 [label="return _additionalCodegenWarnings; 781024"];
1942 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 781025"];
1943 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 781026"];
1944 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 781027"];
1945 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 781028"];
1946 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 781029"];
1947 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 781030"];
1948 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 781031"];
1949 [label="param WarnUnusedFields(CSharpCompilation compilation) 781032"];
1950 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 781033"];
1951 [label="param WarnUnusedFields(CancellationToken cancellationToken) 781034"];
1952 [label="compilation.Assembly 781035"];
1953 [label="get\n            {\n                return SourceAssembly;\n            } 781036"];
1954 [label="SourceAssembly 781037"];
1955 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 781038"];
1956 [label="GetBoundReferenceManager() 781039"];
1957 [label="param GetBoundReferenceManager(this) 781040"];
1958 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 781041"];
1959 [label="return _referenceManager; 781042"];
1960 [label="GetBoundReferenceManager(); 781043"];
1961 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 781044"];
1962 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 781045"];
1963 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 781046"];
1964 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 781047"];
1965 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 781048"];
1966 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 781049"];
1967 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 781050"];
1968 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 781051"];
1969 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 781052"];
1970 [label="new[] { '\\r\\n', '\\r', '\\n' } 781053"];
1971 [label="'\\r\\n' 781054"];
1972 [label="'\\r' 781055"];
1973 [label="'\\n' 781056"];
1974 [label="new[] { '\\r\\n', '\\r', '\\n' } 781057"];
1975 [label="new[] { '\\r\\n', '\\r', '\\n' } 781058"];
1976 [label="new[] { '\\r\\n', '\\r', '\\n' } 781059"];
1977 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 781060"];
1978 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 781061"];
1979 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 781062"];
1980 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 781063"];
1981 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken); 781064"];
1982 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, null, null, diagnostics, cancellationToken) 781065"];
1983 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 781066"];
1984 [label="param WriteDocumentationCommentXml(string? assemblyName) 781067"];
1985 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 781068"];
1986 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 781069"];
1987 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 781070"];
1988 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 781071"];
1989 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 781072"];
1990 [label="StreamWriter writer = null; 781073"];
1991 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 781074"];
1992 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 781075"];
1993 [label="compilation.SourceAssembly 781076"];
1994 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 781077"];
1995 [label="GetBoundReferenceManager() 781078"];
1996 [label="param GetBoundReferenceManager(this) 781079"];
1997 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 781080"];
1998 [label="return _referenceManager; 781081"];
1999 [label="GetBoundReferenceManager(); 781082"];
2000 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 781083"];
2001 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 781084"];
2002 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 781085"];
2003 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 781086"];
2004 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 781087"];
2005 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 781088"];
2006 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 781089"];
2007 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 781090"];
2008 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 781091"];
2009 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 781092"];
2010 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 781093"];
2011 [label="param DocumentationCommentCompiler(string assemblyName) 781094"];
2012 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 781095"];
2013 [label="param DocumentationCommentCompiler(TextWriter writer) 781096"];
2014 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 781097"];
2015 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 781098"];
2016 [label="param DocumentationCommentCompiler(bool processIncludes) 781099"];
2017 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 781100"];
2018 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 781101"];
2019 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 781102"];
2020 [label="param DocumentationCommentCompiler(this) 781103"];
2021 [label="param DocumentationCommentCompiler(this) 781104"];
2022 [label="_assemblyName 781105"];
2023 [label="_compilation 781106"];
2024 [label="_writer 781107"];
2025 [label="_filterTree 781108"];
2026 [label="_filterSpanWithinTree 781109"];
2027 [label="_processIncludes 781110"];
2028 [label="_isForSingleSymbol 781111"];
2029 [label="_diagnostics 781112"];
2030 [label="_lazyComparer 781113"];
2031 [label="_includedFileCache 781114"];
2032 [label="_indentDepth 781115"];
2033 [label="_temporaryStringBuilders 781116"];
2034 [label="_assemblyName 781117"];
2035 [label="_compilation 781118"];
2036 [label="_writer 781119"];
2037 [label="_filterTree 781120"];
2038 [label="_filterSpanWithinTree 781121"];
2039 [label="_processIncludes 781122"];
2040 [label="_isForSingleSymbol 781123"];
2041 [label="_diagnostics 781124"];
2042 [label="_cancellationToken 781125"];
2043 [label="compilation.SourceAssembly 781126"];
2044 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 781127"];
2045 [label="GetBoundReferenceManager() 781128"];
2046 [label="param GetBoundReferenceManager(this) 781129"];
2047 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 781130"];
2048 [label="return _referenceManager; 781131"];
2049 [label="GetBoundReferenceManager(); 781132"];
2050 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 781133"];
2051 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 781134"];
2052 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 781135"];
2053 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 781136"];
2054 [label="param VisitNamespace(NamespaceSymbol symbol) 781137"];
2055 [label="param VisitNamespace(this) 781138"];
2056 [label="_cancellationToken.ThrowIfCancellationRequested(); 781139"];
2057 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 781140"];
2058 [label="Debug.Assert(_assemblyName != null); 781141"];
2059 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 781142"];
2060 [label="WriteLine('<?xml version=\\'1.0\\'?>') 781143"];
2061 [label="param WriteLine(string message) 781144"];
2062 [label="param WriteLine(this) 781145"];
2063 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781146"];
2064 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781147"];
2065 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781148"];
2066 [label="WriteLine('<doc>'); 781149"];
2067 [label="WriteLine('<doc>') 781150"];
2068 [label="param WriteLine(string message) 781151"];
2069 [label="param WriteLine(this) 781152"];
2070 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781153"];
2071 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781154"];
2072 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781155"];
2073 [label="Indent() 781156"];
2074 [label="param Indent(this) 781157"];
2075 [label="_indentDepth 781158"];
2076 [label="Indent(); 781159"];
2077 [label="_compilation.Options 781160"];
2078 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 781161"];
2079 [label="WriteLine('<assembly>'); 781162"];
2080 [label="WriteLine('<assembly>') 781163"];
2081 [label="param WriteLine(string message) 781164"];
2082 [label="param WriteLine(this) 781165"];
2083 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781166"];
2084 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781167"];
2085 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781168"];
2086 [label="Indent() 781169"];
2087 [label="param Indent(this) 781170"];
2088 [label="_indentDepth 781171"];
2089 [label="Indent(); 781172"];
2090 [label="WriteLine('<name>{0}</name>', _assemblyName); 781173"];
2091 [label="WriteLine('<name>{0}</name>', _assemblyName) 781174"];
2092 [label="WriteLine('<name>{0}</name>', _assemblyName) 781175"];
2093 [label="param WriteLine(string format) 781176"];
2094 [label="param WriteLine(params object[] args) 781177"];
2095 [label="param WriteLine(this) 781178"];
2096 [label="WriteLine(string.Format(format, args)); 781179"];
2097 [label="WriteLine(string.Format(format, args)); 781180"];
2098 [label="WriteLine(string.Format(format, args)); 781181"];
2099 [label="WriteLine(string.Format(format, args)) 781182"];
2100 [label="param WriteLine(string message) 781183"];
2101 [label="param WriteLine(this) 781184"];
2102 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781185"];
2103 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781186"];
2104 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781187"];
2105 [label="WriteLine(string.Format(format, args)); 781188"];
2106 [label="Unindent() 781189"];
2107 [label="param Unindent(this) 781190"];
2108 [label="_indentDepth 781191"];
2109 [label="Debug.Assert(_indentDepth >= 0); 781192"];
2110 [label="Debug.Assert(_indentDepth >= 0); 781193"];
2111 [label="Unindent(); 781194"];
2112 [label="WriteLine('</assembly>'); 781195"];
2113 [label="WriteLine('</assembly>') 781196"];
2114 [label="param WriteLine(string message) 781197"];
2115 [label="param WriteLine(this) 781198"];
2116 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781199"];
2117 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781200"];
2118 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781201"];
2119 [label="WriteLine('<members>'); 781202"];
2120 [label="WriteLine('<members>') 781203"];
2121 [label="param WriteLine(string message) 781204"];
2122 [label="param WriteLine(this) 781205"];
2123 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781206"];
2124 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781207"];
2125 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781208"];
2126 [label="Indent() 781209"];
2127 [label="param Indent(this) 781210"];
2128 [label="_indentDepth 781211"];
2129 [label="Indent(); 781212"];
2130 [label="Debug.Assert(!_isForSingleSymbol); 781213"];
2131 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 781214"];
2132 [label="_cancellationToken.ThrowIfCancellationRequested(); 781215"];
2133 [label="s.Accept(this); 781216"];
2134 [label="s.Accept(this); 781217"];
2135 [label="s.Accept(this); 781218"];
2136 [label="param VisitNamedType(NamedTypeSymbol symbol) 781219"];
2137 [label="param VisitNamedType(this) 781220"];
2138 [label="_cancellationToken.ThrowIfCancellationRequested(); 781221"];
2139 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 781222"];
2140 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 781223"];
2141 [label="DefaultVisit(symbol); 781224"];
2142 [label="DefaultVisit(symbol) 781225"];
2143 [label="param DefaultVisit(Symbol symbol) 781226"];
2144 [label="param DefaultVisit(this) 781227"];
2145 [label="_cancellationToken.ThrowIfCancellationRequested(); 781228"];
2146 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 781229"];
2147 [label="ShouldSkip(symbol) 781230"];
2148 [label="param ShouldSkip(Symbol symbol) 781231"];
2149 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 781232"];
2150 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 781233"];
2151 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 781234"];
2152 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 781235"];
2153 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 781236"];
2154 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 781237"];
2155 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 781238"];
2156 [label="DocumentationMode maxDocumentationMode; 781239"];
2157 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 781240"];
2158 [label="docCommentNodes 781241"];
2159 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 781242"];
2160 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 781243"];
2161 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 781244"];
2162 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 781245"];
2163 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 781246"];
2164 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 781247"];
2165 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 781248"];
2166 [label="param TryGetDocumentationCommentNodes(this) 781249"];
2167 [label="maxDocumentationMode = DocumentationMode.None; 781250"];
2168 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 781251"];
2169 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 781252"];
2170 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 781253"];
2171 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 781254"];
2172 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 781255"];
2173 [label="currDocumentationMode > maxDocumentationMode 781256"];
2174 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 781257"];
2175 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 781258"];
2176 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 781259"];
2177 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 781260"];
2178 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 781261"];
2179 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 781262"];
2180 [label="return true; 781263"];
2181 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 781264"];
2182 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 781265"];
2183 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 781266"];
2184 [label="return; 781267"];
2185 [label="DefaultVisit(symbol); 781268"];
2186 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 781269"];
2187 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 781270"];
2188 [label="_cancellationToken.ThrowIfCancellationRequested(); 781271"];
2189 [label="member.Accept(this); 781272"];
2190 [label="member.Accept(this); 781273"];
2191 [label="member.Accept(this); 781274"];
2192 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 781275"];
2193 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 781276"];
2194 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 781277"];
2195 [label="DocumentationMode maxDocumentationMode; 781278"];
2196 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 781279"];
2197 [label="docCommentNodes 781280"];
2198 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 781281"];
2199 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 781282"];
2200 [label="maxDocumentationMode = DocumentationMode.None; 781283"];
2201 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 781284"];
2202 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 781285"];
2203 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 781286"];
2204 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 781287"];
2205 [label="currDocumentationMode > maxDocumentationMode 781288"];
2206 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 781289"];
2207 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 781290"];
2208 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 781291"];
2209 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 781292"];
2210 [label="return true; 781293"];
2211 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 781294"];
2212 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 781295"];
2213 [label="return; 781296"];
2214 [label="return; 781297"];
2215 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 781298"];
2216 [label="Unindent() 781299"];
2217 [label="Debug.Assert(_indentDepth >= 0); 781300"];
2218 [label="Unindent(); 781301"];
2219 [label="WriteLine('</members>'); 781302"];
2220 [label="WriteLine('</members>') 781303"];
2221 [label="param WriteLine(string message) 781304"];
2222 [label="param WriteLine(this) 781305"];
2223 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781306"];
2224 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781307"];
2225 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781308"];
2226 [label="Unindent() 781309"];
2227 [label="_indentDepth 781310"];
2228 [label="Debug.Assert(_indentDepth >= 0); 781311"];
2229 [label="Debug.Assert(_indentDepth >= 0); 781312"];
2230 [label="Unindent(); 781313"];
2231 [label="WriteLine('</doc>'); 781314"];
2232 [label="WriteLine('</doc>') 781315"];
2233 [label="param WriteLine(string message) 781316"];
2234 [label="param WriteLine(this) 781317"];
2235 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781318"];
2236 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781319"];
2237 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 781320"];
2238 [label="Debug.Assert(compiler._indentDepth == 0); 781321"];
2239 [label="Debug.Assert(compiler._indentDepth == 0); 781322"];
2240 [label="writer?.Flush(); 781323"];
2241 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 781324"];
2242 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 781325"];
2243 [label="compilation.SyntaxTrees 781326"];
2244 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 781327"];
2245 [label="_syntaxAndDeclarations.GetLazyState() 781328"];
2246 [label="param GetLazyState(this) 781329"];
2247 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 781330"];
2248 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 781331"];
2249 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 781332"];
2250 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 781333"];
2251 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 781334"];
2252 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 781335"];
2253 [label="param ReportUnprocessed(SyntaxTree tree) 781336"];
2254 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 781337"];
2255 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 781338"];
2256 [label="param ReportUnprocessed(CancellationToken cancellationToken) 781339"];
2257 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 781340"];
2258 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 781341"];
2259 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 781342"];
2260 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken); 781343"];
2261 [label="this.ReportUnusedImports(filterTree: null, diagnostics, cancellationToken) 781344"];
2262 [label="param ReportUnusedImports(SyntaxTree? filterTree) 781345"];
2263 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 781346"];
2264 [label="param ReportUnusedImports(CancellationToken cancellationToken) 781347"];
2265 [label="param ReportUnusedImports(this) 781348"];
2266 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 781349"];
2267 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 781350"];
2268 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 781351"];
2269 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 781352"];
2270 [label="CompleteTrees(filterTree); 781353"];
2271 [label="CompleteTrees(filterTree) 781354"];
2272 [label="param CompleteTrees(SyntaxTree? filterTree) 781355"];
2273 [label="param CompleteTrees(this) 781356"];
2274 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 781357"];
2275 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 781358"];
2276 [label="CompleteTrees(filterTree); 781359"];
2277 [label="GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken); 781360"];
2278 [label="builder.AddRangeAndFree(methodBodyDiagnostics); 781361"];
2279 [label="builder.AddRangeAndFree(methodBodyDiagnostics); 781362"];
2280 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 781363"];
2281 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 781364"];
2282 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 781365"];
2283 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 781366"];
2284 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 781367"];
2285 [label="{ ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 781368"];
2286 [label="s_alinkWarnings = { ErrorCode.WRN_ConflictingMachineAssembly,\n                                                              ErrorCode.WRN_RefCultureMismatch,\n                                                              ErrorCode.WRN_InvalidVersionFormat } 781369"];
2287 [label="param Filter(Diagnostic d) 781370"];
2288 [label="param Filter(int warningLevelOption) 781371"];
2289 [label="param Filter(NullableContextOptions nullableOption) 781372"];
2290 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 781373"];
2291 [label="param Filter(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 781374"];
2292 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 781375"];
2293 [label="param Filter(CancellationToken cancellationToken) 781376"];
2294 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 781377"];
2295 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 781378"];
2296 [label="if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 781379"];
2297 [label="if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 781380"];
2298 [label="ReportDiagnostic reportAction; 781381"];
2299 [label="bool hasPragmaSuppression; 781382"];
2300 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 781383"];
2301 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 781384"];
2302 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 781385"];
2303 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 781386"];
2304 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781387"];
2305 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781388"];
2306 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781389"];
2307 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781390"];
2308 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781391"];
2309 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781392"];
2310 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781393"];
2311 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781394"];
2312 [label="GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression) 781395"];
2313 [label="param GetDiagnosticReport(DiagnosticSeverity severity) 781396"];
2314 [label="param GetDiagnosticReport(bool isEnabledByDefault) 781397"];
2315 [label="param GetDiagnosticReport(string id) 781398"];
2316 [label="param GetDiagnosticReport(int diagnosticWarningLevel) 781399"];
2317 [label="param GetDiagnosticReport(Location location) 781400"];
2318 [label="param GetDiagnosticReport(string category) 781401"];
2319 [label="param GetDiagnosticReport(int warningLevelOption) 781402"];
2320 [label="param GetDiagnosticReport(NullableContextOptions nullableOption) 781403"];
2321 [label="param GetDiagnosticReport(ReportDiagnostic generalDiagnosticOption) 781404"];
2322 [label="param GetDiagnosticReport(IDictionary<string, ReportDiagnostic> specificDiagnosticOptions) 781405"];
2323 [label="param GetDiagnosticReport(SyntaxTreeOptionsProvider? syntaxTreeOptions) 781406"];
2324 [label="param GetDiagnosticReport(CancellationToken cancellationToken) 781407"];
2325 [label="param GetDiagnosticReport(out bool hasPragmaSuppression) 781408"];
2326 [label="hasPragmaSuppression = false; 781409"];
2327 [label="Debug.Assert(location.SourceTree is null || location.SourceTree is CSharpSyntaxTree); 781410"];
2328 [label="var tree = location.SourceTree as CSharpSyntaxTree; 781411"];
2329 [label="var position = location.SourceSpan.Start; 781412"];
2330 [label="bool isNullableFlowAnalysisWarning = ErrorFacts.NullableWarnings.Contains(id); 781413"];
2331 [label="if (isNullableFlowAnalysisWarning)\n            {\n                // LAFHIS\n                Syntax.NullableContextState.State? warningsState = tree is not null ? tree.GetNullableContextState(position).WarningsState : null;\n                var nullableWarningsEnabled = warningsState switch\n                {\n                    Syntax.NullableContextState.State.Enabled => true,\n                    Syntax.NullableContextState.State.Disabled => false,\n                    Syntax.NullableContextState.State.ExplicitlyRestored => nullableOption.WarningsEnabled(),\n                    Syntax.NullableContextState.State.Unknown =>\n                        tree?.IsGeneratedCode(syntaxTreeOptions, cancellationToken) != true && nullableOption.WarningsEnabled(),\n                    null => nullableOption.WarningsEnabled(),\n                    _ => throw ExceptionUtilities.UnexpectedValue(warningsState)\n                };\n\n                if (!nullableWarningsEnabled)\n                {\n                    return ReportDiagnostic.Suppress;\n                }\n            } 781414"];
2332 [label="if (diagnosticWarningLevel > warningLevelOption)  // honor the warning level\n            {\n                return ReportDiagnostic.Suppress;\n            } 781415"];
2333 [label="ReportDiagnostic report; 781416"];
2334 [label="bool isSpecified = false; 781417"];
2335 [label="bool specifiedWarnAsErrorMinus = false; 781418"];
2336 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 781419"];
2337 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 781420"];
2338 [label="if (specificDiagnosticOptions.TryGetValue(id, out report))\n            {\n                // 2. Command line options (/nowarn, /warnaserror)\n                isSpecified = true;\n\n                // 'ReportDiagnostic.Default' is added to SpecificDiagnosticOptions for '/warnaserror-:DiagnosticId',\n                if (report == ReportDiagnostic.Default)\n                {\n                    specifiedWarnAsErrorMinus = true;\n                }\n            } 781421"];
2339 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 781422"];
2340 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 781423"];
2341 [label="if (!isSpecified)\n            {\n                report = isEnabledByDefault ? ReportDiagnostic.Default : ReportDiagnostic.Suppress;\n            } 781424"];
2342 [label="isEnabledByDefault 781425"];
2343 [label="report = isEnabledByDefault ? ReportDiagnostic.Default : ReportDiagnostic.Suppress; 781426"];
2344 [label="if (report == ReportDiagnostic.Suppress)\n            {\n                return ReportDiagnostic.Suppress;\n            } 781427"];
2345 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 781428"];
2346 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 781429"];
2347 [label="var pragmaWarningState = tree?.GetPragmaDirectiveWarningState(id, position) ?? Syntax.PragmaWarningState.Default; 781430"];
2348 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Disabled)\n            {\n                hasPragmaSuppression = true;\n            } 781431"];
2349 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Enabled)\n            {\n                switch (report)\n                {\n                    case ReportDiagnostic.Error:\n                    case ReportDiagnostic.Hidden:\n                    case ReportDiagnostic.Info:\n                    case ReportDiagnostic.Warn:\n                        // No need to adjust the current report state, it already means 'enabled'\n                        return report;\n\n                    case ReportDiagnostic.Suppress:\n                        // Enable the warning\n                        return ReportDiagnostic.Default;\n\n                    case ReportDiagnostic.Default:\n                        if (generalDiagnosticOption == ReportDiagnostic.Error && promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n\n                        return ReportDiagnostic.Default;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(report);\n                }\n            }\n            else if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 781432"];
2350 [label="if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 781433"];
2351 [label="if (report == ReportDiagnostic.Default)\n            {\n                switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                }\n            } 781434"];
2352 [label="switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                } 781435"];
2353 [label="return report; 781436"];
2354 [label="if (hasPragmaSuppression)\n            {\n                d = d.WithIsSuppressed(true);\n            } 781437"];
2355 [label="return d.WithReportDiagnostic(reportAction); 781438"];
2356 [label="return d.WithReportDiagnostic(reportAction); 781439"];
2357 [label="if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 781440"];
2358 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781441"];
2359 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781442"];
2360 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781443"];
2361 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781444"];
2362 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781445"];
2363 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 781446"];
2364 [label="param GetDiagnosticReport(DiagnosticSeverity severity) 781447"];
2365 [label="param GetDiagnosticReport(int diagnosticWarningLevel) 781448"];
2366 [label="param GetDiagnosticReport(string category) 781449"];
2367 [label="param GetDiagnosticReport(int warningLevelOption) 781450"];
2368 [label="param GetDiagnosticReport(NullableContextOptions nullableOption) 781451"];
2369 [label="param GetDiagnosticReport(ReportDiagnostic generalDiagnosticOption) 781452"];
2370 [label="param GetDiagnosticReport(SyntaxTreeOptionsProvider? syntaxTreeOptions) 781453"];
2371 [label="param GetDiagnosticReport(CancellationToken cancellationToken) 781454"];
2372 [label="param GetDiagnosticReport(out bool hasPragmaSuppression) 781455"];
2373 [label="hasPragmaSuppression = false; 781456"];
2374 [label="Debug.Assert(location.SourceTree is null || location.SourceTree is CSharpSyntaxTree); 781457"];
2375 [label="bool isNullableFlowAnalysisWarning = ErrorFacts.NullableWarnings.Contains(id); 781458"];
2376 [label="if (isNullableFlowAnalysisWarning)\n            {\n                // LAFHIS\n                Syntax.NullableContextState.State? warningsState = tree is not null ? tree.GetNullableContextState(position).WarningsState : null;\n                var nullableWarningsEnabled = warningsState switch\n                {\n                    Syntax.NullableContextState.State.Enabled => true,\n                    Syntax.NullableContextState.State.Disabled => false,\n                    Syntax.NullableContextState.State.ExplicitlyRestored => nullableOption.WarningsEnabled(),\n                    Syntax.NullableContextState.State.Unknown =>\n                        tree?.IsGeneratedCode(syntaxTreeOptions, cancellationToken) != true && nullableOption.WarningsEnabled(),\n                    null => nullableOption.WarningsEnabled(),\n                    _ => throw ExceptionUtilities.UnexpectedValue(warningsState)\n                };\n\n                if (!nullableWarningsEnabled)\n                {\n                    return ReportDiagnostic.Suppress;\n                }\n            } 781459"];
2377 [label="if (diagnosticWarningLevel > warningLevelOption)  // honor the warning level\n            {\n                return ReportDiagnostic.Suppress;\n            } 781460"];
2378 [label="bool specifiedWarnAsErrorMinus = false; 781461"];
2379 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 781462"];
2380 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 781463"];
2381 [label="if (report == ReportDiagnostic.Suppress)\n            {\n                return ReportDiagnostic.Suppress;\n            } 781464"];
2382 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Disabled)\n            {\n                hasPragmaSuppression = true;\n            } 781465"];
2383 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Enabled)\n            {\n                switch (report)\n                {\n                    case ReportDiagnostic.Error:\n                    case ReportDiagnostic.Hidden:\n                    case ReportDiagnostic.Info:\n                    case ReportDiagnostic.Warn:\n                        // No need to adjust the current report state, it already means 'enabled'\n                        return report;\n\n                    case ReportDiagnostic.Suppress:\n                        // Enable the warning\n                        return ReportDiagnostic.Default;\n\n                    case ReportDiagnostic.Default:\n                        if (generalDiagnosticOption == ReportDiagnostic.Error && promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n\n                        return ReportDiagnostic.Default;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(report);\n                }\n            }\n            else if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 781466"];
2384 [label="if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 781467"];
2385 [label="if (report == ReportDiagnostic.Default)\n            {\n                switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                }\n            } 781468"];
2386 [label="switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                } 781469"];
2387 [label="if (hasPragmaSuppression)\n            {\n                d = d.WithIsSuppressed(true);\n            } 781470"];
2388 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 781471"];
2389 [label="return diagnostics.ToReadOnlyAndFree(); 781472"];
2390 [label="diagnostics.Verify(expected); 781473"];
2391 [label="diagnostics.Verify(expected); 781474"];
2392 [label="diagnostics.Verify(expected) 781475"];
2393 [label="param Verify(this ImmutableArray<Diagnostic> actual) 781476"];
2394 [label="param Verify(params DiagnosticDescription[] expected) 781477"];
2395 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 781478"];
2396 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 781479"];
2397 [label="Verify((IEnumerable<Diagnostic>)actual, expected) 781480"];
2398 [label="param Verify(this IEnumerable<Diagnostic> actual) 781481"];
2399 [label="param Verify(params DiagnosticDescription[] expected) 781482"];
2400 [label="Verify(actual, expected, errorCodeOnly: false); 781483"];
2401 [label="Verify(actual, expected, errorCodeOnly: false); 781484"];
2402 [label="Verify(actual, expected, errorCodeOnly: false); 781485"];
2403 [label="Verify(actual, expected, errorCodeOnly: false) 781486"];
2404 [label="param Verify(IEnumerable<Diagnostic> actual) 781487"];
2405 [label="param Verify(DiagnosticDescription[] expected) 781488"];
2406 [label="param Verify(bool errorCodeOnly) 781489"];
2407 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 781490"];
2408 [label="if (expected == null)\n            {\n                throw new ArgumentException('Must specify expected errors.', nameof(expected));\n            } 781491"];
2409 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 781492"];
2410 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 781493"];
2411 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 781494"];
2412 [label="var includeDefaultSeverity = expected.Any() && expected.All(e => e.DefaultSeverity != null); 781495"];
2413 [label="=> _defaultSeverityOpt 781496"];
2414 [label="_defaultSeverityOpt 781497"];
2415 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 781498"];
2416 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 781499"];
2417 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 781500"];
2418 [label="var includeEffectiveSeverity = expected.Any() && expected.All(e => e.EffectiveSeverity != null); 781501"];
2419 [label="=> _effectiveSeverityOpt 781502"];
2420 [label="_effectiveSeverityOpt 781503"];
2421 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 781504"];
2422 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 781505"];
2423 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 781506"];
2424 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 781507"];
2425 [label="param DiagnosticDescription(Diagnostic d) 781508"];
2426 [label="param DiagnosticDescription(bool errorCodeOnly) 781509"];
2427 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 781510"];
2428 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 781511"];
2429 [label="param DiagnosticDescription(this) 781512"];
2430 [label="_code 781513"];
2431 [label="_isWarningAsError 781514"];
2432 [label="_isSuppressed 781515"];
2433 [label="_squiggledText 781516"];
2434 [label="_arguments 781517"];
2435 [label="_startPosition 781518"];
2436 [label="_argumentOrderDoesNotMatter 781519"];
2437 [label="_errorCodeType 781520"];
2438 [label="_defaultSeverityOpt 781521"];
2439 [label="_effectiveSeverityOpt 781522"];
2440 [label="_syntaxPredicate 781523"];
2441 [label="_code 781524"];
2442 [label="_isWarningAsError 781525"];
2443 [label="_isSuppressed 781526"];
2444 [label="_location 781527"];
2445 [label="includeDefaultSeverity 781528"];
2446 [label="_defaultSeverityOpt = includeDefaultSeverity ? d.DefaultSeverity : (DiagnosticSeverity?)null; 781529"];
2447 [label="_defaultSeverityOpt 781530"];
2448 [label="includeEffectiveSeverity 781531"];
2449 [label="_effectiveSeverityOpt = includeEffectiveSeverity ? d.Severity : (DiagnosticSeverity?)null; 781532"];
2450 [label="_effectiveSeverityOpt 781533"];
2451 [label="DiagnosticWithInfo dinfo = null; 781534"];
2452 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 781535"];
2453 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 781536"];
2454 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 781537"];
2455 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 781538"];
2456 [label="dinfo = d as DiagnosticWithInfo; 781539"];
2457 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 781540"];
2458 [label="if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                } 781541"];
2459 [label="_errorCodeType 781542"];
2460 [label="_code 781543"];
2461 [label="_ignoreArgumentsWhenComparing 781544"];
2462 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                }\n\n                if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                }\n\n                if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                }\n            } 781545"];
2463 [label="if (_location.IsInSource)\n                {\n                    // we don't just want to do SyntaxNode.GetText(), because getting the text via the SourceTree validates the public API\n                    _squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan);\n                } 781546"];
2464 [label="_squiggledText = _location.SourceTree.GetText().ToString(_location.SourceSpan); 781547"];
2465 [label="_squiggledText 781548"];
2466 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 781549"];
2467 [label="if (dinfo != null)\n                {\n                    _arguments = dinfo.Info.Arguments;\n                }\n                else\n                {\n                    var args = d.Arguments;\n                    if (args == null || args.Count == 0)\n                    {\n                        _arguments = null;\n                    }\n                    else\n                    {\n                        _arguments = d.Arguments.ToArray();\n                    }\n                } 781550"];
2468 [label="_arguments 781551"];
2469 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 781552"];
2470 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 781553"];
2471 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 781554"];
2472 [label="_startPosition = _location.GetMappedLineSpan().StartLinePosition; 781555"];
2473 [label="_startPosition 781556"];
2474 [label="var unmatched = actual.Select(d => new DiagnosticDescription(d, errorCodeOnly, includeDefaultSeverity, includeEffectiveSeverity))\n                                  .ToList(); 781557"];
2475 [label="_code 781558"];
2476 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 781559"];
2477 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 781560"];
2478 [label="foreach (var d in expected)\n            {\n                int index = unmatched.IndexOf(d);\n                if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                }\n            } 781561"];
2479 [label="int index = unmatched.IndexOf(d); 781562"];
2480 [label="int index = unmatched.IndexOf(d); 781563"];
2481 [label="param Equals(object obj) 781564"];
2482 [label="param Equals(this) 781565"];
2483 [label="var d = obj as DiagnosticDescription; 781566"];
2484 [label="if (d == null)\n                return false; 781567"];
2485 [label="if (d == null)\n                return false; 781568"];
2486 [label="if (!_code.Equals(d._code))\n                return false; 781569"];
2487 [label="if (!_code.Equals(d._code))\n                return false; 781570"];
2488 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 781571"];
2489 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 781572"];
2490 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 781573"];
2491 [label="if (_squiggledText != d._squiggledText)\n                    return false; 781574"];
2492 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 781575"];
2493 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 781576"];
2494 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 781577"];
2495 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 781578"];
2496 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 781579"];
2497 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 781580"];
2498 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 781581"];
2499 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 781582"];
2500 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 781583"];
2501 [label="if (_arguments == null)\n            {\n                if (d._arguments != null)\n                    return false;\n            }\n            else // _arguments != null\n            {\n                if (d._arguments == null)\n                    return false;\n\n                // we'll compare the arguments as strings\n                var args1 = GetArgumentsAsStrings();\n                var args2 = d.GetArgumentsAsStrings();\n                if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                }\n            } 781584"];
2502 [label="if (d._arguments == null)\n                    return false; 781585"];
2503 [label="GetArgumentsAsStrings() 781586"];
2504 [label="param GetArgumentsAsStrings(this) 781587"];
2505 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 781588"];
2506 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 781589"];
2507 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 781590"];
2508 [label="_argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                }); 781591"];
2509 [label="_argumentsAsStrings 781592"];
2510 [label="return _argumentsAsStrings; 781593"];
2511 [label="var args1 = GetArgumentsAsStrings(); 781594"];
2512 [label="d.GetArgumentsAsStrings() 781595"];
2513 [label="param GetArgumentsAsStrings(this) 781596"];
2514 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 781597"];
2515 [label="if (_argumentsAsStrings == null)\n            {\n                // We'll use IFormattable here, because it is more explicit than just calling .ToString()\n                // (and is closer to what the compiler actually does when displaying error messages)\n                _argumentsAsStrings = _arguments.Select(o =>\n                {\n                    if (o is DiagnosticInfo embedded)\n                    {\n                        return embedded.GetMessage(EnsureEnglishUICulture.PreferredOrNull);\n                    }\n\n                    return string.Format(EnsureEnglishUICulture.PreferredOrNull, '{0}', o);\n                });\n            } 781598"];
2516 [label="return _argumentsAsStrings; 781599"];
2517 [label="var args2 = d.GetArgumentsAsStrings(); 781600"];
2518 [label="if (_argumentOrderDoesNotMatter || d._argumentOrderDoesNotMatter)\n                {\n                    if (args1.Count() != args2.Count() || !args1.SetEquals(args2))\n                        return false;\n                }\n                else\n                {\n                    if (!args1.SequenceEqual(args2))\n                        return false;\n                } 781601"];
2519 [label="if (!args1.SequenceEqual(args2))\n                        return false; 781602"];
2520 [label="if (!args1.SequenceEqual(args2))\n                        return false; 781603"];
2521 [label="if (!args1.SequenceEqual(args2))\n                        return false; 781604"];
2522 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 781605"];
2523 [label="return true; 781606"];
2524 [label="int index = unmatched.IndexOf(d); 781607"];
2525 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 781608"];
2526 [label="if (index > -1)\n                {\n                    unmatched.RemoveAt(index);\n                }\n                else\n                {\n                    CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n                } 781609"];
2527 [label="unmatched.RemoveAt(index); 781610"];
2528 [label="if (d == null)\n                return false; 781611"];
2529 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 781612"];
2530 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 781613"];
2531 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 781614"];
2532 [label="if (_squiggledText != d._squiggledText)\n                    return false; 781615"];
2533 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 781616"];
2534 [label="if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                } 781617"];
2535 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 781618"];
2536 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 781619"];
2537 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 781620"];
2538 [label="if (d._arguments == null)\n                    return false; 781621"];
2539 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 781622"];
2540 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 781623"];
2541 [label="if (unmatched.Count > 0)\n            {\n                CustomAssert.True(false, DiagnosticDescription.GetAssertText(expected, actual));\n            } 781624"];
2542 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 781625"];
2543 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 781626"];
2544 [label="CustomAssert.True(true, DiagnosticDescription.GetAssertText(expected, actual)); 781627"];
2545 [label="DiagnosticDescription.GetAssertText(expected, actual) 781628"];
2546 [label="param GetAssertText(DiagnosticDescription[] expected) 781629"];
2547 [label="param GetAssertText(IEnumerable<Diagnostic> actual) 781630"];
2548 [label="const int CSharp = 1; 781631"];
2549 [label="const int VisualBasic = 2; 781632"];
2550 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 781633"];
2551 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 781634"];
2552 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 781635"];
2553 [label="actual.Any() && actual.First() is CSDiagnostic 781636"];
2554 [label="var language = actual.Any() && actual.First() is CSDiagnostic ? CSharp : VisualBasic; 781637"];
2555 [label="var includeDiagnosticMessagesAsComments = (language == CSharp); 781638"];
2556 [label="int indentDepth = (language == CSharp) ? 4 : 1; 781639"];
2557 [label="(language == CSharp) 781640"];
2558 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 781641"];
2559 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 781642"];
2560 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 781643"];
2561 [label="var includeDefaultSeverity = expected.Any() && expected.All(d => d.DefaultSeverity != null); 781644"];
2562 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 781645"];
2563 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 781646"];
2564 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 781647"];
2565 [label="var includeEffectiveSeverity = expected.Any() && expected.All(d => d.EffectiveSeverity != null); 781648"];
2566 [label="if (IsSortedOrEmpty(expected))\n            {\n                // If this is a new test (empty expectations) or a test that's already sorted,\n                // we sort the actual diagnostics to minimize diff noise as diagnostics change.\n                actual = Sort(actual);\n            } 781649"];
2567 [label="IsSortedOrEmpty(expected) 781650"];
2568 [label="param IsSortedOrEmpty(DiagnosticDescription[] diagnostics) 781651"];
2569 [label="new LinePositionComparer() 781652"];
2570 [label="param LinePositionComparer(this) 781653"];
2571 [label="Instance = new LinePositionComparer() 781654"];
2572 [label="var comparer = LinePositionComparer.Instance; 781655"];
2573 [label="DiagnosticDescription last = null; 781656"];
2574 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 781657"];
2575 [label="foreach (var diagnostic in diagnostics)\n            {\n                if (diagnostic._startPosition == null)\n                {\n                    return false;\n                }\n                if (last != null && comparer.Compare(last._startPosition, diagnostic._startPosition) > 0)\n                {\n                    return false;\n                }\n                last = diagnostic;\n            } 781658"];
2576 [label="if (diagnostic._startPosition == null)\n                {\n                    return false;\n                } 781659"];
2577 [label="return false; 781660"];
2578 [label="var assertText = new StringBuilder(); 781661"];
2579 [label="assertText.AppendLine(); 781662"];
2580 [label="int i; 781663"];
2581 [label="assertText.AppendLine('Expected:'); 781664"];
2582 [label="assertText.AppendLine('Expected:'); 781665"];
2583 [label="var expectedText = ArrayBuilder<string>.GetInstance(); 781666"];
2584 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 781667"];
2585 [label="foreach (var d in expected)\n            {\n                expectedText.Add(GetDiagnosticDescription(d, indentDepth));\n            } 781668"];
2586 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 781669"];
2587 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 781670"];
2588 [label="GetDiagnosticDescription(d, indentDepth) 781671"];
2589 [label="param GetDiagnosticDescription(DiagnosticDescription d) 781672"];
2590 [label="param GetDiagnosticDescription(int indentDepth) 781673"];
2591 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781674"];
2592 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781675"];
2593 [label="d.ToString() 781676"];
2594 [label="param ToString(this) 781677"];
2595 [label="var sb = new StringBuilder(); 781678"];
2596 [label="sb.Append('Diagnostic('); 781679"];
2597 [label="sb.Append('Diagnostic('); 781680"];
2598 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 781681"];
2599 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 781682"];
2600 [label="sb.Append(_errorCodeType.Name); 781683"];
2601 [label="sb.Append(_errorCodeType.Name); 781684"];
2602 [label="sb.Append('.'); 781685"];
2603 [label="sb.Append('.'); 781686"];
2604 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 781687"];
2605 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 781688"];
2606 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 781689"];
2607 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 781690"];
2608 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 781691"];
2609 [label="sb.Append(', \\''); 781692"];
2610 [label="sb.Append(', \\''); 781693"];
2611 [label="sb.Append(_squiggledText); 781694"];
2612 [label="sb.Append(_squiggledText); 781695"];
2613 [label="sb.Append('''); 781696"];
2614 [label="sb.Append('''); 781697"];
2615 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 781698"];
2616 [label="sb.Append(')'); 781699"];
2617 [label="sb.Append(')'); 781700"];
2618 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 781701"];
2619 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 781702"];
2620 [label="sb.Append('.WithArguments('); 781703"];
2621 [label="sb.Append('.WithArguments('); 781704"];
2622 [label="GetArgumentsAsStrings() 781705"];
2623 [label="var argumentStrings = GetArgumentsAsStrings().GetEnumerator(); 781706"];
2624 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 781707"];
2625 [label="for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                } 781708"];
2626 [label="sb.Append('\\''); 781709"];
2627 [label="sb.Append('\\''); 781710"];
2628 [label="sb.Append(argumentStrings.Current); 781711"];
2629 [label="sb.Append(argumentStrings.Current); 781712"];
2630 [label="sb.Append('\\''); 781713"];
2631 [label="sb.Append('\\''); 781714"];
2632 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 781715"];
2633 [label="sb.Append(', '); 781716"];
2634 [label="sb.Append(', '); 781717"];
2635 [label="sb.Append(')'); 781718"];
2636 [label="sb.Append(')'); 781719"];
2637 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 781720"];
2638 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 781721"];
2639 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 781722"];
2640 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 781723"];
2641 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 781724"];
2642 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 781725"];
2643 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 781726"];
2644 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 781727"];
2645 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 781728"];
2646 [label="return sb.ToString(); 781729"];
2647 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781730"];
2648 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781731"];
2649 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 781732"];
2650 [label="expectedText.Add(GetDiagnosticDescription(d, indentDepth)); 781733"];
2651 [label="param GetDiagnosticDescription(int indentDepth) 781734"];
2652 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781735"];
2653 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781736"];
2654 [label="var sb = new StringBuilder(); 781737"];
2655 [label="sb.Append('Diagnostic('); 781738"];
2656 [label="sb.Append('Diagnostic('); 781739"];
2657 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 781740"];
2658 [label="sb.Append(_errorCodeType.Name); 781741"];
2659 [label="sb.Append(_errorCodeType.Name); 781742"];
2660 [label="sb.Append('.'); 781743"];
2661 [label="sb.Append('.'); 781744"];
2662 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 781745"];
2663 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 781746"];
2664 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 781747"];
2665 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 781748"];
2666 [label="sb.Append(', \\''); 781749"];
2667 [label="sb.Append(', \\''); 781750"];
2668 [label="sb.Append(_squiggledText); 781751"];
2669 [label="sb.Append(_squiggledText); 781752"];
2670 [label="sb.Append('''); 781753"];
2671 [label="sb.Append('''); 781754"];
2672 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 781755"];
2673 [label="sb.Append(')'); 781756"];
2674 [label="sb.Append(')'); 781757"];
2675 [label="sb.Append('.WithArguments('); 781758"];
2676 [label="sb.Append('.WithArguments('); 781759"];
2677 [label="sb.Append('\\''); 781760"];
2678 [label="sb.Append(argumentStrings.Current); 781761"];
2679 [label="sb.Append(argumentStrings.Current); 781762"];
2680 [label="sb.Append('\\''); 781763"];
2681 [label="sb.Append(', '); 781764"];
2682 [label="sb.Append(')'); 781765"];
2683 [label="sb.Append(')'); 781766"];
2684 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 781767"];
2685 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 781768"];
2686 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 781769"];
2687 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 781770"];
2688 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 781771"];
2689 [label="return sb.ToString(); 781772"];
2690 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781773"];
2691 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781774"];
2692 [label="GetCommaSeparatedLines(assertText, expectedText); 781775"];
2693 [label="GetCommaSeparatedLines(assertText, expectedText); 781776"];
2694 [label="GetCommaSeparatedLines(assertText, expectedText) 781777"];
2695 [label="param GetCommaSeparatedLines(StringBuilder sb) 781778"];
2696 [label="param GetCommaSeparatedLines(ArrayBuilder<string> lines) 781779"];
2697 [label="int n = lines.Count; 781780"];
2698 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 781781"];
2699 [label="for (int i = 0; i < n; i++)\n            {\n                sb.Append(lines[i]);\n                if (i < n - 1)\n                {\n                    sb.Append(',');\n                }\n                sb.AppendLine();\n            } 781782"];
2700 [label="sb.Append(lines[i]); 781783"];
2701 [label="sb.Append(lines[i]); 781784"];
2702 [label="if (i < n - 1)\n                {\n                    sb.Append(',');\n                } 781785"];
2703 [label="sb.Append(','); 781786"];
2704 [label="sb.Append(','); 781787"];
2705 [label="sb.AppendLine(); 781788"];
2706 [label="GetCommaSeparatedLines(assertText, expectedText); 781789"];
2707 [label="assertText.AppendLine('Actual:'); 781790"];
2708 [label="assertText.AppendLine('Actual:'); 781791"];
2709 [label="var actualText = ArrayBuilder<string>.GetInstance(); 781792"];
2710 [label="var e = actual.GetEnumerator(); 781793"];
2711 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 781794"];
2712 [label="for (i = 0; e.MoveNext(); i++)\n            {\n                Diagnostic d = e.Current;\n                string message = d.ToString();\n                if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                }\n\n                if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                }\n\n                if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                }\n\n                var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity);\n                var diffDescription = description;\n                var idx = Array.IndexOf(expected, description);\n                if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                }\n                assertText.Append(GetDiagnosticDescription(description, indentDepth));\n                actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth));\n            } 781795"];
2713 [label="Diagnostic d = e.Current; 781796"];
2714 [label="string message = d.ToString(); 781797"];
2715 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 781798"];
2716 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 781799"];
2717 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 781800"];
2718 [label="if (includeDiagnosticMessagesAsComments)\n                {\n                    Indent(assertText, indentDepth);\n                    assertText.Append('// ');\n                    assertText.AppendLine(d.ToString());\n                    var l = d.Location;\n                    if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    }\n                } 781801"];
2719 [label="Indent(assertText, indentDepth); 781802"];
2720 [label="Indent(assertText, indentDepth); 781803"];
2721 [label="Indent(assertText, indentDepth) 781804"];
2722 [label="param Indent(StringBuilder sb) 781805"];
2723 [label="param Indent(int count) 781806"];
2724 [label="sb.Append(' ', 4 * count); 781807"];
2725 [label="sb.Append(' ', 4 * count); 781808"];
2726 [label="sb.Append(' ', 4 * count); 781809"];
2727 [label="Indent(assertText, indentDepth); 781810"];
2728 [label="assertText.Append('// '); 781811"];
2729 [label="assertText.Append('// '); 781812"];
2730 [label="assertText.AppendLine(d.ToString()); 781813"];
2731 [label="assertText.AppendLine(d.ToString()); 781814"];
2732 [label="var l = d.Location; 781815"];
2733 [label="if (l.IsInSource)\n                    {\n                        Indent(assertText, indentDepth);\n                        assertText.Append('// ');\n                        assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString());\n                    } 781816"];
2734 [label="Indent(assertText, indentDepth); 781817"];
2735 [label="Indent(assertText, indentDepth); 781818"];
2736 [label="Indent(assertText, indentDepth) 781819"];
2737 [label="param Indent(StringBuilder sb) 781820"];
2738 [label="param Indent(int count) 781821"];
2739 [label="sb.Append(' ', 4 * count); 781822"];
2740 [label="sb.Append(' ', 4 * count); 781823"];
2741 [label="sb.Append(' ', 4 * count); 781824"];
2742 [label="Indent(assertText, indentDepth); 781825"];
2743 [label="assertText.Append('// '); 781826"];
2744 [label="assertText.Append('// '); 781827"];
2745 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 781828"];
2746 [label="assertText.AppendLine(l.SourceTree.GetText().Lines.GetLineFromPosition(l.SourceSpan.Start).ToString()); 781829"];
2747 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 781830"];
2748 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 781831"];
2749 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 781832"];
2750 [label="var description = new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity); 781833"];
2751 [label="new DiagnosticDescription(d, errorCodeOnly: false, includeDefaultSeverity, includeEffectiveSeverity) 781834"];
2752 [label="param DiagnosticDescription(Diagnostic d) 781835"];
2753 [label="param DiagnosticDescription(bool errorCodeOnly) 781836"];
2754 [label="param DiagnosticDescription(bool includeDefaultSeverity = false) 781837"];
2755 [label="param DiagnosticDescription(bool includeEffectiveSeverity = false) 781838"];
2756 [label="param DiagnosticDescription(this) 781839"];
2757 [label="_code 781840"];
2758 [label="_isWarningAsError 781841"];
2759 [label="_isSuppressed 781842"];
2760 [label="_squiggledText 781843"];
2761 [label="_arguments 781844"];
2762 [label="_startPosition 781845"];
2763 [label="_errorCodeType 781846"];
2764 [label="_defaultSeverityOpt 781847"];
2765 [label="_effectiveSeverityOpt 781848"];
2766 [label="_code 781849"];
2767 [label="_isWarningAsError 781850"];
2768 [label="_isSuppressed 781851"];
2769 [label="_location 781852"];
2770 [label="DiagnosticWithInfo dinfo = null; 781853"];
2771 [label="if (d.Code == 0 || d.Descriptor.CustomTags.Contains(WellKnownDiagnosticTags.CustomObsolete))\n            {\n                _code = d.Id;\n                _errorCodeType = typeof(string);\n            }\n            else\n            {\n                dinfo = d as DiagnosticWithInfo;\n                if (dinfo == null)\n                {\n                    _code = d.Code;\n                    _errorCodeType = typeof(int);\n                }\n                else\n                {\n                    _errorCodeType = dinfo.Info.MessageProvider.ErrorCodeType;\n                    _code = d.Code;\n                }\n            } 781854"];
2772 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 781855"];
2773 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 781856"];
2774 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 781857"];
2775 [label="var diffDescription = description; 781858"];
2776 [label="var idx = Array.IndexOf(expected, description); 781859"];
2777 [label="var idx = Array.IndexOf(expected, description); 781860"];
2778 [label="var idx = Array.IndexOf(expected, description); 781861"];
2779 [label="var idx = Array.IndexOf(expected, description); 781862"];
2780 [label="if (d == null)\n                return false; 781863"];
2781 [label="if (d == null)\n                return false; 781864"];
2782 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 781865"];
2783 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 781866"];
2784 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 781867"];
2785 [label="if (_squiggledText != d._squiggledText)\n                    return false; 781868"];
2786 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 781869"];
2787 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 781870"];
2788 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 781871"];
2789 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 781872"];
2790 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 781873"];
2791 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 781874"];
2792 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 781875"];
2793 [label="if (d._arguments == null)\n                    return false; 781876"];
2794 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 781877"];
2795 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 781878"];
2796 [label="if (idx != -1)\n                {\n                    diffDescription = expected[idx];\n                } 781879"];
2797 [label="diffDescription = expected[idx]; 781880"];
2798 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 781881"];
2799 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 781882"];
2800 [label="GetDiagnosticDescription(description, indentDepth) 781883"];
2801 [label="param GetDiagnosticDescription(DiagnosticDescription d) 781884"];
2802 [label="param GetDiagnosticDescription(int indentDepth) 781885"];
2803 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781886"];
2804 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781887"];
2805 [label="var sb = new StringBuilder(); 781888"];
2806 [label="sb.Append('Diagnostic('); 781889"];
2807 [label="sb.Append('Diagnostic('); 781890"];
2808 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 781891"];
2809 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 781892"];
2810 [label="sb.Append(_errorCodeType.Name); 781893"];
2811 [label="sb.Append(_errorCodeType.Name); 781894"];
2812 [label="sb.Append('.'); 781895"];
2813 [label="sb.Append('.'); 781896"];
2814 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 781897"];
2815 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 781898"];
2816 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 781899"];
2817 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 781900"];
2818 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 781901"];
2819 [label="sb.Append(', \\''); 781902"];
2820 [label="sb.Append(', \\''); 781903"];
2821 [label="sb.Append(_squiggledText); 781904"];
2822 [label="sb.Append(_squiggledText); 781905"];
2823 [label="sb.Append('''); 781906"];
2824 [label="sb.Append('''); 781907"];
2825 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 781908"];
2826 [label="sb.Append(')'); 781909"];
2827 [label="sb.Append(')'); 781910"];
2828 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 781911"];
2829 [label="sb.Append('.WithArguments('); 781912"];
2830 [label="sb.Append('.WithArguments('); 781913"];
2831 [label="sb.Append('\\''); 781914"];
2832 [label="sb.Append('\\''); 781915"];
2833 [label="sb.Append(argumentStrings.Current); 781916"];
2834 [label="sb.Append(argumentStrings.Current); 781917"];
2835 [label="sb.Append('\\''); 781918"];
2836 [label="sb.Append('\\''); 781919"];
2837 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 781920"];
2838 [label="sb.Append(', '); 781921"];
2839 [label="sb.Append(', '); 781922"];
2840 [label="sb.Append(')'); 781923"];
2841 [label="sb.Append(')'); 781924"];
2842 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 781925"];
2843 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 781926"];
2844 [label="sb.Append('.WithLocation('); 781927"];
2845 [label="sb.Append('.WithLocation('); 781928"];
2846 [label="sb.Append(_startPosition.Value.Line + 1); 781929"];
2847 [label="sb.Append(_startPosition.Value.Line + 1); 781930"];
2848 [label="sb.Append(', '); 781931"];
2849 [label="sb.Append(', '); 781932"];
2850 [label="sb.Append(_startPosition.Value.Character + 1); 781933"];
2851 [label="sb.Append(_startPosition.Value.Character + 1); 781934"];
2852 [label="sb.Append(')'); 781935"];
2853 [label="sb.Append(')'); 781936"];
2854 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 781937"];
2855 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 781938"];
2856 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 781939"];
2857 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 781940"];
2858 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 781941"];
2859 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 781942"];
2860 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 781943"];
2861 [label="return sb.ToString(); 781944"];
2862 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781945"];
2863 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781946"];
2864 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 781947"];
2865 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 781948"];
2866 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 781949"];
2867 [label="GetDiagnosticDescription(diffDescription, indentDepth) 781950"];
2868 [label="param GetDiagnosticDescription(DiagnosticDescription d) 781951"];
2869 [label="param GetDiagnosticDescription(int indentDepth) 781952"];
2870 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781953"];
2871 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 781954"];
2872 [label="var sb = new StringBuilder(); 781955"];
2873 [label="sb.Append('Diagnostic('); 781956"];
2874 [label="sb.Append('Diagnostic('); 781957"];
2875 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 781958"];
2876 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 781959"];
2877 [label="sb.Append(_errorCodeType.Name); 781960"];
2878 [label="sb.Append(_errorCodeType.Name); 781961"];
2879 [label="sb.Append('.'); 781962"];
2880 [label="sb.Append('.'); 781963"];
2881 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 781964"];
2882 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 781965"];
2883 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 781966"];
2884 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 781967"];
2885 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 781968"];
2886 [label="sb.Append(', \\''); 781969"];
2887 [label="sb.Append(', \\''); 781970"];
2888 [label="sb.Append(_squiggledText); 781971"];
2889 [label="sb.Append(_squiggledText); 781972"];
2890 [label="sb.Append('''); 781973"];
2891 [label="sb.Append('''); 781974"];
2892 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 781975"];
2893 [label="sb.Append(')'); 781976"];
2894 [label="sb.Append(')'); 781977"];
2895 [label="if (_arguments != null)\n            {\n                sb.Append('.WithArguments(');\n                var argumentStrings = GetArgumentsAsStrings().GetEnumerator();\n                for (int i = 0; argumentStrings.MoveNext(); i++)\n                {\n                    sb.Append('\\'');\n                    sb.Append(argumentStrings.Current);\n                    sb.Append('\\'');\n                    if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    }\n                }\n                sb.Append(')');\n            } 781978"];
2896 [label="sb.Append('.WithArguments('); 781979"];
2897 [label="sb.Append('.WithArguments('); 781980"];
2898 [label="sb.Append('\\''); 781981"];
2899 [label="sb.Append('\\''); 781982"];
2900 [label="sb.Append(argumentStrings.Current); 781983"];
2901 [label="sb.Append(argumentStrings.Current); 781984"];
2902 [label="sb.Append('\\''); 781985"];
2903 [label="sb.Append('\\''); 781986"];
2904 [label="if (i < _arguments.Length - 1)\n                    {\n                        sb.Append(', ');\n                    } 781987"];
2905 [label="sb.Append(', '); 781988"];
2906 [label="sb.Append(', '); 781989"];
2907 [label="sb.Append(')'); 781990"];
2908 [label="sb.Append(')'); 781991"];
2909 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 781992"];
2910 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 781993"];
2911 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 781994"];
2912 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 781995"];
2913 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 781996"];
2914 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 781997"];
2915 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 781998"];
2916 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 781999"];
2917 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 782000"];
2918 [label="return sb.ToString(); 782001"];
2919 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 782002"];
2920 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 782003"];
2921 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 782004"];
2922 [label="if (Regex.Match(message, @'{\\d+}').Success)\n                {\n                    Assert.True(false, 'Diagnostic messages should never contain unsubstituted placeholders.\\n    ' + message);\n                } 782005"];
2923 [label="if (i > 0)\n                {\n                    assertText.AppendLine(',');\n                } 782006"];
2924 [label="assertText.AppendLine(','); 782007"];
2925 [label="assertText.AppendLine(','); 782008"];
2926 [label="Indent(assertText, indentDepth); 782009"];
2927 [label="Indent(assertText, indentDepth); 782010"];
2928 [label="Indent(assertText, indentDepth) 782011"];
2929 [label="param Indent(StringBuilder sb) 782012"];
2930 [label="param Indent(int count) 782013"];
2931 [label="sb.Append(' ', 4 * count); 782014"];
2932 [label="sb.Append(' ', 4 * count); 782015"];
2933 [label="Indent(assertText, indentDepth); 782016"];
2934 [label="assertText.Append('// '); 782017"];
2935 [label="Indent(assertText, indentDepth); 782018"];
2936 [label="Indent(assertText, indentDepth); 782019"];
2937 [label="Indent(assertText, indentDepth) 782020"];
2938 [label="param Indent(StringBuilder sb) 782021"];
2939 [label="param Indent(int count) 782022"];
2940 [label="sb.Append(' ', 4 * count); 782023"];
2941 [label="sb.Append(' ', 4 * count); 782024"];
2942 [label="Indent(assertText, indentDepth); 782025"];
2943 [label="assertText.Append('// '); 782026"];
2944 [label="_code 782027"];
2945 [label="_isWarningAsError 782028"];
2946 [label="_isSuppressed 782029"];
2947 [label="_squiggledText 782030"];
2948 [label="_arguments 782031"];
2949 [label="_startPosition 782032"];
2950 [label="_errorCodeType 782033"];
2951 [label="_defaultSeverityOpt 782034"];
2952 [label="_effectiveSeverityOpt 782035"];
2953 [label="_code 782036"];
2954 [label="DiagnosticWithInfo dinfo = null; 782037"];
2955 [label="if (_arguments != null && _arguments.Length == 0)\n                {\n                    _arguments = null;\n                } 782038"];
2956 [label="var diffDescription = description; 782039"];
2957 [label="if (d == null)\n                return false; 782040"];
2958 [label="if (_isWarningAsError != d._isWarningAsError)\n                return false; 782041"];
2959 [label="if (_isSuppressed != d._isSuppressed)\n                return false; 782042"];
2960 [label="if (!_ignoreArgumentsWhenComparing)\n            {\n                if (_squiggledText != d._squiggledText)\n                    return false;\n            } 782043"];
2961 [label="if (_squiggledText != d._squiggledText)\n                    return false; 782044"];
2962 [label="if (_startPosition != null)\n            {\n                if (d._startPosition != null)\n                {\n                    if (_startPosition.Value != d._startPosition.Value)\n                    {\n                        return false;\n                    }\n                }\n            } 782045"];
2963 [label="if (_syntaxPredicate != null)\n            {\n                if (d._location == null)\n                    return false;\n\n                if (!_syntaxPredicate(d._location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    _showPredicate = true;\n                    return false;\n                }\n\n                _showPredicate = false;\n            } 782046"];
2964 [label="if (d._syntaxPredicate != null)\n            {\n                if (_location == null)\n                    return false;\n\n                if (!d._syntaxPredicate(_location.SourceTree.GetRoot().FindToken(_location.SourceSpan.Start, true).Parent))\n                {\n                    d._showPredicate = true;\n                    return false;\n                }\n\n                d._showPredicate = false;\n            } 782047"];
2965 [label="if (_ignoreArgumentsWhenComparing || d._ignoreArgumentsWhenComparing)\n                return true; 782048"];
2966 [label="if (d._arguments == null)\n                    return false; 782049"];
2967 [label="if (_defaultSeverityOpt != d._defaultSeverityOpt ||\n                _effectiveSeverityOpt != d._effectiveSeverityOpt)\n            {\n                return false;\n            } 782050"];
2968 [label="assertText.Append(GetDiagnosticDescription(description, indentDepth)); 782051"];
2969 [label="param GetDiagnosticDescription(int indentDepth) 782052"];
2970 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 782053"];
2971 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 782054"];
2972 [label="var sb = new StringBuilder(); 782055"];
2973 [label="sb.Append('Diagnostic('); 782056"];
2974 [label="sb.Append('Diagnostic('); 782057"];
2975 [label="if (_errorCodeType == typeof(string))\n            {\n                sb.Append('\\'').Append(_code).Append('\\'');\n            }\n            else\n            {\n                sb.Append(_errorCodeType.Name);\n                sb.Append('.');\n                sb.Append(Enum.GetName(_errorCodeType, _code));\n            } 782058"];
2976 [label="sb.Append(_errorCodeType.Name); 782059"];
2977 [label="sb.Append(_errorCodeType.Name); 782060"];
2978 [label="sb.Append('.'); 782061"];
2979 [label="sb.Append('.'); 782062"];
2980 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 782063"];
2981 [label="sb.Append(Enum.GetName(_errorCodeType, _code)); 782064"];
2982 [label="if (_squiggledText != null)\n            {\n                if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                }\n\n                sb.Append(''');\n            } 782065"];
2983 [label="if (_squiggledText.Contains('\\n') || _squiggledText.Contains('\\\\') || _squiggledText.Contains('\\''))\n                {\n                    sb.Append(', @\\'');\n                    sb.Append(_squiggledText.Replace('\\'', '\\'\\''));\n                }\n                else\n                {\n                    sb.Append(', \\'');\n                    sb.Append(_squiggledText);\n                } 782066"];
2984 [label="sb.Append(', \\''); 782067"];
2985 [label="sb.Append(', \\''); 782068"];
2986 [label="sb.Append(_squiggledText); 782069"];
2987 [label="sb.Append(_squiggledText); 782070"];
2988 [label="sb.Append('''); 782071"];
2989 [label="sb.Append('''); 782072"];
2990 [label="if (_isSuppressed)\n            {\n                sb.Append(', isSuppressed: true');\n            } 782073"];
2991 [label="sb.Append(')'); 782074"];
2992 [label="sb.Append(')'); 782075"];
2993 [label="sb.Append('.WithArguments('); 782076"];
2994 [label="sb.Append('\\''); 782077"];
2995 [label="sb.Append(argumentStrings.Current); 782078"];
2996 [label="sb.Append('\\''); 782079"];
2997 [label="sb.Append(', '); 782080"];
2998 [label="sb.Append(')'); 782081"];
2999 [label="if (_startPosition != null)\n            {\n                sb.Append('.WithLocation(');\n                sb.Append(_startPosition.Value.Line + 1);\n                sb.Append(', ');\n                sb.Append(_startPosition.Value.Character + 1);\n                sb.Append(')');\n            } 782082"];
3000 [label="sb.Append('.WithLocation('); 782083"];
3001 [label="sb.Append('.WithLocation('); 782084"];
3002 [label="sb.Append(_startPosition.Value.Line + 1); 782085"];
3003 [label="sb.Append(_startPosition.Value.Line + 1); 782086"];
3004 [label="sb.Append(', '); 782087"];
3005 [label="sb.Append(', '); 782088"];
3006 [label="sb.Append(_startPosition.Value.Character + 1); 782089"];
3007 [label="sb.Append(_startPosition.Value.Character + 1); 782090"];
3008 [label="sb.Append(')'); 782091"];
3009 [label="sb.Append(')'); 782092"];
3010 [label="if (_isWarningAsError)\n            {\n                sb.Append('.WithWarningAsError(true)');\n            } 782093"];
3011 [label="if (_defaultSeverityOpt != null)\n            {\n                sb.Append($'.WithDefaultSeverity(DiagnosticSeverity.{_defaultSeverityOpt.Value.ToString()})');\n            } 782094"];
3012 [label="if (_effectiveSeverityOpt != null)\n            {\n                sb.Append($'.WithEffectiveSeverity(DiagnosticSeverity.{_effectiveSeverityOpt.Value.ToString()})');\n            } 782095"];
3013 [label="if (_syntaxPredicate != null && _showPredicate)\n            {\n                sb.Append('.WhereSyntax(...)');\n            } 782096"];
3014 [label="return sb.ToString(); 782097"];
3015 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 782098"];
3016 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 782099"];
3017 [label="actualText.Add(GetDiagnosticDescription(diffDescription, indentDepth)); 782100"];
3018 [label="param GetDiagnosticDescription(int indentDepth) 782101"];
3019 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 782102"];
3020 [label="return sb.ToString(); 782103"];
3021 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 782104"];
3022 [label="return new string(' ', 4 * indentDepth) + d.ToString(); 782105"];
3023 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 782106"];
3024 [label="if (i > 0)\n            {\n                assertText.AppendLine();\n            } 782107"];
3025 [label="assertText.AppendLine(); 782108"];
3026 [label="assertText.AppendLine('Diff:'); 782109"];
3027 [label="assertText.AppendLine('Diff:'); 782110"];
3028 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 782111"];
3029 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 782112"];
3030 [label="new[] { '\\r', '\\n' } 782113"];
3031 [label="'\\r' 782114"];
3032 [label="'\\n' 782115"];
3033 [label="new[] { '\\r', '\\n' } 782116"];
3034 [label="new[] { '\\r', '\\n' } 782117"];
3035 [label="s_lineSplitChars = new[] { '\\r', '\\n' } 782118"];
3036 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 782119"];
3037 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 782120"];
3038 [label="DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine) 782121"];
3039 [label="param DiffReport(IEnumerable<T> expected) 782122"];
3040 [label="param DiffReport(IEnumerable<T> actual) 782123"];
3041 [label="param DiffReport(string separator) 782124"];
3042 [label="param DiffReport(IEqualityComparer<T> comparer = null) 782125"];
3043 [label="param DiffReport(Func<T, string> toString = null) 782126"];
3044 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 782127"];
3045 [label="var lcs = (comparer != null) ? new LCS<T>(comparer) : LCS<T>.Default; 782128"];
3046 [label="(comparer != null) 782129"];
3047 [label="EqualityComparer<T>.Default 782130"];
3048 [label="new LCS<T>(EqualityComparer<T>.Default) 782131"];
3049 [label="param LCS(IEqualityComparer<T> comparer) 782132"];
3050 [label="param LCS(this) 782133"];
3051 [label="1 782134"];
3052 [label="DeleteCost = 1 782135"];
3053 [label="1 782136"];
3054 [label="InsertCost = 1 782137"];
3055 [label="2 782138"];
3056 [label="UpdateCost = 2 782139"];
3057 [label="param LongestCommonSubsequence(this) 782140"];
3058 [label="_comparer 782141"];
3059 [label="_comparer 782142"];
3060 [label="Default = new LCS<T>(EqualityComparer<T>.Default) 782143"];
3061 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 782144"];
3062 [label="toString = toString ?? new Func<T, string>(obj => obj.ToString()); 782145"];
3063 [label="IList<T> expectedList = expected as IList<T> ?? new List<T>(expected); 782146"];
3064 [label="IList<T> actualList = actual as IList<T> ?? new List<T>(actual); 782147"];
3065 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 782148"];
3066 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 782149"];
3067 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 782150"];
3068 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 782151"];
3069 [label="lcs.CalculateDiff(expectedList, actualList, toString) 782152"];
3070 [label="param CalculateDiff(IList<T> sequenceA) 782153"];
3071 [label="param CalculateDiff(IList<T> sequenceB) 782154"];
3072 [label="param CalculateDiff(Func<T, string> toString) 782155"];
3073 [label="param CalculateDiff(this) 782156"];
3074 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 782157"];
3075 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 782158"];
3076 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 782159"];
3077 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 782160"];
3078 [label="GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count) 782161"];
3079 [label="param GetEdits(TSequence sequenceA) 782162"];
3080 [label="param GetEdits(int lengthA) 782163"];
3081 [label="param GetEdits(TSequence sequenceB) 782164"];
3082 [label="param GetEdits(int lengthB) 782165"];
3083 [label="param GetEdits(this) 782166"];
3084 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 782167"];
3085 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 782168"];
3086 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 782169"];
3087 [label="int[,] d = ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB); 782170"];
3088 [label="ComputeCostMatrix(sequenceA, lengthA, sequenceB, lengthB) 782171"];
3089 [label="param ComputeCostMatrix(TSequence sequenceA) 782172"];
3090 [label="param ComputeCostMatrix(int lengthA) 782173"];
3091 [label="param ComputeCostMatrix(TSequence sequenceB) 782174"];
3092 [label="param ComputeCostMatrix(int lengthB) 782175"];
3093 [label="param ComputeCostMatrix(this) 782176"];
3094 [label="var la = lengthA + 1; 782177"];
3095 [label="var la = lengthA + 1; 782178"];
3096 [label="var lb = lengthB + 1; 782179"];
3097 [label="var lb = lengthB + 1; 782180"];
3098 [label="var d = new int[la, lb]; 782181"];
3099 [label="d[0, 0] = 0; 782182"];
3100 [label="d[0, 0] 782183"];
3101 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 782184"];
3102 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    d[i, 0] = d[i - 1, 0] + DeleteCost;\n                } 782185"];
3103 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 782186"];
3104 [label="d[i, 0] = d[i - 1, 0] + DeleteCost; 782187"];
3105 [label="d[i, 0] 782188"];
3106 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 782189"];
3107 [label="for (int j = 1; j <= lengthB; j++)\n                {\n                    d[0, j] = d[0, j - 1] + InsertCost;\n                } 782190"];
3108 [label="d[0, j] = d[0, j - 1] + InsertCost; 782191"];
3109 [label="d[0, j] = d[0, j - 1] + InsertCost; 782192"];
3110 [label="d[0, j] 782193"];
3111 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 782194"];
3112 [label="for (int i = 1; i <= lengthA; i++)\n                {\n                    for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    }\n                } 782195"];
3113 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 782196"];
3114 [label="for (int j = 1; j <= lengthB; j++)\n                    {\n                        int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost);\n                        int m2 = d[i - 1, j] + DeleteCost;\n                        int m3 = d[i, j - 1] + InsertCost;\n                        d[i, j] = Math.Min(Math.Min(m1, m2), m3);\n                    } 782197"];
3115 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 782198"];
3116 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 782199"];
3117 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 782200"];
3118 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 782201"];
3119 [label="ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) 782202"];
3120 [label="param ItemsEqual(IList<T> sequenceA) 782203"];
3121 [label="param ItemsEqual(int indexA) 782204"];
3122 [label="param ItemsEqual(IList<T> sequenceB) 782205"];
3123 [label="param ItemsEqual(int indexB) 782206"];
3124 [label="param ItemsEqual(this) 782207"];
3125 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 782208"];
3126 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 782209"];
3127 [label="return _comparer.Equals(sequenceA[indexA], sequenceB[indexB]); 782210"];
3128 [label="int m1 = d[i - 1, j - 1] + (ItemsEqual(sequenceA, i - 1, sequenceB, j - 1) ? 0 : UpdateCost); 782211"];
3129 [label="int m2 = d[i - 1, j] + DeleteCost; 782212"];
3130 [label="int m2 = d[i - 1, j] + DeleteCost; 782213"];
3131 [label="int m3 = d[i, j - 1] + InsertCost; 782214"];
3132 [label="int m3 = d[i, j - 1] + InsertCost; 782215"];
3133 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 782216"];
3134 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 782217"];
3135 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 782218"];
3136 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 782219"];
3137 [label="d[i, j] = Math.Min(Math.Min(m1, m2), m3); 782220"];
3138 [label="d[i, j] 782221"];
3139 [label="return d; 782222"];
3140 [label="int i = lengthA; 782223"];
3141 [label="int j = lengthB; 782224"];
3142 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 782225"];
3143 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 782226"];
3144 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 782227"];
3145 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 782228"];
3146 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 782229"];
3147 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 782230"];
3148 [label="if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 782231"];
3149 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 782232"];
3150 [label="if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    } 782233"];
3151 [label="i--; 782234"];
3152 [label="j--; 782235"];
3153 [label="yield return new Edit(EditKind.Update, i, j); 782236"];
3154 [label="yield return new Edit(EditKind.Update, i, j); 782237"];
3155 [label="yield return new Edit(EditKind.Update, i, j); 782238"];
3156 [label="yield return new Edit(EditKind.Update, i, j); 782239"];
3157 [label="new Edit(EditKind.Update, i, j) 782240"];
3158 [label="param Edit(EditKind kind) 782241"];
3159 [label="param Edit(int indexA) 782242"];
3160 [label="param Edit(int indexB) 782243"];
3161 [label="param Edit(this) 782244"];
3162 [label="this.Kind 782245"];
3163 [label="this.IndexA 782246"];
3164 [label="this.IndexB 782247"];
3165 [label="while (i != 0 && j != 0)\n                {\n                    if (d[i, j] == d[i - 1, j] + DeleteCost)\n                    {\n                        i--;\n                        yield return new Edit(EditKind.Delete, i, -1);\n                    }\n                    else if (d[i, j] == d[i, j - 1] + InsertCost)\n                    {\n                        j--;\n                        yield return new Edit(EditKind.Insert, -1, j);\n                    }\n                    else\n                    {\n                        i--;\n                        j--;\n                        yield return new Edit(EditKind.Update, i, j);\n                    }\n                } 782248"];
3166 [label="yield return new Edit(EditKind.Update, i, j); 782249"];
3167 [label="yield return new Edit(EditKind.Update, i, j); 782250"];
3168 [label="new Edit(EditKind.Update, i, j) 782251"];
3169 [label="param Edit(EditKind kind) 782252"];
3170 [label="param Edit(int indexA) 782253"];
3171 [label="param Edit(int indexB) 782254"];
3172 [label="param Edit(this) 782255"];
3173 [label="this.Kind 782256"];
3174 [label="this.IndexA 782257"];
3175 [label="this.IndexB 782258"];
3176 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 782259"];
3177 [label="while (i > 0)\n                {\n                    i--;\n                    yield return new Edit(EditKind.Delete, i, -1);\n                } 782260"];
3178 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 782261"];
3179 [label="while (j > 0)\n                {\n                    j--;\n                    yield return new Edit(EditKind.Insert, -1, j);\n                } 782262"];
3180 [label="foreach (var edit in GetEdits(sequenceA, sequenceA.Count, sequenceB, sequenceB.Count).Reverse())\n                {\n                    switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    }\n                } 782263"];
3181 [label="switch (edit.Kind)\n                    {\n                        case EditKind.Delete:\n                            yield return '--> ' + toString(sequenceA[edit.IndexA]);\n                            break;\n\n                        case EditKind.Insert:\n                            yield return '++> ' + toString(sequenceB[edit.IndexB]);\n                            break;\n\n                        case EditKind.Update:\n                            yield return '    ' + toString(sequenceB[edit.IndexB]);\n                            break;\n                    } 782264"];
3182 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 782265"];
3183 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 782266"];
3184 [label="yield return '    ' + toString(sequenceB[edit.IndexB]); 782267"];
3185 [label="return string.Join(separator, lcs.CalculateDiff(expectedList, actualList, toString)); 782268"];
3186 [label="assertText.Append(DiffUtil.DiffReport(expectedText, actualText, separator: Environment.NewLine)); 782269"];
3187 [label="actualText.Free(); 782270"];
3188 [label="expectedText.Free(); 782271"];
3189 [label="return assertText.ToString(); 782272"];
3190 [label="Verify((IEnumerable<Diagnostic>)actual, expected); 782273"];
3191 [label="diagnostics.Verify(expected); 782274"];
3192 [label="VerifyAssemblyIds(c, diagnostics); 782275"];
3193 [label="VerifyAssemblyIds(c, diagnostics); 782276"];
3194 [label="VerifyAssemblyIds(c, diagnostics) 782277"];
3195 [label="param VerifyAssemblyIds(TCompilation c) 782278"];
3196 [label="param VerifyAssemblyIds(ImmutableArray<Diagnostic> diagnostics) 782279"];
3197 [label="foreach (var diagnostic in diagnostics)\n            {\n                // If this is a diagnostic about a missing assembly, make sure that we can get back\n                // an AssemblyIdentity when we query the compiler.  If it's not a diagnostic about\n                // a missing assembly, make sure we get no results back.\n                if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                }\n            } 782280"];
3198 [label="if (c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code))\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.False(assemblyIds.IsEmpty);\n\n                    var diagnosticMessage = diagnostic.GetMessage();\n                    foreach (var id in assemblyIds)\n                    {\n                        CustomAssert.Contains(id.GetDisplayName(), diagnosticMessage);\n                    }\n                }\n                else\n                {\n                    var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic);\n                    CustomAssert.True(assemblyIds.IsEmpty);\n                } 782281"];
3199 [label="c.IsUnreferencedAssemblyIdentityDiagnosticCode(diagnostic.Code) 782282"];
3200 [label="param IsUnreferencedAssemblyIdentityDiagnosticCode(int code) 782283"];
3201 [label="=> code == (int)ErrorCode.ERR_NoTypeDef 782284"];
3202 [label="code == (int)ErrorCode.ERR_NoTypeDef 782285"];
3203 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 782286"];
3204 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 782287"];
3205 [label="var assemblyIds = c.GetUnreferencedAssemblyIdentities(diagnostic); 782288"];
3206 [label="=> code == (int)ErrorCode.ERR_NoTypeDef 782289"];
3207 [label="CustomAssert.True(assemblyIds.IsEmpty); 782290"];
3208 [label="=> code == (int)ErrorCode.ERR_NoTypeDef 782291"];
3209 [label="=> code == (int)ErrorCode.ERR_NoTypeDef 782292"];
3210 [label="CustomAssert.True(assemblyIds.IsEmpty); 782293"];
3211 [label="VerifyAssemblyIds(c, diagnostics); 782294"];
3212 [label="return c; 782295"];
3213 [label="CompileAndVerify(compilation, symbolValidator: module =>\n            {\n                ValidateDeclSecurity(module, new DeclSecurityEntry\n                {\n                    ActionFlags = DeclarativeSecurityAction.RequestMinimum,\n                    ParentKind = SymbolKind.Assembly,\n                    PermissionSet =\n                        '.' + // always start with a dot\n                        '\\u0002' + // number of attributes (small enough to fit in 1 byte)\n\n                        '\\u0080\\u0084' + // length of UTF-8 string (0x80 indicates a 2-byte encoding)\n                        'System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' + // attr type name\n                        '\\u001a' + // number of bytes in the encoding of the named arguments\n                        '\\u0001' + // number of named arguments\n                        '\\u0054' + // property (vs field)\n                        '\\u0002' + // type bool\n                        '\\u0015' + // length of UTF-8 string (small enough to fit in 1 byte)\n                        'RemotingConfiguration' + // property name\n                        '\\u0001' + // argument value (true)\n\n                        '\\u0080\\u0084' + // length of UTF-8 string (0x80 indicates a 2-byte encoding)\n                        'System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' + // attr type name\n                        '\\u0012' + // number of bytes in the encoding of the named arguments\n                        '\\u0001' + // number of named arguments\n                        '\\u0054' + // property (vs field)\n                        '\\u0002' + // type bool\n                        '\\u000d' + // length of UTF-8 string (small enough to fit in 1 byte)\n                        'UnmanagedCode' + // property name\n                        '\\u0001', // argument value (true)\n                });\n            }); 782296"];
3214 [label="CompileAndVerify(compilation, symbolValidator: module =>\n            {\n                ValidateDeclSecurity(module, new DeclSecurityEntry\n                {\n                    ActionFlags = DeclarativeSecurityAction.RequestMinimum,\n                    ParentKind = SymbolKind.Assembly,\n                    PermissionSet =\n                        '.' + // always start with a dot\n                        '\\u0002' + // number of attributes (small enough to fit in 1 byte)\n\n                        '\\u0080\\u0084' + // length of UTF-8 string (0x80 indicates a 2-byte encoding)\n                        'System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' + // attr type name\n                        '\\u001a' + // number of bytes in the encoding of the named arguments\n                        '\\u0001' + // number of named arguments\n                        '\\u0054' + // property (vs field)\n                        '\\u0002' + // type bool\n                        '\\u0015' + // length of UTF-8 string (small enough to fit in 1 byte)\n                        'RemotingConfiguration' + // property name\n                        '\\u0001' + // argument value (true)\n\n                        '\\u0080\\u0084' + // length of UTF-8 string (0x80 indicates a 2-byte encoding)\n                        'System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' + // attr type name\n                        '\\u0012' + // number of bytes in the encoding of the named arguments\n                        '\\u0001' + // number of named arguments\n                        '\\u0054' + // property (vs field)\n                        '\\u0002' + // type bool\n                        '\\u000d' + // length of UTF-8 string (small enough to fit in 1 byte)\n                        'UnmanagedCode' + // property name\n                        '\\u0001', // argument value (true)\n                });\n            }); 782297"];
3215 [label="CompileAndVerify(compilation, symbolValidator: module =>\n            {\n                ValidateDeclSecurity(module, new DeclSecurityEntry\n                {\n                    ActionFlags = DeclarativeSecurityAction.RequestMinimum,\n                    ParentKind = SymbolKind.Assembly,\n                    PermissionSet =\n                        '.' + // always start with a dot\n                        '\\u0002' + // number of attributes (small enough to fit in 1 byte)\n\n                        '\\u0080\\u0084' + // length of UTF-8 string (0x80 indicates a 2-byte encoding)\n                        'System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' + // attr type name\n                        '\\u001a' + // number of bytes in the encoding of the named arguments\n                        '\\u0001' + // number of named arguments\n                        '\\u0054' + // property (vs field)\n                        '\\u0002' + // type bool\n                        '\\u0015' + // length of UTF-8 string (small enough to fit in 1 byte)\n                        'RemotingConfiguration' + // property name\n                        '\\u0001' + // argument value (true)\n\n                        '\\u0080\\u0084' + // length of UTF-8 string (0x80 indicates a 2-byte encoding)\n                        'System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' + // attr type name\n                        '\\u0012' + // number of bytes in the encoding of the named arguments\n                        '\\u0001' + // number of named arguments\n                        '\\u0054' + // property (vs field)\n                        '\\u0002' + // type bool\n                        '\\u000d' + // length of UTF-8 string (small enough to fit in 1 byte)\n                        'UnmanagedCode' + // property name\n                        '\\u0001', // argument value (true)\n                });\n            }); 782298"];
3216 [label="CompileAndVerify(compilation, symbolValidator: module =>\n            {\n                ValidateDeclSecurity(module, new DeclSecurityEntry\n                {\n                    ActionFlags = DeclarativeSecurityAction.RequestMinimum,\n                    ParentKind = SymbolKind.Assembly,\n                    PermissionSet =\n                        '.' + // always start with a dot\n                        '\\u0002' + // number of attributes (small enough to fit in 1 byte)\n\n                        '\\u0080\\u0084' + // length of UTF-8 string (0x80 indicates a 2-byte encoding)\n                        'System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' + // attr type name\n                        '\\u001a' + // number of bytes in the encoding of the named arguments\n                        '\\u0001' + // number of named arguments\n                        '\\u0054' + // property (vs field)\n                        '\\u0002' + // type bool\n                        '\\u0015' + // length of UTF-8 string (small enough to fit in 1 byte)\n                        'RemotingConfiguration' + // property name\n                        '\\u0001' + // argument value (true)\n\n                        '\\u0080\\u0084' + // length of UTF-8 string (0x80 indicates a 2-byte encoding)\n                        'System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' + // attr type name\n                        '\\u0012' + // number of bytes in the encoding of the named arguments\n                        '\\u0001' + // number of named arguments\n                        '\\u0054' + // property (vs field)\n                        '\\u0002' + // type bool\n                        '\\u000d' + // length of UTF-8 string (small enough to fit in 1 byte)\n                        'UnmanagedCode' + // property name\n                        '\\u0001', // argument value (true)\n                });\n            }) 782299"];
3217 [label="param CompileAndVerify(Compilation compilation) 782300"];
3218 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 782301"];
3219 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 782302"];
3220 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 782303"];
3221 [label="param CompileAndVerify(Action<PEAssembly> validator = null) 782304"];
3222 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 782305"];
3223 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 782306"];
3224 [label="param CompileAndVerify(string expectedOutput = null) 782307"];
3225 [label="param CompileAndVerify(int? expectedReturnCode = null) 782308"];
3226 [label="param CompileAndVerify(string[] args = null) 782309"];
3227 [label="param CompileAndVerify(EmitOptions emitOptions = null) 782310"];
3228 [label="param CompileAndVerify(Verification verify = Verification.Passes) 782311"];
3229 [label="param CompileAndVerify(this) 782312"];
3230 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782313"];
3231 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782314"];
3232 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782315"];
3233 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782316"];
3234 [label="translate(sourceSymbolValidator) 782317"];
3235 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 782318"];
3236 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 782319"];
3237 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 782320"];
3238 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 782321"];
3239 [label="return null; 782322"];
3240 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782323"];
3241 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782324"];
3242 [label="translate(symbolValidator) 782325"];
3243 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 782326"];
3244 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 782327"];
3245 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 782328"];
3246 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 782329"];
3247 [label="return (m) => action(m.GetSymbol<ModuleSymbol>()); 782330"];
3248 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782331"];
3249 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782332"];
3250 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782333"];
3251 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782334"];
3252 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782335"];
3253 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 782336"];
3254 [label="CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 782337"];
3255 [label="param CompileAndVerifyCommon(Compilation compilation) 782338"];
3256 [label="param CompileAndVerifyCommon(IEnumerable<ResourceDescription> manifestResources = null) 782339"];
3257 [label="param CompileAndVerifyCommon(IEnumerable<ModuleData> dependencies = null) 782340"];
3258 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> sourceSymbolValidator = null) 782341"];
3259 [label="param CompileAndVerifyCommon(Action<PEAssembly> assemblyValidator = null) 782342"];
3260 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> symbolValidator = null) 782343"];
3261 [label="param CompileAndVerifyCommon(SignatureDescription[] expectedSignatures = null) 782344"];
3262 [label="param CompileAndVerifyCommon(string expectedOutput = null) 782345"];
3263 [label="param CompileAndVerifyCommon(int? expectedReturnCode = null) 782346"];
3264 [label="param CompileAndVerifyCommon(string[] args = null) 782347"];
3265 [label="param CompileAndVerifyCommon(EmitOptions emitOptions = null) 782348"];
3266 [label="param CompileAndVerifyCommon(Verification verify = Verification.Passes) 782349"];
3267 [label="param CompileAndVerifyCommon(this) 782350"];
3268 [label="CustomAssert.NotNull(compilation); 782351"];
3269 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 782352"];
3270 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 782353"];
3271 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 782354"];
3272 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 782355"];
3273 [label="CompilationVerifier result = null; 782356"];
3274 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782357"];
3275 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782358"];
3276 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782359"];
3277 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782360"];
3278 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782361"];
3279 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782362"];
3280 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782363"];
3281 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782364"];
3282 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782365"];
3283 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782366"];
3284 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782367"];
3285 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 782368"];
3286 [label="Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify) 782369"];
3287 [label="param Emit(Compilation compilation) 782370"];
3288 [label="param Emit(IEnumerable<ModuleData> dependencies) 782371"];
3289 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 782372"];
3290 [label="param Emit(SignatureDescription[] expectedSignatures) 782373"];
3291 [label="param Emit(string expectedOutput) 782374"];
3292 [label="param Emit(int? expectedReturnCode) 782375"];
3293 [label="param Emit(string[] args) 782376"];
3294 [label="param Emit(Action<PEAssembly> assemblyValidator) 782377"];
3295 [label="param Emit(Action<IModuleSymbol> symbolValidator) 782378"];
3296 [label="param Emit(EmitOptions emitOptions) 782379"];
3297 [label="param Emit(Verification verify) 782380"];
3298 [label="param Emit(this) 782381"];
3299 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 782382"];
3300 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 782383"];
3301 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 782384"];
3302 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 782385"];
3303 [label="new CompilationVerifier(compilation, VisualizeRealIL, dependencies) 782386"];
3304 [label="param CompilationVerifier(Compilation compilation) 782387"];
3305 [label="param CompilationVerifier(Func<IModuleSymbol, CompilationTestData.MethodData, IReadOnlyDictionary<int, string>, bool, string> visualizeRealIL = null) 782388"];
3306 [label="param CompilationVerifier(IEnumerable<ModuleData> dependencies = null) 782389"];
3307 [label="param CompilationVerifier(this) 782390"];
3308 [label="_compilation 782391"];
3309 [label="_testData 782392"];
3310 [label="_dependencies 782393"];
3311 [label="_lazyModuleSymbol 782394"];
3312 [label="_allModuleData 782395"];
3313 [label="_visualizeRealIL 782396"];
3314 [label="_compilation 782397"];
3315 [label="_dependencies 782398"];
3316 [label="_visualizeRealIL 782399"];
3317 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 782400"];
3318 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 782401"];
3319 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 782402"];
3320 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 782403"];
3321 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 782404"];
3322 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 782405"];
3323 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 782406"];
3324 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures) 782407"];
3325 [label="param Emit(string expectedOutput) 782408"];
3326 [label="param Emit(int? expectedReturnCode) 782409"];
3327 [label="param Emit(string[] args) 782410"];
3328 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 782411"];
3329 [label="param Emit(EmitOptions emitOptions) 782412"];
3330 [label="param Emit(Verification peVerify) 782413"];
3331 [label="param Emit(SignatureDescription[] expectedSignatures) 782414"];
3332 [label="param Emit(this) 782415"];
3333 [label="RuntimeUtilities.GetRuntimeEnvironmentFactory 782416"];
3334 [label="new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 782417"];
3335 [label="s_lazyFactory = new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 782418"];
3336 [label="using var testEnvironment = RuntimeEnvironmentFactory.Create(_dependencies); 782419"];
3337 [label="RuntimeEnvironmentFactory.Create(_dependencies) 782420"];
3338 [label="param Create(IEnumerable<ModuleData> additionalDependencies = null) 782421"];
3339 [label="return s_lazyFactory.Value.Create(additionalDependencies); 782422"];
3340 [label="return s_lazyFactory.Value.Create(additionalDependencies); 782423"];
3341 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 782424"];
3342 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 782425"];
3343 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 782426"];
3344 [label="Emit(testEnvironment, manifestResources, emitOptions) 782427"];
3345 [label="param Emit(IRuntimeEnvironment testEnvironment) 782428"];
3346 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 782429"];
3347 [label="param Emit(EmitOptions emitOptions) 782430"];
3348 [label="param Emit(this) 782431"];
3349 [label="s_dumpCount 782432"];
3350 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 782433"];
3351 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 782434"];
3352 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 782435"];
3353 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 782436"];
3354 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 782437"];
3355 [label="param EmitCompilation(Compilation compilation) 782438"];
3356 [label="param EmitCompilation(IEnumerable<ResourceDescription> manifestResources) 782439"];
3357 [label="param EmitCompilation(List<ModuleData> dependencies) 782440"];
3358 [label="param EmitCompilation(DiagnosticBag diagnostics) 782441"];
3359 [label="param EmitCompilation(CompilationTestData testData) 782442"];
3360 [label="param EmitCompilation(EmitOptions emitOptions) 782443"];
3361 [label="var referencedCompilations = FindReferencedCompilations(compilation); 782444"];
3362 [label="FindReferencedCompilations(compilation) 782445"];
3363 [label="param FindReferencedCompilations(Compilation original) 782446"];
3364 [label="var list = new List<Compilation>(); 782447"];
3365 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 782448"];
3366 [label="FindDirectReferencedCompilations(original) 782449"];
3367 [label="param FindDirectReferencedCompilations(Compilation compilation) 782450"];
3368 [label="var list = new List<Compilation>(); 782451"];
3369 [label="var previousCompilation = compilation.ScriptCompilationInfo?.PreviousScriptCompilation; 782452"];
3370 [label="compilation.ScriptCompilationInfo 782453"];
3371 [label="=> ScriptCompilationInfo 782454"];
3372 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 782455"];
3373 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 782456"];
3374 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 782457"];
3375 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 782458"];
3376 [label="get\n            {\n                return GetBoundReferenceManager().DirectiveReferences;\n            } 782459"];
3377 [label="GetBoundReferenceManager() 782460"];
3378 [label="param GetBoundReferenceManager(this) 782461"];
3379 [label="return GetBoundReferenceManager().DirectiveReferences; 782462"];
3380 [label="return list; 782463"];
3381 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 782464"];
3382 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 782465"];
3383 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 782466"];
3384 [label="return list; 782467"];
3385 [label="var referencedCompilations = FindReferencedCompilations(compilation); 782468"];
3386 [label="var fullNameSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase); 782469"];
3387 [label="foreach (var referencedCompilation in referencedCompilations)\n            {\n                var emitData = EmitCompilationCore(referencedCompilation, null, diagnostics, null, emitOptions);\n                if (emitData.HasValue)\n                {\n                    var moduleData = new ModuleData(referencedCompilation.Assembly.Identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    emitData.Value.Assembly,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    fullNameSet.Add(moduleData.Id.FullName);\n                    dependencies.Add(moduleData);\n                }\n            } 782470"];
3388 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 782471"];
3389 [label="new[] { compilation } 782472"];
3390 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 782473"];
3391 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 782474"];
3392 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 782475"];
3393 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 782476"];
3394 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 782477"];
3395 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 782478"];
3396 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics) 782479"];
3397 [label="param EmitReferences(Compilation compilation) 782480"];
3398 [label="param EmitReferences(HashSet<string> fullNameSet) 782481"];
3399 [label="param EmitReferences(List<ModuleData> dependencies) 782482"];
3400 [label="param EmitReferences(DiagnosticBag diagnostics) 782483"];
3401 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 782484"];
3402 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 782485"];
3403 [label="var peRef = (PortableExecutableReference)metadataReference; 782486"];
3404 [label="var metadata = peRef.GetMetadataNoCopy(); 782487"];
3405 [label="var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly; 782488"];
3406 [label="isManifestModule 782489"];
3407 [label="var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null; 782490"];
3408 [label="((AssemblyMetadata)metadata).GetAssembly().Identity 782491"];
3409 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 782492"];
3410 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 782493"];
3411 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 782494"];
3412 [label="foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                } 782495"];
3413 [label="EnumerateModules(metadata) 782496"];
3414 [label="param EnumerateModules(Metadata metadata) 782497"];
3415 [label="return (metadata.Kind == MetadataImageKind.Assembly) ? ((AssemblyMetadata)metadata).GetModules().AsEnumerable() : SpecializedCollections.SingletonEnumerable((ModuleMetadata)metadata); 782498"];
3416 [label="(metadata.Kind == MetadataImageKind.Assembly) 782499"];
3417 [label="ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent(); 782500"];
3418 [label="ModuleData moduleData; 782501"];
3419 [label="if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    } 782502"];
3420 [label="fullNameSet.Add(identity.GetDisplayName()); 782503"];
3421 [label="fullNameSet.Add(identity.GetDisplayName()); 782504"];
3422 [label="fullNameSet.Add(identity.GetDisplayName()); 782505"];
3423 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 782506"];
3424 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 782507"];
3425 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 782508"];
3426 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 782509"];
3427 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 782510"];
3428 [label="dependencies.Add(moduleData); 782511"];
3429 [label="dependencies.Add(moduleData); 782512"];
3430 [label="isManifestModule = false; 782513"];
3431 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 782514"];
3432 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 782515"];
3433 [label="ModuleData moduleData; 782516"];
3434 [label="isManifestModule = false; 782517"];
3435 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 782518"];
3436 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 782519"];
3437 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 782520"];
3438 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 782521"];
3439 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 782522"];
3440 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 782523"];
3441 [label="EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions) 782524"];
3442 [label="param EmitCompilationCore(Compilation compilation) 782525"];
3443 [label="param EmitCompilationCore(IEnumerable<ResourceDescription> manifestResources) 782526"];
3444 [label="param EmitCompilationCore(DiagnosticBag diagnostics) 782527"];
3445 [label="param EmitCompilationCore(CompilationTestData testData) 782528"];
3446 [label="param EmitCompilationCore(EmitOptions emitOptions) 782529"];
3447 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 782530"];
3448 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 782531"];
3449 [label="emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 782532"];
3450 [label="using var executableStream = new MemoryStream(); 782533"];
3451 [label="var pdb = default(ImmutableArray<byte>); 782534"];
3452 [label="var assembly = default(ImmutableArray<byte>); 782535"];
3453 [label="var pdbStream = (emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) ? new MemoryStream() : null; 782536"];
3454 [label="(emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) 782537"];
3455 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 782538"];
3456 [label="compilation.SyntaxTrees 782539"];
3457 [label="get\n            {\n                return this.SyntaxTrees;\n            } 782540"];
3458 [label="this.SyntaxTrees 782541"];
3459 [label="_syntaxAndDeclarations.GetLazyState() 782542"];
3460 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 782543"];
3461 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 782544"];
3462 [label="EmitResult result; 782545"];
3463 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 782546"];
3464 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 782547"];
3465 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 782548"];
3466 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 782549"];
3467 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 782550"];
3468 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 782551"];
3469 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 782552"];
3470 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 782553"];
3471 [label="param CreateModuleBuilder(EmitOptions emitOptions) 782554"];
3472 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 782555"];
3473 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 782556"];
3474 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 782557"];
3475 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 782558"];
3476 [label="param CreateModuleBuilder(CompilationTestData? testData) 782559"];
3477 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 782560"];
3478 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 782561"];
3479 [label="param CreateModuleBuilder(this) 782562"];
3480 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 782563"];
3481 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 782564"];
3482 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 782565"];
3483 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 782566"];
3484 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 782567"];
3485 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 782568"];
3486 [label="param GetRuntimeMetadataVersion(this) 782569"];
3487 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 782570"];
3488 [label="GetRuntimeMetadataVersion(emitOptions) 782571"];
3489 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 782572"];
3490 [label="param GetRuntimeMetadataVersion(this) 782573"];
3491 [label="Assembly 782574"];
3492 [label="get\n            {\n                return SourceAssembly;\n            } 782575"];
3493 [label="SourceAssembly 782576"];
3494 [label="GetBoundReferenceManager() 782577"];
3495 [label="param GetBoundReferenceManager(this) 782578"];
3496 [label="GetBoundReferenceManager(); 782579"];
3497 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 782580"];
3498 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 782581"];
3499 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 782582"];
3500 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 782583"];
3501 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 782584"];
3502 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 782585"];
3503 [label="return runtimeMDVersion; 782586"];
3504 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 782587"];
3505 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 782588"];
3506 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 782589"];
3507 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 782590"];
3508 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 782591"];
3509 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 782592"];
3510 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 782593"];
3511 [label="get { return SourceAssembly.IsDelaySigned; } 782594"];
3512 [label="SourceAssembly 782595"];
3513 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 782596"];
3514 [label="GetBoundReferenceManager() 782597"];
3515 [label="param GetBoundReferenceManager(this) 782598"];
3516 [label="GetBoundReferenceManager(); 782599"];
3517 [label="return SourceAssembly.IsDelaySigned; 782600"];
3518 [label="SourceAssembly.IsDelaySigned 782601"];
3519 [label="get\n            {\n                return _options;\n            } 782602"];
3520 [label="get { return SourceAssembly.StrongNameKeys; } 782603"];
3521 [label="SourceAssembly 782604"];
3522 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 782605"];
3523 [label="GetBoundReferenceManager() 782606"];
3524 [label="param GetBoundReferenceManager(this) 782607"];
3525 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 782608"];
3526 [label="return _referenceManager; 782609"];
3527 [label="GetBoundReferenceManager(); 782610"];
3528 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 782611"];
3529 [label="return SourceAssembly.StrongNameKeys; 782612"];
3530 [label="=> 0x30 782613"];
3531 [label="0x30 782614"];
3532 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 782615"];
3533 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 782616"];
3534 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 782617"];
3535 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 782618"];
3536 [label="PEModuleBuilder moduleBeingBuilt; 782619"];
3537 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 782620"];
3538 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 782621"];
3539 [label="_options.OutputKind.IsValid() 782622"];
3540 [label="_options.OutputKind 782623"];
3541 [label="SourceAssembly 782624"];
3542 [label="GetBoundReferenceManager() 782625"];
3543 [label="GetBoundReferenceManager(); 782626"];
3544 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 782627"];
3545 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 782628"];
3546 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 782629"];
3547 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 782630"];
3548 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 782631"];
3549 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 782632"];
3550 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 782633"];
3551 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 782634"];
3552 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 782635"];
3553 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 782636"];
3554 [label="param PEAssemblyBuilder(OutputKind outputKind) 782637"];
3555 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 782638"];
3556 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 782639"];
3557 [label="param PEAssemblyBuilder(this) 782640"];
3558 [label="sourceAssembly 782641"];
3559 [label="emitOptions 782642"];
3560 [label="outputKind 782643"];
3561 [label="serializationProperties 782644"];
3562 [label="manifestResources 782645"];
3563 [label="ImmutableArray<NamedTypeSymbol>.Empty 782646"];
3564 [label="param PEAssemblyBuilder(this) 782647"];
3565 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 782648"];
3566 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 782649"];
3567 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 782650"];
3568 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 782651"];
3569 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 782652"];
3570 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 782653"];
3571 [label="param PEAssemblyBuilderBase(this) 782654"];
3572 [label="0 782655"];
3573 [label="sourceAssembly.Modules[0] 782656"];
3574 [label="emitOptions 782657"];
3575 [label="outputKind 782658"];
3576 [label="serializationProperties 782659"];
3577 [label="manifestResources 782660"];
3578 [label="param PEAssemblyBuilderBase(this) 782661"];
3579 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 782662"];
3580 [label="param PEModuleBuilder(EmitOptions emitOptions) 782663"];
3581 [label="param PEModuleBuilder(OutputKind outputKind) 782664"];
3582 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 782665"];
3583 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 782666"];
3584 [label="param PEModuleBuilder(this) 782667"];
3585 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 782668"];
3586 [label="sourceModule 782669"];
3587 [label="serializationProperties 782670"];
3588 [label="manifestResources 782671"];
3589 [label="outputKind 782672"];
3590 [label="emitOptions 782673"];
3591 [label="new ModuleCompilationState() 782674"];
3592 [label="param ModuleCompilationState(this) 782675"];
3593 [label="param PEModuleBuilder(this) 782676"];
3594 [label="param PEModuleBuilder(this) 782677"];
3595 [label="get\n            {\n                return true;\n            } 782678"];
3596 [label="return true; 782679"];
3597 [label="param PEModuleBuilder(this) 782680"];
3598 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 782681"];
3599 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 782682"];
3600 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 782683"];
3601 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 782684"];
3602 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 782685"];
3603 [label="new ConcurrentSet<TypeSymbol>() 782686"];
3604 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 782687"];
3605 [label="_embeddedTypesManagerOpt 782688"];
3606 [label="_metadataName 782689"];
3607 [label="_fixedImplementationTypes 782690"];
3608 [label="_needsGeneratedAttributes 782691"];
3609 [label="_needsGeneratedAttributes_IsFrozen 782692"];
3610 [label="var specifiedName = sourceModule.MetadataName; 782693"];
3611 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 782694"];
3612 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 782695"];
3613 [label="_metadataName 782696"];
3614 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 782697"];
3615 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 782698"];
3616 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 782699"];
3617 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 782700"];
3618 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 782701"];
3619 [label="_sourceAssembly 782702"];
3620 [label="_lazyEmbeddedAttribute 782703"];
3621 [label="_lazyIsReadOnlyAttribute 782704"];
3622 [label="_lazyIsByRefLikeAttribute 782705"];
3623 [label="_lazyIsUnmanagedAttribute 782706"];
3624 [label="_lazyNullableAttribute 782707"];
3625 [label="_lazyNullableContextAttribute 782708"];
3626 [label="_lazyNullablePublicOnlyAttribute 782709"];
3627 [label="_lazyNativeIntegerAttribute 782710"];
3628 [label="_metadataName 782711"];
3629 [label="Debug.Assert(sourceAssembly is object); 782712"];
3630 [label="_sourceAssembly 782713"];
3631 [label="_additionalTypes = additionalTypes.NullToEmpty(); 782714"];
3632 [label="_additionalTypes 782715"];
3633 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 782716"];
3634 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 782717"];
3635 [label="(emitOptions.OutputNameOverride == null) 782718"];
3636 [label="sourceAssembly.MetadataName 782719"];
3637 [label="_metadataName 782720"];
3638 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 782721"];
3639 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 782722"];
3640 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 782723"];
3641 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 782724"];
3642 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 782725"];
3643 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 782726"];
3644 [label="moduleBeingBuilt.SourceLinkStreamOpt 782727"];
3645 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 782728"];
3646 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 782729"];
3647 [label="moduleBeingBuilt.EmbeddedTexts 782730"];
3648 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 782731"];
3649 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 782732"];
3650 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 782733"];
3651 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 782734"];
3652 [label="testData.Module 782735"];
3653 [label="return moduleBeingBuilt; 782736"];
3654 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 782737"];
3655 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 782738"];
3656 [label="param CompileMethods(bool emittingPdb) 782739"];
3657 [label="param CompileMethods(bool emitMetadataOnly) 782740"];
3658 [label="param CompileMethods(bool emitTestCoverageData) 782741"];
3659 [label="param CompileMethods(DiagnosticBag diagnostics) 782742"];
3660 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 782743"];
3661 [label="param CompileMethods(CancellationToken cancellationToken) 782744"];
3662 [label="param CompileMethods(this) 782745"];
3663 [label="PooledHashSet<int>? excludeDiagnostics = null; 782746"];
3664 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 782747"];
3665 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 782748"];
3666 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 782749"];
3667 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 782750"];
3668 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 782751"];
3669 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 782752"];
3670 [label="param GetDiagnostics(CompilationStage stage) 782753"];
3671 [label="param GetDiagnostics(bool includeEarlierStages) 782754"];
3672 [label="param GetDiagnostics(CancellationToken cancellationToken) 782755"];
3673 [label="param GetDiagnostics(this) 782756"];
3674 [label="var diagnostics = DiagnosticBag.GetInstance(); 782757"];
3675 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 782758"];
3676 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 782759"];
3677 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 782760"];
3678 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 782761"];
3679 [label="param GetDiagnostics(CompilationStage stage) 782762"];
3680 [label="param GetDiagnostics(bool includeEarlierStages) 782763"];
3681 [label="param GetDiagnostics(DiagnosticBag diagnostics) 782764"];
3682 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 782765"];
3683 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 782766"];
3684 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 782767"];
3685 [label="this.SyntaxTrees 782768"];
3686 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 782769"];
3687 [label="_syntaxAndDeclarations.GetLazyState() 782770"];
3688 [label="param GetLazyState(this) 782771"];
3689 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 782772"];
3690 [label="this.Options 782773"];
3691 [label="get\n            {\n                return _options;\n            } 782774"];
3692 [label="return _options; 782775"];
3693 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 782776"];
3694 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 782777"];
3695 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 782778"];
3696 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 782779"];
3697 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 782780"];
3698 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 782781"];
3699 [label="CheckAssemblyName(builder); 782782"];
3700 [label="CheckAssemblyName(builder); 782783"];
3701 [label="Options 782784"];
3702 [label="get\n            {\n                return _options;\n            } 782785"];
3703 [label="Options 782786"];
3704 [label="get\n            {\n                return _options;\n            } 782787"];
3705 [label="return _options; 782788"];
3706 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 782789"];
3707 [label="GetBoundReferenceManager() 782790"];
3708 [label="param GetBoundReferenceManager(this) 782791"];
3709 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 782792"];
3710 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 782793"];
3711 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 782794"];
3712 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 782795"];
3713 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 782796"];
3714 [label="param GetSourceDeclarationDiagnostics(this) 782797"];
3715 [label="GlobalImports 782798"];
3716 [label="SourceLocation? location = null; 782799"];
3717 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 782800"];
3718 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 782801"];
3719 [label="Assembly 782802"];
3720 [label="SourceAssembly 782803"];
3721 [label="GetBoundReferenceManager() 782804"];
3722 [label="param GetBoundReferenceManager(this) 782805"];
3723 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 782806"];
3724 [label="return _referenceManager; 782807"];
3725 [label="GetBoundReferenceManager(); 782808"];
3726 [label="Assembly.ForceComplete(location, cancellationToken); 782809"];
3727 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 782810"];
3728 [label="_declarationDiagnosticsFrozen = true; 782811"];
3729 [label="_needsGeneratedAttributes_IsFrozen = true; 782812"];
3730 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 782813"];
3731 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 782814"];
3732 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 782815"];
3733 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 782816"];
3734 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 782817"];
3735 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 782818"];
3736 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 782819"];
3737 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 782820"];
3738 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 782821"];
3739 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 782822"];
3740 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 782823"];
3741 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 782824"];
3742 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 782825"];
3743 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 782826"];
3744 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 782827"];
3745 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 782828"];
3746 [label="param Filter(int warningLevelOption) 782829"];
3747 [label="param Filter(NullableContextOptions nullableOption) 782830"];
3748 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 782831"];
3749 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 782832"];
3750 [label="param Filter(CancellationToken cancellationToken) 782833"];
3751 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 782834"];
3752 [label="if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 782835"];
3753 [label="ReportDiagnostic reportAction; 782836"];
3754 [label="bool hasPragmaSuppression; 782837"];
3755 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 782838"];
3756 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 782839"];
3757 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 782840"];
3758 [label="param GetDiagnosticReport(DiagnosticSeverity severity) 782841"];
3759 [label="param GetDiagnosticReport(int diagnosticWarningLevel) 782842"];
3760 [label="param GetDiagnosticReport(string category) 782843"];
3761 [label="param GetDiagnosticReport(int warningLevelOption) 782844"];
3762 [label="param GetDiagnosticReport(NullableContextOptions nullableOption) 782845"];
3763 [label="param GetDiagnosticReport(ReportDiagnostic generalDiagnosticOption) 782846"];
3764 [label="param GetDiagnosticReport(SyntaxTreeOptionsProvider? syntaxTreeOptions) 782847"];
3765 [label="param GetDiagnosticReport(CancellationToken cancellationToken) 782848"];
3766 [label="param GetDiagnosticReport(out bool hasPragmaSuppression) 782849"];
3767 [label="hasPragmaSuppression = false; 782850"];
3768 [label="Debug.Assert(location.SourceTree is null || location.SourceTree is CSharpSyntaxTree); 782851"];
3769 [label="bool isNullableFlowAnalysisWarning = ErrorFacts.NullableWarnings.Contains(id); 782852"];
3770 [label="if (isNullableFlowAnalysisWarning)\n            {\n                // LAFHIS\n                Syntax.NullableContextState.State? warningsState = tree is not null ? tree.GetNullableContextState(position).WarningsState : null;\n                var nullableWarningsEnabled = warningsState switch\n                {\n                    Syntax.NullableContextState.State.Enabled => true,\n                    Syntax.NullableContextState.State.Disabled => false,\n                    Syntax.NullableContextState.State.ExplicitlyRestored => nullableOption.WarningsEnabled(),\n                    Syntax.NullableContextState.State.Unknown =>\n                        tree?.IsGeneratedCode(syntaxTreeOptions, cancellationToken) != true && nullableOption.WarningsEnabled(),\n                    null => nullableOption.WarningsEnabled(),\n                    _ => throw ExceptionUtilities.UnexpectedValue(warningsState)\n                };\n\n                if (!nullableWarningsEnabled)\n                {\n                    return ReportDiagnostic.Suppress;\n                }\n            } 782853"];
3771 [label="if (diagnosticWarningLevel > warningLevelOption)  // honor the warning level\n            {\n                return ReportDiagnostic.Suppress;\n            } 782854"];
3772 [label="bool specifiedWarnAsErrorMinus = false; 782855"];
3773 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 782856"];
3774 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 782857"];
3775 [label="if (report == ReportDiagnostic.Suppress)\n            {\n                return ReportDiagnostic.Suppress;\n            } 782858"];
3776 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Disabled)\n            {\n                hasPragmaSuppression = true;\n            } 782859"];
3777 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Enabled)\n            {\n                switch (report)\n                {\n                    case ReportDiagnostic.Error:\n                    case ReportDiagnostic.Hidden:\n                    case ReportDiagnostic.Info:\n                    case ReportDiagnostic.Warn:\n                        // No need to adjust the current report state, it already means 'enabled'\n                        return report;\n\n                    case ReportDiagnostic.Suppress:\n                        // Enable the warning\n                        return ReportDiagnostic.Default;\n\n                    case ReportDiagnostic.Default:\n                        if (generalDiagnosticOption == ReportDiagnostic.Error && promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n\n                        return ReportDiagnostic.Default;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(report);\n                }\n            }\n            else if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 782860"];
3778 [label="if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 782861"];
3779 [label="if (report == ReportDiagnostic.Default)\n            {\n                switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                }\n            } 782862"];
3780 [label="switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                } 782863"];
3781 [label="if (hasPragmaSuppression)\n            {\n                d = d.WithIsSuppressed(true);\n            } 782864"];
3782 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 782865"];
3783 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 782866"];
3784 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 782867"];
3785 [label="param Filter(int warningLevelOption) 782868"];
3786 [label="param Filter(NullableContextOptions nullableOption) 782869"];
3787 [label="param Filter(ReportDiagnostic generalDiagnosticOption) 782870"];
3788 [label="param Filter(SyntaxTreeOptionsProvider? syntaxTreeOptions) 782871"];
3789 [label="param Filter(CancellationToken cancellationToken) 782872"];
3790 [label="if (d == null)\n            {\n                return d;\n            }\n            else if (d.IsNotConfigurable())\n            {\n                if (d.IsEnabledByDefault)\n                {\n                    // Enabled NotConfigurable should always be reported as it is.\n                    return d;\n                }\n                else\n                {\n                    // Disabled NotConfigurable should never be reported.\n                    return null;\n                }\n            }\n            else if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 782873"];
3791 [label="if (d.Severity == InternalDiagnosticSeverity.Void)\n            {\n                return null;\n            } 782874"];
3792 [label="ReportDiagnostic reportAction; 782875"];
3793 [label="bool hasPragmaSuppression; 782876"];
3794 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 782877"];
3795 [label="if (s_alinkWarnings.Contains((ErrorCode)d.Code) &&\n                specificDiagnosticOptions.Keys.Contains(CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn)))\n            {\n                reportAction = GetDiagnosticReport(ErrorFacts.GetSeverity(ErrorCode.WRN_ALinkWarn),\n                    d.IsEnabledByDefault,\n                    CSharp.MessageProvider.Instance.GetIdForErrorCode((int)ErrorCode.WRN_ALinkWarn),\n                    ErrorFacts.GetWarningLevel(ErrorCode.WRN_ALinkWarn),\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            }\n            else\n            {\n                reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression);\n            } 782878"];
3796 [label="reportAction = GetDiagnosticReport(d.Severity,\n                    d.IsEnabledByDefault,\n                    d.Id,\n                    d.WarningLevel,\n                    d.Location,\n                    d.Category,\n                    warningLevelOption,\n                    nullableOption,\n                    generalDiagnosticOption,\n                    specificDiagnosticOptions,\n                    syntaxTreeOptions,\n                    cancellationToken,\n                    out hasPragmaSuppression); 782879"];
3797 [label="param GetDiagnosticReport(DiagnosticSeverity severity) 782880"];
3798 [label="param GetDiagnosticReport(int diagnosticWarningLevel) 782881"];
3799 [label="param GetDiagnosticReport(string category) 782882"];
3800 [label="param GetDiagnosticReport(int warningLevelOption) 782883"];
3801 [label="param GetDiagnosticReport(NullableContextOptions nullableOption) 782884"];
3802 [label="param GetDiagnosticReport(ReportDiagnostic generalDiagnosticOption) 782885"];
3803 [label="param GetDiagnosticReport(SyntaxTreeOptionsProvider? syntaxTreeOptions) 782886"];
3804 [label="param GetDiagnosticReport(CancellationToken cancellationToken) 782887"];
3805 [label="param GetDiagnosticReport(out bool hasPragmaSuppression) 782888"];
3806 [label="hasPragmaSuppression = false; 782889"];
3807 [label="Debug.Assert(location.SourceTree is null || location.SourceTree is CSharpSyntaxTree); 782890"];
3808 [label="bool isNullableFlowAnalysisWarning = ErrorFacts.NullableWarnings.Contains(id); 782891"];
3809 [label="if (isNullableFlowAnalysisWarning)\n            {\n                // LAFHIS\n                Syntax.NullableContextState.State? warningsState = tree is not null ? tree.GetNullableContextState(position).WarningsState : null;\n                var nullableWarningsEnabled = warningsState switch\n                {\n                    Syntax.NullableContextState.State.Enabled => true,\n                    Syntax.NullableContextState.State.Disabled => false,\n                    Syntax.NullableContextState.State.ExplicitlyRestored => nullableOption.WarningsEnabled(),\n                    Syntax.NullableContextState.State.Unknown =>\n                        tree?.IsGeneratedCode(syntaxTreeOptions, cancellationToken) != true && nullableOption.WarningsEnabled(),\n                    null => nullableOption.WarningsEnabled(),\n                    _ => throw ExceptionUtilities.UnexpectedValue(warningsState)\n                };\n\n                if (!nullableWarningsEnabled)\n                {\n                    return ReportDiagnostic.Suppress;\n                }\n            } 782892"];
3810 [label="if (diagnosticWarningLevel > warningLevelOption)  // honor the warning level\n            {\n                return ReportDiagnostic.Suppress;\n            } 782893"];
3811 [label="bool specifiedWarnAsErrorMinus = false; 782894"];
3812 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 782895"];
3813 [label="if (syntaxTreeOptions != null &&\n                (!isSpecified || specifiedWarnAsErrorMinus))\n            {\n                // 3. Editor config options (syntax tree level)\n                // 4. Global analyzer config options (compilation level)\n                // Do not apply config options if it is bumping a warning to an error and '/warnaserror-:DiagnosticId' was specified on the command line.\n                if ((tree != null && syntaxTreeOptions.TryGetDiagnosticValue(tree, id, cancellationToken, out var reportFromSyntaxTreeOptions) ||\n                    syntaxTreeOptions.TryGetGlobalDiagnosticValue(id, cancellationToken, out reportFromSyntaxTreeOptions)) &&\n                    !(specifiedWarnAsErrorMinus && severity == DiagnosticSeverity.Warning && reportFromSyntaxTreeOptions == ReportDiagnostic.Error))\n                {\n                    isSpecified = true;\n                    report = reportFromSyntaxTreeOptions;\n\n                    // '/warnaserror' should promote warnings configured in analyzer config to error.\n                    if (!specifiedWarnAsErrorMinus && report == ReportDiagnostic.Warn && generalDiagnosticOption == ReportDiagnostic.Error)\n                    {\n                        report = ReportDiagnostic.Error;\n                    }\n                }\n            } 782896"];
3814 [label="if (report == ReportDiagnostic.Suppress)\n            {\n                return ReportDiagnostic.Suppress;\n            } 782897"];
3815 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Disabled)\n            {\n                hasPragmaSuppression = true;\n            } 782898"];
3816 [label="if (pragmaWarningState == Syntax.PragmaWarningState.Enabled)\n            {\n                switch (report)\n                {\n                    case ReportDiagnostic.Error:\n                    case ReportDiagnostic.Hidden:\n                    case ReportDiagnostic.Info:\n                    case ReportDiagnostic.Warn:\n                        // No need to adjust the current report state, it already means 'enabled'\n                        return report;\n\n                    case ReportDiagnostic.Suppress:\n                        // Enable the warning\n                        return ReportDiagnostic.Default;\n\n                    case ReportDiagnostic.Default:\n                        if (generalDiagnosticOption == ReportDiagnostic.Error && promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n\n                        return ReportDiagnostic.Default;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(report);\n                }\n            }\n            else if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 782899"];
3817 [label="if (report == ReportDiagnostic.Suppress) // check options (/nowarn)\n            {\n                return ReportDiagnostic.Suppress;\n            } 782900"];
3818 [label="if (report == ReportDiagnostic.Default)\n            {\n                switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                }\n            } 782901"];
3819 [label="switch (generalDiagnosticOption)\n                {\n                    case ReportDiagnostic.Error:\n                        if (promoteToAnError())\n                        {\n                            return ReportDiagnostic.Error;\n                        }\n                        break;\n                    case ReportDiagnostic.Suppress:\n                        // When doing suppress-all-warnings, don't lower severity for anything other than warning and info.\n                        // We shouldn't suppress hidden diagnostics here because then features that use hidden diagnostics to\n                        // display a lightbulb would stop working if someone has suppress-all-warnings (/nowarn) specified in their project.\n                        if (severity == DiagnosticSeverity.Warning || severity == DiagnosticSeverity.Info)\n                        {\n                            report = ReportDiagnostic.Suppress;\n                            isSpecified = true;\n                        }\n                        break;\n                } 782902"];
3820 [label="if (hasPragmaSuppression)\n            {\n                d = d.WithIsSuppressed(true);\n            } 782903"];
3821 [label="excludeDiagnostics?.Free(); 782904"];
3822 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 782905"];
3823 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 782906"];
3824 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 782907"];
3825 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 782908"];
3826 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 782909"];
3827 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 782910"];
3828 [label="param AddDebugSourceDocumentsForChecksumDirectives(DebugDocumentsBuilder documentsBuilder) 782911"];
3829 [label="param AddDebugSourceDocumentsForChecksumDirectives(SyntaxTree tree) 782912"];
3830 [label="param AddDebugSourceDocumentsForChecksumDirectives(DiagnosticBag diagnostics) 782913"];
3831 [label="param AddDebugSourceDocumentsForChecksumDirectives(this) 782914"];
3832 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 782915"];
3833 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 782916"];
3834 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 782917"];
3835 [label="foreach (var directive in checksumDirectives)\n            {\n                var checksumDirective = (PragmaChecksumDirectiveTriviaSyntax)directive;\n                var path = checksumDirective.File.ValueText;\n\n                var checksumText = checksumDirective.Bytes.ValueText;\n                var normalizedPath = documentsBuilder.NormalizeDebugDocumentPath(path, basePath: tree.FilePath);\n                var existingDoc = documentsBuilder.TryGetDebugDocumentForNormalizedPath(normalizedPath);\n\n                // duplicate checksum pragmas are valid as long as values match\n                // if we have seen this document already, check for matching values.\n                if (existingDoc != null)\n                {\n                    // pragma matches a file path on an actual tree.\n                    // Dev12 compiler just ignores the pragma in this case which means that\n                    // checksum of the actual tree always wins and no warning is given.\n                    // We will continue doing the same.\n                    if (existingDoc.IsComputedChecksum)\n                    {\n                        continue;\n                    }\n\n                    var sourceInfo = existingDoc.GetSourceInfo();\n                    if (ChecksumMatches(checksumText, sourceInfo.Checksum))\n                    {\n                        var guid = Guid.Parse(checksumDirective.Guid.ValueText);\n                        if (guid == sourceInfo.ChecksumAlgorithmId)\n                        {\n                            // all parts match, nothing to do\n                            continue;\n                        }\n                    }\n\n                    // did not match to an existing document\n                    // produce a warning and ignore the pragma\n                    diagnostics.Add(ErrorCode.WRN_ConflictingChecksum, new SourceLocation(checksumDirective), path);\n                }\n                else\n                {\n                    var newDocument = new Cci.DebugSourceDocument(\n                        normalizedPath,\n                        Cci.DebugSourceDocument.CorSymLanguageTypeCSharp,\n                        MakeChecksumBytes(checksumText),\n                        Guid.Parse(checksumDirective.Guid.ValueText));\n\n                    documentsBuilder.AddDebugDocument(newDocument);\n                }\n            } 782918"];
3836 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 782919"];
3837 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 782920"];
3838 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 782921"];
3839 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 782922"];
3840 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 782923"];
3841 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 782924"];
3842 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 782925"];
3843 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 782926"];
3844 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 782927"];
3845 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 782928"];
3846 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 782929"];
3847 [label="param CompileMethodBodies(CSharpCompilation compilation) 782930"];
3848 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 782931"];
3849 [label="param CompileMethodBodies(bool emittingPdb) 782932"];
3850 [label="param CompileMethodBodies(bool emitTestCoverageData) 782933"];
3851 [label="param CompileMethodBodies(bool hasDeclarationErrors) 782934"];
3852 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 782935"];
3853 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 782936"];
3854 [label="param CompileMethodBodies(CancellationToken cancellationToken) 782937"];
3855 [label="Debug.Assert(compilation != null); 782938"];
3856 [label="Debug.Assert(compilation != null); 782939"];
3857 [label="Debug.Assert(diagnostics != null); 782940"];
3858 [label="Debug.Assert(diagnostics != null); 782941"];
3859 [label="compilation.PreviousSubmission 782942"];
3860 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 782943"];
3861 [label="ScriptCompilationInfo 782944"];
3862 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 782945"];
3863 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 782946"];
3864 [label="MethodSymbol entryPoint = null; 782947"];
3865 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 782948"];
3866 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 782949"];
3867 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 782950"];
3868 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 782951"];
3869 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 782952"];
3870 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 782953"];
3871 [label="param GetEntryPoint(bool hasDeclarationErrors) 782954"];
3872 [label="param GetEntryPoint(CancellationToken cancellationToken) 782955"];
3873 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 782956"];
3874 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 782957"];
3875 [label="return _lazyEntryPoint; 782958"];
3876 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 782959"];
3877 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 782960"];
3878 [label="Debug.Assert(compilation != null); 782961"];
3879 [label="Debug.Assert(compilation != null); 782962"];
3880 [label="Debug.Assert(diagnostics != null); 782963"];
3881 [label="Debug.Assert(diagnostics != null); 782964"];
3882 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 782965"];
3883 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 782966"];
3884 [label="param SetGlobalErrorIfTrue(bool arg) 782967"];
3885 [label="param SetGlobalErrorIfTrue(this) 782968"];
3886 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 782969"];
3887 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 782970"];
3888 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 782971"];
3889 [label="_debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile); 782972"];
3890 [label="_debugDocumentProvider 782973"];
3891 [label="GetBoundReferenceManager() 782974"];
3892 [label="param GetBoundReferenceManager(this) 782975"];
3893 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 782976"];
3894 [label="return _referenceManager; 782977"];
3895 [label="GetBoundReferenceManager(); 782978"];
3896 [label="s.Accept(this, null); 782979"];
3897 [label="param VisitNamedType(NamedTypeSymbol symbol) 782980"];
3898 [label="param VisitNamedType(TypeCompilationState arg) 782981"];
3899 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 782982"];
3900 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 782983"];
3901 [label="PassesFilter(_filterOpt, symbol) 782984"];
3902 [label="param PassesFilter(Predicate<Symbol> filterOpt) 782985"];
3903 [label="param PassesFilter(Symbol symbol) 782986"];
3904 [label="return (filterOpt == null) || filterOpt(symbol); 782987"];
3905 [label="return (filterOpt == null) || filterOpt(symbol); 782988"];
3906 [label="arg = null; 782989"];
3907 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 782990"];
3908 [label="if (tasks == null)\n            {\n                return;\n            } 782991"];
3909 [label="if (tasks == null)\n            {\n                return;\n            } 782992"];
3910 [label="methodCompiler.WaitForWorkers(); 782993"];
3911 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 782994"];
3912 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 782995"];
3913 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 782996"];
3914 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 782997"];
3915 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 782998"];
3916 [label="=> _additionalTypes 782999"];
3917 [label="_additionalTypes 783000"];
3918 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 783001"];
3919 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 783002"];
3920 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 783003"];
3921 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 783004"];
3922 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 783005"];
3923 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 783006"];
3924 [label="param CompileSynthesizedMethods(this) 783007"];
3925 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 783008"];
3926 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 783009"];
3927 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 783010"];
3928 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 783011"];
3929 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 783012"];
3930 [label="param GetEmbeddedTypes(this) 783013"];
3931 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 783014"];
3932 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 783015"];
3933 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 783016"];
3934 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 783017"];
3935 [label="param CreateEmbeddedAttributesIfNeeded(this) 783018"];
3936 [label="GetNeedsGeneratedAttributes() 783019"];
3937 [label="param GetNeedsGeneratedAttributes(this) 783020"];
3938 [label="_needsGeneratedAttributes_IsFrozen = true; 783021"];
3939 [label="_needsGeneratedAttributes_IsFrozen 783022"];
3940 [label="GetNeedsGeneratedAttributesInternal() 783023"];
3941 [label="param GetNeedsGeneratedAttributesInternal(this) 783024"];
3942 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 783025"];
3943 [label="return GetNeedsGeneratedAttributesInternal(); 783026"];
3944 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 783027"];
3945 [label="ShouldEmitNullablePublicOnlyAttribute() 783028"];
3946 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 783029"];
3947 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 783030"];
3948 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 783031"];
3949 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 783032"];
3950 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 783033"];
3951 [label="return; 783034"];
3952 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 783035"];
3953 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 783036"];
3954 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 783037"];
3955 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 783038"];
3956 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 783039"];
3957 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 783040"];
3958 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 783041"];
3959 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 783042"];
3960 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 783043"];
3961 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 783044"];
3962 [label="builder.AddIfNotNull(_lazyNullableAttribute); 783045"];
3963 [label="builder.AddIfNotNull(_lazyNullableAttribute); 783046"];
3964 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 783047"];
3965 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 783048"];
3966 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 783049"];
3967 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 783050"];
3968 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 783051"];
3969 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 783052"];
3970 [label="return builder.ToImmutableAndFree(); 783053"];
3971 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 783054"];
3972 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 783055"];
3973 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 783056"];
3974 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 783057"];
3975 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 783058"];
3976 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 783059"];
3977 [label="param CompileSynthesizedMethods(this) 783060"];
3978 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 783061"];
3979 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 783062"];
3980 [label="compilation.AnonymousTypeManager 783063"];
3981 [label="get\n            {\n                return _anonymousTypeManager;\n            } 783064"];
3982 [label="return _anonymousTypeManager; 783065"];
3983 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 783066"];
3984 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 783067"];
3985 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 783068"];
3986 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 783069"];
3987 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 783070"];
3988 [label="param GetPreviousAnonymousTypes(this) 783071"];
3989 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 783072"];
3990 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 783073"];
3991 [label="param GetNextAnonymousTypeIndex(this) 783074"];
3992 [label="return 0; 783075"];
3993 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 783076"];
3994 [label="methodCompiler.WaitForWorkers() 783077"];
3995 [label="var tasks = _compilerTasks; 783078"];
3996 [label="if (tasks == null)\n            {\n                return;\n            } 783079"];
3997 [label="if (tasks == null)\n            {\n                return;\n            } 783080"];
3998 [label="methodCompiler.WaitForWorkers(); 783081"];
3999 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 783082"];
4000 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 783083"];
4001 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 783084"];
4002 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 783085"];
4003 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 783086"];
4004 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 783087"];
4005 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 783088"];
4006 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 783089"];
4007 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 783090"];
4008 [label="GetBoundReferenceManager() 783091"];
4009 [label="param GetBoundReferenceManager(this) 783092"];
4010 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 783093"];
4011 [label="return _referenceManager; 783094"];
4012 [label="GetBoundReferenceManager(); 783095"];
4013 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 783096"];
4014 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 783097"];
4015 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 783098"];
4016 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 783099"];
4017 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 783100"];
4018 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 783101"];
4019 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 783102"];
4020 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 783103"];
4021 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 783104"];
4022 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 783105"];
4023 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 783106"];
4024 [label="param GenerateModuleInitializer(this) 783107"];
4025 [label="Debug.Assert(_declarationDiagnosticsFrozen); 783108"];
4026 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 783109"];
4027 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 783110"];
4028 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 783111"];
4029 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 783112"];
4030 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 783113"];
4031 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 783114"];
4032 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 783115"];
4033 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 783116"];
4034 [label="return true; 783117"];
4035 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 783118"];
4036 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 783119"];
4037 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 783120"];
4038 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 783121"];
4039 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 783122"];
4040 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 783123"];
4041 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 783124"];
4042 [label="param GenerateResourcesAndDocumentationComments(this) 783125"];
4043 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 783126"];
4044 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 783127"];
4045 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 783128"];
4046 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 783129"];
4047 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 783130"];
4048 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 783131"];
4049 [label="SourceAssembly 783132"];
4050 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 783133"];
4051 [label="GetBoundReferenceManager() 783134"];
4052 [label="param GetBoundReferenceManager(this) 783135"];
4053 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 783136"];
4054 [label="return _referenceManager; 783137"];
4055 [label="GetBoundReferenceManager(); 783138"];
4056 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 783139"];
4057 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 783140"];
4058 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 783141"];
4059 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 783142"];
4060 [label="AddedModulesResourceNames(resourceDiagnostics) 783143"];
4061 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 783144"];
4062 [label="param AddedModulesResourceNames(this) 783145"];
4063 [label="SourceAssembly 783146"];
4064 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 783147"];
4065 [label="GetBoundReferenceManager() 783148"];
4066 [label="param GetBoundReferenceManager(this) 783149"];
4067 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 783150"];
4068 [label="return _referenceManager; 783151"];
4069 [label="GetBoundReferenceManager(); 783152"];
4070 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 783153"];
4071 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 783154"];
4072 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 783155"];
4073 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 783156"];
4074 [label="param AddedModulesResourceNames(this) 783157"];
4075 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 783158"];
4076 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 783159"];
4077 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 783160"];
4078 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 783161"];
4079 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 783162"];
4080 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 783163"];
4081 [label="cancellationToken.ThrowIfCancellationRequested(); 783164"];
4082 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 783165"];
4083 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 783166"];
4084 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 783167"];
4085 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 783168"];
4086 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 783169"];
4087 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 783170"];
4088 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 783171"];
4089 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 783172"];
4090 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 783173"];
4091 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 783174"];
4092 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 783175"];
4093 [label="param WriteDocumentationCommentXml(string? assemblyName) 783176"];
4094 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 783177"];
4095 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 783178"];
4096 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 783179"];
4097 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 783180"];
4098 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 783181"];
4099 [label="StreamWriter writer = null; 783182"];
4100 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 783183"];
4101 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 783184"];
4102 [label="compilation.SourceAssembly 783185"];
4103 [label="GetBoundReferenceManager() 783186"];
4104 [label="param GetBoundReferenceManager(this) 783187"];
4105 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 783188"];
4106 [label="return _referenceManager; 783189"];
4107 [label="GetBoundReferenceManager(); 783190"];
4108 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 783191"];
4109 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 783192"];
4110 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 783193"];
4111 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 783194"];
4112 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 783195"];
4113 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 783196"];
4114 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 783197"];
4115 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 783198"];
4116 [label="param DocumentationCommentCompiler(TextWriter writer) 783199"];
4117 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 783200"];
4118 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 783201"];
4119 [label="param DocumentationCommentCompiler(bool processIncludes) 783202"];
4120 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 783203"];
4121 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 783204"];
4122 [label="param DocumentationCommentCompiler(this) 783205"];
4123 [label="param DocumentationCommentCompiler(this) 783206"];
4124 [label="_assemblyName 783207"];
4125 [label="_compilation 783208"];
4126 [label="_writer 783209"];
4127 [label="_filterTree 783210"];
4128 [label="_filterSpanWithinTree 783211"];
4129 [label="_processIncludes 783212"];
4130 [label="_isForSingleSymbol 783213"];
4131 [label="_diagnostics 783214"];
4132 [label="_lazyComparer 783215"];
4133 [label="_includedFileCache 783216"];
4134 [label="_indentDepth 783217"];
4135 [label="_temporaryStringBuilders 783218"];
4136 [label="_writer 783219"];
4137 [label="_filterTree 783220"];
4138 [label="_filterSpanWithinTree 783221"];
4139 [label="_processIncludes 783222"];
4140 [label="_isForSingleSymbol 783223"];
4141 [label="_diagnostics 783224"];
4142 [label="compilation.SourceAssembly 783225"];
4143 [label="GetBoundReferenceManager() 783226"];
4144 [label="param GetBoundReferenceManager(this) 783227"];
4145 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 783228"];
4146 [label="return _referenceManager; 783229"];
4147 [label="GetBoundReferenceManager(); 783230"];
4148 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 783231"];
4149 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 783232"];
4150 [label="Debug.Assert(_assemblyName != null); 783233"];
4151 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 783234"];
4152 [label="WriteLine('<?xml version=\\'1.0\\'?>') 783235"];
4153 [label="param WriteLine(string message) 783236"];
4154 [label="param WriteLine(this) 783237"];
4155 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783238"];
4156 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783239"];
4157 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783240"];
4158 [label="WriteLine('<doc>'); 783241"];
4159 [label="WriteLine('<doc>') 783242"];
4160 [label="param WriteLine(string message) 783243"];
4161 [label="param WriteLine(this) 783244"];
4162 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783245"];
4163 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783246"];
4164 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783247"];
4165 [label="Indent(); 783248"];
4166 [label="WriteLine('<assembly>'); 783249"];
4167 [label="WriteLine('<assembly>') 783250"];
4168 [label="param WriteLine(string message) 783251"];
4169 [label="param WriteLine(this) 783252"];
4170 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783253"];
4171 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783254"];
4172 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783255"];
4173 [label="Indent(); 783256"];
4174 [label="WriteLine('<name>{0}</name>', _assemblyName); 783257"];
4175 [label="WriteLine('<name>{0}</name>', _assemblyName) 783258"];
4176 [label="WriteLine('<name>{0}</name>', _assemblyName) 783259"];
4177 [label="param WriteLine(string format) 783260"];
4178 [label="param WriteLine(params object[] args) 783261"];
4179 [label="param WriteLine(this) 783262"];
4180 [label="WriteLine(string.Format(format, args)); 783263"];
4181 [label="WriteLine(string.Format(format, args)); 783264"];
4182 [label="WriteLine(string.Format(format, args)); 783265"];
4183 [label="WriteLine(string.Format(format, args)) 783266"];
4184 [label="param WriteLine(string message) 783267"];
4185 [label="param WriteLine(this) 783268"];
4186 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783269"];
4187 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783270"];
4188 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783271"];
4189 [label="WriteLine(string.Format(format, args)); 783272"];
4190 [label="Debug.Assert(_indentDepth >= 0); 783273"];
4191 [label="Unindent(); 783274"];
4192 [label="WriteLine('</assembly>'); 783275"];
4193 [label="WriteLine('</assembly>') 783276"];
4194 [label="param WriteLine(string message) 783277"];
4195 [label="param WriteLine(this) 783278"];
4196 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783279"];
4197 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783280"];
4198 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783281"];
4199 [label="WriteLine('<members>'); 783282"];
4200 [label="WriteLine('<members>') 783283"];
4201 [label="param WriteLine(string message) 783284"];
4202 [label="param WriteLine(this) 783285"];
4203 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783286"];
4204 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783287"];
4205 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783288"];
4206 [label="Indent(); 783289"];
4207 [label="Debug.Assert(!_isForSingleSymbol); 783290"];
4208 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 783291"];
4209 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 783292"];
4210 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 783293"];
4211 [label="DocumentationMode maxDocumentationMode; 783294"];
4212 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 783295"];
4213 [label="docCommentNodes 783296"];
4214 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 783297"];
4215 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 783298"];
4216 [label="maxDocumentationMode = DocumentationMode.None; 783299"];
4217 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 783300"];
4218 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 783301"];
4219 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 783302"];
4220 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 783303"];
4221 [label="currDocumentationMode > maxDocumentationMode 783304"];
4222 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 783305"];
4223 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 783306"];
4224 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 783307"];
4225 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 783308"];
4226 [label="return true; 783309"];
4227 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 783310"];
4228 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 783311"];
4229 [label="return; 783312"];
4230 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 783313"];
4231 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 783314"];
4232 [label="currDocumentationMode > maxDocumentationMode 783315"];
4233 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 783316"];
4234 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 783317"];
4235 [label="return; 783318"];
4236 [label="Debug.Assert(_indentDepth >= 0); 783319"];
4237 [label="Unindent(); 783320"];
4238 [label="WriteLine('</members>'); 783321"];
4239 [label="WriteLine('</members>') 783322"];
4240 [label="param WriteLine(string message) 783323"];
4241 [label="param WriteLine(this) 783324"];
4242 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783325"];
4243 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783326"];
4244 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783327"];
4245 [label="Unindent(); 783328"];
4246 [label="WriteLine('</doc>'); 783329"];
4247 [label="WriteLine('</doc>') 783330"];
4248 [label="param WriteLine(string message) 783331"];
4249 [label="param WriteLine(this) 783332"];
4250 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783333"];
4251 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783334"];
4252 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 783335"];
4253 [label="Debug.Assert(compiler._indentDepth == 0); 783336"];
4254 [label="Debug.Assert(compiler._indentDepth == 0); 783337"];
4255 [label="writer?.Flush(); 783338"];
4256 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 783339"];
4257 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 783340"];
4258 [label="compilation.SyntaxTrees 783341"];
4259 [label="_syntaxAndDeclarations.GetLazyState() 783342"];
4260 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 783343"];
4261 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 783344"];
4262 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 783345"];
4263 [label="param ReportUnprocessed(CancellationToken cancellationToken) 783346"];
4264 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 783347"];
4265 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 783348"];
4266 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 783349"];
4267 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 783350"];
4268 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 783351"];
4269 [label="param ReportUnusedImports(SyntaxTree? filterTree) 783352"];
4270 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 783353"];
4271 [label="param ReportUnusedImports(CancellationToken cancellationToken) 783354"];
4272 [label="param ReportUnusedImports(this) 783355"];
4273 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 783356"];
4274 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 783357"];
4275 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 783358"];
4276 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 783359"];
4277 [label="CompleteTrees(filterTree); 783360"];
4278 [label="CompleteTrees(filterTree) 783361"];
4279 [label="param CompleteTrees(SyntaxTree? filterTree) 783362"];
4280 [label="param CompleteTrees(this) 783363"];
4281 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 783364"];
4282 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 783365"];
4283 [label="CompleteTrees(filterTree); 783366"];
4284 [label="this.SourceModule 783367"];
4285 [label="Assembly 783368"];
4286 [label="SourceAssembly 783369"];
4287 [label="GetBoundReferenceManager() 783370"];
4288 [label="param GetBoundReferenceManager(this) 783371"];
4289 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 783372"];
4290 [label="return _referenceManager; 783373"];
4291 [label="GetBoundReferenceManager(); 783374"];
4292 [label="return Assembly.Modules[0]; 783375"];
4293 [label="get { return SourceAssembly.IsDelaySigned; } 783376"];
4294 [label="SourceAssembly 783377"];
4295 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 783378"];
4296 [label="GetBoundReferenceManager() 783379"];
4297 [label="param GetBoundReferenceManager(this) 783380"];
4298 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 783381"];
4299 [label="return _referenceManager; 783382"];
4300 [label="GetBoundReferenceManager(); 783383"];
4301 [label="SourceAssembly.IsDelaySigned 783384"];
4302 [label="get { return SourceAssembly.StrongNameKeys; } 783385"];
4303 [label="SourceAssembly 783386"];
4304 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 783387"];
4305 [label="GetBoundReferenceManager() 783388"];
4306 [label="param GetBoundReferenceManager(this) 783389"];
4307 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 783390"];
4308 [label="return _referenceManager; 783391"];
4309 [label="GetBoundReferenceManager(); 783392"];
4310 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 783393"];
4311 [label="param GetCorLibraryReferenceToEmit(this) 783394"];
4312 [label="CorLibrary 783395"];
4313 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 783396"];
4314 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 783397"];
4315 [label="AssemblySymbol corLibrary = CorLibrary; 783398"];
4316 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 783399"];
4317 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 783400"];
4318 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 783401"];
4319 [label="return Translate(corLibrary, context.Diagnostics); 783402"];
4320 [label="return Translate(corLibrary, context.Diagnostics); 783403"];
4321 [label="Translate(corLibrary, context.Diagnostics) 783404"];
4322 [label="param Translate(AssemblySymbol assembly) 783405"];
4323 [label="param Translate(DiagnosticBag diagnostics) 783406"];
4324 [label="param Translate(this) 783407"];
4325 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 783408"];
4326 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 783409"];
4327 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 783410"];
4328 [label="Cci.IModuleReference reference; 783411"];
4329 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 783412"];
4330 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 783413"];
4331 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 783414"];
4332 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 783415"];
4333 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 783416"];
4334 [label="new AssemblyReference(assembly) 783417"];
4335 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 783418"];
4336 [label="param AssemblyReference(this) 783419"];
4337 [label="_targetAssembly 783420"];
4338 [label="Debug.Assert((object)assemblySymbol != null); 783421"];
4339 [label="Debug.Assert((object)assemblySymbol != null); 783422"];
4340 [label="_targetAssembly 783423"];
4341 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 783424"];
4342 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 783425"];
4343 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 783426"];
4344 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 783427"];
4345 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 783428"];
4346 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 783429"];
4347 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 783430"];
4348 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 783431"];
4349 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 783432"];
4350 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 783433"];
4351 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 783434"];
4352 [label="param ValidateReferencedAssembly(this) 783435"];
4353 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 783436"];
4354 [label="asmRef.Identity 783437"];
4355 [label="=> _targetAssembly.Identity 783438"];
4356 [label="_targetAssembly.Identity 783439"];
4357 [label="AssemblyIdentity refIdentity = asmRef.Identity; 783440"];
4358 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 783441"];
4359 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 783442"];
4360 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 783443"];
4361 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 783444"];
4362 [label="var refMachine = assembly.Machine; 783445"];
4363 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 783446"];
4364 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 783447"];
4365 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 783448"];
4366 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 783449"];
4367 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 783450"];
4368 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 783451"];
4369 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 783452"];
4370 [label="return cachedAsmRef; 783453"];
4371 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 783454"];
4372 [label="=> _targetAssembly.Identity 783455"];
4373 [label="_targetAssembly.Identity 783456"];
4374 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 783457"];
4375 [label="param GetAssemblyReferencesFromAddedModules(this) 783458"];
4376 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 783459"];
4377 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 783460"];
4378 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 783461"];
4379 [label="param GetAssemblyReferencesFromAddedModules(this) 783462"];
4380 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 783463"];
4381 [label="param GetFiles(EmitContext context) 783464"];
4382 [label="param GetFiles(this) 783465"];
4383 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 783466"];
4384 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 783467"];
4385 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 783468"];
4386 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 783469"];
4387 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 783470"];
4388 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 783471"];
4389 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 783472"];
4390 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 783473"];
4391 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 783474"];
4392 [label="var modules = sourceAssSymbol.Modules; 783475"];
4393 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 783476"];
4394 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 783477"];
4395 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 783478"];
4396 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 783479"];
4397 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 783480"];
4398 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 783481"];
4399 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 783482"];
4400 [label="builder.Free(); 783483"];
4401 [label="return lazyFiles; 783484"];
4402 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 783485"];
4403 [label="=> _embeddedTypesManagerOpt 783486"];
4404 [label="_embeddedTypesManagerOpt 783487"];
4405 [label="param GetAnonymousTypeDefinitions(EmitContext context) 783488"];
4406 [label="param GetAnonymousTypeDefinitions(this) 783489"];
4407 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 783490"];
4408 [label="Compilation.AnonymousTypeManager 783491"];
4409 [label="get\n            {\n                return _anonymousTypeManager;\n            } 783492"];
4410 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 783493"];
4411 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 783494"];
4412 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 783495"];
4413 [label="param GetAdditionalTopLevelTypeDefinitions(this) 783496"];
4414 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 783497"];
4415 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 783498"];
4416 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 783499"];
4417 [label="=> _additionalTypes 783500"];
4418 [label="_additionalTypes 783501"];
4419 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 783502"];
4420 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 783503"];
4421 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 783504"];
4422 [label="param GetEmbeddedTypeDefinitions(this) 783505"];
4423 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 783506"];
4424 [label="GetEmbeddedTypes(context.Diagnostics) 783507"];
4425 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 783508"];
4426 [label="param GetEmbeddedTypes(this) 783509"];
4427 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 783510"];
4428 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 783511"];
4429 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 783512"];
4430 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 783513"];
4431 [label="param CreateEmbeddedAttributesIfNeeded(this) 783514"];
4432 [label="GetNeedsGeneratedAttributes() 783515"];
4433 [label="param GetNeedsGeneratedAttributes(this) 783516"];
4434 [label="_needsGeneratedAttributes_IsFrozen = true; 783517"];
4435 [label="_needsGeneratedAttributes_IsFrozen 783518"];
4436 [label="GetNeedsGeneratedAttributesInternal() 783519"];
4437 [label="param GetNeedsGeneratedAttributesInternal(this) 783520"];
4438 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 783521"];
4439 [label="return GetNeedsGeneratedAttributesInternal(); 783522"];
4440 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 783523"];
4441 [label="ShouldEmitNullablePublicOnlyAttribute() 783524"];
4442 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 783525"];
4443 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 783526"];
4444 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 783527"];
4445 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 783528"];
4446 [label="return; 783529"];
4447 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 783530"];
4448 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 783531"];
4449 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 783532"];
4450 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 783533"];
4451 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 783534"];
4452 [label="builder.AddIfNotNull(_lazyNullableAttribute); 783535"];
4453 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 783536"];
4454 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 783537"];
4455 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 783538"];
4456 [label="return builder.ToImmutableAndFree(); 783539"];
4457 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 783540"];
4458 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 783541"];
4459 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 783542"];
4460 [label="param GetTopLevelSourceTypeDefinitions(this) 783543"];
4461 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 783544"];
4462 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 783545"];
4463 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 783546"];
4464 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 783547"];
4465 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 783548"];
4466 [label="var ns = namespacesToProcess.Pop(); 783549"];
4467 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 783550"];
4468 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 783551"];
4469 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 783552"];
4470 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 783553"];
4471 [label="Debug.Assert(symbol.IsDefinition); 783554"];
4472 [label="SourceModule 783555"];
4473 [label="Assembly 783556"];
4474 [label="SourceAssembly 783557"];
4475 [label="GetBoundReferenceManager() 783558"];
4476 [label="param GetBoundReferenceManager(this) 783559"];
4477 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 783560"];
4478 [label="return _referenceManager; 783561"];
4479 [label="GetBoundReferenceManager(); 783562"];
4480 [label="return Assembly.Modules[0]; 783563"];
4481 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 783564"];
4482 [label="EmitNullablePublicOnly 783565"];
4483 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 783566"];
4484 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 783567"];
4485 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 783568"];
4486 [label="param SynthesizeNullableAttributeIfNecessary(this) 783569"];
4487 [label="Compilation.SourceModule 783570"];
4488 [label="get\n            {\n                return Assembly.Modules[0];\n            } 783571"];
4489 [label="Assembly 783572"];
4490 [label="SourceAssembly 783573"];
4491 [label="GetBoundReferenceManager() 783574"];
4492 [label="param GetBoundReferenceManager(this) 783575"];
4493 [label="GetBoundReferenceManager(); 783576"];
4494 [label="return Assembly.Modules[0]; 783577"];
4495 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 783578"];
4496 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 783579"];
4497 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 783580"];
4498 [label="type.AddNullableTransforms(flagsBuilder); 783581"];
4499 [label="type.AddNullableTransforms(flagsBuilder); 783582"];
4500 [label="SynthesizedAttributeData attribute; 783583"];
4501 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 783584"];
4502 [label="attribute = null; 783585"];
4503 [label="flagsBuilder.Free(); 783586"];
4504 [label="return attribute; 783587"];
4505 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 783588"];
4506 [label="Debug.Assert(symbol.IsDefinition); 783589"];
4507 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 783590"];
4508 [label="return _referenceManager; 783591"];
4509 [label="GetBoundReferenceManager(); 783592"];
4510 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 783593"];
4511 [label="param GetBoundReferenceManager(this) 783594"];
4512 [label="GetBoundReferenceManager(); 783595"];
4513 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 783596"];
4514 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 783597"];
4515 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 783598"];
4516 [label="param GetSynthesizedNestedTypes(this) 783599"];
4517 [label="return null; 783600"];
4518 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 783601"];
4519 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 783602"];
4520 [label="param GetSourceAssemblyAttributes(this) 783603"];
4521 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 783604"];
4522 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 783605"];
4523 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 783606"];
4524 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 783607"];
4525 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 783608"];
4526 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 783609"];
4527 [label="NamedTypeSymbol result; 783610"];
4528 [label="GetBoundReferenceManager() 783611"];
4529 [label="GetBoundReferenceManager(); 783612"];
4530 [label="Debug.Assert(result.SpecialType == specialType); 783613"];
4531 [label="SourceAssembly 783614"];
4532 [label="GetBoundReferenceManager() 783615"];
4533 [label="param GetBoundReferenceManager(this) 783616"];
4534 [label="GetBoundReferenceManager(); 783617"];
4535 [label="GetBoundReferenceManager() 783618"];
4536 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 783619"];
4537 [label="param Translate(MethodSymbol methodSymbol) 783620"];
4538 [label="param Translate(SyntaxNode syntaxNodeOpt) 783621"];
4539 [label="param Translate(DiagnosticBag diagnostics) 783622"];
4540 [label="param Translate(BoundArgListOperator optArgList = null) 783623"];
4541 [label="param Translate(bool needDeclaration = false) 783624"];
4542 [label="param Translate(this) 783625"];
4543 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 783626"];
4544 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 783627"];
4545 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 783628"];
4546 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 783629"];
4547 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 783630"];
4548 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 783631"];
4549 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 783632"];
4550 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 783633"];
4551 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 783634"];
4552 [label="param Translate(MethodSymbol methodSymbol) 783635"];
4553 [label="param Translate(SyntaxNode syntaxNodeOpt) 783636"];
4554 [label="param Translate(DiagnosticBag diagnostics) 783637"];
4555 [label="param Translate(bool needDeclaration) 783638"];
4556 [label="param Translate(this) 783639"];
4557 [label="object reference; 783640"];
4558 [label="Cci.IMethodReference methodRef; 783641"];
4559 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 783642"];
4560 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 783643"];
4561 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 783644"];
4562 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 783645"];
4563 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 783646"];
4564 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 783647"];
4565 [label="bool typeIsGeneric = IsGenericType(container); 783648"];
4566 [label="IsGenericType(container) 783649"];
4567 [label="param IsGenericType(NamedTypeSymbol toCheck) 783650"];
4568 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783651"];
4569 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783652"];
4570 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 783653"];
4571 [label="toCheck = toCheck.ContainingType; 783654"];
4572 [label="return false; 783655"];
4573 [label="bool typeIsGeneric = IsGenericType(container); 783656"];
4574 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 783657"];
4575 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 783658"];
4576 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 783659"];
4577 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 783660"];
4578 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 783661"];
4579 [label="return methodSymbol.GetCciAdapter(); 783662"];
4580 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 783663"];
4581 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 783664"];
4582 [label="return unexpandedMethodRef; 783665"];
4583 [label="param Translate(TypeSymbol typeSymbol) 783666"];
4584 [label="param Translate(SyntaxNode syntaxNodeOpt) 783667"];
4585 [label="param Translate(DiagnosticBag diagnostics) 783668"];
4586 [label="param Translate(this) 783669"];
4587 [label="Debug.Assert(diagnostics != null); 783670"];
4588 [label="Debug.Assert(diagnostics != null); 783671"];
4589 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 783672"];
4590 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 783673"];
4591 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 783674"];
4592 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 783675"];
4593 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 783676"];
4594 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 783677"];
4595 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 783678"];
4596 [label="param Translate(SyntaxNode syntaxNodeOpt) 783679"];
4597 [label="param Translate(DiagnosticBag diagnostics) 783680"];
4598 [label="param Translate(bool fromImplements = false) 783681"];
4599 [label="param Translate(bool needDeclaration = false) 783682"];
4600 [label="param Translate(this) 783683"];
4601 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 783684"];
4602 [label="Debug.Assert(diagnostics != null); 783685"];
4603 [label="Debug.Assert(diagnostics != null); 783686"];
4604 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783687"];
4605 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783688"];
4606 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 783689"];
4607 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783690"];
4608 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783691"];
4609 [label="object reference; 783692"];
4610 [label="Cci.INamedTypeReference typeRef; 783693"];
4611 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 783694"];
4612 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783695"];
4613 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783696"];
4614 [label="IsGenericType(container) 783697"];
4615 [label="param IsGenericType(NamedTypeSymbol toCheck) 783698"];
4616 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783699"];
4617 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783700"];
4618 [label="return false; 783701"];
4619 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783702"];
4620 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783703"];
4621 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 783704"];
4622 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 783705"];
4623 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 783706"];
4624 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 783707"];
4625 [label="param Translate(SyntaxNode syntaxNodeOpt) 783708"];
4626 [label="param Translate(DiagnosticBag diagnostics) 783709"];
4627 [label="param Translate(bool fromImplements = false) 783710"];
4628 [label="param Translate(bool needDeclaration = false) 783711"];
4629 [label="param Translate(this) 783712"];
4630 [label="Debug.Assert(diagnostics != null); 783713"];
4631 [label="Debug.Assert(diagnostics != null); 783714"];
4632 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783715"];
4633 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783716"];
4634 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 783717"];
4635 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783718"];
4636 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783719"];
4637 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 783720"];
4638 [label="param Translate(ModuleSymbol module) 783721"];
4639 [label="param Translate(DiagnosticBag diagnostics) 783722"];
4640 [label="param Translate(this) 783723"];
4641 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 783724"];
4642 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 783725"];
4643 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 783726"];
4644 [label="if ((object)module == null)\n            {\n                return null;\n            } 783727"];
4645 [label="if ((object)module == null)\n            {\n                return null;\n            } 783728"];
4646 [label="Cci.IModuleReference moduleRef; 783729"];
4647 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 783730"];
4648 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 783731"];
4649 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 783732"];
4650 [label="return moduleRef; 783733"];
4651 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783734"];
4652 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783735"];
4653 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 783736"];
4654 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783737"];
4655 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783738"];
4656 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 783739"];
4657 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 783740"];
4658 [label="param Translate(this) 783741"];
4659 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 783742"];
4660 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 783743"];
4661 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 783744"];
4662 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 783745"];
4663 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 783746"];
4664 [label="MustBeWrapped(@params.First()) 783747"];
4665 [label="param MustBeWrapped(ParameterSymbol param) 783748"];
4666 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 783749"];
4667 [label="var container = param.ContainingSymbol; 783750"];
4668 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 783751"];
4669 [label="ContainerIsGeneric(container) 783752"];
4670 [label="param ContainerIsGeneric(Symbol container) 783753"];
4671 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783754"];
4672 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783755"];
4673 [label="IsGenericType(container.ContainingType) 783756"];
4674 [label="param IsGenericType(NamedTypeSymbol toCheck) 783757"];
4675 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783758"];
4676 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783759"];
4677 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 783760"];
4678 [label="toCheck = toCheck.ContainingType; 783761"];
4679 [label="return false; 783762"];
4680 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783763"];
4681 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783764"];
4682 [label="return false; 783765"];
4683 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 783766"];
4684 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 783767"];
4685 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 783768"];
4686 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 783769"];
4687 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 783770"];
4688 [label="param MustBeWrapped(ParameterSymbol param) 783771"];
4689 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 783772"];
4690 [label="var container = param.ContainingSymbol; 783773"];
4691 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 783774"];
4692 [label="ContainerIsGeneric(container) 783775"];
4693 [label="param ContainerIsGeneric(Symbol container) 783776"];
4694 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783777"];
4695 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783778"];
4696 [label="IsGenericType(container.ContainingType) 783779"];
4697 [label="param IsGenericType(NamedTypeSymbol toCheck) 783780"];
4698 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783781"];
4699 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783782"];
4700 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 783783"];
4701 [label="toCheck = toCheck.ContainingType; 783784"];
4702 [label="return false; 783785"];
4703 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783786"];
4704 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783787"];
4705 [label="return false; 783788"];
4706 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 783789"];
4707 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 783790"];
4708 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 783791"];
4709 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 783792"];
4710 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 783793"];
4711 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 783794"];
4712 [label="param Translate(SyntaxNode syntaxNodeOpt) 783795"];
4713 [label="param Translate(DiagnosticBag diagnostics) 783796"];
4714 [label="param Translate(bool fromImplements = false) 783797"];
4715 [label="param Translate(bool needDeclaration = false) 783798"];
4716 [label="Debug.Assert(diagnostics != null); 783799"];
4717 [label="Debug.Assert(diagnostics != null); 783800"];
4718 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783801"];
4719 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783802"];
4720 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 783803"];
4721 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783804"];
4722 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783805"];
4723 [label="object reference; 783806"];
4724 [label="Cci.INamedTypeReference typeRef; 783807"];
4725 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 783808"];
4726 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783809"];
4727 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783810"];
4728 [label="IsGenericType(container) 783811"];
4729 [label="param IsGenericType(NamedTypeSymbol toCheck) 783812"];
4730 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783813"];
4731 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783814"];
4732 [label="return false; 783815"];
4733 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783816"];
4734 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783817"];
4735 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 783818"];
4736 [label="param IsPlatformType(Cci.ITypeReference typeRef) 783819"];
4737 [label="param IsPlatformType(Cci.PlatformType platformType) 783820"];
4738 [label="param IsPlatformType(this) 783821"];
4739 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 783822"];
4740 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 783823"];
4741 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 783824"];
4742 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 783825"];
4743 [label="return namedType.SpecialType == (SpecialType)platformType; 783826"];
4744 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 783827"];
4745 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 783828"];
4746 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 783829"];
4747 [label="param Translate(SyntaxNode syntaxNodeOpt) 783830"];
4748 [label="param Translate(DiagnosticBag diagnostics) 783831"];
4749 [label="param Translate(bool fromImplements = false) 783832"];
4750 [label="param Translate(bool needDeclaration = false) 783833"];
4751 [label="Debug.Assert(diagnostics != null); 783834"];
4752 [label="Debug.Assert(diagnostics != null); 783835"];
4753 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783836"];
4754 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783837"];
4755 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 783838"];
4756 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783839"];
4757 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783840"];
4758 [label="object reference; 783841"];
4759 [label="Cci.INamedTypeReference typeRef; 783842"];
4760 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 783843"];
4761 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783844"];
4762 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783845"];
4763 [label="IsGenericType(container) 783846"];
4764 [label="param IsGenericType(NamedTypeSymbol toCheck) 783847"];
4765 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783848"];
4766 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783849"];
4767 [label="return false; 783850"];
4768 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783851"];
4769 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783852"];
4770 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 783853"];
4771 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783854"];
4772 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783855"];
4773 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 783856"];
4774 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783857"];
4775 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783858"];
4776 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 783859"];
4777 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 783860"];
4778 [label="param MustBeWrapped(ParameterSymbol param) 783861"];
4779 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 783862"];
4780 [label="var container = param.ContainingSymbol; 783863"];
4781 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 783864"];
4782 [label="ContainerIsGeneric(container) 783865"];
4783 [label="param ContainerIsGeneric(Symbol container) 783866"];
4784 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783867"];
4785 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783868"];
4786 [label="IsGenericType(container.ContainingType) 783869"];
4787 [label="param IsGenericType(NamedTypeSymbol toCheck) 783870"];
4788 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783871"];
4789 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783872"];
4790 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 783873"];
4791 [label="toCheck = toCheck.ContainingType; 783874"];
4792 [label="return false; 783875"];
4793 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783876"];
4794 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783877"];
4795 [label="param MustBeWrapped(ParameterSymbol param) 783878"];
4796 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 783879"];
4797 [label="var container = param.ContainingSymbol; 783880"];
4798 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 783881"];
4799 [label="ContainerIsGeneric(container) 783882"];
4800 [label="param ContainerIsGeneric(Symbol container) 783883"];
4801 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783884"];
4802 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783885"];
4803 [label="IsGenericType(container.ContainingType) 783886"];
4804 [label="param IsGenericType(NamedTypeSymbol toCheck) 783887"];
4805 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783888"];
4806 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783889"];
4807 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 783890"];
4808 [label="toCheck = toCheck.ContainingType; 783891"];
4809 [label="return false; 783892"];
4810 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783893"];
4811 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783894"];
4812 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 783895"];
4813 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 783896"];
4814 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 783897"];
4815 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 783898"];
4816 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 783899"];
4817 [label="bool typeIsGeneric = IsGenericType(container); 783900"];
4818 [label="IsGenericType(container) 783901"];
4819 [label="param IsGenericType(NamedTypeSymbol toCheck) 783902"];
4820 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783903"];
4821 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783904"];
4822 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 783905"];
4823 [label="toCheck = toCheck.ContainingType; 783906"];
4824 [label="return false; 783907"];
4825 [label="bool typeIsGeneric = IsGenericType(container); 783908"];
4826 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 783909"];
4827 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 783910"];
4828 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 783911"];
4829 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 783912"];
4830 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 783913"];
4831 [label="toCheck = toCheck.ContainingType; 783914"];
4832 [label="param GetSourceAssemblySecurityAttributes(this) 783915"];
4833 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 783916"];
4834 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 783917"];
4835 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 783918"];
4836 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 783919"];
4837 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 783920"];
4838 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 783921"];
4839 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 783922"];
4840 [label="bool typeIsGeneric = IsGenericType(container); 783923"];
4841 [label="IsGenericType(container) 783924"];
4842 [label="param IsGenericType(NamedTypeSymbol toCheck) 783925"];
4843 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783926"];
4844 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783927"];
4845 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 783928"];
4846 [label="toCheck = toCheck.ContainingType; 783929"];
4847 [label="return false; 783930"];
4848 [label="bool typeIsGeneric = IsGenericType(container); 783931"];
4849 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 783932"];
4850 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 783933"];
4851 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 783934"];
4852 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 783935"];
4853 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 783936"];
4854 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 783937"];
4855 [label="param Translate(SyntaxNode syntaxNodeOpt) 783938"];
4856 [label="param Translate(DiagnosticBag diagnostics) 783939"];
4857 [label="param Translate(bool fromImplements = false) 783940"];
4858 [label="param Translate(bool needDeclaration = false) 783941"];
4859 [label="Debug.Assert(diagnostics != null); 783942"];
4860 [label="Debug.Assert(diagnostics != null); 783943"];
4861 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783944"];
4862 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783945"];
4863 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 783946"];
4864 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783947"];
4865 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783948"];
4866 [label="object reference; 783949"];
4867 [label="Cci.INamedTypeReference typeRef; 783950"];
4868 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 783951"];
4869 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783952"];
4870 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783953"];
4871 [label="IsGenericType(container) 783954"];
4872 [label="param IsGenericType(NamedTypeSymbol toCheck) 783955"];
4873 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783956"];
4874 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783957"];
4875 [label="return false; 783958"];
4876 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783959"];
4877 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 783960"];
4878 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 783961"];
4879 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 783962"];
4880 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783963"];
4881 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 783964"];
4882 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 783965"];
4883 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783966"];
4884 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 783967"];
4885 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 783968"];
4886 [label="param MustBeWrapped(ParameterSymbol param) 783969"];
4887 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 783970"];
4888 [label="var container = param.ContainingSymbol; 783971"];
4889 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 783972"];
4890 [label="ContainerIsGeneric(container) 783973"];
4891 [label="param ContainerIsGeneric(Symbol container) 783974"];
4892 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783975"];
4893 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783976"];
4894 [label="IsGenericType(container.ContainingType) 783977"];
4895 [label="param IsGenericType(NamedTypeSymbol toCheck) 783978"];
4896 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783979"];
4897 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783980"];
4898 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 783981"];
4899 [label="toCheck = toCheck.ContainingType; 783982"];
4900 [label="return false; 783983"];
4901 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783984"];
4902 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783985"];
4903 [label="param MustBeWrapped(ParameterSymbol param) 783986"];
4904 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 783987"];
4905 [label="var container = param.ContainingSymbol; 783988"];
4906 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 783989"];
4907 [label="ContainerIsGeneric(container) 783990"];
4908 [label="param ContainerIsGeneric(Symbol container) 783991"];
4909 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783992"];
4910 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 783993"];
4911 [label="IsGenericType(container.ContainingType) 783994"];
4912 [label="param IsGenericType(NamedTypeSymbol toCheck) 783995"];
4913 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783996"];
4914 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 783997"];
4915 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 783998"];
4916 [label="toCheck = toCheck.ContainingType; 783999"];
4917 [label="return false; 784000"];
4918 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 784001"];
4919 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 784002"];
4920 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 784003"];
4921 [label="return Translate(corLibrary, context.Diagnostics); 784004"];
4922 [label="param Translate(DiagnosticBag diagnostics) 784005"];
4923 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 784006"];
4924 [label="return (Cci.IAssemblyReference)reference; 784007"];
4925 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 784008"];
4926 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 784009"];
4927 [label="param GetSourceModuleAttributes(this) 784010"];
4928 [label="return SourceModule.GetCustomAttributesToEmit(this); 784011"];
4929 [label="return SourceModule.GetCustomAttributesToEmit(this); 784012"];
4930 [label="return SourceModule.GetCustomAttributesToEmit(this); 784013"];
4931 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 784014"];
4932 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 784015"];
4933 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 784016"];
4934 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 784017"];
4935 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 784018"];
4936 [label="bool typeIsGeneric = IsGenericType(container); 784019"];
4937 [label="IsGenericType(container) 784020"];
4938 [label="param IsGenericType(NamedTypeSymbol toCheck) 784021"];
4939 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784022"];
4940 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784023"];
4941 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 784024"];
4942 [label="toCheck = toCheck.ContainingType; 784025"];
4943 [label="return false; 784026"];
4944 [label="bool typeIsGeneric = IsGenericType(container); 784027"];
4945 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 784028"];
4946 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 784029"];
4947 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 784030"];
4948 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 784031"];
4949 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784032"];
4950 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784033"];
4951 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784034"];
4952 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784035"];
4953 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784036"];
4954 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784037"];
4955 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 784038"];
4956 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784039"];
4957 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784040"];
4958 [label="param Translate(SyntaxNode syntaxNodeOpt) 784041"];
4959 [label="param Translate(DiagnosticBag diagnostics) 784042"];
4960 [label="param Translate(bool fromImplements = false) 784043"];
4961 [label="param Translate(bool needDeclaration = false) 784044"];
4962 [label="Debug.Assert(diagnostics != null); 784045"];
4963 [label="Debug.Assert(diagnostics != null); 784046"];
4964 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784047"];
4965 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784048"];
4966 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784049"];
4967 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784050"];
4968 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784051"];
4969 [label="object reference; 784052"];
4970 [label="Cci.INamedTypeReference typeRef; 784053"];
4971 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 784054"];
4972 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784055"];
4973 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784056"];
4974 [label="IsGenericType(container) 784057"];
4975 [label="param IsGenericType(NamedTypeSymbol toCheck) 784058"];
4976 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784059"];
4977 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784060"];
4978 [label="return false; 784061"];
4979 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784062"];
4980 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784063"];
4981 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784064"];
4982 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 784065"];
4983 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 784066"];
4984 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 784067"];
4985 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 784068"];
4986 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 784069"];
4987 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 784070"];
4988 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 784071"];
4989 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 784072"];
4990 [label="return GetNeedsGeneratedAttributesInternal(); 784073"];
4991 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 784074"];
4992 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 784075"];
4993 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 784076"];
4994 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 784077"];
4995 [label="return; 784078"];
4996 [label="Debug.Assert(symbol.IsDefinition); 784079"];
4997 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 784080"];
4998 [label="return _referenceManager; 784081"];
4999 [label="GetBoundReferenceManager(); 784082"];
5000 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 784083"];
5001 [label="param GetBoundReferenceManager(this) 784084"];
5002 [label="GetBoundReferenceManager(); 784085"];
5003 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 784086"];
5004 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 784087"];
5005 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 784088"];
5006 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 784089"];
5007 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 784090"];
5008 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 784091"];
5009 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 784092"];
5010 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 784093"];
5011 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 784094"];
5012 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 784095"];
5013 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 784096"];
5014 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 784097"];
5015 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 784098"];
5016 [label="param SynthesizeNullableAttributeIfNecessary(this) 784099"];
5017 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 784100"];
5018 [label="return null; 784101"];
5019 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784102"];
5020 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784103"];
5021 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784104"];
5022 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784105"];
5023 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784106"];
5024 [label="object reference; 784107"];
5025 [label="Cci.INamedTypeReference typeRef; 784108"];
5026 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 784109"];
5027 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784110"];
5028 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784111"];
5029 [label="IsGenericType(container) 784112"];
5030 [label="param IsGenericType(NamedTypeSymbol toCheck) 784113"];
5031 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784114"];
5032 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784115"];
5033 [label="return false; 784116"];
5034 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784117"];
5035 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784118"];
5036 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784119"];
5037 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 784120"];
5038 [label="Debug.Assert(symbol.IsDefinition); 784121"];
5039 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 784122"];
5040 [label="return _referenceManager; 784123"];
5041 [label="GetBoundReferenceManager(); 784124"];
5042 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 784125"];
5043 [label="param GetBoundReferenceManager(this) 784126"];
5044 [label="GetBoundReferenceManager(); 784127"];
5045 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 784128"];
5046 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 784129"];
5047 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784130"];
5048 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784131"];
5049 [label="param Translate(SyntaxNode syntaxNodeOpt) 784132"];
5050 [label="param Translate(DiagnosticBag diagnostics) 784133"];
5051 [label="param Translate(bool fromImplements = false) 784134"];
5052 [label="param Translate(bool needDeclaration = false) 784135"];
5053 [label="Debug.Assert(diagnostics != null); 784136"];
5054 [label="Debug.Assert(diagnostics != null); 784137"];
5055 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784138"];
5056 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784139"];
5057 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784140"];
5058 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784141"];
5059 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784142"];
5060 [label="object reference; 784143"];
5061 [label="Cci.INamedTypeReference typeRef; 784144"];
5062 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 784145"];
5063 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784146"];
5064 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784147"];
5065 [label="IsGenericType(container) 784148"];
5066 [label="param IsGenericType(NamedTypeSymbol toCheck) 784149"];
5067 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784150"];
5068 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784151"];
5069 [label="return false; 784152"];
5070 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784153"];
5071 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784154"];
5072 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784155"];
5073 [label="param GetExportedTypes(DiagnosticBag diagnostics) 784156"];
5074 [label="param GetExportedTypes(this) 784157"];
5075 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 784158"];
5076 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 784159"];
5077 [label="CalculateExportedTypes() 784160"];
5078 [label="param CalculateExportedTypes(this) 784161"];
5079 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 784162"];
5080 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 784163"];
5081 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 784164"];
5082 [label="var modules = sourceAssembly.Modules; 784165"];
5083 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 784166"];
5084 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 784167"];
5085 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 784168"];
5086 [label="sourceAssembly.DeclaringCompilation.Options 784169"];
5087 [label="get\n            {\n                return _options;\n            } 784170"];
5088 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 784171"];
5089 [label="GetForwardedTypes(sourceAssembly, builder); 784172"];
5090 [label="GetForwardedTypes(sourceAssembly, builder); 784173"];
5091 [label="GetForwardedTypes(sourceAssembly, builder) 784174"];
5092 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 784175"];
5093 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 784176"];
5094 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 784177"];
5095 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 784178"];
5096 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 784179"];
5097 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 784180"];
5098 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 784181"];
5099 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 784182"];
5100 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 784183"];
5101 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 784184"];
5102 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 784185"];
5103 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 784186"];
5104 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 784187"];
5105 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 784188"];
5106 [label="sourceAssembly.DeclaringCompilation.Options 784189"];
5107 [label="get\n            {\n                return _options;\n            } 784190"];
5108 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 784191"];
5109 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 784192"];
5110 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 784193"];
5111 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 784194"];
5112 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 784195"];
5113 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 784196"];
5114 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 784197"];
5115 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 784198"];
5116 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 784199"];
5117 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 784200"];
5118 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 784201"];
5119 [label="return seenTopLevelForwardedTypes; 784202"];
5120 [label="GetForwardedTypes(sourceAssembly, builder); 784203"];
5121 [label="return builder.ToImmutableAndFree(); 784204"];
5122 [label="_lazyExportedTypes = CalculateExportedTypes(); 784205"];
5123 [label="_lazyExportedTypes 784206"];
5124 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 784207"];
5125 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 784208"];
5126 [label="return _lazyExportedTypes; 784209"];
5127 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 784210"];
5128 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 784211"];
5129 [label="param AddEmbeddedResourcesFromAddedModules(this) 784212"];
5130 [label="var modules = _sourceAssembly.Modules; 784213"];
5131 [label="int count = modules.Length; 784214"];
5132 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 784215"];
5133 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 784216"];
5134 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 784217"];
5135 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 784218"];
5136 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 784219"];
5137 [label="this.SyntaxTrees 784220"];
5138 [label="_syntaxAndDeclarations.GetLazyState() 784221"];
5139 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 784222"];
5140 [label="=> null 784223"];
5141 [label="null 784224"];
5142 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 784225"];
5143 [label="param CommonGetBoundReferenceManager(this) 784226"];
5144 [label="GetBoundReferenceManager() 784227"];
5145 [label="param GetBoundReferenceManager(this) 784228"];
5146 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 784229"];
5147 [label="return _referenceManager; 784230"];
5148 [label="return GetBoundReferenceManager(); 784231"];
5149 [label="param SerializePdbEmbeddedCompilationOptions(BlobBuilder builder) 784232"];
5150 [label="param SerializePdbEmbeddedCompilationOptions(this) 784233"];
5151 [label="Debug.Assert(LanguageVersion == LanguageVersion.MapSpecifiedToEffectiveVersion()); 784234"];
5152 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 784235"];
5153 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 784236"];
5154 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()) 784237"];
5155 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 784238"];
5156 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 784239"];
5157 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 784240"];
5158 [label="builder.WriteUTF8(key); 784241"];
5159 [label="builder.WriteUTF8(key); 784242"];
5160 [label="builder.WriteUTF8(key); 784243"];
5161 [label="builder.WriteByte(0); 784244"];
5162 [label="builder.WriteByte(0); 784245"];
5163 [label="builder.WriteUTF8(value); 784246"];
5164 [label="builder.WriteUTF8(value); 784247"];
5165 [label="builder.WriteUTF8(value); 784248"];
5166 [label="builder.WriteByte(0); 784249"];
5167 [label="builder.WriteByte(0); 784250"];
5168 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 784251"];
5169 [label="Options 784252"];
5170 [label="get\n            {\n                return _options;\n            } 784253"];
5171 [label="return _options; 784254"];
5172 [label="if (Options.CheckOverflow)\n            {\n                WriteValue(CompilationOptionNames.Checked, Options.CheckOverflow.ToString());\n            } 784255"];
5173 [label="Options 784256"];
5174 [label="get\n            {\n                return _options;\n            } 784257"];
5175 [label="return _options; 784258"];
5176 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable)\n            {\n                WriteValue(CompilationOptionNames.Nullable, Options.NullableContextOptions.ToString());\n            } 784259"];
5177 [label="Options 784260"];
5178 [label="get\n            {\n                return _options;\n            } 784261"];
5179 [label="return _options; 784262"];
5180 [label="if (Options.AllowUnsafe)\n            {\n                WriteValue(CompilationOptionNames.Unsafe, Options.AllowUnsafe.ToString());\n            } 784263"];
5181 [label="GetPreprocessorSymbols() 784264"];
5182 [label="param GetPreprocessorSymbols(this) 784265"];
5183 [label="SyntaxTrees 784266"];
5184 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 784267"];
5185 [label="_syntaxAndDeclarations.GetLazyState() 784268"];
5186 [label="param GetLazyState(this) 784269"];
5187 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 784270"];
5188 [label="CSharpSyntaxTree? firstTree = (CSharpSyntaxTree?)SyntaxTrees.FirstOrDefault(); 784271"];
5189 [label="if (firstTree is null)\n            {\n                return ImmutableArray<string>.Empty;\n            } 784272"];
5190 [label="return firstTree.Options.PreprocessorSymbolNames.ToImmutableArray(); 784273"];
5191 [label="var preprocessorSymbols = GetPreprocessorSymbols(); 784274"];
5192 [label="if (preprocessorSymbols.Any())\n            {\n                WriteValue(CompilationOptionNames.Define, string.Join(',', preprocessorSymbols));\n            } 784275"];
5193 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784276"];
5194 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784277"];
5195 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784278"];
5196 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784279"];
5197 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784280"];
5198 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784281"];
5199 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 784282"];
5200 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784283"];
5201 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784284"];
5202 [label="param Translate(SyntaxNode syntaxNodeOpt) 784285"];
5203 [label="param Translate(DiagnosticBag diagnostics) 784286"];
5204 [label="param Translate(bool fromImplements = false) 784287"];
5205 [label="param Translate(bool needDeclaration = false) 784288"];
5206 [label="Debug.Assert(diagnostics != null); 784289"];
5207 [label="Debug.Assert(diagnostics != null); 784290"];
5208 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784291"];
5209 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784292"];
5210 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784293"];
5211 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784294"];
5212 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784295"];
5213 [label="object reference; 784296"];
5214 [label="Cci.INamedTypeReference typeRef; 784297"];
5215 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 784298"];
5216 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784299"];
5217 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784300"];
5218 [label="IsGenericType(container) 784301"];
5219 [label="param IsGenericType(NamedTypeSymbol toCheck) 784302"];
5220 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784303"];
5221 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784304"];
5222 [label="return false; 784305"];
5223 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784306"];
5224 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784307"];
5225 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784308"];
5226 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 784309"];
5227 [label="=> _sourceAssembly 784310"];
5228 [label="_sourceAssembly 784311"];
5229 [label="=> _metadataName 784312"];
5230 [label="_metadataName 784313"];
5231 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784314"];
5232 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784315"];
5233 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784316"];
5234 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784317"];
5235 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784318"];
5236 [label="object reference; 784319"];
5237 [label="Cci.INamedTypeReference typeRef; 784320"];
5238 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 784321"];
5239 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784322"];
5240 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784323"];
5241 [label="IsGenericType(container) 784324"];
5242 [label="param IsGenericType(NamedTypeSymbol toCheck) 784325"];
5243 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784326"];
5244 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784327"];
5245 [label="return false; 784328"];
5246 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784329"];
5247 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784330"];
5248 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784331"];
5249 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 784332"];
5250 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784333"];
5251 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784334"];
5252 [label="param Translate(SyntaxNode syntaxNodeOpt) 784335"];
5253 [label="param Translate(DiagnosticBag diagnostics) 784336"];
5254 [label="param Translate(bool fromImplements = false) 784337"];
5255 [label="param Translate(bool needDeclaration = false) 784338"];
5256 [label="Debug.Assert(diagnostics != null); 784339"];
5257 [label="Debug.Assert(diagnostics != null); 784340"];
5258 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784341"];
5259 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784342"];
5260 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784343"];
5261 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784344"];
5262 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784345"];
5263 [label="object reference; 784346"];
5264 [label="Cci.INamedTypeReference typeRef; 784347"];
5265 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 784348"];
5266 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784349"];
5267 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784350"];
5268 [label="IsGenericType(container) 784351"];
5269 [label="param IsGenericType(NamedTypeSymbol toCheck) 784352"];
5270 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784353"];
5271 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784354"];
5272 [label="return false; 784355"];
5273 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784356"];
5274 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784357"];
5275 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784358"];
5276 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 784359"];
5277 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 784360"];
5278 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 784361"];
5279 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 784362"];
5280 [label="GetBoundReferenceManager() 784363"];
5281 [label="param GetBoundReferenceManager(this) 784364"];
5282 [label="GetBoundReferenceManager(); 784365"];
5283 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784366"];
5284 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784367"];
5285 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784368"];
5286 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784369"];
5287 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784370"];
5288 [label="object reference; 784371"];
5289 [label="Cci.INamedTypeReference typeRef; 784372"];
5290 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 784373"];
5291 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784374"];
5292 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784375"];
5293 [label="IsGenericType(container) 784376"];
5294 [label="param IsGenericType(NamedTypeSymbol toCheck) 784377"];
5295 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784378"];
5296 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784379"];
5297 [label="return false; 784380"];
5298 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784381"];
5299 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784382"];
5300 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784383"];
5301 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 784384"];
5302 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784385"];
5303 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784386"];
5304 [label="param Translate(SyntaxNode syntaxNodeOpt) 784387"];
5305 [label="param Translate(DiagnosticBag diagnostics) 784388"];
5306 [label="param Translate(bool fromImplements = false) 784389"];
5307 [label="param Translate(bool needDeclaration = false) 784390"];
5308 [label="Debug.Assert(diagnostics != null); 784391"];
5309 [label="Debug.Assert(diagnostics != null); 784392"];
5310 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784393"];
5311 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784394"];
5312 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784395"];
5313 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784396"];
5314 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784397"];
5315 [label="object reference; 784398"];
5316 [label="Cci.INamedTypeReference typeRef; 784399"];
5317 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 784400"];
5318 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784401"];
5319 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784402"];
5320 [label="IsGenericType(container) 784403"];
5321 [label="param IsGenericType(NamedTypeSymbol toCheck) 784404"];
5322 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784405"];
5323 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784406"];
5324 [label="return false; 784407"];
5325 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784408"];
5326 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784409"];
5327 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784410"];
5328 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 784411"];
5329 [label="param MemberVisibility(Symbol symbol) 784412"];
5330 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 784413"];
5331 [label="return Cci.TypeMemberVisibility.Public; 784414"];
5332 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784415"];
5333 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784416"];
5334 [label="param Translate(SyntaxNode syntaxNodeOpt) 784417"];
5335 [label="param Translate(DiagnosticBag diagnostics) 784418"];
5336 [label="param Translate(bool fromImplements = false) 784419"];
5337 [label="param Translate(bool needDeclaration = false) 784420"];
5338 [label="Debug.Assert(diagnostics != null); 784421"];
5339 [label="Debug.Assert(diagnostics != null); 784422"];
5340 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784423"];
5341 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784424"];
5342 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784425"];
5343 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784426"];
5344 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784427"];
5345 [label="object reference; 784428"];
5346 [label="Cci.INamedTypeReference typeRef; 784429"];
5347 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 784430"];
5348 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784431"];
5349 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784432"];
5350 [label="IsGenericType(container) 784433"];
5351 [label="param IsGenericType(NamedTypeSymbol toCheck) 784434"];
5352 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784435"];
5353 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784436"];
5354 [label="return false; 784437"];
5355 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784438"];
5356 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784439"];
5357 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784440"];
5358 [label="get { return _metadataName; } 784441"];
5359 [label="return _metadataName; 784442"];
5360 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784443"];
5361 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784444"];
5362 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784445"];
5363 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784446"];
5364 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784447"];
5365 [label="object reference; 784448"];
5366 [label="Cci.INamedTypeReference typeRef; 784449"];
5367 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 784450"];
5368 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784451"];
5369 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784452"];
5370 [label="IsGenericType(container) 784453"];
5371 [label="param IsGenericType(NamedTypeSymbol toCheck) 784454"];
5372 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784455"];
5373 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784456"];
5374 [label="return false; 784457"];
5375 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784458"];
5376 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784459"];
5377 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784460"];
5378 [label="if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    } 784461"];
5379 [label="return Cci.TypeMemberVisibility.Assembly; 784462"];
5380 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 784463"];
5381 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784464"];
5382 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784465"];
5383 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784466"];
5384 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784467"];
5385 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784468"];
5386 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784469"];
5387 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 784470"];
5388 [label="GetBoundReferenceManager() 784471"];
5389 [label="GetBoundReferenceManager(); 784472"];
5390 [label="Debug.Assert(result.SpecialType == specialType); 784473"];
5391 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 784474"];
5392 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 784475"];
5393 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 784476"];
5394 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 784477"];
5395 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 784478"];
5396 [label="bool typeIsGeneric = IsGenericType(container); 784479"];
5397 [label="IsGenericType(container) 784480"];
5398 [label="param IsGenericType(NamedTypeSymbol toCheck) 784481"];
5399 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784482"];
5400 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784483"];
5401 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 784484"];
5402 [label="toCheck = toCheck.ContainingType; 784485"];
5403 [label="return false; 784486"];
5404 [label="bool typeIsGeneric = IsGenericType(container); 784487"];
5405 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 784488"];
5406 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 784489"];
5407 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 784490"];
5408 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 784491"];
5409 [label="param MustBeWrapped(ParameterSymbol param) 784492"];
5410 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 784493"];
5411 [label="var container = param.ContainingSymbol; 784494"];
5412 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 784495"];
5413 [label="ContainerIsGeneric(container) 784496"];
5414 [label="param ContainerIsGeneric(Symbol container) 784497"];
5415 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 784498"];
5416 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 784499"];
5417 [label="IsGenericType(container.ContainingType) 784500"];
5418 [label="param IsGenericType(NamedTypeSymbol toCheck) 784501"];
5419 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784502"];
5420 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784503"];
5421 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 784504"];
5422 [label="toCheck = toCheck.ContainingType; 784505"];
5423 [label="return false; 784506"];
5424 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 784507"];
5425 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 784508"];
5426 [label="param MustBeWrapped(ParameterSymbol param) 784509"];
5427 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 784510"];
5428 [label="var container = param.ContainingSymbol; 784511"];
5429 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 784512"];
5430 [label="ContainerIsGeneric(container) 784513"];
5431 [label="param ContainerIsGeneric(Symbol container) 784514"];
5432 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 784515"];
5433 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 784516"];
5434 [label="IsGenericType(container.ContainingType) 784517"];
5435 [label="param IsGenericType(NamedTypeSymbol toCheck) 784518"];
5436 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784519"];
5437 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784520"];
5438 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 784521"];
5439 [label="toCheck = toCheck.ContainingType; 784522"];
5440 [label="return false; 784523"];
5441 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 784524"];
5442 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 784525"];
5443 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784526"];
5444 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 784527"];
5445 [label="param Translate(SyntaxNode syntaxNodeOpt) 784528"];
5446 [label="param Translate(DiagnosticBag diagnostics) 784529"];
5447 [label="param Translate(bool fromImplements = false) 784530"];
5448 [label="param Translate(bool needDeclaration = false) 784531"];
5449 [label="Debug.Assert(diagnostics != null); 784532"];
5450 [label="Debug.Assert(diagnostics != null); 784533"];
5451 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784534"];
5452 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 784535"];
5453 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 784536"];
5454 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784537"];
5455 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 784538"];
5456 [label="object reference; 784539"];
5457 [label="Cci.INamedTypeReference typeRef; 784540"];
5458 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 784541"];
5459 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784542"];
5460 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784543"];
5461 [label="IsGenericType(container) 784544"];
5462 [label="param IsGenericType(NamedTypeSymbol toCheck) 784545"];
5463 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784546"];
5464 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 784547"];
5465 [label="return false; 784548"];
5466 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784549"];
5467 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 784550"];
5468 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 784551"];
5469 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 784552"];
5470 [label="toCheck = toCheck.ContainingType; 784553"];
5471 [label="Debug.Assert(symbol.IsDefinition); 784554"];
5472 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 784555"];
5473 [label="return _referenceManager; 784556"];
5474 [label="GetBoundReferenceManager(); 784557"];
5475 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 784558"];
5476 [label="param GetBoundReferenceManager(this) 784559"];
5477 [label="GetBoundReferenceManager(); 784560"];
5478 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 784561"];
5479 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 784562"];
5480 [label="param SynthesizeNullableAttributeIfNecessary(this) 784563"];
5481 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 784564"];
5482 [label="return _referenceManager; 784565"];
5483 [label="GetBoundReferenceManager(); 784566"];
5484 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 784567"];
5485 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 784568"];
5486 [label="diagnostics.AddRange(result.Diagnostics); 784569"];
5487 [label="diagnostics.AddRange(result.Diagnostics); 784570"];
5488 [label="assembly = executableStream.ToImmutable(); 784571"];
5489 [label="assembly = executableStream.ToImmutable(); 784572"];
5490 [label="if (result.Success)\n            {\n                return new EmitOutput(assembly, pdb);\n            } 784573"];
5491 [label="return new EmitOutput(assembly, pdb); 784574"];
5492 [label="return new EmitOutput(assembly, pdb); 784575"];
5493 [label="return new EmitOutput(assembly, pdb); 784576"];
5494 [label="new EmitOutput(assembly, pdb) 784577"];
5495 [label="param EmitOutput(ImmutableArray<byte> assembly) 784578"];
5496 [label="param EmitOutput(ImmutableArray<byte> pdb) 784579"];
5497 [label="param EmitOutput(this) 784580"];
5498 [label="Assembly 784581"];
5499 [label="if (pdb.IsDefault)\n            {\n                // We didn't emit a discrete PDB file, so we'll look for an embedded PDB instead.\n                using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                }\n            } 784582"];
5500 [label="using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                } 784583"];
5501 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 784584"];
5502 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 784585"];
5503 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 784586"];
5504 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 784587"];
5505 [label="using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        } 784588"];
5506 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 784589"];
5507 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 784590"];
5508 [label="pdb = readMetadata(mdReader); 784591"];
5509 [label="readMetadata(mdReader) 784592"];
5510 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 784593"];
5511 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 784594"];
5512 [label="var length = mdReader.MetadataLength; 784595"];
5513 [label="var bytes = new byte[length]; 784596"];
5514 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 784597"];
5515 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 784598"];
5516 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 784599"];
5517 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 784600"];
5518 [label="return ImmutableArray.Create(bytes); 784601"];
5519 [label="return ImmutableArray.Create(bytes); 784602"];
5520 [label="Pdb 784603"];
5521 [label="get { return this.Assembly.GetPublicSymbol(); } 784604"];
5522 [label="this.Assembly 784605"];
5523 [label="get\n            {\n                return SourceAssembly;\n            } 784606"];
5524 [label="SourceAssembly 784607"];
5525 [label="GetBoundReferenceManager() 784608"];
5526 [label="param GetBoundReferenceManager(this) 784609"];
5527 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 784610"];
5528 [label="return _referenceManager; 784611"];
5529 [label="GetBoundReferenceManager(); 784612"];
5530 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 784613"];
5531 [label="return this.Assembly.GetPublicSymbol(); 784614"];
5532 [label="_diagnostics = testEnvironment.GetDiagnostics(); 784615"];
5533 [label="_diagnostics 784616"];
5534 [label="EmittedAssemblyData = testEnvironment.GetMainImage(); 784617"];
5535 [label="EmittedAssemblyData 784618"];
5536 [label="EmittedAssemblyPdb = testEnvironment.GetMainPdb(); 784619"];
5537 [label="EmittedAssemblyPdb 784620"];
5538 [label="_testData = ((IInternalRuntimeEnvironment)testEnvironment).GetCompilationTestData(); 784621"];
5539 [label="_testData 784622"];
5540 [label="return _compilation.Assembly.Identity.GetDisplayName(); 784623"];
5541 [label="_compilation.Assembly 784624"];
5542 [label="get { return this.Assembly.GetPublicSymbol(); } 784625"];
5543 [label="this.Assembly 784626"];
5544 [label="SourceAssembly 784627"];
5545 [label="GetBoundReferenceManager() 784628"];
5546 [label="param GetBoundReferenceManager(this) 784629"];
5547 [label="GetBoundReferenceManager(); 784630"];
5548 [label="return _compilation.Assembly.Identity.GetDisplayName(); 784631"];
5549 [label="_allModuleData = testEnvironment.GetAllModuleData(); 784632"];
5550 [label="_allModuleData 784633"];
5551 [label="testEnvironment.Verify(peVerify); 784634"];
5552 [label="testEnvironment.Verify(peVerify); 784635"];
5553 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 784636"];
5554 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 784637"];
5555 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 784638"];
5556 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 784639"];
5557 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 784640"];
5558 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 784641"];
5559 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 784642"];
5560 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 784643"];
5561 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 784644"];
5562 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 784645"];
5563 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 784646"];
5564 [label="RunValidators(verifier, assemblyValidator, symbolValidator); 784647"];
5565 [label="RunValidators(verifier, assemblyValidator, symbolValidator); 784648"];
5566 [label="RunValidators(verifier, assemblyValidator, symbolValidator); 784649"];
5567 [label="RunValidators(verifier, assemblyValidator, symbolValidator) 784650"];
5568 [label="param RunValidators(CompilationVerifier verifier) 784651"];
5569 [label="param RunValidators(Action<PEAssembly> assemblyValidator) 784652"];
5570 [label="param RunValidators(Action<IModuleSymbol> symbolValidator) 784653"];
5571 [label="CustomAssert.True(assemblyValidator != null || symbolValidator != null); 784654"];
5572 [label="CustomAssert.True(assemblyValidator != null || symbolValidator != null); 784655"];
5573 [label="CustomAssert.True(assemblyValidator != null || symbolValidator != null); 784656"];
5574 [label="CustomAssert.True(assemblyValidator != null || symbolValidator != null); 784657"];
5575 [label="verifier.GetMetadata() 784658"];
5576 [label="param GetMetadata(this) 784659"];
5577 [label="if (EmittedAssemblyData == null)\n            {\n                throw new InvalidOperationException('You must call Emit before calling GetAllModuleMetadata.');\n            } 784660"];
5578 [label="if (EmittedAssemblyData == null)\n            {\n                throw new InvalidOperationException('You must call Emit before calling GetAllModuleMetadata.');\n            } 784661"];
5579 [label="if (_compilation.Options.OutputKind.IsNetModule())\n            {\n                var metadata = ModuleMetadata.CreateFromImage(EmittedAssemblyData);\n                metadata.Module.PretendThereArentNoPiaLocalTypes();\n                return metadata;\n            }\n            else\n            {\n                var images = new List<ImmutableArray<byte>>\n                {\n                    EmittedAssemblyData\n                };\n\n                if (_allModuleData != null)\n                {\n                    images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image));\n                }\n\n                return AssemblyMetadata.Create(images.Select(image =>\n                {\n                    var metadata = ModuleMetadata.CreateFromImage(image);\n                    metadata.Module.PretendThereArentNoPiaLocalTypes();\n                    return metadata;\n                }));\n            } 784662"];
5580 [label="_compilation.Options 784663"];
5581 [label="get { return _options; } 784664"];
5582 [label="var images = new List<ImmutableArray<byte>>\n                {\n                    EmittedAssemblyData\n                }; 784665"];
5583 [label="var images = new List<ImmutableArray<byte>>\n                {\n                    EmittedAssemblyData\n                }; 784666"];
5584 [label="if (_allModuleData != null)\n                {\n                    images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image));\n                } 784667"];
5585 [label="if (_allModuleData != null)\n                {\n                    images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image));\n                } 784668"];
5586 [label="images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image)); 784669"];
5587 [label="images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image)); 784670"];
5588 [label="images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image)); 784671"];
5589 [label="images.AddRange(_allModuleData.Where(m => m.Kind == OutputKind.NetModule).Select(m => m.Image)); 784672"];
5590 [label="return AssemblyMetadata.Create(images.Select(image =>\n                {\n                    var metadata = ModuleMetadata.CreateFromImage(image);\n                    metadata.Module.PretendThereArentNoPiaLocalTypes();\n                    return metadata;\n                })); 784673"];
5591 [label="return AssemblyMetadata.Create(images.Select(image =>\n                {\n                    var metadata = ModuleMetadata.CreateFromImage(image);\n                    metadata.Module.PretendThereArentNoPiaLocalTypes();\n                    return metadata;\n                })); 784674"];
5592 [label="return AssemblyMetadata.Create(images.Select(image =>\n                {\n                    var metadata = ModuleMetadata.CreateFromImage(image);\n                    metadata.Module.PretendThereArentNoPiaLocalTypes();\n                    return metadata;\n                })); 784675"];
5593 [label="var emittedMetadata = verifier.GetMetadata(); 784676"];
5594 [label="if (assemblyValidator != null)\n            {\n                CustomAssert.Equal(MetadataImageKind.Assembly, emittedMetadata.Kind);\n\n                var assembly = ((AssemblyMetadata)emittedMetadata).GetAssembly();\n                assemblyValidator(assembly);\n            } 784677"];
5595 [label="if (assemblyValidator != null)\n            {\n                CustomAssert.Equal(MetadataImageKind.Assembly, emittedMetadata.Kind);\n\n                var assembly = ((AssemblyMetadata)emittedMetadata).GetAssembly();\n                assemblyValidator(assembly);\n            } 784678"];
5596 [label="if (symbolValidator != null)\n            {\n                var reference = emittedMetadata.Kind == MetadataImageKind.Assembly\n                    ? ((AssemblyMetadata)emittedMetadata).GetReference()\n                    : ((ModuleMetadata)emittedMetadata).GetReference();\n\n                var moduleSymbol = verifier.GetSymbolFromMetadata(reference, verifier.Compilation.Options.MetadataImportOptions);\n                symbolValidator(moduleSymbol);\n            } 784679"];
5597 [label="if (symbolValidator != null)\n            {\n                var reference = emittedMetadata.Kind == MetadataImageKind.Assembly\n                    ? ((AssemblyMetadata)emittedMetadata).GetReference()\n                    : ((ModuleMetadata)emittedMetadata).GetReference();\n\n                var moduleSymbol = verifier.GetSymbolFromMetadata(reference, verifier.Compilation.Options.MetadataImportOptions);\n                symbolValidator(moduleSymbol);\n            } 784680"];
5598 [label="var reference = emittedMetadata.Kind == MetadataImageKind.Assembly\n                    ? ((AssemblyMetadata)emittedMetadata).GetReference()\n                    : ((ModuleMetadata)emittedMetadata).GetReference(); 784681"];
5599 [label="emittedMetadata.Kind == MetadataImageKind.Assembly 784682"];
5600 [label="var moduleSymbol = verifier.GetSymbolFromMetadata(reference, verifier.Compilation.Options.MetadataImportOptions); 784683"];
5601 [label="verifier.Compilation 784684"];
5602 [label="=> _compilation 784685"];
5603 [label="_compilation 784686"];
5604 [label="var moduleSymbol = verifier.GetSymbolFromMetadata(reference, verifier.Compilation.Options.MetadataImportOptions); 784687"];
5605 [label="var moduleSymbol = verifier.GetSymbolFromMetadata(reference, verifier.Compilation.Options.MetadataImportOptions); 784688"];
5606 [label="verifier.Compilation.Options 784689"];
5607 [label="get { return _options; } 784690"];
5608 [label="verifier.GetSymbolFromMetadata(reference, verifier.Compilation.Options.MetadataImportOptions) 784691"];
5609 [label="param GetSymbolFromMetadata(MetadataReference metadataReference) 784692"];
5610 [label="param GetSymbolFromMetadata(MetadataImportOptions importOptions) 784693"];
5611 [label="param GetSymbolFromMetadata(this) 784694"];
5612 [label="var dummy = _compilation\n                .RemoveAllSyntaxTrees()\n                .AddReferences(metadataReference)\n                .WithAssemblyName('Dummy')\n                .WithOptions(_compilation.Options.WithMetadataImportOptions(importOptions)); 784695"];
5613 [label="var dummy = _compilation\n                .RemoveAllSyntaxTrees()\n                .AddReferences(metadataReference)\n                .WithAssemblyName('Dummy')\n                .WithOptions(_compilation.Options.WithMetadataImportOptions(importOptions)); 784696"];
5614 [label="param CommonRemoveAllSyntaxTrees(this) 784697"];
5615 [label="this.RemoveAllSyntaxTrees() 784698"];
5616 [label="param RemoveAllSyntaxTrees(this) 784699"];
5617 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 784700"];
5618 [label="return Update(\n                _referenceManager,\n                reuseReferenceManager: !syntaxAndDeclarations.MayHaveReferenceDirectives(),\n                syntaxAndDeclarations: syntaxAndDeclarations.WithExternalSyntaxTrees(ImmutableArray<SyntaxTree>.Empty)); 784701"];
5619 [label="syntaxAndDeclarations.MayHaveReferenceDirectives() 784702"];
5620 [label="param MayHaveReferenceDirectives(this) 784703"];
5621 [label="var state = _lazyState; 784704"];
5622 [label="if (state == null)\n            {\n                var externalSyntaxTrees = this.ExternalSyntaxTrees;\n                return externalSyntaxTrees.Any(t => t.HasReferenceOrLoadDirectives());\n            } 784705"];
5623 [label="if (state == null)\n            {\n                var externalSyntaxTrees = this.ExternalSyntaxTrees;\n                return externalSyntaxTrees.Any(t => t.HasReferenceOrLoadDirectives());\n            } 784706"];
5624 [label="return state.DeclarationTable.ReferenceDirectives.Any(); 784707"];
5625 [label="return Update(\n                _referenceManager,\n                reuseReferenceManager: !syntaxAndDeclarations.MayHaveReferenceDirectives(),\n                syntaxAndDeclarations: syntaxAndDeclarations.WithExternalSyntaxTrees(ImmutableArray<SyntaxTree>.Empty)); 784708"];
5626 [label="return Update(\n                _referenceManager,\n                reuseReferenceManager: !syntaxAndDeclarations.MayHaveReferenceDirectives(),\n                syntaxAndDeclarations: syntaxAndDeclarations.WithExternalSyntaxTrees(ImmutableArray<SyntaxTree>.Empty)); 784709"];
5627 [label="syntaxAndDeclarations.WithExternalSyntaxTrees(ImmutableArray<SyntaxTree>.Empty) 784710"];
5628 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 784711"];
5629 [label="param WithExternalSyntaxTrees(this) 784712"];
5630 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 784713"];
5631 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 784714"];
5632 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 784715"];
5633 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 784716"];
5634 [label="param SyntaxAndDeclarationManager(State state) 784717"];
5635 [label="param SyntaxAndDeclarationManager(this) 784718"];
5636 [label="externalSyntaxTrees 784719"];
5637 [label="param SyntaxAndDeclarationManager(this) 784720"];
5638 [label="param SyntaxAndDeclarationManager(this) 784721"];
5639 [label="_lazyState 784722"];
5640 [label="_lazyState 784723"];
5641 [label="return Update(\n                _referenceManager,\n                reuseReferenceManager: !syntaxAndDeclarations.MayHaveReferenceDirectives(),\n                syntaxAndDeclarations: syntaxAndDeclarations.WithExternalSyntaxTrees(ImmutableArray<SyntaxTree>.Empty)); 784724"];
5642 [label="Update(\n                _referenceManager,\n                reuseReferenceManager: !syntaxAndDeclarations.MayHaveReferenceDirectives(),\n                syntaxAndDeclarations: syntaxAndDeclarations.WithExternalSyntaxTrees(ImmutableArray<SyntaxTree>.Empty)) 784725"];
5643 [label="param Update(ReferenceManager referenceManager) 784726"];
5644 [label="param Update(bool reuseReferenceManager) 784727"];
5645 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 784728"];
5646 [label="param Update(this) 784729"];
5647 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 784730"];
5648 [label="this.PreviousSubmission 784731"];
5649 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 784732"];
5650 [label="ScriptCompilationInfo 784733"];
5651 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 784734"];
5652 [label="this.SubmissionReturnType 784735"];
5653 [label="this.HostObjectType 784736"];
5654 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 784737"];
5655 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 784738"];
5656 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 784739"];
5657 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 784740"];
5658 [label="param CSharpCompilation(Type? submissionReturnType) 784741"];
5659 [label="param CSharpCompilation(Type? hostObjectType) 784742"];
5660 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 784743"];
5661 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 784744"];
5662 [label="param CSharpCompilation(this) 784745"];
5663 [label="previousSubmission 784746"];
5664 [label="submissionReturnType 784747"];
5665 [label="hostObjectType 784748"];
5666 [label="syntaxAndDeclarations 784749"];
5667 [label="eventQueue 784750"];
5668 [label="param CSharpCompilation(this) 784751"];
5669 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 784752"];
5670 [label="param CSharpCompilation(Type? submissionReturnType) 784753"];
5671 [label="param CSharpCompilation(Type? hostObjectType) 784754"];
5672 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 784755"];
5673 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 784756"];
5674 [label="param CSharpCompilation(this) 784757"];
5675 [label="eventQueue 784758"];
5676 [label="param CSharpCompilation(this) 784759"];
5677 [label="_options 784760"];
5678 [label="_globalImports 784761"];
5679 [label="_previousSubmissionImports 784762"];
5680 [label="_globalNamespaceAlias 784763"];
5681 [label="_scriptClass 784764"];
5682 [label="_lazyHostObjectTypeSymbol 784765"];
5683 [label="_lazyImportInfos 784766"];
5684 [label="_conversions 784767"];
5685 [label="_anonymousTypeManager 784768"];
5686 [label="_lazyGlobalNamespace 784769"];
5687 [label="builtInOperators 784770"];
5688 [label="_lazyAssemblySymbol 784771"];
5689 [label="_referenceManager 784772"];
5690 [label="_syntaxAndDeclarations 784773"];
5691 [label="_lazyEntryPoint 784774"];
5692 [label="_lazyEmitNullablePublicOnly 784775"];
5693 [label="_lazyCompilationUnitCompletedTrees 784776"];
5694 [label="NullableAnalysisData 784777"];
5695 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 784778"];
5696 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 784779"];
5697 [label="_externAliasTargets 784780"];
5698 [label="_moduleInitializerMethods 784781"];
5699 [label="_binderFactories 784782"];
5700 [label="_ignoreAccessibilityBinderFactories 784783"];
5701 [label="_lazyDeclarationDiagnostics 784784"];
5702 [label="_declarationDiagnosticsFrozen 784785"];
5703 [label="new DiagnosticBag() 784786"];
5704 [label="_additionalCodegenWarnings = new DiagnosticBag() 784787"];
5705 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 784788"];
5706 [label="this.builtInOperators = new BuiltInOperators(this); 784789"];
5707 [label="this.builtInOperators = new BuiltInOperators(this); 784790"];
5708 [label="new BuiltInOperators(this) 784791"];
5709 [label="param BuiltInOperators(CSharpCompilation compilation) 784792"];
5710 [label="param BuiltInOperators(this) 784793"];
5711 [label="_compilation 784794"];
5712 [label="_builtInUnaryOperators 784795"];
5713 [label="_builtInOperators 784796"];
5714 [label="_compilation 784797"];
5715 [label="this.builtInOperators 784798"];
5716 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 784799"];
5717 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 784800"];
5718 [label="LanguageVersion? result = null; 784801"];
5719 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 784802"];
5720 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 784803"];
5721 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 784804"];
5722 [label="this.LanguageVersion 784805"];
5723 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 784806"];
5724 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784807"];
5725 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784808"];
5726 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784809"];
5727 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784810"];
5728 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784811"];
5729 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784812"];
5730 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 784813"];
5731 [label="referenceManager.AssertCanReuseForCompilation(this); 784814"];
5732 [label="_syntaxAndDeclarations 784815"];
5733 [label="Debug.Assert(_lazyAssemblySymbol is null); 784816"];
5734 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 784817"];
5735 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 784818"];
5736 [label="return Update(\n                _referenceManager,\n                reuseReferenceManager: !syntaxAndDeclarations.MayHaveReferenceDirectives(),\n                syntaxAndDeclarations: syntaxAndDeclarations.WithExternalSyntaxTrees(ImmutableArray<SyntaxTree>.Empty)); 784819"];
5737 [label="return this.RemoveAllSyntaxTrees(); 784820"];
5738 [label="var dummy = _compilation\n                .RemoveAllSyntaxTrees()\n                .AddReferences(metadataReference)\n                .WithAssemblyName('Dummy')\n                .WithOptions(_compilation.Options.WithMetadataImportOptions(importOptions)); 784821"];
5739 [label="_compilation\n                .RemoveAllSyntaxTrees()\n                .AddReferences(metadataReference) 784822"];
5740 [label="var dummy = _compilation\n                .RemoveAllSyntaxTrees()\n                .AddReferences(metadataReference)\n                .WithAssemblyName('Dummy')\n                .WithOptions(_compilation.Options.WithMetadataImportOptions(importOptions)); 784823"];
5741 [label="param CommonWithReferences(IEnumerable<MetadataReference> newReferences) 784824"];
5742 [label="param CommonWithReferences(this) 784825"];
5743 [label="return WithReferences(newReferences); 784826"];
5744 [label="WithReferences(newReferences) 784827"];
5745 [label="param WithReferences(IEnumerable<MetadataReference>? references) 784828"];
5746 [label="param WithReferences(this) 784829"];
5747 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                ValidateReferences<CSharpCompilationReference>(references),\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                _syntaxAndDeclarations,\n                this.SemanticModelProvider); 784830"];
5748 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                ValidateReferences<CSharpCompilationReference>(references),\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                _syntaxAndDeclarations,\n                this.SemanticModelProvider); 784831"];
5749 [label="this.PreviousSubmission 784832"];
5750 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 784833"];
5751 [label="ScriptCompilationInfo 784834"];
5752 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                ValidateReferences<CSharpCompilationReference>(references),\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                _syntaxAndDeclarations,\n                this.SemanticModelProvider); 784835"];
5753 [label="this.SubmissionReturnType 784836"];
5754 [label="=> ScriptCompilationInfo 784837"];
5755 [label="this.HostObjectType 784838"];
5756 [label="=> ScriptCompilationInfo 784839"];
5757 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                ValidateReferences<CSharpCompilationReference>(references),\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                _syntaxAndDeclarations,\n                this.SemanticModelProvider); 784840"];
5758 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                ValidateReferences<CSharpCompilationReference>(references),\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                _syntaxAndDeclarations,\n                this.SemanticModelProvider) 784841"];
5759 [label="param CSharpCompilation(string? assemblyName) 784842"];
5760 [label="param CSharpCompilation(CSharpCompilationOptions options) 784843"];
5761 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 784844"];
5762 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 784845"];
5763 [label="param CSharpCompilation(Type? submissionReturnType) 784846"];
5764 [label="param CSharpCompilation(Type? hostObjectType) 784847"];
5765 [label="param CSharpCompilation(bool isSubmission) 784848"];
5766 [label="param CSharpCompilation(ReferenceManager? referenceManager) 784849"];
5767 [label="param CSharpCompilation(bool reuseReferenceManager) 784850"];
5768 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 784851"];
5769 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 784852"];
5770 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 784853"];
5771 [label="param CSharpCompilation(this) 784854"];
5772 [label="previousSubmission 784855"];
5773 [label="submissionReturnType 784856"];
5774 [label="hostObjectType 784857"];
5775 [label="referenceManager 784858"];
5776 [label="reuseReferenceManager 784859"];
5777 [label="eventQueue 784860"];
5778 [label="param CSharpCompilation(this) 784861"];
5779 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 784862"];
5780 [label="param CSharpCompilation(Type? submissionReturnType) 784863"];
5781 [label="param CSharpCompilation(Type? hostObjectType) 784864"];
5782 [label="param CSharpCompilation(ReferenceManager? referenceManager) 784865"];
5783 [label="param CSharpCompilation(bool reuseReferenceManager) 784866"];
5784 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 784867"];
5785 [label="param CSharpCompilation(this) 784868"];
5786 [label="eventQueue 784869"];
5787 [label="param CSharpCompilation(this) 784870"];
5788 [label="_options 784871"];
5789 [label="_globalImports 784872"];
5790 [label="_previousSubmissionImports 784873"];
5791 [label="_globalNamespaceAlias 784874"];
5792 [label="_scriptClass 784875"];
5793 [label="_lazyHostObjectTypeSymbol 784876"];
5794 [label="_lazyImportInfos 784877"];
5795 [label="_conversions 784878"];
5796 [label="_anonymousTypeManager 784879"];
5797 [label="_lazyGlobalNamespace 784880"];
5798 [label="builtInOperators 784881"];
5799 [label="_lazyAssemblySymbol 784882"];
5800 [label="_referenceManager 784883"];
5801 [label="_syntaxAndDeclarations 784884"];
5802 [label="_lazyEntryPoint 784885"];
5803 [label="_lazyEmitNullablePublicOnly 784886"];
5804 [label="_lazyCompilationUnitCompletedTrees 784887"];
5805 [label="NullableAnalysisData 784888"];
5806 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 784889"];
5807 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 784890"];
5808 [label="_externAliasTargets 784891"];
5809 [label="_moduleInitializerMethods 784892"];
5810 [label="_binderFactories 784893"];
5811 [label="_ignoreAccessibilityBinderFactories 784894"];
5812 [label="_lazyDeclarationDiagnostics 784895"];
5813 [label="_declarationDiagnosticsFrozen 784896"];
5814 [label="new DiagnosticBag() 784897"];
5815 [label="_additionalCodegenWarnings = new DiagnosticBag() 784898"];
5816 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 784899"];
5817 [label="this.builtInOperators = new BuiltInOperators(this); 784900"];
5818 [label="this.builtInOperators = new BuiltInOperators(this); 784901"];
5819 [label="new BuiltInOperators(this) 784902"];
5820 [label="param BuiltInOperators(CSharpCompilation compilation) 784903"];
5821 [label="param BuiltInOperators(this) 784904"];
5822 [label="_compilation 784905"];
5823 [label="_builtInUnaryOperators 784906"];
5824 [label="_builtInOperators 784907"];
5825 [label="_compilation 784908"];
5826 [label="this.builtInOperators 784909"];
5827 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 784910"];
5828 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 784911"];
5829 [label="LanguageVersion? result = null; 784912"];
5830 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 784913"];
5831 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 784914"];
5832 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 784915"];
5833 [label="this.LanguageVersion 784916"];
5834 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 784917"];
5835 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784918"];
5836 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784919"];
5837 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784920"];
5838 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784921"];
5839 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784922"];
5840 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 784923"];
5841 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 784924"];
5842 [label="this.Options 784925"];
5843 [label="get\n            {\n                return _options;\n            } 784926"];
5844 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 784927"];
5845 [label="Debug.Assert(_lazyAssemblySymbol is null); 784928"];
5846 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 784929"];
5847 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 784930"];
5848 [label="return WithReferences(newReferences); 784931"];
5849 [label="param CommonWithAssemblyName(string? assemblyName) 784932"];
5850 [label="param CommonWithAssemblyName(this) 784933"];
5851 [label="return WithAssemblyName(assemblyName); 784934"];
5852 [label="WithAssemblyName(assemblyName) 784935"];
5853 [label="param WithAssemblyName(string? assemblyName) 784936"];
5854 [label="param WithAssemblyName(this) 784937"];
5855 [label="return new CSharpCompilation(\n                assemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager: assemblyName == this.AssemblyName,\n                _syntaxAndDeclarations,\n                this.SemanticModelProvider); 784938"];
5856 [label="return new CSharpCompilation(\n                assemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager: assemblyName == this.AssemblyName,\n                _syntaxAndDeclarations,\n                this.SemanticModelProvider); 784939"];
5857 [label="this.PreviousSubmission 784940"];
5858 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 784941"];
5859 [label="return new CSharpCompilation(\n                assemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager: assemblyName == this.AssemblyName,\n                _syntaxAndDeclarations,\n                this.SemanticModelProvider); 784942"];
5860 [label="this.SubmissionReturnType 784943"];
5861 [label="=> ScriptCompilationInfo 784944"];
5862 [label="this.HostObjectType 784945"];
5863 [label="=> ScriptCompilationInfo 784946"];
5864 [label="return new CSharpCompilation(\n                assemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager: assemblyName == this.AssemblyName,\n                _syntaxAndDeclarations,\n                this.SemanticModelProvider); 784947"];
5865 [label="return new CSharpCompilation(\n                assemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager: assemblyName == this.AssemblyName,\n                _syntaxAndDeclarations,\n                this.SemanticModelProvider); 784948"];
5866 [label="new CSharpCompilation(\n                assemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager: assemblyName == this.AssemblyName,\n                _syntaxAndDeclarations,\n                this.SemanticModelProvider) 784949"];
5867 [label="param CSharpCompilation(string? assemblyName) 784950"];
5868 [label="param CSharpCompilation(CSharpCompilationOptions options) 784951"];
5869 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 784952"];
5870 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 784953"];
5871 [label="param CSharpCompilation(Type? submissionReturnType) 784954"];
5872 [label="param CSharpCompilation(Type? hostObjectType) 784955"];
5873 [label="param CSharpCompilation(bool isSubmission) 784956"];
5874 [label="param CSharpCompilation(ReferenceManager? referenceManager) 784957"];
5875 [label="param CSharpCompilation(bool reuseReferenceManager) 784958"];
5876 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 784959"];
5877 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 784960"];
5878 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 784961"];
5879 [label="param CSharpCompilation(this) 784962"];
5880 [label="previousSubmission 784963"];
5881 [label="submissionReturnType 784964"];
5882 [label="hostObjectType 784965"];
5883 [label="eventQueue 784966"];
5884 [label="param CSharpCompilation(this) 784967"];
5885 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 784968"];
5886 [label="param CSharpCompilation(Type? submissionReturnType) 784969"];
5887 [label="param CSharpCompilation(Type? hostObjectType) 784970"];
5888 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 784971"];
5889 [label="param CSharpCompilation(this) 784972"];
5890 [label="eventQueue 784973"];
5891 [label="param CSharpCompilation(this) 784974"];
5892 [label="param CSharpCompilation(this) 784975"];
5893 [label="_options 784976"];
5894 [label="_globalImports 784977"];
5895 [label="_previousSubmissionImports 784978"];
5896 [label="_globalNamespaceAlias 784979"];
5897 [label="_scriptClass 784980"];
5898 [label="_lazyHostObjectTypeSymbol 784981"];
5899 [label="_lazyImportInfos 784982"];
5900 [label="_conversions 784983"];
5901 [label="_anonymousTypeManager 784984"];
5902 [label="_lazyGlobalNamespace 784985"];
5903 [label="builtInOperators 784986"];
5904 [label="_lazyAssemblySymbol 784987"];
5905 [label="_referenceManager 784988"];
5906 [label="_syntaxAndDeclarations 784989"];
5907 [label="_lazyEntryPoint 784990"];
5908 [label="_lazyEmitNullablePublicOnly 784991"];
5909 [label="_lazyCompilationUnitCompletedTrees 784992"];
5910 [label="NullableAnalysisData 784993"];
5911 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 784994"];
5912 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 784995"];
5913 [label="_externAliasTargets 784996"];
5914 [label="_moduleInitializerMethods 784997"];
5915 [label="_binderFactories 784998"];
5916 [label="_ignoreAccessibilityBinderFactories 784999"];
5917 [label="_lazyDeclarationDiagnostics 785000"];
5918 [label="_declarationDiagnosticsFrozen 785001"];
5919 [label="new DiagnosticBag() 785002"];
5920 [label="_additionalCodegenWarnings = new DiagnosticBag() 785003"];
5921 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 785004"];
5922 [label="this.builtInOperators = new BuiltInOperators(this); 785005"];
5923 [label="this.builtInOperators = new BuiltInOperators(this); 785006"];
5924 [label="new BuiltInOperators(this) 785007"];
5925 [label="param BuiltInOperators(CSharpCompilation compilation) 785008"];
5926 [label="param BuiltInOperators(this) 785009"];
5927 [label="_compilation 785010"];
5928 [label="_builtInUnaryOperators 785011"];
5929 [label="_builtInOperators 785012"];
5930 [label="_compilation 785013"];
5931 [label="this.builtInOperators 785014"];
5932 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 785015"];
5933 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 785016"];
5934 [label="LanguageVersion? result = null; 785017"];
5935 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 785018"];
5936 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 785019"];
5937 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 785020"];
5938 [label="this.LanguageVersion 785021"];
5939 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 785022"];
5940 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785023"];
5941 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785024"];
5942 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785025"];
5943 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785026"];
5944 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785027"];
5945 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785028"];
5946 [label="Debug.Assert(_lazyAssemblySymbol is null); 785029"];
5947 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 785030"];
5948 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 785031"];
5949 [label="return WithAssemblyName(assemblyName); 785032"];
5950 [label="_compilation.Options 785033"];
5951 [label="get { return _options; } 785034"];
5952 [label="var dummy = _compilation\n                .RemoveAllSyntaxTrees()\n                .AddReferences(metadataReference)\n                .WithAssemblyName('Dummy')\n                .WithOptions(_compilation.Options.WithMetadataImportOptions(importOptions)); 785035"];
5953 [label="var dummy = _compilation\n                .RemoveAllSyntaxTrees()\n                .AddReferences(metadataReference)\n                .WithAssemblyName('Dummy')\n                .WithOptions(_compilation.Options.WithMetadataImportOptions(importOptions)); 785036"];
5954 [label="param CommonWithOptions(CompilationOptions options) 785037"];
5955 [label="param CommonWithOptions(this) 785038"];
5956 [label="return this.WithOptions((CSharpCompilationOptions)options); 785039"];
5957 [label="this.WithOptions((CSharpCompilationOptions)options) 785040"];
5958 [label="param WithOptions(CSharpCompilationOptions options) 785041"];
5959 [label="param WithOptions(this) 785042"];
5960 [label="this.Options 785043"];
5961 [label="get\n            {\n                return _options;\n            } 785044"];
5962 [label="var oldOptions = this.Options; 785045"];
5963 [label="bool reuseReferenceManager = oldOptions.CanReuseCompilationReferenceManager(options); 785046"];
5964 [label="bool reuseReferenceManager = oldOptions.CanReuseCompilationReferenceManager(options); 785047"];
5965 [label="bool reuseSyntaxAndDeclarationManager = oldOptions.ScriptClassName == options.ScriptClassName &&\n                oldOptions.SourceReferenceResolver == options.SourceReferenceResolver; 785048"];
5966 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager,\n                reuseSyntaxAndDeclarationManager ?\n                    _syntaxAndDeclarations :\n                    new SyntaxAndDeclarationManager(\n                        _syntaxAndDeclarations.ExternalSyntaxTrees,\n                        options.ScriptClassName,\n                        options.SourceReferenceResolver,\n                        _syntaxAndDeclarations.MessageProvider,\n                        _syntaxAndDeclarations.IsSubmission,\n                        state: null),\n                this.SemanticModelProvider); 785049"];
5967 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager,\n                reuseSyntaxAndDeclarationManager ?\n                    _syntaxAndDeclarations :\n                    new SyntaxAndDeclarationManager(\n                        _syntaxAndDeclarations.ExternalSyntaxTrees,\n                        options.ScriptClassName,\n                        options.SourceReferenceResolver,\n                        _syntaxAndDeclarations.MessageProvider,\n                        _syntaxAndDeclarations.IsSubmission,\n                        state: null),\n                this.SemanticModelProvider); 785050"];
5968 [label="this.PreviousSubmission 785051"];
5969 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 785052"];
5970 [label="ScriptCompilationInfo 785053"];
5971 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager,\n                reuseSyntaxAndDeclarationManager ?\n                    _syntaxAndDeclarations :\n                    new SyntaxAndDeclarationManager(\n                        _syntaxAndDeclarations.ExternalSyntaxTrees,\n                        options.ScriptClassName,\n                        options.SourceReferenceResolver,\n                        _syntaxAndDeclarations.MessageProvider,\n                        _syntaxAndDeclarations.IsSubmission,\n                        state: null),\n                this.SemanticModelProvider); 785054"];
5972 [label="this.SubmissionReturnType 785055"];
5973 [label="=> ScriptCompilationInfo 785056"];
5974 [label="this.HostObjectType 785057"];
5975 [label="=> ScriptCompilationInfo 785058"];
5976 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager,\n                reuseSyntaxAndDeclarationManager ?\n                    _syntaxAndDeclarations :\n                    new SyntaxAndDeclarationManager(\n                        _syntaxAndDeclarations.ExternalSyntaxTrees,\n                        options.ScriptClassName,\n                        options.SourceReferenceResolver,\n                        _syntaxAndDeclarations.MessageProvider,\n                        _syntaxAndDeclarations.IsSubmission,\n                        state: null),\n                this.SemanticModelProvider); 785059"];
5977 [label="reuseSyntaxAndDeclarationManager 785060"];
5978 [label="_syntaxAndDeclarations 785061"];
5979 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager,\n                reuseSyntaxAndDeclarationManager ?\n                    _syntaxAndDeclarations :\n                    new SyntaxAndDeclarationManager(\n                        _syntaxAndDeclarations.ExternalSyntaxTrees,\n                        options.ScriptClassName,\n                        options.SourceReferenceResolver,\n                        _syntaxAndDeclarations.MessageProvider,\n                        _syntaxAndDeclarations.IsSubmission,\n                        state: null),\n                this.SemanticModelProvider); 785062"];
5980 [label="new CSharpCompilation(\n                this.AssemblyName,\n                options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                _referenceManager,\n                reuseReferenceManager,\n                reuseSyntaxAndDeclarationManager ?\n                    _syntaxAndDeclarations :\n                    new SyntaxAndDeclarationManager(\n                        _syntaxAndDeclarations.ExternalSyntaxTrees,\n                        options.ScriptClassName,\n                        options.SourceReferenceResolver,\n                        _syntaxAndDeclarations.MessageProvider,\n                        _syntaxAndDeclarations.IsSubmission,\n                        state: null),\n                this.SemanticModelProvider) 785063"];
5981 [label="param CSharpCompilation(string? assemblyName) 785064"];
5982 [label="param CSharpCompilation(CSharpCompilationOptions options) 785065"];
5983 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 785066"];
5984 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 785067"];
5985 [label="param CSharpCompilation(Type? submissionReturnType) 785068"];
5986 [label="param CSharpCompilation(Type? hostObjectType) 785069"];
5987 [label="param CSharpCompilation(bool isSubmission) 785070"];
5988 [label="param CSharpCompilation(ReferenceManager? referenceManager) 785071"];
5989 [label="param CSharpCompilation(bool reuseReferenceManager) 785072"];
5990 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 785073"];
5991 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 785074"];
5992 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 785075"];
5993 [label="param CSharpCompilation(this) 785076"];
5994 [label="previousSubmission 785077"];
5995 [label="submissionReturnType 785078"];
5996 [label="hostObjectType 785079"];
5997 [label="eventQueue 785080"];
5998 [label="param CSharpCompilation(this) 785081"];
5999 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 785082"];
6000 [label="param CSharpCompilation(Type? submissionReturnType) 785083"];
6001 [label="param CSharpCompilation(Type? hostObjectType) 785084"];
6002 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 785085"];
6003 [label="param CSharpCompilation(this) 785086"];
6004 [label="eventQueue 785087"];
6005 [label="param CSharpCompilation(this) 785088"];
6006 [label="_options 785089"];
6007 [label="_globalImports 785090"];
6008 [label="_previousSubmissionImports 785091"];
6009 [label="_globalNamespaceAlias 785092"];
6010 [label="_scriptClass 785093"];
6011 [label="_lazyHostObjectTypeSymbol 785094"];
6012 [label="_lazyImportInfos 785095"];
6013 [label="_conversions 785096"];
6014 [label="_anonymousTypeManager 785097"];
6015 [label="_lazyGlobalNamespace 785098"];
6016 [label="builtInOperators 785099"];
6017 [label="_lazyAssemblySymbol 785100"];
6018 [label="_referenceManager 785101"];
6019 [label="_syntaxAndDeclarations 785102"];
6020 [label="_lazyEntryPoint 785103"];
6021 [label="_lazyEmitNullablePublicOnly 785104"];
6022 [label="_lazyCompilationUnitCompletedTrees 785105"];
6023 [label="NullableAnalysisData 785106"];
6024 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 785107"];
6025 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 785108"];
6026 [label="_externAliasTargets 785109"];
6027 [label="_moduleInitializerMethods 785110"];
6028 [label="_binderFactories 785111"];
6029 [label="_ignoreAccessibilityBinderFactories 785112"];
6030 [label="_lazyDeclarationDiagnostics 785113"];
6031 [label="_declarationDiagnosticsFrozen 785114"];
6032 [label="new DiagnosticBag() 785115"];
6033 [label="_additionalCodegenWarnings = new DiagnosticBag() 785116"];
6034 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 785117"];
6035 [label="this.builtInOperators = new BuiltInOperators(this); 785118"];
6036 [label="this.builtInOperators = new BuiltInOperators(this); 785119"];
6037 [label="new BuiltInOperators(this) 785120"];
6038 [label="param BuiltInOperators(CSharpCompilation compilation) 785121"];
6039 [label="param BuiltInOperators(this) 785122"];
6040 [label="_compilation 785123"];
6041 [label="_builtInUnaryOperators 785124"];
6042 [label="_builtInOperators 785125"];
6043 [label="_compilation 785126"];
6044 [label="this.builtInOperators 785127"];
6045 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 785128"];
6046 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 785129"];
6047 [label="LanguageVersion? result = null; 785130"];
6048 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 785131"];
6049 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 785132"];
6050 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 785133"];
6051 [label="this.LanguageVersion 785134"];
6052 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 785135"];
6053 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785136"];
6054 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785137"];
6055 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785138"];
6056 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785139"];
6057 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785140"];
6058 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 785141"];
6059 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 785142"];
6060 [label="Debug.Assert(_lazyAssemblySymbol is null); 785143"];
6061 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 785144"];
6062 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 785145"];
6063 [label="return this.WithOptions((CSharpCompilationOptions)options); 785146"];
6064 [label="var symbol = dummy.GetAssemblyOrModuleSymbol(metadataReference); 785147"];
6065 [label="var symbol = dummy.GetAssemblyOrModuleSymbol(metadataReference); 785148"];
6066 [label="var symbol = dummy.GetAssemblyOrModuleSymbol(metadataReference); 785149"];
6067 [label="param CommonGetAssemblyOrModuleSymbol(MetadataReference reference) 785150"];
6068 [label="param CommonGetAssemblyOrModuleSymbol(this) 785151"];
6069 [label="return this.GetAssemblyOrModuleSymbol(reference).GetPublicSymbol(); 785152"];
6070 [label="this.GetAssemblyOrModuleSymbol(reference) 785153"];
6071 [label="param GetAssemblyOrModuleSymbol(MetadataReference reference) 785154"];
6072 [label="param GetAssemblyOrModuleSymbol(this) 785155"];
6073 [label="if (reference == null)\n            {\n                throw new ArgumentNullException(nameof(reference));\n            } 785156"];
6074 [label="if (reference == null)\n            {\n                throw new ArgumentNullException(nameof(reference));\n            } 785157"];
6075 [label="if (reference.Properties.Kind == MetadataImageKind.Assembly)\n            {\n                return GetBoundReferenceManager().GetReferencedAssemblySymbol(reference);\n            }\n            else\n            {\n                Debug.Assert(reference.Properties.Kind == MetadataImageKind.Module);\n                int index = GetBoundReferenceManager().GetReferencedModuleIndex(reference);\n                return index < 0 ? null : this.Assembly.Modules[index];\n            } 785158"];
6076 [label="GetBoundReferenceManager() 785159"];
6077 [label="param GetBoundReferenceManager(this) 785160"];
6078 [label="param CreateState(SourceReferenceResolver resolver) 785161"];
6079 [label="param CreateState(CommonMessageProvider messageProvider) 785162"];
6080 [label="OrdinalMap 785163"];
6081 [label="LoadDirectiveMap 785164"];
6082 [label="LoadedSyntaxTreeMap 785165"];
6083 [label="RootNamespaces 785166"];
6084 [label="DeclarationTable 785167"];
6085 [label="Debug.Assert(_lazyAssemblySymbol is object); 785168"];
6086 [label="return GetBoundReferenceManager().GetReferencedAssemblySymbol(reference); 785169"];
6087 [label="return GetBoundReferenceManager().GetReferencedAssemblySymbol(reference); 785170"];
6088 [label="if (metadataReference.Properties.Kind == MetadataImageKind.Assembly)\n            {\n                return ((IAssemblySymbol)symbol).Modules.First();\n            }\n            else\n            {\n                return (IModuleSymbol)symbol;\n            } 785171"];
6089 [label="return ((IAssemblySymbol)symbol).Modules.First(); 785172"];
6090 [label="symbolValidator(moduleSymbol); 785173"];
6091 [label="symbolValidator(moduleSymbol); 785174"];
6092 [label="param ValidateDeclSecurity(ModuleSymbol module) 785175"];
6093 [label="param ValidateDeclSecurity(params DeclSecurityEntry[] expectedEntries) 785176"];
6094 [label="var metadataReader = module.GetMetadata().MetadataReader; 785177"];
6095 [label="var actualEntries = new List<DeclSecurityEntry>(expectedEntries.Length); 785178"];
6096 [label="int i = 0; 785179"];
6097 [label="foreach (var actualHandle in metadataReader.DeclarativeSecurityAttributes)\n            {\n                var actual = metadataReader.GetDeclarativeSecurityAttribute(actualHandle);\n\n                var actualPermissionSetBytes = metadataReader.GetBlobBytes(actual.PermissionSet);\n                var actualPermissionSet = new string(actualPermissionSetBytes.Select(b => (char)b).ToArray());\n                string actualParentName;\n                SymbolKind actualParentKind;\n                GetAttributeParentNameAndKind(metadataReader, actual.Parent, out actualParentName, out actualParentKind);\n\n                actualEntries.Add(new DeclSecurityEntry()\n                {\n                    ActionFlags = actual.Action,\n                    ParentNameOpt = actualParentName,\n                    PermissionSet = actualPermissionSet,\n                    ParentKind = actualParentKind\n                });\n\n                i++;\n            } 785180"];
6098 [label="var actual = metadataReader.GetDeclarativeSecurityAttribute(actualHandle); 785181"];
6099 [label="var actualPermissionSetBytes = metadataReader.GetBlobBytes(actual.PermissionSet); 785182"];
6100 [label="var actualPermissionSet = new string(actualPermissionSetBytes.Select(b => (char)b).ToArray()); 785183"];
6101 [label="var actualPermissionSet = new string(actualPermissionSetBytes.Select(b => (char)b).ToArray()); 785184"];
6102 [label="string actualParentName; 785185"];
6103 [label="SymbolKind actualParentKind; 785186"];
6104 [label="GetAttributeParentNameAndKind(metadataReader, actual.Parent, out actualParentName, out actualParentKind); 785187"];
6105 [label="GetAttributeParentNameAndKind(metadataReader, actual.Parent, out actualParentName, out actualParentKind); 785188"];
6106 [label="GetAttributeParentNameAndKind(metadataReader, actual.Parent, out actualParentName, out actualParentKind); 785189"];
6107 [label="GetAttributeParentNameAndKind(metadataReader, actual.Parent, out actualParentName, out actualParentKind); 785190"];
6108 [label="GetAttributeParentNameAndKind(metadataReader, actual.Parent, out actualParentName, out actualParentKind) 785191"];
6109 [label="param GetAttributeParentNameAndKind(MetadataReader metadataReader) 785192"];
6110 [label="param GetAttributeParentNameAndKind(EntityHandle token) 785193"];
6111 [label="param GetAttributeParentNameAndKind(out string name) 785194"];
6112 [label="param GetAttributeParentNameAndKind(out SymbolKind kind) 785195"];
6113 [label="switch (token.Kind)\n            {\n                case HandleKind.AssemblyDefinition:\n                    name = null;\n                    kind = SymbolKind.Assembly;\n                    return;\n\n                case HandleKind.TypeDefinition:\n                    name = metadataReader.GetString(metadataReader.GetTypeDefinition((TypeDefinitionHandle)token).Name);\n                    kind = SymbolKind.NamedType;\n                    return;\n\n                case HandleKind.MethodDefinition:\n                    name = metadataReader.GetString(metadataReader.GetMethodDefinition((MethodDefinitionHandle)token).Name);\n                    kind = SymbolKind.Method;\n                    return;\n\n                default:\n                    throw TestExceptionUtilities.UnexpectedValue(token.Kind);\n            } 785196"];
6114 [label="name = null; 785197"];
6115 [label="kind = SymbolKind.Assembly; 785198"];
6116 [label="return; 785199"];
6117 [label="GetAttributeParentNameAndKind(metadataReader, actual.Parent, out actualParentName, out actualParentKind); 785200"];
6118 [label="actualEntries.Add(new DeclSecurityEntry()\n                {\n                    ActionFlags = actual.Action,\n                    ParentNameOpt = actualParentName,\n                    PermissionSet = actualPermissionSet,\n                    ParentKind = actualParentKind\n                }); 785201"];
6119 [label="new DeclSecurityEntry()\n                {\n                    ActionFlags = actual.Action,\n                    ParentNameOpt = actualParentName,\n                    PermissionSet = actualPermissionSet,\n                    ParentKind = actualParentKind\n                } 785202"];
6120 [label="ActionFlags 785203"];
6121 [label="ParentNameOpt 785204"];
6122 [label="PermissionSet 785205"];
6123 [label="ParentKind 785206"];
6124 [label="actualEntries.Add(new DeclSecurityEntry()\n                {\n                    ActionFlags = actual.Action,\n                    ParentNameOpt = actualParentName,\n                    PermissionSet = actualPermissionSet,\n                    ParentKind = actualParentKind\n                }); 785207"];
6125 [label="i++; 785208"];
6126 [label="'ROSLYN_DIFFTOOL' 785209"];
6127 [label="Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 785210"];
6128 [label="s_diffToolPath = Environment.GetEnvironmentVariable('ROSLYN_DIFFTOOL') 785211"];
6129 [label="AssertEx.SetEqual(expectedEntries, actualEntries, itemInspector: entry => $@'\n{{\n    ActionFlags = {entry.ActionFlags},\n    ParentNameOpt = {entry.ParentNameOpt},\n    PermissionSet = {entry.PermissionSet},\n    ParentKind = {entry.ParentKind}\n}}'); 785212"];
6130 [label="AssertEx.SetEqual(expectedEntries, actualEntries, itemInspector: entry => $@'\n{{\n    ActionFlags = {entry.ActionFlags},\n    ParentNameOpt = {entry.ParentNameOpt},\n    PermissionSet = {entry.PermissionSet},\n    ParentKind = {entry.ParentKind}\n}}'); 785213"];
6131 [label="AssertEx.SetEqual(expectedEntries, actualEntries, itemInspector: entry => $@'\n{{\n    ActionFlags = {entry.ActionFlags},\n    ParentNameOpt = {entry.ParentNameOpt},\n    PermissionSet = {entry.PermissionSet},\n    ParentKind = {entry.ParentKind}\n}}'); 785214"];
6132 [label="AssertEx.SetEqual(expectedEntries, actualEntries, itemInspector: entry => $@'\n{{\n    ActionFlags = {entry.ActionFlags},\n    ParentNameOpt = {entry.ParentNameOpt},\n    PermissionSet = {entry.PermissionSet},\n    ParentKind = {entry.ParentKind}\n}}') 785215"];
6133 [label="param SetEqual(IEnumerable<T> expected) 785216"];
6134 [label="param SetEqual(IEnumerable<T> actual) 785217"];
6135 [label="param SetEqual(IEqualityComparer<T> comparer = null) 785218"];
6136 [label="param SetEqual(string message = null) 785219"];
6137 [label="param SetEqual(string itemSeparator = '\\r\\n') 785220"];
6138 [label="param SetEqual(Func<T, string> itemInspector = null) 785221"];
6139 [label="var expectedSet = new HashSet<T>(expected, comparer); 785222"];
6140 [label="var expectedSet = new HashSet<T>(expected, comparer); 785223"];
6141 [label="var expectedSet = new HashSet<T>(expected, comparer); 785224"];
6142 [label="var result = expected.Count() == actual.Count() && expectedSet.SetEquals(actual); 785225"];
6143 [label="var result = expected.Count() == actual.Count() && expectedSet.SetEquals(actual); 785226"];
6144 [label="var result = expected.Count() == actual.Count() && expectedSet.SetEquals(actual); 785227"];
6145 [label="var result = expected.Count() == actual.Count() && expectedSet.SetEquals(actual); 785228"];
6146 [label="var result = expected.Count() == actual.Count() && expectedSet.SetEquals(actual); 785229"];
6147 [label="var result = expected.Count() == actual.Count() && expectedSet.SetEquals(actual); 785230"];
6148 [label="if (!result)\n            {\n                if (string.IsNullOrEmpty(message))\n                {\n                    message = GetAssertMessage(\n                        ToString(expected, itemSeparator, itemInspector),\n                        ToString(actual, itemSeparator, itemInspector));\n                }\n\n                CustomAssert.True(result, message);\n            } 785231"];
6149 [label="RunValidators(verifier, assemblyValidator, symbolValidator); 785232"];
6150 [label="return verifier; 785233"];
6151 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 785234"];
6152 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 785235"];
6153 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 785236"];
6154 [label="result = verifier; 785237"];
6155 [label="CustomAssert.NotNull(result); 785238"];
6156 [label="return result; 785239"];
6157 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 785240"];
6158 [label="CompileAndVerify(compilation, symbolValidator: module =>\n            {\n                ValidateDeclSecurity(module, new DeclSecurityEntry\n                {\n                    ActionFlags = DeclarativeSecurityAction.RequestMinimum,\n                    ParentKind = SymbolKind.Assembly,\n                    PermissionSet =\n                        '.' + // always start with a dot\n                        '\\u0002' + // number of attributes (small enough to fit in 1 byte)\n\n                        '\\u0080\\u0084' + // length of UTF-8 string (0x80 indicates a 2-byte encoding)\n                        'System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' + // attr type name\n                        '\\u001a' + // number of bytes in the encoding of the named arguments\n                        '\\u0001' + // number of named arguments\n                        '\\u0054' + // property (vs field)\n                        '\\u0002' + // type bool\n                        '\\u0015' + // length of UTF-8 string (small enough to fit in 1 byte)\n                        'RemotingConfiguration' + // property name\n                        '\\u0001' + // argument value (true)\n\n                        '\\u0080\\u0084' + // length of UTF-8 string (0x80 indicates a 2-byte encoding)\n                        'System.Security.Permissions.SecurityPermissionAttribute, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' + // attr type name\n                        '\\u0012' + // number of bytes in the encoding of the named arguments\n                        '\\u0001' + // number of named arguments\n                        '\\u0054' + // property (vs field)\n                        '\\u0002' + // type bool\n                        '\\u000d' + // length of UTF-8 string (small enough to fit in 1 byte)\n                        'UnmanagedCode' + // property name\n                        '\\u0001', // argument value (true)\n                });\n            }); 785241"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 11;
12 -> 1;
13 -> 1;
14 -> 12;
14 -> 13;
15 -> 14;
15 -> 13;
16 -> 13;
17 -> 15;
17 -> 16;
18 -> 16;
19 -> 17;
19 -> 18;
19 -> 16;
20 -> 16;
20 -> 1;
21 -> 0;
21 -> 1;
22 -> 1;
23 -> 1;
24 -> 20;
24 -> 23;
25 -> 22;
25 -> 23;
26 -> 21;
26 -> 23;
27 -> 22;
27 -> 23;
28 -> 22;
28 -> 23;
29 -> 22;
29 -> 23;
30 -> 22;
30 -> 23;
31 -> 22;
31 -> 23;
32 -> 24;
32 -> 23;
33 -> 28;
33 -> 23;
34 -> 25;
34 -> 23;
35 -> 23;
36 -> 33;
36 -> 35;
37 -> 34;
37 -> 35;
38 -> 36;
38 -> 35;
39 -> 35;
40 -> 38;
40 -> 39;
41 -> 40;
41 -> 39;
42 -> 41;
43 -> 0;
43 -> 42;
44 -> 43;
45 -> 44;
46 -> 44;
47 -> 0;
47 -> 46;
48 -> 47;
48 -> 45;
48 -> 44;
49 -> 48;
49 -> 42;
50 -> 35;
51 -> 37;
51 -> 50;
51 -> 35;
52 -> 49;
52 -> 51;
53 -> 26;
53 -> 23;
54 -> 27;
54 -> 23;
55 -> 29;
55 -> 23;
56 -> 30;
56 -> 23;
57 -> 31;
57 -> 23;
58 -> 23;
59 -> 32;
59 -> 58;
60 -> 52;
60 -> 58;
61 -> 53;
61 -> 58;
62 -> 54;
62 -> 58;
63 -> 55;
63 -> 58;
64 -> 56;
64 -> 58;
65 -> 57;
65 -> 58;
66 -> 59;
66 -> 58;
67 -> 60;
67 -> 58;
68 -> 61;
68 -> 58;
69 -> 62;
69 -> 58;
70 -> 63;
70 -> 58;
71 -> 64;
71 -> 58;
72 -> 65;
72 -> 58;
73 -> 58;
74 -> 73;
74 -> 58;
75 -> 58;
76 -> 66;
76 -> 75;
77 -> 67;
77 -> 75;
78 -> 68;
78 -> 75;
79 -> 69;
79 -> 75;
80 -> 70;
80 -> 75;
81 -> 71;
81 -> 75;
82 -> 72;
82 -> 75;
83 -> 74;
83 -> 75;
84 -> 79;
84 -> 75;
85 -> 81;
85 -> 75;
86 -> 75;
87 -> 84;
87 -> 86;
88 -> 85;
88 -> 86;
89 -> 76;
89 -> 86;
90 -> 89;
90 -> 19;
90 -> 86;
91 -> 90;
92 -> 88;
92 -> 90;
93 -> 87;
93 -> 90;
94 -> 90;
95 -> 91;
95 -> 94;
96 -> 92;
96 -> 94;
97 -> 93;
97 -> 94;
98 -> 91;
98 -> 94;
99 -> 94;
100 -> 97;
100 -> 99;
100 -> 94;
101 -> 0;
101 -> 100;
102 -> 95;
102 -> 94;
103 -> 0;
103 -> 94;
104 -> 103;
104 -> 98;
104 -> 94;
105 -> 94;
106 -> 102;
106 -> 104;
106 -> 105;
106 -> 0;
106 -> 94;
107 -> 106;
107 -> 94;
108 -> 101;
108 -> 94;
109 -> 96;
109 -> 94;
110 -> 94;
111 -> 107;
111 -> 108;
111 -> 109;
111 -> 110;
111 -> 106;
111 -> 0;
111 -> 94;
112 -> 94;
113 -> 111;
113 -> 112;
114 -> 112;
115 -> 112;
116 -> 113;
116 -> 111;
116 -> 115;
116 -> 112;
117 -> 114;
117 -> 112;
118 -> 112;
119 -> 116;
119 -> 111;
119 -> 115;
119 -> 117;
119 -> 118;
119 -> 114;
119 -> 112;
120 -> 112;
121 -> 120;
121 -> 114;
121 -> 112;
122 -> 114;
122 -> 112;
123 -> 112;
124 -> 122;
124 -> 123;
124 -> 114;
124 -> 121;
124 -> 112;
125 -> 113;
125 -> 112;
126 -> 125;
126 -> 91;
126 -> 90;
127 -> 91;
127 -> 75;
128 -> 75;
129 -> 78;
129 -> 128;
129 -> 75;
130 -> 0;
130 -> 75;
131 -> 83;
131 -> 75;
132 -> 80;
132 -> 127;
132 -> 77;
132 -> 78;
132 -> 75;
133 -> 132;
133 -> 75;
134 -> 75;
135 -> 133;
135 -> 134;
136 -> 0;
136 -> 134;
137 -> 136;
138 -> 75;
139 -> 132;
139 -> 91;
139 -> 126;
139 -> 111;
139 -> 48;
139 -> 0;
139 -> 45;
139 -> 75;
140 -> 75;
141 -> 140;
142 -> 139;
142 -> 141;
142 -> 75;
143 -> 0;
145 -> 143;
145 -> 144;
146 -> 145;
147 -> 0;
149 -> 147;
149 -> 148;
151 -> 149;
151 -> 150;
152 -> 151;
153 -> 139;
153 -> 140;
154 -> 139;
154 -> 140;
155 -> 139;
155 -> 140;
156 -> 139;
156 -> 140;
157 -> 153;
157 -> 140;
158 -> 156;
158 -> 140;
159 -> 154;
159 -> 140;
160 -> 155;
160 -> 140;
161 -> 140;
162 -> 140;
163 -> 157;
163 -> 162;
164 -> 158;
164 -> 162;
165 -> 159;
165 -> 162;
166 -> 160;
166 -> 162;
167 -> 161;
167 -> 162;
168 -> 161;
168 -> 162;
169 -> 161;
169 -> 162;
170 -> 161;
170 -> 162;
171 -> 162;
172 -> 164;
172 -> 171;
172 -> 162;
173 -> 170;
173 -> 162;
174 -> 166;
174 -> 162;
175 -> 174;
175 -> 142;
175 -> 162;
176 -> 163;
176 -> 162;
177 -> 164;
177 -> 162;
178 -> 175;
178 -> 162;
179 -> 167;
179 -> 162;
180 -> 168;
180 -> 162;
181 -> 169;
181 -> 162;
182 -> 170;
182 -> 162;
183 -> 162;
184 -> 0;
184 -> 162;
185 -> 164;
185 -> 175;
185 -> 162;
186 -> 162;
187 -> 184;
187 -> 186;
188 -> 185;
188 -> 186;
189 -> 185;
189 -> 186;
190 -> 184;
190 -> 186;
191 -> 182;
191 -> 186;
192 -> 183;
192 -> 186;
193 -> 183;
193 -> 186;
194 -> 187;
194 -> 186;
195 -> 188;
195 -> 186;
196 -> 189;
196 -> 186;
197 -> 190;
197 -> 186;
198 -> 191;
198 -> 186;
199 -> 186;
200 -> 199;
200 -> 194;
200 -> 195;
200 -> 196;
200 -> 197;
200 -> 198;
200 -> 0;
200 -> 175;
200 -> 186;
201 -> 199;
201 -> 186;
202 -> 192;
202 -> 199;
202 -> 186;
203 -> 162;
204 -> 176;
204 -> 203;
205 -> 177;
205 -> 203;
206 -> 178;
206 -> 203;
207 -> 179;
207 -> 203;
208 -> 180;
208 -> 203;
209 -> 181;
209 -> 203;
210 -> 182;
210 -> 203;
211 -> 183;
211 -> 203;
212 -> 183;
212 -> 203;
213 -> 183;
213 -> 203;
214 -> 183;
214 -> 203;
215 -> 183;
215 -> 203;
216 -> 183;
216 -> 203;
217 -> 204;
217 -> 203;
218 -> 205;
218 -> 203;
219 -> 206;
219 -> 203;
220 -> 207;
220 -> 203;
221 -> 208;
221 -> 203;
222 -> 209;
222 -> 203;
223 -> 210;
223 -> 203;
224 -> 211;
224 -> 203;
225 -> 212;
225 -> 203;
226 -> 213;
226 -> 203;
227 -> 213;
227 -> 200;
227 -> 203;
228 -> 227;
228 -> 200;
228 -> 201;
228 -> 202;
228 -> 203;
229 -> 214;
229 -> 203;
230 -> 215;
230 -> 203;
231 -> 203;
232 -> 217;
232 -> 231;
233 -> 218;
233 -> 231;
234 -> 219;
234 -> 231;
235 -> 220;
235 -> 231;
236 -> 221;
236 -> 231;
237 -> 222;
237 -> 231;
238 -> 223;
238 -> 231;
239 -> 224;
239 -> 231;
240 -> 225;
240 -> 231;
241 -> 226;
241 -> 231;
242 -> 228;
242 -> 231;
243 -> 229;
243 -> 231;
244 -> 230;
244 -> 231;
245 -> 216;
245 -> 231;
246 -> 232;
246 -> 231;
247 -> 234;
247 -> 231;
248 -> 242;
248 -> 231;
249 -> 238;
249 -> 231;
250 -> 243;
250 -> 231;
251 -> 244;
251 -> 231;
252 -> 231;
253 -> 252;
253 -> 246;
253 -> 247;
253 -> 248;
253 -> 249;
253 -> 250;
253 -> 251;
253 -> 175;
253 -> 228;
253 -> 231;
254 -> 252;
254 -> 231;
255 -> 252;
255 -> 231;
256 -> 252;
256 -> 231;
257 -> 252;
257 -> 231;
258 -> 252;
258 -> 231;
259 -> 252;
259 -> 231;
260 -> 252;
260 -> 231;
261 -> 252;
261 -> 231;
262 -> 252;
262 -> 231;
263 -> 252;
263 -> 231;
264 -> 252;
264 -> 231;
265 -> 252;
265 -> 231;
266 -> 252;
266 -> 231;
267 -> 252;
267 -> 231;
268 -> 252;
268 -> 231;
269 -> 252;
269 -> 231;
270 -> 252;
270 -> 231;
271 -> 252;
271 -> 231;
272 -> 252;
272 -> 231;
273 -> 252;
273 -> 231;
274 -> 252;
274 -> 231;
275 -> 252;
275 -> 231;
276 -> 252;
276 -> 231;
277 -> 252;
277 -> 231;
278 -> 252;
278 -> 231;
279 -> 252;
279 -> 231;
280 -> 231;
281 -> 280;
281 -> 252;
281 -> 231;
282 -> 252;
282 -> 231;
283 -> 282;
283 -> 253;
283 -> 254;
283 -> 255;
283 -> 256;
283 -> 257;
283 -> 258;
283 -> 259;
283 -> 260;
283 -> 261;
283 -> 262;
283 -> 263;
283 -> 264;
283 -> 265;
283 -> 266;
283 -> 267;
283 -> 268;
283 -> 269;
283 -> 270;
283 -> 271;
283 -> 272;
283 -> 273;
283 -> 274;
283 -> 275;
283 -> 276;
283 -> 277;
283 -> 278;
283 -> 279;
283 -> 281;
283 -> 280;
283 -> 231;
284 -> 283;
284 -> 252;
284 -> 231;
285 -> 233;
285 -> 252;
285 -> 231;
286 -> 252;
286 -> 231;
287 -> 231;
288 -> 231;
289 -> 286;
289 -> 288;
290 -> 287;
290 -> 288;
291 -> 290;
291 -> 288;
292 -> 290;
292 -> 288;
293 -> 290;
293 -> 288;
294 -> 289;
294 -> 290;
294 -> 288;
295 -> 287;
295 -> 252;
295 -> 231;
296 -> 252;
296 -> 283;
296 -> 231;
297 -> 296;
297 -> 283;
297 -> 284;
297 -> 285;
297 -> 295;
297 -> 294;
297 -> 292;
297 -> 293;
297 -> 231;
298 -> 297;
298 -> 252;
298 -> 231;
299 -> 252;
299 -> 297;
299 -> 231;
300 -> 299;
300 -> 297;
300 -> 298;
300 -> 231;
301 -> 300;
301 -> 252;
301 -> 231;
302 -> 252;
302 -> 300;
302 -> 231;
303 -> 302;
303 -> 300;
303 -> 301;
303 -> 231;
304 -> 303;
304 -> 252;
304 -> 231;
305 -> 252;
305 -> 303;
305 -> 231;
306 -> 305;
306 -> 303;
306 -> 304;
306 -> 231;
307 -> 306;
307 -> 252;
307 -> 231;
308 -> 252;
308 -> 231;
309 -> 308;
309 -> 306;
309 -> 307;
309 -> 231;
310 -> 309;
310 -> 252;
310 -> 231;
311 -> 241;
311 -> 309;
311 -> 231;
312 -> 231;
313 -> 311;
313 -> 312;
314 -> 312;
315 -> 313;
315 -> 312;
316 -> 315;
316 -> 309;
316 -> 310;
316 -> 312;
317 -> 0;
317 -> 312;
318 -> 317;
318 -> 314;
318 -> 312;
319 -> 318;
319 -> 231;
320 -> 319;
320 -> 252;
320 -> 231;
321 -> 238;
321 -> 231;
322 -> 321;
323 -> 235;
323 -> 322;
323 -> 321;
324 -> 236;
324 -> 322;
324 -> 321;
325 -> 323;
325 -> 324;
325 -> 321;
326 -> 237;
326 -> 322;
326 -> 321;
327 -> 325;
327 -> 326;
327 -> 321;
328 -> 240;
328 -> 231;
329 -> 252;
329 -> 309;
329 -> 310;
329 -> 320;
329 -> 328;
330 -> 328;
331 -> 252;
331 -> 330;
332 -> 331;
332 -> 329;
332 -> 330;
333 -> 239;
333 -> 328;
334 -> 329;
334 -> 332;
334 -> 333;
334 -> 328;
335 -> 334;
335 -> 252;
335 -> 328;
336 -> 241;
336 -> 252;
336 -> 231;
337 -> 252;
337 -> 334;
337 -> 231;
338 -> 231;
339 -> 252;
339 -> 334;
339 -> 338;
339 -> 231;
340 -> 162;
341 -> 165;
341 -> 340;
341 -> 162;
342 -> 165;
342 -> 341;
343 -> 341;
344 -> 342;
344 -> 343;
345 -> 183;
345 -> 343;
346 -> 343;
347 -> 344;
347 -> 346;
347 -> 343;
348 -> 344;
348 -> 343;
349 -> 348;
349 -> 334;
349 -> 335;
349 -> 336;
349 -> 343;
350 -> 343;
351 -> 345;
351 -> 349;
351 -> 343;
352 -> 350;
352 -> 343;
353 -> 351;
353 -> 349;
353 -> 343;
354 -> 352;
354 -> 353;
354 -> 350;
354 -> 349;
354 -> 343;
355 -> 343;
356 -> 343;
357 -> 344;
357 -> 343;
358 -> 357;
358 -> 354;
358 -> 343;
359 -> 358;
360 -> 358;
361 -> 358;
362 -> 345;
362 -> 361;
362 -> 358;
363 -> 358;
364 -> 350;
364 -> 363;
364 -> 361;
364 -> 358;
365 -> 355;
365 -> 358;
365 -> 364;
366 -> 356;
366 -> 358;
367 -> 350;
367 -> 364;
367 -> 343;
368 -> 345;
368 -> 367;
368 -> 343;
369 -> 344;
369 -> 343;
370 -> 343;
371 -> 369;
371 -> 370;
372 -> 351;
372 -> 370;
373 -> 372;
373 -> 367;
373 -> 370;
374 -> 372;
374 -> 367;
374 -> 370;
375 -> 372;
375 -> 367;
375 -> 370;
376 -> 372;
376 -> 367;
376 -> 370;
377 -> 372;
377 -> 367;
377 -> 370;
378 -> 371;
378 -> 370;
379 -> 372;
379 -> 367;
379 -> 378;
379 -> 370;
380 -> 370;
381 -> 377;
381 -> 380;
381 -> 370;
382 -> 379;
382 -> 381;
383 -> 381;
384 -> 382;
384 -> 383;
385 -> 372;
385 -> 383;
386 -> 384;
386 -> 383;
387 -> 385;
387 -> 379;
387 -> 383;
388 -> 383;
389 -> 383;
390 -> 386;
390 -> 389;
391 -> 387;
391 -> 389;
392 -> 387;
392 -> 389;
393 -> 387;
393 -> 389;
394 -> 387;
394 -> 389;
395 -> 388;
395 -> 389;
396 -> 388;
396 -> 389;
397 -> 389;
397 -> 390;
397 -> 391;
397 -> 392;
397 -> 393;
397 -> 394;
397 -> 379;
398 -> 388;
398 -> 381;
399 -> 398;
399 -> 343;
400 -> 345;
400 -> 397;
400 -> 343;
401 -> 365;
401 -> 343;
402 -> 399;
402 -> 343;
403 -> 343;
404 -> 400;
404 -> 403;
405 -> 401;
405 -> 403;
406 -> 402;
406 -> 403;
407 -> 345;
407 -> 403;
408 -> 407;
408 -> 397;
408 -> 403;
409 -> 403;
410 -> 407;
410 -> 409;
411 -> 410;
411 -> 397;
411 -> 409;
412 -> 411;
412 -> 409;
413 -> 412;
413 -> 403;
414 -> 407;
414 -> 397;
414 -> 389;
414 -> 395;
414 -> 403;
415 -> 403;
416 -> 414;
416 -> 415;
417 -> 416;
417 -> 414;
417 -> 415;
418 -> 403;
419 -> 417;
419 -> 418;
420 -> 404;
420 -> 403;
421 -> 405;
421 -> 403;
422 -> 406;
422 -> 403;
423 -> 403;
424 -> 403;
425 -> 408;
425 -> 424;
426 -> 408;
426 -> 424;
427 -> 408;
427 -> 424;
428 -> 413;
428 -> 424;
429 -> 417;
429 -> 424;
430 -> 419;
430 -> 424;
431 -> 419;
431 -> 424;
432 -> 420;
432 -> 424;
433 -> 421;
433 -> 424;
434 -> 422;
434 -> 424;
435 -> 419;
435 -> 424;
436 -> 423;
436 -> 424;
437 -> 423;
437 -> 424;
438 -> 428;
438 -> 424;
439 -> 429;
439 -> 424;
440 -> 430;
440 -> 424;
441 -> 434;
441 -> 419;
441 -> 424;
442 -> 436;
442 -> 424;
443 -> 424;
444 -> 438;
444 -> 443;
445 -> 439;
445 -> 443;
446 -> 440;
446 -> 443;
447 -> 442;
447 -> 443;
448 -> 437;
448 -> 443;
449 -> 447;
449 -> 443;
450 -> 443;
451 -> 450;
451 -> 443;
452 -> 450;
452 -> 443;
453 -> 450;
453 -> 443;
454 -> 450;
454 -> 443;
455 -> 450;
455 -> 443;
456 -> 450;
456 -> 443;
457 -> 450;
457 -> 443;
458 -> 450;
458 -> 443;
459 -> 450;
459 -> 443;
460 -> 450;
460 -> 443;
461 -> 450;
461 -> 443;
462 -> 450;
462 -> 443;
463 -> 450;
463 -> 443;
464 -> 450;
464 -> 443;
465 -> 450;
465 -> 443;
466 -> 450;
466 -> 443;
467 -> 450;
467 -> 443;
468 -> 450;
468 -> 443;
469 -> 450;
469 -> 443;
470 -> 450;
470 -> 443;
471 -> 450;
471 -> 443;
472 -> 450;
472 -> 443;
473 -> 450;
473 -> 443;
474 -> 450;
474 -> 443;
475 -> 450;
475 -> 443;
476 -> 450;
476 -> 443;
477 -> 443;
478 -> 477;
478 -> 450;
478 -> 443;
479 -> 450;
479 -> 443;
480 -> 450;
480 -> 443;
481 -> 443;
482 -> 443;
483 -> 480;
483 -> 482;
484 -> 481;
484 -> 482;
485 -> 484;
485 -> 482;
486 -> 484;
486 -> 482;
487 -> 484;
487 -> 482;
488 -> 483;
488 -> 484;
488 -> 482;
489 -> 481;
489 -> 450;
489 -> 443;
490 -> 450;
490 -> 443;
491 -> 443;
492 -> 441;
492 -> 491;
493 -> 491;
494 -> 492;
494 -> 491;
495 -> 494;
495 -> 441;
496 -> 494;
497 -> 495;
497 -> 496;
498 -> 431;
498 -> 443;
499 -> 498;
500 -> 444;
500 -> 499;
500 -> 498;
501 -> 445;
501 -> 499;
501 -> 498;
502 -> 500;
502 -> 501;
502 -> 498;
503 -> 446;
503 -> 499;
503 -> 498;
504 -> 502;
504 -> 503;
504 -> 498;
505 -> 432;
505 -> 433;
506 -> 450;
506 -> 433;
507 -> 432;
507 -> 506;
507 -> 441;
507 -> 497;
507 -> 433;
508 -> 432;
508 -> 450;
508 -> 433;
509 -> 450;
509 -> 507;
509 -> 443;
510 -> 443;
511 -> 450;
511 -> 507;
511 -> 510;
511 -> 443;
512 -> 423;
512 -> 343;
513 -> 512;
513 -> 341;
514 -> 513;
514 -> 507;
514 -> 162;
515 -> 513;
515 -> 162;
516 -> 139;
516 -> 515;
516 -> 507;
516 -> 508;
516 -> 434;
516 -> 75;
517 -> 516;
517 -> 75;
518 -> 75;
519 -> 517;
519 -> 518;
520 -> 518;
521 -> 519;
521 -> 520;
522 -> 520;
523 -> 521;
523 -> 516;
523 -> 522;
524 -> 522;
525 -> 523;
525 -> 516;
525 -> 524;
525 -> 522;
526 -> 523;
526 -> 516;
526 -> 525;
527 -> 525;
528 -> 526;
528 -> 527;
529 -> 526;
529 -> 527;
530 -> 526;
530 -> 527;
531 -> 526;
531 -> 527;
532 -> 526;
532 -> 527;
533 -> 527;
534 -> 527;
535 -> 527;
536 -> 527;
537 -> 527;
538 -> 0;
538 -> 527;
539 -> 528;
539 -> 527;
540 -> 533;
540 -> 539;
541 -> 539;
542 -> 529;
542 -> 539;
543 -> 530;
543 -> 539;
544 -> 531;
544 -> 539;
545 -> 532;
545 -> 539;
546 -> 534;
546 -> 539;
547 -> 535;
547 -> 539;
548 -> 536;
548 -> 539;
549 -> 537;
549 -> 539;
550 -> 538;
550 -> 539;
551 -> 539;
552 -> 540;
552 -> 551;
553 -> 541;
553 -> 551;
554 -> 542;
554 -> 551;
555 -> 543;
555 -> 551;
556 -> 544;
556 -> 551;
557 -> 545;
557 -> 551;
558 -> 546;
558 -> 551;
559 -> 547;
559 -> 551;
560 -> 548;
560 -> 551;
561 -> 549;
561 -> 551;
562 -> 550;
562 -> 551;
563 -> 553;
563 -> 516;
563 -> 551;
564 -> 563;
564 -> 0;
564 -> 551;
565 -> 553;
565 -> 551;
566 -> 554;
566 -> 551;
567 -> 557;
567 -> 551;
568 -> 561;
568 -> 551;
569 -> 562;
569 -> 551;
570 -> 551;
571 -> 565;
571 -> 570;
572 -> 566;
572 -> 570;
573 -> 567;
573 -> 570;
574 -> 568;
574 -> 570;
575 -> 569;
575 -> 570;
576 -> 571;
576 -> 572;
576 -> 573;
576 -> 570;
577 -> 571;
577 -> 570;
578 -> 576;
578 -> 570;
579 -> 574;
579 -> 577;
579 -> 578;
579 -> 537;
579 -> 576;
579 -> 570;
580 -> 576;
580 -> 570;
581 -> 575;
581 -> 580;
581 -> 0;
581 -> 579;
581 -> 570;
582 -> 551;
583 -> 553;
583 -> 551;
584 -> 552;
584 -> 583;
584 -> 533;
584 -> 581;
584 -> 551;
585 -> 553;
585 -> 551;
586 -> 558;
586 -> 534;
586 -> 551;
587 -> 558;
587 -> 585;
587 -> 586;
587 -> 534;
587 -> 584;
587 -> 551;
588 -> 533;
588 -> 587;
588 -> 527;
589 -> 534;
589 -> 587;
589 -> 527;
590 -> 535;
590 -> 527;
591 -> 536;
591 -> 527;
592 -> 581;
592 -> 527;
593 -> 527;
594 -> 527;
595 -> 588;
595 -> 594;
596 -> 589;
596 -> 594;
597 -> 590;
597 -> 594;
598 -> 591;
598 -> 594;
599 -> 589;
599 -> 594;
600 -> 592;
600 -> 594;
601 -> 593;
601 -> 594;
602 -> 601;
602 -> 594;
603 -> 601;
603 -> 594;
604 -> 601;
604 -> 594;
605 -> 601;
605 -> 594;
606 -> 601;
606 -> 594;
607 -> 595;
607 -> 594;
608 -> 595;
608 -> 588;
608 -> 594;
609 -> 595;
609 -> 594;
610 -> 599;
610 -> 607;
610 -> 594;
611 -> 0;
611 -> 594;
612 -> 595;
612 -> 601;
612 -> 594;
613 -> 596;
613 -> 601;
613 -> 594;
614 -> 597;
614 -> 601;
614 -> 594;
615 -> 598;
615 -> 601;
615 -> 594;
616 -> 599;
616 -> 601;
616 -> 594;
617 -> 600;
617 -> 601;
617 -> 594;
618 -> 593;
618 -> 525;
619 -> 525;
620 -> 526;
620 -> 618;
620 -> 619;
620 -> 613;
620 -> 614;
620 -> 615;
620 -> 616;
620 -> 617;
620 -> 612;
620 -> 610;
620 -> 588;
620 -> 590;
620 -> 591;
620 -> 525;
621 -> 523;
621 -> 620;
621 -> 522;
622 -> 621;
622 -> 520;
623 -> 622;
623 -> 518;
624 -> 623;
624 -> 620;
624 -> 518;
625 -> 518;
626 -> 623;
626 -> 625;
626 -> 620;
626 -> 518;
627 -> 0;
627 -> 518;
628 -> 626;
628 -> 627;
628 -> 518;
629 -> 82;
629 -> 628;
629 -> 75;
630 -> 516;
630 -> 75;
631 -> 630;
631 -> 1;
632 -> 1;
633 -> 0;
633 -> 1;
634 -> 1;
635 -> 633;
635 -> 634;
636 -> 632;
636 -> 634;
637 -> 632;
637 -> 634;
638 -> 632;
638 -> 634;
639 -> 632;
639 -> 634;
640 -> 632;
640 -> 634;
641 -> 632;
641 -> 634;
642 -> 635;
642 -> 634;
643 -> 636;
643 -> 634;
644 -> 637;
644 -> 634;
645 -> 638;
645 -> 634;
646 -> 639;
646 -> 634;
647 -> 640;
647 -> 634;
648 -> 641;
648 -> 634;
649 -> 634;
650 -> 642;
650 -> 649;
651 -> 643;
651 -> 649;
652 -> 644;
652 -> 649;
653 -> 645;
653 -> 649;
654 -> 646;
654 -> 649;
655 -> 647;
655 -> 649;
656 -> 648;
656 -> 649;
657 -> 650;
657 -> 649;
658 -> 650;
658 -> 649;
659 -> 649;
660 -> 651;
660 -> 649;
661 -> 652;
661 -> 649;
662 -> 653;
662 -> 649;
663 -> 654;
663 -> 649;
664 -> 655;
664 -> 649;
666 -> 665;
668 -> 667;
669 -> 656;
669 -> 649;
670 -> 649;
671 -> 658;
671 -> 670;
672 -> 659;
672 -> 670;
673 -> 660;
673 -> 670;
674 -> 661;
674 -> 670;
675 -> 662;
675 -> 670;
676 -> 663;
676 -> 670;
677 -> 664;
677 -> 670;
678 -> 658;
678 -> 670;
679 -> 669;
679 -> 670;
680 -> 659;
680 -> 670;
681 -> 659;
681 -> 670;
682 -> 659;
682 -> 670;
683 -> 682;
683 -> 670;
684 -> 682;
684 -> 670;
685 -> 682;
685 -> 670;
686 -> 682;
686 -> 670;
687 -> 682;
687 -> 670;
688 -> 682;
688 -> 670;
689 -> 682;
689 -> 670;
690 -> 682;
690 -> 670;
691 -> 682;
691 -> 670;
692 -> 682;
692 -> 670;
693 -> 682;
693 -> 670;
694 -> 682;
694 -> 670;
695 -> 682;
695 -> 670;
696 -> 682;
696 -> 670;
697 -> 682;
697 -> 670;
698 -> 671;
698 -> 682;
698 -> 670;
699 -> 672;
699 -> 682;
699 -> 670;
700 -> 673;
700 -> 682;
700 -> 670;
701 -> 674;
701 -> 682;
701 -> 670;
702 -> 675;
702 -> 682;
702 -> 670;
703 -> 676;
703 -> 682;
703 -> 670;
704 -> 677;
704 -> 682;
704 -> 670;
705 -> 678;
705 -> 670;
706 -> 705;
706 -> 682;
706 -> 670;
707 -> 679;
707 -> 682;
707 -> 670;
708 -> 680;
708 -> 682;
708 -> 670;
709 -> 681;
709 -> 682;
709 -> 670;
710 -> 659;
710 -> 634;
711 -> 710;
711 -> 1;
712 -> 632;
712 -> 1;
713 -> 1;
714 -> 632;
714 -> 713;
715 -> 711;
715 -> 713;
716 -> 715;
716 -> 698;
716 -> 713;
717 -> 715;
717 -> 699;
717 -> 713;
718 -> 715;
718 -> 700;
718 -> 713;
719 -> 714;
719 -> 713;
720 -> 715;
720 -> 702;
720 -> 713;
721 -> 715;
721 -> 703;
721 -> 713;
722 -> 713;
723 -> 715;
723 -> 706;
723 -> 713;
724 -> 715;
724 -> 707;
724 -> 713;
725 -> 715;
725 -> 708;
725 -> 713;
726 -> 715;
726 -> 709;
726 -> 713;
727 -> 713;
728 -> 716;
728 -> 727;
729 -> 717;
729 -> 727;
730 -> 718;
730 -> 727;
731 -> 719;
731 -> 727;
732 -> 720;
732 -> 727;
733 -> 721;
733 -> 727;
734 -> 722;
734 -> 727;
735 -> 723;
735 -> 727;
736 -> 724;
736 -> 727;
737 -> 725;
737 -> 727;
738 -> 726;
738 -> 727;
739 -> 722;
739 -> 727;
740 -> 739;
740 -> 727;
741 -> 739;
741 -> 727;
742 -> 739;
742 -> 727;
743 -> 739;
743 -> 727;
744 -> 739;
744 -> 727;
745 -> 739;
745 -> 727;
746 -> 739;
746 -> 727;
747 -> 739;
747 -> 727;
748 -> 739;
748 -> 727;
749 -> 739;
749 -> 727;
750 -> 739;
750 -> 727;
751 -> 739;
751 -> 727;
752 -> 739;
752 -> 727;
753 -> 739;
753 -> 727;
754 -> 739;
754 -> 727;
755 -> 731;
755 -> 739;
755 -> 727;
756 -> 734;
756 -> 739;
756 -> 727;
757 -> 722;
757 -> 1;
758 -> 1;
759 -> 633;
759 -> 758;
760 -> 632;
760 -> 758;
761 -> 632;
761 -> 758;
762 -> 632;
762 -> 758;
763 -> 632;
763 -> 758;
764 -> 632;
764 -> 758;
765 -> 632;
765 -> 758;
766 -> 759;
766 -> 758;
767 -> 760;
767 -> 758;
768 -> 761;
768 -> 758;
769 -> 762;
769 -> 758;
770 -> 763;
770 -> 758;
771 -> 764;
771 -> 758;
772 -> 765;
772 -> 758;
773 -> 758;
774 -> 766;
774 -> 773;
775 -> 767;
775 -> 773;
776 -> 768;
776 -> 773;
777 -> 769;
777 -> 773;
778 -> 770;
778 -> 773;
779 -> 771;
779 -> 773;
780 -> 772;
780 -> 773;
781 -> 774;
781 -> 773;
782 -> 774;
782 -> 773;
783 -> 773;
784 -> 775;
784 -> 773;
785 -> 776;
785 -> 773;
786 -> 777;
786 -> 773;
787 -> 778;
787 -> 773;
788 -> 779;
788 -> 773;
789 -> 780;
789 -> 773;
790 -> 773;
791 -> 782;
791 -> 790;
792 -> 783;
792 -> 790;
793 -> 784;
793 -> 790;
794 -> 785;
794 -> 790;
795 -> 786;
795 -> 790;
796 -> 787;
796 -> 790;
797 -> 788;
797 -> 790;
798 -> 782;
798 -> 790;
799 -> 789;
799 -> 790;
800 -> 783;
800 -> 790;
801 -> 783;
801 -> 790;
802 -> 783;
802 -> 790;
803 -> 802;
803 -> 790;
804 -> 802;
804 -> 790;
805 -> 802;
805 -> 790;
806 -> 802;
806 -> 790;
807 -> 802;
807 -> 790;
808 -> 802;
808 -> 790;
809 -> 802;
809 -> 790;
810 -> 802;
810 -> 790;
811 -> 802;
811 -> 790;
812 -> 802;
812 -> 790;
813 -> 802;
813 -> 790;
814 -> 802;
814 -> 790;
815 -> 802;
815 -> 790;
816 -> 802;
816 -> 790;
817 -> 802;
817 -> 790;
818 -> 791;
818 -> 802;
818 -> 790;
819 -> 792;
819 -> 802;
819 -> 790;
820 -> 793;
820 -> 802;
820 -> 790;
821 -> 794;
821 -> 802;
821 -> 790;
822 -> 795;
822 -> 802;
822 -> 790;
823 -> 796;
823 -> 802;
823 -> 790;
824 -> 797;
824 -> 802;
824 -> 790;
825 -> 798;
825 -> 790;
826 -> 825;
826 -> 802;
826 -> 790;
827 -> 799;
827 -> 802;
827 -> 790;
828 -> 800;
828 -> 802;
828 -> 790;
829 -> 801;
829 -> 802;
829 -> 790;
830 -> 783;
830 -> 758;
831 -> 830;
831 -> 1;
832 -> 632;
832 -> 1;
833 -> 1;
834 -> 632;
834 -> 833;
835 -> 831;
835 -> 833;
836 -> 835;
836 -> 818;
836 -> 833;
837 -> 835;
837 -> 819;
837 -> 833;
838 -> 835;
838 -> 820;
838 -> 833;
839 -> 834;
839 -> 833;
840 -> 835;
840 -> 822;
840 -> 833;
841 -> 835;
841 -> 823;
841 -> 833;
842 -> 833;
843 -> 835;
843 -> 826;
843 -> 833;
844 -> 835;
844 -> 827;
844 -> 833;
845 -> 835;
845 -> 828;
845 -> 833;
846 -> 835;
846 -> 829;
846 -> 833;
847 -> 833;
848 -> 836;
848 -> 847;
849 -> 837;
849 -> 847;
850 -> 838;
850 -> 847;
851 -> 839;
851 -> 847;
852 -> 840;
852 -> 847;
853 -> 841;
853 -> 847;
854 -> 842;
854 -> 847;
855 -> 843;
855 -> 847;
856 -> 844;
856 -> 847;
857 -> 845;
857 -> 847;
858 -> 846;
858 -> 847;
859 -> 842;
859 -> 847;
860 -> 859;
860 -> 847;
861 -> 859;
861 -> 847;
862 -> 859;
862 -> 847;
863 -> 859;
863 -> 847;
864 -> 859;
864 -> 847;
865 -> 859;
865 -> 847;
866 -> 859;
866 -> 847;
867 -> 859;
867 -> 847;
868 -> 859;
868 -> 847;
869 -> 859;
869 -> 847;
870 -> 859;
870 -> 847;
871 -> 859;
871 -> 847;
872 -> 859;
872 -> 847;
873 -> 859;
873 -> 847;
874 -> 859;
874 -> 847;
875 -> 851;
875 -> 859;
875 -> 847;
876 -> 854;
876 -> 859;
876 -> 847;
877 -> 842;
877 -> 1;
878 -> 757;
878 -> 632;
878 -> 1;
879 -> 877;
879 -> 632;
879 -> 1;
880 -> 1;
881 -> 631;
881 -> 880;
882 -> 632;
882 -> 880;
883 -> 880;
884 -> 880;
885 -> 883;
885 -> 884;
886 -> 881;
886 -> 884;
887 -> 0;
887 -> 884;
888 -> 884;
889 -> 885;
889 -> 884;
890 -> 884;
891 -> 887;
891 -> 890;
892 -> 888;
892 -> 890;
893 -> 889;
893 -> 890;
894 -> 886;
894 -> 890;
895 -> 890;
896 -> 891;
896 -> 890;
897 -> 892;
897 -> 890;
898 -> 895;
898 -> 890;
899 -> 893;
899 -> 890;
900 -> 890;
901 -> 896;
901 -> 900;
902 -> 897;
902 -> 900;
903 -> 898;
903 -> 900;
904 -> 899;
904 -> 900;
905 -> 894;
905 -> 900;
906 -> 900;
907 -> 901;
907 -> 0;
907 -> 900;
908 -> 907;
908 -> 902;
908 -> 900;
909 -> 908;
910 -> 905;
910 -> 909;
911 -> 909;
912 -> 910;
912 -> 628;
912 -> 911;
913 -> 911;
914 -> 912;
914 -> 908;
915 -> 908;
916 -> 905;
916 -> 915;
917 -> 916;
917 -> 628;
917 -> 915;
918 -> 917;
918 -> 908;
919 -> 918;
920 -> 914;
920 -> 628;
920 -> 918;
921 -> 904;
921 -> 918;
922 -> 919;
922 -> 920;
922 -> 921;
922 -> 883;
922 -> 918;
923 -> 922;
923 -> 919;
924 -> 922;
924 -> 919;
925 -> 922;
925 -> 919;
926 -> 922;
926 -> 919;
927 -> 919;
928 -> 927;
928 -> 919;
929 -> 919;
930 -> 924;
930 -> 929;
931 -> 930;
931 -> 919;
932 -> 925;
932 -> 919;
933 -> 927;
933 -> 919;
934 -> 931;
934 -> 922;
934 -> 932;
934 -> 933;
934 -> 928;
934 -> 919;
935 -> 908;
936 -> 914;
936 -> 908;
937 -> 904;
937 -> 883;
937 -> 934;
937 -> 936;
938 -> 936;
938 -> 628;
939 -> 901;
939 -> 0;
939 -> 900;
940 -> 939;
940 -> 902;
940 -> 900;
941 -> 906;
941 -> 940;
942 -> 941;
942 -> 905;
942 -> 906;
942 -> 628;
942 -> 940;
943 -> 940;
944 -> 942;
944 -> 943;
945 -> 944;
945 -> 942;
945 -> 943;
946 -> 940;
947 -> 905;
947 -> 946;
948 -> 947;
948 -> 945;
948 -> 946;
949 -> 948;
949 -> 940;
950 -> 940;
951 -> 905;
951 -> 950;
952 -> 951;
952 -> 949;
952 -> 950;
953 -> 952;
953 -> 940;
954 -> 904;
954 -> 937;
954 -> 940;
955 -> 940;
956 -> 905;
956 -> 955;
957 -> 956;
957 -> 949;
957 -> 955;
958 -> 956;
958 -> 957;
959 -> 957;
960 -> 958;
960 -> 959;
961 -> 959;
962 -> 960;
962 -> 961;
963 -> 961;
964 -> 962;
964 -> 958;
964 -> 963;
965 -> 964;
965 -> 961;
966 -> 965;
966 -> 959;
967 -> 958;
967 -> 959;
968 -> 967;
968 -> 966;
968 -> 959;
969 -> 958;
969 -> 959;
970 -> 959;
971 -> 956;
971 -> 968;
971 -> 957;
972 -> 956;
972 -> 968;
972 -> 955;
973 -> 972;
973 -> 940;
974 -> 904;
974 -> 954;
974 -> 940;
975 -> 904;
975 -> 940;
976 -> 940;
977 -> 940;
978 -> 976;
978 -> 977;
979 -> 976;
979 -> 977;
980 -> 976;
980 -> 977;
981 -> 975;
981 -> 977;
982 -> 905;
982 -> 977;
983 -> 977;
984 -> 982;
984 -> 983;
985 -> 984;
985 -> 973;
985 -> 983;
986 -> 983;
987 -> 985;
987 -> 986;
988 -> 987;
988 -> 986;
989 -> 988;
989 -> 985;
989 -> 986;
990 -> 986;
991 -> 989;
991 -> 990;
992 -> 991;
992 -> 989;
992 -> 990;
993 -> 992;
993 -> 990;
994 -> 993;
994 -> 977;
995 -> 981;
995 -> 977;
996 -> 994;
996 -> 995;
996 -> 993;
996 -> 974;
996 -> 977;
997 -> 977;
998 -> 977;
999 -> 978;
999 -> 998;
999 -> 977;
1000 -> 977;
1001 -> 982;
1001 -> 1000;
1002 -> 1000;
1003 -> 1001;
1003 -> 1002;
1004 -> 1002;
1005 -> 1003;
1005 -> 1004;
1006 -> 1005;
1006 -> 996;
1006 -> 1004;
1007 -> 1005;
1007 -> 996;
1007 -> 1004;
1008 -> 1007;
1008 -> 1002;
1009 -> 1003;
1009 -> 996;
1009 -> 1002;
1010 -> 1003;
1010 -> 1009;
1010 -> 1002;
1011 -> 1010;
1011 -> 1000;
1012 -> 1011;
1012 -> 977;
1013 -> 997;
1013 -> 977;
1014 -> 981;
1014 -> 977;
1015 -> 1013;
1015 -> 1014;
1015 -> 1012;
1015 -> 974;
1015 -> 1009;
1015 -> 977;
1016 -> 977;
1017 -> 1015;
1017 -> 1016;
1018 -> 1016;
1019 -> 1017;
1019 -> 1018;
1020 -> 1018;
1021 -> 1020;
1022 -> 1019;
1022 -> 1016;
1023 -> 1017;
1023 -> 1016;
1024 -> 1016;
1025 -> 1024;
1026 -> 1025;
1027 -> 1015;
1027 -> 1016;
1028 -> 1015;
1028 -> 1016;
1029 -> 1015;
1029 -> 1016;
1030 -> 1028;
1030 -> 1016;
1031 -> 1027;
1031 -> 1016;
1032 -> 1016;
1033 -> 1029;
1033 -> 1022;
1033 -> 1016;
1034 -> 1016;
1035 -> 1031;
1035 -> 1034;
1036 -> 1032;
1036 -> 1034;
1037 -> 1033;
1037 -> 1034;
1038 -> 1029;
1038 -> 1034;
1039 -> 1037;
1039 -> 1034;
1040 -> 1036;
1040 -> 1034;
1041 -> 1038;
1041 -> 1022;
1041 -> 1040;
1042 -> 1038;
1042 -> 1022;
1042 -> 1041;
1042 -> 1034;
1043 -> 1039;
1043 -> 1042;
1043 -> 1022;
1043 -> 1041;
1043 -> 1034;
1044 -> 1035;
1044 -> 1034;
1045 -> 1034;
1046 -> 1044;
1046 -> 1045;
1047 -> 1038;
1047 -> 1045;
1048 -> 1046;
1048 -> 1045;
1049 -> 1045;
1050 -> 1048;
1050 -> 1049;
1051 -> 1047;
1051 -> 1049;
1052 -> 1049;
1053 -> 1050;
1053 -> 1052;
1053 -> 1049;
1054 -> 1049;
1055 -> 1051;
1055 -> 1043;
1055 -> 1054;
1056 -> 1054;
1057 -> 1055;
1057 -> 1049;
1058 -> 1050;
1058 -> 1049;
1059 -> 1057;
1059 -> 1043;
1059 -> 1058;
1059 -> 1049;
1060 -> 1045;
1061 -> 1047;
1061 -> 1059;
1061 -> 1060;
1062 -> 1060;
1063 -> 1061;
1063 -> 1045;
1064 -> 1043;
1064 -> 1034;
1065 -> 1034;
1066 -> 1064;
1066 -> 1065;
1066 -> 1034;
1067 -> 1066;
1068 -> 1067;
1068 -> 1063;
1069 -> 1068;
1069 -> 1066;
1070 -> 1043;
1070 -> 1066;
1071 -> 1069;
1071 -> 1066;
1072 -> 1066;
1073 -> 1034;
1074 -> 1071;
1074 -> 1063;
1074 -> 1034;
1075 -> 1034;
1076 -> 1074;
1076 -> 1075;
1076 -> 1034;
1077 -> 1035;
1077 -> 1034;
1078 -> 1036;
1078 -> 1034;
1079 -> 1071;
1079 -> 1063;
1079 -> 1034;
1080 -> 1034;
1081 -> 1077;
1081 -> 1080;
1082 -> 1078;
1082 -> 1080;
1083 -> 1079;
1083 -> 1080;
1084 -> 1038;
1084 -> 1080;
1085 -> 1084;
1085 -> 1080;
1086 -> 1081;
1086 -> 1080;
1087 -> 1082;
1087 -> 1080;
1088 -> 1085;
1088 -> 1086;
1088 -> 1087;
1088 -> 1071;
1088 -> 1080;
1089 -> 1080;
1090 -> 1088;
1090 -> 1080;
1091 -> 1080;
1092 -> 1091;
1093 -> 1083;
1093 -> 1091;
1094 -> 1091;
1095 -> 1093;
1095 -> 1094;
1095 -> 1091;
1096 -> 1083;
1096 -> 1091;
1097 -> 1090;
1097 -> 1091;
1098 -> 1093;
1098 -> 1091;
1099 -> 1096;
1099 -> 1097;
1099 -> 1098;
1099 -> 1090;
1099 -> 1091;
1100 -> 1088;
1100 -> 1099;
1101 -> 1015;
1101 -> 1016;
1102 -> 1101;
1102 -> 1100;
1102 -> 1016;
1103 -> 1102;
1104 -> 1103;
1104 -> 1102;
1105 -> 1102;
1106 -> 1104;
1106 -> 1105;
1107 -> 1101;
1107 -> 1105;
1108 -> 1105;
1109 -> 1107;
1109 -> 1108;
1110 -> 1108;
1111 -> 1109;
1111 -> 1110;
1112 -> 1111;
1112 -> 1108;
1113 -> 1109;
1113 -> 1105;
1114 -> 1106;
1114 -> 1113;
1114 -> 1103;
1114 -> 1109;
1114 -> 1105;
1115 -> 1105;
1116 -> 1107;
1116 -> 1115;
1117 -> 1116;
1117 -> 1114;
1117 -> 1115;
1118 -> 1116;
1118 -> 1114;
1118 -> 1115;
1119 -> 1118;
1119 -> 1105;
1120 -> 1105;
1121 -> 1120;
1121 -> 1119;
1121 -> 1114;
1121 -> 1105;
1122 -> 1120;
1122 -> 1121;
1123 -> 1119;
1123 -> 1122;
1123 -> 1120;
1124 -> 1102;
1125 -> 1101;
1125 -> 1102;
1126 -> 1125;
1126 -> 1123;
1126 -> 1102;
1127 -> 1102;
1128 -> 1103;
1128 -> 1126;
1128 -> 1102;
1129 -> 1101;
1129 -> 1128;
1129 -> 1102;
1130 -> 1126;
1130 -> 1102;
1131 -> 1102;
1132 -> 1101;
1132 -> 1129;
1132 -> 1016;
1133 -> 1015;
1133 -> 1016;
1134 -> 1016;
1135 -> 1133;
1135 -> 1134;
1136 -> 1134;
1137 -> 1136;
1138 -> 1135;
1138 -> 1137;
1139 -> 1138;
1139 -> 1132;
1139 -> 1137;
1140 -> 1138;
1140 -> 1132;
1140 -> 1137;
1141 -> 1140;
1141 -> 1136;
1142 -> 1135;
1142 -> 1132;
1142 -> 1136;
1143 -> 1142;
1143 -> 1016;
1144 -> 1016;
1145 -> 1015;
1145 -> 1016;
1146 -> 1145;
1146 -> 1143;
1146 -> 1016;
1147 -> 1016;
1148 -> 1145;
1148 -> 1143;
1148 -> 1147;
1148 -> 1016;
1149 -> 1148;
1150 -> 1145;
1150 -> 1143;
1150 -> 1148;
1151 -> 1149;
1151 -> 1148;
1152 -> 1148;
1153 -> 1145;
1153 -> 1151;
1153 -> 1016;
1154 -> 1015;
1154 -> 1016;
1155 -> 1015;
1155 -> 1016;
1156 -> 1155;
1156 -> 1153;
1156 -> 1016;
1157 -> 1015;
1157 -> 1016;
1158 -> 1015;
1158 -> 1016;
1159 -> 1157;
1159 -> 1016;
1160 -> 1016;
1161 -> 1159;
1161 -> 1160;
1162 -> 1158;
1162 -> 1160;
1163 -> 1162;
1163 -> 1153;
1163 -> 1160;
1164 -> 1161;
1164 -> 1163;
1164 -> 1160;
1165 -> 1160;
1166 -> 1160;
1167 -> 1164;
1167 -> 1166;
1168 -> 1164;
1168 -> 1166;
1169 -> 1164;
1169 -> 1166;
1170 -> 1165;
1170 -> 1166;
1171 -> 1167;
1171 -> 1170;
1171 -> 1166;
1172 -> 1168;
1172 -> 1170;
1172 -> 1166;
1173 -> 1169;
1173 -> 1170;
1173 -> 1166;
1174 -> 1165;
1174 -> 1163;
1174 -> 1171;
1174 -> 1172;
1174 -> 1173;
1174 -> 1164;
1174 -> 1160;
1175 -> 1174;
1175 -> 1165;
1176 -> 1175;
1176 -> 1174;
1176 -> 1165;
1177 -> 1016;
1178 -> 1138;
1178 -> 1176;
1178 -> 1137;
1179 -> 1138;
1179 -> 1176;
1179 -> 1137;
1180 -> 1179;
1180 -> 1136;
1181 -> 1016;
1182 -> 1181;
1183 -> 1015;
1183 -> 1182;
1184 -> 1183;
1184 -> 1176;
1184 -> 1182;
1185 -> 1183;
1185 -> 1176;
1185 -> 1182;
1186 -> 1185;
1186 -> 1181;
1187 -> 1015;
1187 -> 1016;
1188 -> 1015;
1188 -> 1016;
1189 -> 1016;
1190 -> 1188;
1190 -> 1189;
1191 -> 1190;
1191 -> 1176;
1191 -> 1189;
1192 -> 1190;
1192 -> 1176;
1192 -> 1189;
1193 -> 1192;
1193 -> 1016;
1194 -> 1016;
1195 -> 1194;
1195 -> 1193;
1195 -> 1176;
1195 -> 1016;
1196 -> 1194;
1196 -> 1195;
1197 -> 1193;
1197 -> 1196;
1197 -> 1194;
1198 -> 1187;
1198 -> 1197;
1198 -> 1196;
1199 -> 1015;
1199 -> 1016;
1200 -> 1199;
1200 -> 1198;
1200 -> 1016;
1201 -> 1138;
1201 -> 1200;
1201 -> 1137;
1202 -> 1138;
1202 -> 1200;
1202 -> 1137;
1203 -> 1202;
1203 -> 1136;
1204 -> 1183;
1204 -> 1200;
1204 -> 1182;
1205 -> 1183;
1205 -> 1200;
1205 -> 1182;
1206 -> 1205;
1206 -> 1181;
1207 -> 1015;
1207 -> 1016;
1208 -> 1015;
1208 -> 1016;
1209 -> 1207;
1209 -> 0;
1209 -> 1016;
1210 -> 1016;
1211 -> 1207;
1211 -> 1016;
1212 -> 1208;
1212 -> 1211;
1212 -> 1200;
1212 -> 1016;
1213 -> 1212;
1214 -> 1213;
1215 -> 1214;
1215 -> 1213;
1216 -> 1213;
1216 -> 1212;
1217 -> 1207;
1217 -> 1212;
1218 -> 1216;
1218 -> 1207;
1218 -> 1016;
1219 -> 1216;
1219 -> 1016;
1220 -> 1183;
1220 -> 1219;
1220 -> 1182;
1221 -> 1183;
1221 -> 1219;
1221 -> 1182;
1222 -> 1221;
1222 -> 1181;
1223 -> 1015;
1223 -> 1016;
1224 -> 1015;
1224 -> 1016;
1225 -> 1223;
1225 -> 1219;
1225 -> 1016;
1226 -> 1016;
1227 -> 1225;
1227 -> 1226;
1228 -> 1225;
1228 -> 1226;
1229 -> 1224;
1229 -> 1226;
1230 -> 1226;
1231 -> 1229;
1231 -> 1230;
1232 -> 1230;
1233 -> 1231;
1233 -> 1232;
1233 -> 1219;
1233 -> 1230;
1234 -> 1233;
1234 -> 1230;
1235 -> 1234;
1235 -> 1226;
1236 -> 1228;
1236 -> 1226;
1237 -> 1227;
1237 -> 1236;
1237 -> 1233;
1237 -> 1219;
1237 -> 1226;
1238 -> 1226;
1239 -> 1229;
1239 -> 1238;
1240 -> 1239;
1240 -> 1237;
1240 -> 1238;
1241 -> 1226;
1242 -> 1240;
1242 -> 1235;
1242 -> 1226;
1243 -> 1015;
1243 -> 1016;
1244 -> 1016;
1245 -> 1243;
1245 -> 1244;
1246 -> 1244;
1247 -> 1245;
1247 -> 1246;
1247 -> 1242;
1247 -> 1244;
1248 -> 1247;
1248 -> 1016;
1249 -> 1016;
1250 -> 1248;
1250 -> 1249;
1250 -> 1016;
1251 -> 1183;
1251 -> 1250;
1251 -> 1182;
1252 -> 1183;
1252 -> 1250;
1252 -> 1182;
1253 -> 1252;
1253 -> 1181;
1254 -> 1138;
1254 -> 1250;
1254 -> 1137;
1255 -> 1138;
1255 -> 1250;
1255 -> 1137;
1256 -> 1255;
1256 -> 1136;
1257 -> 1250;
1258 -> 1257;
1258 -> 1250;
1259 -> 1250;
1259 -> 1207;
1259 -> 1016;
1260 -> 1145;
1260 -> 1250;
1260 -> 1016;
1261 -> 1250;
1261 -> 1034;
1262 -> 1261;
1262 -> 1075;
1262 -> 1034;
1263 -> 1073;
1263 -> 1034;
1264 -> 1261;
1264 -> 1263;
1264 -> 1250;
1264 -> 1034;
1265 -> 1264;
1265 -> 1094;
1265 -> 1091;
1266 -> 1092;
1266 -> 1091;
1267 -> 1264;
1267 -> 1266;
1267 -> 1091;
1268 -> 1138;
1268 -> 1267;
1268 -> 1137;
1269 -> 1138;
1269 -> 1267;
1269 -> 1137;
1270 -> 1269;
1270 -> 1136;
1271 -> 1267;
1271 -> 1165;
1272 -> 1267;
1272 -> 1165;
1273 -> 1271;
1273 -> 1267;
1273 -> 1272;
1273 -> 1165;
1274 -> 1138;
1274 -> 1273;
1274 -> 1137;
1275 -> 1138;
1275 -> 1273;
1275 -> 1137;
1276 -> 1275;
1276 -> 1136;
1277 -> 1183;
1277 -> 1273;
1277 -> 1182;
1278 -> 1183;
1278 -> 1273;
1278 -> 1182;
1279 -> 1278;
1279 -> 1181;
1280 -> 1015;
1280 -> 1016;
1281 -> 1015;
1281 -> 1016;
1282 -> 1280;
1282 -> 1273;
1282 -> 1016;
1283 -> 1016;
1284 -> 1016;
1285 -> 1282;
1285 -> 1284;
1286 -> 1283;
1286 -> 1284;
1287 -> 1281;
1287 -> 1284;
1288 -> 1286;
1288 -> 1284;
1289 -> 1284;
1290 -> 1287;
1290 -> 1273;
1290 -> 1284;
1291 -> 1284;
1292 -> 1289;
1292 -> 1291;
1293 -> 1287;
1293 -> 1291;
1294 -> 1292;
1294 -> 1291;
1295 -> 1293;
1295 -> 1273;
1295 -> 1294;
1296 -> 1291;
1297 -> 1293;
1297 -> 1296;
1298 -> 1296;
1299 -> 1297;
1299 -> 1298;
1300 -> 1298;
1301 -> 1298;
1302 -> 1301;
1303 -> 1290;
1303 -> 1285;
1303 -> 1298;
1304 -> 1296;
1305 -> 1304;
1306 -> 1291;
1307 -> 1291;
1308 -> 1291;
1309 -> 1307;
1309 -> 1291;
1310 -> 1292;
1310 -> 1291;
1311 -> 1291;
1312 -> 1310;
1312 -> 1311;
1313 -> 1293;
1313 -> 1311;
1314 -> 1313;
1314 -> 1311;
1315 -> 1312;
1315 -> 1311;
1316 -> 1311;
1317 -> 1311;
1318 -> 1317;
1319 -> 1317;
1320 -> 1318;
1320 -> 1317;
1321 -> 1283;
1322 -> 1321;
1323 -> 1322;
1324 -> 1303;
1324 -> 1323;
1325 -> 1324;
1325 -> 1322;
1326 -> 1283;
1327 -> 1283;
1328 -> 1327;
1329 -> 1327;
1330 -> 1328;
1330 -> 1329;
1331 -> 1283;
1332 -> 1283;
1333 -> 1332;
1334 -> 1303;
1334 -> 1333;
1335 -> 1334;
1335 -> 1332;
1336 -> 1145;
1336 -> 1303;
1336 -> 1016;
1337 -> 1016;
1338 -> 1015;
1338 -> 1337;
1339 -> 1338;
1339 -> 1303;
1339 -> 1337;
1340 -> 1338;
1340 -> 1303;
1340 -> 1337;
1341 -> 1340;
1341 -> 1016;
1342 -> 1303;
1343 -> 1342;
1343 -> 1303;
1344 -> 1303;
1344 -> 1207;
1344 -> 1016;
1345 -> 1015;
1345 -> 1016;
1346 -> 1015;
1346 -> 1016;
1347 -> 1345;
1347 -> 1303;
1347 -> 1016;
1348 -> 1016;
1349 -> 1016;
1350 -> 1347;
1350 -> 1349;
1351 -> 1348;
1351 -> 1349;
1352 -> 1346;
1352 -> 1349;
1353 -> 1351;
1353 -> 1349;
1354 -> 1349;
1355 -> 1352;
1355 -> 1303;
1355 -> 1349;
1356 -> 1349;
1357 -> 1354;
1357 -> 1356;
1358 -> 1352;
1358 -> 1356;
1359 -> 1357;
1359 -> 1356;
1360 -> 1358;
1360 -> 1303;
1360 -> 1359;
1361 -> 1356;
1362 -> 1358;
1362 -> 1361;
1363 -> 1361;
1364 -> 1362;
1364 -> 1363;
1365 -> 1363;
1366 -> 1363;
1367 -> 1366;
1368 -> 1355;
1368 -> 1350;
1368 -> 1363;
1369 -> 1361;
1370 -> 1369;
1371 -> 1356;
1372 -> 1356;
1373 -> 1356;
1374 -> 1372;
1374 -> 1356;
1375 -> 1357;
1375 -> 1356;
1376 -> 1356;
1377 -> 1375;
1377 -> 1376;
1378 -> 1358;
1378 -> 1376;
1379 -> 1378;
1379 -> 1376;
1380 -> 1377;
1380 -> 1376;
1381 -> 1376;
1382 -> 1376;
1383 -> 1382;
1384 -> 1382;
1385 -> 1383;
1385 -> 1382;
1386 -> 1345;
1386 -> 1016;
1387 -> 1348;
1388 -> 1387;
1389 -> 1388;
1390 -> 1368;
1390 -> 1389;
1391 -> 1390;
1391 -> 1388;
1392 -> 1348;
1393 -> 1138;
1393 -> 1368;
1393 -> 1137;
1394 -> 1138;
1394 -> 1368;
1394 -> 1137;
1395 -> 1394;
1395 -> 1136;
1396 -> 1015;
1396 -> 1016;
1397 -> 1015;
1397 -> 1016;
1398 -> 1016;
1399 -> 1396;
1399 -> 1398;
1400 -> 1398;
1401 -> 1399;
1401 -> 1368;
1401 -> 1400;
1402 -> 1400;
1403 -> 1401;
1403 -> 1016;
1404 -> 1397;
1404 -> 1016;
1405 -> 1403;
1405 -> 1404;
1405 -> 1016;
1406 -> 1016;
1407 -> 1405;
1408 -> 1407;
1408 -> 1405;
1409 -> 1405;
1409 -> 1207;
1409 -> 1016;
1410 -> 1015;
1410 -> 1016;
1411 -> 1015;
1411 -> 1016;
1412 -> 1410;
1412 -> 1016;
1413 -> 1412;
1413 -> 1405;
1413 -> 1016;
1414 -> 1410;
1414 -> 1413;
1414 -> 1016;
1415 -> 1016;
1416 -> 1411;
1416 -> 1415;
1417 -> 1415;
1418 -> 1416;
1418 -> 1417;
1419 -> 1417;
1420 -> 1419;
1421 -> 1418;
1421 -> 1420;
1422 -> 1421;
1422 -> 1413;
1422 -> 1420;
1423 -> 1421;
1423 -> 1413;
1423 -> 1420;
1424 -> 1423;
1424 -> 1419;
1425 -> 1418;
1425 -> 1413;
1425 -> 1419;
1426 -> 1415;
1427 -> 1425;
1427 -> 1016;
1428 -> 1016;
1429 -> 1411;
1429 -> 1428;
1430 -> 1429;
1430 -> 1425;
1430 -> 1428;
1431 -> 1430;
1432 -> 1431;
1432 -> 1430;
1433 -> 1430;
1434 -> 1432;
1434 -> 1433;
1434 -> 1430;
1435 -> 1434;
1435 -> 1430;
1436 -> 1435;
1436 -> 1429;
1436 -> 1430;
1437 -> 1429;
1437 -> 1434;
1437 -> 1436;
1437 -> 1428;
1438 -> 1437;
1438 -> 1016;
1439 -> 1438;
1440 -> 1410;
1440 -> 1439;
1440 -> 1016;
1441 -> 1421;
1441 -> 1439;
1441 -> 1420;
1442 -> 1421;
1442 -> 1439;
1442 -> 1420;
1443 -> 1442;
1443 -> 1419;
1444 -> 1439;
1444 -> 1016;
1445 -> 1155;
1445 -> 1439;
1445 -> 1016;
1446 -> 1145;
1446 -> 1439;
1446 -> 1016;
1447 -> 978;
1447 -> 977;
1448 -> 1447;
1449 -> 1448;
1449 -> 982;
1449 -> 1447;
1450 -> 1447;
1451 -> 1450;
1451 -> 982;
1451 -> 1447;
1452 -> 982;
1452 -> 1439;
1452 -> 1449;
1452 -> 1451;
1452 -> 977;
1453 -> 977;
1454 -> 980;
1454 -> 1453;
1454 -> 977;
1455 -> 978;
1455 -> 977;
1456 -> 979;
1456 -> 977;
1457 -> 981;
1457 -> 977;
1458 -> 977;
1459 -> 1455;
1459 -> 1458;
1460 -> 1456;
1460 -> 1458;
1461 -> 1457;
1461 -> 1458;
1462 -> 982;
1462 -> 1458;
1463 -> 1458;
1464 -> 1459;
1464 -> 1463;
1464 -> 1458;
1465 -> 1462;
1465 -> 1452;
1465 -> 1458;
1466 -> 1465;
1467 -> 1462;
1467 -> 1465;
1468 -> 1466;
1468 -> 1465;
1469 -> 1461;
1469 -> 1465;
1470 -> 1465;
1471 -> 1465;
1472 -> 1467;
1472 -> 1471;
1473 -> 1468;
1473 -> 1471;
1474 -> 1469;
1474 -> 1471;
1475 -> 1470;
1475 -> 1471;
1476 -> 1470;
1476 -> 1471;
1477 -> 1471;
1478 -> 1472;
1478 -> 1471;
1479 -> 1475;
1479 -> 1471;
1480 -> 1476;
1480 -> 1471;
1481 -> 1477;
1481 -> 1471;
1482 -> 1474;
1482 -> 1471;
1483 -> 1471;
1484 -> 1471;
1485 -> 1478;
1485 -> 1484;
1486 -> 1479;
1486 -> 1484;
1487 -> 1480;
1487 -> 1484;
1488 -> 1481;
1488 -> 1484;
1489 -> 1482;
1489 -> 1484;
1490 -> 1483;
1490 -> 1484;
1491 -> 1484;
1492 -> 1491;
1492 -> 1484;
1493 -> 1491;
1493 -> 1484;
1494 -> 1491;
1494 -> 1484;
1495 -> 1491;
1495 -> 1484;
1496 -> 1491;
1496 -> 1484;
1497 -> 1491;
1497 -> 1484;
1498 -> 1485;
1498 -> 1491;
1498 -> 1484;
1499 -> 1486;
1499 -> 1491;
1499 -> 1484;
1500 -> 1487;
1500 -> 1491;
1500 -> 1484;
1501 -> 1488;
1501 -> 1491;
1501 -> 1484;
1502 -> 1489;
1502 -> 1491;
1502 -> 1484;
1503 -> 0;
1503 -> 1484;
1504 -> 1503;
1504 -> 1491;
1504 -> 1484;
1505 -> 1484;
1506 -> 1491;
1506 -> 1505;
1507 -> 1505;
1508 -> 1506;
1508 -> 1491;
1508 -> 1493;
1508 -> 1499;
1508 -> 1507;
1508 -> 1505;
1509 -> 1505;
1510 -> 1506;
1510 -> 1491;
1510 -> 1492;
1510 -> 1498;
1510 -> 1509;
1511 -> 1508;
1511 -> 1510;
1511 -> 1491;
1511 -> 1452;
1511 -> 1505;
1512 -> 1511;
1512 -> 1484;
1513 -> 1512;
1514 -> 1513;
1514 -> 1491;
1514 -> 1512;
1515 -> 1471;
1516 -> 1472;
1516 -> 1515;
1517 -> 1515;
1518 -> 1516;
1518 -> 1517;
1519 -> 1518;
1519 -> 1515;
1520 -> 1516;
1520 -> 1471;
1521 -> 1520;
1521 -> 1483;
1521 -> 1516;
1521 -> 1491;
1521 -> 1492;
1521 -> 1498;
1521 -> 1493;
1521 -> 1499;
1521 -> 1494;
1521 -> 1500;
1521 -> 1495;
1521 -> 1501;
1521 -> 1496;
1521 -> 1504;
1521 -> 1497;
1521 -> 1514;
1521 -> 1502;
1521 -> 1470;
1521 -> 1477;
1521 -> 974;
1521 -> 1503;
1521 -> 1513;
1521 -> 1471;
1522 -> 1471;
1523 -> 1521;
1523 -> 1522;
1524 -> 1521;
1524 -> 1522;
1525 -> 1524;
1525 -> 1521;
1525 -> 1522;
1526 -> 1523;
1526 -> 1522;
1527 -> 1523;
1527 -> 1522;
1528 -> 1522;
1529 -> 1527;
1529 -> 1528;
1530 -> 1524;
1530 -> 1528;
1531 -> 1529;
1531 -> 1525;
1531 -> 0;
1531 -> 1528;
1532 -> 1528;
1533 -> 1529;
1533 -> 1525;
1533 -> 0;
1533 -> 1528;
1534 -> 1529;
1534 -> 1525;
1534 -> 0;
1534 -> 1533;
1535 -> 1529;
1535 -> 1525;
1535 -> 0;
1535 -> 1528;
1536 -> 1529;
1536 -> 1525;
1536 -> 0;
1536 -> 1528;
1537 -> 1529;
1537 -> 1525;
1537 -> 0;
1537 -> 1528;
1538 -> 1529;
1538 -> 1525;
1538 -> 0;
1538 -> 1528;
1539 -> 1529;
1539 -> 1525;
1539 -> 0;
1539 -> 1528;
1540 -> 1528;
1541 -> 1529;
1541 -> 1528;
1542 -> 1540;
1542 -> 1528;
1543 -> 1530;
1543 -> 1525;
1543 -> 1541;
1543 -> 1542;
1543 -> 1528;
1544 -> 1528;
1545 -> 1529;
1545 -> 1528;
1546 -> 1544;
1546 -> 1528;
1547 -> 1528;
1548 -> 1545;
1548 -> 1547;
1549 -> 1546;
1549 -> 1547;
1550 -> 1530;
1550 -> 1547;
1551 -> 1547;
1552 -> 1548;
1552 -> 1543;
1552 -> 1547;
1553 -> 1548;
1553 -> 1552;
1554 -> 0;
1554 -> 1552;
1555 -> 1547;
1556 -> 1555;
1556 -> 1528;
1557 -> 1556;
1557 -> 1528;
1558 -> 1529;
1558 -> 1553;
1558 -> 0;
1558 -> 1557;
1559 -> 0;
1559 -> 1558;
1560 -> 1529;
1560 -> 1553;
1560 -> 0;
1560 -> 1528;
1561 -> 1560;
1561 -> 1528;
1562 -> 1559;
1562 -> 1561;
1563 -> 1562;
1563 -> 0;
1563 -> 1522;
1564 -> 1562;
1564 -> 1522;
1565 -> 1522;
1566 -> 1564;
1566 -> 1565;
1567 -> 1566;
1567 -> 1565;
1568 -> 1567;
1569 -> 1522;
1570 -> 1569;
1570 -> 1523;
1570 -> 1562;
1570 -> 1522;
1571 -> 1523;
1571 -> 1562;
1571 -> 1569;
1571 -> 1570;
1572 -> 1570;
1573 -> 1571;
1573 -> 1570;
1574 -> 1572;
1574 -> 1570;
1575 -> 1570;
1576 -> 1573;
1576 -> 1575;
1577 -> 1574;
1577 -> 1575;
1578 -> 1524;
1578 -> 1575;
1579 -> 1575;
1580 -> 1575;
1580 -> 1570;
1581 -> 1570;
1582 -> 1581;
1582 -> 1570;
1583 -> 1579;
1583 -> 1582;
1584 -> 1570;
1585 -> 1583;
1585 -> 1584;
1585 -> 1570;
1586 -> 1585;
1586 -> 1580;
1586 -> 1570;
1587 -> 1580;
1587 -> 1570;
1588 -> 1568;
1588 -> 1587;
1589 -> 1568;
1589 -> 1522;
1590 -> 1522;
1591 -> 1523;
1591 -> 1576;
1591 -> 1590;
1591 -> 1522;
1592 -> 1591;
1592 -> 1522;
1593 -> 1522;
1594 -> 1592;
1594 -> 1593;
1595 -> 1524;
1595 -> 1593;
1596 -> 1594;
1596 -> 1591;
1596 -> 0;
1596 -> 1593;
1597 -> 1593;
1598 -> 1594;
1598 -> 1591;
1598 -> 0;
1598 -> 1593;
1599 -> 1594;
1599 -> 1591;
1599 -> 0;
1599 -> 1598;
1600 -> 1594;
1600 -> 1591;
1600 -> 0;
1600 -> 1593;
1601 -> 1594;
1601 -> 1591;
1601 -> 0;
1601 -> 1593;
1602 -> 1594;
1602 -> 1591;
1602 -> 0;
1602 -> 1593;
1603 -> 1594;
1603 -> 1591;
1603 -> 0;
1603 -> 1593;
1604 -> 1594;
1604 -> 1591;
1604 -> 0;
1604 -> 1593;
1605 -> 1593;
1606 -> 1605;
1606 -> 1593;
1607 -> 1593;
1608 -> 1607;
1608 -> 1593;
1609 -> 1593;
1610 -> 1608;
1610 -> 1609;
1611 -> 1595;
1611 -> 1609;
1612 -> 1609;
1613 -> 1609;
1614 -> 1613;
1614 -> 1593;
1615 -> 1614;
1615 -> 1593;
1616 -> 1594;
1617 -> 1594;
1618 -> 1616;
1618 -> 1617;
1619 -> 1595;
1619 -> 1617;
1620 -> 1618;
1620 -> 1594;
1620 -> 0;
1620 -> 1617;
1621 -> 1618;
1621 -> 1594;
1621 -> 1617;
1622 -> 1617;
1623 -> 1621;
1623 -> 1622;
1623 -> 1617;
1624 -> 1621;
1624 -> 1617;
1625 -> 1617;
1626 -> 1624;
1626 -> 1625;
1627 -> 1619;
1627 -> 1625;
1628 -> 1626;
1628 -> 1594;
1628 -> 0;
1628 -> 1625;
1629 -> 1625;
1630 -> 1626;
1630 -> 1594;
1630 -> 0;
1630 -> 1625;
1631 -> 1626;
1631 -> 1594;
1631 -> 0;
1631 -> 1630;
1632 -> 1626;
1632 -> 1594;
1632 -> 0;
1632 -> 1625;
1633 -> 1626;
1633 -> 1594;
1633 -> 0;
1633 -> 1625;
1634 -> 1626;
1634 -> 1594;
1634 -> 0;
1634 -> 1625;
1635 -> 1626;
1635 -> 1594;
1635 -> 0;
1635 -> 1625;
1636 -> 1626;
1636 -> 1594;
1636 -> 0;
1636 -> 1625;
1637 -> 1627;
1637 -> 1594;
1637 -> 1626;
1637 -> 1625;
1638 -> 1637;
1639 -> 1594;
1640 -> 1638;
1640 -> 1639;
1641 -> 1640;
1641 -> 1639;
1642 -> 1641;
1643 -> 1522;
1644 -> 1642;
1644 -> 1643;
1645 -> 1523;
1645 -> 1637;
1645 -> 1522;
1646 -> 1522;
1647 -> 1645;
1647 -> 1646;
1648 -> 1645;
1648 -> 1646;
1649 -> 1648;
1649 -> 1645;
1649 -> 1646;
1650 -> 1647;
1650 -> 1646;
1651 -> 1646;
1652 -> 1650;
1652 -> 1651;
1653 -> 1648;
1653 -> 1651;
1654 -> 1652;
1654 -> 1649;
1654 -> 0;
1654 -> 1651;
1655 -> 1654;
1656 -> 1647;
1656 -> 1646;
1657 -> 1646;
1658 -> 1656;
1658 -> 1657;
1659 -> 1648;
1659 -> 1657;
1660 -> 1658;
1660 -> 1649;
1660 -> 0;
1660 -> 1657;
1661 -> 1657;
1662 -> 1658;
1662 -> 1649;
1662 -> 0;
1662 -> 1657;
1663 -> 1658;
1663 -> 1649;
1663 -> 1662;
1664 -> 1662;
1665 -> 1663;
1665 -> 1664;
1666 -> 1665;
1666 -> 1649;
1666 -> 0;
1666 -> 1664;
1667 -> 1664;
1668 -> 1665;
1668 -> 1649;
1668 -> 0;
1669 -> 1665;
1669 -> 1649;
1669 -> 0;
1669 -> 1664;
1670 -> 1665;
1670 -> 1649;
1670 -> 0;
1670 -> 1664;
1671 -> 1665;
1671 -> 1649;
1671 -> 0;
1671 -> 1664;
1672 -> 1665;
1672 -> 1649;
1672 -> 0;
1672 -> 1664;
1673 -> 1665;
1673 -> 1649;
1673 -> 0;
1673 -> 1664;
1674 -> 1665;
1675 -> 1646;
1676 -> 1674;
1676 -> 1675;
1677 -> 1676;
1677 -> 1675;
1678 -> 1677;
1679 -> 1646;
1680 -> 1648;
1680 -> 1679;
1681 -> 1679;
1682 -> 1680;
1682 -> 1665;
1682 -> 1681;
1682 -> 1679;
1683 -> 1679;
1684 -> 1680;
1684 -> 1665;
1684 -> 1683;
1685 -> 1682;
1685 -> 1646;
1686 -> 1647;
1686 -> 1685;
1687 -> 1685;
1688 -> 1686;
1688 -> 1687;
1689 -> 1648;
1689 -> 1687;
1690 -> 1688;
1690 -> 1665;
1690 -> 1687;
1691 -> 1690;
1692 -> 1689;
1692 -> 1690;
1693 -> 1685;
1694 -> 1471;
1695 -> 1483;
1695 -> 1694;
1696 -> 1695;
1696 -> 1692;
1696 -> 1694;
1697 -> 1694;
1698 -> 1696;
1698 -> 1697;
1698 -> 1694;
1699 -> 1694;
1700 -> 1696;
1700 -> 1699;
1700 -> 1692;
1700 -> 1694;
1701 -> 1700;
1702 -> 1471;
1703 -> 1477;
1703 -> 1471;
1704 -> 1703;
1704 -> 1701;
1704 -> 1471;
1705 -> 1462;
1705 -> 1701;
1705 -> 1465;
1706 -> 1466;
1706 -> 1465;
1707 -> 1705;
1707 -> 1706;
1707 -> 1701;
1707 -> 1465;
1708 -> 1462;
1708 -> 1707;
1708 -> 1458;
1709 -> 1462;
1709 -> 1707;
1709 -> 1458;
1710 -> 1452;
1710 -> 977;
1711 -> 1710;
1711 -> 1707;
1711 -> 977;
1712 -> 1709;
1712 -> 977;
1713 -> 940;
1714 -> 905;
1714 -> 1712;
1714 -> 1713;
1714 -> 940;
1715 -> 904;
1715 -> 1712;
1715 -> 900;
1716 -> 901;
1716 -> 0;
1716 -> 900;
1717 -> 1716;
1718 -> 1717;
1718 -> 1716;
1719 -> 904;
1719 -> 1716;
1720 -> 1716;
1721 -> 1718;
1721 -> 1720;
1722 -> 1719;
1722 -> 1720;
1723 -> 905;
1723 -> 1720;
1724 -> 1723;
1724 -> 1720;
1725 -> 1720;
1726 -> 1721;
1726 -> 1720;
1727 -> 1722;
1727 -> 1720;
1728 -> 1720;
1729 -> 1724;
1729 -> 1728;
1730 -> 1725;
1730 -> 1728;
1731 -> 1725;
1731 -> 1728;
1732 -> 1725;
1732 -> 1728;
1733 -> 1725;
1733 -> 1728;
1734 -> 1726;
1734 -> 1728;
1735 -> 1725;
1735 -> 1728;
1736 -> 1727;
1736 -> 1728;
1737 -> 1728;
1738 -> 1729;
1738 -> 1737;
1738 -> 1728;
1739 -> 1728;
1740 -> 1734;
1740 -> 1739;
1740 -> 1728;
1741 -> 1728;
1742 -> 1729;
1742 -> 1741;
1743 -> 1742;
1743 -> 1715;
1743 -> 1741;
1744 -> 1743;
1744 -> 1728;
1745 -> 1728;
1746 -> 1728;
1747 -> 1735;
1747 -> 1728;
1748 -> 1729;
1748 -> 1747;
1749 -> 1730;
1749 -> 1747;
1750 -> 1733;
1750 -> 1747;
1751 -> 1734;
1751 -> 1747;
1752 -> 1736;
1752 -> 1747;
1753 -> 1747;
1754 -> 1748;
1754 -> 1753;
1755 -> 1749;
1755 -> 1753;
1756 -> 1750;
1756 -> 1753;
1757 -> 1751;
1757 -> 1753;
1758 -> 1752;
1758 -> 1753;
1759 -> 1758;
1759 -> 1753;
1760 -> 1753;
1761 -> 1759;
1761 -> 1760;
1762 -> 1754;
1762 -> 1760;
1763 -> 1760;
1764 -> 1762;
1764 -> 1715;
1764 -> 1763;
1764 -> 1760;
1765 -> 1764;
1766 -> 1762;
1766 -> 1764;
1767 -> 1764;
1768 -> 1767;
1769 -> 1768;
1769 -> 1767;
1770 -> 1764;
1771 -> 1770;
1771 -> 1766;
1772 -> 1771;
1772 -> 1764;
1773 -> 1764;
1774 -> 1762;
1774 -> 1773;
1775 -> 1774;
1775 -> 1766;
1775 -> 1773;
1776 -> 1773;
1777 -> 1775;
1777 -> 1776;
1778 -> 1777;
1778 -> 1775;
1778 -> 1776;
1779 -> 1776;
1780 -> 1778;
1780 -> 1779;
1781 -> 1779;
1782 -> 1780;
1782 -> 1781;
1783 -> 1781;
1784 -> 1782;
1784 -> 1783;
1785 -> 1784;
1785 -> 1781;
1786 -> 1782;
1786 -> 1779;
1787 -> 1778;
1787 -> 1779;
1788 -> 1779;
1789 -> 1787;
1789 -> 1788;
1790 -> 1789;
1790 -> 1786;
1790 -> 1788;
1791 -> 1790;
1791 -> 1779;
1792 -> 1791;
1792 -> 1764;
1793 -> 1772;
1793 -> 1792;
1793 -> 1764;
1794 -> 1766;
1794 -> 1793;
1796 -> 0;
1798 -> 1795;
1798 -> 1797;
1799 -> 1796;
1799 -> 1797;
1800 -> 1797;
1801 -> 1800;
1801 -> 1797;
1802 -> 1798;
1802 -> 1800;
1802 -> 1797;
1803 -> 1799;
1803 -> 1800;
1803 -> 1797;
1804 -> 1797;
1805 -> 1804;
1805 -> 1794;
1806 -> 1762;
1806 -> 1791;
1806 -> 1764;
1807 -> 1805;
1807 -> 1764;
1808 -> 1764;
1809 -> 1806;
1809 -> 1807;
1809 -> 1808;
1809 -> 1802;
1809 -> 1803;
1809 -> 1791;
1809 -> 0;
1809 -> 1764;
1810 -> 1762;
1810 -> 1809;
1810 -> 1760;
1811 -> 1810;
1811 -> 1753;
1812 -> 1811;
1812 -> 1809;
1812 -> 1753;
1813 -> 1811;
1813 -> 1809;
1813 -> 1753;
1814 -> 1757;
1814 -> 1813;
1814 -> 1717;
1814 -> 1809;
1814 -> 1753;
1815 -> 1811;
1815 -> 1814;
1815 -> 1753;
1816 -> 1753;
1817 -> 1815;
1817 -> 1816;
1817 -> 1753;
1818 -> 1817;
1819 -> 1729;
1819 -> 1728;
1820 -> 1730;
1820 -> 1728;
1821 -> 1731;
1821 -> 1728;
1822 -> 1732;
1822 -> 1728;
1823 -> 1733;
1823 -> 1728;
1824 -> 1734;
1824 -> 1728;
1825 -> 1735;
1825 -> 1728;
1826 -> 1818;
1826 -> 1728;
1827 -> 1736;
1827 -> 1728;
1828 -> 1728;
1829 -> 1728;
1830 -> 1819;
1830 -> 1829;
1831 -> 1820;
1831 -> 1829;
1832 -> 1821;
1832 -> 1829;
1833 -> 1822;
1833 -> 1829;
1834 -> 1823;
1834 -> 1829;
1835 -> 1824;
1835 -> 1829;
1836 -> 1825;
1836 -> 1829;
1837 -> 1826;
1837 -> 1829;
1838 -> 1827;
1838 -> 1829;
1839 -> 1828;
1839 -> 1829;
1840 -> 1829;
1841 -> 1840;
1841 -> 1829;
1842 -> 1840;
1842 -> 1829;
1843 -> 1840;
1843 -> 1829;
1844 -> 1840;
1844 -> 1829;
1845 -> 1840;
1845 -> 1829;
1846 -> 1840;
1846 -> 1829;
1847 -> 1840;
1847 -> 1829;
1848 -> 1840;
1848 -> 1829;
1849 -> 1840;
1849 -> 1829;
1850 -> 1840;
1850 -> 1829;
1851 -> 1840;
1851 -> 1829;
1852 -> 1829;
1853 -> 1830;
1853 -> 1852;
1853 -> 1829;
1854 -> 1829;
1855 -> 1835;
1855 -> 1854;
1855 -> 1829;
1856 -> 1830;
1856 -> 1840;
1856 -> 1829;
1857 -> 1831;
1857 -> 1840;
1857 -> 1829;
1858 -> 1832;
1858 -> 1840;
1858 -> 1829;
1859 -> 1838;
1859 -> 1840;
1859 -> 1829;
1860 -> 1835;
1860 -> 1840;
1860 -> 1829;
1861 -> 1836;
1861 -> 1840;
1861 -> 1829;
1862 -> 1837;
1862 -> 1840;
1862 -> 1829;
1863 -> 1834;
1863 -> 1840;
1863 -> 1829;
1864 -> 1834;
1864 -> 1829;
1865 -> 1829;
1866 -> 1864;
1866 -> 1865;
1867 -> 1840;
1867 -> 1865;
1868 -> 1866;
1868 -> 1865;
1869 -> 1829;
1870 -> 1832;
1870 -> 1833;
1870 -> 1829;
1871 -> 1833;
1871 -> 1840;
1871 -> 1829;
1872 -> 1728;
1873 -> 1729;
1873 -> 1872;
1874 -> 1873;
1874 -> 1814;
1874 -> 1872;
1875 -> 1874;
1875 -> 1728;
1876 -> 1875;
1877 -> 1876;
1877 -> 1828;
1877 -> 1875;
1878 -> 1728;
1879 -> 1729;
1879 -> 1878;
1880 -> 1878;
1881 -> 1879;
1881 -> 1880;
1882 -> 1880;
1883 -> 1881;
1883 -> 1882;
1884 -> 1882;
1885 -> 1883;
1885 -> 1884;
1886 -> 1885;
1886 -> 1814;
1886 -> 1884;
1887 -> 1885;
1887 -> 1814;
1887 -> 1884;
1888 -> 1887;
1888 -> 1882;
1889 -> 1883;
1889 -> 1814;
1889 -> 1882;
1890 -> 1878;
1891 -> 1889;
1891 -> 1728;
1892 -> 1728;
1893 -> 1891;
1893 -> 1892;
1894 -> 1828;
1894 -> 1892;
1895 -> 1893;
1895 -> 1889;
1895 -> 1892;
1896 -> 1894;
1896 -> 1895;
1897 -> 1895;
1898 -> 1896;
1898 -> 1897;
1898 -> 1895;
1898 -> 1840;
1898 -> 1841;
1898 -> 1856;
1898 -> 1842;
1898 -> 1858;
1898 -> 1843;
1898 -> 1871;
1898 -> 1844;
1898 -> 1860;
1898 -> 1845;
1898 -> 1863;
1898 -> 1846;
1898 -> 1857;
1898 -> 1847;
1898 -> 1861;
1898 -> 1848;
1898 -> 1849;
1898 -> 1862;
1898 -> 1850;
1898 -> 1877;
1898 -> 1851;
1898 -> 1859;
1898 -> 1715;
1898 -> 1876;
1899 -> 1898;
1899 -> 1897;
1900 -> 1898;
1900 -> 1897;
1901 -> 1898;
1901 -> 1897;
1902 -> 1901;
1902 -> 1898;
1902 -> 1897;
1903 -> 1899;
1903 -> 1897;
1904 -> 1897;
1905 -> 1902;
1905 -> 1904;
1906 -> 1903;
1906 -> 1904;
1907 -> 1904;
1908 -> 1905;
1908 -> 1907;
1908 -> 1904;
1909 -> 1897;
1910 -> 1901;
1910 -> 1898;
1910 -> 1897;
1911 -> 1897;
1912 -> 1901;
1912 -> 1910;
1912 -> 1911;
1913 -> 1912;
1913 -> 1897;
1914 -> 1899;
1914 -> 1913;
1915 -> 1913;
1916 -> 1914;
1916 -> 1915;
1917 -> 1901;
1917 -> 1915;
1918 -> 1915;
1919 -> 1917;
1919 -> 1910;
1919 -> 1915;
1920 -> 1919;
1920 -> 1913;
1921 -> 1920;
1921 -> 1913;
1922 -> 1897;
1923 -> 1898;
1923 -> 1922;
1923 -> 1921;
1923 -> 1895;
1924 -> 1728;
1925 -> 1728;
1926 -> 1828;
1926 -> 1925;
1927 -> 1926;
1927 -> 1923;
1927 -> 1925;
1928 -> 1925;
1929 -> 1927;
1929 -> 1928;
1929 -> 1925;
1930 -> 1925;
1931 -> 1930;
1931 -> 1925;
1932 -> 1927;
1932 -> 1931;
1932 -> 1923;
1932 -> 1925;
1933 -> 1932;
1934 -> 1728;
1935 -> 1728;
1936 -> 1730;
1936 -> 1935;
1936 -> 1728;
1937 -> 1728;
1938 -> 1730;
1938 -> 1937;
1938 -> 1728;
1939 -> 1728;
1940 -> 1729;
1940 -> 1939;
1941 -> 1940;
1941 -> 1933;
1941 -> 1939;
1942 -> 1941;
1942 -> 1728;
1943 -> 1728;
1944 -> 1735;
1944 -> 1943;
1944 -> 1728;
1945 -> 1729;
1945 -> 1944;
1946 -> 1734;
1946 -> 1944;
1947 -> 1736;
1947 -> 1944;
1948 -> 1944;
1949 -> 1945;
1949 -> 1948;
1950 -> 1946;
1950 -> 1948;
1951 -> 1947;
1951 -> 1948;
1952 -> 1948;
1953 -> 1949;
1953 -> 1952;
1954 -> 1952;
1955 -> 1953;
1955 -> 1954;
1956 -> 1954;
1957 -> 1955;
1957 -> 1956;
1958 -> 1957;
1958 -> 1942;
1958 -> 1956;
1959 -> 1957;
1959 -> 1942;
1959 -> 1956;
1960 -> 1959;
1960 -> 1954;
1961 -> 1955;
1961 -> 1942;
1961 -> 1954;
1962 -> 1961;
1962 -> 1948;
1963 -> 1951;
1963 -> 1948;
1964 -> 1963;
1964 -> 1962;
1964 -> 1715;
1964 -> 1961;
1964 -> 1948;
1965 -> 1948;
1966 -> 1950;
1966 -> 1964;
1966 -> 1948;
1967 -> 1944;
1968 -> 1944;
1969 -> 1730;
1969 -> 1968;
1969 -> 1944;
1974 -> 1971;
1974 -> 1970;
1975 -> 1972;
1975 -> 1970;
1976 -> 1973;
1976 -> 1970;
1977 -> 1970;
1978 -> 1723;
1978 -> 1720;
1979 -> 1720;
1980 -> 1721;
1980 -> 1720;
1981 -> 1722;
1981 -> 1720;
1982 -> 1720;
1983 -> 1978;
1983 -> 1982;
1984 -> 1979;
1984 -> 1982;
1985 -> 1979;
1985 -> 1982;
1986 -> 1980;
1986 -> 1982;
1987 -> 1981;
1987 -> 1982;
1988 -> 1979;
1988 -> 1982;
1989 -> 1979;
1989 -> 1982;
1990 -> 1982;
1991 -> 1982;
1992 -> 1985;
1992 -> 1991;
1992 -> 1982;
1993 -> 1982;
1994 -> 1983;
1994 -> 1993;
1995 -> 1993;
1996 -> 1994;
1996 -> 1995;
1997 -> 1996;
1997 -> 1966;
1997 -> 1995;
1998 -> 1996;
1998 -> 1966;
1998 -> 1995;
1999 -> 1998;
1999 -> 1993;
2000 -> 1994;
2000 -> 1966;
2000 -> 1993;
2001 -> 2000;
2001 -> 1982;
2002 -> 2001;
2002 -> 1984;
2002 -> 1982;
2003 -> 1983;
2003 -> 1982;
2004 -> 1990;
2004 -> 1982;
2005 -> 1988;
2005 -> 1982;
2006 -> 1989;
2006 -> 1982;
2007 -> 1982;
2008 -> 1986;
2008 -> 1982;
2009 -> 1987;
2009 -> 1982;
2010 -> 1982;
2011 -> 2002;
2011 -> 2010;
2012 -> 2003;
2012 -> 2010;
2013 -> 2004;
2013 -> 2010;
2014 -> 2005;
2014 -> 2010;
2015 -> 2006;
2015 -> 2010;
2016 -> 2007;
2016 -> 2010;
2017 -> 2007;
2017 -> 2010;
2018 -> 2008;
2018 -> 2010;
2019 -> 2009;
2019 -> 2010;
2020 -> 2007;
2020 -> 2010;
2021 -> 2010;
2022 -> 2021;
2022 -> 2010;
2023 -> 2021;
2023 -> 2010;
2024 -> 2021;
2024 -> 2010;
2025 -> 2021;
2025 -> 2010;
2026 -> 2021;
2026 -> 2010;
2027 -> 2021;
2027 -> 2010;
2028 -> 2021;
2028 -> 2010;
2029 -> 2021;
2029 -> 2010;
2030 -> 2021;
2030 -> 2010;
2031 -> 2021;
2031 -> 2010;
2032 -> 2021;
2032 -> 2010;
2033 -> 2021;
2033 -> 2010;
2034 -> 2011;
2034 -> 2021;
2034 -> 2010;
2035 -> 2012;
2035 -> 2021;
2035 -> 2010;
2036 -> 2013;
2036 -> 2021;
2036 -> 2010;
2037 -> 2014;
2037 -> 2021;
2037 -> 2010;
2038 -> 2015;
2038 -> 2021;
2038 -> 2010;
2039 -> 2016;
2039 -> 2021;
2039 -> 2010;
2040 -> 2017;
2040 -> 2021;
2040 -> 2010;
2041 -> 2018;
2041 -> 2021;
2041 -> 2010;
2042 -> 2019;
2042 -> 2021;
2042 -> 2010;
2043 -> 1982;
2044 -> 1983;
2044 -> 2043;
2045 -> 2043;
2046 -> 2044;
2046 -> 2045;
2047 -> 2046;
2047 -> 2000;
2047 -> 2045;
2048 -> 2046;
2048 -> 2000;
2048 -> 2045;
2049 -> 2048;
2049 -> 2043;
2050 -> 2044;
2050 -> 2000;
2050 -> 2043;
2051 -> 2050;
2051 -> 1982;
2052 -> 2051;
2052 -> 2007;
2052 -> 2050;
2052 -> 2021;
2052 -> 2022;
2052 -> 2034;
2052 -> 2023;
2052 -> 2035;
2052 -> 2024;
2052 -> 2036;
2052 -> 2025;
2052 -> 2037;
2052 -> 2026;
2052 -> 2038;
2052 -> 2027;
2052 -> 2039;
2052 -> 2028;
2052 -> 2040;
2052 -> 2029;
2052 -> 2041;
2052 -> 2030;
2052 -> 2031;
2052 -> 2032;
2052 -> 2033;
2052 -> 2042;
2052 -> 1979;
2052 -> 1715;
2052 -> 1982;
2053 -> 1982;
2054 -> 2052;
2054 -> 2053;
2055 -> 2052;
2055 -> 2053;
2056 -> 2055;
2056 -> 2052;
2056 -> 2053;
2057 -> 2054;
2057 -> 2056;
2057 -> 2053;
2058 -> 2057;
2059 -> 2057;
2060 -> 2057;
2061 -> 2059;
2061 -> 2060;
2062 -> 2055;
2062 -> 2060;
2063 -> 2062;
2063 -> 2056;
2063 -> 2060;
2064 -> 2060;
2065 -> 2063;
2066 -> 2057;
2067 -> 2057;
2068 -> 2066;
2068 -> 2067;
2069 -> 2055;
2069 -> 2067;
2070 -> 2069;
2070 -> 2056;
2070 -> 2067;
2071 -> 2067;
2072 -> 2070;
2073 -> 2057;
2074 -> 2055;
2074 -> 2073;
2075 -> 2074;
2075 -> 2056;
2075 -> 2073;
2076 -> 2057;
2077 -> 2057;
2078 -> 2077;
2078 -> 2057;
2079 -> 2078;
2080 -> 2078;
2081 -> 2079;
2081 -> 2080;
2082 -> 2055;
2082 -> 2080;
2083 -> 2082;
2083 -> 2056;
2083 -> 2080;
2084 -> 2080;
2085 -> 2083;
2086 -> 2078;
2087 -> 2055;
2087 -> 2086;
2088 -> 2087;
2088 -> 2056;
2088 -> 2075;
2088 -> 2086;
2089 -> 2078;
2090 -> 2078;
2091 -> 2055;
2091 -> 2056;
2091 -> 2090;
2091 -> 2078;
2092 -> 2078;
2093 -> 2090;
2093 -> 2092;
2094 -> 2090;
2094 -> 2092;
2095 -> 2055;
2095 -> 2092;
2096 -> 2093;
2096 -> 2092;
2097 -> 2094;
2097 -> 2092;
2098 -> 2096;
2098 -> 2097;
2098 -> 2092;
2099 -> 2092;
2100 -> 2098;
2100 -> 2099;
2101 -> 2095;
2101 -> 2099;
2102 -> 2101;
2102 -> 2056;
2102 -> 2099;
2103 -> 2099;
2104 -> 2102;
2105 -> 2092;
2106 -> 2078;
2107 -> 2055;
2107 -> 2106;
2108 -> 2107;
2108 -> 2056;
2108 -> 2075;
2108 -> 2088;
2108 -> 2106;
2109 -> 2106;
2110 -> 2107;
2110 -> 2056;
2110 -> 2075;
2110 -> 2088;
2110 -> 2108;
2110 -> 2109;
2110 -> 2106;
2111 -> 2078;
2112 -> 2078;
2113 -> 2078;
2114 -> 2112;
2114 -> 2113;
2115 -> 2055;
2115 -> 2113;
2116 -> 2115;
2116 -> 2056;
2116 -> 2113;
2117 -> 2113;
2118 -> 2116;
2119 -> 2057;
2120 -> 2057;
2121 -> 2119;
2121 -> 2120;
2122 -> 2055;
2122 -> 2120;
2123 -> 2122;
2123 -> 2056;
2123 -> 2120;
2124 -> 2120;
2125 -> 2123;
2126 -> 2057;
2127 -> 2055;
2127 -> 2126;
2128 -> 2127;
2128 -> 2056;
2128 -> 2075;
2128 -> 2088;
2128 -> 2108;
2128 -> 2126;
2129 -> 2057;
2130 -> 2055;
2130 -> 2056;
2130 -> 2053;
2131 -> 2054;
2131 -> 2056;
2131 -> 2075;
2131 -> 2088;
2131 -> 2108;
2131 -> 2128;
2131 -> 2053;
2132 -> 2055;
2132 -> 2056;
2132 -> 2075;
2132 -> 2088;
2132 -> 2108;
2132 -> 2128;
2132 -> 2131;
2133 -> 2055;
2133 -> 2131;
2134 -> 2133;
2134 -> 2131;
2134 -> 2132;
2134 -> 2056;
2134 -> 2075;
2134 -> 2088;
2134 -> 2108;
2134 -> 2128;
2135 -> 2131;
2136 -> 2134;
2136 -> 2135;
2137 -> 2134;
2137 -> 2135;
2138 -> 2137;
2138 -> 2134;
2138 -> 2135;
2139 -> 2135;
2140 -> 2137;
2140 -> 2138;
2140 -> 2139;
2140 -> 2135;
2141 -> 2136;
2141 -> 2135;
2142 -> 2135;
2143 -> 2141;
2143 -> 2142;
2144 -> 2137;
2144 -> 2142;
2145 -> 2144;
2145 -> 2138;
2145 -> 2142;
2146 -> 2143;
2146 -> 2142;
2147 -> 2142;
2148 -> 2146;
2148 -> 2147;
2149 -> 2148;
2149 -> 2147;
2150 -> 2149;
2150 -> 2145;
2150 -> 2147;
2151 -> 2142;
2152 -> 2144;
2152 -> 2150;
2152 -> 2151;
2152 -> 2142;
2153 -> 2143;
2153 -> 2142;
2154 -> 2153;
2154 -> 2150;
2154 -> 2142;
2155 -> 2154;
2155 -> 2142;
2156 -> 2142;
2157 -> 2142;
2158 -> 2157;
2158 -> 2142;
2159 -> 2143;
2159 -> 2142;
2160 -> 2156;
2160 -> 2142;
2161 -> 2157;
2161 -> 2142;
2162 -> 2142;
2163 -> 2159;
2163 -> 2162;
2164 -> 2160;
2164 -> 2162;
2165 -> 2161;
2165 -> 2162;
2166 -> 2144;
2166 -> 2162;
2167 -> 0;
2167 -> 2162;
2168 -> 2162;
2169 -> 2162;
2170 -> 2163;
2170 -> 2154;
2170 -> 2162;
2171 -> 2170;
2171 -> 2154;
2172 -> 2171;
2172 -> 2167;
2172 -> 2170;
2173 -> 2172;
2173 -> 2170;
2174 -> 2170;
2175 -> 2166;
2175 -> 2174;
2175 -> 2170;
2176 -> 2175;
2176 -> 2170;
2177 -> 2162;
2178 -> 2169;
2178 -> 2177;
2178 -> 2162;
2179 -> 0;
2179 -> 2178;
2180 -> 2162;
2181 -> 2180;
2181 -> 2142;
2182 -> 2179;
2182 -> 0;
2182 -> 2142;
2183 -> 2173;
2183 -> 0;
2183 -> 2182;
2184 -> 2182;
2185 -> 2135;
2186 -> 2137;
2186 -> 2175;
2186 -> 2135;
2187 -> 2136;
2187 -> 2175;
2187 -> 2186;
2188 -> 2137;
2188 -> 2187;
2189 -> 2137;
2189 -> 2187;
2190 -> 2189;
2190 -> 2187;
2190 -> 2188;
2191 -> 2187;
2192 -> 2191;
2193 -> 2190;
2193 -> 2192;
2193 -> 2191;
2194 -> 2190;
2194 -> 2191;
2195 -> 2191;
2196 -> 2191;
2197 -> 2196;
2197 -> 2191;
2198 -> 2195;
2198 -> 2191;
2199 -> 2196;
2199 -> 2191;
2200 -> 0;
2200 -> 2191;
2201 -> 2191;
2202 -> 2191;
2203 -> 2190;
2204 -> 2203;
2204 -> 2200;
2204 -> 2190;
2205 -> 2204;
2205 -> 2190;
2206 -> 2190;
2207 -> 2191;
2208 -> 2202;
2208 -> 2207;
2208 -> 2191;
2209 -> 0;
2209 -> 2208;
2210 -> 2191;
2211 -> 2209;
2211 -> 0;
2211 -> 2191;
2212 -> 2205;
2212 -> 0;
2212 -> 2211;
2213 -> 2211;
2214 -> 2190;
2215 -> 2054;
2215 -> 2190;
2215 -> 2053;
2216 -> 2215;
2217 -> 2216;
2218 -> 2215;
2219 -> 2215;
2220 -> 2215;
2221 -> 2219;
2221 -> 2220;
2222 -> 2055;
2222 -> 2220;
2223 -> 2222;
2223 -> 2190;
2223 -> 2220;
2224 -> 2220;
2225 -> 2223;
2226 -> 2215;
2227 -> 2226;
2227 -> 2190;
2227 -> 2216;
2228 -> 2226;
2229 -> 2226;
2229 -> 2190;
2229 -> 2216;
2229 -> 2227;
2229 -> 2228;
2230 -> 2215;
2231 -> 2215;
2232 -> 2215;
2233 -> 2231;
2233 -> 2232;
2234 -> 2055;
2234 -> 2232;
2235 -> 2234;
2235 -> 2190;
2235 -> 2232;
2236 -> 2232;
2237 -> 2235;
2238 -> 1982;
2239 -> 2007;
2239 -> 2227;
2239 -> 2238;
2239 -> 1982;
2240 -> 1990;
2240 -> 1982;
2241 -> 1982;
2242 -> 1988;
2242 -> 2241;
2242 -> 1982;
2243 -> 2242;
2244 -> 1983;
2244 -> 2243;
2245 -> 2243;
2246 -> 2244;
2246 -> 2227;
2246 -> 2245;
2247 -> 2245;
2248 -> 2246;
2248 -> 2242;
2249 -> 2248;
2250 -> 1986;
2250 -> 2248;
2251 -> 1987;
2251 -> 2248;
2252 -> 2248;
2253 -> 2249;
2253 -> 2252;
2254 -> 2249;
2254 -> 2252;
2255 -> 2250;
2255 -> 2252;
2256 -> 2251;
2256 -> 2252;
2257 -> 2253;
2257 -> 2252;
2258 -> 1720;
2259 -> 1721;
2259 -> 1720;
2260 -> 1722;
2260 -> 1720;
2261 -> 1720;
2262 -> 2258;
2262 -> 2261;
2263 -> 2259;
2263 -> 2261;
2264 -> 2260;
2264 -> 2261;
2265 -> 1723;
2265 -> 2261;
2266 -> 2261;
2267 -> 2265;
2267 -> 2257;
2267 -> 2266;
2267 -> 2261;
2268 -> 2262;
2268 -> 2266;
2268 -> 2261;
2269 -> 2267;
2269 -> 2268;
2269 -> 2261;
2270 -> 2262;
2270 -> 2261;
2271 -> 2261;
2272 -> 2270;
2272 -> 2271;
2273 -> 2265;
2273 -> 2271;
2274 -> 2271;
2275 -> 2273;
2275 -> 2257;
2275 -> 2274;
2275 -> 2271;
2276 -> 2261;
2277 -> 1716;
2278 -> 1717;
2278 -> 1716;
2279 -> 906;
2279 -> 2278;
2279 -> 2257;
2279 -> 1716;
2280 -> 903;
2280 -> 900;
2281 -> 906;
2281 -> 900;
2282 -> 904;
2282 -> 900;
2283 -> 2280;
2283 -> 2281;
2283 -> 2282;
2283 -> 905;
2283 -> 895;
2283 -> 2279;
2283 -> 900;
2284 -> 900;
2286 -> 2285;
2287 -> 2283;
2287 -> 2284;
2288 -> 2283;
2288 -> 2284;
2289 -> 2283;
2289 -> 2284;
2290 -> 2283;
2290 -> 2284;
2291 -> 2283;
2291 -> 2284;
2292 -> 2283;
2292 -> 2284;
2293 -> 2283;
2293 -> 2284;
2294 -> 2284;
2295 -> 2287;
2295 -> 2294;
2295 -> 2284;
2296 -> 2287;
2296 -> 2283;
2296 -> 2295;
2297 -> 2287;
2297 -> 2296;
2297 -> 0;
2298 -> 2284;
2299 -> 2284;
2300 -> 2286;
2300 -> 2284;
2301 -> 2287;
2301 -> 2296;
2301 -> 2284;
2302 -> 2284;
2303 -> 2300;
2303 -> 2301;
2303 -> 2302;
2303 -> 2285;
2303 -> 2284;
2304 -> 2287;
2304 -> 2296;
2304 -> 2303;
2305 -> 2288;
2305 -> 2303;
2306 -> 2289;
2306 -> 2303;
2307 -> 2290;
2307 -> 2303;
2308 -> 2291;
2308 -> 2303;
2309 -> 2292;
2309 -> 2303;
2310 -> 2293;
2310 -> 2303;
2311 -> 2299;
2311 -> 2303;
2312 -> 2303;
2313 -> 2304;
2313 -> 2312;
2314 -> 2304;
2314 -> 2312;
2315 -> 2304;
2315 -> 2312;
2316 -> 2304;
2316 -> 2312;
2317 -> 2304;
2317 -> 2312;
2318 -> 2304;
2318 -> 2312;
2319 -> 2305;
2319 -> 2312;
2320 -> 2306;
2320 -> 2312;
2321 -> 2307;
2321 -> 2312;
2322 -> 2308;
2322 -> 2312;
2323 -> 2309;
2323 -> 2312;
2324 -> 2310;
2324 -> 2312;
2325 -> 2311;
2325 -> 2312;
2326 -> 2312;
2327 -> 2317;
2327 -> 2296;
2327 -> 2312;
2328 -> 2317;
2328 -> 2296;
2328 -> 2312;
2329 -> 2317;
2329 -> 2296;
2329 -> 2312;
2330 -> 2315;
2330 -> 2312;
2331 -> 2330;
2331 -> 2312;
2332 -> 2316;
2332 -> 2319;
2332 -> 2312;
2333 -> 2312;
2334 -> 2312;
2335 -> 2312;
2336 -> 2315;
2336 -> 2312;
2337 -> 2333;
2337 -> 2312;
2338 -> 2322;
2338 -> 2336;
2338 -> 2337;
2338 -> 2296;
2338 -> 2312;
2339 -> 2312;
2340 -> 2323;
2340 -> 2339;
2340 -> 2312;
2341 -> 2334;
2341 -> 2312;
2342 -> 2314;
2342 -> 2341;
2343 -> 0;
2343 -> 2342;
2344 -> 2343;
2344 -> 0;
2344 -> 2312;
2345 -> 2315;
2345 -> 2312;
2346 -> 2329;
2346 -> 2312;
2347 -> 2328;
2347 -> 2345;
2347 -> 2346;
2347 -> 2338;
2347 -> 2312;
2348 -> 2347;
2348 -> 0;
2348 -> 2312;
2349 -> 2347;
2349 -> 0;
2349 -> 2312;
2350 -> 2343;
2350 -> 0;
2350 -> 2349;
2351 -> 2343;
2351 -> 2312;
2352 -> 2321;
2352 -> 2351;
2353 -> 2343;
2353 -> 2312;
2354 -> 2326;
2354 -> 2284;
2355 -> 2353;
2355 -> 2284;
2356 -> 2287;
2356 -> 2355;
2356 -> 2347;
2356 -> 2284;
2357 -> 2287;
2357 -> 2356;
2357 -> 0;
2358 -> 2288;
2358 -> 2356;
2359 -> 2289;
2359 -> 2356;
2360 -> 2290;
2360 -> 2356;
2361 -> 2292;
2361 -> 2356;
2362 -> 2293;
2362 -> 2356;
2363 -> 2299;
2363 -> 2356;
2364 -> 2356;
2365 -> 2356;
2366 -> 2356;
2367 -> 2358;
2367 -> 2356;
2368 -> 2359;
2368 -> 2356;
2369 -> 2360;
2369 -> 2356;
2370 -> 2361;
2370 -> 2356;
2371 -> 2362;
2371 -> 2356;
2372 -> 2363;
2372 -> 2356;
2373 -> 2356;
2374 -> 2356;
2375 -> 2356;
2376 -> 2375;
2376 -> 2356;
2377 -> 2365;
2377 -> 2367;
2377 -> 2356;
2378 -> 2356;
2379 -> 2356;
2380 -> 2370;
2380 -> 2379;
2380 -> 2356;
2381 -> 2356;
2381 -> 0;
2382 -> 2356;
2382 -> 0;
2383 -> 2356;
2383 -> 0;
2384 -> 2356;
2384 -> 0;
2384 -> 2383;
2385 -> 2356;
2386 -> 2369;
2386 -> 2385;
2387 -> 2373;
2387 -> 2284;
2388 -> 890;
2389 -> 895;
2389 -> 2356;
2389 -> 890;
2390 -> 2389;
2390 -> 880;
2391 -> 882;
2391 -> 880;
2392 -> 880;
2393 -> 2390;
2393 -> 2392;
2394 -> 2391;
2394 -> 2392;
2395 -> 2393;
2395 -> 2392;
2396 -> 2394;
2396 -> 2392;
2397 -> 2392;
2398 -> 2395;
2398 -> 2397;
2399 -> 2396;
2399 -> 2397;
2400 -> 2398;
2400 -> 2397;
2401 -> 2399;
2401 -> 2397;
2402 -> 2397;
2403 -> 2397;
2404 -> 2400;
2404 -> 2403;
2405 -> 2401;
2405 -> 2403;
2406 -> 2402;
2406 -> 2403;
2407 -> 2403;
2408 -> 2405;
2408 -> 2407;
2408 -> 2403;
2409 -> 2405;
2409 -> 2403;
2410 -> 2409;
2410 -> 632;
2410 -> 878;
2410 -> 879;
2410 -> 728;
2410 -> 729;
2410 -> 738;
2410 -> 730;
2410 -> 755;
2410 -> 732;
2410 -> 756;
2410 -> 735;
2410 -> 748;
2410 -> 736;
2410 -> 737;
2410 -> 733;
2410 -> 752;
2410 -> 753;
2410 -> 754;
2410 -> 848;
2410 -> 849;
2410 -> 858;
2410 -> 850;
2410 -> 875;
2410 -> 852;
2410 -> 876;
2410 -> 855;
2410 -> 868;
2410 -> 856;
2410 -> 857;
2410 -> 853;
2410 -> 872;
2410 -> 873;
2410 -> 874;
2410 -> 712;
2410 -> 658;
2410 -> 832;
2410 -> 782;
2410 -> 2403;
2411 -> 2403;
2412 -> 2409;
2412 -> 2411;
2412 -> 632;
2412 -> 878;
2412 -> 879;
2412 -> 728;
2412 -> 729;
2412 -> 738;
2412 -> 730;
2412 -> 755;
2412 -> 732;
2412 -> 756;
2412 -> 735;
2412 -> 748;
2412 -> 736;
2412 -> 737;
2412 -> 733;
2412 -> 752;
2412 -> 753;
2412 -> 754;
2412 -> 848;
2412 -> 849;
2412 -> 858;
2412 -> 850;
2412 -> 875;
2412 -> 852;
2412 -> 876;
2412 -> 855;
2412 -> 868;
2412 -> 856;
2412 -> 857;
2412 -> 853;
2412 -> 872;
2412 -> 873;
2412 -> 874;
2412 -> 712;
2412 -> 658;
2412 -> 832;
2412 -> 782;
2412 -> 2403;
2413 -> 2412;
2413 -> 2411;
2414 -> 2413;
2414 -> 2412;
2414 -> 2411;
2415 -> 2405;
2415 -> 2403;
2416 -> 2415;
2416 -> 2414;
2416 -> 2403;
2417 -> 2403;
2418 -> 2415;
2418 -> 2417;
2418 -> 2414;
2418 -> 2403;
2419 -> 2418;
2419 -> 2417;
2420 -> 2419;
2420 -> 2418;
2420 -> 2417;
2421 -> 2404;
2421 -> 2403;
2422 -> 2406;
2422 -> 2414;
2422 -> 2420;
2422 -> 2403;
2423 -> 2421;
2423 -> 2422;
2423 -> 2403;
2424 -> 2403;
2425 -> 2423;
2425 -> 2424;
2426 -> 2423;
2426 -> 2424;
2427 -> 2423;
2427 -> 2424;
2428 -> 2423;
2428 -> 2424;
2429 -> 2423;
2429 -> 2424;
2430 -> 2429;
2430 -> 2424;
2431 -> 2429;
2431 -> 2424;
2432 -> 2429;
2432 -> 2424;
2433 -> 2429;
2433 -> 2424;
2434 -> 2429;
2434 -> 2424;
2435 -> 2429;
2435 -> 2424;
2436 -> 2429;
2436 -> 2424;
2437 -> 2429;
2437 -> 2424;
2438 -> 2429;
2438 -> 2424;
2439 -> 2429;
2439 -> 2424;
2440 -> 2429;
2440 -> 2424;
2441 -> 2425;
2441 -> 2423;
2441 -> 2429;
2441 -> 2424;
2442 -> 2425;
2442 -> 2423;
2442 -> 2429;
2442 -> 2424;
2443 -> 2425;
2443 -> 2423;
2443 -> 2429;
2443 -> 2424;
2444 -> 2425;
2444 -> 2423;
2444 -> 2429;
2444 -> 2424;
2445 -> 2427;
2445 -> 2424;
2446 -> 2445;
2447 -> 2446;
2447 -> 2429;
2447 -> 2424;
2448 -> 2428;
2448 -> 2424;
2449 -> 2448;
2450 -> 2449;
2450 -> 2429;
2450 -> 2424;
2451 -> 2424;
2452 -> 2424;
2453 -> 2425;
2453 -> 2423;
2453 -> 2452;
2453 -> 2424;
2454 -> 2425;
2454 -> 2423;
2454 -> 2424;
2455 -> 0;
2455 -> 2424;
2456 -> 2425;
2456 -> 2453;
2457 -> 2453;
2458 -> 2456;
2458 -> 2457;
2458 -> 2453;
2459 -> 2456;
2459 -> 2454;
2459 -> 2429;
2459 -> 2458;
2460 -> 2425;
2460 -> 2454;
2460 -> 2429;
2460 -> 2458;
2461 -> 2426;
2461 -> 2429;
2461 -> 2424;
2462 -> 2429;
2462 -> 2461;
2462 -> 2424;
2463 -> 2429;
2463 -> 2444;
2463 -> 2454;
2463 -> 2462;
2464 -> 2463;
2465 -> 2464;
2465 -> 2429;
2465 -> 2463;
2466 -> 2462;
2467 -> 2456;
2467 -> 2466;
2467 -> 2462;
2468 -> 2456;
2468 -> 2464;
2468 -> 2429;
2468 -> 2467;
2469 -> 2462;
2470 -> 2429;
2470 -> 2468;
2470 -> 2469;
2470 -> 2462;
2471 -> 2429;
2471 -> 2468;
2471 -> 2464;
2471 -> 2469;
2471 -> 2462;
2472 -> 2429;
2472 -> 2444;
2472 -> 2464;
2472 -> 2424;
2473 -> 2472;
2473 -> 2429;
2473 -> 2424;
2474 -> 2423;
2474 -> 2472;
2474 -> 2460;
2474 -> 2442;
2474 -> 2443;
2474 -> 2465;
2474 -> 2468;
2474 -> 2473;
2474 -> 2436;
2474 -> 2459;
2474 -> 2461;
2474 -> 2447;
2474 -> 2450;
2474 -> 2440;
2474 -> 2429;
2474 -> 2444;
2474 -> 2403;
2475 -> 2425;
2475 -> 2474;
2475 -> 2429;
2475 -> 2424;
2476 -> 2429;
2476 -> 2474;
2476 -> 2469;
2476 -> 2462;
2477 -> 2405;
2477 -> 2403;
2478 -> 2477;
2478 -> 2420;
2478 -> 2403;
2479 -> 2478;
2480 -> 2479;
2480 -> 2474;
2480 -> 2420;
2480 -> 2478;
2481 -> 2480;
2481 -> 2479;
2482 -> 2480;
2482 -> 2479;
2483 -> 2481;
2483 -> 2479;
2484 -> 2479;
2485 -> 2483;
2485 -> 2484;
2485 -> 2479;
2486 -> 2483;
2486 -> 2480;
2486 -> 2479;
2487 -> 2482;
2487 -> 2480;
2487 -> 2486;
2487 -> 2479;
2488 -> 2482;
2488 -> 2487;
2488 -> 2483;
2488 -> 2479;
2489 -> 2482;
2489 -> 2487;
2489 -> 2483;
2489 -> 2479;
2490 -> 2482;
2490 -> 2487;
2490 -> 2479;
2491 -> 2482;
2491 -> 2487;
2491 -> 2483;
2491 -> 2490;
2492 -> 2479;
2493 -> 2482;
2493 -> 2487;
2493 -> 2492;
2493 -> 2479;
2494 -> 2493;
2495 -> 2479;
2496 -> 2482;
2496 -> 2487;
2496 -> 2495;
2496 -> 2479;
2497 -> 2479;
2498 -> 2483;
2498 -> 2487;
2498 -> 2497;
2498 -> 2479;
2499 -> 2482;
2499 -> 2487;
2499 -> 2483;
2499 -> 2479;
2500 -> 2479;
2501 -> 2482;
2501 -> 2487;
2501 -> 2500;
2501 -> 2479;
2502 -> 2501;
2503 -> 2501;
2504 -> 2482;
2504 -> 2503;
2505 -> 2503;
2506 -> 2504;
2506 -> 2487;
2506 -> 2505;
2506 -> 2503;
2507 -> 2504;
2507 -> 2487;
2507 -> 2506;
2508 -> 2506;
2509 -> 2507;
2509 -> 2504;
2509 -> 2506;
2510 -> 2504;
2510 -> 2487;
2510 -> 2509;
2510 -> 2503;
2511 -> 2510;
2511 -> 2501;
2512 -> 2501;
2513 -> 2483;
2513 -> 2512;
2514 -> 2512;
2515 -> 2513;
2515 -> 2487;
2515 -> 2509;
2515 -> 2514;
2515 -> 2512;
2516 -> 2513;
2516 -> 2487;
2516 -> 2509;
2516 -> 2515;
2516 -> 2512;
2517 -> 2516;
2517 -> 2501;
2518 -> 2482;
2518 -> 2487;
2518 -> 2483;
2518 -> 2501;
2519 -> 2511;
2519 -> 2518;
2520 -> 2517;
2520 -> 2518;
2521 -> 2519;
2521 -> 2520;
2521 -> 2487;
2521 -> 2509;
2521 -> 2515;
2521 -> 2507;
2521 -> 2508;
2521 -> 2518;
2522 -> 2482;
2522 -> 2521;
2522 -> 2483;
2522 -> 2479;
2523 -> 2479;
2524 -> 2480;
2524 -> 2523;
2524 -> 2521;
2524 -> 2478;
2525 -> 2478;
2526 -> 2524;
2526 -> 2525;
2526 -> 2478;
2527 -> 2524;
2527 -> 2526;
2528 -> 2527;
2529 -> 2527;
2530 -> 2527;
2531 -> 2527;
2532 -> 2527;
2532 -> 2531;
2533 -> 2527;
2534 -> 2533;
2535 -> 2527;
2536 -> 2527;
2537 -> 2527;
2538 -> 2527;
2539 -> 2527;
2540 -> 2403;
2541 -> 2474;
2541 -> 2527;
2541 -> 2540;
2541 -> 2403;
2542 -> 2403;
2543 -> 2405;
2543 -> 2403;
2544 -> 2404;
2544 -> 2403;
2545 -> 2403;
2546 -> 2543;
2546 -> 2545;
2547 -> 2544;
2547 -> 2545;
2548 -> 2545;
2549 -> 2545;
2550 -> 2547;
2550 -> 2545;
2551 -> 2550;
2551 -> 2527;
2551 -> 2545;
2552 -> 2527;
2552 -> 2545;
2553 -> 2551;
2553 -> 2545;
2554 -> 2548;
2554 -> 2553;
2555 -> 2554;
2555 -> 2545;
2556 -> 2554;
2556 -> 2545;
2557 -> 2556;
2557 -> 2545;
2558 -> 2546;
2558 -> 2545;
2559 -> 2558;
2559 -> 2527;
2559 -> 2545;
2560 -> 2545;
2561 -> 2558;
2561 -> 2560;
2561 -> 2527;
2561 -> 2545;
2562 -> 2546;
2562 -> 2545;
2563 -> 2562;
2563 -> 2561;
2563 -> 2545;
2564 -> 2545;
2565 -> 2562;
2565 -> 2564;
2565 -> 2561;
2565 -> 2545;
2566 -> 2546;
2566 -> 2545;
2567 -> 2545;
2568 -> 2566;
2568 -> 2567;
2570 -> 2569;
2571 -> 2569;
2572 -> 2571;
2572 -> 2567;
2573 -> 2567;
2574 -> 2568;
2574 -> 2567;
2575 -> 2574;
2575 -> 2565;
2575 -> 2567;
2576 -> 2575;
2577 -> 2576;
2578 -> 2545;
2579 -> 2578;
2579 -> 2545;
2580 -> 2545;
2581 -> 2545;
2582 -> 2578;
2582 -> 2581;
2582 -> 2579;
2582 -> 2545;
2583 -> 2545;
2584 -> 2546;
2584 -> 2545;
2585 -> 2584;
2585 -> 2565;
2585 -> 2545;
2586 -> 2585;
2587 -> 2557;
2587 -> 2585;
2588 -> 2585;
2589 -> 2586;
2589 -> 2588;
2590 -> 2587;
2590 -> 2588;
2591 -> 2588;
2592 -> 2591;
2592 -> 2590;
2592 -> 2588;
2593 -> 2588;
2594 -> 2589;
2594 -> 2593;
2595 -> 2593;
2596 -> 2593;
2597 -> 2595;
2597 -> 2596;
2597 -> 2593;
2598 -> 2593;
2599 -> 2594;
2599 -> 2565;
2599 -> 2598;
2599 -> 2593;
2600 -> 2594;
2600 -> 2565;
2600 -> 2599;
2601 -> 2595;
2601 -> 2600;
2601 -> 2597;
2601 -> 2599;
2602 -> 2599;
2603 -> 2595;
2603 -> 2602;
2603 -> 2601;
2603 -> 2599;
2604 -> 2594;
2604 -> 2565;
2604 -> 2599;
2605 -> 2595;
2605 -> 2604;
2605 -> 2603;
2605 -> 2599;
2606 -> 2593;
2607 -> 2594;
2607 -> 2565;
2607 -> 2606;
2607 -> 2593;
2608 -> 2607;
2609 -> 2608;
2610 -> 2595;
2610 -> 2609;
2610 -> 2605;
2610 -> 2608;
2611 -> 2594;
2611 -> 2565;
2611 -> 2608;
2612 -> 2595;
2612 -> 2611;
2612 -> 2610;
2612 -> 2608;
2613 -> 2607;
2614 -> 2595;
2614 -> 2613;
2614 -> 2612;
2614 -> 2607;
2615 -> 2594;
2615 -> 2565;
2615 -> 2593;
2616 -> 2593;
2617 -> 2595;
2617 -> 2616;
2617 -> 2614;
2617 -> 2593;
2618 -> 2593;
2619 -> 2594;
2619 -> 2565;
2619 -> 2618;
2619 -> 2593;
2620 -> 2619;
2621 -> 2595;
2621 -> 2620;
2621 -> 2617;
2621 -> 2619;
2622 -> 2619;
2623 -> 2622;
2623 -> 2619;
2624 -> 2619;
2625 -> 2623;
2625 -> 2619;
2626 -> 2625;
2627 -> 2595;
2627 -> 2626;
2627 -> 2621;
2627 -> 2625;
2628 -> 2623;
2628 -> 2625;
2629 -> 2595;
2629 -> 2628;
2629 -> 2627;
2629 -> 2625;
2630 -> 2625;
2631 -> 2595;
2631 -> 2630;
2631 -> 2629;
2631 -> 2625;
2632 -> 2625;
2633 -> 2632;
2634 -> 2595;
2634 -> 2633;
2634 -> 2631;
2634 -> 2632;
2635 -> 2619;
2636 -> 2595;
2636 -> 2635;
2636 -> 2634;
2636 -> 2619;
2637 -> 2593;
2638 -> 2594;
2638 -> 2625;
2638 -> 2637;
2638 -> 2593;
2639 -> 2594;
2639 -> 2625;
2639 -> 2593;
2640 -> 2593;
2641 -> 2594;
2641 -> 2625;
2641 -> 2640;
2641 -> 2593;
2642 -> 2593;
2643 -> 2594;
2643 -> 2625;
2643 -> 2642;
2643 -> 2593;
2644 -> 2593;
2645 -> 2594;
2645 -> 2625;
2645 -> 2644;
2645 -> 2593;
2646 -> 2595;
2646 -> 2636;
2646 -> 2593;
2647 -> 2646;
2647 -> 2588;
2648 -> 2592;
2648 -> 2647;
2648 -> 2588;
2649 -> 2583;
2649 -> 2648;
2649 -> 2585;
2650 -> 2557;
2650 -> 2625;
2651 -> 2650;
2651 -> 2625;
2652 -> 2625;
2653 -> 2652;
2653 -> 2651;
2653 -> 2625;
2654 -> 2625;
2655 -> 2625;
2656 -> 2654;
2656 -> 2655;
2656 -> 2625;
2657 -> 2625;
2658 -> 2625;
2658 -> 2657;
2659 -> 2654;
2659 -> 2658;
2659 -> 2656;
2659 -> 2657;
2660 -> 2657;
2661 -> 2654;
2661 -> 2660;
2661 -> 2659;
2661 -> 2657;
2662 -> 2625;
2662 -> 2657;
2663 -> 2654;
2663 -> 2662;
2663 -> 2661;
2663 -> 2657;
2664 -> 2625;
2665 -> 2664;
2666 -> 2665;
2667 -> 2654;
2667 -> 2666;
2667 -> 2663;
2667 -> 2665;
2668 -> 2625;
2668 -> 2665;
2669 -> 2654;
2669 -> 2668;
2669 -> 2667;
2669 -> 2665;
2670 -> 2664;
2671 -> 2654;
2671 -> 2670;
2671 -> 2669;
2671 -> 2664;
2672 -> 2625;
2673 -> 2625;
2674 -> 2654;
2674 -> 2673;
2674 -> 2671;
2674 -> 2625;
2675 -> 2625;
2676 -> 2654;
2676 -> 2675;
2676 -> 2674;
2676 -> 2625;
2677 -> 2654;
2677 -> 2626;
2677 -> 2676;
2677 -> 2625;
2678 -> 2625;
2679 -> 2654;
2679 -> 2678;
2679 -> 2677;
2679 -> 2625;
2680 -> 2654;
2680 -> 2630;
2680 -> 2679;
2680 -> 2625;
2681 -> 2654;
2681 -> 2633;
2681 -> 2680;
2681 -> 2632;
2682 -> 2625;
2683 -> 2654;
2683 -> 2682;
2683 -> 2681;
2683 -> 2625;
2684 -> 2625;
2685 -> 2625;
2686 -> 2625;
2687 -> 2625;
2688 -> 2625;
2689 -> 2654;
2689 -> 2683;
2689 -> 2625;
2690 -> 2689;
2690 -> 2625;
2691 -> 2653;
2691 -> 2690;
2691 -> 2625;
2692 -> 2578;
2692 -> 2545;
2693 -> 2583;
2693 -> 2545;
2694 -> 2545;
2695 -> 2692;
2695 -> 2694;
2696 -> 2693;
2696 -> 2694;
2697 -> 2696;
2697 -> 2649;
2697 -> 2694;
2698 -> 2694;
2699 -> 2698;
2699 -> 2697;
2699 -> 2694;
2700 -> 2696;
2700 -> 2698;
2700 -> 2649;
2700 -> 2699;
2701 -> 2695;
2701 -> 2700;
2701 -> 2582;
2701 -> 2699;
2702 -> 2699;
2703 -> 2702;
2704 -> 2695;
2704 -> 2703;
2704 -> 2701;
2704 -> 2702;
2705 -> 2695;
2705 -> 2704;
2705 -> 2699;
2706 -> 2545;
2707 -> 2545;
2708 -> 2578;
2708 -> 2707;
2708 -> 2705;
2708 -> 2545;
2709 -> 2545;
2710 -> 2547;
2710 -> 2625;
2710 -> 2545;
2711 -> 2545;
2712 -> 2710;
2712 -> 2545;
2713 -> 2710;
2713 -> 2712;
2714 -> 2713;
2714 -> 2712;
2715 -> 2714;
2715 -> 2712;
2716 -> 2712;
2717 -> 2712;
2718 -> 2555;
2718 -> 2712;
2719 -> 2578;
2719 -> 2718;
2720 -> 2557;
2720 -> 2718;
2721 -> 2718;
2722 -> 2719;
2722 -> 2721;
2723 -> 2720;
2723 -> 2721;
2724 -> 2721;
2725 -> 2724;
2725 -> 2723;
2725 -> 2721;
2726 -> 2722;
2726 -> 2724;
2726 -> 2725;
2726 -> 2708;
2726 -> 2721;
2727 -> 2718;
2728 -> 2718;
2729 -> 2578;
2729 -> 2728;
2729 -> 2726;
2729 -> 2718;
2730 -> 2713;
2730 -> 2714;
2730 -> 2718;
2731 -> 2578;
2731 -> 2730;
2731 -> 2729;
2731 -> 2718;
2732 -> 2713;
2732 -> 2730;
2732 -> 2718;
2733 -> 2732;
2733 -> 2730;
2733 -> 2718;
2734 -> 2578;
2734 -> 2733;
2735 -> 2557;
2735 -> 2733;
2736 -> 2733;
2737 -> 2734;
2737 -> 2736;
2738 -> 2735;
2738 -> 2736;
2739 -> 2736;
2740 -> 2739;
2740 -> 2738;
2740 -> 2736;
2741 -> 2737;
2741 -> 2739;
2741 -> 2740;
2741 -> 2731;
2741 -> 2736;
2742 -> 2733;
2743 -> 2733;
2744 -> 2578;
2744 -> 2743;
2744 -> 2741;
2744 -> 2733;
2745 -> 2733;
2746 -> 2578;
2746 -> 2745;
2746 -> 2744;
2746 -> 2733;
2747 -> 2713;
2747 -> 2712;
2748 -> 2712;
2749 -> 2559;
2749 -> 2712;
2750 -> 2563;
2750 -> 2712;
2751 -> 2712;
2752 -> 2747;
2752 -> 2751;
2753 -> 2748;
2753 -> 2751;
2754 -> 2749;
2754 -> 2751;
2755 -> 2750;
2755 -> 2751;
2756 -> 2748;
2756 -> 2751;
2757 -> 2756;
2757 -> 2751;
2758 -> 2756;
2758 -> 2751;
2759 -> 2756;
2759 -> 2751;
2760 -> 2756;
2760 -> 2751;
2761 -> 2756;
2761 -> 2751;
2762 -> 2756;
2762 -> 2751;
2763 -> 2756;
2763 -> 2751;
2764 -> 2756;
2764 -> 2751;
2765 -> 2756;
2765 -> 2751;
2766 -> 2752;
2766 -> 2745;
2766 -> 2756;
2766 -> 2751;
2767 -> 2752;
2767 -> 2745;
2767 -> 2756;
2767 -> 2751;
2768 -> 2752;
2768 -> 2745;
2768 -> 2756;
2768 -> 2751;
2769 -> 2752;
2769 -> 2745;
2769 -> 2756;
2769 -> 2751;
2770 -> 2751;
2771 -> 2752;
2771 -> 2745;
2771 -> 2751;
2772 -> 2756;
2773 -> 2756;
2773 -> 2771;
2773 -> 2772;
2774 -> 2756;
2774 -> 2771;
2774 -> 2769;
2774 -> 2772;
2775 -> 2748;
2775 -> 2712;
2776 -> 2546;
2776 -> 2712;
2777 -> 2748;
2777 -> 2712;
2778 -> 2776;
2778 -> 2777;
2778 -> 2769;
2778 -> 2771;
2778 -> 2767;
2778 -> 2768;
2778 -> 2756;
2778 -> 2753;
2778 -> 2754;
2778 -> 2755;
2778 -> 2712;
2779 -> 2712;
2780 -> 2779;
2781 -> 2778;
2781 -> 2780;
2781 -> 2779;
2782 -> 2778;
2782 -> 2779;
2783 -> 2778;
2783 -> 2779;
2784 -> 2778;
2784 -> 2779;
2785 -> 2778;
2785 -> 2784;
2786 -> 2779;
2787 -> 2778;
2787 -> 2786;
2787 -> 2779;
2788 -> 2779;
2789 -> 2778;
2789 -> 2788;
2789 -> 2779;
2790 -> 2779;
2791 -> 2778;
2791 -> 2790;
2791 -> 2779;
2792 -> 2778;
2792 -> 2779;
2793 -> 2778;
2794 -> 2778;
2794 -> 2779;
2795 -> 2712;
2796 -> 2778;
2796 -> 2795;
2796 -> 2712;
2797 -> 2546;
2797 -> 2778;
2797 -> 2796;
2798 -> 2748;
2798 -> 2712;
2799 -> 2557;
2799 -> 2712;
2800 -> 2712;
2801 -> 2798;
2801 -> 2800;
2802 -> 2799;
2802 -> 2800;
2803 -> 2800;
2804 -> 2803;
2804 -> 2802;
2804 -> 2800;
2805 -> 2800;
2806 -> 2800;
2807 -> 2805;
2807 -> 2806;
2807 -> 2800;
2808 -> 2800;
2809 -> 2801;
2809 -> 2778;
2809 -> 2808;
2809 -> 2800;
2810 -> 2801;
2810 -> 2778;
2810 -> 2809;
2811 -> 2805;
2811 -> 2810;
2811 -> 2807;
2811 -> 2809;
2812 -> 2809;
2813 -> 2805;
2813 -> 2812;
2813 -> 2811;
2813 -> 2809;
2814 -> 2801;
2814 -> 2778;
2814 -> 2809;
2815 -> 2805;
2815 -> 2814;
2815 -> 2813;
2815 -> 2809;
2816 -> 2800;
2817 -> 2801;
2817 -> 2778;
2817 -> 2816;
2817 -> 2800;
2818 -> 2817;
2819 -> 2818;
2820 -> 2805;
2820 -> 2819;
2820 -> 2815;
2820 -> 2818;
2821 -> 2801;
2821 -> 2778;
2821 -> 2818;
2822 -> 2805;
2822 -> 2821;
2822 -> 2820;
2822 -> 2818;
2823 -> 2817;
2824 -> 2805;
2824 -> 2823;
2824 -> 2822;
2824 -> 2817;
2825 -> 2801;
2825 -> 2778;
2825 -> 2800;
2826 -> 2800;
2827 -> 2805;
2827 -> 2826;
2827 -> 2824;
2827 -> 2800;
2828 -> 2801;
2828 -> 2778;
2828 -> 2800;
2829 -> 2828;
2830 -> 2805;
2830 -> 2829;
2830 -> 2827;
2830 -> 2828;
2831 -> 2828;
2832 -> 2805;
2832 -> 2831;
2832 -> 2830;
2832 -> 2828;
2833 -> 2828;
2834 -> 2805;
2834 -> 2833;
2834 -> 2832;
2834 -> 2828;
2835 -> 2828;
2836 -> 2805;
2836 -> 2835;
2836 -> 2834;
2836 -> 2828;
2837 -> 2828;
2838 -> 2837;
2839 -> 2805;
2839 -> 2838;
2839 -> 2836;
2839 -> 2837;
2840 -> 2828;
2841 -> 2805;
2841 -> 2840;
2841 -> 2839;
2841 -> 2828;
2842 -> 2800;
2843 -> 2801;
2843 -> 2828;
2843 -> 2842;
2843 -> 2800;
2844 -> 2843;
2845 -> 2805;
2845 -> 2844;
2845 -> 2841;
2845 -> 2843;
2846 -> 2843;
2847 -> 2805;
2847 -> 2846;
2847 -> 2845;
2847 -> 2843;
2848 -> 2843;
2849 -> 2805;
2849 -> 2848;
2849 -> 2847;
2849 -> 2843;
2850 -> 2843;
2851 -> 2805;
2851 -> 2850;
2851 -> 2849;
2851 -> 2843;
2852 -> 2843;
2853 -> 2805;
2853 -> 2852;
2853 -> 2851;
2853 -> 2843;
2854 -> 2801;
2854 -> 2828;
2854 -> 2800;
2855 -> 2800;
2856 -> 2801;
2856 -> 2828;
2856 -> 2855;
2856 -> 2800;
2857 -> 2800;
2858 -> 2801;
2858 -> 2828;
2858 -> 2857;
2858 -> 2800;
2859 -> 2800;
2860 -> 2801;
2860 -> 2828;
2860 -> 2859;
2860 -> 2800;
2861 -> 2805;
2861 -> 2853;
2861 -> 2800;
2862 -> 2861;
2862 -> 2800;
2863 -> 2804;
2863 -> 2862;
2863 -> 2800;
2864 -> 2578;
2864 -> 2863;
2864 -> 2746;
2864 -> 2712;
2865 -> 2797;
2865 -> 2712;
2866 -> 2557;
2866 -> 2712;
2867 -> 2712;
2868 -> 2865;
2868 -> 2867;
2869 -> 2866;
2869 -> 2867;
2870 -> 2867;
2871 -> 2870;
2871 -> 2869;
2871 -> 2867;
2872 -> 2867;
2873 -> 2867;
2874 -> 2872;
2874 -> 2873;
2874 -> 2867;
2875 -> 2867;
2876 -> 2868;
2876 -> 2828;
2876 -> 2875;
2876 -> 2867;
2877 -> 2868;
2877 -> 2828;
2877 -> 2876;
2878 -> 2872;
2878 -> 2877;
2878 -> 2874;
2878 -> 2876;
2879 -> 2876;
2880 -> 2872;
2880 -> 2879;
2880 -> 2878;
2880 -> 2876;
2881 -> 2868;
2881 -> 2828;
2881 -> 2876;
2882 -> 2872;
2882 -> 2881;
2882 -> 2880;
2882 -> 2876;
2883 -> 2867;
2884 -> 2868;
2884 -> 2828;
2884 -> 2883;
2884 -> 2867;
2885 -> 2884;
2886 -> 2885;
2887 -> 2872;
2887 -> 2886;
2887 -> 2882;
2887 -> 2885;
2888 -> 2868;
2888 -> 2828;
2888 -> 2885;
2889 -> 2872;
2889 -> 2888;
2889 -> 2887;
2889 -> 2885;
2890 -> 2884;
2891 -> 2872;
2891 -> 2890;
2891 -> 2889;
2891 -> 2884;
2892 -> 2868;
2892 -> 2828;
2892 -> 2867;
2893 -> 2867;
2894 -> 2872;
2894 -> 2893;
2894 -> 2891;
2894 -> 2867;
2895 -> 2868;
2895 -> 2828;
2895 -> 2867;
2896 -> 2895;
2897 -> 2872;
2897 -> 2896;
2897 -> 2894;
2897 -> 2895;
2898 -> 2895;
2899 -> 2872;
2899 -> 2898;
2899 -> 2897;
2899 -> 2895;
2900 -> 2895;
2901 -> 2872;
2901 -> 2900;
2901 -> 2899;
2901 -> 2895;
2902 -> 2895;
2903 -> 2872;
2903 -> 2902;
2903 -> 2901;
2903 -> 2895;
2904 -> 2895;
2905 -> 2904;
2906 -> 2872;
2906 -> 2905;
2906 -> 2903;
2906 -> 2904;
2907 -> 2895;
2908 -> 2872;
2908 -> 2907;
2908 -> 2906;
2908 -> 2895;
2909 -> 2867;
2910 -> 2868;
2910 -> 2895;
2910 -> 2909;
2910 -> 2867;
2911 -> 2868;
2911 -> 2895;
2911 -> 2867;
2912 -> 2867;
2913 -> 2868;
2913 -> 2895;
2913 -> 2912;
2913 -> 2867;
2914 -> 2867;
2915 -> 2868;
2915 -> 2895;
2915 -> 2914;
2915 -> 2867;
2916 -> 2867;
2917 -> 2868;
2917 -> 2895;
2917 -> 2916;
2917 -> 2867;
2918 -> 2872;
2918 -> 2908;
2918 -> 2867;
2919 -> 2918;
2919 -> 2867;
2920 -> 2871;
2920 -> 2919;
2920 -> 2867;
2921 -> 2709;
2921 -> 2920;
2921 -> 2712;
2922 -> 2895;
2923 -> 2895;
2924 -> 2923;
2925 -> 2578;
2925 -> 2924;
2925 -> 2864;
2925 -> 2923;
2926 -> 2578;
2926 -> 2895;
2927 -> 2557;
2927 -> 2895;
2928 -> 2895;
2929 -> 2926;
2929 -> 2928;
2930 -> 2927;
2930 -> 2928;
2931 -> 2928;
2932 -> 2931;
2932 -> 2930;
2932 -> 2928;
2933 -> 2895;
2934 -> 2895;
2935 -> 2578;
2935 -> 2895;
2936 -> 2557;
2936 -> 2895;
2937 -> 2895;
2938 -> 2935;
2938 -> 2937;
2939 -> 2936;
2939 -> 2937;
2940 -> 2937;
2941 -> 2940;
2941 -> 2939;
2941 -> 2937;
2942 -> 2895;
2943 -> 2895;
2944 -> 2895;
2945 -> 2895;
2946 -> 2895;
2947 -> 2895;
2948 -> 2895;
2949 -> 2895;
2950 -> 2895;
2951 -> 2895;
2952 -> 2895;
2953 -> 2895;
2954 -> 2895;
2955 -> 2895;
2956 -> 2895;
2957 -> 2895;
2958 -> 2895;
2959 -> 2895;
2960 -> 2895;
2961 -> 2895;
2961 -> 2960;
2962 -> 2895;
2963 -> 2895;
2964 -> 2895;
2965 -> 2895;
2966 -> 2895;
2967 -> 2895;
2968 -> 2557;
2968 -> 2895;
2969 -> 2968;
2969 -> 2895;
2970 -> 2895;
2971 -> 2970;
2971 -> 2969;
2971 -> 2895;
2972 -> 2895;
2973 -> 2895;
2974 -> 2972;
2974 -> 2973;
2974 -> 2895;
2975 -> 2895;
2976 -> 2895;
2976 -> 2975;
2977 -> 2972;
2977 -> 2976;
2977 -> 2974;
2977 -> 2975;
2978 -> 2975;
2979 -> 2972;
2979 -> 2978;
2979 -> 2977;
2979 -> 2975;
2980 -> 2895;
2980 -> 2975;
2981 -> 2972;
2981 -> 2980;
2981 -> 2979;
2981 -> 2975;
2982 -> 2895;
2983 -> 2982;
2984 -> 2983;
2985 -> 2972;
2985 -> 2984;
2985 -> 2981;
2985 -> 2983;
2986 -> 2895;
2986 -> 2983;
2987 -> 2972;
2987 -> 2986;
2987 -> 2985;
2987 -> 2983;
2988 -> 2982;
2989 -> 2972;
2989 -> 2988;
2989 -> 2987;
2989 -> 2982;
2990 -> 2895;
2991 -> 2895;
2992 -> 2972;
2992 -> 2991;
2992 -> 2989;
2992 -> 2895;
2993 -> 2972;
2993 -> 2896;
2993 -> 2992;
2993 -> 2895;
2994 -> 2972;
2994 -> 2898;
2994 -> 2993;
2994 -> 2895;
2995 -> 2972;
2995 -> 2900;
2995 -> 2994;
2995 -> 2895;
2996 -> 2972;
2996 -> 2902;
2996 -> 2995;
2996 -> 2895;
2997 -> 2972;
2997 -> 2905;
2997 -> 2996;
2997 -> 2904;
2998 -> 2972;
2998 -> 2907;
2998 -> 2997;
2998 -> 2895;
2999 -> 2895;
3000 -> 2999;
3001 -> 2972;
3001 -> 3000;
3001 -> 2998;
3001 -> 2999;
3002 -> 2999;
3003 -> 2972;
3003 -> 3002;
3003 -> 3001;
3003 -> 2999;
3004 -> 2999;
3005 -> 2972;
3005 -> 3004;
3005 -> 3003;
3005 -> 2999;
3006 -> 2999;
3007 -> 2972;
3007 -> 3006;
3007 -> 3005;
3007 -> 2999;
3008 -> 2999;
3009 -> 2972;
3009 -> 3008;
3009 -> 3007;
3009 -> 2999;
3010 -> 2895;
3011 -> 2895;
3012 -> 2895;
3013 -> 2895;
3014 -> 2972;
3014 -> 3009;
3014 -> 2895;
3015 -> 3014;
3015 -> 2895;
3016 -> 2971;
3016 -> 3015;
3016 -> 2895;
3017 -> 2557;
3017 -> 2895;
3018 -> 3017;
3018 -> 2895;
3019 -> 2970;
3019 -> 3018;
3019 -> 2895;
3020 -> 2972;
3020 -> 2998;
3020 -> 2895;
3021 -> 3020;
3021 -> 2895;
3022 -> 3019;
3022 -> 3021;
3022 -> 2895;
3023 -> 2545;
3024 -> 2895;
3024 -> 3023;
3024 -> 2545;
3025 -> 2578;
3025 -> 2925;
3025 -> 3024;
3026 -> 2545;
3027 -> 2578;
3027 -> 3026;
3027 -> 3025;
3027 -> 2545;
3028 -> 2583;
3028 -> 2545;
3029 -> 2709;
3029 -> 2545;
3033 -> 3031;
3033 -> 3030;
3034 -> 3032;
3034 -> 3030;
3035 -> 3030;
3036 -> 0;
3036 -> 2545;
3037 -> 2545;
3038 -> 2545;
3039 -> 3028;
3039 -> 3038;
3040 -> 3029;
3040 -> 3038;
3041 -> 3036;
3041 -> 3038;
3042 -> 3037;
3042 -> 3038;
3043 -> 3037;
3043 -> 3038;
3044 -> 3038;
3045 -> 3042;
3045 -> 3044;
3045 -> 3038;
3046 -> 3045;
3046 -> 3038;
3047 -> 0;
3049 -> 3047;
3049 -> 3048;
3050 -> 3048;
3052 -> 3051;
3054 -> 3053;
3056 -> 3055;
3057 -> 3050;
3058 -> 3050;
3058 -> 3048;
3059 -> 3049;
3059 -> 3050;
3059 -> 3048;
3060 -> 3048;
3061 -> 3038;
3062 -> 3061;
3062 -> 3043;
3062 -> 3038;
3063 -> 3039;
3063 -> 3038;
3064 -> 3040;
3064 -> 3038;
3065 -> 3041;
3065 -> 3038;
3066 -> 3063;
3066 -> 3038;
3067 -> 3064;
3067 -> 3038;
3068 -> 3062;
3068 -> 3038;
3069 -> 3038;
3070 -> 3066;
3070 -> 3069;
3071 -> 3067;
3071 -> 3069;
3072 -> 3068;
3072 -> 3069;
3073 -> 3046;
3073 -> 3069;
3074 -> 3070;
3074 -> 3069;
3075 -> 3070;
3075 -> 3063;
3075 -> 3069;
3076 -> 3071;
3076 -> 3069;
3077 -> 3071;
3077 -> 3064;
3077 -> 3069;
3078 -> 3069;
3079 -> 3074;
3079 -> 3078;
3080 -> 3075;
3080 -> 3078;
3081 -> 3076;
3081 -> 3078;
3082 -> 3077;
3082 -> 3078;
3083 -> 3073;
3083 -> 3078;
3084 -> 3079;
3084 -> 3078;
3085 -> 3080;
3085 -> 3078;
3086 -> 3081;
3086 -> 3078;
3087 -> 3082;
3087 -> 3078;
3088 -> 3078;
3089 -> 3084;
3089 -> 3088;
3090 -> 3085;
3090 -> 3088;
3091 -> 3086;
3091 -> 3088;
3092 -> 3087;
3092 -> 3088;
3093 -> 3083;
3093 -> 3088;
3094 -> 3088;
3095 -> 3090;
3095 -> 3094;
3095 -> 3088;
3096 -> 3088;
3097 -> 3092;
3097 -> 3096;
3097 -> 3088;
3098 -> 3095;
3098 -> 3097;
3098 -> 3088;
3099 -> 3088;
3100 -> 3099;
3100 -> 3098;
3100 -> 3088;
3101 -> 3088;
3102 -> 3101;
3102 -> 3090;
3102 -> 3088;
3103 -> 3102;
3104 -> 3098;
3104 -> 3100;
3104 -> 3103;
3104 -> 3102;
3105 -> 3104;
3105 -> 3101;
3105 -> 3103;
3105 -> 3098;
3105 -> 3102;
3106 -> 3088;
3107 -> 3106;
3107 -> 3092;
3107 -> 3088;
3108 -> 3107;
3109 -> 3098;
3109 -> 3100;
3109 -> 3105;
3109 -> 3108;
3109 -> 3107;
3110 -> 3109;
3110 -> 3108;
3110 -> 3106;
3110 -> 3098;
3110 -> 3107;
3111 -> 3088;
3112 -> 3111;
3112 -> 3090;
3112 -> 3088;
3113 -> 3112;
3114 -> 3113;
3114 -> 3092;
3114 -> 3112;
3115 -> 3114;
3116 -> 3098;
3116 -> 3100;
3116 -> 3105;
3116 -> 3110;
3116 -> 3115;
3116 -> 3114;
3117 -> 3089;
3117 -> 3114;
3118 -> 3091;
3118 -> 3114;
3119 -> 3114;
3120 -> 3117;
3120 -> 3119;
3121 -> 3115;
3121 -> 3119;
3122 -> 3118;
3122 -> 3119;
3123 -> 3115;
3123 -> 3119;
3124 -> 3093;
3124 -> 3119;
3125 -> 3120;
3125 -> 3063;
3125 -> 3121;
3125 -> 3119;
3126 -> 3122;
3126 -> 3064;
3126 -> 3123;
3126 -> 3119;
3127 -> 3124;
3127 -> 0;
3127 -> 3125;
3127 -> 3126;
3127 -> 3063;
3127 -> 3064;
3127 -> 3119;
3128 -> 3116;
3128 -> 3127;
3128 -> 3114;
3129 -> 3114;
3130 -> 3098;
3130 -> 3100;
3130 -> 3105;
3130 -> 3110;
3130 -> 3129;
3130 -> 3113;
3130 -> 3114;
3131 -> 3114;
3132 -> 3098;
3132 -> 3100;
3132 -> 3105;
3132 -> 3110;
3132 -> 3111;
3132 -> 3131;
3132 -> 3114;
3133 -> 3128;
3133 -> 3114;
3134 -> 3130;
3134 -> 3114;
3135 -> 3133;
3135 -> 3134;
3135 -> 3114;
3136 -> 3132;
3136 -> 3114;
3137 -> 3135;
3137 -> 3136;
3137 -> 3114;
3138 -> 3137;
3138 -> 3111;
3138 -> 3113;
3138 -> 3098;
3138 -> 3114;
3139 -> 3098;
3139 -> 3088;
3140 -> 3080;
3140 -> 3078;
3141 -> 3082;
3141 -> 3078;
3142 -> 3078;
3143 -> 3140;
3143 -> 3142;
3143 -> 3078;
3144 -> 3141;
3144 -> 3142;
3144 -> 3078;
3145 -> 3143;
3145 -> 3144;
3145 -> 3078;
3146 -> 3139;
3146 -> 3098;
3146 -> 3100;
3146 -> 3105;
3146 -> 3110;
3146 -> 3138;
3146 -> 3140;
3146 -> 3141;
3146 -> 3145;
3147 -> 3145;
3148 -> 3139;
3148 -> 3098;
3148 -> 3100;
3148 -> 3105;
3148 -> 3110;
3148 -> 3138;
3148 -> 3147;
3148 -> 3141;
3148 -> 3145;
3149 -> 3139;
3149 -> 3098;
3149 -> 3100;
3149 -> 3105;
3149 -> 3110;
3149 -> 3138;
3149 -> 3140;
3149 -> 3141;
3149 -> 3148;
3150 -> 3148;
3151 -> 3140;
3151 -> 3150;
3152 -> 3141;
3152 -> 3150;
3153 -> 3150;
3154 -> 0;
3154 -> 3150;
3155 -> 3151;
3155 -> 3150;
3156 -> 3152;
3156 -> 3150;
3157 -> 3150;
3158 -> 3154;
3158 -> 3157;
3159 -> 3155;
3159 -> 3157;
3160 -> 3156;
3160 -> 3157;
3161 -> 3153;
3161 -> 3157;
3162 -> 3158;
3162 -> 3161;
3162 -> 3157;
3163 -> 3159;
3163 -> 3161;
3163 -> 3157;
3164 -> 3160;
3164 -> 3161;
3164 -> 3157;
3165 -> 3151;
3165 -> 3152;
3165 -> 3078;
3166 -> 0;
3166 -> 3165;
3167 -> 3165;
3168 -> 3165;
3169 -> 3166;
3169 -> 3168;
3170 -> 3167;
3170 -> 3168;
3171 -> 3167;
3171 -> 3168;
3172 -> 3167;
3172 -> 3168;
3173 -> 3169;
3173 -> 3172;
3173 -> 3168;
3174 -> 3170;
3174 -> 3172;
3174 -> 3168;
3175 -> 3171;
3175 -> 3172;
3175 -> 3168;
3176 -> 3078;
3177 -> 3165;
3177 -> 3176;
3177 -> 3078;
3178 -> 3078;
3179 -> 3165;
3179 -> 3178;
3179 -> 3078;
3180 -> 3153;
3180 -> 3167;
3180 -> 3162;
3180 -> 3163;
3180 -> 3164;
3180 -> 3173;
3180 -> 3174;
3180 -> 3175;
3180 -> 3069;
3181 -> 3180;
3182 -> 3181;
3183 -> 3071;
3183 -> 3064;
3183 -> 3127;
3183 -> 3180;
3183 -> 3181;
3184 -> 3072;
3184 -> 3183;
3184 -> 3061;
3184 -> 3181;
3185 -> 3065;
3185 -> 3182;
3185 -> 3038;
3186 -> 2578;
3186 -> 3185;
3186 -> 3027;
3186 -> 2545;
3187 -> 2709;
3187 -> 2921;
3187 -> 2545;
3188 -> 2583;
3188 -> 2700;
3188 -> 2545;
3189 -> 2578;
3189 -> 3186;
3189 -> 2545;
3190 -> 2392;
3191 -> 880;
3192 -> 881;
3192 -> 880;
3193 -> 2389;
3193 -> 880;
3194 -> 880;
3195 -> 3192;
3195 -> 3194;
3196 -> 3193;
3196 -> 3194;
3197 -> 3196;
3197 -> 3194;
3198 -> 3197;
3198 -> 2389;
3198 -> 2895;
3199 -> 3197;
3200 -> 3198;
3200 -> 3199;
3201 -> 3195;
3201 -> 3199;
3202 -> 3200;
3202 -> 0;
3202 -> 3199;
3203 -> 3197;
3203 -> 3202;
3204 -> 3203;
3204 -> 3195;
3204 -> 2389;
3204 -> 2895;
3204 -> 3202;
3205 -> 3202;
3206 -> 3204;
3206 -> 3205;
3207 -> 3204;
3207 -> 3202;
3208 -> 3195;
3208 -> 3204;
3209 -> 3204;
3210 -> 3204;
3211 -> 880;
3212 -> 881;
3212 -> 880;
3213 -> 630;
3213 -> 1;
3214 -> 0;
3214 -> 1;
3215 -> 1;
3216 -> 1;
3217 -> 3213;
3217 -> 3216;
3218 -> 3215;
3218 -> 3216;
3219 -> 3215;
3219 -> 3216;
3220 -> 3215;
3220 -> 3216;
3221 -> 3215;
3221 -> 3216;
3222 -> 3214;
3222 -> 3216;
3223 -> 3215;
3223 -> 3216;
3224 -> 3215;
3224 -> 3216;
3225 -> 3215;
3225 -> 3216;
3226 -> 3215;
3226 -> 3216;
3227 -> 3215;
3227 -> 3216;
3228 -> 3215;
3228 -> 3216;
3229 -> 10;
3229 -> 3216;
3230 -> 3217;
3230 -> 3216;
3231 -> 3218;
3231 -> 3216;
3232 -> 3219;
3232 -> 3216;
3233 -> 3220;
3233 -> 3216;
3234 -> 3216;
3235 -> 3233;
3235 -> 3234;
3236 -> 3229;
3236 -> 3234;
3237 -> 3234;
3238 -> 3235;
3238 -> 3237;
3238 -> 3234;
3239 -> 3238;
3240 -> 3221;
3240 -> 3216;
3241 -> 3222;
3241 -> 3216;
3242 -> 3216;
3243 -> 3241;
3243 -> 3242;
3244 -> 3229;
3244 -> 3242;
3245 -> 3242;
3246 -> 3243;
3246 -> 3245;
3246 -> 3242;
3247 -> 3243;
3247 -> 3246;
3248 -> 3223;
3248 -> 3216;
3249 -> 3224;
3249 -> 3216;
3250 -> 3225;
3250 -> 3216;
3251 -> 3226;
3251 -> 3216;
3252 -> 3227;
3252 -> 3216;
3253 -> 3228;
3253 -> 3216;
3254 -> 3216;
3255 -> 3230;
3255 -> 3254;
3256 -> 3231;
3256 -> 3254;
3257 -> 3232;
3257 -> 3254;
3258 -> 3239;
3258 -> 3254;
3259 -> 3240;
3259 -> 3254;
3260 -> 3247;
3260 -> 3254;
3261 -> 3248;
3261 -> 3254;
3262 -> 3249;
3262 -> 3254;
3263 -> 3250;
3263 -> 3254;
3264 -> 3251;
3264 -> 3254;
3265 -> 3252;
3265 -> 3254;
3266 -> 3253;
3266 -> 3254;
3267 -> 3229;
3267 -> 3254;
3268 -> 3255;
3268 -> 3254;
3269 -> 3254;
3270 -> 3262;
3270 -> 3269;
3270 -> 3254;
3271 -> 3254;
3272 -> 3258;
3272 -> 3271;
3272 -> 3254;
3273 -> 3254;
3274 -> 3255;
3274 -> 3254;
3275 -> 3257;
3275 -> 3254;
3276 -> 3256;
3276 -> 3254;
3277 -> 3261;
3277 -> 3254;
3278 -> 3262;
3278 -> 3254;
3279 -> 3263;
3279 -> 3254;
3280 -> 3254;
3281 -> 3280;
3281 -> 3264;
3281 -> 3254;
3282 -> 3259;
3282 -> 3254;
3283 -> 3260;
3283 -> 3254;
3284 -> 3265;
3284 -> 3254;
3285 -> 3266;
3285 -> 3254;
3286 -> 3254;
3287 -> 3274;
3287 -> 3286;
3288 -> 3275;
3288 -> 3286;
3289 -> 3276;
3289 -> 3286;
3290 -> 3277;
3290 -> 3286;
3291 -> 3278;
3291 -> 3286;
3292 -> 3279;
3292 -> 3286;
3293 -> 3281;
3293 -> 3286;
3294 -> 3282;
3294 -> 3286;
3295 -> 3283;
3295 -> 3286;
3296 -> 3284;
3296 -> 3286;
3297 -> 3285;
3297 -> 3286;
3298 -> 3267;
3298 -> 3286;
3299 -> 3287;
3299 -> 3286;
3300 -> 3298;
3300 -> 9;
3300 -> 3286;
3301 -> 3288;
3301 -> 3286;
3302 -> 3286;
3303 -> 3286;
3304 -> 3299;
3304 -> 3303;
3305 -> 3300;
3305 -> 3303;
3306 -> 3301;
3306 -> 3303;
3307 -> 3302;
3307 -> 3303;
3308 -> 3307;
3308 -> 3303;
3309 -> 3307;
3309 -> 3303;
3310 -> 3307;
3310 -> 3303;
3311 -> 3307;
3311 -> 3303;
3312 -> 3307;
3312 -> 3303;
3313 -> 3307;
3313 -> 3303;
3314 -> 3304;
3314 -> 3307;
3314 -> 3303;
3315 -> 3306;
3315 -> 3307;
3315 -> 3303;
3316 -> 3305;
3316 -> 3307;
3316 -> 3303;
3317 -> 3291;
3317 -> 3286;
3318 -> 3292;
3318 -> 3286;
3319 -> 3293;
3319 -> 3286;
3320 -> 3289;
3320 -> 3286;
3321 -> 3296;
3321 -> 3286;
3322 -> 3297;
3322 -> 3286;
3323 -> 3290;
3323 -> 3286;
3324 -> 3286;
3325 -> 3317;
3325 -> 3324;
3326 -> 3318;
3326 -> 3324;
3327 -> 3319;
3327 -> 3324;
3328 -> 3320;
3328 -> 3324;
3329 -> 3321;
3329 -> 3324;
3330 -> 3322;
3330 -> 3324;
3331 -> 3323;
3331 -> 3324;
3332 -> 3302;
3332 -> 3324;
3333 -> 0;
3334 -> 3333;
3335 -> 3334;
3336 -> 3332;
3336 -> 3315;
3336 -> 3324;
3337 -> 3324;
3338 -> 3336;
3338 -> 3337;
3339 -> 3338;
3339 -> 3337;
3340 -> 3335;
3340 -> 3334;
3340 -> 3339;
3340 -> 3337;
3341 -> 3340;
3341 -> 3324;
3342 -> 3328;
3342 -> 3324;
3343 -> 3329;
3343 -> 3324;
3344 -> 3324;
3345 -> 3341;
3345 -> 3344;
3346 -> 3342;
3346 -> 3344;
3347 -> 3343;
3347 -> 3344;
3348 -> 3332;
3348 -> 3344;
3350 -> 3348;
3350 -> 3314;
3350 -> 3344;
3351 -> 3346;
3351 -> 3344;
3352 -> 3347;
3352 -> 3344;
3353 -> 3344;
3354 -> 3350;
3354 -> 3351;
3354 -> 3352;
3354 -> 3353;
3354 -> 3345;
3354 -> 3204;
3354 -> 3340;
3354 -> 3344;
3355 -> 3354;
3355 -> 3353;
3356 -> 3354;
3356 -> 3353;
3357 -> 3354;
3357 -> 3353;
3358 -> 3354;
3358 -> 3353;
3359 -> 3354;
3359 -> 3353;
3360 -> 3354;
3360 -> 3353;
3361 -> 3355;
3361 -> 3353;
3362 -> 3353;
3363 -> 3361;
3363 -> 3362;
3364 -> 3362;
3365 -> 3363;
3365 -> 3362;
3366 -> 3362;
3367 -> 3365;
3367 -> 3366;
3368 -> 3366;
3369 -> 3367;
3369 -> 3354;
3369 -> 3366;
3370 -> 3366;
3371 -> 3369;
3371 -> 3370;
3372 -> 3366;
3373 -> 3371;
3373 -> 3372;
3373 -> 3366;
3374 -> 3367;
3374 -> 3371;
3374 -> 3366;
3375 -> 3366;
3376 -> 3374;
3376 -> 3375;
3377 -> 3375;
3378 -> 3376;
3378 -> 3377;
3379 -> 3378;
3379 -> 3375;
3380 -> 3368;
3380 -> 3366;
3381 -> 3380;
3381 -> 3362;
3382 -> 3362;
3383 -> 3381;
3383 -> 3382;
3383 -> 3362;
3384 -> 3364;
3384 -> 3362;
3385 -> 3384;
3385 -> 3353;
3386 -> 0;
3386 -> 3353;
3387 -> 3385;
3387 -> 3353;
3388 -> 3353;
3389 -> 3355;
3389 -> 3388;
3389 -> 3353;
3390 -> 3385;
3390 -> 3353;
3391 -> 3388;
3391 -> 3390;
3391 -> 3389;
3391 -> 3364;
3391 -> 3379;
3391 -> 3353;
3392 -> 3391;
3393 -> 3386;
3393 -> 3391;
3394 -> 3357;
3394 -> 3391;
3395 -> 3358;
3395 -> 3391;
3396 -> 3391;
3397 -> 3392;
3397 -> 3396;
3398 -> 3393;
3398 -> 3396;
3399 -> 3394;
3399 -> 3396;
3400 -> 3395;
3400 -> 3396;
3401 -> 3397;
3401 -> 3379;
3401 -> 3364;
3401 -> 3388;
3401 -> 3389;
3401 -> 3391;
3401 -> 3396;
3402 -> 3401;
3403 -> 3401;
3404 -> 3403;
3404 -> 3379;
3404 -> 3391;
3404 -> 3388;
3404 -> 3389;
3404 -> 3364;
3404 -> 3401;
3405 -> 3403;
3405 -> 3404;
3405 -> 0;
3405 -> 3401;
3406 -> 3405;
3406 -> 3401;
3407 -> 3404;
3407 -> 3406;
3408 -> 3407;
3408 -> 3406;
3409 -> 3401;
3410 -> 3408;
3410 -> 3409;
3410 -> 3407;
3410 -> 3401;
3411 -> 3398;
3411 -> 3410;
3411 -> 3386;
3411 -> 0;
3411 -> 3401;
3412 -> 3404;
3412 -> 3401;
3413 -> 3401;
3414 -> 3412;
3414 -> 3413;
3415 -> 3414;
3415 -> 3410;
3415 -> 0;
3415 -> 3413;
3416 -> 3415;
3416 -> 3413;
3417 -> 3416;
3418 -> 3416;
3419 -> 3405;
3419 -> 3416;
3420 -> 3419;
3421 -> 3408;
3421 -> 3420;
3421 -> 3417;
3421 -> 3419;
3422 -> 3398;
3422 -> 3421;
3422 -> 3411;
3422 -> 3419;
3423 -> 3408;
3423 -> 3419;
3424 -> 0;
3424 -> 3419;
3425 -> 3417;
3425 -> 3419;
3426 -> 3419;
3427 -> 3423;
3427 -> 3424;
3427 -> 3425;
3427 -> 3426;
3427 -> 3421;
3427 -> 3417;
3427 -> 3419;
3428 -> 3427;
3428 -> 3416;
3429 -> 3399;
3429 -> 3427;
3429 -> 3428;
3429 -> 3416;
3430 -> 3416;
3431 -> 3429;
3432 -> 3398;
3432 -> 3429;
3432 -> 3422;
3433 -> 3429;
3434 -> 3429;
3435 -> 3396;
3436 -> 3355;
3436 -> 3353;
3437 -> 3356;
3437 -> 3353;
3438 -> 3358;
3438 -> 3353;
3439 -> 3359;
3439 -> 3353;
3440 -> 3360;
3440 -> 3353;
3441 -> 3353;
3442 -> 3436;
3442 -> 3441;
3443 -> 3437;
3443 -> 3441;
3444 -> 3438;
3444 -> 3441;
3445 -> 3439;
3445 -> 3441;
3446 -> 3440;
3446 -> 3441;
3447 -> 3441;
3448 -> 3446;
3448 -> 3447;
3448 -> 3441;
3449 -> 0;
3449 -> 3448;
3450 -> 3441;
3451 -> 3441;
3452 -> 3441;
3453 -> 3449;
3453 -> 0;
3453 -> 3441;
3454 -> 3453;
3454 -> 3441;
3455 -> 3442;
3455 -> 3429;
3455 -> 3441;
3456 -> 3441;
3457 -> 3455;
3457 -> 3456;
3458 -> 3456;
3459 -> 3458;
3460 -> 3459;
3461 -> 3441;
3462 -> 3441;
3463 -> 3450;
3463 -> 3441;
3464 -> 3441;
3465 -> 3454;
3465 -> 3441;
3466 -> 3443;
3466 -> 3441;
3467 -> 3449;
3467 -> 3441;
3468 -> 3457;
3468 -> 3441;
3469 -> 3445;
3469 -> 3441;
3470 -> 3463;
3470 -> 3464;
3470 -> 3465;
3470 -> 3466;
3470 -> 3467;
3470 -> 3468;
3470 -> 3469;
3470 -> 3442;
3470 -> 3450;
3470 -> 3457;
3470 -> 3449;
3470 -> 0;
3470 -> 3441;
3471 -> 3470;
3471 -> 3464;
3472 -> 3470;
3472 -> 3464;
3473 -> 3470;
3473 -> 3464;
3474 -> 3470;
3474 -> 3464;
3475 -> 3470;
3475 -> 3464;
3476 -> 3470;
3476 -> 3464;
3477 -> 3470;
3477 -> 3464;
3478 -> 3470;
3478 -> 3464;
3479 -> 3470;
3479 -> 3464;
3480 -> 3479;
3480 -> 3470;
3480 -> 3464;
3481 -> 3471;
3481 -> 3464;
3482 -> 3477;
3482 -> 3464;
3483 -> 3464;
3484 -> 3481;
3484 -> 3483;
3485 -> 3482;
3485 -> 3483;
3486 -> 3479;
3486 -> 3483;
3487 -> 3484;
3487 -> 3483;
3488 -> 3483;
3489 -> 3487;
3489 -> 3488;
3490 -> 3486;
3490 -> 3488;
3491 -> 3488;
3492 -> 3490;
3492 -> 3491;
3493 -> 3491;
3494 -> 3493;
3495 -> 3492;
3495 -> 3494;
3496 -> 3495;
3496 -> 3493;
3497 -> 3492;
3497 -> 3488;
3498 -> 3497;
3498 -> 3488;
3499 -> 3497;
3499 -> 3492;
3499 -> 3498;
3500 -> 3499;
3500 -> 3483;
3501 -> 3483;
3502 -> 3500;
3502 -> 3501;
3502 -> 3483;
3503 -> 3500;
3503 -> 3502;
3504 -> 3503;
3504 -> 3464;
3505 -> 3464;
3506 -> 3504;
3506 -> 3505;
3506 -> 3464;
3507 -> 3471;
3507 -> 3464;
3508 -> 3504;
3508 -> 3464;
3509 -> 3464;
3510 -> 3507;
3510 -> 3508;
3510 -> 3509;
3510 -> 3479;
3510 -> 3492;
3510 -> 3464;
3511 -> 3510;
3511 -> 3509;
3512 -> 3509;
3513 -> 3511;
3513 -> 3512;
3514 -> 3512;
3515 -> 3513;
3515 -> 3514;
3516 -> 3515;
3516 -> 3512;
3517 -> 3513;
3517 -> 3509;
3518 -> 3509;
3519 -> 3517;
3519 -> 3518;
3520 -> 3510;
3520 -> 3509;
3521 -> 3509;
3522 -> 3520;
3522 -> 3521;
3523 -> 3521;
3524 -> 3522;
3524 -> 3523;
3525 -> 3524;
3525 -> 3519;
3525 -> 3523;
3526 -> 3524;
3526 -> 3519;
3526 -> 3523;
3527 -> 3526;
3527 -> 3521;
3528 -> 3522;
3528 -> 3519;
3528 -> 3521;
3529 -> 3528;
3529 -> 3509;
3530 -> 3510;
3530 -> 3509;
3531 -> 3509;
3532 -> 3510;
3532 -> 3531;
3532 -> 3529;
3532 -> 3464;
3533 -> 3464;
3534 -> 3475;
3534 -> 3533;
3534 -> 3464;
3535 -> 3534;
3536 -> 3464;
3537 -> 3479;
3537 -> 3532;
3537 -> 3464;
3538 -> 3479;
3538 -> 3532;
3538 -> 3537;
3539 -> 3538;
3539 -> 3537;
3540 -> 3479;
3540 -> 3532;
3540 -> 3539;
3541 -> 3537;
3542 -> 3541;
3543 -> 3542;
3543 -> 3541;
3544 -> 3541;
3544 -> 3532;
3544 -> 3540;
3545 -> 3544;
3545 -> 3537;
3546 -> 3471;
3546 -> 3537;
3547 -> 3540;
3547 -> 3537;
3548 -> 3532;
3548 -> 3537;
3549 -> 3535;
3549 -> 3537;
3550 -> 3537;
3551 -> 3537;
3552 -> 3545;
3552 -> 3551;
3553 -> 3546;
3553 -> 3551;
3554 -> 3547;
3554 -> 3551;
3555 -> 3548;
3555 -> 3551;
3556 -> 3549;
3556 -> 3551;
3557 -> 3550;
3557 -> 3551;
3558 -> 3552;
3558 -> 3551;
3559 -> 3553;
3559 -> 3551;
3560 -> 3554;
3560 -> 3551;
3561 -> 3555;
3561 -> 3551;
3562 -> 3556;
3562 -> 3551;
3563 -> 0;
3563 -> 3551;
3564 -> 3551;
3565 -> 3558;
3565 -> 3564;
3566 -> 3559;
3566 -> 3564;
3567 -> 3560;
3567 -> 3564;
3568 -> 3561;
3568 -> 3564;
3569 -> 3562;
3569 -> 3564;
3570 -> 3563;
3570 -> 3564;
3571 -> 3557;
3571 -> 3564;
3572 -> 3564;
3573 -> 3565;
3573 -> 3544;
3573 -> 3572;
3573 -> 3564;
3574 -> 3566;
3574 -> 3564;
3575 -> 3567;
3575 -> 3564;
3576 -> 3568;
3576 -> 3564;
3577 -> 3569;
3577 -> 3564;
3578 -> 3564;
3579 -> 3573;
3579 -> 3578;
3580 -> 3574;
3580 -> 3578;
3581 -> 3575;
3581 -> 3578;
3582 -> 3576;
3582 -> 3578;
3583 -> 3577;
3583 -> 3578;
3584 -> 3571;
3584 -> 3578;
3585 -> 3579;
3585 -> 3573;
3585 -> 3578;
3586 -> 3579;
3586 -> 3578;
3587 -> 3582;
3587 -> 3578;
3588 -> 3583;
3588 -> 3578;
3589 -> 3581;
3589 -> 3578;
3590 -> 3580;
3590 -> 3578;
3591 -> 3578;
3592 -> 3591;
3593 -> 3578;
3594 -> 3593;
3594 -> 3585;
3594 -> 3586;
3594 -> 3587;
3594 -> 3588;
3594 -> 3589;
3594 -> 3590;
3594 -> 3591;
3594 -> 3573;
3594 -> 3535;
3594 -> 3592;
3594 -> 3578;
3595 -> 3594;
3595 -> 3593;
3596 -> 3593;
3597 -> 3594;
3597 -> 3596;
3597 -> 3578;
3598 -> 3578;
3599 -> 3598;
3599 -> 3593;
3599 -> 3578;
3600 -> 0;
3600 -> 3578;
3601 -> 3600;
3601 -> 3597;
3601 -> 3599;
3601 -> 3598;
3601 -> 3578;
3602 -> 3601;
3602 -> 3593;
3602 -> 3578;
3603 -> 3578;
3604 -> 3603;
3604 -> 3593;
3604 -> 3578;
3605 -> 3593;
3605 -> 3578;
3606 -> 3593;
3606 -> 3578;
3607 -> 3593;
3607 -> 3578;
3608 -> 3593;
3608 -> 3578;
3609 -> 3593;
3609 -> 3578;
3610 -> 3579;
3610 -> 3601;
3610 -> 3578;
3611 -> 3610;
3611 -> 0;
3611 -> 3578;
3612 -> 3611;
3612 -> 3578;
3613 -> 3612;
3613 -> 3593;
3613 -> 3578;
3614 -> 3593;
3614 -> 3601;
3614 -> 3578;
3615 -> 3579;
3615 -> 3578;
3616 -> 3593;
3616 -> 3578;
3617 -> 3614;
3617 -> 3615;
3617 -> 3616;
3617 -> 3601;
3617 -> 3602;
3617 -> 3604;
3617 -> 3605;
3617 -> 3606;
3617 -> 3613;
3617 -> 3607;
3617 -> 3608;
3617 -> 3609;
3617 -> 3603;
3617 -> 3578;
3618 -> 3579;
3618 -> 3617;
3618 -> 3578;
3619 -> 3571;
3619 -> 3564;
3620 -> 3571;
3620 -> 3564;
3621 -> 3571;
3621 -> 3564;
3622 -> 3571;
3622 -> 3564;
3623 -> 3571;
3623 -> 3564;
3624 -> 3571;
3624 -> 3564;
3625 -> 3571;
3625 -> 3564;
3626 -> 3571;
3626 -> 3564;
3627 -> 3571;
3627 -> 3564;
3628 -> 3571;
3628 -> 3564;
3629 -> 3565;
3629 -> 3564;
3630 -> 3565;
3630 -> 3571;
3630 -> 3564;
3631 -> 3570;
3631 -> 3564;
3632 -> 3631;
3632 -> 3571;
3632 -> 3564;
3633 -> 3564;
3634 -> 3566;
3634 -> 3617;
3634 -> 3633;
3634 -> 3564;
3635 -> 3634;
3635 -> 3564;
3636 -> 3565;
3636 -> 3617;
3636 -> 3635;
3637 -> 3565;
3637 -> 3617;
3637 -> 3636;
3637 -> 3571;
3637 -> 3564;
3638 -> 3571;
3638 -> 3617;
3638 -> 3564;
3639 -> 3565;
3639 -> 3564;
3640 -> 3571;
3640 -> 3564;
3641 -> 3638;
3641 -> 3639;
3641 -> 3640;
3641 -> 3617;
3641 -> 3619;
3641 -> 3630;
3641 -> 3620;
3641 -> 3621;
3641 -> 3622;
3641 -> 3623;
3641 -> 3624;
3641 -> 3625;
3641 -> 3626;
3641 -> 3627;
3641 -> 3628;
3641 -> 3637;
3641 -> 3632;
3641 -> 3636;
3641 -> 3631;
3641 -> 3564;
3642 -> 3464;
3643 -> 3472;
3643 -> 3642;
3643 -> 3464;
3644 -> 3473;
3644 -> 3550;
3644 -> 3464;
3645 -> 3464;
3646 -> 3474;
3646 -> 3645;
3646 -> 3464;
3647 -> 3474;
3647 -> 3550;
3647 -> 3646;
3648 -> 3464;
3649 -> 3476;
3649 -> 3648;
3649 -> 3464;
3650 -> 3476;
3650 -> 3641;
3650 -> 3649;
3651 -> 3550;
3651 -> 3650;
3651 -> 3641;
3651 -> 3644;
3651 -> 3647;
3651 -> 3649;
3652 -> 3550;
3652 -> 3476;
3652 -> 3649;
3653 -> 3550;
3653 -> 3464;
3654 -> 3470;
3654 -> 3653;
3654 -> 3651;
3654 -> 3652;
3654 -> 3441;
3655 -> 3470;
3655 -> 3464;
3656 -> 3470;
3656 -> 3464;
3657 -> 3470;
3657 -> 3464;
3658 -> 3470;
3658 -> 3464;
3659 -> 3470;
3659 -> 3464;
3660 -> 3470;
3660 -> 3464;
3661 -> 3470;
3661 -> 3464;
3662 -> 3470;
3662 -> 3464;
3663 -> 3464;
3664 -> 3657;
3664 -> 3464;
3665 -> 3659;
3665 -> 3464;
3666 -> 0;
3666 -> 3464;
3667 -> 3464;
3668 -> 3661;
3668 -> 3464;
3669 -> 3464;
3670 -> 3666;
3670 -> 3669;
3671 -> 3667;
3671 -> 3669;
3672 -> 3668;
3672 -> 3669;
3673 -> 3662;
3673 -> 3669;
3674 -> 3669;
3675 -> 3670;
3675 -> 3669;
3676 -> 3671;
3676 -> 3669;
3677 -> 3674;
3677 -> 3669;
3678 -> 3669;
3679 -> 3675;
3679 -> 3678;
3680 -> 3676;
3680 -> 3678;
3681 -> 3677;
3681 -> 3678;
3682 -> 3678;
3683 -> 3679;
3683 -> 0;
3683 -> 3678;
3684 -> 3683;
3684 -> 3680;
3684 -> 3678;
3685 -> 3684;
3686 -> 3673;
3686 -> 3685;
3687 -> 3685;
3688 -> 3686;
3688 -> 3654;
3688 -> 3687;
3689 -> 3687;
3690 -> 3684;
3691 -> 3673;
3691 -> 3690;
3692 -> 3691;
3692 -> 3654;
3692 -> 3690;
3693 -> 3672;
3693 -> 3692;
3694 -> 3693;
3694 -> 3692;
3695 -> 3693;
3695 -> 3692;
3696 -> 3684;
3697 -> 3688;
3697 -> 3654;
3697 -> 3693;
3698 -> 3679;
3698 -> 0;
3698 -> 3678;
3699 -> 3682;
3699 -> 3698;
3700 -> 3698;
3701 -> 3698;
3702 -> 3673;
3702 -> 3701;
3703 -> 3698;
3704 -> 3673;
3704 -> 3703;
3705 -> 3704;
3705 -> 3693;
3705 -> 3703;
3706 -> 3705;
3706 -> 3698;
3707 -> 3698;
3708 -> 3673;
3708 -> 3707;
3709 -> 3698;
3710 -> 3698;
3711 -> 3709;
3711 -> 3710;
3712 -> 3709;
3712 -> 3710;
3713 -> 3709;
3713 -> 3710;
3714 -> 3673;
3714 -> 3710;
3715 -> 3710;
3716 -> 3710;
3717 -> 3710;
3718 -> 3711;
3718 -> 3717;
3718 -> 3710;
3719 -> 3710;
3720 -> 3719;
3721 -> 3720;
3722 -> 3714;
3722 -> 3721;
3723 -> 3722;
3723 -> 3693;
3723 -> 3721;
3724 -> 3722;
3724 -> 3693;
3724 -> 3721;
3725 -> 3724;
3725 -> 3720;
3726 -> 3716;
3726 -> 3710;
3727 -> 3711;
3727 -> 3710;
3728 -> 3727;
3729 -> 3727;
3730 -> 3710;
3731 -> 3713;
3731 -> 3730;
3731 -> 3710;
3732 -> 3711;
3732 -> 3710;
3733 -> 3712;
3733 -> 3710;
3734 -> 3710;
3735 -> 3732;
3735 -> 3734;
3736 -> 3733;
3736 -> 3734;
3737 -> 3734;
3738 -> 3735;
3738 -> 3737;
3738 -> 3734;
3739 -> 3714;
3739 -> 3693;
3739 -> 3734;
3740 -> 3698;
3741 -> 3673;
3741 -> 3693;
3741 -> 3740;
3741 -> 3698;
3742 -> 3679;
3742 -> 0;
3742 -> 3678;
3743 -> 3681;
3743 -> 3678;
3744 -> 3682;
3744 -> 3678;
3745 -> 3678;
3746 -> 3693;
3746 -> 3745;
3747 -> 3693;
3747 -> 3745;
3748 -> 3693;
3748 -> 3745;
3749 -> 3693;
3749 -> 3745;
3750 -> 3693;
3750 -> 3745;
3751 -> 3745;
3752 -> 3693;
3752 -> 0;
3753 -> 3745;
3754 -> 3745;
3755 -> 2286;
3755 -> 3745;
3756 -> 3745;
3757 -> 3754;
3757 -> 3693;
3758 -> 3693;
3759 -> 3693;
3760 -> 3693;
3761 -> 3746;
3761 -> 3693;
3762 -> 3747;
3762 -> 3693;
3763 -> 3748;
3763 -> 3693;
3764 -> 3749;
3764 -> 3693;
3765 -> 3750;
3765 -> 3693;
3766 -> 3757;
3766 -> 3693;
3767 -> 3693;
3768 -> 3693;
3769 -> 3693;
3770 -> 3769;
3770 -> 3693;
3771 -> 3759;
3771 -> 3761;
3771 -> 3693;
3772 -> 3693;
3773 -> 3693;
3774 -> 3764;
3774 -> 3773;
3774 -> 3693;
3775 -> 3693;
3775 -> 0;
3776 -> 3693;
3776 -> 0;
3777 -> 3693;
3777 -> 0;
3778 -> 3693;
3778 -> 0;
3778 -> 3777;
3779 -> 3693;
3780 -> 3763;
3780 -> 3779;
3781 -> 3767;
3781 -> 3745;
3782 -> 3669;
3783 -> 3663;
3783 -> 3464;
3784 -> 3665;
3784 -> 3693;
3784 -> 3783;
3784 -> 3668;
3784 -> 3662;
3784 -> 3654;
3784 -> 3464;
3785 -> 3784;
3785 -> 3667;
3786 -> 3784;
3786 -> 3667;
3787 -> 3784;
3787 -> 3667;
3788 -> 3784;
3788 -> 3667;
3789 -> 3784;
3789 -> 3667;
3790 -> 3667;
3791 -> 3784;
3791 -> 0;
3792 -> 3667;
3793 -> 3667;
3794 -> 2286;
3794 -> 3667;
3795 -> 3667;
3796 -> 3793;
3796 -> 3784;
3797 -> 3784;
3798 -> 3784;
3799 -> 3784;
3800 -> 3785;
3800 -> 3784;
3801 -> 3786;
3801 -> 3784;
3802 -> 3787;
3802 -> 3784;
3803 -> 3788;
3803 -> 3784;
3804 -> 3789;
3804 -> 3784;
3805 -> 3796;
3805 -> 3784;
3806 -> 3784;
3807 -> 3784;
3808 -> 3784;
3809 -> 3808;
3809 -> 3784;
3810 -> 3798;
3810 -> 3800;
3810 -> 3784;
3811 -> 3784;
3812 -> 3784;
3813 -> 3803;
3813 -> 3812;
3813 -> 3784;
3814 -> 3784;
3814 -> 0;
3815 -> 3784;
3815 -> 0;
3816 -> 3784;
3816 -> 0;
3817 -> 3784;
3817 -> 0;
3817 -> 3816;
3818 -> 3784;
3819 -> 3802;
3819 -> 3818;
3820 -> 3806;
3820 -> 3667;
3821 -> 3663;
3821 -> 3464;
3822 -> 3655;
3822 -> 3464;
3823 -> 3657;
3823 -> 3464;
3824 -> 3656;
3824 -> 3823;
3825 -> 3822;
3825 -> 3784;
3825 -> 3823;
3826 -> 3659;
3826 -> 3823;
3827 -> 3823;
3828 -> 3825;
3828 -> 3827;
3829 -> 3825;
3829 -> 3827;
3830 -> 3825;
3830 -> 3827;
3831 -> 3825;
3831 -> 3827;
3832 -> 3827;
3833 -> 3829;
3833 -> 3825;
3833 -> 3832;
3833 -> 3827;
3834 -> 0;
3834 -> 3827;
3835 -> 3833;
3835 -> 3827;
3836 -> 3824;
3836 -> 3833;
3836 -> 3823;
3837 -> 3823;
3838 -> 3662;
3838 -> 3823;
3839 -> 3822;
3839 -> 3823;
3840 -> 3656;
3840 -> 3823;
3841 -> 3658;
3841 -> 3823;
3842 -> 3784;
3842 -> 3823;
3843 -> 3837;
3843 -> 3823;
3844 -> 3660;
3844 -> 3823;
3845 -> 3661;
3845 -> 3823;
3846 -> 3823;
3847 -> 3838;
3847 -> 3846;
3848 -> 3839;
3848 -> 3846;
3849 -> 3840;
3849 -> 3846;
3850 -> 3841;
3850 -> 3846;
3851 -> 3842;
3851 -> 3846;
3852 -> 3843;
3852 -> 3846;
3853 -> 3844;
3853 -> 3846;
3854 -> 3845;
3854 -> 3846;
3855 -> 3846;
3856 -> 3847;
3856 -> 3855;
3856 -> 3846;
3857 -> 3846;
3858 -> 3852;
3858 -> 3857;
3858 -> 3846;
3859 -> 3846;
3860 -> 3847;
3860 -> 3859;
3861 -> 3860;
3861 -> 3833;
3861 -> 3859;
3862 -> 3861;
3862 -> 3846;
3863 -> 3846;
3864 -> 3846;
3865 -> 3847;
3865 -> 3853;
3866 -> 3848;
3866 -> 3853;
3867 -> 3851;
3867 -> 3853;
3868 -> 3852;
3868 -> 3853;
3869 -> 3854;
3869 -> 3853;
3870 -> 3866;
3870 -> 3853;
3871 -> 3867;
3871 -> 3853;
3872 -> 3869;
3872 -> 3853;
3873 -> 3872;
3873 -> 3853;
3874 -> 3865;
3874 -> 3833;
3874 -> 3853;
3875 -> 3865;
3875 -> 3833;
3875 -> 3853;
3876 -> 3875;
3876 -> 3833;
3876 -> 3853;
3877 -> 3868;
3877 -> 3875;
3877 -> 3837;
3877 -> 3833;
3877 -> 3853;
3878 -> 3846;
3879 -> 3847;
3879 -> 3878;
3879 -> 3846;
3880 -> 3846;
3881 -> 3852;
3881 -> 3880;
3881 -> 3846;
3882 -> 3851;
3882 -> 3846;
3883 -> 3846;
3884 -> 3882;
3884 -> 3883;
3885 -> 3846;
3885 -> 3883;
3886 -> 3884;
3886 -> 3883;
3887 -> 3846;
3888 -> 3849;
3888 -> 3846;
3889 -> 3848;
3889 -> 3877;
3889 -> 3888;
3890 -> 3889;
3890 -> 3846;
3890 -> 3888;
3891 -> 3846;
3892 -> 3847;
3892 -> 3891;
3893 -> 3892;
3893 -> 3877;
3893 -> 3891;
3894 -> 3892;
3894 -> 3877;
3894 -> 3891;
3895 -> 3894;
3895 -> 3846;
3896 -> 3877;
3896 -> 3846;
3896 -> 3847;
3896 -> 3849;
3896 -> 3850;
3896 -> 3852;
3896 -> 3851;
3896 -> 3848;
3896 -> 3853;
3896 -> 3890;
3896 -> 3854;
3896 -> 3654;
3896 -> 3889;
3897 -> 3896;
3897 -> 3877;
3898 -> 3896;
3898 -> 3877;
3899 -> 3896;
3899 -> 3877;
3900 -> 3897;
3900 -> 3877;
3901 -> 3877;
3902 -> 3899;
3902 -> 3901;
3903 -> 3900;
3903 -> 3901;
3904 -> 3901;
3905 -> 3902;
3905 -> 3904;
3905 -> 3901;
3906 -> 3877;
3907 -> 3897;
3907 -> 3896;
3908 -> 3846;
3909 -> 3896;
3909 -> 3908;
3909 -> 3846;
3910 -> 3846;
3911 -> 3846;
3912 -> 3848;
3912 -> 3911;
3912 -> 3846;
3913 -> 3852;
3913 -> 3912;
3914 -> 3912;
3915 -> 3913;
3915 -> 3914;
3916 -> 3848;
3916 -> 3914;
3917 -> 3916;
3917 -> 3896;
3917 -> 3914;
3918 -> 3917;
3918 -> 3912;
3919 -> 3918;
3919 -> 3912;
3920 -> 3852;
3920 -> 3912;
3921 -> 3912;
3922 -> 3919;
3922 -> 3921;
3923 -> 3920;
3923 -> 3921;
3924 -> 3846;
3924 -> 3921;
3925 -> 3922;
3925 -> 3921;
3926 -> 3912;
3927 -> 3852;
3927 -> 3912;
3928 -> 3912;
3929 -> 3927;
3929 -> 3928;
3930 -> 3848;
3930 -> 3928;
3931 -> 3928;
3932 -> 3929;
3932 -> 3928;
3933 -> 3928;
3934 -> 3932;
3934 -> 3933;
3935 -> 3930;
3935 -> 3933;
3936 -> 3933;
3937 -> 3935;
3937 -> 3936;
3938 -> 3936;
3939 -> 3938;
3939 -> 3937;
3939 -> 3936;
3940 -> 3936;
3941 -> 3937;
3941 -> 3940;
3942 -> 3941;
3942 -> 3896;
3942 -> 3939;
3942 -> 3940;
3943 -> 3942;
3943 -> 3936;
3944 -> 3943;
3944 -> 3933;
3945 -> 3933;
3946 -> 3935;
3946 -> 3945;
3947 -> 3946;
3947 -> 3942;
3947 -> 3945;
3948 -> 3947;
3948 -> 3933;
3949 -> 3948;
3950 -> 3944;
3950 -> 3949;
3950 -> 3948;
3951 -> 3950;
3952 -> 3928;
3953 -> 3931;
3953 -> 3928;
3954 -> 3930;
3954 -> 3947;
3954 -> 3928;
3955 -> 3953;
3955 -> 3954;
3955 -> 3931;
3955 -> 3947;
3955 -> 3928;
3956 -> 3931;
3956 -> 3928;
3957 -> 3930;
3957 -> 3955;
3957 -> 3928;
3958 -> 3931;
3958 -> 3928;
3959 -> 3930;
3959 -> 3957;
3959 -> 3928;
3960 -> 3931;
3960 -> 3928;
3961 -> 3930;
3961 -> 3959;
3961 -> 3928;
3962 -> 3931;
3962 -> 3928;
3963 -> 3930;
3963 -> 3961;
3963 -> 3928;
3964 -> 3931;
3964 -> 3928;
3965 -> 3930;
3965 -> 3963;
3965 -> 3928;
3966 -> 3931;
3966 -> 3928;
3967 -> 3930;
3967 -> 3965;
3967 -> 3928;
3968 -> 3931;
3968 -> 3928;
3969 -> 3930;
3969 -> 3967;
3969 -> 3928;
3970 -> 3931;
3970 -> 3969;
3970 -> 3928;
3971 -> 3970;
3971 -> 3912;
3972 -> 3971;
3972 -> 3912;
3973 -> 3852;
3973 -> 3912;
3974 -> 3912;
3975 -> 3972;
3975 -> 3974;
3976 -> 3973;
3976 -> 3974;
3977 -> 3846;
3977 -> 3974;
3978 -> 3975;
3978 -> 3974;
3979 -> 3912;
3980 -> 3912;
3981 -> 3847;
3981 -> 3980;
3982 -> 3981;
3982 -> 3969;
3982 -> 3980;
3983 -> 3982;
3983 -> 3912;
3984 -> 3846;
3984 -> 3912;
3985 -> 3848;
3985 -> 3912;
3986 -> 3852;
3986 -> 3912;
3987 -> 3912;
3988 -> 3983;
3988 -> 3987;
3989 -> 0;
3989 -> 3987;
3990 -> 3983;
3990 -> 3989;
3990 -> 0;
3990 -> 3912;
3991 -> 3983;
3991 -> 3987;
3992 -> 3987;
3993 -> 3983;
3993 -> 3992;
3993 -> 3990;
3993 -> 3912;
3994 -> 3912;
3995 -> 3994;
3995 -> 3993;
3996 -> 3994;
3997 -> 3995;
3997 -> 3996;
3997 -> 3994;
3998 -> 3912;
3999 -> 3848;
3999 -> 3995;
3999 -> 3912;
4000 -> 3912;
4001 -> 3999;
4001 -> 4000;
4001 -> 3912;
4002 -> 3846;
4003 -> 3848;
4003 -> 4002;
4003 -> 3846;
4004 -> 3846;
4004 -> 3995;
4004 -> 3848;
4005 -> 3847;
4005 -> 3853;
4006 -> 3852;
4006 -> 3853;
4007 -> 3854;
4007 -> 3853;
4008 -> 3853;
4009 -> 4005;
4009 -> 4008;
4010 -> 4009;
4010 -> 3995;
4010 -> 4008;
4011 -> 4009;
4011 -> 3995;
4011 -> 4008;
4012 -> 4011;
4012 -> 3853;
4013 -> 3853;
4014 -> 3848;
4014 -> 4013;
4014 -> 3853;
4015 -> 3877;
4015 -> 4013;
4015 -> 3853;
4016 -> 3823;
4017 -> 3837;
4017 -> 3823;
4018 -> 4017;
4018 -> 3995;
4018 -> 3823;
4019 -> 3822;
4019 -> 4018;
4020 -> 3837;
4020 -> 4018;
4021 -> 4018;
4022 -> 4019;
4022 -> 4021;
4023 -> 4020;
4023 -> 4021;
4024 -> 3662;
4024 -> 4021;
4025 -> 4024;
4025 -> 4018;
4025 -> 4021;
4026 -> 4024;
4026 -> 4018;
4026 -> 4021;
4027 -> 4018;
4028 -> 3659;
4028 -> 3823;
4029 -> 3837;
4029 -> 3823;
4030 -> 3661;
4030 -> 3823;
4031 -> 4028;
4031 -> 4029;
4031 -> 4030;
4031 -> 3662;
4031 -> 4018;
4031 -> 3654;
4031 -> 3823;
4032 -> 3823;
4033 -> 3784;
4033 -> 4031;
4033 -> 3823;
4034 -> 3464;
4035 -> 3470;
4035 -> 4034;
4035 -> 4031;
4035 -> 3441;
4036 -> 3470;
4036 -> 3464;
4037 -> 3470;
4037 -> 3464;
4038 -> 3470;
4038 -> 3464;
4039 -> 3470;
4039 -> 3464;
4040 -> 3470;
4040 -> 3464;
4041 -> 3470;
4041 -> 3464;
4042 -> 3470;
4042 -> 3464;
4043 -> 3464;
4044 -> 4036;
4044 -> 3464;
4045 -> 4038;
4045 -> 3464;
4046 -> 4043;
4046 -> 3464;
4047 -> 4042;
4047 -> 4044;
4047 -> 4045;
4047 -> 4046;
4047 -> 4035;
4047 -> 4043;
4047 -> 3464;
4048 -> 4036;
4048 -> 4047;
4048 -> 3464;
4049 -> 3464;
4050 -> 4042;
4050 -> 4049;
4051 -> 4049;
4052 -> 4050;
4052 -> 4051;
4053 -> 4052;
4053 -> 4047;
4053 -> 4051;
4054 -> 4052;
4054 -> 4047;
4054 -> 4051;
4055 -> 4054;
4055 -> 4049;
4056 -> 4050;
4056 -> 4047;
4056 -> 4049;
4057 -> 4056;
4057 -> 3464;
4058 -> 3464;
4059 -> 4043;
4059 -> 3464;
4060 -> 3464;
4061 -> 4059;
4061 -> 4060;
4062 -> 4042;
4062 -> 4060;
4063 -> 4060;
4064 -> 4062;
4064 -> 4063;
4065 -> 4063;
4066 -> 4064;
4066 -> 4065;
4067 -> 4066;
4067 -> 4057;
4067 -> 4065;
4068 -> 4066;
4068 -> 4057;
4068 -> 4065;
4069 -> 4068;
4069 -> 4063;
4070 -> 4064;
4070 -> 4057;
4070 -> 4063;
4071 -> 4070;
4071 -> 4060;
4072 -> 4060;
4073 -> 4072;
4073 -> 4071;
4073 -> 4070;
4073 -> 4060;
4074 -> 4060;
4075 -> 4074;
4075 -> 3464;
4076 -> 4040;
4076 -> 3464;
4077 -> 4043;
4077 -> 3464;
4078 -> 4041;
4078 -> 3464;
4079 -> 4076;
4079 -> 4077;
4079 -> 4078;
4079 -> 4042;
4079 -> 4070;
4079 -> 4035;
4079 -> 3464;
4080 -> 3464;
4081 -> 4041;
4081 -> 4035;
4081 -> 4079;
4081 -> 3464;
4082 -> 3464;
4083 -> 4039;
4083 -> 3464;
4084 -> 3464;
4085 -> 4042;
4085 -> 3464;
4086 -> 4083;
4086 -> 3464;
4087 -> 4037;
4087 -> 3464;
4088 -> 4082;
4088 -> 3464;
4089 -> 4041;
4089 -> 3464;
4090 -> 3464;
4091 -> 3464;
4092 -> 4085;
4092 -> 4091;
4093 -> 4086;
4093 -> 4091;
4094 -> 4087;
4094 -> 4091;
4095 -> 4088;
4095 -> 4091;
4096 -> 4089;
4096 -> 4091;
4097 -> 4090;
4097 -> 4091;
4098 -> 4090;
4098 -> 4091;
4099 -> 4091;
4100 -> 4091;
4101 -> 4094;
4101 -> 4100;
4101 -> 4091;
4102 -> 4091;
4103 -> 4102;
4104 -> 4092;
4104 -> 4103;
4105 -> 4104;
4105 -> 4081;
4105 -> 4103;
4106 -> 4104;
4106 -> 4081;
4106 -> 4103;
4107 -> 4106;
4107 -> 4102;
4108 -> 4092;
4108 -> 4081;
4108 -> 4102;
4109 -> 4108;
4109 -> 4093;
4109 -> 4091;
4110 -> 4099;
4110 -> 4091;
4111 -> 4097;
4111 -> 4091;
4112 -> 4098;
4112 -> 4091;
4113 -> 4091;
4114 -> 4095;
4114 -> 4091;
4115 -> 4091;
4116 -> 4110;
4116 -> 4115;
4117 -> 4111;
4117 -> 4115;
4118 -> 4112;
4118 -> 4115;
4119 -> 4113;
4119 -> 4115;
4120 -> 4113;
4120 -> 4115;
4121 -> 4114;
4121 -> 4115;
4122 -> 4113;
4122 -> 4115;
4123 -> 4115;
4124 -> 4123;
4124 -> 4115;
4125 -> 4123;
4125 -> 4115;
4126 -> 4123;
4126 -> 4115;
4127 -> 4123;
4127 -> 4115;
4128 -> 4123;
4128 -> 4115;
4129 -> 4123;
4129 -> 4115;
4130 -> 4123;
4130 -> 4115;
4131 -> 4123;
4131 -> 4115;
4132 -> 4123;
4132 -> 4115;
4133 -> 4123;
4133 -> 4115;
4134 -> 4123;
4134 -> 4115;
4135 -> 4123;
4135 -> 4115;
4136 -> 4116;
4136 -> 4123;
4136 -> 4115;
4137 -> 4117;
4137 -> 4123;
4137 -> 4115;
4138 -> 4118;
4138 -> 4123;
4138 -> 4115;
4139 -> 4119;
4139 -> 4123;
4139 -> 4115;
4140 -> 4120;
4140 -> 4123;
4140 -> 4115;
4141 -> 4121;
4141 -> 4123;
4141 -> 4115;
4142 -> 4091;
4143 -> 4142;
4144 -> 4092;
4144 -> 4143;
4145 -> 4144;
4145 -> 4108;
4145 -> 4143;
4146 -> 4144;
4146 -> 4108;
4146 -> 4143;
4147 -> 4146;
4147 -> 4142;
4148 -> 4108;
4148 -> 4113;
4148 -> 4123;
4148 -> 4124;
4148 -> 4109;
4148 -> 4125;
4148 -> 4092;
4148 -> 4126;
4148 -> 4136;
4148 -> 4127;
4148 -> 4137;
4148 -> 4128;
4148 -> 4138;
4148 -> 4129;
4148 -> 4139;
4148 -> 4130;
4148 -> 4140;
4148 -> 4131;
4148 -> 4141;
4148 -> 4132;
4148 -> 4133;
4148 -> 4134;
4148 -> 4135;
4148 -> 4096;
4148 -> 4090;
4148 -> 4082;
4148 -> 4081;
4148 -> 4091;
4149 -> 4091;
4150 -> 4148;
4151 -> 4148;
4152 -> 4148;
4153 -> 4151;
4153 -> 4152;
4154 -> 4148;
4154 -> 4152;
4155 -> 4154;
4155 -> 4148;
4155 -> 4152;
4156 -> 4152;
4157 -> 4155;
4158 -> 4148;
4159 -> 4148;
4160 -> 4158;
4160 -> 4159;
4161 -> 4148;
4161 -> 4159;
4162 -> 4161;
4162 -> 4148;
4162 -> 4159;
4163 -> 4159;
4164 -> 4162;
4165 -> 4148;
4166 -> 4148;
4167 -> 4148;
4168 -> 4166;
4168 -> 4167;
4169 -> 4148;
4169 -> 4167;
4170 -> 4169;
4170 -> 4148;
4170 -> 4167;
4171 -> 4167;
4172 -> 4170;
4173 -> 4148;
4174 -> 4148;
4175 -> 4148;
4175 -> 4174;
4176 -> 4148;
4177 -> 4174;
4177 -> 4176;
4178 -> 4174;
4178 -> 4176;
4179 -> 4148;
4179 -> 4176;
4180 -> 4177;
4180 -> 4176;
4181 -> 4178;
4181 -> 4176;
4182 -> 4180;
4182 -> 4181;
4182 -> 4176;
4183 -> 4176;
4184 -> 4182;
4184 -> 4183;
4185 -> 4179;
4185 -> 4183;
4186 -> 4185;
4186 -> 4148;
4186 -> 4183;
4187 -> 4183;
4188 -> 4186;
4189 -> 4176;
4190 -> 4148;
4191 -> 4148;
4192 -> 4148;
4193 -> 4148;
4194 -> 4192;
4194 -> 4193;
4195 -> 4148;
4195 -> 4193;
4196 -> 4195;
4196 -> 4148;
4196 -> 4193;
4197 -> 4193;
4198 -> 4196;
4199 -> 4148;
4200 -> 4148;
4201 -> 4199;
4201 -> 4200;
4202 -> 4148;
4202 -> 4200;
4203 -> 4202;
4203 -> 4148;
4203 -> 4200;
4204 -> 4200;
4205 -> 4203;
4206 -> 4148;
4207 -> 4148;
4207 -> 4149;
4208 -> 4148;
4209 -> 4148;
4210 -> 4148;
4211 -> 4148;
4212 -> 4148;
4213 -> 4212;
4213 -> 4148;
4214 -> 4211;
4214 -> 4148;
4215 -> 4212;
4215 -> 4148;
4216 -> 0;
4216 -> 4148;
4217 -> 4148;
4218 -> 4148;
4219 -> 4148;
4220 -> 4219;
4220 -> 4216;
4220 -> 4148;
4221 -> 4220;
4221 -> 4148;
4222 -> 4148;
4223 -> 4148;
4224 -> 4218;
4224 -> 4223;
4224 -> 4148;
4225 -> 0;
4225 -> 4224;
4226 -> 4148;
4227 -> 4225;
4227 -> 0;
4227 -> 4148;
4228 -> 4221;
4228 -> 0;
4228 -> 4227;
4229 -> 4227;
4230 -> 4211;
4230 -> 4148;
4231 -> 4230;
4231 -> 4216;
4231 -> 4211;
4232 -> 4231;
4232 -> 4211;
4233 -> 4211;
4234 -> 4232;
4234 -> 0;
4234 -> 4227;
4235 -> 4211;
4236 -> 4211;
4237 -> 4211;
4238 -> 4211;
4239 -> 4211;
4240 -> 4238;
4240 -> 4239;
4241 -> 4148;
4241 -> 4239;
4242 -> 4241;
4242 -> 4211;
4242 -> 4239;
4243 -> 4239;
4244 -> 4242;
4245 -> 4211;
4246 -> 4211;
4247 -> 4211;
4248 -> 4246;
4248 -> 4247;
4249 -> 4148;
4249 -> 4247;
4250 -> 4249;
4250 -> 4211;
4250 -> 4247;
4251 -> 4247;
4252 -> 4250;
4253 -> 4091;
4254 -> 4113;
4254 -> 4211;
4254 -> 4253;
4254 -> 4091;
4255 -> 4099;
4255 -> 4091;
4256 -> 4091;
4257 -> 4097;
4257 -> 4256;
4257 -> 4091;
4258 -> 4257;
4259 -> 4258;
4260 -> 4259;
4261 -> 4211;
4262 -> 4211;
4263 -> 4211;
4264 -> 4040;
4264 -> 3464;
4265 -> 4082;
4265 -> 3464;
4266 -> 4041;
4266 -> 3464;
4267 -> 4264;
4267 -> 4265;
4267 -> 4266;
4267 -> 4042;
4267 -> 4211;
4267 -> 3464;
4268 -> 3464;
4269 -> 3470;
4269 -> 3464;
4270 -> 3470;
4270 -> 3464;
4271 -> 3470;
4271 -> 3464;
4272 -> 3470;
4272 -> 3464;
4273 -> 3464;
4274 -> 4272;
4274 -> 4267;
4274 -> 4273;
4274 -> 3464;
4275 -> 4269;
4275 -> 4273;
4275 -> 3464;
4276 -> 4274;
4276 -> 4275;
4276 -> 3464;
4277 -> 4269;
4277 -> 3464;
4278 -> 3464;
4279 -> 4277;
4279 -> 4278;
4280 -> 4272;
4280 -> 4278;
4281 -> 4278;
4282 -> 4280;
4282 -> 4267;
4282 -> 4281;
4282 -> 4278;
4283 -> 3464;
4284 -> 3464;
4285 -> 4284;
4286 -> 4285;
4287 -> 4286;
4288 -> 3470;
4288 -> 4287;
4289 -> 4288;
4289 -> 4267;
4289 -> 4287;
4290 -> 4288;
4290 -> 4267;
4290 -> 4287;
4291 -> 4290;
4291 -> 4286;
4292 -> 4284;
4293 -> 3470;
4293 -> 3464;
4294 -> 3464;
4295 -> 4293;
4295 -> 4294;
4296 -> 4294;
4297 -> 4295;
4297 -> 4296;
4298 -> 4297;
4298 -> 4267;
4298 -> 4296;
4299 -> 4297;
4299 -> 4267;
4299 -> 4296;
4300 -> 4299;
4300 -> 4294;
4301 -> 3464;
4302 -> 3470;
4302 -> 3464;
4303 -> 3464;
4304 -> 4302;
4304 -> 4303;
4305 -> 4303;
4306 -> 4304;
4306 -> 4305;
4307 -> 4306;
4307 -> 4267;
4307 -> 4305;
4308 -> 4306;
4308 -> 4267;
4308 -> 4305;
4309 -> 4308;
4309 -> 4303;
4310 -> 3470;
4310 -> 3464;
4311 -> 3470;
4311 -> 3464;
4312 -> 3464;
4313 -> 4311;
4313 -> 4312;
4314 -> 4313;
4314 -> 4267;
4314 -> 4312;
4315 -> 4314;
4315 -> 3464;
4316 -> 4315;
4316 -> 4267;
4316 -> 3464;
4317 -> 4315;
4317 -> 3464;
4318 -> 4311;
4318 -> 4267;
4318 -> 3464;
4319 -> 4315;
4319 -> 4316;
4320 -> 4310;
4320 -> 4267;
4320 -> 4316;
4321 -> 4316;
4322 -> 4319;
4322 -> 4321;
4323 -> 4320;
4323 -> 4321;
4324 -> 4311;
4324 -> 4321;
4325 -> 4324;
4325 -> 4267;
4325 -> 4321;
4326 -> 4322;
4326 -> 4321;
4327 -> 4325;
4327 -> 4326;
4327 -> 4321;
4328 -> 4321;
4329 -> 4322;
4329 -> 4321;
4330 -> 4328;
4330 -> 4321;
4331 -> 4324;
4331 -> 4267;
4331 -> 4329;
4331 -> 4330;
4331 -> 4321;
4332 -> 4322;
4332 -> 4321;
4333 -> 4321;
4334 -> 4321;
4335 -> 4332;
4335 -> 4334;
4336 -> 4333;
4336 -> 4334;
4337 -> 4336;
4337 -> 4334;
4338 -> 4334;
4339 -> 4335;
4339 -> 4338;
4339 -> 4334;
4340 -> 4335;
4340 -> 4336;
4340 -> 4334;
4341 -> 4322;
4341 -> 4321;
4342 -> 4333;
4342 -> 4321;
4343 -> 4324;
4343 -> 4331;
4343 -> 4341;
4343 -> 4342;
4343 -> 4340;
4343 -> 4321;
4344 -> 4343;
4344 -> 4333;
4344 -> 4321;
4345 -> 4322;
4345 -> 4344;
4346 -> 4343;
4346 -> 4344;
4347 -> 4323;
4347 -> 4344;
4348 -> 4344;
4349 -> 4345;
4349 -> 4348;
4350 -> 4346;
4350 -> 4348;
4351 -> 4347;
4351 -> 4348;
4352 -> 4324;
4352 -> 4348;
4353 -> 4352;
4353 -> 4343;
4353 -> 4348;
4354 -> 4348;
4355 -> 4350;
4355 -> 4354;
4356 -> 4355;
4356 -> 4343;
4356 -> 4354;
4357 -> 4356;
4357 -> 4348;
4358 -> 4353;
4358 -> 4343;
4358 -> 4348;
4359 -> 4352;
4359 -> 4343;
4359 -> 0;
4359 -> 4348;
4360 -> 4357;
4360 -> 4343;
4360 -> 4348;
4361 -> 4359;
4361 -> 4360;
4361 -> 4348;
4362 -> 4349;
4362 -> 4343;
4362 -> 4348;
4363 -> 4349;
4363 -> 4343;
4363 -> 4348;
4364 -> 4348;
4365 -> 4352;
4365 -> 4343;
4365 -> 4364;
4365 -> 4348;
4366 -> 4344;
4367 -> 4321;
4368 -> 4322;
4368 -> 4343;
4368 -> 4367;
4368 -> 4321;
4369 -> 4343;
4369 -> 4321;
4370 -> 4343;
4370 -> 4321;
4371 -> 3470;
4371 -> 4370;
4371 -> 4368;
4371 -> 3441;
4372 -> 3470;
4372 -> 3464;
4373 -> 4372;
4373 -> 4371;
4373 -> 3464;
4374 -> 3470;
4374 -> 3464;
4375 -> 3470;
4375 -> 3464;
4376 -> 4375;
4376 -> 4373;
4376 -> 3464;
4377 -> 3464;
4378 -> 4377;
4378 -> 4376;
4378 -> 4373;
4378 -> 3464;
4379 -> 3464;
4380 -> 3470;
4380 -> 4379;
4380 -> 4373;
4380 -> 3441;
4381 -> 3470;
4381 -> 3464;
4382 -> 3470;
4382 -> 3464;
4383 -> 4381;
4383 -> 4380;
4383 -> 3464;
4384 -> 4382;
4384 -> 4380;
4384 -> 4383;
4385 -> 4381;
4385 -> 4383;
4386 -> 4383;
4387 -> 4384;
4387 -> 4386;
4388 -> 4385;
4388 -> 4386;
4389 -> 4382;
4389 -> 4386;
4390 -> 4387;
4390 -> 4380;
4390 -> 4386;
4391 -> 4390;
4392 -> 4387;
4392 -> 4380;
4392 -> 4390;
4393 -> 4390;
4394 -> 4393;
4394 -> 4392;
4394 -> 4380;
4394 -> 4390;
4395 -> 4388;
4395 -> 4380;
4395 -> 4390;
4396 -> 4389;
4396 -> 4380;
4396 -> 4395;
4397 -> 4387;
4397 -> 4390;
4398 -> 4391;
4398 -> 4390;
4399 -> 4390;
4400 -> 4391;
4400 -> 4398;
4400 -> 4390;
4401 -> 4398;
4401 -> 4386;
4402 -> 3470;
4402 -> 4401;
4402 -> 4400;
4402 -> 4398;
4402 -> 3441;
4403 -> 3470;
4403 -> 3464;
4404 -> 4403;
4404 -> 4402;
4404 -> 3464;
4405 -> 3470;
4405 -> 3464;
4406 -> 3470;
4406 -> 3464;
4407 -> 4405;
4407 -> 4404;
4407 -> 3464;
4408 -> 3464;
4409 -> 4406;
4409 -> 4404;
4409 -> 4408;
4410 -> 4409;
4410 -> 3464;
4411 -> 3464;
4412 -> 3470;
4412 -> 3464;
4413 -> 3470;
4413 -> 3464;
4414 -> 4412;
4414 -> 4410;
4414 -> 3464;
4415 -> 3464;
4416 -> 4414;
4416 -> 4415;
4417 -> 4413;
4417 -> 4415;
4418 -> 4417;
4418 -> 4410;
4418 -> 4415;
4419 -> 4418;
4419 -> 3464;
4420 -> 3464;
4421 -> 3470;
4421 -> 3464;
4422 -> 3470;
4422 -> 3464;
4423 -> 4421;
4423 -> 4419;
4423 -> 3464;
4424 -> 3464;
4425 -> 4423;
4425 -> 4424;
4426 -> 4422;
4426 -> 4424;
4427 -> 4424;
4428 -> 4425;
4428 -> 4424;
4429 -> 4424;
4430 -> 4428;
4430 -> 4429;
4431 -> 4426;
4431 -> 4429;
4432 -> 4429;
4433 -> 4431;
4433 -> 4432;
4434 -> 4432;
4435 -> 4434;
4435 -> 4433;
4435 -> 4432;
4436 -> 4432;
4437 -> 4433;
4437 -> 4436;
4438 -> 4437;
4438 -> 4419;
4438 -> 4435;
4438 -> 4436;
4439 -> 4438;
4439 -> 4432;
4440 -> 4439;
4440 -> 4429;
4441 -> 4429;
4442 -> 4431;
4442 -> 4441;
4443 -> 4438;
4443 -> 4429;
4444 -> 4443;
4445 -> 4440;
4445 -> 4444;
4445 -> 4443;
4446 -> 4445;
4447 -> 4424;
4448 -> 4427;
4448 -> 4424;
4449 -> 4427;
4449 -> 4424;
4450 -> 4427;
4450 -> 4424;
4451 -> 4427;
4451 -> 4424;
4452 -> 4427;
4452 -> 4424;
4453 -> 4427;
4453 -> 4424;
4454 -> 4427;
4454 -> 4424;
4455 -> 4427;
4455 -> 4424;
4456 -> 4427;
4456 -> 4438;
4456 -> 4424;
4457 -> 4456;
4457 -> 3464;
4458 -> 3464;
4459 -> 3470;
4459 -> 3464;
4460 -> 3470;
4460 -> 3464;
4461 -> 3464;
4462 -> 4460;
4462 -> 4457;
4462 -> 3464;
4463 -> 4461;
4463 -> 4462;
4463 -> 4457;
4463 -> 3464;
4464 -> 3464;
4465 -> 4461;
4465 -> 4463;
4465 -> 4464;
4465 -> 3464;
4466 -> 4461;
4466 -> 4463;
4466 -> 4465;
4467 -> 4466;
4467 -> 4465;
4468 -> 4467;
4468 -> 4466;
4468 -> 0;
4469 -> 4468;
4470 -> 4467;
4470 -> 4466;
4470 -> 4468;
4471 -> 3470;
4471 -> 4469;
4471 -> 3464;
4472 -> 3464;
4473 -> 4472;
4474 -> 4473;
4475 -> 4474;
4476 -> 3470;
4476 -> 4475;
4477 -> 4476;
4477 -> 4469;
4477 -> 4475;
4478 -> 4476;
4478 -> 4469;
4478 -> 4475;
4479 -> 4478;
4479 -> 4474;
4480 -> 4472;
4481 -> 4469;
4481 -> 3464;
4482 -> 3464;
4483 -> 3470;
4483 -> 3464;
4484 -> 3470;
4484 -> 3464;
4485 -> 3470;
4485 -> 3464;
4486 -> 3470;
4486 -> 3464;
4487 -> 3464;
4488 -> 4486;
4488 -> 4469;
4488 -> 4487;
4489 -> 4487;
4490 -> 4489;
4491 -> 4490;
4492 -> 4488;
4492 -> 4491;
4493 -> 4492;
4493 -> 4490;
4494 -> 4487;
4495 -> 4488;
4495 -> 3464;
4496 -> 4495;
4496 -> 4483;
4496 -> 4488;
4496 -> 3464;
4497 -> 3464;
4498 -> 4497;
4498 -> 3464;
4499 -> 4485;
4499 -> 4498;
4499 -> 4469;
4499 -> 4497;
4499 -> 4488;
4499 -> 3464;
4500 -> 3464;
4501 -> 4497;
4501 -> 4499;
4501 -> 3464;
4502 -> 4501;
4503 -> 4497;
4503 -> 4501;
4503 -> 3464;
4504 -> 4502;
4504 -> 3464;
4505 -> 3470;
4505 -> 4504;
4505 -> 4503;
4505 -> 3441;
4506 -> 3470;
4506 -> 4505;
4506 -> 3464;
4507 -> 4476;
4507 -> 4505;
4507 -> 4475;
4508 -> 4476;
4508 -> 4505;
4508 -> 4475;
4509 -> 4508;
4509 -> 4474;
4510 -> 4505;
4510 -> 3464;
4511 -> 4505;
4511 -> 4491;
4512 -> 4511;
4512 -> 4490;
4513 -> 4505;
4513 -> 3464;
4514 -> 4513;
4514 -> 4483;
4514 -> 4505;
4514 -> 3464;
4515 -> 3470;
4515 -> 3464;
4516 -> 3470;
4516 -> 3464;
4517 -> 3464;
4518 -> 3470;
4518 -> 4517;
4518 -> 4505;
4518 -> 3441;
4519 -> 3470;
4519 -> 3464;
4520 -> 3470;
4520 -> 3464;
4521 -> 4520;
4521 -> 3464;
4522 -> 4519;
4522 -> 3464;
4523 -> 4520;
4523 -> 4518;
4523 -> 3464;
4524 -> 4521;
4524 -> 4522;
4524 -> 4523;
4524 -> 4520;
4524 -> 4518;
4524 -> 3464;
4525 -> 3464;
4526 -> 4524;
4526 -> 0;
4526 -> 4525;
4527 -> 4525;
4528 -> 4524;
4529 -> 4528;
4529 -> 4524;
4530 -> 4524;
4530 -> 4525;
4531 -> 4525;
4532 -> 4531;
4533 -> 4524;
4533 -> 4532;
4534 -> 4533;
4534 -> 4531;
4535 -> 4525;
4536 -> 4525;
4537 -> 3470;
4537 -> 3464;
4538 -> 3470;
4538 -> 3464;
4539 -> 3470;
4539 -> 3464;
4540 -> 3470;
4540 -> 3464;
4541 -> 3470;
4541 -> 3464;
4542 -> 3470;
4542 -> 3464;
4543 -> 4537;
4543 -> 3464;
4544 -> 4543;
4544 -> 4524;
4544 -> 3464;
4545 -> 3464;
4546 -> 4540;
4546 -> 4545;
4546 -> 3464;
4547 -> 4537;
4547 -> 3464;
4548 -> 4538;
4548 -> 3464;
4549 -> 4539;
4549 -> 3464;
4550 -> 4541;
4550 -> 3464;
4551 -> 3464;
4552 -> 4547;
4552 -> 4551;
4553 -> 4548;
4553 -> 4551;
4554 -> 4549;
4554 -> 4551;
4555 -> 4550;
4555 -> 4551;
4556 -> 4542;
4556 -> 4551;
4557 -> 4551;
4558 -> 4551;
4559 -> 4552;
4559 -> 4544;
4559 -> 4551;
4560 -> 4559;
4560 -> 4544;
4560 -> 4551;
4561 -> 4552;
4561 -> 4544;
4561 -> 4551;
4562 -> 4552;
4562 -> 4561;
4562 -> 4551;
4563 -> 4555;
4563 -> 4562;
4564 -> 4552;
4564 -> 4561;
4564 -> 4563;
4565 -> 4559;
4565 -> 4563;
4566 -> 4563;
4567 -> 4565;
4567 -> 4566;
4568 -> 4566;
4569 -> 4567;
4569 -> 4568;
4569 -> 4566;
4570 -> 4569;
4571 -> 4567;
4571 -> 4561;
4571 -> 4569;
4572 -> 4566;
4573 -> 4572;
4573 -> 4563;
4574 -> 4564;
4574 -> 4573;
4574 -> 4563;
4575 -> 4552;
4575 -> 4574;
4576 -> 4552;
4576 -> 4561;
4576 -> 4574;
4577 -> 4551;
4578 -> 4556;
4578 -> 4561;
4578 -> 4577;
4578 -> 4551;
4579 -> 4552;
4579 -> 4561;
4579 -> 4551;
4580 -> 3464;
4581 -> 4540;
4581 -> 4580;
4581 -> 3464;
4582 -> 4579;
4582 -> 4581;
4583 -> 3470;
4583 -> 3464;
4584 -> 3470;
4584 -> 3464;
4585 -> 3470;
4585 -> 3464;
4586 -> 3470;
4586 -> 3464;
4587 -> 3464;
4588 -> 4585;
4588 -> 4587;
4588 -> 3464;
4589 -> 4583;
4589 -> 4582;
4589 -> 3464;
4590 -> 4583;
4590 -> 4589;
4591 -> 4584;
4591 -> 4589;
4592 -> 4585;
4592 -> 4589;
4593 -> 4589;
4594 -> 4589;
4595 -> 4590;
4595 -> 4594;
4596 -> 4591;
4596 -> 4594;
4597 -> 4592;
4597 -> 4594;
4598 -> 4593;
4598 -> 4594;
4599 -> 4593;
4599 -> 4594;
4600 -> 4586;
4600 -> 4594;
4601 -> 4595;
4601 -> 4582;
4601 -> 4594;
4602 -> 4594;
4603 -> 4597;
4603 -> 4602;
4603 -> 4594;
4604 -> 4595;
4604 -> 4601;
4604 -> 4594;
4605 -> 4595;
4605 -> 4601;
4605 -> 4604;
4606 -> 4595;
4606 -> 4601;
4606 -> 0;
4606 -> 4594;
4607 -> 4595;
4607 -> 4601;
4607 -> 4594;
4608 -> 4599;
4608 -> 4607;
4609 -> 4608;
4610 -> 4608;
4611 -> 4595;
4611 -> 4601;
4611 -> 4608;
4612 -> 4608;
4613 -> 4611;
4613 -> 4612;
4614 -> 4612;
4615 -> 4613;
4615 -> 4614;
4616 -> 4614;
4617 -> 4615;
4617 -> 4616;
4617 -> 4614;
4618 -> 4614;
4619 -> 4618;
4619 -> 4612;
4620 -> 4595;
4620 -> 4601;
4620 -> 4619;
4621 -> 4595;
4621 -> 4601;
4621 -> 4594;
4622 -> 4600;
4622 -> 4601;
4622 -> 4594;
4623 -> 4595;
4623 -> 4601;
4623 -> 4594;
4624 -> 3470;
4624 -> 3464;
4625 -> 3470;
4625 -> 3464;
4626 -> 3470;
4626 -> 3464;
4627 -> 3470;
4627 -> 3464;
4628 -> 3470;
4628 -> 3464;
4629 -> 3470;
4629 -> 3464;
4630 -> 3464;
4631 -> 4626;
4631 -> 4630;
4631 -> 3464;
4632 -> 4624;
4632 -> 4622;
4632 -> 3464;
4633 -> 4624;
4633 -> 4622;
4633 -> 4632;
4634 -> 4624;
4634 -> 4622;
4634 -> 0;
4634 -> 3464;
4635 -> 4624;
4635 -> 4622;
4635 -> 3464;
4636 -> 4628;
4636 -> 4635;
4637 -> 4624;
4637 -> 4622;
4637 -> 3464;
4638 -> 3470;
4638 -> 3464;
4639 -> 3470;
4639 -> 3464;
4640 -> 3470;
4640 -> 3464;
4641 -> 4640;
4641 -> 4622;
4641 -> 3464;
4642 -> 4638;
4642 -> 3464;
4643 -> 4641;
4643 -> 4642;
4643 -> 3464;
4644 -> 3464;
4645 -> 4638;
4645 -> 4644;
4645 -> 3464;
4646 -> 3464;
4647 -> 4638;
4647 -> 3464;
4648 -> 4646;
4648 -> 3464;
4649 -> 4640;
4649 -> 4622;
4649 -> 4647;
4649 -> 4648;
4649 -> 3464;
4650 -> 4649;
4651 -> 4624;
4651 -> 4650;
4651 -> 3464;
4652 -> 4624;
4652 -> 4650;
4652 -> 4651;
4653 -> 4624;
4653 -> 4650;
4653 -> 0;
4653 -> 3464;
4654 -> 4624;
4654 -> 4650;
4654 -> 3464;
4655 -> 4628;
4655 -> 4654;
4656 -> 4624;
4656 -> 4650;
4656 -> 3464;
4657 -> 3470;
4657 -> 3464;
4658 -> 3470;
4658 -> 3464;
4659 -> 4657;
4659 -> 3464;
4660 -> 3464;
4661 -> 4659;
4661 -> 4660;
4661 -> 4650;
4661 -> 3464;
4662 -> 4657;
4662 -> 3464;
4663 -> 4662;
4663 -> 4650;
4663 -> 4661;
4663 -> 3464;
4664 -> 3464;
4665 -> 4663;
4665 -> 4664;
4666 -> 4665;
4666 -> 4663;
4666 -> 4664;
4667 -> 4665;
4667 -> 4663;
4667 -> 4666;
4668 -> 4667;
4668 -> 4666;
4669 -> 4666;
4670 -> 4668;
4670 -> 4669;
4671 -> 4670;
4671 -> 4663;
4671 -> 0;
4671 -> 4669;
4672 -> 4670;
4672 -> 4663;
4672 -> 4669;
4673 -> 4669;
4674 -> 4672;
4674 -> 4673;
4675 -> 4673;
4676 -> 4674;
4676 -> 4675;
4676 -> 4673;
4677 -> 4676;
4678 -> 4674;
4678 -> 4663;
4678 -> 4676;
4679 -> 4673;
4680 -> 4679;
4680 -> 4669;
4681 -> 4671;
4681 -> 4680;
4681 -> 4669;
4682 -> 4664;
4683 -> 4682;
4683 -> 3464;
4684 -> 4663;
4684 -> 4683;
4684 -> 3464;
4685 -> 4657;
4685 -> 3464;
4686 -> 4684;
4686 -> 3464;
4687 -> 3464;
4688 -> 4686;
4688 -> 4687;
4689 -> 4688;
4689 -> 4686;
4689 -> 4687;
4690 -> 4688;
4690 -> 4686;
4690 -> 4689;
4691 -> 4690;
4691 -> 4689;
4692 -> 4689;
4693 -> 4691;
4693 -> 4692;
4694 -> 4693;
4694 -> 4686;
4694 -> 0;
4694 -> 4692;
4695 -> 4693;
4695 -> 4686;
4695 -> 4692;
4696 -> 4692;
4697 -> 4695;
4697 -> 4696;
4698 -> 4696;
4699 -> 4697;
4699 -> 4698;
4699 -> 4696;
4700 -> 4699;
4701 -> 4697;
4701 -> 4686;
4701 -> 4699;
4702 -> 4696;
4703 -> 4702;
4703 -> 4692;
4704 -> 4694;
4704 -> 4703;
4704 -> 4692;
4705 -> 4687;
4706 -> 4684;
4706 -> 3464;
4707 -> 4657;
4707 -> 4706;
4708 -> 4706;
4709 -> 4707;
4709 -> 4708;
4709 -> 4650;
4709 -> 4686;
4709 -> 4706;
4710 -> 4584;
4710 -> 4709;
4711 -> 4585;
4711 -> 4709;
4712 -> 4710;
4712 -> 4709;
4713 -> 4711;
4713 -> 4709;
4714 -> 4709;
4715 -> 4709;
4716 -> 4709;
4717 -> 4713;
4717 -> 4716;
4717 -> 4709;
4718 -> 4709;
4719 -> 4709;
4719 -> 4718;
4720 -> 4709;
4720 -> 0;
4721 -> 4709;
4722 -> 4715;
4722 -> 4721;
4723 -> 4722;
4724 -> 4722;
4725 -> 4709;
4725 -> 4722;
4726 -> 4722;
4727 -> 4725;
4727 -> 4726;
4728 -> 4726;
4729 -> 4727;
4729 -> 4728;
4730 -> 4728;
4731 -> 4729;
4731 -> 4730;
4731 -> 4728;
4732 -> 4728;
4733 -> 4732;
4733 -> 4726;
4734 -> 4709;
4734 -> 4733;
4735 -> 4709;
4736 -> 3470;
4736 -> 3464;
4737 -> 3470;
4737 -> 3464;
4738 -> 3470;
4738 -> 3464;
4739 -> 4736;
4739 -> 4709;
4739 -> 3464;
4740 -> 3464;
4741 -> 4739;
4741 -> 4740;
4741 -> 3464;
4742 -> 4737;
4742 -> 0;
4742 -> 4741;
4743 -> 4739;
4743 -> 4737;
4743 -> 4741;
4744 -> 4737;
4744 -> 0;
4744 -> 4743;
4745 -> 4584;
4745 -> 4743;
4746 -> 4585;
4746 -> 4743;
4747 -> 4745;
4747 -> 4743;
4748 -> 4746;
4748 -> 4743;
4749 -> 4743;
4750 -> 4743;
4751 -> 4743;
4752 -> 4748;
4752 -> 4751;
4752 -> 4743;
4753 -> 4743;
4754 -> 4743;
4754 -> 4753;
4755 -> 4743;
4755 -> 0;
4756 -> 4743;
4757 -> 4750;
4757 -> 4756;
4758 -> 4757;
4759 -> 4757;
4760 -> 4743;
4760 -> 4757;
4761 -> 4757;
4762 -> 4760;
4762 -> 4761;
4763 -> 4761;
4764 -> 4762;
4764 -> 4763;
4765 -> 4763;
4766 -> 4764;
4766 -> 4765;
4766 -> 4763;
4767 -> 4763;
4768 -> 4767;
4768 -> 4761;
4769 -> 4743;
4769 -> 4768;
4770 -> 4743;
4771 -> 4624;
4771 -> 4743;
4771 -> 3464;
4772 -> 4624;
4772 -> 4743;
4772 -> 4771;
4773 -> 4624;
4773 -> 4743;
4773 -> 0;
4773 -> 3464;
4774 -> 4624;
4774 -> 4743;
4774 -> 3464;
4775 -> 4628;
4775 -> 4774;
4776 -> 4624;
4776 -> 4743;
4776 -> 3464;
4777 -> 4640;
4777 -> 4743;
4777 -> 3464;
4778 -> 4743;
4778 -> 4664;
4779 -> 4778;
4779 -> 4743;
4779 -> 4664;
4780 -> 4778;
4780 -> 4743;
4780 -> 4779;
4781 -> 4780;
4781 -> 4779;
4782 -> 4779;
4783 -> 4781;
4783 -> 4782;
4784 -> 4783;
4784 -> 4743;
4784 -> 0;
4784 -> 4782;
4785 -> 4783;
4785 -> 4743;
4785 -> 4782;
4786 -> 4782;
4787 -> 4785;
4787 -> 4786;
4788 -> 4786;
4789 -> 4787;
4789 -> 4788;
4789 -> 4786;
4790 -> 4789;
4791 -> 4787;
4791 -> 4743;
4791 -> 4789;
4792 -> 4786;
4793 -> 4792;
4793 -> 4782;
4794 -> 4784;
4794 -> 4793;
4794 -> 4782;
4795 -> 4743;
4795 -> 4687;
4796 -> 4795;
4796 -> 4743;
4796 -> 4687;
4797 -> 4795;
4797 -> 4743;
4797 -> 4796;
4798 -> 4797;
4798 -> 4796;
4799 -> 4796;
4800 -> 4798;
4800 -> 4799;
4801 -> 4800;
4801 -> 4743;
4801 -> 0;
4801 -> 4799;
4802 -> 4800;
4802 -> 4743;
4802 -> 4799;
4803 -> 4799;
4804 -> 4802;
4804 -> 4803;
4805 -> 4803;
4806 -> 4804;
4806 -> 4805;
4806 -> 4803;
4807 -> 4806;
4808 -> 4804;
4808 -> 4743;
4808 -> 4806;
4809 -> 4803;
4810 -> 4809;
4810 -> 4799;
4811 -> 4801;
4811 -> 4810;
4811 -> 4799;
4812 -> 4552;
4812 -> 4743;
4812 -> 4551;
4813 -> 4812;
4813 -> 4743;
4813 -> 4551;
4814 -> 4552;
4814 -> 4743;
4814 -> 4551;
4815 -> 4555;
4815 -> 4814;
4816 -> 4552;
4816 -> 4743;
4816 -> 4815;
4817 -> 4812;
4817 -> 4815;
4818 -> 4815;
4819 -> 4817;
4819 -> 4818;
4820 -> 4818;
4821 -> 4819;
4821 -> 4820;
4821 -> 4818;
4822 -> 4821;
4823 -> 4819;
4823 -> 4743;
4823 -> 4821;
4824 -> 4818;
4825 -> 4824;
4825 -> 4815;
4826 -> 4816;
4826 -> 4825;
4826 -> 4815;
4827 -> 4552;
4827 -> 4826;
4828 -> 4552;
4828 -> 4743;
4828 -> 4826;
4829 -> 4556;
4829 -> 4743;
4829 -> 4577;
4829 -> 4551;
4830 -> 4766;
4831 -> 4764;
4831 -> 4743;
4831 -> 4766;
4832 -> 3470;
4832 -> 3464;
4833 -> 4832;
4833 -> 4743;
4833 -> 3464;
4834 -> 3464;
4835 -> 4552;
4835 -> 4833;
4835 -> 4551;
4836 -> 4835;
4836 -> 4833;
4836 -> 4551;
4837 -> 4552;
4837 -> 4833;
4837 -> 4551;
4838 -> 4555;
4838 -> 4837;
4839 -> 4552;
4839 -> 4833;
4839 -> 4838;
4840 -> 4835;
4840 -> 4838;
4841 -> 4838;
4842 -> 4840;
4842 -> 4841;
4843 -> 4841;
4844 -> 4842;
4844 -> 4843;
4844 -> 4841;
4845 -> 4844;
4846 -> 4842;
4846 -> 4833;
4846 -> 4844;
4847 -> 4841;
4848 -> 4847;
4848 -> 4838;
4849 -> 4839;
4849 -> 4848;
4849 -> 4838;
4850 -> 4552;
4850 -> 4849;
4851 -> 4552;
4851 -> 4833;
4851 -> 4849;
4852 -> 4556;
4852 -> 4833;
4852 -> 4577;
4852 -> 4551;
4853 -> 4584;
4853 -> 4833;
4854 -> 4585;
4854 -> 4833;
4855 -> 4853;
4855 -> 4833;
4856 -> 4854;
4856 -> 4833;
4857 -> 4833;
4858 -> 4833;
4859 -> 4833;
4860 -> 4856;
4860 -> 4859;
4860 -> 4833;
4861 -> 4833;
4862 -> 4833;
4862 -> 4861;
4863 -> 4833;
4863 -> 0;
4864 -> 4833;
4865 -> 4858;
4865 -> 4864;
4866 -> 4865;
4867 -> 4865;
4868 -> 4833;
4868 -> 4865;
4869 -> 4865;
4870 -> 4868;
4870 -> 4869;
4871 -> 4869;
4872 -> 4870;
4872 -> 4871;
4873 -> 4871;
4874 -> 4872;
4874 -> 4873;
4874 -> 4871;
4875 -> 4871;
4876 -> 4875;
4876 -> 4869;
4877 -> 4833;
4877 -> 4876;
4878 -> 4833;
4879 -> 4640;
4879 -> 4833;
4879 -> 3464;
4880 -> 4624;
4880 -> 4833;
4880 -> 3464;
4881 -> 4624;
4881 -> 4833;
4881 -> 4880;
4882 -> 4624;
4882 -> 4833;
4882 -> 0;
4882 -> 3464;
4883 -> 4624;
4883 -> 4833;
4883 -> 3464;
4884 -> 4628;
4884 -> 4883;
4885 -> 4624;
4885 -> 4833;
4885 -> 3464;
4886 -> 4833;
4886 -> 4664;
4887 -> 4886;
4887 -> 4833;
4887 -> 4664;
4888 -> 4886;
4888 -> 4833;
4888 -> 4887;
4889 -> 4888;
4889 -> 4887;
4890 -> 4887;
4891 -> 4889;
4891 -> 4890;
4892 -> 4891;
4892 -> 4833;
4892 -> 0;
4892 -> 4890;
4893 -> 4891;
4893 -> 4833;
4893 -> 4890;
4894 -> 4890;
4895 -> 4893;
4895 -> 4894;
4896 -> 4894;
4897 -> 4895;
4897 -> 4896;
4897 -> 4894;
4898 -> 4897;
4899 -> 4895;
4899 -> 4833;
4899 -> 4897;
4900 -> 4894;
4901 -> 4900;
4901 -> 4890;
4902 -> 4892;
4902 -> 4901;
4902 -> 4890;
4903 -> 4833;
4903 -> 4687;
4904 -> 4903;
4904 -> 4833;
4904 -> 4687;
4905 -> 4903;
4905 -> 4833;
4905 -> 4904;
4906 -> 4905;
4906 -> 4904;
4907 -> 4904;
4908 -> 4906;
4908 -> 4907;
4909 -> 4908;
4909 -> 4833;
4909 -> 0;
4909 -> 4907;
4910 -> 4908;
4910 -> 4833;
4910 -> 4907;
4911 -> 4907;
4912 -> 4910;
4912 -> 4911;
4913 -> 4911;
4914 -> 4912;
4914 -> 4913;
4914 -> 4911;
4915 -> 4914;
4916 -> 4912;
4916 -> 4833;
4916 -> 4914;
4917 -> 4911;
4918 -> 4917;
4918 -> 4907;
4919 -> 4909;
4919 -> 4918;
4919 -> 4907;
4920 -> 4737;
4920 -> 0;
4920 -> 4833;
4921 -> 4310;
4921 -> 4833;
4922 -> 4921;
4922 -> 4833;
4923 -> 4833;
4924 -> 4833;
4925 -> 4375;
4925 -> 4924;
4925 -> 3464;
4926 -> 4377;
4926 -> 4925;
4926 -> 4924;
4926 -> 3464;
4927 -> 3470;
4927 -> 3464;
4928 -> 4927;
4928 -> 3464;
4929 -> 4928;
4929 -> 4927;
4929 -> 4924;
4929 -> 3464;
4930 -> 3464;
4931 -> 4552;
4931 -> 4929;
4931 -> 4551;
4932 -> 4931;
4932 -> 4929;
4932 -> 4551;
4933 -> 4552;
4933 -> 4929;
4933 -> 4551;
4934 -> 4555;
4934 -> 4933;
4935 -> 4552;
4935 -> 4929;
4935 -> 4934;
4936 -> 4931;
4936 -> 4934;
4937 -> 4934;
4938 -> 4936;
4938 -> 4937;
4939 -> 4937;
4940 -> 4938;
4940 -> 4939;
4940 -> 4937;
4941 -> 4940;
4942 -> 4938;
4942 -> 4929;
4942 -> 4940;
4943 -> 4937;
4944 -> 4943;
4944 -> 4934;
4945 -> 4935;
4945 -> 4944;
4945 -> 4934;
4946 -> 4552;
4946 -> 4945;
4947 -> 4552;
4947 -> 4929;
4947 -> 4945;
4948 -> 4556;
4948 -> 4929;
4948 -> 4577;
4948 -> 4551;
4949 -> 4624;
4949 -> 4929;
4949 -> 3464;
4950 -> 4624;
4950 -> 4929;
4950 -> 4949;
4951 -> 4624;
4951 -> 4929;
4951 -> 0;
4951 -> 3464;
4952 -> 4624;
4952 -> 4929;
4952 -> 3464;
4953 -> 4628;
4953 -> 4952;
4954 -> 4624;
4954 -> 4929;
4954 -> 3464;
4955 -> 4640;
4955 -> 4929;
4955 -> 3464;
4956 -> 4584;
4956 -> 4929;
4957 -> 4585;
4957 -> 4929;
4958 -> 4956;
4958 -> 4929;
4959 -> 4957;
4959 -> 4929;
4960 -> 4929;
4961 -> 4929;
4962 -> 4929;
4963 -> 4959;
4963 -> 4962;
4963 -> 4929;
4964 -> 4929;
4965 -> 4929;
4965 -> 4964;
4966 -> 4929;
4966 -> 0;
4967 -> 4929;
4968 -> 4961;
4968 -> 4967;
4969 -> 4968;
4970 -> 4968;
4971 -> 4929;
4971 -> 4968;
4972 -> 4968;
4973 -> 4971;
4973 -> 4972;
4974 -> 4972;
4975 -> 4973;
4975 -> 4974;
4976 -> 4974;
4977 -> 4975;
4977 -> 4976;
4977 -> 4974;
4978 -> 4974;
4979 -> 4978;
4979 -> 4972;
4980 -> 4929;
4980 -> 4979;
4981 -> 4929;
4982 -> 4737;
4982 -> 0;
4982 -> 4929;
4983 -> 4405;
4983 -> 4929;
4983 -> 3464;
4984 -> 4412;
4984 -> 4929;
4984 -> 3464;
4985 -> 4984;
4985 -> 4415;
4986 -> 4421;
4986 -> 4929;
4986 -> 3464;
4987 -> 4986;
4987 -> 4424;
4988 -> 4987;
4988 -> 4424;
4989 -> 4988;
4989 -> 4429;
4990 -> 4929;
4990 -> 4432;
4991 -> 4990;
4991 -> 4429;
4992 -> 4929;
4992 -> 4429;
4993 -> 4992;
4994 -> 4991;
4994 -> 4993;
4994 -> 4992;
4995 -> 4994;
4996 -> 3470;
4996 -> 4929;
4996 -> 3464;
4997 -> 4476;
4997 -> 4929;
4997 -> 4475;
4998 -> 4476;
4998 -> 4929;
4998 -> 4475;
4999 -> 4998;
4999 -> 4474;
5000 -> 4929;
5000 -> 3464;
5001 -> 4929;
5001 -> 4491;
5002 -> 5001;
5002 -> 4490;
5003 -> 4929;
5003 -> 3464;
5004 -> 5003;
5004 -> 4483;
5004 -> 4929;
5004 -> 3464;
5005 -> 4497;
5005 -> 4929;
5006 -> 4929;
5007 -> 4497;
5007 -> 4929;
5008 -> 5007;
5008 -> 5005;
5008 -> 4929;
5009 -> 4929;
5010 -> 5008;
5010 -> 5009;
5010 -> 4929;
5011 -> 4484;
5011 -> 5010;
5012 -> 5008;
5012 -> 5010;
5013 -> 5010;
5014 -> 5011;
5014 -> 5013;
5015 -> 5012;
5015 -> 5013;
5016 -> 4486;
5016 -> 5013;
5017 -> 5015;
5017 -> 5014;
5017 -> 5013;
5018 -> 5017;
5019 -> 4624;
5019 -> 5018;
5019 -> 3464;
5020 -> 4624;
5020 -> 5018;
5020 -> 5019;
5021 -> 4624;
5021 -> 5018;
5021 -> 0;
5021 -> 3464;
5022 -> 4624;
5022 -> 5018;
5022 -> 3464;
5023 -> 4628;
5023 -> 5022;
5024 -> 5023;
5025 -> 5023;
5026 -> 4624;
5026 -> 5018;
5026 -> 5023;
5027 -> 5023;
5028 -> 5026;
5028 -> 5027;
5029 -> 5027;
5030 -> 5028;
5030 -> 5029;
5031 -> 5029;
5032 -> 5030;
5032 -> 5031;
5032 -> 5029;
5033 -> 5029;
5034 -> 5033;
5034 -> 5027;
5035 -> 4624;
5035 -> 5018;
5035 -> 5034;
5036 -> 4624;
5036 -> 5018;
5036 -> 3464;
5037 -> 4640;
5037 -> 5018;
5037 -> 3464;
5038 -> 3470;
5038 -> 5018;
5038 -> 3464;
5039 -> 4476;
5039 -> 5018;
5039 -> 4475;
5040 -> 4476;
5040 -> 5018;
5040 -> 4475;
5041 -> 5040;
5041 -> 4474;
5042 -> 5018;
5042 -> 3464;
5043 -> 5018;
5043 -> 4491;
5044 -> 5043;
5044 -> 4490;
5045 -> 5018;
5045 -> 3464;
5046 -> 5045;
5046 -> 4483;
5046 -> 5018;
5046 -> 3464;
5047 -> 4584;
5047 -> 5018;
5048 -> 4585;
5048 -> 5018;
5049 -> 5047;
5049 -> 5018;
5050 -> 5048;
5050 -> 5018;
5051 -> 5018;
5052 -> 5018;
5053 -> 5018;
5054 -> 5050;
5054 -> 5053;
5054 -> 5018;
5055 -> 5018;
5056 -> 5018;
5056 -> 5055;
5057 -> 5018;
5057 -> 0;
5058 -> 5018;
5059 -> 5052;
5059 -> 5058;
5060 -> 5059;
5061 -> 5059;
5062 -> 5018;
5062 -> 5059;
5063 -> 5059;
5064 -> 5062;
5064 -> 5063;
5065 -> 5063;
5066 -> 5064;
5066 -> 5065;
5067 -> 5065;
5068 -> 5066;
5068 -> 5067;
5068 -> 5065;
5069 -> 5065;
5070 -> 5069;
5070 -> 5063;
5071 -> 5018;
5071 -> 5070;
5072 -> 5018;
5073 -> 3470;
5073 -> 3464;
5074 -> 3470;
5074 -> 3464;
5075 -> 5074;
5075 -> 5018;
5075 -> 3464;
5076 -> 5074;
5076 -> 5018;
5076 -> 3464;
5077 -> 5076;
5078 -> 5074;
5078 -> 5077;
5079 -> 5078;
5079 -> 5018;
5079 -> 5077;
5080 -> 5077;
5081 -> 5078;
5081 -> 5018;
5081 -> 5077;
5082 -> 5079;
5082 -> 5018;
5082 -> 5081;
5083 -> 5081;
5084 -> 5083;
5084 -> 5082;
5084 -> 5018;
5084 -> 5081;
5085 -> 5078;
5085 -> 5018;
5085 -> 5077;
5086 -> 5077;
5087 -> 5079;
5087 -> 5018;
5087 -> 5086;
5088 -> 5087;
5088 -> 5077;
5089 -> 5079;
5089 -> 5077;
5090 -> 5080;
5090 -> 5077;
5091 -> 5077;
5092 -> 5089;
5092 -> 5091;
5093 -> 5090;
5093 -> 5091;
5094 -> 5091;
5095 -> 5094;
5095 -> 5091;
5096 -> 5092;
5096 -> 5018;
5096 -> 5091;
5097 -> 5093;
5097 -> 5091;
5098 -> 5091;
5099 -> 5095;
5099 -> 5098;
5100 -> 5096;
5100 -> 5098;
5101 -> 5097;
5101 -> 5098;
5102 -> 5098;
5103 -> 5100;
5103 -> 5102;
5103 -> 5098;
5104 -> 5100;
5104 -> 5096;
5104 -> 5102;
5104 -> 5098;
5105 -> 5091;
5106 -> 5091;
5107 -> 5092;
5107 -> 5096;
5107 -> 5106;
5108 -> 5107;
5108 -> 5091;
5109 -> 5094;
5109 -> 5108;
5110 -> 5092;
5110 -> 5096;
5110 -> 5108;
5111 -> 5093;
5111 -> 5108;
5112 -> 5108;
5113 -> 5109;
5113 -> 5112;
5114 -> 5110;
5114 -> 5112;
5115 -> 5111;
5115 -> 5112;
5116 -> 5112;
5117 -> 5114;
5117 -> 5116;
5117 -> 5112;
5118 -> 5108;
5119 -> 5094;
5119 -> 5091;
5120 -> 5119;
5120 -> 5077;
5121 -> 5080;
5121 -> 5077;
5122 -> 5121;
5122 -> 5076;
5123 -> 5122;
5123 -> 5074;
5123 -> 5076;
5124 -> 5076;
5125 -> 5074;
5125 -> 5110;
5125 -> 5123;
5125 -> 5121;
5125 -> 5124;
5125 -> 5076;
5126 -> 5074;
5126 -> 5110;
5126 -> 5123;
5126 -> 3464;
5127 -> 3470;
5127 -> 3464;
5128 -> 3470;
5128 -> 3464;
5129 -> 3470;
5129 -> 3464;
5130 -> 5129;
5130 -> 5126;
5130 -> 3464;
5131 -> 5130;
5131 -> 5126;
5131 -> 3464;
5132 -> 3464;
5133 -> 5132;
5133 -> 5131;
5133 -> 3464;
5134 -> 3470;
5134 -> 3464;
5135 -> 0;
5135 -> 3464;
5136 -> 3470;
5136 -> 5135;
5136 -> 5126;
5136 -> 0;
5136 -> 3441;
5137 -> 3464;
5138 -> 5137;
5139 -> 5138;
5140 -> 3470;
5140 -> 3464;
5141 -> 3464;
5142 -> 3470;
5142 -> 5141;
5142 -> 5136;
5142 -> 3441;
5143 -> 3470;
5143 -> 3464;
5144 -> 3464;
5145 -> 5143;
5145 -> 5144;
5146 -> 5145;
5146 -> 5142;
5146 -> 5144;
5147 -> 5145;
5147 -> 5142;
5147 -> 5144;
5148 -> 5147;
5148 -> 3464;
5149 -> 3470;
5149 -> 3464;
5150 -> 3470;
5150 -> 3464;
5151 -> 5150;
5151 -> 5148;
5151 -> 3464;
5152 -> 0;
5152 -> 3464;
5153 -> 5150;
5153 -> 5148;
5153 -> 3464;
5154 -> 3464;
5155 -> 5152;
5155 -> 5154;
5156 -> 5153;
5156 -> 5154;
5157 -> 5150;
5157 -> 5154;
5158 -> 5155;
5158 -> 5154;
5159 -> 5154;
5160 -> 5149;
5160 -> 5158;
5160 -> 5159;
5160 -> 5154;
5161 -> 5154;
5162 -> 5149;
5162 -> 5161;
5162 -> 5154;
5163 -> 5156;
5163 -> 5154;
5164 -> 5154;
5165 -> 5149;
5165 -> 5163;
5165 -> 5164;
5165 -> 5154;
5166 -> 5154;
5167 -> 5149;
5167 -> 5166;
5167 -> 5154;
5168 -> 3464;
5169 -> 3464;
5170 -> 5150;
5170 -> 5169;
5171 -> 5170;
5171 -> 5148;
5171 -> 5169;
5172 -> 5171;
5172 -> 3464;
5173 -> 3464;
5174 -> 5150;
5174 -> 5173;
5175 -> 5174;
5175 -> 5148;
5175 -> 5173;
5176 -> 5175;
5176 -> 3464;
5177 -> 3464;
5178 -> 5150;
5178 -> 5177;
5179 -> 5178;
5179 -> 5148;
5179 -> 5177;
5180 -> 5179;
5180 -> 3464;
5181 -> 3464;
5182 -> 5150;
5182 -> 5181;
5183 -> 5181;
5184 -> 5182;
5184 -> 5183;
5185 -> 5183;
5186 -> 5184;
5186 -> 5148;
5186 -> 5185;
5187 -> 5185;
5188 -> 5186;
5188 -> 5181;
5189 -> 5188;
5189 -> 5181;
5190 -> 5188;
5190 -> 5181;
5191 -> 5190;
5191 -> 3464;
5192 -> 5191;
5192 -> 3464;
5193 -> 4624;
5193 -> 5192;
5193 -> 3464;
5194 -> 4624;
5194 -> 5192;
5194 -> 5193;
5195 -> 4624;
5195 -> 5192;
5195 -> 0;
5195 -> 3464;
5196 -> 4624;
5196 -> 5192;
5196 -> 3464;
5197 -> 4628;
5197 -> 5196;
5198 -> 4624;
5198 -> 5192;
5198 -> 3464;
5199 -> 4640;
5199 -> 5192;
5199 -> 3464;
5200 -> 4584;
5200 -> 5192;
5201 -> 4585;
5201 -> 5192;
5202 -> 5200;
5202 -> 5192;
5203 -> 5201;
5203 -> 5192;
5204 -> 5192;
5205 -> 5192;
5206 -> 5192;
5207 -> 5203;
5207 -> 5206;
5207 -> 5192;
5208 -> 5192;
5209 -> 5192;
5209 -> 5208;
5210 -> 5192;
5210 -> 0;
5211 -> 5192;
5212 -> 5205;
5212 -> 5211;
5213 -> 5212;
5214 -> 5212;
5215 -> 5192;
5215 -> 5212;
5216 -> 5212;
5217 -> 5215;
5217 -> 5216;
5218 -> 5216;
5219 -> 5217;
5219 -> 5218;
5220 -> 5218;
5221 -> 5219;
5221 -> 5220;
5221 -> 5218;
5222 -> 5218;
5223 -> 5222;
5223 -> 5216;
5224 -> 5192;
5224 -> 5223;
5225 -> 5192;
5226 -> 4737;
5226 -> 0;
5226 -> 5192;
5227 -> 3470;
5227 -> 3464;
5228 -> 5227;
5228 -> 5192;
5228 -> 3464;
5229 -> 3470;
5229 -> 3464;
5230 -> 5229;
5230 -> 5228;
5230 -> 3464;
5231 -> 4624;
5231 -> 5230;
5231 -> 3464;
5232 -> 4624;
5232 -> 5230;
5232 -> 5231;
5233 -> 4624;
5233 -> 5230;
5233 -> 0;
5233 -> 3464;
5234 -> 4624;
5234 -> 5230;
5234 -> 3464;
5235 -> 4628;
5235 -> 5234;
5236 -> 5235;
5237 -> 5235;
5238 -> 4624;
5238 -> 5230;
5238 -> 5235;
5239 -> 5235;
5240 -> 5238;
5240 -> 5239;
5241 -> 5239;
5242 -> 5240;
5242 -> 5241;
5243 -> 5241;
5244 -> 5242;
5244 -> 5243;
5244 -> 5241;
5245 -> 5241;
5246 -> 5245;
5246 -> 5239;
5247 -> 4624;
5247 -> 5230;
5247 -> 5246;
5248 -> 4624;
5248 -> 5230;
5248 -> 3464;
5249 -> 4640;
5249 -> 5230;
5249 -> 3464;
5250 -> 4584;
5250 -> 5230;
5251 -> 4585;
5251 -> 5230;
5252 -> 5250;
5252 -> 5230;
5253 -> 5251;
5253 -> 5230;
5254 -> 5230;
5255 -> 5230;
5256 -> 5230;
5257 -> 5253;
5257 -> 5256;
5257 -> 5230;
5258 -> 5230;
5259 -> 5230;
5259 -> 5258;
5260 -> 5230;
5260 -> 0;
5261 -> 5230;
5262 -> 5255;
5262 -> 5261;
5263 -> 5262;
5264 -> 5262;
5265 -> 5230;
5265 -> 5262;
5266 -> 5262;
5267 -> 5265;
5267 -> 5266;
5268 -> 5266;
5269 -> 5267;
5269 -> 5268;
5270 -> 5268;
5271 -> 5269;
5271 -> 5270;
5271 -> 5268;
5272 -> 5268;
5273 -> 5272;
5273 -> 5266;
5274 -> 5230;
5274 -> 5273;
5275 -> 5230;
5276 -> 4737;
5276 -> 0;
5276 -> 5230;
5277 -> 0;
5277 -> 5276;
5278 -> 5277;
5278 -> 4738;
5278 -> 5230;
5278 -> 5276;
5279 -> 5276;
5280 -> 5279;
5281 -> 5278;
5281 -> 5280;
5282 -> 5281;
5282 -> 5279;
5283 -> 4624;
5283 -> 5278;
5283 -> 3464;
5284 -> 4624;
5284 -> 5278;
5284 -> 5283;
5285 -> 4624;
5285 -> 5278;
5285 -> 0;
5285 -> 3464;
5286 -> 4624;
5286 -> 5278;
5286 -> 3464;
5287 -> 4628;
5287 -> 5286;
5288 -> 5287;
5289 -> 5287;
5290 -> 4624;
5290 -> 5278;
5290 -> 5287;
5291 -> 5287;
5292 -> 5290;
5292 -> 5291;
5293 -> 5291;
5294 -> 5292;
5294 -> 5293;
5295 -> 5293;
5296 -> 5294;
5296 -> 5295;
5296 -> 5293;
5297 -> 5293;
5298 -> 5297;
5298 -> 5291;
5299 -> 4624;
5299 -> 5278;
5299 -> 5298;
5300 -> 4624;
5300 -> 5278;
5300 -> 3464;
5301 -> 4640;
5301 -> 5278;
5301 -> 3464;
5302 -> 4584;
5302 -> 5278;
5303 -> 4585;
5303 -> 5278;
5304 -> 5302;
5304 -> 5278;
5305 -> 5303;
5305 -> 5278;
5306 -> 5278;
5307 -> 5278;
5308 -> 5278;
5309 -> 5305;
5309 -> 5308;
5309 -> 5278;
5310 -> 5278;
5311 -> 5278;
5311 -> 5310;
5312 -> 5278;
5312 -> 0;
5313 -> 5278;
5314 -> 5307;
5314 -> 5313;
5315 -> 5314;
5316 -> 5314;
5317 -> 5278;
5317 -> 5314;
5318 -> 5314;
5319 -> 5317;
5319 -> 5318;
5320 -> 5318;
5321 -> 5319;
5321 -> 5320;
5322 -> 5320;
5323 -> 5321;
5323 -> 5322;
5323 -> 5320;
5324 -> 5320;
5325 -> 5324;
5325 -> 5318;
5326 -> 5278;
5326 -> 5325;
5327 -> 5278;
5328 -> 5074;
5328 -> 5278;
5328 -> 3464;
5329 -> 3470;
5329 -> 3464;
5330 -> 5329;
5330 -> 5278;
5330 -> 3464;
5331 -> 0;
5331 -> 5330;
5332 -> 4584;
5332 -> 5331;
5333 -> 4585;
5333 -> 5331;
5334 -> 5332;
5334 -> 5331;
5335 -> 5333;
5335 -> 5331;
5336 -> 5331;
5337 -> 5331;
5338 -> 5331;
5339 -> 5335;
5339 -> 5338;
5339 -> 5331;
5340 -> 5331;
5341 -> 5331;
5341 -> 5340;
5342 -> 5331;
5342 -> 0;
5343 -> 5331;
5344 -> 5337;
5344 -> 5343;
5345 -> 5344;
5346 -> 5344;
5347 -> 5331;
5347 -> 5344;
5348 -> 5344;
5349 -> 5347;
5349 -> 5348;
5350 -> 5348;
5351 -> 5349;
5351 -> 5350;
5352 -> 5350;
5353 -> 5351;
5353 -> 5352;
5353 -> 5350;
5354 -> 5350;
5355 -> 5354;
5355 -> 5348;
5356 -> 5331;
5356 -> 5355;
5357 -> 5331;
5358 -> 3470;
5358 -> 3464;
5359 -> 5358;
5359 -> 5331;
5359 -> 3464;
5360 -> 4624;
5360 -> 5359;
5360 -> 3464;
5361 -> 4624;
5361 -> 5359;
5361 -> 5360;
5362 -> 4624;
5362 -> 5359;
5362 -> 0;
5362 -> 3464;
5363 -> 4624;
5363 -> 5359;
5363 -> 3464;
5364 -> 4628;
5364 -> 5363;
5365 -> 5364;
5366 -> 5364;
5367 -> 4624;
5367 -> 5359;
5367 -> 5364;
5368 -> 5364;
5369 -> 5367;
5369 -> 5368;
5370 -> 5368;
5371 -> 5369;
5371 -> 5370;
5372 -> 5370;
5373 -> 5371;
5373 -> 5372;
5373 -> 5370;
5374 -> 5370;
5375 -> 5374;
5375 -> 5368;
5376 -> 4624;
5376 -> 5359;
5376 -> 5375;
5377 -> 4624;
5377 -> 5359;
5377 -> 3464;
5378 -> 5329;
5378 -> 5359;
5379 -> 0;
5379 -> 5378;
5380 -> 4640;
5380 -> 5379;
5380 -> 3464;
5381 -> 4624;
5381 -> 5379;
5381 -> 3464;
5382 -> 4624;
5382 -> 5379;
5382 -> 5381;
5383 -> 4624;
5383 -> 5379;
5383 -> 0;
5383 -> 3464;
5384 -> 4624;
5384 -> 5379;
5384 -> 3464;
5385 -> 4628;
5385 -> 5384;
5386 -> 4624;
5386 -> 5379;
5386 -> 3464;
5387 -> 5379;
5387 -> 0;
5387 -> 4525;
5388 -> 5379;
5389 -> 5388;
5389 -> 5379;
5390 -> 5379;
5390 -> 4525;
5391 -> 4552;
5391 -> 5379;
5391 -> 4551;
5392 -> 5391;
5392 -> 5379;
5392 -> 4551;
5393 -> 4552;
5393 -> 5379;
5393 -> 4551;
5394 -> 4555;
5394 -> 5393;
5395 -> 4552;
5395 -> 5379;
5395 -> 5394;
5396 -> 5391;
5396 -> 5394;
5397 -> 5394;
5398 -> 5396;
5398 -> 5397;
5399 -> 5397;
5400 -> 5398;
5400 -> 5399;
5400 -> 5397;
5401 -> 5400;
5402 -> 5398;
5402 -> 5379;
5402 -> 5400;
5403 -> 5397;
5404 -> 5403;
5404 -> 5394;
5405 -> 5395;
5405 -> 5404;
5405 -> 5394;
5406 -> 4552;
5406 -> 5405;
5407 -> 4552;
5407 -> 5379;
5407 -> 5405;
5408 -> 4556;
5408 -> 5379;
5408 -> 4577;
5408 -> 4551;
5409 -> 5379;
5409 -> 4664;
5410 -> 5409;
5410 -> 5379;
5410 -> 4664;
5411 -> 5409;
5411 -> 5379;
5411 -> 5410;
5412 -> 5411;
5412 -> 5410;
5413 -> 5410;
5414 -> 5412;
5414 -> 5413;
5415 -> 5414;
5415 -> 5379;
5415 -> 0;
5415 -> 5413;
5416 -> 5414;
5416 -> 5379;
5416 -> 5413;
5417 -> 5413;
5418 -> 5416;
5418 -> 5417;
5419 -> 5417;
5420 -> 5418;
5420 -> 5419;
5420 -> 5417;
5421 -> 5420;
5422 -> 5418;
5422 -> 5379;
5422 -> 5420;
5423 -> 5417;
5424 -> 5423;
5424 -> 5413;
5425 -> 5415;
5425 -> 5424;
5425 -> 5413;
5426 -> 5379;
5426 -> 4687;
5427 -> 5426;
5427 -> 5379;
5427 -> 4687;
5428 -> 5426;
5428 -> 5379;
5428 -> 5427;
5429 -> 5428;
5429 -> 5427;
5430 -> 5427;
5431 -> 5429;
5431 -> 5430;
5432 -> 5431;
5432 -> 5379;
5432 -> 0;
5432 -> 5430;
5433 -> 5431;
5433 -> 5379;
5433 -> 5430;
5434 -> 5430;
5435 -> 5433;
5435 -> 5434;
5436 -> 5434;
5437 -> 5435;
5437 -> 5436;
5437 -> 5434;
5438 -> 5437;
5439 -> 5435;
5439 -> 5379;
5439 -> 5437;
5440 -> 5434;
5441 -> 5440;
5441 -> 5430;
5442 -> 5432;
5442 -> 5441;
5442 -> 5430;
5443 -> 4584;
5443 -> 5379;
5444 -> 4585;
5444 -> 5379;
5445 -> 5443;
5445 -> 5379;
5446 -> 5444;
5446 -> 5379;
5447 -> 5379;
5448 -> 5379;
5449 -> 5379;
5450 -> 5446;
5450 -> 5449;
5450 -> 5379;
5451 -> 5379;
5452 -> 5379;
5452 -> 5451;
5453 -> 5379;
5453 -> 0;
5454 -> 5379;
5455 -> 5448;
5455 -> 5454;
5456 -> 5455;
5457 -> 5455;
5458 -> 5379;
5458 -> 5455;
5459 -> 5455;
5460 -> 5458;
5460 -> 5459;
5461 -> 5459;
5462 -> 5460;
5462 -> 5461;
5463 -> 5461;
5464 -> 5462;
5464 -> 5463;
5464 -> 5461;
5465 -> 5461;
5466 -> 5465;
5466 -> 5459;
5467 -> 5379;
5467 -> 5466;
5468 -> 5379;
5469 -> 5464;
5470 -> 5462;
5470 -> 5379;
5470 -> 5464;
5471 -> 3470;
5471 -> 5379;
5471 -> 3464;
5472 -> 4476;
5472 -> 5379;
5472 -> 4475;
5473 -> 4476;
5473 -> 5379;
5473 -> 4475;
5474 -> 5473;
5474 -> 4474;
5475 -> 5379;
5475 -> 3464;
5476 -> 5379;
5476 -> 4491;
5477 -> 5476;
5477 -> 4490;
5478 -> 5379;
5478 -> 3464;
5479 -> 5478;
5479 -> 4483;
5479 -> 5379;
5479 -> 3464;
5480 -> 4486;
5480 -> 5379;
5481 -> 4306;
5481 -> 5379;
5481 -> 4305;
5482 -> 4306;
5482 -> 5379;
5482 -> 4305;
5483 -> 5482;
5483 -> 4303;
5484 -> 3441;
5485 -> 3454;
5485 -> 5484;
5485 -> 3441;
5486 -> 5379;
5486 -> 3441;
5487 -> 3444;
5487 -> 5486;
5487 -> 5379;
5487 -> 3441;
5488 -> 3450;
5488 -> 3441;
5489 -> 5488;
5489 -> 5487;
5489 -> 3441;
5490 -> 5379;
5490 -> 5489;
5490 -> 3441;
5491 -> 5489;
5491 -> 5490;
5492 -> 3451;
5492 -> 5490;
5493 -> 5490;
5494 -> 5490;
5495 -> 5491;
5495 -> 5494;
5496 -> 5492;
5496 -> 5494;
5497 -> 5493;
5497 -> 5494;
5498 -> 5495;
5498 -> 5497;
5498 -> 5494;
5499 -> 5496;
5499 -> 3451;
5499 -> 5494;
5500 -> 5497;
5500 -> 5498;
5500 -> 5499;
5501 -> 5500;
5501 -> 5499;
5502 -> 0;
5502 -> 5499;
5503 -> 5499;
5504 -> 5501;
5504 -> 5503;
5504 -> 5499;
5505 -> 5501;
5505 -> 5504;
5506 -> 5504;
5507 -> 5505;
5507 -> 5506;
5507 -> 5504;
5508 -> 5507;
5508 -> 5504;
5509 -> 5504;
5510 -> 5508;
5510 -> 5509;
5511 -> 5497;
5511 -> 5509;
5512 -> 5510;
5512 -> 5505;
5512 -> 5507;
5512 -> 5509;
5513 -> 5512;
5513 -> 5509;
5514 -> 5510;
5514 -> 5505;
5514 -> 5507;
5514 -> 5509;
5515 -> 5513;
5515 -> 5509;
5516 -> 5509;
5517 -> 5512;
5517 -> 5509;
5518 -> 5513;
5518 -> 5509;
5519 -> 5518;
5519 -> 5515;
5519 -> 5509;
5520 -> 5519;
5520 -> 5497;
5520 -> 5494;
5521 -> 3354;
5521 -> 3353;
5522 -> 3353;
5523 -> 5521;
5523 -> 5522;
5524 -> 5522;
5525 -> 5524;
5526 -> 5523;
5526 -> 5525;
5527 -> 5526;
5527 -> 5520;
5527 -> 5525;
5528 -> 5526;
5528 -> 5520;
5528 -> 5525;
5529 -> 5528;
5529 -> 5524;
5530 -> 5523;
5530 -> 5520;
5530 -> 5524;
5531 -> 5530;
5531 -> 3353;
5532 -> 3345;
5532 -> 5531;
5532 -> 3344;
5533 -> 5532;
5533 -> 3348;
5533 -> 3344;
5534 -> 3345;
5534 -> 5532;
5534 -> 3344;
5535 -> 5534;
5535 -> 3348;
5535 -> 3344;
5536 -> 3345;
5536 -> 5534;
5536 -> 3344;
5537 -> 5536;
5537 -> 3348;
5537 -> 3344;
5538 -> 3345;
5538 -> 5536;
5538 -> 3344;
5539 -> 5538;
5539 -> 3348;
5539 -> 3344;
5540 -> 3348;
5540 -> 3314;
5540 -> 5538;
5540 -> 3344;
5541 -> 3344;
5542 -> 5540;
5542 -> 5541;
5543 -> 5541;
5544 -> 5543;
5545 -> 5544;
5546 -> 5542;
5546 -> 5545;
5547 -> 5546;
5547 -> 5544;
5548 -> 3344;
5549 -> 3340;
5549 -> 5542;
5549 -> 3324;
5550 -> 5549;
5550 -> 3332;
5550 -> 3324;
5551 -> 3330;
5551 -> 3324;
5552 -> 3340;
5552 -> 5551;
5552 -> 5549;
5552 -> 3324;
5553 -> 3324;
5554 -> 3331;
5554 -> 5553;
5554 -> 3324;
5555 -> 3324;
5556 -> 3325;
5556 -> 5555;
5556 -> 3324;
5557 -> 3326;
5557 -> 5555;
5557 -> 3324;
5558 -> 5556;
5558 -> 5557;
5558 -> 3324;
5559 -> 3286;
5560 -> 3286;
5561 -> 3294;
5561 -> 5560;
5561 -> 3286;
5562 -> 3295;
5562 -> 5560;
5562 -> 3286;
5563 -> 5561;
5563 -> 5562;
5563 -> 3286;
5564 -> 3302;
5564 -> 5563;
5565 -> 3294;
5565 -> 5563;
5566 -> 3295;
5566 -> 5563;
5567 -> 5563;
5568 -> 5564;
5568 -> 5567;
5569 -> 5565;
5569 -> 5567;
5570 -> 5566;
5570 -> 5567;
5571 -> 5567;
5572 -> 5569;
5572 -> 5571;
5572 -> 5567;
5573 -> 5570;
5573 -> 5571;
5573 -> 5567;
5574 -> 5572;
5574 -> 5573;
5574 -> 5567;
5575 -> 5567;
5576 -> 5568;
5576 -> 5575;
5577 -> 5575;
5578 -> 5576;
5578 -> 5535;
5578 -> 5577;
5578 -> 5575;
5579 -> 5576;
5579 -> 3314;
5579 -> 5552;
5579 -> 5575;
5580 -> 5575;
5581 -> 5579;
5581 -> 5580;
5582 -> 5581;
5583 -> 5582;
5583 -> 5576;
5583 -> 5535;
5583 -> 5581;
5584 -> 5581;
5585 -> 5576;
5585 -> 5550;
5585 -> 5584;
5585 -> 5581;
5586 -> 5576;
5586 -> 5550;
5586 -> 5585;
5587 -> 0;
5587 -> 5585;
5588 -> 5585;
5589 -> 5582;
5589 -> 5586;
5589 -> 5583;
5589 -> 5534;
5589 -> 5588;
5589 -> 5585;
5590 -> 5582;
5590 -> 5581;
5591 -> 5581;
5592 -> 5590;
5592 -> 5589;
5592 -> 5591;
5592 -> 5581;
5593 -> 5592;
5593 -> 5567;
5594 -> 5567;
5595 -> 5569;
5595 -> 5594;
5595 -> 5567;
5596 -> 5567;
5597 -> 5570;
5597 -> 5596;
5597 -> 5567;
5598 -> 5593;
5598 -> 5592;
5598 -> 0;
5598 -> 5597;
5599 -> 5598;
5599 -> 5597;
5600 -> 5599;
5600 -> 5597;
5601 -> 5597;
5602 -> 5568;
5602 -> 5601;
5603 -> 5602;
5603 -> 3314;
5603 -> 5601;
5604 -> 5603;
5604 -> 5597;
5605 -> 5604;
5605 -> 5599;
5605 -> 5597;
5606 -> 5597;
5607 -> 5605;
5607 -> 5606;
5608 -> 5597;
5609 -> 5600;
5609 -> 5608;
5610 -> 5607;
5610 -> 5608;
5611 -> 5568;
5611 -> 5608;
5612 -> 5611;
5612 -> 3314;
5612 -> 5607;
5612 -> 5608;
5613 -> 5608;
5614 -> 5612;
5614 -> 5613;
5615 -> 5613;
5616 -> 5614;
5616 -> 5615;
5617 -> 5616;
5617 -> 5612;
5617 -> 5615;
5618 -> 5616;
5618 -> 5612;
5618 -> 5615;
5619 -> 5615;
5620 -> 5617;
5620 -> 5619;
5621 -> 5620;
5621 -> 5612;
5621 -> 5619;
5622 -> 5619;
5623 -> 5621;
5623 -> 5622;
5623 -> 5619;
5624 -> 5621;
5624 -> 5612;
5624 -> 5619;
5625 -> 5624;
5625 -> 5615;
5626 -> 0;
5626 -> 5615;
5627 -> 5615;
5628 -> 5626;
5628 -> 5627;
5629 -> 5617;
5629 -> 5627;
5630 -> 5628;
5630 -> 5627;
5631 -> 5627;
5632 -> 5627;
5633 -> 5630;
5633 -> 5632;
5634 -> 5631;
5634 -> 5632;
5635 -> 5631;
5635 -> 5632;
5636 -> 5633;
5636 -> 5632;
5637 -> 5632;
5638 -> 5637;
5638 -> 5636;
5638 -> 5629;
5638 -> 0;
5638 -> 5612;
5638 -> 5632;
5639 -> 5637;
5639 -> 5632;
5640 -> 5634;
5640 -> 5637;
5640 -> 5632;
5641 -> 5631;
5641 -> 5615;
5642 -> 5615;
5643 -> 5618;
5643 -> 5642;
5644 -> 5625;
5644 -> 5642;
5645 -> 5641;
5645 -> 5642;
5646 -> 5616;
5646 -> 5642;
5647 -> 5646;
5647 -> 5638;
5647 -> 5642;
5648 -> 5642;
5649 -> 5646;
5649 -> 5648;
5650 -> 5649;
5650 -> 5638;
5650 -> 5648;
5651 -> 5646;
5651 -> 5638;
5651 -> 5639;
5651 -> 5640;
5651 -> 5642;
5652 -> 5642;
5653 -> 5642;
5654 -> 5645;
5654 -> 5642;
5655 -> 5642;
5656 -> 5642;
5657 -> 5650;
5657 -> 5656;
5658 -> 5651;
5658 -> 5656;
5659 -> 5651;
5659 -> 5656;
5660 -> 5654;
5660 -> 5656;
5661 -> 5655;
5661 -> 5656;
5662 -> 5655;
5662 -> 5656;
5663 -> 5657;
5663 -> 5656;
5664 -> 5658;
5664 -> 5656;
5665 -> 5659;
5665 -> 5656;
5666 -> 5660;
5666 -> 5656;
5667 -> 5661;
5667 -> 5656;
5668 -> 5656;
5669 -> 5663;
5669 -> 5668;
5670 -> 5664;
5670 -> 5668;
5671 -> 5665;
5671 -> 5668;
5672 -> 5666;
5672 -> 5668;
5673 -> 5667;
5673 -> 5668;
5674 -> 5662;
5674 -> 5668;
5675 -> 5673;
5675 -> 5668;
5676 -> 5668;
5677 -> 5676;
5677 -> 5668;
5678 -> 5676;
5678 -> 5668;
5679 -> 5676;
5679 -> 5668;
5680 -> 5676;
5680 -> 5668;
5681 -> 5676;
5681 -> 5668;
5682 -> 5676;
5682 -> 5668;
5683 -> 5676;
5683 -> 5668;
5684 -> 5676;
5684 -> 5668;
5685 -> 5676;
5685 -> 5668;
5686 -> 5676;
5686 -> 5668;
5687 -> 5676;
5687 -> 5668;
5688 -> 5676;
5688 -> 5668;
5689 -> 5676;
5689 -> 5668;
5690 -> 5676;
5690 -> 5668;
5691 -> 5676;
5691 -> 5668;
5692 -> 5676;
5692 -> 5668;
5693 -> 5676;
5693 -> 5668;
5694 -> 5676;
5694 -> 5668;
5695 -> 5676;
5695 -> 5668;
5696 -> 5676;
5696 -> 5668;
5697 -> 5676;
5697 -> 5668;
5698 -> 5676;
5698 -> 5668;
5699 -> 5676;
5699 -> 5668;
5700 -> 5676;
5700 -> 5668;
5701 -> 5676;
5701 -> 5668;
5702 -> 5676;
5702 -> 5668;
5703 -> 5668;
5704 -> 5703;
5704 -> 5676;
5704 -> 5668;
5705 -> 5676;
5705 -> 5668;
5706 -> 5676;
5706 -> 5668;
5707 -> 5668;
5708 -> 5668;
5709 -> 5706;
5709 -> 5708;
5710 -> 5707;
5710 -> 5708;
5711 -> 5710;
5711 -> 5708;
5712 -> 5710;
5712 -> 5708;
5713 -> 5710;
5713 -> 5708;
5714 -> 5709;
5714 -> 5710;
5714 -> 5708;
5715 -> 5707;
5715 -> 5676;
5715 -> 5668;
5716 -> 5676;
5716 -> 5668;
5717 -> 5668;
5718 -> 5717;
5719 -> 0;
5719 -> 5717;
5720 -> 5719;
5720 -> 5718;
5720 -> 5717;
5721 -> 5720;
5721 -> 5668;
5722 -> 5721;
5722 -> 5676;
5722 -> 5668;
5723 -> 5651;
5723 -> 5668;
5724 -> 5723;
5725 -> 5669;
5725 -> 5724;
5725 -> 5723;
5726 -> 5670;
5726 -> 5724;
5726 -> 5723;
5727 -> 5725;
5727 -> 5726;
5727 -> 5723;
5728 -> 5671;
5728 -> 5724;
5728 -> 5723;
5729 -> 5727;
5729 -> 5728;
5729 -> 5723;
5730 -> 5643;
5730 -> 5644;
5731 -> 5643;
5731 -> 5644;
5731 -> 5647;
5731 -> 5722;
5732 -> 5672;
5732 -> 5676;
5732 -> 5668;
5733 -> 5676;
5733 -> 5731;
5733 -> 5668;
5734 -> 5668;
5735 -> 5676;
5735 -> 5731;
5735 -> 5734;
5735 -> 5668;
5736 -> 5655;
5736 -> 5615;
5737 -> 5736;
5737 -> 5613;
5738 -> 5612;
5738 -> 5737;
5738 -> 5731;
5738 -> 5644;
5738 -> 5732;
5738 -> 5608;
5739 -> 5609;
5739 -> 5613;
5739 -> 5608;
5740 -> 5613;
5740 -> 5738;
5740 -> 5739;
5740 -> 5608;
5741 -> 5740;
5741 -> 5613;
5742 -> 5740;
5742 -> 5613;
5743 -> 5741;
5743 -> 5613;
5744 -> 5613;
5745 -> 5743;
5745 -> 5744;
5746 -> 5742;
5746 -> 5744;
5747 -> 5746;
5747 -> 5740;
5747 -> 5744;
5748 -> 5745;
5748 -> 5744;
5749 -> 5744;
5750 -> 5746;
5750 -> 5749;
5751 -> 5750;
5751 -> 5748;
5751 -> 5749;
5752 -> 5746;
5752 -> 5748;
5752 -> 5744;
5753 -> 5744;
5754 -> 5752;
5754 -> 5753;
5755 -> 5744;
5756 -> 5754;
5756 -> 5755;
5757 -> 5744;
5758 -> 5744;
5759 -> 5747;
5759 -> 5758;
5760 -> 5747;
5760 -> 5758;
5761 -> 5748;
5761 -> 5758;
5762 -> 5751;
5762 -> 5758;
5763 -> 5754;
5763 -> 5758;
5764 -> 5756;
5764 -> 5758;
5765 -> 5756;
5765 -> 5758;
5766 -> 5757;
5766 -> 5758;
5767 -> 5757;
5767 -> 5758;
5768 -> 5756;
5768 -> 5758;
5769 -> 5756;
5769 -> 5758;
5770 -> 5757;
5770 -> 5758;
5771 -> 5757;
5771 -> 5758;
5772 -> 5762;
5772 -> 5758;
5773 -> 5763;
5773 -> 5758;
5774 -> 5764;
5774 -> 5758;
5775 -> 5766;
5775 -> 5758;
5776 -> 5767;
5776 -> 5758;
5777 -> 5770;
5777 -> 5758;
5778 -> 5758;
5779 -> 5772;
5779 -> 5778;
5780 -> 5773;
5780 -> 5778;
5781 -> 5774;
5781 -> 5778;
5782 -> 5775;
5782 -> 5778;
5783 -> 5776;
5783 -> 5778;
5784 -> 5777;
5784 -> 5778;
5785 -> 5771;
5785 -> 5778;
5786 -> 5784;
5786 -> 5778;
5787 -> 5778;
5788 -> 5787;
5788 -> 5778;
5789 -> 5787;
5789 -> 5778;
5790 -> 5787;
5790 -> 5778;
5791 -> 5787;
5791 -> 5778;
5792 -> 5787;
5792 -> 5778;
5793 -> 5787;
5793 -> 5778;
5794 -> 5787;
5794 -> 5778;
5795 -> 5787;
5795 -> 5778;
5796 -> 5787;
5796 -> 5778;
5797 -> 5787;
5797 -> 5778;
5798 -> 5787;
5798 -> 5778;
5799 -> 5787;
5799 -> 5778;
5800 -> 5787;
5800 -> 5778;
5801 -> 5787;
5801 -> 5778;
5802 -> 5787;
5802 -> 5778;
5803 -> 5787;
5803 -> 5778;
5804 -> 5787;
5804 -> 5778;
5805 -> 5787;
5805 -> 5778;
5806 -> 5787;
5806 -> 5778;
5807 -> 5787;
5807 -> 5778;
5808 -> 5787;
5808 -> 5778;
5809 -> 5787;
5809 -> 5778;
5810 -> 5787;
5810 -> 5778;
5811 -> 5787;
5811 -> 5778;
5812 -> 5787;
5812 -> 5778;
5813 -> 5787;
5813 -> 5778;
5814 -> 5778;
5815 -> 5814;
5815 -> 5787;
5815 -> 5778;
5816 -> 5787;
5816 -> 5778;
5817 -> 5787;
5817 -> 5778;
5818 -> 5778;
5819 -> 5778;
5820 -> 5817;
5820 -> 5819;
5821 -> 5818;
5821 -> 5819;
5822 -> 5821;
5822 -> 5819;
5823 -> 5821;
5823 -> 5819;
5824 -> 5821;
5824 -> 5819;
5825 -> 5820;
5825 -> 5821;
5825 -> 5819;
5826 -> 5818;
5826 -> 5787;
5826 -> 5778;
5827 -> 5787;
5827 -> 5778;
5828 -> 5778;
5829 -> 5828;
5830 -> 0;
5830 -> 5828;
5831 -> 5830;
5831 -> 5829;
5831 -> 5828;
5832 -> 5831;
5832 -> 5778;
5833 -> 5832;
5833 -> 5787;
5833 -> 5778;
5834 -> 5765;
5834 -> 5778;
5835 -> 5834;
5836 -> 5779;
5836 -> 5835;
5836 -> 5834;
5837 -> 5780;
5837 -> 5835;
5837 -> 5834;
5838 -> 5836;
5838 -> 5837;
5838 -> 5834;
5839 -> 5781;
5839 -> 5835;
5839 -> 5834;
5840 -> 5838;
5840 -> 5839;
5840 -> 5834;
5841 -> 5783;
5841 -> 5778;
5842 -> 5841;
5843 -> 5787;
5843 -> 5842;
5844 -> 5782;
5844 -> 5841;
5845 -> 5787;
5845 -> 5768;
5845 -> 5778;
5846 -> 5778;
5847 -> 5787;
5847 -> 5768;
5847 -> 5846;
5847 -> 5778;
5848 -> 5757;
5848 -> 5613;
5849 -> 5768;
5849 -> 5613;
5850 -> 5768;
5850 -> 5613;
5851 -> 5849;
5851 -> 5613;
5852 -> 5613;
5853 -> 5851;
5853 -> 5852;
5854 -> 5850;
5854 -> 5852;
5855 -> 5853;
5855 -> 5852;
5856 -> 5854;
5856 -> 5768;
5856 -> 5852;
5857 -> 5852;
5858 -> 5854;
5858 -> 5857;
5859 -> 5858;
5859 -> 5852;
5860 -> 5852;
5861 -> 5856;
5861 -> 5860;
5862 -> 5852;
5863 -> 5861;
5863 -> 5862;
5864 -> 5853;
5864 -> 5854;
5864 -> 5863;
5864 -> 5852;
5865 -> 5852;
5866 -> 5852;
5867 -> 5855;
5867 -> 5866;
5868 -> 5856;
5868 -> 5866;
5869 -> 5856;
5869 -> 5866;
5870 -> 5859;
5870 -> 5866;
5871 -> 5861;
5871 -> 5866;
5872 -> 5863;
5872 -> 5866;
5873 -> 5863;
5873 -> 5866;
5874 -> 5863;
5874 -> 5866;
5875 -> 5864;
5875 -> 5866;
5876 -> 5863;
5876 -> 5866;
5877 -> 5863;
5877 -> 5866;
5878 -> 5865;
5878 -> 5866;
5879 -> 5865;
5879 -> 5866;
5880 -> 5870;
5880 -> 5866;
5881 -> 5871;
5881 -> 5866;
5882 -> 5872;
5882 -> 5866;
5883 -> 5878;
5883 -> 5866;
5884 -> 5866;
5885 -> 5880;
5885 -> 5884;
5886 -> 5881;
5886 -> 5884;
5887 -> 5882;
5887 -> 5884;
5888 -> 5883;
5888 -> 5884;
5889 -> 5879;
5889 -> 5884;
5890 -> 5888;
5890 -> 5884;
5891 -> 5884;
5892 -> 5891;
5892 -> 5867;
5892 -> 5869;
5892 -> 5876;
5892 -> 5873;
5892 -> 5877;
5892 -> 5890;
5892 -> 5768;
5892 -> 5884;
5893 -> 5891;
5893 -> 5884;
5894 -> 5891;
5894 -> 5884;
5895 -> 5891;
5895 -> 5884;
5896 -> 5891;
5896 -> 5884;
5897 -> 5891;
5897 -> 5884;
5898 -> 5891;
5898 -> 5884;
5899 -> 5891;
5899 -> 5884;
5900 -> 5891;
5900 -> 5884;
5901 -> 5891;
5901 -> 5884;
5902 -> 5891;
5902 -> 5884;
5903 -> 5891;
5903 -> 5884;
5904 -> 5891;
5904 -> 5884;
5905 -> 5891;
5905 -> 5884;
5906 -> 5891;
5906 -> 5884;
5907 -> 5891;
5907 -> 5884;
5908 -> 5891;
5908 -> 5884;
5909 -> 5891;
5909 -> 5884;
5910 -> 5891;
5910 -> 5884;
5911 -> 5891;
5911 -> 5884;
5912 -> 5891;
5912 -> 5884;
5913 -> 5891;
5913 -> 5884;
5914 -> 5891;
5914 -> 5884;
5915 -> 5891;
5915 -> 5884;
5916 -> 5891;
5916 -> 5884;
5917 -> 5891;
5917 -> 5884;
5918 -> 5891;
5918 -> 5884;
5919 -> 5884;
5920 -> 5919;
5920 -> 5891;
5920 -> 5884;
5921 -> 5891;
5921 -> 5884;
5922 -> 5891;
5922 -> 5884;
5923 -> 5884;
5924 -> 5884;
5925 -> 5922;
5925 -> 5924;
5926 -> 5923;
5926 -> 5924;
5927 -> 5926;
5927 -> 5924;
5928 -> 5926;
5928 -> 5924;
5929 -> 5926;
5929 -> 5924;
5930 -> 5925;
5930 -> 5926;
5930 -> 5924;
5931 -> 5923;
5931 -> 5891;
5931 -> 5884;
5932 -> 5891;
5932 -> 5884;
5933 -> 5884;
5934 -> 5933;
5935 -> 0;
5935 -> 5933;
5936 -> 5935;
5936 -> 5934;
5936 -> 5933;
5937 -> 5936;
5937 -> 5884;
5938 -> 5937;
5938 -> 5891;
5938 -> 5884;
5939 -> 5873;
5939 -> 5884;
5940 -> 5939;
5941 -> 5885;
5941 -> 5940;
5941 -> 5939;
5942 -> 5886;
5942 -> 5940;
5942 -> 5939;
5943 -> 5941;
5943 -> 5942;
5943 -> 5939;
5944 -> 5887;
5944 -> 5940;
5944 -> 5939;
5945 -> 5943;
5945 -> 5944;
5945 -> 5939;
5946 -> 5891;
5946 -> 5892;
5946 -> 5884;
5947 -> 5884;
5948 -> 5891;
5948 -> 5892;
5948 -> 5947;
5948 -> 5884;
5949 -> 5865;
5949 -> 5613;
5950 -> 5608;
5951 -> 5892;
5951 -> 5950;
5952 -> 5610;
5952 -> 5608;
5953 -> 5611;
5953 -> 3314;
5953 -> 5951;
5953 -> 5952;
5953 -> 5608;
5954 -> 5953;
5954 -> 5613;
5955 -> 5953;
5955 -> 5613;
5956 -> 5954;
5956 -> 5613;
5957 -> 5613;
5958 -> 5956;
5958 -> 5957;
5959 -> 5955;
5959 -> 5957;
5960 -> 5957;
5961 -> 5959;
5961 -> 5960;
5962 -> 5961;
5962 -> 5957;
5963 -> 5958;
5963 -> 5957;
5964 -> 5962;
5964 -> 5963;
5964 -> 5953;
5964 -> 5957;
5965 -> 5962;
5965 -> 5964;
5965 -> 5958;
5965 -> 5957;
5966 -> 5959;
5966 -> 5964;
5966 -> 5957;
5967 -> 5958;
5967 -> 5957;
5968 -> 5957;
5969 -> 5959;
5969 -> 5968;
5970 -> 5969;
5970 -> 5964;
5970 -> 5968;
5971 -> 5970;
5971 -> 5957;
5972 -> 5957;
5973 -> 5966;
5973 -> 5972;
5974 -> 5957;
5975 -> 5973;
5975 -> 5974;
5976 -> 5964;
5976 -> 5957;
5977 -> 5965;
5977 -> 5957;
5978 -> 5959;
5978 -> 5975;
5978 -> 5977;
5979 -> 5957;
5980 -> 5957;
5981 -> 5966;
5981 -> 5980;
5982 -> 5967;
5982 -> 5980;
5983 -> 5966;
5983 -> 5980;
5984 -> 5971;
5984 -> 5980;
5985 -> 5973;
5985 -> 5980;
5986 -> 5975;
5986 -> 5980;
5987 -> 5975;
5987 -> 5980;
5988 -> 5975;
5988 -> 5980;
5989 -> 5976;
5989 -> 5980;
5990 -> 5978;
5990 -> 5980;
5991 -> 5975;
5991 -> 5980;
5992 -> 5979;
5992 -> 5980;
5993 -> 5979;
5993 -> 5980;
5994 -> 5984;
5994 -> 5980;
5995 -> 5985;
5995 -> 5980;
5996 -> 5986;
5996 -> 5980;
5997 -> 5992;
5997 -> 5980;
5998 -> 5980;
5999 -> 5994;
5999 -> 5998;
6000 -> 5995;
6000 -> 5998;
6001 -> 5996;
6001 -> 5998;
6002 -> 5997;
6002 -> 5998;
6003 -> 5993;
6003 -> 5998;
6004 -> 6002;
6004 -> 5998;
6005 -> 5998;
6006 -> 6005;
6006 -> 5998;
6007 -> 6005;
6007 -> 5998;
6008 -> 6005;
6008 -> 5998;
6009 -> 6005;
6009 -> 5998;
6010 -> 6005;
6010 -> 5998;
6011 -> 6005;
6011 -> 5998;
6012 -> 6005;
6012 -> 5998;
6013 -> 6005;
6013 -> 5998;
6014 -> 6005;
6014 -> 5998;
6015 -> 6005;
6015 -> 5998;
6016 -> 6005;
6016 -> 5998;
6017 -> 6005;
6017 -> 5998;
6018 -> 6005;
6018 -> 5998;
6019 -> 6005;
6019 -> 5998;
6020 -> 6005;
6020 -> 5998;
6021 -> 6005;
6021 -> 5998;
6022 -> 6005;
6022 -> 5998;
6023 -> 6005;
6023 -> 5998;
6024 -> 6005;
6024 -> 5998;
6025 -> 6005;
6025 -> 5998;
6026 -> 6005;
6026 -> 5998;
6027 -> 6005;
6027 -> 5998;
6028 -> 6005;
6028 -> 5998;
6029 -> 6005;
6029 -> 5998;
6030 -> 6005;
6030 -> 5998;
6031 -> 6005;
6031 -> 5998;
6032 -> 5998;
6033 -> 6032;
6033 -> 6005;
6033 -> 5998;
6034 -> 6005;
6034 -> 5998;
6035 -> 6005;
6035 -> 5998;
6036 -> 5998;
6037 -> 5998;
6038 -> 6035;
6038 -> 6037;
6039 -> 6036;
6039 -> 6037;
6040 -> 6039;
6040 -> 6037;
6041 -> 6039;
6041 -> 6037;
6042 -> 6039;
6042 -> 6037;
6043 -> 6038;
6043 -> 6039;
6043 -> 6037;
6044 -> 6036;
6044 -> 6005;
6044 -> 5998;
6045 -> 6005;
6045 -> 5998;
6046 -> 5998;
6047 -> 6046;
6048 -> 0;
6048 -> 6046;
6049 -> 6048;
6049 -> 6047;
6049 -> 6046;
6050 -> 6049;
6050 -> 5998;
6051 -> 6050;
6051 -> 6005;
6051 -> 5998;
6052 -> 5987;
6052 -> 5998;
6053 -> 6052;
6054 -> 5999;
6054 -> 6053;
6054 -> 6052;
6055 -> 6000;
6055 -> 6053;
6055 -> 6052;
6056 -> 6054;
6056 -> 6055;
6056 -> 6052;
6057 -> 6001;
6057 -> 6053;
6057 -> 6052;
6058 -> 6056;
6058 -> 6057;
6058 -> 6052;
6059 -> 5988;
6059 -> 5989;
6060 -> 6005;
6060 -> 5990;
6060 -> 5998;
6061 -> 5998;
6062 -> 6005;
6062 -> 5990;
6062 -> 6061;
6062 -> 5998;
6063 -> 5979;
6063 -> 5613;
6064 -> 5609;
6064 -> 5608;
6065 -> 6064;
6065 -> 5990;
6065 -> 5608;
6066 -> 5608;
6067 -> 6065;
6067 -> 6066;
6068 -> 6065;
6068 -> 6066;
6069 -> 6067;
6069 -> 6066;
6070 -> 6066;
6071 -> 6069;
6071 -> 6070;
6072 -> 6068;
6072 -> 6070;
6073 -> 6070;
6074 -> 6071;
6074 -> 6073;
6074 -> 6070;
6075 -> 6071;
6075 -> 6065;
6075 -> 0;
6075 -> 6070;
6076 -> 6075;
6077 -> 6072;
6077 -> 6076;
6078 -> 6077;
6079 -> 6077;
6080 -> 6077;
6081 -> 6077;
6082 -> 6077;
6083 -> 6077;
6084 -> 6077;
6085 -> 6077;
6086 -> 6077;
6086 -> 6075;
6087 -> 6071;
6087 -> 6075;
6088 -> 5609;
6088 -> 6086;
6088 -> 0;
6088 -> 5608;
6089 -> 6086;
6089 -> 6088;
6090 -> 6089;
6090 -> 5597;
6091 -> 5597;
6092 -> 6090;
6092 -> 6091;
6093 -> 6090;
6093 -> 6091;
6094 -> 6092;
6094 -> 6090;
6094 -> 6091;
6095 -> 6093;
6095 -> 6094;
6095 -> 6091;
6096 -> 6091;
6097 -> 6094;
6097 -> 6091;
6098 -> 6097;
6099 -> 6098;
6099 -> 6097;
6100 -> 6099;
6100 -> 6097;
6101 -> 6097;
6102 -> 6097;
6103 -> 6097;
6104 -> 6094;
6104 -> 6097;
6105 -> 6098;
6105 -> 6097;
6106 -> 6102;
6106 -> 6097;
6107 -> 6103;
6107 -> 6097;
6108 -> 6097;
6109 -> 6104;
6109 -> 6108;
6110 -> 6105;
6110 -> 6108;
6111 -> 6106;
6111 -> 6108;
6112 -> 6107;
6112 -> 6108;
6113 -> 6110;
6113 -> 6099;
6113 -> 6108;
6114 -> 6113;
6115 -> 0;
6115 -> 6113;
6116 -> 6113;
6117 -> 6097;
6118 -> 6097;
6119 -> 6118;
6119 -> 6097;
6120 -> 6098;
6120 -> 6118;
6120 -> 6097;
6121 -> 6114;
6121 -> 6118;
6121 -> 6097;
6122 -> 6100;
6122 -> 6118;
6122 -> 6097;
6123 -> 6115;
6123 -> 6118;
6123 -> 6097;
6124 -> 6095;
6124 -> 6118;
6124 -> 6097;
6125 -> 6096;
6125 -> 6097;
6127 -> 6126;
6128 -> 6127;
6129 -> 6093;
6129 -> 6091;
6130 -> 6095;
6130 -> 6091;
6131 -> 6091;
6132 -> 6091;
6133 -> 6129;
6133 -> 6132;
6134 -> 6130;
6134 -> 6132;
6135 -> 6131;
6135 -> 6132;
6136 -> 6131;
6136 -> 6132;
6137 -> 6131;
6137 -> 6132;
6138 -> 6131;
6138 -> 6132;
6139 -> 6133;
6139 -> 6132;
6140 -> 6135;
6140 -> 6132;
6141 -> 6139;
6141 -> 6140;
6141 -> 6132;
6142 -> 6133;
6142 -> 6132;
6143 -> 6099;
6143 -> 6132;
6144 -> 6134;
6144 -> 6132;
6145 -> 6095;
6145 -> 6124;
6145 -> 6132;
6146 -> 6143;
6146 -> 6145;
6146 -> 6132;
6147 -> 6141;
6147 -> 6144;
6147 -> 6095;
6147 -> 6124;
6147 -> 6099;
6147 -> 6120;
6147 -> 6123;
6147 -> 6121;
6147 -> 6122;
6147 -> 6132;
6148 -> 6147;
6148 -> 6132;
6149 -> 5563;
6150 -> 3302;
6150 -> 3286;
6151 -> 6150;
6151 -> 3254;
6152 -> 3254;
6153 -> 3273;
6153 -> 6152;
6153 -> 3254;
6154 -> 6151;
6154 -> 6153;
6155 -> 6154;
6155 -> 3254;
6156 -> 6154;
6156 -> 3254;
6157 -> 6156;
6157 -> 3216;
6158 -> 6157;
6158 -> 1;
}