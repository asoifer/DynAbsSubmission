digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 795399"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 795400"];
3 [label="param CompilationEmitTests(this) 795401"];
4 [label="param EmitMetadataTestBase(this) 795402"];
5 [label="param CSharpTestBase(this) 795403"];
6 [label="param CommonTestBase(this) 795404"];
7 [label="param TestBase(this) 795405"];
8 [label="_temp 795406"];
9 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 795407"];
10 [label="param EmitInvocationExprInIfStatementNestedInsideCatch(this) 795408"];
11 [label="string source = @'\nstatic class Test\n{\n    static public void Main()\n    {\n        int i1 = 45;\n\n        try\n        {\n        }\n        catch\n        {\n            if (i1.ToString() == null)\n            {\n            }\n        }\n        System.Console.WriteLine(i1);\n    }\n}'; 795409"];
12 [label="CompileAndVerify(source, expectedOutput: '45'); 795410"];
13 [label="source 795411"];
14 [label="param operator(string source) 795412"];
15 [label="source 795413"];
16 [label="new CSharpTestSource(source) 795414"];
17 [label="param CSharpTestSource(object value) 795415"];
18 [label="param CSharpTestSource(this) 795416"];
19 [label="Value 795417"];
20 [label="CompileAndVerify(source, expectedOutput: '45'); 795418"];
21 [label="CompileAndVerify(source, expectedOutput: '45'); 795419"];
22 [label="CompileAndVerify(source, expectedOutput: '45') 795420"];
23 [label="param CompileAndVerify(CSharpTestSource source) 795421"];
24 [label="param CompileAndVerify(IEnumerable<MetadataReference> references = null) 795422"];
25 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 795423"];
26 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 795424"];
27 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 795425"];
28 [label="param CompileAndVerify(Action<PEAssembly> assemblyValidator = null) 795426"];
29 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 795427"];
30 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 795428"];
31 [label="param CompileAndVerify(string expectedOutput = null) 795429"];
32 [label="param CompileAndVerify(int? expectedReturnCode = null) 795430"];
33 [label="param CompileAndVerify(string[] args = null) 795431"];
34 [label="param CompileAndVerify(CSharpCompilationOptions options = null) 795432"];
35 [label="param CompileAndVerify(CSharpParseOptions parseOptions = null) 795433"];
36 [label="param CompileAndVerify(EmitOptions emitOptions = null) 795434"];
37 [label="param CompileAndVerify(TargetFramework targetFramework = TargetFramework.Standard) 795435"];
38 [label="param CompileAndVerify(Verification verify = Verification.Passes) 795436"];
39 [label="param CompileAndVerify(this) 795437"];
40 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 795438"];
41 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 795439"];
42 [label="(expectedOutput != null) 795440"];
43 [label="options = options ?? TestOptions.ReleaseDll.WithOutputKind((expectedOutput != null) ? OutputKind.ConsoleApplication : OutputKind.DynamicallyLinkedLibrary); 795441"];
44 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 795442"];
45 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 795443"];
46 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 795444"];
47 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 795445"];
48 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 795446"];
49 [label="GetUniqueName() 795447"];
50 [label="return Guid.NewGuid().ToString('D'); 795448"];
51 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 795449"];
52 [label="var compilation = CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()); 795450"];
53 [label="CreateCompilation(source, references, options, parseOptions, targetFramework, assemblyName: GetUniqueName()) 795451"];
54 [label="param CreateCompilation(CSharpTestSource source) 795452"];
55 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 795453"];
56 [label="param CreateCompilation(CSharpCompilationOptions options = null) 795454"];
57 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 795455"];
58 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 795456"];
59 [label="param CreateCompilation(string assemblyName = '') 795457"];
60 [label="param CreateCompilation(string sourceFileName = '') 795458"];
61 [label="param CreateCompilation(bool skipUsesIsNullable = false) 795459"];
62 [label="source 795460"];
63 [label="targetFramework 795461"];
64 [label="references 795462"];
65 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 795463"];
66 [label="param GetReferences(TargetFramework tf) 795464"];
67 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 795465"];
68 [label="var references = GetReferences(tf); 795466"];
69 [label="GetReferences(tf) 795467"];
70 [label="param GetReferences(TargetFramework targetFramework) 795468"];
71 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 795469"];
72 [label="StandardReferences 795470"];
73 [label="RuntimeUtilities.IsCoreClrRuntime 795471"];
74 [label="Mscorlib46ExtendedReferences 795472"];
75 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 795473"];
76 [label="TestBase.ValueTupleRef 795474"];
77 [label="TestReferences.NetFx.ValueTuple.tuplelib 795475"];
78 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 795476"];
79 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 795477"];
80 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 795478"];
81 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 795479"];
82 [label="return references; 795480"];
83 [label="options 795481"];
84 [label="parseOptions 795482"];
85 [label="assemblyName 795483"];
86 [label="sourceFileName 795484"];
87 [label="skipUsesIsNullable 795485"];
88 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 795486"];
89 [label="param CreateEmptyCompilation(CSharpTestSource source) 795487"];
90 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 795488"];
91 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 795489"];
92 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 795490"];
93 [label="param CreateEmptyCompilation(string assemblyName = '') 795491"];
94 [label="param CreateEmptyCompilation(string sourceFileName = '') 795492"];
95 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 795493"];
96 [label="source 795494"];
97 [label="references 795495"];
98 [label="options 795496"];
99 [label="parseOptions 795497"];
100 [label="assemblyName 795498"];
101 [label="sourceFileName 795499"];
102 [label="skipUsesIsNullable 795500"];
103 [label="null 795501"];
104 [label="experimentalFeature: null 795502"];
105 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 795503"];
106 [label="param CreateCompilationCore(CSharpTestSource source) 795504"];
107 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 795505"];
108 [label="param CreateCompilationCore(CSharpCompilationOptions options) 795506"];
109 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 795507"];
110 [label="param CreateCompilationCore(string assemblyName) 795508"];
111 [label="param CreateCompilationCore(string sourceFileName) 795509"];
112 [label="param CreateCompilationCore(bool skipUsesIsNullable) 795510"];
113 [label="param CreateCompilationCore(MessageID? experimentalFeature) 795511"];
114 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 795512"];
115 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 795513"];
116 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 795514"];
117 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 795515"];
118 [label="param GetSyntaxTrees(string sourceFileName = '') 795516"];
119 [label="param GetSyntaxTrees(this) 795517"];
120 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 795518"];
121 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 795519"];
122 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 795520"];
123 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 795521"];
124 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 795522"];
125 [label="param Parse(string text) 795523"];
126 [label="param Parse(string filename = '') 795524"];
127 [label="param Parse(CSharpParseOptions options = null) 795525"];
128 [label="param Parse(Encoding encoding = null) 795526"];
129 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 795527"];
130 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 795528"];
131 [label="options = TestOptions.Regular; 795529"];
132 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 795530"];
133 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 795531"];
134 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 795532"];
135 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 795533"];
136 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 795534"];
137 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 795535"];
138 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 795536"];
139 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 795537"];
140 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 795538"];
141 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 795539"];
142 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 795540"];
143 [label="param CheckSerializable(SyntaxTree tree) 795541"];
144 [label="var stream = new MemoryStream(); 795542"];
145 [label="var root = tree.GetRoot(); 795543"];
146 [label="var root = tree.GetRoot(); 795544"];
147 [label="root.SerializeTo(stream); 795545"];
148 [label="root.SerializeTo(stream); 795546"];
149 [label="root.SerializeTo(stream); 795547"];
150 [label="stream.Position = 0; 795548"];
151 [label="stream.Position 795549"];
152 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 795550"];
153 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 795551"];
154 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 795552"];
155 [label="return tree; 795553"];
156 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 795554"];
157 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 795555"];
158 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 795556"];
159 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 795557"];
160 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 795558"];
161 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 795559"];
162 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 795560"];
163 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 795561"];
164 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 795562"];
165 [label="param ValidateIOperations(Func<Compilation> createCompilation) 795563"];
166 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 795564"];
167 [label="return; 795565"];
168 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 795566"];
169 [label="OutputKind.ConsoleApplication 795567"];
170 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 795568"];
171 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 795569"];
172 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 795570"];
173 [label="OutputKind.DynamicallyLinkedLibrary 795571"];
174 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 795572"];
175 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 795573"];
176 [label="true 795574"];
177 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 795575"];
178 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 795576"];
179 [label="var compilation = createCompilationLambda(); 795577"];
180 [label="var compilation = createCompilationLambda(); 795578"];
181 [label="param Create(string? assemblyName) 795579"];
182 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 795580"];
183 [label="param Create(IEnumerable<MetadataReference>? references = null) 795581"];
184 [label="param Create(CSharpCompilationOptions? options = null) 795582"];
185 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 795583"];
186 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 795584"];
187 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 795585"];
188 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 795586"];
189 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 795587"];
190 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 795588"];
191 [label="param Create(string? assemblyName) 795589"];
192 [label="param Create(CSharpCompilationOptions options) 795590"];
193 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 795591"];
194 [label="param Create(IEnumerable<MetadataReference>? references) 795592"];
195 [label="param Create(CSharpCompilation? previousSubmission) 795593"];
196 [label="param Create(Type? returnType) 795594"];
197 [label="param Create(Type? hostObjectType) 795595"];
198 [label="param Create(bool isSubmission) 795596"];
199 [label="RoslynDebug.Assert(options != null); 795597"];
200 [label="RoslynDebug.Assert(options != null); 795598"];
201 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 795599"];
202 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 795600"];
203 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 795601"];
204 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 795602"];
205 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 795603"];
206 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 795604"];
207 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 795605"];
208 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 795606"];
209 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 795607"];
210 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 795608"];
211 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 795609"];
212 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 795610"];
213 [label="new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null) 795611"];
214 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 795612"];
215 [label="param SyntaxAndDeclarationManager(string scriptClassName) 795613"];
216 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 795614"];
217 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 795615"];
218 [label="param SyntaxAndDeclarationManager(bool isSubmission) 795616"];
219 [label="param SyntaxAndDeclarationManager(State state) 795617"];
220 [label="param SyntaxAndDeclarationManager(this) 795618"];
221 [label="externalSyntaxTrees 795619"];
222 [label="scriptClassName 795620"];
223 [label="resolver 795621"];
224 [label="messageProvider 795622"];
225 [label="isSubmission 795623"];
226 [label="param SyntaxAndDeclarationManager(this) 795624"];
227 [label="param SyntaxAndDeclarationManager(this) 795625"];
228 [label="_lazyState 795626"];
229 [label="_lazyState 795627"];
230 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 795628"];
231 [label="param CSharpCompilation(string? assemblyName) 795629"];
232 [label="param CSharpCompilation(CSharpCompilationOptions options) 795630"];
233 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 795631"];
234 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 795632"];
235 [label="param CSharpCompilation(Type? submissionReturnType) 795633"];
236 [label="param CSharpCompilation(Type? hostObjectType) 795634"];
237 [label="param CSharpCompilation(bool isSubmission) 795635"];
238 [label="param CSharpCompilation(ReferenceManager? referenceManager) 795636"];
239 [label="param CSharpCompilation(bool reuseReferenceManager) 795637"];
240 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 795638"];
241 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 795639"];
242 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 795640"];
243 [label="param CSharpCompilation(this) 795641"];
244 [label="assemblyName 795642"];
245 [label="options 795643"];
246 [label="references 795644"];
247 [label="previousSubmission 795645"];
248 [label="submissionReturnType 795646"];
249 [label="hostObjectType 795647"];
250 [label="isSubmission 795648"];
251 [label="referenceManager 795649"];
252 [label="reuseReferenceManager 795650"];
253 [label="syntaxAndDeclarations 795651"];
254 [label="syntaxAndDeclarations.ExternalSyntaxTrees 795652"];
255 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 795653"];
256 [label="semanticModelProvider 795654"];
257 [label="eventQueue 795655"];
258 [label="param CSharpCompilation(this) 795656"];
259 [label="param CSharpCompilation(string? assemblyName) 795657"];
260 [label="param CSharpCompilation(CSharpCompilationOptions options) 795658"];
261 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 795659"];
262 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 795660"];
263 [label="param CSharpCompilation(Type? submissionReturnType) 795661"];
264 [label="param CSharpCompilation(Type? hostObjectType) 795662"];
265 [label="param CSharpCompilation(bool isSubmission) 795663"];
266 [label="param CSharpCompilation(ReferenceManager? referenceManager) 795664"];
267 [label="param CSharpCompilation(bool reuseReferenceManager) 795665"];
268 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 795666"];
269 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 795667"];
270 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 795668"];
271 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 795669"];
272 [label="param CSharpCompilation(this) 795670"];
273 [label="assemblyName 795671"];
274 [label="references 795672"];
275 [label="features 795673"];
276 [label="isSubmission 795674"];
277 [label="semanticModelProvider 795675"];
278 [label="eventQueue 795676"];
279 [label="param CSharpCompilation(this) 795677"];
280 [label="param CSharpCompilation(this) 795678"];
281 [label="_options 795679"];
282 [label="_globalImports 795680"];
283 [label="_previousSubmissionImports 795681"];
284 [label="_globalNamespaceAlias 795682"];
285 [label="_scriptClass 795683"];
286 [label="_lazyHostObjectTypeSymbol 795684"];
287 [label="_lazyImportInfos 795685"];
288 [label="_conversions 795686"];
289 [label="_anonymousTypeManager 795687"];
290 [label="_lazyGlobalNamespace 795688"];
291 [label="builtInOperators 795689"];
292 [label="_lazyAssemblySymbol 795690"];
293 [label="_referenceManager 795691"];
294 [label="_syntaxAndDeclarations 795692"];
295 [label="_lazyEntryPoint 795693"];
296 [label="_lazyEmitNullablePublicOnly 795694"];
297 [label="_lazyCompilationUnitCompletedTrees 795695"];
298 [label="NullableAnalysisData 795696"];
299 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 795697"];
300 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 795698"];
301 [label="_externAliasTargets 795699"];
302 [label="_moduleInitializerMethods 795700"];
303 [label="_binderFactories 795701"];
304 [label="_ignoreAccessibilityBinderFactories 795702"];
305 [label="_lazyDeclarationDiagnostics 795703"];
306 [label="_declarationDiagnosticsFrozen 795704"];
307 [label="new DiagnosticBag() 795705"];
308 [label="_additionalCodegenWarnings = new DiagnosticBag() 795706"];
309 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 795707"];
310 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 795708"];
311 [label="WellKnownMemberSignatureComparer 795709"];
312 [label="_options 795710"];
313 [label="this.builtInOperators = new BuiltInOperators(this); 795711"];
314 [label="this.builtInOperators = new BuiltInOperators(this); 795712"];
315 [label="new BuiltInOperators(this) 795713"];
316 [label="param BuiltInOperators(CSharpCompilation compilation) 795714"];
317 [label="param BuiltInOperators(this) 795715"];
318 [label="_compilation 795716"];
319 [label="_builtInUnaryOperators 795717"];
320 [label="_builtInOperators 795718"];
321 [label="_compilation 795719"];
322 [label="this.builtInOperators 795720"];
323 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 795721"];
324 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 795722"];
325 [label="_scriptClass 795723"];
326 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 795724"];
327 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 795725"];
328 [label="_globalImports 795726"];
329 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 795727"];
330 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 795728"];
331 [label="_previousSubmissionImports 795729"];
332 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 795730"];
333 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 795731"];
334 [label="_globalNamespaceAlias 795732"];
335 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 795733"];
336 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 795734"];
337 [label="_anonymousTypeManager 795735"];
338 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 795736"];
339 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 795737"];
340 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 795738"];
341 [label="LanguageVersion? result = null; 795739"];
342 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 795740"];
343 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 795741"];
344 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 795742"];
345 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 795743"];
346 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 795744"];
347 [label="this.LanguageVersion 795745"];
348 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 795746"];
349 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795747"];
350 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795748"];
351 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795749"];
352 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795750"];
353 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795751"];
354 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795752"];
355 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 795753"];
356 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 795754"];
357 [label="this.Options 795755"];
358 [label="get\n            {\n                return _options;\n            } 795756"];
359 [label="return _options; 795757"];
360 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 795758"];
361 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 795759"];
362 [label="_referenceManager 795760"];
363 [label="_syntaxAndDeclarations 795761"];
364 [label="Debug.Assert(_lazyAssemblySymbol is null); 795762"];
365 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 795763"];
366 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 795764"];
367 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 795765"];
368 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 795766"];
369 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 795767"];
370 [label="compilation.AddSyntaxTrees(syntaxTrees) 795768"];
371 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 795769"];
372 [label="param AddSyntaxTrees(this) 795770"];
373 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 795771"];
374 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 795772"];
375 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 795773"];
376 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 795774"];
377 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 795775"];
378 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 795776"];
379 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 795777"];
380 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 795778"];
381 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 795779"];
382 [label="bool reuseReferenceManager = true; 795780"];
383 [label="int i = 0; 795781"];
384 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 795782"];
385 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 795783"];
386 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 795784"];
387 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 795785"];
388 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 795786"];
389 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 795787"];
390 [label="externalSyntaxTrees.Add(tree); 795788"];
391 [label="externalSyntaxTrees.Add(tree); 795789"];
392 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 795790"];
393 [label="i++; 795791"];
394 [label="externalSyntaxTrees.Free(); 795792"];
395 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 795793"];
396 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 795794"];
397 [label="syntaxAndDeclarations.AddSyntaxTrees(trees) 795795"];
398 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 795796"];
399 [label="param AddSyntaxTrees(this) 795797"];
400 [label="var scriptClassName = this.ScriptClassName; 795798"];
401 [label="var resolver = this.Resolver; 795799"];
402 [label="var messageProvider = this.MessageProvider; 795800"];
403 [label="var isSubmission = this.IsSubmission; 795801"];
404 [label="var state = _lazyState; 795802"];
405 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 795803"];
406 [label="var newExternalSyntaxTrees = this.ExternalSyntaxTrees.AddRange(trees); 795804"];
407 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 795805"];
408 [label="if (state == null)\n            {\n                return this.WithExternalSyntaxTrees(newExternalSyntaxTrees);\n            } 795806"];
409 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 795807"];
410 [label="this.WithExternalSyntaxTrees(newExternalSyntaxTrees) 795808"];
411 [label="param WithExternalSyntaxTrees(ImmutableArray<SyntaxTree> trees) 795809"];
412 [label="param WithExternalSyntaxTrees(this) 795810"];
413 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 795811"];
414 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 795812"];
415 [label="return new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null); 795813"];
416 [label="new SyntaxAndDeclarationManager(trees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission, state: null) 795814"];
417 [label="param SyntaxAndDeclarationManager(ImmutableArray<SyntaxTree> externalSyntaxTrees) 795815"];
418 [label="param SyntaxAndDeclarationManager(string scriptClassName) 795816"];
419 [label="param SyntaxAndDeclarationManager(SourceReferenceResolver resolver) 795817"];
420 [label="param SyntaxAndDeclarationManager(CommonMessageProvider messageProvider) 795818"];
421 [label="param SyntaxAndDeclarationManager(bool isSubmission) 795819"];
422 [label="param SyntaxAndDeclarationManager(State state) 795820"];
423 [label="param SyntaxAndDeclarationManager(this) 795821"];
424 [label="param SyntaxAndDeclarationManager(this) 795822"];
425 [label="return this.WithExternalSyntaxTrees(newExternalSyntaxTrees); 795823"];
426 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 795824"];
427 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 795825"];
428 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 795826"];
429 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 795827"];
430 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 795828"];
431 [label="param Update(ReferenceManager referenceManager) 795829"];
432 [label="param Update(bool reuseReferenceManager) 795830"];
433 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 795831"];
434 [label="param Update(this) 795832"];
435 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 795833"];
436 [label="this.PreviousSubmission 795834"];
437 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 795835"];
438 [label="ScriptCompilationInfo 795836"];
439 [label="ScriptCompilationInfo?.PreviousScriptCompilation 795837"];
440 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 795838"];
441 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 795839"];
442 [label="this.SubmissionReturnType 795840"];
443 [label="=> ScriptCompilationInfo 795841"];
444 [label="ScriptCompilationInfo 795842"];
445 [label="this.HostObjectType 795843"];
446 [label="=> ScriptCompilationInfo 795844"];
447 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 795845"];
448 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 795846"];
449 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 795847"];
450 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 795848"];
451 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 795849"];
452 [label="param CSharpCompilation(string? assemblyName) 795850"];
453 [label="param CSharpCompilation(CSharpCompilationOptions options) 795851"];
454 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 795852"];
455 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 795853"];
456 [label="param CSharpCompilation(Type? submissionReturnType) 795854"];
457 [label="param CSharpCompilation(Type? hostObjectType) 795855"];
458 [label="param CSharpCompilation(bool isSubmission) 795856"];
459 [label="param CSharpCompilation(ReferenceManager? referenceManager) 795857"];
460 [label="param CSharpCompilation(bool reuseReferenceManager) 795858"];
461 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 795859"];
462 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 795860"];
463 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 795861"];
464 [label="param CSharpCompilation(this) 795862"];
465 [label="previousSubmission 795863"];
466 [label="submissionReturnType 795864"];
467 [label="hostObjectType 795865"];
468 [label="syntaxAndDeclarations.ExternalSyntaxTrees 795866"];
469 [label="eventQueue 795867"];
470 [label="param CSharpCompilation(this) 795868"];
471 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 795869"];
472 [label="param CSharpCompilation(Type? submissionReturnType) 795870"];
473 [label="param CSharpCompilation(Type? hostObjectType) 795871"];
474 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 795872"];
475 [label="param CSharpCompilation(this) 795873"];
476 [label="eventQueue 795874"];
477 [label="param CSharpCompilation(this) 795875"];
478 [label="_options 795876"];
479 [label="_globalImports 795877"];
480 [label="_previousSubmissionImports 795878"];
481 [label="_globalNamespaceAlias 795879"];
482 [label="_scriptClass 795880"];
483 [label="_lazyHostObjectTypeSymbol 795881"];
484 [label="_lazyImportInfos 795882"];
485 [label="_conversions 795883"];
486 [label="_anonymousTypeManager 795884"];
487 [label="_lazyGlobalNamespace 795885"];
488 [label="builtInOperators 795886"];
489 [label="_lazyAssemblySymbol 795887"];
490 [label="_referenceManager 795888"];
491 [label="_syntaxAndDeclarations 795889"];
492 [label="_lazyEntryPoint 795890"];
493 [label="_lazyEmitNullablePublicOnly 795891"];
494 [label="_lazyCompilationUnitCompletedTrees 795892"];
495 [label="NullableAnalysisData 795893"];
496 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 795894"];
497 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 795895"];
498 [label="_externAliasTargets 795896"];
499 [label="_moduleInitializerMethods 795897"];
500 [label="_binderFactories 795898"];
501 [label="_ignoreAccessibilityBinderFactories 795899"];
502 [label="_lazyDeclarationDiagnostics 795900"];
503 [label="_declarationDiagnosticsFrozen 795901"];
504 [label="new DiagnosticBag() 795902"];
505 [label="_additionalCodegenWarnings = new DiagnosticBag() 795903"];
506 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 795904"];
507 [label="this.builtInOperators = new BuiltInOperators(this); 795905"];
508 [label="this.builtInOperators = new BuiltInOperators(this); 795906"];
509 [label="new BuiltInOperators(this) 795907"];
510 [label="param BuiltInOperators(CSharpCompilation compilation) 795908"];
511 [label="param BuiltInOperators(this) 795909"];
512 [label="_compilation 795910"];
513 [label="_builtInUnaryOperators 795911"];
514 [label="_builtInOperators 795912"];
515 [label="_compilation 795913"];
516 [label="this.builtInOperators 795914"];
517 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 795915"];
518 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 795916"];
519 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 795917"];
520 [label="LanguageVersion? result = null; 795918"];
521 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 795919"];
522 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 795920"];
523 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 795921"];
524 [label="result = version; 795922"];
525 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 795923"];
526 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795924"];
527 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795925"];
528 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795926"];
529 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795927"];
530 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795928"];
531 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 795929"];
532 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 795930"];
533 [label="referenceManager.AssertCanReuseForCompilation(this); 795931"];
534 [label="referenceManager.AssertCanReuseForCompilation(this); 795932"];
535 [label="_referenceManager 795933"];
536 [label="Debug.Assert(_lazyAssemblySymbol is null); 795934"];
537 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 795935"];
538 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 795936"];
539 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 795937"];
540 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 795938"];
541 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 795939"];
542 [label="return compilation; 795940"];
543 [label="var compilation = createCompilationLambda(); 795941"];
544 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 795942"];
545 [label="IsNullableEnabled(compilation) 795943"];
546 [label="param IsNullableEnabled(CSharpCompilation compilation) 795944"];
547 [label="compilation.SyntaxTrees 795945"];
548 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 795946"];
549 [label="_syntaxAndDeclarations.GetLazyState() 795947"];
550 [label="param GetLazyState(this) 795948"];
551 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 795949"];
552 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 795950"];
553 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 795951"];
554 [label="CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission) 795952"];
555 [label="param CreateState(ImmutableArray<SyntaxTree> externalSyntaxTrees) 795953"];
556 [label="param CreateState(string scriptClassName) 795954"];
557 [label="param CreateState(SourceReferenceResolver resolver) 795955"];
558 [label="param CreateState(CommonMessageProvider messageProvider) 795956"];
559 [label="param CreateState(bool isSubmission) 795957"];
560 [label="var treesBuilder = ArrayBuilder<SyntaxTree>.GetInstance(); 795958"];
561 [label="var ordinalMapBuilder = PooledDictionary<SyntaxTree, int>.GetInstance(); 795959"];
562 [label="var loadDirectiveMapBuilder = PooledDictionary<SyntaxTree, ImmutableArray<LoadDirective>>.GetInstance(); 795960"];
563 [label="var loadedSyntaxTreeMapBuilder = PooledDictionary<string, SyntaxTree>.GetInstance(); 795961"];
564 [label="var declMapBuilder = PooledDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>>.GetInstance(); 795962"];
565 [label="var declTable = DeclarationTable.Empty; 795963"];
566 [label="foreach (var tree in externalSyntaxTrees)\n            {\n                AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable);\n            } 795964"];
567 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 795965"];
568 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 795966"];
569 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 795967"];
570 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 795968"];
571 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 795969"];
572 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 795970"];
573 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 795971"];
574 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 795972"];
575 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 795973"];
576 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 795974"];
577 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable); 795975"];
578 [label="AppendAllSyntaxTrees(\n                    treesBuilder,\n                    tree,\n                    scriptClassName,\n                    resolver,\n                    messageProvider,\n                    isSubmission,\n                    ordinalMapBuilder,\n                    loadDirectiveMapBuilder,\n                    loadedSyntaxTreeMapBuilder,\n                    declMapBuilder,\n                    ref declTable) 795976"];
579 [label="param AppendAllSyntaxTrees(ArrayBuilder<SyntaxTree> treesBuilder) 795977"];
580 [label="param AppendAllSyntaxTrees(SyntaxTree tree) 795978"];
581 [label="param AppendAllSyntaxTrees(string scriptClassName) 795979"];
582 [label="param AppendAllSyntaxTrees(SourceReferenceResolver resolver) 795980"];
583 [label="param AppendAllSyntaxTrees(CommonMessageProvider messageProvider) 795981"];
584 [label="param AppendAllSyntaxTrees(bool isSubmission) 795982"];
585 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, int> ordinalMapBuilder) 795983"];
586 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMapBuilder) 795984"];
587 [label="param AppendAllSyntaxTrees(IDictionary<string, SyntaxTree> loadedSyntaxTreeMapBuilder) 795985"];
588 [label="param AppendAllSyntaxTrees(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 795986"];
589 [label="param AppendAllSyntaxTrees(ref DeclarationTable declTable) 795987"];
590 [label="var sourceCodeKind = tree.Options.Kind; 795988"];
591 [label="if (sourceCodeKind == SourceCodeKind.Script)\n            {\n                AppendAllLoadedSyntaxTrees(treesBuilder, tree, scriptClassName, resolver, messageProvider, isSubmission, ordinalMapBuilder, loadDirectiveMapBuilder, loadedSyntaxTreeMapBuilder, declMapBuilder, ref declTable);\n            } 795989"];
592 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 795990"];
593 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 795991"];
594 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 795992"];
595 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 795993"];
596 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 795994"];
597 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable) 795995"];
598 [label="param AddSyntaxTreeToDeclarationMapAndTable(SyntaxTree tree) 795996"];
599 [label="param AddSyntaxTreeToDeclarationMapAndTable(string scriptClassName) 795997"];
600 [label="param AddSyntaxTreeToDeclarationMapAndTable(bool isSubmission) 795998"];
601 [label="param AddSyntaxTreeToDeclarationMapAndTable(IDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> declMapBuilder) 795999"];
602 [label="param AddSyntaxTreeToDeclarationMapAndTable(ref DeclarationTable declTable) 796000"];
603 [label="var lazyRoot = new Lazy<RootSingleNamespaceDeclaration>(() => DeclarationTreeBuilder.ForTree(tree, scriptClassName, isSubmission)); 796001"];
604 [label="declMapBuilder.Add(tree, lazyRoot); 796002"];
605 [label="declMapBuilder.Add(tree, lazyRoot); 796003"];
606 [label="declMapBuilder.Add(tree, lazyRoot); 796004"];
607 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 796005"];
608 [label="declTable = declTable.AddRootDeclaration(lazyRoot); 796006"];
609 [label="AddSyntaxTreeToDeclarationMapAndTable(tree, scriptClassName, isSubmission, declMapBuilder, ref declTable); 796007"];
610 [label="treesBuilder.Add(tree); 796008"];
611 [label="treesBuilder.Add(tree); 796009"];
612 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 796010"];
613 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 796011"];
614 [label="ordinalMapBuilder.Add(tree, ordinalMapBuilder.Count); 796012"];
615 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 796013"];
616 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 796014"];
617 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 796015"];
618 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 796016"];
619 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 796017"];
620 [label="return new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable); 796018"];
621 [label="new State(\n                treesBuilder.ToImmutableAndFree(),\n                ordinalMapBuilder.ToImmutableDictionaryAndFree(),\n                loadDirectiveMapBuilder.ToImmutableDictionaryAndFree(),\n                loadedSyntaxTreeMapBuilder.ToImmutableDictionaryAndFree(),\n                declMapBuilder.ToImmutableDictionaryAndFree(),\n                declTable) 796019"];
622 [label="param State(ImmutableArray<SyntaxTree> syntaxTrees) 796020"];
623 [label="param State(ImmutableDictionary<SyntaxTree, int> syntaxTreeOrdinalMap) 796021"];
624 [label="param State(ImmutableDictionary<SyntaxTree, ImmutableArray<LoadDirective>> loadDirectiveMap) 796022"];
625 [label="param State(ImmutableDictionary<string, SyntaxTree> loadedSyntaxTreeMap) 796023"];
626 [label="param State(ImmutableDictionary<SyntaxTree, Lazy<RootSingleNamespaceDeclaration>> rootNamespaces) 796024"];
627 [label="param State(DeclarationTable declarationTable) 796025"];
628 [label="param State(this) 796026"];
629 [label="OrdinalMap 796027"];
630 [label="LoadDirectiveMap 796028"];
631 [label="LoadedSyntaxTreeMap 796029"];
632 [label="RootNamespaces 796030"];
633 [label="DeclarationTable 796031"];
634 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 796032"];
635 [label="Debug.Assert(syntaxTrees.All(tree => syntaxTrees[syntaxTreeOrdinalMap[tree]] == tree)); 796033"];
636 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 796034"];
637 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 796035"];
638 [label="Debug.Assert(syntaxTrees.SetEquals(rootNamespaces.Keys.AsImmutable(), EqualityComparer<SyntaxTree>.Default)); 796036"];
639 [label="this.SyntaxTrees 796037"];
640 [label="this.OrdinalMap 796038"];
641 [label="this.LoadDirectiveMap 796039"];
642 [label="this.LoadedSyntaxTreeMap 796040"];
643 [label="this.RootNamespaces 796041"];
644 [label="this.DeclarationTable 796042"];
645 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 796043"];
646 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 796044"];
647 [label="Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null); 796045"];
648 [label="return _lazyState; 796046"];
649 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 796047"];
650 [label="var trees = compilation.SyntaxTrees; 796048"];
651 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 796049"];
652 [label="var options = (CSharpParseOptions)trees[0].Options; 796050"];
653 [label="var options = (CSharpParseOptions)trees[0].Options; 796051"];
654 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 796052"];
655 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 796053"];
656 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 796054"];
657 [label="return compilation; 796055"];
658 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796056"];
659 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796057"];
660 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796058"];
661 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796059"];
662 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796060"];
663 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796061"];
664 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796062"];
665 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796063"];
666 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796064"];
667 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796065"];
668 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796066"];
669 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796067"];
670 [label="CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 796068"];
671 [label="param CompileAndVerify(Compilation compilation) 796069"];
672 [label="param CompileAndVerify(IEnumerable<ResourceDescription> manifestResources = null) 796070"];
673 [label="param CompileAndVerify(IEnumerable<ModuleData> dependencies = null) 796071"];
674 [label="param CompileAndVerify(Action<ModuleSymbol> sourceSymbolValidator = null) 796072"];
675 [label="param CompileAndVerify(Action<PEAssembly> validator = null) 796073"];
676 [label="param CompileAndVerify(Action<ModuleSymbol> symbolValidator = null) 796074"];
677 [label="param CompileAndVerify(SignatureDescription[] expectedSignatures = null) 796075"];
678 [label="param CompileAndVerify(string expectedOutput = null) 796076"];
679 [label="param CompileAndVerify(int? expectedReturnCode = null) 796077"];
680 [label="param CompileAndVerify(string[] args = null) 796078"];
681 [label="param CompileAndVerify(EmitOptions emitOptions = null) 796079"];
682 [label="param CompileAndVerify(Verification verify = Verification.Passes) 796080"];
683 [label="param CompileAndVerify(this) 796081"];
684 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796082"];
685 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796083"];
686 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796084"];
687 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796085"];
688 [label="translate(sourceSymbolValidator) 796086"];
689 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 796087"];
690 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 796088"];
691 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 796089"];
692 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 796090"];
693 [label="return null; 796091"];
694 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796092"];
695 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796093"];
696 [label="translate(symbolValidator) 796094"];
697 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 796095"];
698 [label="Action<IModuleSymbol> translate(Action<ModuleSymbol> action)\n            {\n                if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                }\n            } 796096"];
699 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 796097"];
700 [label="if (action != null)\n                {\n                    return (m) => action(m.GetSymbol<ModuleSymbol>());\n                }\n                else\n                {\n                    return null;\n                } 796098"];
701 [label="return null; 796099"];
702 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796100"];
703 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796101"];
704 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796102"];
705 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796103"];
706 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796104"];
707 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 796105"];
708 [label="CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify) 796106"];
709 [label="param CompileAndVerifyCommon(Compilation compilation) 796107"];
710 [label="param CompileAndVerifyCommon(IEnumerable<ResourceDescription> manifestResources = null) 796108"];
711 [label="param CompileAndVerifyCommon(IEnumerable<ModuleData> dependencies = null) 796109"];
712 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> sourceSymbolValidator = null) 796110"];
713 [label="param CompileAndVerifyCommon(Action<PEAssembly> assemblyValidator = null) 796111"];
714 [label="param CompileAndVerifyCommon(Action<IModuleSymbol> symbolValidator = null) 796112"];
715 [label="param CompileAndVerifyCommon(SignatureDescription[] expectedSignatures = null) 796113"];
716 [label="param CompileAndVerifyCommon(string expectedOutput = null) 796114"];
717 [label="param CompileAndVerifyCommon(int? expectedReturnCode = null) 796115"];
718 [label="param CompileAndVerifyCommon(string[] args = null) 796116"];
719 [label="param CompileAndVerifyCommon(EmitOptions emitOptions = null) 796117"];
720 [label="param CompileAndVerifyCommon(Verification verify = Verification.Passes) 796118"];
721 [label="param CompileAndVerifyCommon(this) 796119"];
722 [label="CustomAssert.NotNull(compilation); 796120"];
723 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 796121"];
724 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 796122"];
725 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 796123"];
726 [label="compilation.Options 796124"];
727 [label="get { return _options; } 796125"];
728 [label="return _options; 796126"];
729 [label="CustomAssert.True(expectedOutput == null ||\n                (compilation.Options.OutputKind == OutputKind.ConsoleApplication || compilation.Options.OutputKind == OutputKind.WindowsApplication),\n                'Compilation must be executable if output is expected.'); 796127"];
730 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 796128"];
731 [label="if (sourceSymbolValidator != null)\n            {\n                var module = compilation.Assembly.Modules.First();\n                sourceSymbolValidator(module);\n            } 796129"];
732 [label="CompilationVerifier result = null; 796130"];
733 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796131"];
734 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796132"];
735 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796133"];
736 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796134"];
737 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796135"];
738 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796136"];
739 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796137"];
740 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796138"];
741 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796139"];
742 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796140"];
743 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796141"];
744 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 796142"];
745 [label="Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify) 796143"];
746 [label="param Emit(Compilation compilation) 796144"];
747 [label="param Emit(IEnumerable<ModuleData> dependencies) 796145"];
748 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 796146"];
749 [label="param Emit(SignatureDescription[] expectedSignatures) 796147"];
750 [label="param Emit(string expectedOutput) 796148"];
751 [label="param Emit(int? expectedReturnCode) 796149"];
752 [label="param Emit(string[] args) 796150"];
753 [label="param Emit(Action<PEAssembly> assemblyValidator) 796151"];
754 [label="param Emit(Action<IModuleSymbol> symbolValidator) 796152"];
755 [label="param Emit(EmitOptions emitOptions) 796153"];
756 [label="param Emit(Verification verify) 796154"];
757 [label="param Emit(this) 796155"];
758 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 796156"];
759 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 796157"];
760 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 796158"];
761 [label="var verifier = new CompilationVerifier(compilation, VisualizeRealIL, dependencies); 796159"];
762 [label="new CompilationVerifier(compilation, VisualizeRealIL, dependencies) 796160"];
763 [label="param CompilationVerifier(Compilation compilation) 796161"];
764 [label="param CompilationVerifier(Func<IModuleSymbol, CompilationTestData.MethodData, IReadOnlyDictionary<int, string>, bool, string> visualizeRealIL = null) 796162"];
765 [label="param CompilationVerifier(IEnumerable<ModuleData> dependencies = null) 796163"];
766 [label="param CompilationVerifier(this) 796164"];
767 [label="_compilation 796165"];
768 [label="_testData 796166"];
769 [label="_dependencies 796167"];
770 [label="_lazyModuleSymbol 796168"];
771 [label="_allModuleData 796169"];
772 [label="_visualizeRealIL 796170"];
773 [label="_compilation 796171"];
774 [label="_dependencies 796172"];
775 [label="_visualizeRealIL 796173"];
776 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 796174"];
777 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 796175"];
778 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 796176"];
779 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 796177"];
780 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 796178"];
781 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 796179"];
782 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 796180"];
783 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures) 796181"];
784 [label="param Emit(string expectedOutput) 796182"];
785 [label="param Emit(int? expectedReturnCode) 796183"];
786 [label="param Emit(string[] args) 796184"];
787 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 796185"];
788 [label="param Emit(EmitOptions emitOptions) 796186"];
789 [label="param Emit(Verification peVerify) 796187"];
790 [label="param Emit(SignatureDescription[] expectedSignatures) 796188"];
791 [label="param Emit(this) 796189"];
792 [label="RuntimeUtilities.GetRuntimeEnvironmentFactory 796190"];
793 [label="new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 796191"];
794 [label="s_lazyFactory = new Lazy<IRuntimeEnvironmentFactory>(RuntimeUtilities.GetRuntimeEnvironmentFactory) 796192"];
795 [label="using var testEnvironment = RuntimeEnvironmentFactory.Create(_dependencies); 796193"];
796 [label="RuntimeEnvironmentFactory.Create(_dependencies) 796194"];
797 [label="param Create(IEnumerable<ModuleData> additionalDependencies = null) 796195"];
798 [label="return s_lazyFactory.Value.Create(additionalDependencies); 796196"];
799 [label="return s_lazyFactory.Value.Create(additionalDependencies); 796197"];
800 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 796198"];
801 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 796199"];
802 [label="string mainModuleName = Emit(testEnvironment, manifestResources, emitOptions); 796200"];
803 [label="Emit(testEnvironment, manifestResources, emitOptions) 796201"];
804 [label="param Emit(IRuntimeEnvironment testEnvironment) 796202"];
805 [label="param Emit(IEnumerable<ResourceDescription> manifestResources) 796203"];
806 [label="param Emit(EmitOptions emitOptions) 796204"];
807 [label="param Emit(this) 796205"];
808 [label="s_dumpCount 796206"];
809 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 796207"];
810 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 796208"];
811 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 796209"];
812 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 796210"];
813 [label="testEnvironment.Emit(_compilation, manifestResources, emitOptions); 796211"];
814 [label="param EmitCompilation(Compilation compilation) 796212"];
815 [label="param EmitCompilation(IEnumerable<ResourceDescription> manifestResources) 796213"];
816 [label="param EmitCompilation(List<ModuleData> dependencies) 796214"];
817 [label="param EmitCompilation(DiagnosticBag diagnostics) 796215"];
818 [label="param EmitCompilation(CompilationTestData testData) 796216"];
819 [label="param EmitCompilation(EmitOptions emitOptions) 796217"];
820 [label="var referencedCompilations = FindReferencedCompilations(compilation); 796218"];
821 [label="FindReferencedCompilations(compilation) 796219"];
822 [label="param FindReferencedCompilations(Compilation original) 796220"];
823 [label="var list = new List<Compilation>(); 796221"];
824 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 796222"];
825 [label="FindDirectReferencedCompilations(original) 796223"];
826 [label="param FindDirectReferencedCompilations(Compilation compilation) 796224"];
827 [label="var list = new List<Compilation>(); 796225"];
828 [label="var previousCompilation = compilation.ScriptCompilationInfo?.PreviousScriptCompilation; 796226"];
829 [label="compilation.ScriptCompilationInfo 796227"];
830 [label="=> ScriptCompilationInfo 796228"];
831 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 796229"];
832 [label="if (previousCompilation != null)\n            {\n                list.Add(previousCompilation);\n            } 796230"];
833 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 796231"];
834 [label="foreach (var reference in compilation.References.OfType<CompilationReference>())\n            {\n                list.Add(reference.Compilation);\n            } 796232"];
835 [label="get\n            {\n                return GetBoundReferenceManager().DirectiveReferences;\n            } 796233"];
836 [label="GetBoundReferenceManager() 796234"];
837 [label="param GetBoundReferenceManager(this) 796235"];
838 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 796236"];
839 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 796237"];
840 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 796238"];
841 [label="get { return this.Declarations.ReferenceDirectives; } 796239"];
842 [label="this.Declarations 796240"];
843 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 796241"];
844 [label="_syntaxAndDeclarations.GetLazyState() 796242"];
845 [label="param GetLazyState(this) 796243"];
846 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 796244"];
847 [label="return this.Declarations.ReferenceDirectives; 796245"];
848 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 796246"];
849 [label="_syntaxAndDeclarations.GetLazyState() 796247"];
850 [label="Debug.Assert(_lazyAssemblySymbol is object); 796248"];
851 [label="return _referenceManager; 796249"];
852 [label="return GetBoundReferenceManager().DirectiveReferences; 796250"];
853 [label="return list; 796251"];
854 [label="var toVisit = new Queue<Compilation>(FindDirectReferencedCompilations(original)); 796252"];
855 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 796253"];
856 [label="while (toVisit.Count > 0)\n            {\n                var current = toVisit.Dequeue();\n                if (list.Contains(current))\n                {\n                    continue;\n                }\n\n                list.Add(current);\n\n                foreach (var other in FindDirectReferencedCompilations(current))\n                {\n                    toVisit.Enqueue(other);\n                }\n            } 796254"];
857 [label="return list; 796255"];
858 [label="var referencedCompilations = FindReferencedCompilations(compilation); 796256"];
859 [label="var fullNameSet = new HashSet<string>(StringComparer.OrdinalIgnoreCase); 796257"];
860 [label="foreach (var referencedCompilation in referencedCompilations)\n            {\n                var emitData = EmitCompilationCore(referencedCompilation, null, diagnostics, null, emitOptions);\n                if (emitData.HasValue)\n                {\n                    var moduleData = new ModuleData(referencedCompilation.Assembly.Identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    emitData.Value.Assembly,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    fullNameSet.Add(moduleData.Id.FullName);\n                    dependencies.Add(moduleData);\n                }\n            } 796258"];
861 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 796259"];
862 [label="new[] { compilation } 796260"];
863 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 796261"];
864 [label="foreach (var current in (new[] { compilation }).Concat(referencedCompilations))\n            {\n                EmitReferences(current, fullNameSet, dependencies, diagnostics);\n            } 796262"];
865 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 796263"];
866 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 796264"];
867 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 796265"];
868 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics); 796266"];
869 [label="EmitReferences(current, fullNameSet, dependencies, diagnostics) 796267"];
870 [label="param EmitReferences(Compilation compilation) 796268"];
871 [label="param EmitReferences(HashSet<string> fullNameSet) 796269"];
872 [label="param EmitReferences(List<ModuleData> dependencies) 796270"];
873 [label="param EmitReferences(DiagnosticBag diagnostics) 796271"];
874 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 796272"];
875 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 796273"];
876 [label="var peRef = (PortableExecutableReference)metadataReference; 796274"];
877 [label="var metadata = peRef.GetMetadataNoCopy(); 796275"];
878 [label="var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly; 796276"];
879 [label="isManifestModule 796277"];
880 [label="var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null; 796278"];
881 [label="((AssemblyMetadata)metadata).GetAssembly().Identity 796279"];
882 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 796280"];
883 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 796281"];
884 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 796282"];
885 [label="foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                } 796283"];
886 [label="EnumerateModules(metadata) 796284"];
887 [label="param EnumerateModules(Metadata metadata) 796285"];
888 [label="return (metadata.Kind == MetadataImageKind.Assembly) ? ((AssemblyMetadata)metadata).GetModules().AsEnumerable() : SpecializedCollections.SingletonEnumerable((ModuleMetadata)metadata); 796286"];
889 [label="(metadata.Kind == MetadataImageKind.Assembly) 796287"];
890 [label="ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent(); 796288"];
891 [label="ModuleData moduleData; 796289"];
892 [label="if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    } 796290"];
893 [label="fullNameSet.Add(identity.GetDisplayName()); 796291"];
894 [label="fullNameSet.Add(identity.GetDisplayName()); 796292"];
895 [label="fullNameSet.Add(identity.GetDisplayName()); 796293"];
896 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 796294"];
897 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 796295"];
898 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 796296"];
899 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 796297"];
900 [label="moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true); 796298"];
901 [label="dependencies.Add(moduleData); 796299"];
902 [label="dependencies.Add(moduleData); 796300"];
903 [label="isManifestModule = false; 796301"];
904 [label="if (metadataReference is CompilationReference)\n                {\n                    continue;\n                } 796302"];
905 [label="if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                } 796303"];
906 [label="ModuleData moduleData; 796304"];
907 [label="isManifestModule = false; 796305"];
908 [label="foreach (var metadataReference in compilation.References)\n            {\n                if (metadataReference is CompilationReference)\n                {\n                    continue;\n                }\n\n                var peRef = (PortableExecutableReference)metadataReference;\n                var metadata = peRef.GetMetadataNoCopy();\n                var isManifestModule = peRef.Properties.Kind == MetadataImageKind.Assembly;\n                var identity = isManifestModule\n                    ? ((AssemblyMetadata)metadata).GetAssembly().Identity\n                    : null;\n\n                // If this is an indirect reference to a Compilation then it is already been emitted \n                // so no more work to be done.\n                if (isManifestModule && fullNameSet.Contains(identity.GetDisplayName()))\n                {\n                    continue;\n                }\n\n                foreach (var module in EnumerateModules(metadata))\n                {\n                    ImmutableArray<byte> bytes = module.Module.PEReaderOpt.GetEntireImage().GetContent();\n                    ModuleData moduleData;\n                    if (isManifestModule)\n                    {\n                        fullNameSet.Add(identity.GetDisplayName());\n                        moduleData = new ModuleData(identity,\n                                                    OutputKind.DynamicallyLinkedLibrary,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n                    else\n                    {\n                        moduleData = new ModuleData(module.Name,\n                                                    bytes,\n                                                    pdb: default(ImmutableArray<byte>),\n                                                    inMemoryModule: true);\n                    }\n\n                    dependencies.Add(moduleData);\n                    isManifestModule = false;\n                }\n            } 796306"];
909 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 796307"];
910 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 796308"];
911 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 796309"];
912 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 796310"];
913 [label="return EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions); 796311"];
914 [label="EmitCompilationCore(compilation, manifestResources, diagnostics, testData, emitOptions) 796312"];
915 [label="param EmitCompilationCore(Compilation compilation) 796313"];
916 [label="param EmitCompilationCore(IEnumerable<ResourceDescription> manifestResources) 796314"];
917 [label="param EmitCompilationCore(DiagnosticBag diagnostics) 796315"];
918 [label="param EmitCompilationCore(CompilationTestData testData) 796316"];
919 [label="param EmitCompilationCore(EmitOptions emitOptions) 796317"];
920 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 796318"];
921 [label="if (emitOptions == null)\n                emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 796319"];
922 [label="emitOptions = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Embedded); 796320"];
923 [label="using var executableStream = new MemoryStream(); 796321"];
924 [label="var pdb = default(ImmutableArray<byte>); 796322"];
925 [label="var assembly = default(ImmutableArray<byte>); 796323"];
926 [label="var pdbStream = (emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) ? new MemoryStream() : null; 796324"];
927 [label="(emitOptions.DebugInformationFormat != DebugInformationFormat.Embedded) 796325"];
928 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 796326"];
929 [label="compilation.SyntaxTrees 796327"];
930 [label="get\n            {\n                return this.SyntaxTrees;\n            } 796328"];
931 [label="this.SyntaxTrees 796329"];
932 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 796330"];
933 [label="_syntaxAndDeclarations.GetLazyState() 796331"];
934 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 796332"];
935 [label="return this.SyntaxTrees; 796333"];
936 [label="var embeddedTexts = compilation.SyntaxTrees\n                .Select(t => (filePath: t.FilePath, text: t.GetText()))\n                .Where(t => t.text.CanBeEmbedded && !string.IsNullOrEmpty(t.filePath))\n                .Select(t => EmbeddedText.FromSource(t.filePath, t.text))\n                .ToImmutableArray(); 796334"];
937 [label="EmitResult result; 796335"];
938 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 796336"];
939 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 796337"];
940 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 796338"];
941 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 796339"];
942 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 796340"];
943 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 796341"];
944 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 796342"];
945 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 796343"];
946 [label="get { return _syntaxAndDeclarations.MessageProvider; } 796344"];
947 [label="return _syntaxAndDeclarations.MessageProvider; 796345"];
948 [label="param CreateModuleBuilder(EmitOptions emitOptions) 796346"];
949 [label="param CreateModuleBuilder(IMethodSymbol? debugEntryPoint) 796347"];
950 [label="param CreateModuleBuilder(Stream? sourceLinkStream) 796348"];
951 [label="param CreateModuleBuilder(IEnumerable<EmbeddedText>? embeddedTexts) 796349"];
952 [label="param CreateModuleBuilder(IEnumerable<ResourceDescription>? manifestResources) 796350"];
953 [label="param CreateModuleBuilder(CompilationTestData? testData) 796351"];
954 [label="param CreateModuleBuilder(DiagnosticBag diagnostics) 796352"];
955 [label="param CreateModuleBuilder(CancellationToken cancellationToken) 796353"];
956 [label="param CreateModuleBuilder(this) 796354"];
957 [label="Debug.Assert(!IsSubmission || HasCodeToEmit()); 796355"];
958 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 796356"];
959 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 796357"];
960 [label="GetRuntimeMetadataVersion(emitOptions, diagnostics) 796358"];
961 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 796359"];
962 [label="param GetRuntimeMetadataVersion(DiagnosticBag diagnostics) 796360"];
963 [label="param GetRuntimeMetadataVersion(this) 796361"];
964 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 796362"];
965 [label="GetRuntimeMetadataVersion(emitOptions) 796363"];
966 [label="param GetRuntimeMetadataVersion(EmitOptions emitOptions) 796364"];
967 [label="param GetRuntimeMetadataVersion(this) 796365"];
968 [label="Assembly 796366"];
969 [label="get\n            {\n                return SourceAssembly;\n            } 796367"];
970 [label="SourceAssembly 796368"];
971 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 796369"];
972 [label="GetBoundReferenceManager() 796370"];
973 [label="param GetBoundReferenceManager(this) 796371"];
974 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 796372"];
975 [label="return _referenceManager; 796373"];
976 [label="GetBoundReferenceManager(); 796374"];
977 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 796375"];
978 [label="return _lazyAssemblySymbol; 796376"];
979 [label="return SourceAssembly; 796377"];
980 [label="var corAssembly = Assembly.CorLibrary as Symbols.Metadata.PE.PEAssemblySymbol; 796378"];
981 [label="if (corAssembly is object)\n            {\n                return corAssembly.Assembly.ManifestModule.MetadataVersion;\n            } 796379"];
982 [label="return corAssembly.Assembly.ManifestModule.MetadataVersion; 796380"];
983 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions); 796381"];
984 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 796382"];
985 [label="if (runtimeMDVersion != null)\n            {\n                return runtimeMDVersion;\n            } 796383"];
986 [label="return runtimeMDVersion; 796384"];
987 [label="string? runtimeMDVersion = GetRuntimeMetadataVersion(emitOptions, diagnostics); 796385"];
988 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 796386"];
989 [label="if (runtimeMDVersion == null)\n            {\n                return null;\n            } 796387"];
990 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 796388"];
991 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 796389"];
992 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 796390"];
993 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 796391"];
994 [label="get { return SourceAssembly.IsDelaySigned; } 796392"];
995 [label="SourceAssembly 796393"];
996 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 796394"];
997 [label="GetBoundReferenceManager() 796395"];
998 [label="param GetBoundReferenceManager(this) 796396"];
999 [label="GetBoundReferenceManager(); 796397"];
1000 [label="return SourceAssembly.IsDelaySigned; 796398"];
1001 [label="SourceAssembly.IsDelaySigned 796399"];
1002 [label="get\n            {\n                return _options;\n            } 796400"];
1003 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 796401"];
1004 [label="Declarations 796402"];
1005 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 796403"];
1006 [label="_syntaxAndDeclarations.GetLazyState() 796404"];
1007 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 796405"];
1008 [label="return Declarations.GetMergedRoot(this); 796406"];
1009 [label="return Declarations.GetMergedRoot(this); 796407"];
1010 [label="return Declarations.GetMergedRoot(this); 796408"];
1011 [label="_syntaxAndDeclarations.GetLazyState() 796409"];
1012 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 796410"];
1013 [label="get { return SourceAssembly.StrongNameKeys; } 796411"];
1014 [label="SourceAssembly 796412"];
1015 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 796413"];
1016 [label="GetBoundReferenceManager() 796414"];
1017 [label="param GetBoundReferenceManager(this) 796415"];
1018 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 796416"];
1019 [label="return _referenceManager; 796417"];
1020 [label="GetBoundReferenceManager(); 796418"];
1021 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 796419"];
1022 [label="return SourceAssembly.StrongNameKeys; 796420"];
1023 [label="SourceAssembly.StrongNameKeys 796421"];
1024 [label="get\n            {\n                return _options;\n            } 796422"];
1025 [label="=> 0x30 796423"];
1026 [label="0x30 796424"];
1027 [label="var moduleProps = ConstructModuleSerializationProperties(emitOptions, runtimeMDVersion); 796425"];
1028 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 796426"];
1029 [label="if (manifestResources == null)\n            {\n                manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>();\n            } 796427"];
1030 [label="manifestResources = SpecializedCollections.EmptyEnumerable<ResourceDescription>(); 796428"];
1031 [label="PEModuleBuilder moduleBeingBuilt; 796429"];
1032 [label="if (_options.OutputKind.IsNetModule())\n            {\n                moduleBeingBuilt = new PENetModuleBuilder(\n                    (SourceModuleSymbol)SourceModule,\n                    emitOptions,\n                    moduleProps,\n                    manifestResources);\n            }\n            else\n            {\n                var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary;\n                moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources);\n            } 796430"];
1033 [label="var kind = _options.OutputKind.IsValid() ? _options.OutputKind : OutputKind.DynamicallyLinkedLibrary; 796431"];
1034 [label="_options.OutputKind.IsValid() 796432"];
1035 [label="_options.OutputKind 796433"];
1036 [label="SourceAssembly 796434"];
1037 [label="GetBoundReferenceManager() 796435"];
1038 [label="GetBoundReferenceManager(); 796436"];
1039 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 796437"];
1040 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 796438"];
1041 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 796439"];
1042 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 796440"];
1043 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 796441"];
1044 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 796442"];
1045 [label="moduleBeingBuilt = new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources); 796443"];
1046 [label="new PEAssemblyBuilder(\n                    SourceAssembly,\n                    emitOptions,\n                    kind,\n                    moduleProps,\n                    manifestResources) 796444"];
1047 [label="param PEAssemblyBuilder(SourceAssemblySymbol sourceAssembly) 796445"];
1048 [label="param PEAssemblyBuilder(EmitOptions emitOptions) 796446"];
1049 [label="param PEAssemblyBuilder(OutputKind outputKind) 796447"];
1050 [label="param PEAssemblyBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 796448"];
1051 [label="param PEAssemblyBuilder(IEnumerable<ResourceDescription> manifestResources) 796449"];
1052 [label="param PEAssemblyBuilder(this) 796450"];
1053 [label="sourceAssembly 796451"];
1054 [label="emitOptions 796452"];
1055 [label="outputKind 796453"];
1056 [label="serializationProperties 796454"];
1057 [label="manifestResources 796455"];
1058 [label="ImmutableArray<NamedTypeSymbol>.Empty 796456"];
1059 [label="param PEAssemblyBuilder(this) 796457"];
1060 [label="param PEAssemblyBuilderBase(SourceAssemblySymbol sourceAssembly) 796458"];
1061 [label="param PEAssemblyBuilderBase(EmitOptions emitOptions) 796459"];
1062 [label="param PEAssemblyBuilderBase(OutputKind outputKind) 796460"];
1063 [label="param PEAssemblyBuilderBase(Cci.ModulePropertiesForSerialization serializationProperties) 796461"];
1064 [label="param PEAssemblyBuilderBase(IEnumerable<ResourceDescription> manifestResources) 796462"];
1065 [label="param PEAssemblyBuilderBase(ImmutableArray<NamedTypeSymbol> additionalTypes) 796463"];
1066 [label="param PEAssemblyBuilderBase(this) 796464"];
1067 [label="0 796465"];
1068 [label="sourceAssembly.Modules[0] 796466"];
1069 [label="emitOptions 796467"];
1070 [label="outputKind 796468"];
1071 [label="serializationProperties 796469"];
1072 [label="manifestResources 796470"];
1073 [label="param PEAssemblyBuilderBase(this) 796471"];
1074 [label="param PEModuleBuilder(SourceModuleSymbol sourceModule) 796472"];
1075 [label="param PEModuleBuilder(EmitOptions emitOptions) 796473"];
1076 [label="param PEModuleBuilder(OutputKind outputKind) 796474"];
1077 [label="param PEModuleBuilder(Cci.ModulePropertiesForSerialization serializationProperties) 796475"];
1078 [label="param PEModuleBuilder(IEnumerable<ResourceDescription> manifestResources) 796476"];
1079 [label="param PEModuleBuilder(this) 796477"];
1080 [label="sourceModule.ContainingSourceAssembly.DeclaringCompilation 796478"];
1081 [label="sourceModule 796479"];
1082 [label="serializationProperties 796480"];
1083 [label="manifestResources 796481"];
1084 [label="outputKind 796482"];
1085 [label="emitOptions 796483"];
1086 [label="new ModuleCompilationState() 796484"];
1087 [label="param ModuleCompilationState(this) 796485"];
1088 [label="param PEModuleBuilder(this) 796486"];
1089 [label="param PEModuleBuilder(this) 796487"];
1090 [label="get\n            {\n                return true;\n            } 796488"];
1091 [label="return true; 796489"];
1092 [label="param PEModuleBuilder(this) 796490"];
1093 [label="new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 796491"];
1094 [label="AssemblyOrModuleSymbolToModuleRefMap = new ConcurrentDictionary<Symbol, Cci.IModuleReference>() 796492"];
1095 [label="Symbols.SymbolEqualityComparer.ConsiderEverything 796493"];
1096 [label="new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 796494"];
1097 [label="_genericInstanceMap = new ConcurrentDictionary<Symbol, object>(Symbols.SymbolEqualityComparer.ConsiderEverything) 796495"];
1098 [label="new ConcurrentSet<TypeSymbol>() 796496"];
1099 [label="_reportedErrorTypesMap = new ConcurrentSet<TypeSymbol>() 796497"];
1100 [label="_embeddedTypesManagerOpt 796498"];
1101 [label="_metadataName 796499"];
1102 [label="_fixedImplementationTypes 796500"];
1103 [label="_needsGeneratedAttributes 796501"];
1104 [label="_needsGeneratedAttributes_IsFrozen 796502"];
1105 [label="var specifiedName = sourceModule.MetadataName; 796503"];
1106 [label="_metadataName = specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName ?\n                            specifiedName :\n                            emitOptions.OutputNameOverride ?? specifiedName; 796504"];
1107 [label="specifiedName != Microsoft.CodeAnalysis.Compilation.UnspecifiedModuleAssemblyName 796505"];
1108 [label="_metadataName 796506"];
1109 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 796507"];
1110 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 796508"];
1111 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 796509"];
1112 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceModule, this); 796510"];
1113 [label="if (sourceModule.AnyReferencedAssembliesAreLinked)\n            {\n                _embeddedTypesManagerOpt = new NoPia.EmbeddedTypesManager(this);\n            } 796511"];
1114 [label="_sourceAssembly 796512"];
1115 [label="_lazyEmbeddedAttribute 796513"];
1116 [label="_lazyIsReadOnlyAttribute 796514"];
1117 [label="_lazyIsByRefLikeAttribute 796515"];
1118 [label="_lazyIsUnmanagedAttribute 796516"];
1119 [label="_lazyNullableAttribute 796517"];
1120 [label="_lazyNullableContextAttribute 796518"];
1121 [label="_lazyNullablePublicOnlyAttribute 796519"];
1122 [label="_lazyNativeIntegerAttribute 796520"];
1123 [label="_metadataName 796521"];
1124 [label="Debug.Assert(sourceAssembly is object); 796522"];
1125 [label="_sourceAssembly 796523"];
1126 [label="_additionalTypes = additionalTypes.NullToEmpty(); 796524"];
1127 [label="_additionalTypes 796525"];
1128 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 796526"];
1129 [label="_metadataName = (emitOptions.OutputNameOverride == null) ? sourceAssembly.MetadataName : FileNameUtilities.ChangeExtension(emitOptions.OutputNameOverride, extension: null); 796527"];
1130 [label="(emitOptions.OutputNameOverride == null) 796528"];
1131 [label="sourceAssembly.MetadataName 796529"];
1132 [label="_metadataName 796530"];
1133 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 796531"];
1134 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 796532"];
1135 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 796533"];
1136 [label="AssemblyOrModuleSymbolToModuleRefMap.Add(sourceAssembly, this); 796534"];
1137 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 796535"];
1138 [label="if (debugEntryPoint != null)\n            {\n                moduleBeingBuilt.SetDebugEntryPoint(debugEntryPoint.GetSymbol(), diagnostics);\n            } 796536"];
1139 [label="moduleBeingBuilt.SourceLinkStreamOpt 796537"];
1140 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 796538"];
1141 [label="if (embeddedTexts != null)\n            {\n                moduleBeingBuilt.EmbeddedTexts = embeddedTexts;\n            } 796539"];
1142 [label="moduleBeingBuilt.EmbeddedTexts 796540"];
1143 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 796541"];
1144 [label="if (testData != null)\n            {\n                moduleBeingBuilt.SetMethodTestData(testData.Methods);\n                testData.Module = moduleBeingBuilt;\n            } 796542"];
1145 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 796543"];
1146 [label="moduleBeingBuilt.SetMethodTestData(testData.Methods); 796544"];
1147 [label="testData.Module 796545"];
1148 [label="return moduleBeingBuilt; 796546"];
1149 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 796547"];
1150 [label="param CompileMethods(CommonPEModuleBuilder moduleBuilder) 796548"];
1151 [label="param CompileMethods(bool emittingPdb) 796549"];
1152 [label="param CompileMethods(bool emitMetadataOnly) 796550"];
1153 [label="param CompileMethods(bool emitTestCoverageData) 796551"];
1154 [label="param CompileMethods(DiagnosticBag diagnostics) 796552"];
1155 [label="param CompileMethods(Predicate<ISymbolInternal>? filterOpt) 796553"];
1156 [label="param CompileMethods(CancellationToken cancellationToken) 796554"];
1157 [label="param CompileMethods(this) 796555"];
1158 [label="PooledHashSet<int>? excludeDiagnostics = null; 796556"];
1159 [label="if (emitMetadataOnly)\n            {\n                excludeDiagnostics = PooledHashSet<int>.GetInstance();\n                excludeDiagnostics.Add((int)ErrorCode.ERR_ConcreteMissingBody);\n            } 796557"];
1160 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 796558"];
1161 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 796559"];
1162 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 796560"];
1163 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 796561"];
1164 [label="GetDiagnostics(CompilationStage.Declare, true, cancellationToken) 796562"];
1165 [label="param GetDiagnostics(CompilationStage stage) 796563"];
1166 [label="param GetDiagnostics(bool includeEarlierStages) 796564"];
1167 [label="param GetDiagnostics(CancellationToken cancellationToken) 796565"];
1168 [label="param GetDiagnostics(this) 796566"];
1169 [label="var diagnostics = DiagnosticBag.GetInstance(); 796567"];
1170 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 796568"];
1171 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 796569"];
1172 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 796570"];
1173 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 796571"];
1174 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken) 796572"];
1175 [label="param GetDiagnostics(CompilationStage stage) 796573"];
1176 [label="param GetDiagnostics(bool includeEarlierStages) 796574"];
1177 [label="param GetDiagnostics(DiagnosticBag diagnostics) 796575"];
1178 [label="param GetDiagnostics(CancellationToken cancellationToken = default) 796576"];
1179 [label="param GetDiagnostics(this) 796577"];
1180 [label="DiagnosticBag? builder = DiagnosticBag.GetInstance(); 796578"];
1181 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 796579"];
1182 [label="if (stage == CompilationStage.Parse || (stage > CompilationStage.Parse && includeEarlierStages))\n            {\n                var syntaxTrees = this.SyntaxTrees;\n                if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                }\n\n                var parseOptionsReported = new HashSet<ParseOptions>();\n                foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                }\n            } 796580"];
1183 [label="this.SyntaxTrees 796581"];
1184 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 796582"];
1185 [label="_syntaxAndDeclarations.GetLazyState() 796583"];
1186 [label="param GetLazyState(this) 796584"];
1187 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 796585"];
1188 [label="var syntaxTrees = this.SyntaxTrees; 796586"];
1189 [label="this.Options 796587"];
1190 [label="get\n            {\n                return _options;\n            } 796588"];
1191 [label="return _options; 796589"];
1192 [label="if (this.Options.ConcurrentBuild)\n                {\n                    RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken);\n                }\n                else\n                {\n                    foreach (var syntaxTree in syntaxTrees)\n                    {\n                        cancellationToken.ThrowIfCancellationRequested();\n                        AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n\n                        cancellationToken.ThrowIfCancellationRequested();\n                        builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                    }\n                } 796590"];
1193 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 796591"];
1194 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 796592"];
1195 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 796593"];
1196 [label="RoslynParallel.For(\n                        0,\n                        syntaxTrees.Length,\n                        UICultureUtilities.WithCurrentUICulture<int>(i =>\n                        {\n                            var syntaxTree = syntaxTrees[i];\n                            AppendLoadDirectiveDiagnostics(builder, _syntaxAndDeclarations, syntaxTree);\n                            builder.AddRange(syntaxTree.GetDiagnostics(cancellationToken));\n                        }),\n                        cancellationToken); 796594"];
1197 [label="param AppendLoadDirectiveDiagnostics(DiagnosticBag builder) 796595"];
1198 [label="param AppendLoadDirectiveDiagnostics(SyntaxAndDeclarationManager syntaxAndDeclarations) 796596"];
1199 [label="param AppendLoadDirectiveDiagnostics(SyntaxTree syntaxTree) 796597"];
1200 [label="param AppendLoadDirectiveDiagnostics(Func<IEnumerable<Diagnostic>, IEnumerable<Diagnostic>>? locationFilterOpt = null) 796598"];
1201 [label="ImmutableArray<LoadDirective> loadDirectives; 796599"];
1202 [label="loadDirectives 796600"];
1203 [label="syntaxAndDeclarations.GetLazyState() 796601"];
1204 [label="param GetLazyState(this) 796602"];
1205 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 796603"];
1206 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 796604"];
1207 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 796605"];
1208 [label="if (syntaxAndDeclarations.GetLazyState().LoadDirectiveMap.TryGetValue(syntaxTree, out loadDirectives))\n            {\n                Debug.Assert(!loadDirectives.IsEmpty);\n                foreach (var directive in loadDirectives)\n                {\n                    IEnumerable<Diagnostic> diagnostics = directive.Diagnostics;\n                    if (locationFilterOpt != null)\n                    {\n                        diagnostics = locationFilterOpt(diagnostics);\n                    }\n                    builder.AddRange(diagnostics);\n                }\n            } 796606"];
1209 [label="var parseOptionsReported = new HashSet<ParseOptions>(); 796607"];
1210 [label="foreach (var syntaxTree in syntaxTrees)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n                    if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    }\n                } 796608"];
1211 [label="cancellationToken.ThrowIfCancellationRequested(); 796609"];
1212 [label="if (!syntaxTree.Options.Errors.IsDefaultOrEmpty && parseOptionsReported.Add(syntaxTree.Options))\n                    {\n                        var location = syntaxTree.GetLocation(TextSpan.FromBounds(0, 0));\n                        foreach (var error in syntaxTree.Options.Errors)\n                        {\n                            builder.Add(error.WithLocation(location));\n                        }\n                    } 796610"];
1213 [label="if (stage == CompilationStage.Declare || stage > CompilationStage.Declare && includeEarlierStages)\n            {\n                CheckAssemblyName(builder);\n                builder.AddRange(Options.Errors);\n\n                if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                }\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                // the set of diagnostics related to establishing references.\n                builder.AddRange(GetBoundReferenceManager().Diagnostics);\n\n                cancellationToken.ThrowIfCancellationRequested();\n\n                builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken));\n\n                if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                }\n            } 796611"];
1214 [label="CheckAssemblyName(builder); 796612"];
1215 [label="CheckAssemblyName(builder); 796613"];
1216 [label="CheckAssemblyName(builder); 796614"];
1217 [label="Options 796615"];
1218 [label="get\n            {\n                return _options;\n            } 796616"];
1219 [label="return _options; 796617"];
1220 [label="builder.AddRange(Options.Errors); 796618"];
1221 [label="Options 796619"];
1222 [label="get\n            {\n                return _options;\n            } 796620"];
1223 [label="return _options; 796621"];
1224 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable && LanguageVersion < MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion() &&\n                    _syntaxAndDeclarations.ExternalSyntaxTrees.Any())\n                {\n                    builder.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_NullableOptionNotAvailable,\n                                                 nameof(Options.NullableContextOptions), Options.NullableContextOptions, LanguageVersion.ToDisplayString(),\n                                                 new CSharpRequiredLanguageVersion(MessageID.IDS_FeatureNullableReferenceTypes.RequiredVersion())), Location.None));\n                } 796622"];
1225 [label="cancellationToken.ThrowIfCancellationRequested(); 796623"];
1226 [label="GetBoundReferenceManager() 796624"];
1227 [label="param GetBoundReferenceManager(this) 796625"];
1228 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 796626"];
1229 [label="return _referenceManager; 796627"];
1230 [label="builder.AddRange(GetBoundReferenceManager().Diagnostics); 796628"];
1231 [label="cancellationToken.ThrowIfCancellationRequested(); 796629"];
1232 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 796630"];
1233 [label="builder.AddRange(GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken)); 796631"];
1234 [label="GetSourceDeclarationDiagnostics(cancellationToken: cancellationToken) 796632"];
1235 [label="param GetSourceDeclarationDiagnostics(SyntaxTree? syntaxTree = null) 796633"];
1236 [label="param GetSourceDeclarationDiagnostics(TextSpan? filterSpanWithinTree = null) 796634"];
1237 [label="param GetSourceDeclarationDiagnostics(Func<IEnumerable<Diagnostic>, SyntaxTree, TextSpan?, IEnumerable<Diagnostic>>? locationFilterOpt = null) 796635"];
1238 [label="param GetSourceDeclarationDiagnostics(CancellationToken cancellationToken = default) 796636"];
1239 [label="param GetSourceDeclarationDiagnostics(this) 796637"];
1240 [label="GlobalImports 796638"];
1241 [label="=> _globalImports.Value 796639"];
1242 [label="_globalImports.Value 796640"];
1243 [label="_globalImports.Value 796641"];
1244 [label="=> Imports.FromGlobalUsings(this) 796642"];
1245 [label="this 796643"];
1246 [label="Imports.FromGlobalUsings(this) 796644"];
1247 [label="Imports.FromGlobalUsings(this) 796645"];
1248 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 796646"];
1249 [label="ScriptCompilationInfo 796647"];
1250 [label="ScriptCompilationInfo?.PreviousScriptCompilation 796648"];
1251 [label="GlobalImports.Complete(cancellationToken); 796649"];
1252 [label="GlobalImports.Complete(cancellationToken); 796650"];
1253 [label="GlobalImports.Complete(cancellationToken); 796651"];
1254 [label="SourceLocation? location = null; 796652"];
1255 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 796653"];
1256 [label="if (syntaxTree != null)\n            {\n                var root = syntaxTree.GetRoot(cancellationToken);\n                location = filterSpanWithinTree.HasValue ?\n                    new SourceLocation(syntaxTree, filterSpanWithinTree.Value) :\n                    new SourceLocation(root);\n            } 796654"];
1257 [label="Assembly 796655"];
1258 [label="get\n            {\n                return SourceAssembly;\n            } 796656"];
1259 [label="SourceAssembly 796657"];
1260 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 796658"];
1261 [label="GetBoundReferenceManager() 796659"];
1262 [label="param GetBoundReferenceManager(this) 796660"];
1263 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 796661"];
1264 [label="return _referenceManager; 796662"];
1265 [label="GetBoundReferenceManager(); 796663"];
1266 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 796664"];
1267 [label="Assembly.ForceComplete(location, cancellationToken); 796665"];
1268 [label="Assembly.ForceComplete(location, cancellationToken); 796666"];
1269 [label="Assembly.ForceComplete(location, cancellationToken); 796667"];
1270 [label="Assembly.ForceComplete(location, cancellationToken); 796668"];
1271 [label="Assembly.ForceComplete(location, cancellationToken); 796669"];
1272 [label="SourceAssembly 796670"];
1273 [label="GetBoundReferenceManager() 796671"];
1274 [label="param GetBoundReferenceManager(this) 796672"];
1275 [label="GetBoundReferenceManager(); 796673"];
1276 [label="Declarations 796674"];
1277 [label="_syntaxAndDeclarations.GetLazyState() 796675"];
1278 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 796676"];
1279 [label="return Declarations.GetMergedRoot(this); 796677"];
1280 [label="_syntaxAndDeclarations.GetLazyState() 796678"];
1281 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 796679"];
1282 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 796680"];
1283 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 796681"];
1284 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 796682"];
1285 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 796683"];
1286 [label="var diagnostics = new DiagnosticBag(); 796684"];
1287 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 796685"];
1288 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 796686"];
1289 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 796687"];
1290 [label="return _lazyDeclarationDiagnostics; 796688"];
1291 [label="param SymbolDeclaredEvent(Symbol symbol) 796689"];
1292 [label="param SymbolDeclaredEvent(this) 796690"];
1293 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 796691"];
1294 [label="param GetUnaliasedReferencedAssemblies(ArrayBuilder<AssemblySymbol> assemblies) 796692"];
1295 [label="param GetUnaliasedReferencedAssemblies(this) 796693"];
1296 [label="GetBoundReferenceManager() 796694"];
1297 [label="param GetBoundReferenceManager(this) 796695"];
1298 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 796696"];
1299 [label="return _referenceManager; 796697"];
1300 [label="var referenceManager = GetBoundReferenceManager(); 796698"];
1301 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 796699"];
1302 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 796700"];
1303 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                } 796701"];
1304 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 796702"];
1305 [label="assemblies.Add(referenceManager.ReferencedAssemblies[i]); 796703"];
1306 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 796704"];
1307 [label="return _additionalCodegenWarnings; 796705"];
1308 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 796706"];
1309 [label="return _referenceManager; 796707"];
1310 [label="GetBoundReferenceManager(); 796708"];
1311 [label="param GetSpecialType(SpecialType specialType) 796709"];
1312 [label="param GetSpecialType(this) 796710"];
1313 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 796711"];
1314 [label="NamedTypeSymbol result; 796712"];
1315 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 796713"];
1316 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 796714"];
1317 [label="Assembly 796715"];
1318 [label="GetBoundReferenceManager() 796716"];
1319 [label="GetBoundReferenceManager(); 796717"];
1320 [label="result = Assembly.GetSpecialType(specialType); 796718"];
1321 [label="result = Assembly.GetSpecialType(specialType); 796719"];
1322 [label="Debug.Assert(result.SpecialType == specialType); 796720"];
1323 [label="return result; 796721"];
1324 [label="param GetBinder(CSharpSyntaxNode syntax) 796722"];
1325 [label="param GetBinder(this) 796723"];
1326 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 796724"];
1327 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 796725"];
1328 [label="GetBinderFactory(syntax.SyntaxTree) 796726"];
1329 [label="param GetBinderFactory(SyntaxTree syntaxTree) 796727"];
1330 [label="param GetBinderFactory(bool ignoreAccessibility = false) 796728"];
1331 [label="param GetBinderFactory(this) 796729"];
1332 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 796730"];
1333 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 796731"];
1334 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 796732"];
1335 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 796733"];
1336 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 796734"];
1337 [label="param GetBinderFactory(SyntaxTree syntaxTree) 796735"];
1338 [label="param GetBinderFactory(bool ignoreAccessibility) 796736"];
1339 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 796737"];
1340 [label="param GetBinderFactory(this) 796738"];
1341 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 796739"];
1342 [label="ignoreAccessibility 796740"];
1343 [label="_binderFactories 796741"];
1344 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 796742"];
1345 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 796743"];
1346 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 796744"];
1347 [label="GetSyntaxTreeOrdinal(syntaxTree) 796745"];
1348 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 796746"];
1349 [label="param GetSyntaxTreeOrdinal(this) 796747"];
1350 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 796748"];
1351 [label="this.ContainsSyntaxTree(tree) 796749"];
1352 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 796750"];
1353 [label="param ContainsSyntaxTree(this) 796751"];
1354 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 796752"];
1355 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 796753"];
1356 [label="_syntaxAndDeclarations.GetLazyState() 796754"];
1357 [label="param GetLazyState(this) 796755"];
1358 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 796756"];
1359 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 796757"];
1360 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 796758"];
1361 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 796759"];
1362 [label="_syntaxAndDeclarations.GetLazyState() 796760"];
1363 [label="param GetLazyState(this) 796761"];
1364 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 796762"];
1365 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 796763"];
1366 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 796764"];
1367 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 796765"];
1368 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 796766"];
1369 [label="this.SyntaxTrees 796767"];
1370 [label="param GetLazyState(this) 796768"];
1371 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 796769"];
1372 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 796770"];
1373 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 796771"];
1374 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 796772"];
1375 [label="BinderFactory? previousFactory; 796773"];
1376 [label="var previousWeakReference = binderFactories[treeNum]; 796774"];
1377 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 796775"];
1378 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 796776"];
1379 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 796777"];
1380 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 796778"];
1381 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 796779"];
1382 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 796780"];
1383 [label="param AddNewFactory(SyntaxTree syntaxTree) 796781"];
1384 [label="param AddNewFactory(bool ignoreAccessibility) 796782"];
1385 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 796783"];
1386 [label="param AddNewFactory(this) 796784"];
1387 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 796785"];
1388 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 796786"];
1389 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 796787"];
1390 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 796788"];
1391 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 796789"];
1392 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 796790"];
1393 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 796791"];
1394 [label="BinderFactory? previousFactory; 796792"];
1395 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 796793"];
1396 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 796794"];
1397 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 796795"];
1398 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 796796"];
1399 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 796797"];
1400 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 796798"];
1401 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 796799"];
1402 [label="return newFactory; 796800"];
1403 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 796801"];
1404 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 796802"];
1405 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 796803"];
1406 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 796804"];
1407 [label="GetAllUnaliasedModules(modules); 796805"];
1408 [label="GetAllUnaliasedModules(modules) 796806"];
1409 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 796807"];
1410 [label="param GetAllUnaliasedModules(this) 796808"];
1411 [label="Assembly 796809"];
1412 [label="get\n            {\n                return SourceAssembly;\n            } 796810"];
1413 [label="GetBoundReferenceManager() 796811"];
1414 [label="param GetBoundReferenceManager(this) 796812"];
1415 [label="GetBoundReferenceManager(); 796813"];
1416 [label="modules.AddRange(Assembly.Modules); 796814"];
1417 [label="modules.AddRange(Assembly.Modules); 796815"];
1418 [label="GetBoundReferenceManager() 796816"];
1419 [label="param GetBoundReferenceManager(this) 796817"];
1420 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 796818"];
1421 [label="return _referenceManager; 796819"];
1422 [label="var referenceManager = GetBoundReferenceManager(); 796820"];
1423 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 796821"];
1424 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 796822"];
1425 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 796823"];
1426 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 796824"];
1427 [label="GetAllUnaliasedModules(modules); 796825"];
1428 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 796826"];
1429 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 796827"];
1430 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 796828"];
1431 [label="modules.Free(); 796829"];
1432 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 796830"];
1433 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 796831"];
1434 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 796832"];
1435 [label="return _lazyGlobalNamespace; 796833"];
1436 [label="get\n            {\n                return Assembly.Modules[0];\n            } 796834"];
1437 [label="Assembly 796835"];
1438 [label="get\n            {\n                return SourceAssembly;\n            } 796836"];
1439 [label="SourceAssembly 796837"];
1440 [label="GetBoundReferenceManager() 796838"];
1441 [label="param GetBoundReferenceManager(this) 796839"];
1442 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 796840"];
1443 [label="return _referenceManager; 796841"];
1444 [label="GetBoundReferenceManager(); 796842"];
1445 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 796843"];
1446 [label="return Assembly.Modules[0]; 796844"];
1447 [label="return Assembly.Modules[0]; 796845"];
1448 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 796846"];
1449 [label="param IsNullableAnalysisEnabledIn(this) 796847"];
1450 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 796848"];
1451 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 796849"];
1452 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 796850"];
1453 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 796851"];
1454 [label="param IsNullableAnalysisEnabledIn(this) 796852"];
1455 [label="GetNullableAnalysisValue() 796853"];
1456 [label="param GetNullableAnalysisValue(this) 796854"];
1457 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 796855"];
1458 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 796856"];
1459 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 796857"];
1460 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 796858"];
1461 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 796859"];
1462 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 796860"];
1463 [label="Options 796861"];
1464 [label="get\n            {\n                return _options;\n            } 796862"];
1465 [label="return _options; 796863"];
1466 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 796864"];
1467 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 796865"];
1468 [label="param GetBinderFactory(SyntaxTree syntaxTree) 796866"];
1469 [label="param GetBinderFactory(bool ignoreAccessibility = false) 796867"];
1470 [label="param GetBinderFactory(this) 796868"];
1471 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 796869"];
1472 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 796870"];
1473 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 796871"];
1474 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 796872"];
1475 [label="param GetBinderFactory(SyntaxTree syntaxTree) 796873"];
1476 [label="param GetBinderFactory(bool ignoreAccessibility) 796874"];
1477 [label="param GetBinderFactory(this) 796875"];
1478 [label="ignoreAccessibility 796876"];
1479 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 796877"];
1480 [label="GetSyntaxTreeOrdinal(syntaxTree) 796878"];
1481 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 796879"];
1482 [label="param GetSyntaxTreeOrdinal(this) 796880"];
1483 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 796881"];
1484 [label="this.ContainsSyntaxTree(tree) 796882"];
1485 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 796883"];
1486 [label="param ContainsSyntaxTree(this) 796884"];
1487 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 796885"];
1488 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 796886"];
1489 [label="_syntaxAndDeclarations.GetLazyState() 796887"];
1490 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 796888"];
1491 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 796889"];
1492 [label="_syntaxAndDeclarations.GetLazyState() 796890"];
1493 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 796891"];
1494 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 796892"];
1495 [label="BinderFactory? previousFactory; 796893"];
1496 [label="var previousWeakReference = binderFactories[treeNum]; 796894"];
1497 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 796895"];
1498 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 796896"];
1499 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 796897"];
1500 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 796898"];
1501 [label="return previousFactory; 796899"];
1502 [label="param IsFeatureEnabled(this CSharpCompilation compilation) 796900"];
1503 [label="param IsFeatureEnabled(MessageID feature) 796901"];
1504 [label="compilation.SyntaxTrees 796902"];
1505 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 796903"];
1506 [label="_syntaxAndDeclarations.GetLazyState() 796904"];
1507 [label="param GetLazyState(this) 796905"];
1508 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 796906"];
1509 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 796907"];
1510 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 796908"];
1511 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 796909"];
1512 [label="return ((CSharpParseOptions)compilation.SyntaxTrees.FirstOrDefault()?.Options)?.IsFeatureEnabled(feature) == true; 796910"];
1513 [label="GetBoundReferenceManager() 796911"];
1514 [label="GetBoundReferenceManager(); 796912"];
1515 [label="Debug.Assert(result.SpecialType == specialType); 796913"];
1516 [label="param ShouldEmitNullableAttributes(Symbol symbol) 796914"];
1517 [label="param ShouldEmitNullableAttributes(this) 796915"];
1518 [label="RoslynDebug.Assert(symbol is object); 796916"];
1519 [label="RoslynDebug.Assert(symbol is object); 796917"];
1520 [label="Debug.Assert(symbol.IsDefinition); 796918"];
1521 [label="SourceModule 796919"];
1522 [label="get\n            {\n                return Assembly.Modules[0];\n            } 796920"];
1523 [label="Assembly 796921"];
1524 [label="get\n            {\n                return SourceAssembly;\n            } 796922"];
1525 [label="SourceAssembly 796923"];
1526 [label="GetBoundReferenceManager() 796924"];
1527 [label="param GetBoundReferenceManager(this) 796925"];
1528 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 796926"];
1529 [label="return _referenceManager; 796927"];
1530 [label="GetBoundReferenceManager(); 796928"];
1531 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 796929"];
1532 [label="return Assembly.Modules[0]; 796930"];
1533 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 796931"];
1534 [label="EmitNullablePublicOnly 796932"];
1535 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 796933"];
1536 [label="if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                } 796934"];
1537 [label="SyntaxTrees 796935"];
1538 [label="var firstSt = SyntaxTrees.FirstOrDefault(); 796936"];
1539 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 796937"];
1540 [label="bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true; 796938"];
1541 [label="_lazyEmitNullablePublicOnly = value.ToThreeState(); 796939"];
1542 [label="_lazyEmitNullablePublicOnly 796940"];
1543 [label="return _lazyEmitNullablePublicOnly.Value(); 796941"];
1544 [label="if (!EmitNullablePublicOnly)\n            {\n                return true;\n            } 796942"];
1545 [label="return true; 796943"];
1546 [label="Debug.Assert(symbol.IsDefinition); 796944"];
1547 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 796945"];
1548 [label="return _referenceManager; 796946"];
1549 [label="GetBoundReferenceManager(); 796947"];
1550 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 796948"];
1551 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 796949"];
1552 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 796950"];
1553 [label="if (syntaxTree is null)\n            {\n                // Don't freeze the compilation if we're getting\n                // diagnostics for a single tree\n                _declarationDiagnosticsFrozen = true;\n\n                // Also freeze generated attribute flags.\n                // Symbols bound after getting the declaration\n                // diagnostics shouldn't need to modify the flags.\n                _needsGeneratedAttributes_IsFrozen = true;\n            } 796951"];
1554 [label="_declarationDiagnosticsFrozen = true; 796952"];
1555 [label="_declarationDiagnosticsFrozen 796953"];
1556 [label="_needsGeneratedAttributes_IsFrozen = true; 796954"];
1557 [label="_needsGeneratedAttributes_IsFrozen 796955"];
1558 [label="var result = _lazyDeclarationDiagnostics?.AsEnumerable() ?? Enumerable.Empty<Diagnostic>(); 796956"];
1559 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 796957"];
1560 [label="if (locationFilterOpt != null)\n            {\n                RoslynDebug.Assert(syntaxTree != null);\n                result = locationFilterOpt(result, syntaxTree, filterSpanWithinTree);\n            } 796958"];
1561 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 796959"];
1562 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 796960"];
1563 [label="ImmutableArray<Diagnostic> clsDiagnostics = GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken); 796961"];
1564 [label="GetClsComplianceDiagnostics(syntaxTree, filterSpanWithinTree, cancellationToken) 796962"];
1565 [label="param GetClsComplianceDiagnostics(SyntaxTree? syntaxTree) 796963"];
1566 [label="param GetClsComplianceDiagnostics(TextSpan? filterSpanWithinTree) 796964"];
1567 [label="param GetClsComplianceDiagnostics(CancellationToken cancellationToken) 796965"];
1568 [label="param GetClsComplianceDiagnostics(this) 796966"];
1569 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 796967"];
1570 [label="if (syntaxTree != null)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken, syntaxTree, filterSpanWithinTree);\n                return builder.ToReadOnlyAndFree();\n            } 796968"];
1571 [label="if (_lazyClsComplianceDiagnostics.IsDefault)\n            {\n                var builder = DiagnosticBag.GetInstance();\n                ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken);\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree());\n            } 796969"];
1572 [label="var builder = DiagnosticBag.GetInstance(); 796970"];
1573 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 796971"];
1574 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 796972"];
1575 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 796973"];
1576 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken); 796974"];
1577 [label="ClsComplianceChecker.CheckCompliance(this, builder, cancellationToken) 796975"];
1578 [label="param CheckCompliance(CSharpCompilation compilation) 796976"];
1579 [label="param CheckCompliance(DiagnosticBag diagnostics) 796977"];
1580 [label="param CheckCompliance(CancellationToken cancellationToken) 796978"];
1581 [label="param CheckCompliance(SyntaxTree filterTree = null) 796979"];
1582 [label="param CheckCompliance(TextSpan? filterSpanWithinTree = null) 796980"];
1583 [label="var queue = new ConcurrentQueue<Diagnostic>(); 796981"];
1584 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 796982"];
1585 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 796983"];
1586 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 796984"];
1587 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 796985"];
1588 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 796986"];
1589 [label="var checker = new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken); 796987"];
1590 [label="new ClsComplianceChecker(compilation, filterTree, filterSpanWithinTree, queue, cancellationToken) 796988"];
1591 [label="param ClsComplianceChecker(CSharpCompilation compilation) 796989"];
1592 [label="param ClsComplianceChecker(SyntaxTree filterTree) 796990"];
1593 [label="param ClsComplianceChecker(TextSpan? filterSpanWithinTree) 796991"];
1594 [label="param ClsComplianceChecker(ConcurrentQueue<Diagnostic> diagnostics) 796992"];
1595 [label="param ClsComplianceChecker(CancellationToken cancellationToken) 796993"];
1596 [label="param ClsComplianceChecker(this) 796994"];
1597 [label="param ClsComplianceChecker(this) 796995"];
1598 [label="_compilation 796996"];
1599 [label="_filterTree 796997"];
1600 [label="_filterSpanWithinTree 796998"];
1601 [label="_diagnostics 796999"];
1602 [label="_declaredOrInheritedCompliance 797000"];
1603 [label="_compilerTasks 797001"];
1604 [label="_compilation 797002"];
1605 [label="_filterTree 797003"];
1606 [label="_filterSpanWithinTree 797004"];
1607 [label="_diagnostics 797005"];
1608 [label="_cancellationToken 797006"];
1609 [label="_declaredOrInheritedCompliance = new ConcurrentDictionary<Symbol, Compliance>(Symbols.SymbolEqualityComparer.ConsiderEverything); 797007"];
1610 [label="_declaredOrInheritedCompliance 797008"];
1611 [label="ConcurrentAnalysis 797009"];
1612 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 797010"];
1613 [label="null 797011"];
1614 [label="_filterTree == null 797012"];
1615 [label="_compilation.Options 797013"];
1616 [label="get\n            {\n                return _options;\n            } 797014"];
1617 [label="return _options; 797015"];
1618 [label="_filterTree == null && _compilation.Options.ConcurrentBuild 797016"];
1619 [label="if (ConcurrentAnalysis)\n            {\n                _compilerTasks = new ConcurrentStack<Task>();\n            } 797017"];
1620 [label="_compilerTasks = new ConcurrentStack<Task>(); 797018"];
1621 [label="_compilerTasks 797019"];
1622 [label="compilation.Assembly 797020"];
1623 [label="get\n            {\n                return SourceAssembly;\n            } 797021"];
1624 [label="GetBoundReferenceManager() 797022"];
1625 [label="param GetBoundReferenceManager(this) 797023"];
1626 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 797024"];
1627 [label="return _referenceManager; 797025"];
1628 [label="GetBoundReferenceManager(); 797026"];
1629 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 797027"];
1630 [label="checker.Visit(compilation.Assembly); 797028"];
1631 [label="checker.Visit(compilation.Assembly); 797029"];
1632 [label="checker.Visit(compilation.Assembly); 797030"];
1633 [label="param VisitAssembly(AssemblySymbol symbol) 797031"];
1634 [label="param VisitAssembly(this) 797032"];
1635 [label="_cancellationToken.ThrowIfCancellationRequested(); 797033"];
1636 [label="System.Diagnostics.Debug.Assert(symbol is SourceAssemblySymbol); 797034"];
1637 [label="Compliance assemblyCompliance = GetDeclaredOrInheritedCompliance(symbol); 797035"];
1638 [label="GetDeclaredOrInheritedCompliance(symbol) 797036"];
1639 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 797037"];
1640 [label="param GetDeclaredOrInheritedCompliance(this) 797038"];
1641 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 797039"];
1642 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 797040"];
1643 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 797041"];
1644 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 797042"];
1645 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 797043"];
1646 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 797044"];
1647 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 797045"];
1648 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 797046"];
1649 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 797047"];
1650 [label="Compliance compliance; 797048"];
1651 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 797049"];
1652 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 797050"];
1653 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 797051"];
1654 [label="Location ignoredLocation; 797052"];
1655 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 797053"];
1656 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 797054"];
1657 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 797055"];
1658 [label="param GetDeclaredCompliance(Symbol symbol) 797056"];
1659 [label="param GetDeclaredCompliance(out Location attributeLocation) 797057"];
1660 [label="param GetDeclaredCompliance(this) 797058"];
1661 [label="attributeLocation = null; 797059"];
1662 [label="foreach (CSharpAttributeData data in symbol.GetAttributes())\n            {\n                // Check signature before HasErrors to avoid realizing symbols for other attributes.\n                if (data.IsTargetAttribute(symbol, AttributeDescription.CLSCompliantAttribute))\n                {\n                    NamedTypeSymbol attributeClass = data.AttributeClass;\n                    if ((object)attributeClass != null)\n                    {\n                        DiagnosticInfo info = attributeClass.GetUseSiteDiagnostic();\n                        if (info != null)\n                        {\n                            Location location = symbol.Locations.IsEmpty ? NoLocation.Singleton : symbol.Locations[0];\n                            _diagnostics.Enqueue(new CSDiagnostic(info, location));\n                            if (info.Severity >= DiagnosticSeverity.Error)\n                            {\n                                continue;\n                            }\n                        }\n                    }\n\n                    if (!data.HasErrors)\n                    {\n                        if (!TryGetAttributeWarningLocation(data, out attributeLocation))\n                        {\n                            attributeLocation = null;\n                        }\n\n                        ImmutableArray<TypedConstant> args = data.CommonConstructorArguments;\n                        System.Diagnostics.Debug.Assert(args.Length == 1, 'We already checked the signature and HasErrors.');\n\n                        // Duplicates are reported elsewhere - we only care about the first (error-free) occurrence.\n                        return (bool)args[0].ValueInternal;\n                    }\n                }\n            } 797060"];
1663 [label="return null; 797061"];
1664 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 797062"];
1665 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 797063"];
1666 [label="if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 797064"];
1667 [label="compliance = Compliance.ImpliedFalse; 797065"];
1668 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 797066"];
1669 [label="(symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType) 797067"];
1670 [label="return (symbol.Kind == SymbolKind.Assembly || symbol.Kind == SymbolKind.NamedType)\n                ? _declaredOrInheritedCompliance.GetOrAdd(symbol, compliance)\n                : compliance; 797068"];
1671 [label="if (assemblyCompliance == Compliance.DeclaredFalse)\n            {\n                // Our interpretation of an assembly-level CLSCompliant attribute is as follows:\n                //   1) If true, then perform all CLS checks.\n                //   2) If false, then perform no CLS checks (dev11 still performs a few, mostly around\n                //      meaningless attributes).  Our interpretation is that the user ultimately wants\n                //      his code to be CLS-compliant, but is temporarily disabling the checks (e.g. during\n                //      refactoring/prototyping).\n                //   3) If absent, the perform all CLS checks.  Our interpretation is that - in the\n                //      absence of an assembly-level attribute - any CLS problems within the compilation\n                //      indicate that the user was trying to do something but didn't know how.  It would\n                //      be nice if the most common case (i.e. this one) was the cheapest, but we don't\n                //      want to confuse novice users.\n                return;\n            } 797069"];
1672 [label="bool assemblyComplianceValue = IsTrue(assemblyCompliance); 797070"];
1673 [label="IsTrue(assemblyCompliance) 797071"];
1674 [label="param IsTrue(Compliance compliance) 797072"];
1675 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 797073"];
1676 [label="return false; 797074"];
1677 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 797075"];
1678 [label="for (int i = 0; i < symbol.Modules.Length; i++)\n            {\n                ModuleSymbol module = symbol.Modules[i];\n                Location attributeLocation;\n                bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation);\n\n                Location warningLocation = i == 0 ? attributeLocation : module.Locations[0];\n                System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.');\n\n                if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                }\n            } 797076"];
1679 [label="ModuleSymbol module = symbol.Modules[i]; 797077"];
1680 [label="Location attributeLocation; 797078"];
1681 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 797079"];
1682 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 797080"];
1683 [label="GetDeclaredCompliance(module, out attributeLocation) 797081"];
1684 [label="param GetDeclaredCompliance(Symbol symbol) 797082"];
1685 [label="param GetDeclaredCompliance(out Location attributeLocation) 797083"];
1686 [label="param GetDeclaredCompliance(this) 797084"];
1687 [label="attributeLocation = null; 797085"];
1688 [label="bool? moduleDeclaredCompliance = GetDeclaredCompliance(module, out attributeLocation); 797086"];
1689 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 797087"];
1690 [label="i == 0 797088"];
1691 [label="Location warningLocation = i == 0 ? attributeLocation : module.Locations[0]; 797089"];
1692 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 797090"];
1693 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 797091"];
1694 [label="System.Diagnostics.Debug.Assert(warningLocation != null || !moduleDeclaredCompliance.HasValue || (i == 0 && _filterTree != null),\n                    'Can only be null when the source location is filtered out.'); 797092"];
1695 [label="if (moduleDeclaredCompliance.HasValue)\n                {\n                    if (warningLocation != null)\n                    {\n                        if (!IsDeclared(assemblyCompliance))\n                        {\n                            // This is not useful on non-source modules, but dev11 reports it anyway.\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules, warningLocation);\n                        }\n                        else if (assemblyComplianceValue != moduleDeclaredCompliance.GetValueOrDefault())\n                        {\n                            this.AddDiagnostic(ErrorCode.WRN_CLS_NotOnModules2, warningLocation);\n                        }\n                    }\n                }\n                else if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 797093"];
1696 [label="if (assemblyComplianceValue && i > 0)\n                {\n                    bool sawClsCompliantAttribute = false;\n                    var peModule = (Symbols.Metadata.PE.PEModuleSymbol)module;\n                    foreach (CSharpAttributeData assemblyLevelAttribute in peModule.GetAssemblyAttributes())\n                    {\n                        if (assemblyLevelAttribute.IsTargetAttribute(peModule, AttributeDescription.CLSCompliantAttribute))\n                        {\n                            sawClsCompliantAttribute = true;\n                            break;\n                        }\n                    }\n\n                    if (!sawClsCompliantAttribute)\n                    {\n                        this.AddDiagnostic(ErrorCode.WRN_CLS_ModuleMissingCLS, warningLocation);\n                    }\n                } 797094"];
1697 [label="if (assemblyComplianceValue)\n            {\n                CheckForAttributeWithArrayArgument(symbol);\n            } 797095"];
1698 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 797096"];
1699 [label="ModuleSymbol sourceModule = symbol.Modules[0]; 797097"];
1700 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)))\n            {\n                CheckForAttributeWithArrayArgument(sourceModule);\n            } 797098"];
1701 [label="GetDeclaredOrInheritedCompliance(sourceModule) 797099"];
1702 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 797100"];
1703 [label="param GetDeclaredOrInheritedCompliance(this) 797101"];
1704 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 797102"];
1705 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 797103"];
1706 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 797104"];
1707 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 797105"];
1708 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 797106"];
1709 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 797107"];
1710 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 797108"];
1711 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 797109"];
1712 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 797110"];
1713 [label="Compliance compliance; 797111"];
1714 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 797112"];
1715 [label="Location ignoredLocation; 797113"];
1716 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 797114"];
1717 [label="GetDeclaredCompliance(symbol, out ignoredLocation) 797115"];
1718 [label="param GetDeclaredCompliance(out Location attributeLocation) 797116"];
1719 [label="param GetDeclaredCompliance(this) 797117"];
1720 [label="attributeLocation = null; 797118"];
1721 [label="return null; 797119"];
1722 [label="bool? declaredCompliance = GetDeclaredCompliance(symbol, out ignoredLocation); 797120"];
1723 [label="if (declaredCompliance.HasValue)\n            {\n                compliance = declaredCompliance.GetValueOrDefault() ? Compliance.DeclaredTrue : Compliance.DeclaredFalse;\n            }\n            else if (symbol.Kind == SymbolKind.Assembly)\n            {\n                // Assemblies are not compliant unless specifically declared to be so.\n                compliance = Compliance.ImpliedFalse;\n            }\n            else\n            {\n                compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse;\n            } 797121"];
1724 [label="compliance = IsTrue(GetInheritedCompliance(symbol)) ? Compliance.InheritedTrue : Compliance.InheritedFalse; 797122"];
1725 [label="GetInheritedCompliance(symbol) 797123"];
1726 [label="param GetInheritedCompliance(Symbol symbol) 797124"];
1727 [label="param GetInheritedCompliance(this) 797125"];
1728 [label="System.Diagnostics.Debug.Assert(symbol.Kind != SymbolKind.Assembly); 797126"];
1729 [label="Symbol containing = (Symbol)symbol.ContainingType ?? symbol.ContainingAssembly; 797127"];
1730 [label="System.Diagnostics.Debug.Assert((object)containing != null); 797128"];
1731 [label="System.Diagnostics.Debug.Assert((object)containing != null); 797129"];
1732 [label="return GetDeclaredOrInheritedCompliance(containing); 797130"];
1733 [label="GetDeclaredOrInheritedCompliance(containing) 797131"];
1734 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 797132"];
1735 [label="param GetDeclaredOrInheritedCompliance(this) 797133"];
1736 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 797134"];
1737 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 797135"];
1738 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 797136"];
1739 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 797137"];
1740 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 797138"];
1741 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 797139"];
1742 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 797140"];
1743 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 797141"];
1744 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 797142"];
1745 [label="if (_declaredOrInheritedCompliance.TryGetValue(symbol, out compliance))\n            {\n                return compliance;\n            } 797143"];
1746 [label="return compliance; 797144"];
1747 [label="IsTrue(GetInheritedCompliance(symbol)) 797145"];
1748 [label="param IsTrue(Compliance compliance) 797146"];
1749 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 797147"];
1750 [label="return false; 797148"];
1751 [label="IsTrue(GetDeclaredOrInheritedCompliance(sourceModule)) 797149"];
1752 [label="param IsTrue(Compliance compliance) 797150"];
1753 [label="Visit(symbol.GlobalNamespace); 797151"];
1754 [label="Visit(symbol.GlobalNamespace); 797152"];
1755 [label="param VisitNamespace(NamespaceSymbol symbol) 797153"];
1756 [label="param VisitNamespace(this) 797154"];
1757 [label="_cancellationToken.ThrowIfCancellationRequested(); 797155"];
1758 [label="if (DoNotVisit(symbol)) return; 797156"];
1759 [label="DoNotVisit(symbol) 797157"];
1760 [label="param DoNotVisit(Symbol symbol) 797158"];
1761 [label="param DoNotVisit(this) 797159"];
1762 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                return false;\n            } 797160"];
1763 [label="return false; 797161"];
1764 [label="if (IsTrue(GetDeclaredOrInheritedCompliance(symbol)))\n            {\n                CheckName(symbol);\n                CheckMemberDistinctness(symbol);\n            } 797162"];
1765 [label="GetDeclaredOrInheritedCompliance(symbol) 797163"];
1766 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 797164"];
1767 [label="param GetDeclaredOrInheritedCompliance(this) 797165"];
1768 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 797166"];
1769 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 797167"];
1770 [label="if (symbol.Kind == SymbolKind.Namespace)\n            {\n                // Don't bother storing entries for namespaces - just go straight to the assembly.\n                return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly);\n            }\n            else if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 797168"];
1771 [label="return GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly); 797169"];
1772 [label="GetDeclaredOrInheritedCompliance(symbol.ContainingAssembly) 797170"];
1773 [label="param GetDeclaredOrInheritedCompliance(Symbol symbol) 797171"];
1774 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 797172"];
1775 [label="System.Diagnostics.Debug.Assert(symbol.Kind == SymbolKind.NamedType || !((symbol is TypeSymbol)),\n                'Type kinds without declarations are handled elsewhere.'); 797173"];
1776 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                MethodSymbol method = (MethodSymbol)symbol;\n                Symbol associated = method.AssociatedSymbol;\n                if ((object)associated != null)\n                {\n                    // Don't bother storing entries for accessors - just go straight to the property/event.\n                    return GetDeclaredOrInheritedCompliance(associated);\n                }\n            } 797174"];
1777 [label="Debug.Assert(symbol.Kind != SymbolKind.Alias); 797175"];
1778 [label="Debug.Assert(symbol.Kind != SymbolKind.Label); 797176"];
1779 [label="Debug.Assert(symbol.Kind != SymbolKind.Namespace); 797177"];
1780 [label="Debug.Assert(symbol.Kind != SymbolKind.Parameter); 797178"];
1781 [label="Debug.Assert(symbol.Kind != SymbolKind.RangeVariable); 797179"];
1782 [label="return compliance; 797180"];
1783 [label="IsTrue(GetDeclaredOrInheritedCompliance(symbol)) 797181"];
1784 [label="param IsTrue(Compliance compliance) 797182"];
1785 [label="switch (compliance)\n            {\n                case Compliance.DeclaredTrue:\n                case Compliance.InheritedTrue:\n                    return true;\n                case Compliance.DeclaredFalse:\n                case Compliance.InheritedFalse:\n                case Compliance.ImpliedFalse:\n                    return false;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(compliance);\n            } 797183"];
1786 [label="return false; 797184"];
1787 [label="ConcurrentAnalysis 797185"];
1788 [label="=> _filterTree == null && _compilation.Options.ConcurrentBuild 797186"];
1789 [label="null 797187"];
1790 [label="_filterTree == null 797188"];
1791 [label="_compilation.Options 797189"];
1792 [label="get\n            {\n                return _options;\n            } 797190"];
1793 [label="if (ConcurrentAnalysis)\n            {\n                VisitNamespaceMembersAsTasks(symbol);\n            }\n            else\n            {\n                VisitNamespaceMembers(symbol);\n            } 797191"];
1794 [label="VisitNamespaceMembersAsTasks(symbol); 797192"];
1795 [label="VisitNamespaceMembersAsTasks(symbol) 797193"];
1796 [label="param VisitNamespaceMembersAsTasks(NamespaceSymbol symbol) 797194"];
1797 [label="param VisitNamespaceMembersAsTasks(this) 797195"];
1798 [label="foreach (var m in symbol.GetMembersUnordered())\n            {\n                _compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken));\n            } 797196"];
1799 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 797197"];
1800 [label="_compilerTasks.Push(Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        Visit(m);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken)); 797198"];
1801 [label="VisitNamespaceMembersAsTasks(symbol); 797199"];
1802 [label="checker.WaitForWorkers() 797200"];
1803 [label="param WaitForWorkers(this) 797201"];
1804 [label="var tasks = _compilerTasks; 797202"];
1805 [label="if (tasks == null)\n            {\n                return;\n            } 797203"];
1806 [label="if (tasks == null)\n            {\n                return;\n            } 797204"];
1807 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 797205"];
1808 [label="while (tasks.TryPop(out Task curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 797206"];
1809 [label="curTask.GetAwaiter().GetResult(); 797207"];
1810 [label="checker.WaitForWorkers(); 797208"];
1811 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 797209"];
1812 [label="foreach (Diagnostic diag in queue)\n            {\n                diagnostics.Add(diag);\n            } 797210"];
1813 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 797211"];
1814 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 797212"];
1815 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyClsComplianceDiagnostics, builder.ToReadOnlyAndFree()); 797213"];
1816 [label="Debug.Assert(!_lazyClsComplianceDiagnostics.IsDefault); 797214"];
1817 [label="return _lazyClsComplianceDiagnostics; 797215"];
1818 [label="return result.AsImmutable().Concat(clsDiagnostics); 797216"];
1819 [label="return result.AsImmutable().Concat(clsDiagnostics); 797217"];
1820 [label="return result.AsImmutable().Concat(clsDiagnostics); 797218"];
1821 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 797219"];
1822 [label="if (EventQueue != null && SyntaxTrees.Length == 0)\n                {\n                    EnsureCompilationEventQueueCompleted();\n                } 797220"];
1823 [label="cancellationToken.ThrowIfCancellationRequested(); 797221"];
1824 [label="if (stage == CompilationStage.Compile || stage > CompilationStage.Compile && includeEarlierStages)\n            {\n                var methodBodyDiagnostics = DiagnosticBag.GetInstance();\n                GetDiagnosticsForAllMethodBodies(methodBodyDiagnostics, cancellationToken);\n                builder.AddRangeAndFree(methodBodyDiagnostics);\n            } 797222"];
1825 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 797223"];
1826 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 797224"];
1827 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 797225"];
1828 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 797226"];
1829 [label="FilterAndAppendAndFreeDiagnostics(diagnostics, ref builder, cancellationToken); 797227"];
1830 [label="GetDiagnostics(stage, includeEarlierStages, diagnostics, cancellationToken); 797228"];
1831 [label="return diagnostics.ToReadOnlyAndFree(); 797229"];
1832 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 797230"];
1833 [label="bool hasDeclarationErrors = !FilterAndAppendDiagnostics(diagnostics, GetDiagnostics(CompilationStage.Declare, true, cancellationToken), excludeDiagnostics, cancellationToken); 797231"];
1834 [label="excludeDiagnostics?.Free(); 797232"];
1835 [label="var moduleBeingBuilt = (PEModuleBuilder)moduleBuilder; 797233"];
1836 [label="if (emitMetadataOnly)\n            {\n                if (hasDeclarationErrors)\n                {\n                    return false;\n                }\n\n                if (moduleBeingBuilt.SourceModule.HasBadAttributes)\n                {\n                    // If there were errors but no declaration diagnostics, explicitly add a 'Failed to emit module' error.\n                    diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuilt).Name,\n                        new LocalizableResourceString(nameof(CodeAnalysisResources.ModuleHasInvalidAttributes), CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n\n                    return false;\n                }\n\n                SynthesizedMetadataCompiler.ProcessSynthesizedMembers(this, moduleBeingBuilt, cancellationToken);\n            }\n            else\n            {\n                if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                }\n\n                // Perform initial bind of method bodies in spite of earlier errors. This is the same\n                // behavior as when calling GetDiagnostics()\n\n                // Use a temporary bag so we don't have to refilter pre-existing diagnostics.\n                DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance();\n\n                MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken);\n\n                if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                }\n\n                bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken);\n\n                if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                }\n            } 797234"];
1837 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 797235"];
1838 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 797236"];
1839 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 797237"];
1840 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 797238"];
1841 [label="param AddDebugSourceDocumentsForChecksumDirectives(DebugDocumentsBuilder documentsBuilder) 797239"];
1842 [label="param AddDebugSourceDocumentsForChecksumDirectives(SyntaxTree tree) 797240"];
1843 [label="param AddDebugSourceDocumentsForChecksumDirectives(DiagnosticBag diagnostics) 797241"];
1844 [label="param AddDebugSourceDocumentsForChecksumDirectives(this) 797242"];
1845 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 797243"];
1846 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 797244"];
1847 [label="var checksumDirectives = tree.GetRoot().GetDirectives(d => d.Kind() == SyntaxKind.PragmaChecksumDirectiveTrivia &&\n                                                                 !d.ContainsDiagnostics); 797245"];
1848 [label="foreach (var directive in checksumDirectives)\n            {\n                var checksumDirective = (PragmaChecksumDirectiveTriviaSyntax)directive;\n                var path = checksumDirective.File.ValueText;\n\n                var checksumText = checksumDirective.Bytes.ValueText;\n                var normalizedPath = documentsBuilder.NormalizeDebugDocumentPath(path, basePath: tree.FilePath);\n                var existingDoc = documentsBuilder.TryGetDebugDocumentForNormalizedPath(normalizedPath);\n\n                // duplicate checksum pragmas are valid as long as values match\n                // if we have seen this document already, check for matching values.\n                if (existingDoc != null)\n                {\n                    // pragma matches a file path on an actual tree.\n                    // Dev12 compiler just ignores the pragma in this case which means that\n                    // checksum of the actual tree always wins and no warning is given.\n                    // We will continue doing the same.\n                    if (existingDoc.IsComputedChecksum)\n                    {\n                        continue;\n                    }\n\n                    var sourceInfo = existingDoc.GetSourceInfo();\n                    if (ChecksumMatches(checksumText, sourceInfo.Checksum))\n                    {\n                        var guid = Guid.Parse(checksumDirective.Guid.ValueText);\n                        if (guid == sourceInfo.ChecksumAlgorithmId)\n                        {\n                            // all parts match, nothing to do\n                            continue;\n                        }\n                    }\n\n                    // did not match to an existing document\n                    // produce a warning and ignore the pragma\n                    diagnostics.Add(ErrorCode.WRN_ConflictingChecksum, new SourceLocation(checksumDirective), path);\n                }\n                else\n                {\n                    var newDocument = new Cci.DebugSourceDocument(\n                        normalizedPath,\n                        Cci.DebugSourceDocument.CorSymLanguageTypeCSharp,\n                        MakeChecksumBytes(checksumText),\n                        Guid.Parse(checksumDirective.Guid.ValueText));\n\n                    documentsBuilder.AddDebugDocument(newDocument);\n                }\n            } 797246"];
1849 [label="if ((emittingPdb || emitTestCoverageData) &&\n                    !CreateDebugDocuments(moduleBeingBuilt.DebugDocumentsBuilder, moduleBeingBuilt.EmbeddedTexts, diagnostics))\n                {\n                    return false;\n                } 797247"];
1850 [label="DiagnosticBag? methodBodyDiagnosticBag = DiagnosticBag.GetInstance(); 797248"];
1851 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 797249"];
1852 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 797250"];
1853 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 797251"];
1854 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 797252"];
1855 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 797253"];
1856 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 797254"];
1857 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 797255"];
1858 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 797256"];
1859 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken) 797257"];
1860 [label="param CompileMethodBodies(CSharpCompilation compilation) 797258"];
1861 [label="param CompileMethodBodies(PEModuleBuilder moduleBeingBuiltOpt) 797259"];
1862 [label="param CompileMethodBodies(bool emittingPdb) 797260"];
1863 [label="param CompileMethodBodies(bool emitTestCoverageData) 797261"];
1864 [label="param CompileMethodBodies(bool hasDeclarationErrors) 797262"];
1865 [label="param CompileMethodBodies(DiagnosticBag diagnostics) 797263"];
1866 [label="param CompileMethodBodies(Predicate<Symbol> filterOpt) 797264"];
1867 [label="param CompileMethodBodies(CancellationToken cancellationToken) 797265"];
1868 [label="Debug.Assert(compilation != null); 797266"];
1869 [label="Debug.Assert(compilation != null); 797267"];
1870 [label="Debug.Assert(diagnostics != null); 797268"];
1871 [label="Debug.Assert(diagnostics != null); 797269"];
1872 [label="compilation.PreviousSubmission 797270"];
1873 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 797271"];
1874 [label="ScriptCompilationInfo 797272"];
1875 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 797273"];
1876 [label="if (compilation.PreviousSubmission != null)\n            {\n                // In case there is a previous submission, we should ensure\n                // it has already created anonymous type/delegates templates\n\n                // NOTE: if there are any errors, we will pick up what was created anyway\n                compilation.PreviousSubmission.EnsureAnonymousTypeTemplates(cancellationToken);\n\n                // TODO: revise to use a loop instead of a recursion\n            } 797274"];
1877 [label="MethodSymbol entryPoint = null; 797275"];
1878 [label="if (filterOpt is null)\n            {\n                entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken);\n            } 797276"];
1879 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 797277"];
1880 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 797278"];
1881 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 797279"];
1882 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 797280"];
1883 [label="entryPoint = GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken); 797281"];
1884 [label="GetEntryPoint(compilation, moduleBeingBuiltOpt, hasDeclarationErrors, diagnostics, cancellationToken) 797282"];
1885 [label="param GetEntryPoint(CSharpCompilation compilation) 797283"];
1886 [label="param GetEntryPoint(PEModuleBuilder moduleBeingBuilt) 797284"];
1887 [label="param GetEntryPoint(bool hasDeclarationErrors) 797285"];
1888 [label="param GetEntryPoint(DiagnosticBag diagnostics) 797286"];
1889 [label="param GetEntryPoint(CancellationToken cancellationToken) 797287"];
1890 [label="var entryPointAndDiagnostics = compilation.GetEntryPointAndDiagnostics(cancellationToken); 797288"];
1891 [label="compilation.GetEntryPointAndDiagnostics(cancellationToken) 797289"];
1892 [label="param GetEntryPointAndDiagnostics(CancellationToken cancellationToken) 797290"];
1893 [label="param GetEntryPointAndDiagnostics(this) 797291"];
1894 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 797292"];
1895 [label="if (_lazyEntryPoint == null)\n            {\n                EntryPoint? entryPoint;\n                var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this);\n\n                if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                }\n\n                Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null);\n            } 797293"];
1896 [label="EntryPoint? entryPoint; 797294"];
1897 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 797295"];
1898 [label="var simpleProgramEntryPointSymbol = SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this); 797296"];
1899 [label="GetBoundReferenceManager() 797297"];
1900 [label="GetBoundReferenceManager(); 797298"];
1901 [label="this.Options 797299"];
1902 [label="return _options; 797300"];
1903 [label="if (!this.Options.OutputKind.IsApplication() && (this.ScriptClass is null))\n                {\n                    if (simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramNotAnExecutable, simpleProgramEntryPointSymbol.ReturnTypeSyntax.Location);\n                        entryPoint = new EntryPoint(null, diagnostics.ToReadOnlyAndFree());\n                    }\n                    else\n                    {\n                        entryPoint = EntryPoint.None;\n                    }\n                }\n                else\n                {\n                    entryPoint = null;\n\n                    if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    }\n\n                    if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    }\n\n                    if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    }\n                } 797301"];
1904 [label="entryPoint = null; 797302"];
1905 [label="this.Options 797303"];
1906 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 797304"];
1907 [label="if (this.Options.MainTypeName != null && !this.Options.MainTypeName.IsValidClrTypeName())\n                    {\n                        Debug.Assert(!this.Options.Errors.IsDefaultOrEmpty);\n                        entryPoint = EntryPoint.None;\n                    } 797305"];
1908 [label="if (entryPoint is null)\n                    {\n                        ImmutableArray<Diagnostic> diagnostics;\n                        var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics);\n                        entryPoint = new EntryPoint(entryPointMethod, diagnostics);\n                    } 797306"];
1909 [label="ImmutableArray<Diagnostic> diagnostics; 797307"];
1910 [label="diagnostics 797308"];
1911 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 797309"];
1912 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 797310"];
1913 [label="var entryPointMethod = FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics); 797311"];
1914 [label="FindEntryPoint(simpleProgramEntryPointSymbol, cancellationToken, out diagnostics) 797312"];
1915 [label="param FindEntryPoint(MethodSymbol? simpleProgramEntryPointSymbol) 797313"];
1916 [label="param FindEntryPoint(CancellationToken cancellationToken) 797314"];
1917 [label="param FindEntryPoint(out ImmutableArray<Diagnostic> sealedDiagnostics) 797315"];
1918 [label="param FindEntryPoint(this) 797316"];
1919 [label="var diagnostics = DiagnosticBag.GetInstance(); 797317"];
1920 [label="var entryPointCandidates = ArrayBuilder<MethodSymbol>.GetInstance(); 797318"];
1921 [label="NamedTypeSymbol? mainType; 797319"];
1922 [label="this.Options 797320"];
1923 [label="get\n            {\n                return _options;\n            } 797321"];
1924 [label="string? mainTypeName = this.Options.MainTypeName; 797322"];
1925 [label="this.SourceModule 797323"];
1926 [label="get\n            {\n                return Assembly.Modules[0];\n            } 797324"];
1927 [label="GetBoundReferenceManager() 797325"];
1928 [label="param GetBoundReferenceManager(this) 797326"];
1929 [label="GetBoundReferenceManager(); 797327"];
1930 [label="NamespaceSymbol globalNamespace = this.SourceModule.GlobalNamespace; 797328"];
1931 [label="this.ScriptClass 797329"];
1932 [label="get { return _scriptClass.Value; } 797330"];
1933 [label="return _scriptClass.Value; 797331"];
1934 [label="_scriptClass.Value 797332"];
1935 [label="param BindScriptClass(this) 797333"];
1936 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 797334"];
1937 [label="return (ImplicitNamedTypeSymbol?)CommonBindScriptClass().GetSymbol(); 797335"];
1938 [label="get { return this.SourceModule.GetPublicSymbol(); } 797336"];
1939 [label="this.SourceModule 797337"];
1940 [label="get\n            {\n                return Assembly.Modules[0];\n            } 797338"];
1941 [label="GetBoundReferenceManager() 797339"];
1942 [label="param GetBoundReferenceManager(this) 797340"];
1943 [label="GetBoundReferenceManager(); 797341"];
1944 [label="return this.SourceModule.GetPublicSymbol(); 797342"];
1945 [label="var scriptClass = this.ScriptClass; 797343"];
1946 [label="if (mainTypeName != null)\n                {\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    }\n\n                    var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity();\n                    if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    }\n\n                    mainType = mainTypeOrNamespace as NamedTypeSymbol;\n                    if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    }\n\n                    AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered());\n                }\n                else\n                {\n                    mainType = null;\n\n                    AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken));\n\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    }\n                } 797344"];
1947 [label="if (mainTypeName != null)\n                {\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object)\n                    {\n                        // CONSIDER: we could use the symbol instead of just the name.\n                        diagnostics.Add(ErrorCode.WRN_MainIgnored, NoLocation.Singleton, mainTypeName);\n                        return scriptClass.GetScriptEntryPoint();\n                    }\n\n                    var mainTypeOrNamespace = globalNamespace.GetNamespaceOrTypeByQualifiedName(mainTypeName.Split('.')).OfMinimalArity();\n                    if (mainTypeOrNamespace is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotFound, NoLocation.Singleton, mainTypeName);\n                        return null;\n                    }\n\n                    mainType = mainTypeOrNamespace as NamedTypeSymbol;\n                    if (mainType is null || mainType.IsGenericType || (mainType.TypeKind != TypeKind.Class && mainType.TypeKind != TypeKind.Struct && !mainType.IsInterface))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_MainClassNotClass, mainTypeOrNamespace.Locations.First(), mainTypeOrNamespace);\n                        return null;\n                    }\n\n                    AddEntryPointCandidates(entryPointCandidates, mainType.GetMembersUnordered());\n                }\n                else\n                {\n                    mainType = null;\n\n                    AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken));\n\n                    // Global code is the entry point, ignore all other Mains.\n                    if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    }\n                } 797345"];
1948 [label="mainType = null; 797346"];
1949 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 797347"];
1950 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 797348"];
1951 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 797349"];
1952 [label="this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken) 797350"];
1953 [label="param GetSymbolsWithNameCore(string name) 797351"];
1954 [label="param GetSymbolsWithNameCore(SymbolFilter filter = SymbolFilter.TypeAndMember) 797352"];
1955 [label="param GetSymbolsWithNameCore(CancellationToken cancellationToken = default) 797353"];
1956 [label="param GetSymbolsWithNameCore(this) 797354"];
1957 [label="if (name == null)\n            {\n                throw new ArgumentNullException(nameof(name));\n            } 797355"];
1958 [label="if (name == null)\n            {\n                throw new ArgumentNullException(nameof(name));\n            } 797356"];
1959 [label="if (filter == SymbolFilter.None)\n            {\n                throw new ArgumentException(CSharpResources.NoNoneSearchCriteria, nameof(filter));\n            } 797357"];
1960 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 797358"];
1961 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 797359"];
1962 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 797360"];
1963 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 797361"];
1964 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 797362"];
1965 [label="new NameSymbolSearcher(this, filter, name, cancellationToken) 797363"];
1966 [label="param NameSymbolSearcher(CSharpCompilation compilation) 797364"];
1967 [label="param NameSymbolSearcher(SymbolFilter filter) 797365"];
1968 [label="param NameSymbolSearcher(string name) 797366"];
1969 [label="param NameSymbolSearcher(CancellationToken cancellationToken) 797367"];
1970 [label="param NameSymbolSearcher(this) 797368"];
1971 [label="compilation 797369"];
1972 [label="filter 797370"];
1973 [label="cancellationToken 797371"];
1974 [label="param NameSymbolSearcher(this) 797372"];
1975 [label="param AbstractSymbolSearcher(CSharpCompilation compilation) 797373"];
1976 [label="param AbstractSymbolSearcher(SymbolFilter filter) 797374"];
1977 [label="param AbstractSymbolSearcher(CancellationToken cancellationToken) 797375"];
1978 [label="param AbstractSymbolSearcher(this) 797376"];
1979 [label="_cache 797377"];
1980 [label="_compilation 797378"];
1981 [label="_includeNamespace 797379"];
1982 [label="_includeType 797380"];
1983 [label="_includeMember 797381"];
1984 [label="_cache = PooledDictionary<Declaration, NamespaceOrTypeSymbol>.GetInstance(); 797382"];
1985 [label="_cache 797383"];
1986 [label="_compilation 797384"];
1987 [label="_includeNamespace = (filter & SymbolFilter.Namespace) == SymbolFilter.Namespace; 797385"];
1988 [label="_includeNamespace 797386"];
1989 [label="_includeType = (filter & SymbolFilter.Type) == SymbolFilter.Type; 797387"];
1990 [label="_includeType 797388"];
1991 [label="_includeMember = (filter & SymbolFilter.Member) == SymbolFilter.Member; 797389"];
1992 [label="_includeMember 797390"];
1993 [label="_cancellationToken 797391"];
1994 [label="_name 797392"];
1995 [label="_name 797393"];
1996 [label="new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName() 797394"];
1997 [label="param GetSymbolsWithName(this) 797395"];
1998 [label="var result = new HashSet<Symbol>(); 797396"];
1999 [label="var spine = ArrayBuilder<MergedNamespaceOrTypeDeclaration>.GetInstance(); 797397"];
2000 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 797398"];
2001 [label="_compilation.MergedRootDeclaration 797399"];
2002 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 797400"];
2003 [label="param GetLazyState(this) 797401"];
2004 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 797402"];
2005 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 797403"];
2006 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result) 797404"];
2007 [label="param AppendSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 797405"];
2008 [label="param AppendSymbolsWithName(MergedNamespaceOrTypeDeclaration current) 797406"];
2009 [label="param AppendSymbolsWithName(HashSet<Symbol> set) 797407"];
2010 [label="param AppendSymbolsWithName(this) 797408"];
2011 [label="if (current.Kind == DeclarationKind.Namespace)\n                {\n                    if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n                }\n                else\n                {\n                    if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n\n                    if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    }\n                } 797409"];
2012 [label="if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    } 797410"];
2013 [label="spine.Add(current); 797411"];
2014 [label="spine.Add(current); 797412"];
2015 [label="foreach (var child in current.Children)\n                {\n                    if (child is MergedNamespaceOrTypeDeclaration mergedNamespaceOrType)\n                    {\n                        if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        }\n                    }\n                } 797413"];
2016 [label="if (child is MergedNamespaceOrTypeDeclaration mergedNamespaceOrType)\n                    {\n                        if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        }\n                    } 797414"];
2017 [label="if (_includeMember || _includeType || child.Kind == DeclarationKind.Namespace)\n                        {\n                            AppendSymbolsWithName(spine, mergedNamespaceOrType, set);\n                        } 797415"];
2018 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 797416"];
2019 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 797417"];
2020 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 797418"];
2021 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set) 797419"];
2022 [label="param AppendSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 797420"];
2023 [label="param AppendSymbolsWithName(MergedNamespaceOrTypeDeclaration current) 797421"];
2024 [label="param AppendSymbolsWithName(HashSet<Symbol> set) 797422"];
2025 [label="if (current.Kind == DeclarationKind.Namespace)\n                {\n                    if (_includeNamespace && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n                }\n                else\n                {\n                    if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    }\n\n                    if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    }\n                } 797423"];
2026 [label="if (_includeType && Matches(current.Name))\n                    {\n                        var container = GetSpineSymbol(spine);\n                        var symbol = GetSymbol(container, current);\n                        if (symbol != null)\n                        {\n                            set.Add(symbol);\n                        }\n                    } 797424"];
2027 [label="if (_includeMember)\n                    {\n                        var typeDeclaration = (MergedTypeDeclaration)current;\n                        if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        }\n                    } 797425"];
2028 [label="var typeDeclaration = (MergedTypeDeclaration)current; 797426"];
2029 [label="if (ShouldCheckTypeForMembers(typeDeclaration))\n                        {\n                            AppendMemberSymbolsWithName(spine, typeDeclaration, set);\n                        } 797427"];
2030 [label="ShouldCheckTypeForMembers(typeDeclaration) 797428"];
2031 [label="param ShouldCheckTypeForMembers(MergedTypeDeclaration current) 797429"];
2032 [label="param ShouldCheckTypeForMembers(this) 797430"];
2033 [label="foreach (SingleTypeDeclaration typeDecl in current.Declarations)\n                {\n                    if (typeDecl.MemberNames.Contains(_name))\n                    {\n                        return true;\n                    }\n                } 797431"];
2034 [label="if (typeDecl.MemberNames.Contains(_name))\n                    {\n                        return true;\n                    } 797432"];
2035 [label="return true; 797433"];
2036 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 797434"];
2037 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 797435"];
2038 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 797436"];
2039 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set) 797437"];
2040 [label="param AppendMemberSymbolsWithName(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 797438"];
2041 [label="param AppendMemberSymbolsWithName(MergedTypeDeclaration current) 797439"];
2042 [label="param AppendMemberSymbolsWithName(HashSet<Symbol> set) 797440"];
2043 [label="param AppendMemberSymbolsWithName(this) 797441"];
2044 [label="_cancellationToken.ThrowIfCancellationRequested(); 797442"];
2045 [label="spine.Add(current); 797443"];
2046 [label="spine.Add(current); 797444"];
2047 [label="var container = GetSpineSymbol(spine); 797445"];
2048 [label="GetSpineSymbol(spine) 797446"];
2049 [label="param GetSpineSymbol(ArrayBuilder<MergedNamespaceOrTypeDeclaration> spine) 797447"];
2050 [label="param GetSpineSymbol(this) 797448"];
2051 [label="if (spine.Count == 0)\n                {\n                    return null;\n                } 797449"];
2052 [label="if (spine.Count == 0)\n                {\n                    return null;\n                } 797450"];
2053 [label="var symbol = GetCachedSymbol(spine[spine.Count - 1]); 797451"];
2054 [label="var symbol = GetCachedSymbol(spine[spine.Count - 1]); 797452"];
2055 [label="GetCachedSymbol(spine[spine.Count - 1]) 797453"];
2056 [label="param GetCachedSymbol(MergedNamespaceOrTypeDeclaration declaration) 797454"];
2057 [label="=> _cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 797455"];
2058 [label="declaration 797456"];
2059 [label="symbol 797457"];
2060 [label="out NamespaceOrTypeSymbol? symbol 797458"];
2061 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol) 797459"];
2062 [label="null 797460"];
2063 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 797461"];
2064 [label="if (symbol != null)\n                {\n                    return symbol;\n                } 797462"];
2065 [label="if (symbol != null)\n                {\n                    return symbol;\n                } 797463"];
2066 [label="_compilation.GlobalNamespace 797464"];
2067 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 797465"];
2068 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 797466"];
2069 [label="return _lazyGlobalNamespace; 797467"];
2070 [label="NamespaceOrTypeSymbol? current = _compilation.GlobalNamespace; 797468"];
2071 [label="for (var i = 1; i < spine.Count; i++)\n                {\n                    current = GetSymbol(current, spine[i]);\n                } 797469"];
2072 [label="for (var i = 1; i < spine.Count; i++)\n                {\n                    current = GetSymbol(current, spine[i]);\n                } 797470"];
2073 [label="current = GetSymbol(current, spine[i]); 797471"];
2074 [label="current = GetSymbol(current, spine[i]); 797472"];
2075 [label="GetSymbol(current, spine[i]) 797473"];
2076 [label="param GetSymbol(NamespaceOrTypeSymbol? container) 797474"];
2077 [label="param GetSymbol(MergedNamespaceOrTypeDeclaration declaration) 797475"];
2078 [label="param GetSymbol(this) 797476"];
2079 [label="if (container == null)\n                {\n                    return _compilation.GlobalNamespace;\n                } 797477"];
2080 [label="if (container == null)\n                {\n                    return _compilation.GlobalNamespace;\n                } 797478"];
2081 [label="if (declaration.Kind == DeclarationKind.Namespace)\n                {\n                    AddCache(container.GetMembers(declaration.Name).OfType<NamespaceOrTypeSymbol>());\n                }\n                else\n                {\n                    AddCache(container.GetTypeMembers(declaration.Name));\n                } 797479"];
2082 [label="AddCache(container.GetTypeMembers(declaration.Name)); 797480"];
2083 [label="AddCache(container.GetTypeMembers(declaration.Name)); 797481"];
2084 [label="AddCache(container.GetTypeMembers(declaration.Name)) 797482"];
2085 [label="param AddCache(IEnumerable<NamespaceOrTypeSymbol> symbols) 797483"];
2086 [label="param AddCache(this) 797484"];
2087 [label="foreach (var symbol in symbols)\n                {\n                    var mergedNamespace = symbol as MergedNamespaceSymbol;\n                    if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    }\n\n                    var sourceNamespace = symbol as SourceNamespaceSymbol;\n                    if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    }\n\n                    var sourceType = symbol as SourceMemberContainerTypeSymbol;\n                    if (sourceType is object)\n                    {\n                        _cache[sourceType.MergedDeclaration] = sourceType;\n                    }\n                } 797485"];
2088 [label="var mergedNamespace = symbol as MergedNamespaceSymbol; 797486"];
2089 [label="if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    } 797487"];
2090 [label="if (mergedNamespace != null)\n                    {\n                        _cache[mergedNamespace.ConstituentNamespaces.OfType<SourceNamespaceSymbol>().First().MergedDeclaration] = symbol;\n                        continue;\n                    } 797488"];
2091 [label="var sourceNamespace = symbol as SourceNamespaceSymbol; 797489"];
2092 [label="if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    } 797490"];
2093 [label="if (sourceNamespace != null)\n                    {\n                        _cache[sourceNamespace.MergedDeclaration] = sourceNamespace;\n                        continue;\n                    } 797491"];
2094 [label="var sourceType = symbol as SourceMemberContainerTypeSymbol; 797492"];
2095 [label="if (sourceType is object)\n                    {\n                        _cache[sourceType.MergedDeclaration] = sourceType;\n                    } 797493"];
2096 [label="_cache 797494"];
2097 [label="AddCache(container.GetTypeMembers(declaration.Name)); 797495"];
2098 [label="return GetCachedSymbol(declaration); 797496"];
2099 [label="GetCachedSymbol(declaration) 797497"];
2100 [label="param GetCachedSymbol(MergedNamespaceOrTypeDeclaration declaration) 797498"];
2101 [label="=> _cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 797499"];
2102 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol) 797500"];
2103 [label="symbol 797501"];
2104 [label="_cache.TryGetValue(declaration, out NamespaceOrTypeSymbol? symbol)\n                        ? symbol\n                        : null 797502"];
2105 [label="return current; 797503"];
2106 [label="if (container != null)\n                {\n                    foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    }\n                } 797504"];
2107 [label="if (container != null)\n                {\n                    foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    }\n                } 797505"];
2108 [label="foreach (var member in container.GetMembers())\n                    {\n                        if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        }\n                    } 797506"];
2109 [label="if (!member.IsTypeOrTypeAlias() &&\n                            (member.CanBeReferencedByName || member.IsExplicitInterfaceImplementation() || member.IsIndexer()) &&\n                            Matches(member.Name))\n                        {\n                            set.Add(member);\n                        } 797507"];
2110 [label="Matches(member.Name) 797508"];
2111 [label="param Matches(string name) 797509"];
2112 [label="=> _name == name 797510"];
2113 [label="_name == name 797511"];
2114 [label="set.Add(member); 797512"];
2115 [label="set.Add(member); 797513"];
2116 [label="spine.RemoveAt(spine.Count - 1); 797514"];
2117 [label="spine.RemoveAt(spine.Count - 1); 797515"];
2118 [label="AppendMemberSymbolsWithName(spine, typeDeclaration, set); 797516"];
2119 [label="spine.RemoveAt(spine.Count - 1); 797517"];
2120 [label="spine.RemoveAt(spine.Count - 1); 797518"];
2121 [label="AppendSymbolsWithName(spine, mergedNamespaceOrType, set); 797519"];
2122 [label="spine.RemoveAt(spine.Count - 1); 797520"];
2123 [label="AppendSymbolsWithName(spine, _compilation.MergedRootDeclaration, result); 797521"];
2124 [label="spine.Free(); 797522"];
2125 [label="_cache.Free(); 797523"];
2126 [label="return result; 797524"];
2127 [label="return new NameSymbolSearcher(this, filter, name, cancellationToken).GetSymbolsWithName(); 797525"];
2128 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 797526"];
2129 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)) 797527"];
2130 [label="param AddEntryPointCandidates(ArrayBuilder<MethodSymbol> entryPointCandidates) 797528"];
2131 [label="param AddEntryPointCandidates(IEnumerable<Symbol> members) 797529"];
2132 [label="foreach (var member in members)\n            {\n                if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                }\n            } 797530"];
2133 [label="foreach (var member in members)\n            {\n                if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                }\n            } 797531"];
2134 [label="if (member is MethodSymbol method &&\n                    method.IsEntryPointCandidate)\n                {\n                    entryPointCandidates.Add(method);\n                } 797532"];
2135 [label="entryPointCandidates.Add(method); 797533"];
2136 [label="entryPointCandidates.Add(method); 797534"];
2137 [label="AddEntryPointCandidates(\n                        entryPointCandidates,\n                        this.GetSymbolsWithNameCore(WellKnownMemberNames.EntryPointMethodName, SymbolFilter.Member, cancellationToken)); 797535"];
2138 [label="if (scriptClass is object || simpleProgramEntryPointSymbol is object)\n                    {\n                        foreach (var main in entryPointCandidates)\n                        {\n                            diagnostics.Add(ErrorCode.WRN_MainIgnored, main.Locations.First(), main);\n                        }\n\n                        if (scriptClass is object)\n                        {\n                            return scriptClass.GetScriptEntryPoint();\n                        }\n\n                        RoslynDebug.Assert(simpleProgramEntryPointSymbol is object);\n                        entryPointCandidates.Clear();\n                        entryPointCandidates.Add(simpleProgramEntryPointSymbol);\n                    } 797536"];
2139 [label="var taskEntryPoints = ArrayBuilder<(bool IsValid, MethodSymbol Candidate, DiagnosticBag SpecificDiagnostics)>.GetInstance(); 797537"];
2140 [label="DiagnosticBag noMainFoundDiagnostics = DiagnosticBag.GetInstance(); 797538"];
2141 [label="var viableEntryPoints = ArrayBuilder<MethodSymbol>.GetInstance(); 797539"];
2142 [label="foreach (var candidate in entryPointCandidates)\n                {\n                    var perCandidateBag = DiagnosticBag.GetInstance();\n                    var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag);\n\n                    if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    }\n                } 797540"];
2143 [label="foreach (var candidate in entryPointCandidates)\n                {\n                    var perCandidateBag = DiagnosticBag.GetInstance();\n                    var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag);\n\n                    if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    }\n                } 797541"];
2144 [label="var perCandidateBag = DiagnosticBag.GetInstance(); 797542"];
2145 [label="var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag); 797543"];
2146 [label="var (IsCandidate, IsTaskLike) = HasEntryPointSignature(candidate, perCandidateBag); 797544"];
2147 [label="HasEntryPointSignature(candidate, perCandidateBag) 797545"];
2148 [label="param HasEntryPointSignature(MethodSymbol method) 797546"];
2149 [label="param HasEntryPointSignature(DiagnosticBag bag) 797547"];
2150 [label="param HasEntryPointSignature(this) 797548"];
2151 [label="if (method.IsVararg)\n            {\n                return (false, false);\n            } 797549"];
2152 [label="TypeSymbol returnType = method.ReturnType; 797550"];
2153 [label="bool returnsTaskOrTaskOfInt = false; 797551"];
2154 [label="if (returnType.SpecialType != SpecialType.System_Int32 && !returnType.IsVoidType())\n            {\n                // Never look for ReturnsAwaitableToVoidOrInt on int32 or void\n                returnsTaskOrTaskOfInt = ReturnsAwaitableToVoidOrInt(method, bag);\n                if (!returnsTaskOrTaskOfInt)\n                {\n                    return (false, false);\n                }\n            } 797552"];
2155 [label="if (returnType.SpecialType != SpecialType.System_Int32 && !returnType.IsVoidType())\n            {\n                // Never look for ReturnsAwaitableToVoidOrInt on int32 or void\n                returnsTaskOrTaskOfInt = ReturnsAwaitableToVoidOrInt(method, bag);\n                if (!returnsTaskOrTaskOfInt)\n                {\n                    return (false, false);\n                }\n            } 797553"];
2156 [label="if (method.RefKind != RefKind.None)\n            {\n                return (false, returnsTaskOrTaskOfInt);\n            } 797554"];
2157 [label="if (method.Parameters.Length == 0)\n            {\n                return (true, returnsTaskOrTaskOfInt);\n            } 797555"];
2158 [label="if (method.Parameters.Length == 0)\n            {\n                return (true, returnsTaskOrTaskOfInt);\n            } 797556"];
2159 [label="return (true, returnsTaskOrTaskOfInt); 797557"];
2160 [label="true 797558"];
2161 [label="returnsTaskOrTaskOfInt 797559"];
2162 [label="if (IsTaskLike)\n                    {\n                        taskEntryPoints.Add((IsCandidate, candidate, perCandidateBag));\n                    }\n                    else\n                    {\n                        if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        }\n                        perCandidateBag.Free();\n                    } 797560"];
2163 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 797561"];
2164 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 797562"];
2165 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 797563"];
2166 [label="checkValid(candidate, IsCandidate, perCandidateBag) 797564"];
2167 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 797565"];
2168 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 797566"];
2169 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 797567"];
2170 [label="bool checkValid(MethodSymbol candidate, bool isCandidate, DiagnosticBag specificDiagnostics)\n                {\n                    if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    }\n\n                    if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    }\n                    return true;\n                } 797568"];
2171 [label="if (!isCandidate)\n                    {\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_InvalidMainSig, candidate.Locations.First(), candidate);\n                        noMainFoundDiagnostics.AddRange(specificDiagnostics);\n                        return false;\n                    } 797569"];
2172 [label="if (candidate.IsGenericMethod || candidate.ContainingType.IsGenericType)\n                    {\n                        // a single error for partial methods:\n                        noMainFoundDiagnostics.Add(ErrorCode.WRN_MainCantBeGeneric, candidate.Locations.First(), candidate);\n                        return false;\n                    } 797570"];
2173 [label="return true; 797571"];
2174 [label="if (checkValid(candidate, IsCandidate, perCandidateBag))\n                        {\n                            if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            }\n                        } 797572"];
2175 [label="if (candidate.IsAsync)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NonTaskMainCantBeAsync, candidate.Locations.First(), candidate);\n                            }\n                            else\n                            {\n                                diagnostics.AddRange(perCandidateBag);\n                                viableEntryPoints.Add(candidate);\n                            } 797573"];
2176 [label="diagnostics.AddRange(perCandidateBag); 797574"];
2177 [label="diagnostics.AddRange(perCandidateBag); 797575"];
2178 [label="viableEntryPoints.Add(candidate); 797576"];
2179 [label="viableEntryPoints.Add(candidate); 797577"];
2180 [label="perCandidateBag.Free(); 797578"];
2181 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 797579"];
2182 [label="if (viableEntryPoints.Count == 0)\n                {\n                    foreach (var (IsValid, Candidate, SpecificDiagnostics) in taskEntryPoints)\n                    {\n                        if (checkValid(Candidate, IsValid, SpecificDiagnostics) &&\n                            CheckFeatureAvailability(Candidate.ExtractReturnTypeSyntax(), MessageID.IDS_FeatureAsyncMain, diagnostics))\n                        {\n                            diagnostics.AddRange(SpecificDiagnostics);\n                            viableEntryPoints.Add(Candidate);\n                        }\n                    }\n                }\n                else if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 797580"];
2183 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 797581"];
2184 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 797582"];
2185 [label="if (LanguageVersion >= MessageID.IDS_FeatureAsyncMain.RequiredVersion() && taskEntryPoints.Count > 0)\n                {\n                    var taskCandidates = taskEntryPoints.SelectAsArray(s => (Symbol)s.Candidate);\n                    var taskLocations = taskCandidates.SelectAsArray(s => s.Locations[0]);\n\n                    foreach (var candidate in taskCandidates)\n                    {\n                        // Method '{0}' will not be used as an entry point because a synchronous entry point '{1}' was found.\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.WRN_SyncAndAsyncEntryPoints,\n                             args: new object[] { candidate, viableEntryPoints[0] },\n                             symbols: taskCandidates,\n                             additionalLocations: taskLocations);\n                        diagnostics.Add(new CSDiagnostic(info, candidate.Locations[0]));\n                    }\n                } 797583"];
2186 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 797584"];
2187 [label="if (viableEntryPoints.Count == 0)\n                {\n                    diagnostics.AddRange(noMainFoundDiagnostics);\n                }\n                else if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 797585"];
2188 [label="if (mainType is null)\n                {\n                    // Filters out diagnostics so that only InvalidMainSig and MainCant'BeGeneric are left.\n                    // The reason that Error diagnostics can end up in `noMainFoundDiagnostics` is when\n                    // HasEntryPointSignature yields some Error Diagnostics when people implement Task or Task<T> incorrectly.\n                    //\n                    // We can't add those Errors to the general diagnostics bag because it would break previously-working programs.\n                    // The fact that these warnings are not added when csc is invoked with /main is possibly a bug, and is tracked at\n                    // https://github.com/dotnet/roslyn/issues/18964\n                    foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    }\n                } 797586"];
2189 [label="foreach (var diagnostic in noMainFoundDiagnostics.AsEnumerable())\n                    {\n                        if (diagnostic.Code == (int)ErrorCode.WRN_InvalidMainSig || diagnostic.Code == (int)ErrorCode.WRN_MainCantBeGeneric)\n                        {\n                            diagnostics.Add(diagnostic);\n                        }\n                    } 797587"];
2190 [label="MethodSymbol? entryPoint = null; 797588"];
2191 [label="if (viableEntryPoints.Count == 0)\n                {\n                    if (mainType is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoEntryPoint, NoLocation.Singleton);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoMainInClass, mainType.Locations.First(), mainType);\n                    }\n                }\n                else\n                {\n                    foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    }\n\n                    if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    }\n                } 797589"];
2192 [label="if (viableEntryPoints.Count == 0)\n                {\n                    if (mainType is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoEntryPoint, NoLocation.Singleton);\n                    }\n                    else\n                    {\n                        diagnostics.Add(ErrorCode.ERR_NoMainInClass, mainType.Locations.First(), mainType);\n                    }\n                }\n                else\n                {\n                    foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    }\n\n                    if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    }\n                } 797590"];
2193 [label="foreach (var viableEntryPoint in viableEntryPoints)\n                    {\n                        if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        }\n                    } 797591"];
2194 [label="if (viableEntryPoint.GetUnmanagedCallersOnlyAttributeData(forceComplete: true) is { } data)\n                        {\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.Uninitialized));\n                            Debug.Assert(!ReferenceEquals(data, UnmanagedCallersOnlyAttributeData.AttributePresentDataNotBound));\n                            diagnostics.Add(ErrorCode.ERR_EntryPointCannotBeUnmanagedCallersOnly, viableEntryPoint.Locations.First());\n                        } 797592"];
2195 [label="if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    } 797593"];
2196 [label="if (viableEntryPoints.Count > 1)\n                    {\n                        viableEntryPoints.Sort(LexicalOrderSymbolComparer.Instance);\n                        var info = new CSDiagnosticInfo(\n                             ErrorCode.ERR_MultipleEntryPoints,\n                             args: Array.Empty<object>(),\n                             symbols: viableEntryPoints.OfType<Symbol>().AsImmutable(),\n                             additionalLocations: viableEntryPoints.Select(m => m.Locations.First()).OfType<Location>().AsImmutable());\n\n                        diagnostics.Add(new CSDiagnostic(info, viableEntryPoints.First().Locations.First()));\n                    }\n                    else\n                    {\n                        entryPoint = viableEntryPoints[0];\n                    } 797594"];
2197 [label="entryPoint = viableEntryPoints[0]; 797595"];
2198 [label="taskEntryPoints.Free(); 797596"];
2199 [label="viableEntryPoints.Free(); 797597"];
2200 [label="noMainFoundDiagnostics.Free(); 797598"];
2201 [label="return entryPoint; 797599"];
2202 [label="entryPointCandidates.Free(); 797600"];
2203 [label="sealedDiagnostics = diagnostics.ToReadOnlyAndFree(); 797601"];
2204 [label="null 797602"];
2205 [label="ImmutableArray<Diagnostic>.Empty 797603"];
2206 [label="new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 797604"];
2207 [label="param EntryPoint(MethodSymbol? methodSymbol) 797605"];
2208 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 797606"];
2209 [label="param EntryPoint(this) 797607"];
2210 [label="MethodSymbol 797608"];
2211 [label="this.MethodSymbol 797609"];
2212 [label="this.Diagnostics 797610"];
2213 [label="None = new EntryPoint(null, ImmutableArray<Diagnostic>.Empty) 797611"];
2214 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 797612"];
2215 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 797613"];
2216 [label="entryPoint = new EntryPoint(entryPointMethod, diagnostics); 797614"];
2217 [label="new EntryPoint(entryPointMethod, diagnostics) 797615"];
2218 [label="param EntryPoint(MethodSymbol? methodSymbol) 797616"];
2219 [label="param EntryPoint(ImmutableArray<Diagnostic> diagnostics) 797617"];
2220 [label="param EntryPoint(this) 797618"];
2221 [label="MethodSymbol 797619"];
2222 [label="this.MethodSymbol 797620"];
2223 [label="this.Diagnostics 797621"];
2224 [label="this.Options 797622"];
2225 [label="return _options; 797623"];
2226 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 797624"];
2227 [label="if (this.Options.MainTypeName != null && simpleProgramEntryPointSymbol is object)\n                    {\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        diagnostics.Add(ErrorCode.ERR_SimpleProgramDisallowsMainType, NoLocation.Singleton);\n                        entryPoint = new EntryPoint(entryPoint.MethodSymbol, entryPoint.Diagnostics.Concat(diagnostics.ToReadOnlyAndFree()));\n                    } 797625"];
2228 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 797626"];
2229 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 797627"];
2230 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 797628"];
2231 [label="Interlocked.CompareExchange(ref _lazyEntryPoint, entryPoint, null); 797629"];
2232 [label="return _lazyEntryPoint; 797630"];
2233 [label="Debug.Assert(!entryPointAndDiagnostics.Diagnostics.IsDefault); 797631"];
2234 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 797632"];
2235 [label="diagnostics.AddRange(entryPointAndDiagnostics.Diagnostics); 797633"];
2236 [label="var entryPoint = entryPointAndDiagnostics.MethodSymbol; 797634"];
2237 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 797635"];
2238 [label="if ((object)entryPoint == null)\n            {\n                return null;\n            } 797636"];
2239 [label="SynthesizedEntryPointSymbol synthesizedEntryPoint = entryPoint as SynthesizedEntryPointSymbol; 797637"];
2240 [label="if ((object)synthesizedEntryPoint == null)\n            {\n                var returnType = entryPoint.ReturnType;\n                if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                }\n            } 797638"];
2241 [label="if ((object)synthesizedEntryPoint == null)\n            {\n                var returnType = entryPoint.ReturnType;\n                if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                }\n            } 797639"];
2242 [label="var returnType = entryPoint.ReturnType; 797640"];
2243 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 797641"];
2244 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 797642"];
2245 [label="if (returnType.IsGenericTaskType(compilation) || returnType.IsNonGenericTaskType(compilation))\n                {\n                    synthesizedEntryPoint = new SynthesizedEntryPointSymbol.AsyncForwardEntryPoint(compilation, entryPoint.ContainingType, entryPoint);\n                    entryPoint = synthesizedEntryPoint;\n                    if ((object)moduleBeingBuilt != null)\n                    {\n                        moduleBeingBuilt.AddSynthesizedDefinition(entryPoint.ContainingType, synthesizedEntryPoint.GetCciAdapter());\n                    }\n                } 797643"];
2246 [label="GetBoundReferenceManager() 797644"];
2247 [label="param GetBoundReferenceManager(this) 797645"];
2248 [label="GetBoundReferenceManager(); 797646"];
2249 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 797647"];
2250 [label="if (((object)synthesizedEntryPoint != null) &&\n                (moduleBeingBuilt != null) &&\n                !hasDeclarationErrors &&\n                !diagnostics.HasAnyErrors())\n            {\n                BoundStatement body = synthesizedEntryPoint.CreateBody(diagnostics);\n                if (body.HasErrors || diagnostics.HasAnyErrors())\n                {\n                    return entryPoint;\n                }\n\n                var dynamicAnalysisSpans = ImmutableArray<SourceSpan>.Empty;\n                VariableSlotAllocator lazyVariableSlotAllocator = null;\n                var lambdaDebugInfoBuilder = ArrayBuilder<LambdaDebugInfo>.GetInstance();\n                var closureDebugInfoBuilder = ArrayBuilder<ClosureDebugInfo>.GetInstance();\n                StateMachineTypeSymbol stateMachineTypeOpt = null;\n                const int methodOrdinal = -1;\n\n                var loweredBody = LowerBodyOrInitializer(\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    body,\n                    null,\n                    new TypeCompilationState(synthesizedEntryPoint.ContainingType, compilation, moduleBeingBuilt),\n                    false,\n                    null,\n                    ref dynamicAnalysisSpans,\n                    diagnostics,\n                    ref lazyVariableSlotAllocator,\n                    lambdaDebugInfoBuilder,\n                    closureDebugInfoBuilder,\n                    out stateMachineTypeOpt);\n\n                Debug.Assert((object)lazyVariableSlotAllocator == null);\n                Debug.Assert((object)stateMachineTypeOpt == null);\n                Debug.Assert(dynamicAnalysisSpans.IsEmpty);\n                Debug.Assert(lambdaDebugInfoBuilder.IsEmpty());\n                Debug.Assert(closureDebugInfoBuilder.IsEmpty());\n\n                lambdaDebugInfoBuilder.Free();\n                closureDebugInfoBuilder.Free();\n\n                var emittedBody = GenerateMethodBody(\n                    moduleBeingBuilt,\n                    synthesizedEntryPoint,\n                    methodOrdinal,\n                    loweredBody,\n                    ImmutableArray<LambdaDebugInfo>.Empty,\n                    ImmutableArray<ClosureDebugInfo>.Empty,\n                    stateMachineTypeOpt: null,\n                    variableSlotAllocatorOpt: null,\n                    diagnostics: diagnostics,\n                    debugDocumentProvider: null,\n                    importChainOpt: null,\n                    emittingPdb: false,\n                    emitTestCoverageData: false,\n                    dynamicAnalysisSpans: ImmutableArray<SourceSpan>.Empty,\n                    entryPointOpt: null);\n                moduleBeingBuilt.SetMethodBody(synthesizedEntryPoint, emittedBody);\n            } 797648"];
2251 [label="return entryPoint; 797649"];
2252 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 797650"];
2253 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 797651"];
2254 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 797652"];
2255 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 797653"];
2256 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 797654"];
2257 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 797655"];
2258 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 797656"];
2259 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 797657"];
2260 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 797658"];
2261 [label="var methodCompiler = new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken); 797659"];
2262 [label="new MethodCompiler(\n                compilation,\n                moduleBeingBuiltOpt,\n                emittingPdb,\n                emitTestCoverageData,\n                hasDeclarationErrors,\n                diagnostics,\n                filterOpt,\n                entryPoint as SynthesizedEntryPointSymbol.AsyncForwardEntryPoint,\n                cancellationToken) 797660"];
2263 [label="param MethodCompiler(CSharpCompilation compilation) 797661"];
2264 [label="param MethodCompiler(PEModuleBuilder moduleBeingBuiltOpt) 797662"];
2265 [label="param MethodCompiler(bool emittingPdb) 797663"];
2266 [label="param MethodCompiler(bool emitTestCoverageData) 797664"];
2267 [label="param MethodCompiler(bool hasDeclarationErrors) 797665"];
2268 [label="param MethodCompiler(DiagnosticBag diagnostics) 797666"];
2269 [label="param MethodCompiler(Predicate<Symbol> filterOpt) 797667"];
2270 [label="param MethodCompiler(SynthesizedEntryPointSymbol.AsyncForwardEntryPoint entryPointOpt) 797668"];
2271 [label="param MethodCompiler(CancellationToken cancellationToken) 797669"];
2272 [label="param MethodCompiler(this) 797670"];
2273 [label="param MethodCompiler(this) 797671"];
2274 [label="_compilation 797672"];
2275 [label="_emittingPdb 797673"];
2276 [label="_emitTestCoverageData 797674"];
2277 [label="_diagnostics 797675"];
2278 [label="_hasDeclarationErrors 797676"];
2279 [label="_moduleBeingBuiltOpt 797677"];
2280 [label="_filterOpt 797678"];
2281 [label="_debugDocumentProvider 797679"];
2282 [label="_entryPointOpt 797680"];
2283 [label="_compilerTasks 797681"];
2284 [label="_globalHasErrors 797682"];
2285 [label="Debug.Assert(compilation != null); 797683"];
2286 [label="Debug.Assert(compilation != null); 797684"];
2287 [label="Debug.Assert(diagnostics != null); 797685"];
2288 [label="Debug.Assert(diagnostics != null); 797686"];
2289 [label="_compilation 797687"];
2290 [label="_moduleBeingBuiltOpt 797688"];
2291 [label="_emittingPdb 797689"];
2292 [label="_cancellationToken 797690"];
2293 [label="_diagnostics 797691"];
2294 [label="_filterOpt 797692"];
2295 [label="_entryPointOpt 797693"];
2296 [label="_hasDeclarationErrors 797694"];
2297 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 797695"];
2298 [label="SetGlobalErrorIfTrue(hasDeclarationErrors) 797696"];
2299 [label="param SetGlobalErrorIfTrue(bool arg) 797697"];
2300 [label="param SetGlobalErrorIfTrue(this) 797698"];
2301 [label="if (arg)\n            {\n                _globalHasErrors = true;\n            } 797699"];
2302 [label="SetGlobalErrorIfTrue(hasDeclarationErrors); 797700"];
2303 [label="if (emittingPdb || emitTestCoverageData)\n            {\n                _debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile);\n            } 797701"];
2304 [label="_debugDocumentProvider = (path, basePath) => moduleBeingBuiltOpt.DebugDocumentsBuilder.GetOrAddDebugDocument(path, basePath, CreateDebugDocumentForFile); 797702"];
2305 [label="_debugDocumentProvider 797703"];
2306 [label="_emitTestCoverageData 797704"];
2307 [label="compilation.Options 797705"];
2308 [label="get\n            {\n                return _options;\n            } 797706"];
2309 [label="return _options; 797707"];
2310 [label="if (compilation.Options.ConcurrentBuild)\n            {\n                methodCompiler._compilerTasks = new ConcurrentStack<Task>();\n            } 797708"];
2311 [label="methodCompiler._compilerTasks = new ConcurrentStack<Task>(); 797709"];
2312 [label="methodCompiler._compilerTasks 797710"];
2313 [label="compilation.SourceModule 797711"];
2314 [label="get\n            {\n                return Assembly.Modules[0];\n            } 797712"];
2315 [label="Assembly 797713"];
2316 [label="get\n            {\n                return SourceAssembly;\n            } 797714"];
2317 [label="SourceAssembly 797715"];
2318 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 797716"];
2319 [label="GetBoundReferenceManager() 797717"];
2320 [label="param GetBoundReferenceManager(this) 797718"];
2321 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 797719"];
2322 [label="return _referenceManager; 797720"];
2323 [label="GetBoundReferenceManager(); 797721"];
2324 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 797722"];
2325 [label="return Assembly.Modules[0]; 797723"];
2326 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 797724"];
2327 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace) 797725"];
2328 [label="param CompileNamespace(NamespaceSymbol symbol) 797726"];
2329 [label="param CompileNamespace(this) 797727"];
2330 [label="foreach (var s in symbol.GetMembersUnordered())\n            {\n                s.Accept(this, null);\n            } 797728"];
2331 [label="s.Accept(this, null); 797729"];
2332 [label="s.Accept(this, null); 797730"];
2333 [label="s.Accept(this, null); 797731"];
2334 [label="param VisitNamedType(NamedTypeSymbol symbol) 797732"];
2335 [label="param VisitNamedType(TypeCompilationState arg) 797733"];
2336 [label="param VisitNamedType(this) 797734"];
2337 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 797735"];
2338 [label="if (!PassesFilter(_filterOpt, symbol))\n            {\n                return null;\n            } 797736"];
2339 [label="PassesFilter(_filterOpt, symbol) 797737"];
2340 [label="param PassesFilter(Predicate<Symbol> filterOpt) 797738"];
2341 [label="param PassesFilter(Symbol symbol) 797739"];
2342 [label="return (filterOpt == null) || filterOpt(symbol); 797740"];
2343 [label="return (filterOpt == null) || filterOpt(symbol); 797741"];
2344 [label="arg = null; 797742"];
2345 [label="_cancellationToken.ThrowIfCancellationRequested(); 797743"];
2346 [label="_compilation.Options 797744"];
2347 [label="get\n            {\n                return _options;\n            } 797745"];
2348 [label="if (_compilation.Options.ConcurrentBuild)\n            {\n                Task worker = CompileNamedTypeAsync(symbol);\n                _compilerTasks.Push(worker);\n            }\n            else\n            {\n                CompileNamedType(symbol);\n            } 797746"];
2349 [label="Task worker = CompileNamedTypeAsync(symbol); 797747"];
2350 [label="CompileNamedTypeAsync(symbol) 797748"];
2351 [label="param CompileNamedTypeAsync(NamedTypeSymbol symbol) 797749"];
2352 [label="param CompileNamedTypeAsync(this) 797750"];
2353 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 797751"];
2354 [label="return Task.Run(UICultureUtilities.WithCurrentUICulture(() =>\n                {\n                    try\n                    {\n                        CompileNamedType(symbol);\n                    }\n                    catch (Exception e) when (FatalError.ReportAndPropagateUnlessCanceled(e))\n                    {\n                        throw ExceptionUtilities.Unreachable;\n                    }\n                }), _cancellationToken); 797752"];
2355 [label="Task worker = CompileNamedTypeAsync(symbol); 797753"];
2356 [label="_compilerTasks.Push(worker); 797754"];
2357 [label="return null; 797755"];
2358 [label="s.Accept(this, null); 797756"];
2359 [label="methodCompiler.CompileNamespace(compilation.SourceModule.GlobalNamespace); 797757"];
2360 [label="methodCompiler.WaitForWorkers() 797758"];
2361 [label="param WaitForWorkers(this) 797759"];
2362 [label="var tasks = _compilerTasks; 797760"];
2363 [label="if (tasks == null)\n            {\n                return;\n            } 797761"];
2364 [label="if (tasks == null)\n            {\n                return;\n            } 797762"];
2365 [label="Task curTask; 797763"];
2366 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 797764"];
2367 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 797765"];
2368 [label="curTask.GetAwaiter().GetResult(); 797766"];
2369 [label="methodCompiler.WaitForWorkers(); 797767"];
2370 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 797768"];
2371 [label="if (moduleBeingBuiltOpt != null)\n            {\n                var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics);\n\n                var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics);\n                methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics);\n\n                // By this time we have processed all types reachable from module's global namespace\n                compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics);\n                methodCompiler.WaitForWorkers();\n\n                var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass;\n                if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                }\n            } 797769"];
2372 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 797770"];
2373 [label="moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics) 797771"];
2374 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 797772"];
2375 [label="=> _additionalTypes 797773"];
2376 [label="_additionalTypes 797774"];
2377 [label="var additionalTypes = moduleBeingBuiltOpt.GetAdditionalTopLevelTypes(diagnostics); 797775"];
2378 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 797776"];
2379 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 797777"];
2380 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics) 797778"];
2381 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 797779"];
2382 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 797780"];
2383 [label="param CompileSynthesizedMethods(this) 797781"];
2384 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 797782"];
2385 [label="methodCompiler.CompileSynthesizedMethods(additionalTypes, diagnostics); 797783"];
2386 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 797784"];
2387 [label="moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics) 797785"];
2388 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 797786"];
2389 [label="param GetEmbeddedTypes(this) 797787"];
2390 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 797788"];
2391 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 797789"];
2392 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 797790"];
2393 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 797791"];
2394 [label="param CreateEmbeddedAttributesIfNeeded(this) 797792"];
2395 [label="GetNeedsGeneratedAttributes() 797793"];
2396 [label="param GetNeedsGeneratedAttributes(this) 797794"];
2397 [label="_needsGeneratedAttributes_IsFrozen = true; 797795"];
2398 [label="_needsGeneratedAttributes_IsFrozen 797796"];
2399 [label="GetNeedsGeneratedAttributesInternal() 797797"];
2400 [label="param GetNeedsGeneratedAttributesInternal(this) 797798"];
2401 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 797799"];
2402 [label="return GetNeedsGeneratedAttributesInternal(); 797800"];
2403 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 797801"];
2404 [label="ShouldEmitNullablePublicOnlyAttribute() 797802"];
2405 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 797803"];
2406 [label="return Compilation.GetUsesNullableAttributes() && Compilation.EmitNullablePublicOnly; 797804"];
2407 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 797805"];
2408 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 797806"];
2409 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 797807"];
2410 [label="return; 797808"];
2411 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 797809"];
2412 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 797810"];
2413 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 797811"];
2414 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 797812"];
2415 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 797813"];
2416 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 797814"];
2417 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 797815"];
2418 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 797816"];
2419 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 797817"];
2420 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 797818"];
2421 [label="builder.AddIfNotNull(_lazyNullableAttribute); 797819"];
2422 [label="builder.AddIfNotNull(_lazyNullableAttribute); 797820"];
2423 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 797821"];
2424 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 797822"];
2425 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 797823"];
2426 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 797824"];
2427 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 797825"];
2428 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 797826"];
2429 [label="return builder.ToImmutableAndFree(); 797827"];
2430 [label="var embeddedTypes = moduleBeingBuiltOpt.GetEmbeddedTypes(diagnostics); 797828"];
2431 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 797829"];
2432 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 797830"];
2433 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics) 797831"];
2434 [label="param CompileSynthesizedMethods(ImmutableArray<NamedTypeSymbol> additionalTypes) 797832"];
2435 [label="param CompileSynthesizedMethods(DiagnosticBag diagnostics) 797833"];
2436 [label="param CompileSynthesizedMethods(this) 797834"];
2437 [label="foreach (var additionalType in additionalTypes)\n            {\n                var compilationState = new TypeCompilationState(additionalType, _compilation, _moduleBeingBuiltOpt);\n                foreach (var method in additionalType.GetMethodsToEmit())\n                {\n                    method.GenerateMethodBody(compilationState, diagnostics);\n                }\n\n                if (!diagnostics.HasAnyErrors())\n                {\n                    CompileSynthesizedMethods(compilationState);\n                }\n\n                compilationState.Free();\n            } 797835"];
2438 [label="methodCompiler.CompileSynthesizedMethods(embeddedTypes, diagnostics); 797836"];
2439 [label="compilation.AnonymousTypeManager 797837"];
2440 [label="get\n            {\n                return _anonymousTypeManager;\n            } 797838"];
2441 [label="return _anonymousTypeManager; 797839"];
2442 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 797840"];
2443 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 797841"];
2444 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 797842"];
2445 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 797843"];
2446 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 797844"];
2447 [label="param GetPreviousAnonymousTypes(this) 797845"];
2448 [label="return ImmutableArray<AnonymousTypeKey>.Empty; 797846"];
2449 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 797847"];
2450 [label="param GetNextAnonymousTypeIndex(this) 797848"];
2451 [label="return 0; 797849"];
2452 [label="compilation.AnonymousTypeManager.AssignTemplatesNamesAndCompile(methodCompiler, moduleBeingBuiltOpt, diagnostics); 797850"];
2453 [label="methodCompiler.WaitForWorkers() 797851"];
2454 [label="param WaitForWorkers(this) 797852"];
2455 [label="var tasks = _compilerTasks; 797853"];
2456 [label="if (tasks == null)\n            {\n                return;\n            } 797854"];
2457 [label="if (tasks == null)\n            {\n                return;\n            } 797855"];
2458 [label="Task curTask; 797856"];
2459 [label="while (tasks.TryPop(out curTask))\n            {\n                curTask.GetAwaiter().GetResult();\n            } 797857"];
2460 [label="methodCompiler.WaitForWorkers(); 797858"];
2461 [label="var privateImplClass = moduleBeingBuiltOpt.PrivateImplClass; 797859"];
2462 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 797860"];
2463 [label="if (privateImplClass != null)\n                {\n                    // all threads that were adding methods must be finished now, we can freeze the class:\n                    privateImplClass.Freeze();\n\n                    methodCompiler.CompileSynthesizedMethods(privateImplClass, diagnostics);\n                } 797861"];
2464 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 797862"];
2465 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 797863"];
2466 [label="if (moduleBeingBuiltOpt != null && (methodCompiler._globalHasErrors || moduleBeingBuiltOpt.SourceModule.HasBadAttributes) && !diagnostics.HasAnyErrors() && !hasDeclarationErrors)\n            {\n                var messageResourceName = methodCompiler._globalHasErrors ? nameof(CodeAnalysisResources.UnableToDetermineSpecificCauseOfFailure) : nameof(CodeAnalysisResources.ModuleHasInvalidAttributes);\n                diagnostics.Add(ErrorCode.ERR_ModuleEmitFailure, NoLocation.Singleton, ((Cci.INamedEntity)moduleBeingBuiltOpt).Name,\n                    new LocalizableResourceString(messageResourceName, CodeAnalysisResources.ResourceManager, typeof(CodeAnalysisResources)));\n            } 797864"];
2467 [label="compilation.AdditionalCodegenWarnings 797865"];
2468 [label="get\n            {\n                return _additionalCodegenWarnings;\n            } 797866"];
2469 [label="return _additionalCodegenWarnings; 797867"];
2470 [label="diagnostics.AddRange(compilation.AdditionalCodegenWarnings); 797868"];
2471 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 797869"];
2472 [label="if (filterOpt == null)\n            {\n                WarnUnusedFields(compilation, diagnostics, cancellationToken);\n\n                if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                }\n            } 797870"];
2473 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 797871"];
2474 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 797872"];
2475 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 797873"];
2476 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken) 797874"];
2477 [label="param WarnUnusedFields(CSharpCompilation compilation) 797875"];
2478 [label="param WarnUnusedFields(DiagnosticBag diagnostics) 797876"];
2479 [label="param WarnUnusedFields(CancellationToken cancellationToken) 797877"];
2480 [label="compilation.Assembly 797878"];
2481 [label="get\n            {\n                return SourceAssembly;\n            } 797879"];
2482 [label="SourceAssembly 797880"];
2483 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 797881"];
2484 [label="GetBoundReferenceManager() 797882"];
2485 [label="param GetBoundReferenceManager(this) 797883"];
2486 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 797884"];
2487 [label="return _referenceManager; 797885"];
2488 [label="GetBoundReferenceManager(); 797886"];
2489 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 797887"];
2490 [label="SourceAssemblySymbol assembly = (SourceAssemblySymbol)compilation.Assembly; 797888"];
2491 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 797889"];
2492 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 797890"];
2493 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 797891"];
2494 [label="diagnostics.AddRange(assembly.GetUnusedFieldWarnings(cancellationToken)); 797892"];
2495 [label="WarnUnusedFields(compilation, diagnostics, cancellationToken); 797893"];
2496 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 797894"];
2497 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 797895"];
2498 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 797896"];
2499 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 797897"];
2500 [label="compilation.Options 797898"];
2501 [label="get\n            {\n                return _options;\n            } 797899"];
2502 [label="return _options; 797900"];
2503 [label="if (moduleBeingBuiltOpt != null && entryPoint != null && compilation.Options.OutputKind.IsApplication())\n                {\n                    moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics);\n                } 797901"];
2504 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 797902"];
2505 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 797903"];
2506 [label="moduleBeingBuiltOpt.SetPEEntryPoint(entryPoint, diagnostics); 797904"];
2507 [label="param Translate(MethodSymbol symbol) 797905"];
2508 [label="param Translate(DiagnosticBag diagnostics) 797906"];
2509 [label="param Translate(bool needDeclaration) 797907"];
2510 [label="param Translate(this) 797908"];
2511 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 797909"];
2512 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 797910"];
2513 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 797911"];
2514 [label="return Translate(symbol, null, diagnostics, null, needDeclaration); 797912"];
2515 [label="Translate(symbol, null, diagnostics, null, needDeclaration) 797913"];
2516 [label="param Translate(MethodSymbol methodSymbol) 797914"];
2517 [label="param Translate(SyntaxNode syntaxNodeOpt) 797915"];
2518 [label="param Translate(DiagnosticBag diagnostics) 797916"];
2519 [label="param Translate(BoundArgListOperator optArgList = null) 797917"];
2520 [label="param Translate(bool needDeclaration = false) 797918"];
2521 [label="param Translate(this) 797919"];
2522 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 797920"];
2523 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 797921"];
2524 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 797922"];
2525 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 797923"];
2526 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 797924"];
2527 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 797925"];
2528 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 797926"];
2529 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 797927"];
2530 [label="param Translate(MethodSymbol methodSymbol) 797928"];
2531 [label="param Translate(SyntaxNode syntaxNodeOpt) 797929"];
2532 [label="param Translate(DiagnosticBag diagnostics) 797930"];
2533 [label="param Translate(bool needDeclaration) 797931"];
2534 [label="param Translate(this) 797932"];
2535 [label="object reference; 797933"];
2536 [label="Cci.IMethodReference methodRef; 797934"];
2537 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 797935"];
2538 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 797936"];
2539 [label="Debug.Assert(methodSymbol.IsDefinitionOrDistinct()); 797937"];
2540 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 797938"];
2541 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 797939"];
2542 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 797940"];
2543 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 797941"];
2544 [label="return methodSymbol.GetCciAdapter(); 797942"];
2545 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 797943"];
2546 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 797944"];
2547 [label="return unexpandedMethodRef; 797945"];
2548 [label="MethodCompiler.CompileMethodBodies(\n                    this,\n                    moduleBeingBuilt,\n                    emittingPdb,\n                    emitTestCoverageData,\n                    hasDeclarationErrors,\n                    diagnostics: methodBodyDiagnosticBag,\n                    filterOpt: filterOpt,\n                    cancellationToken: cancellationToken); 797946"];
2549 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 797947"];
2550 [label="if (!hasDeclarationErrors && !CommonCompiler.HasUnsuppressableErrors(methodBodyDiagnosticBag))\n                {\n                    GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag);\n                } 797948"];
2551 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 797949"];
2552 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 797950"];
2553 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag) 797951"];
2554 [label="param GenerateModuleInitializer(PEModuleBuilder moduleBeingBuilt) 797952"];
2555 [label="param GenerateModuleInitializer(DiagnosticBag methodBodyDiagnosticBag) 797953"];
2556 [label="param GenerateModuleInitializer(this) 797954"];
2557 [label="Debug.Assert(_declarationDiagnosticsFrozen); 797955"];
2558 [label="if (_moduleInitializerMethods is object)\n            {\n                var ilBuilder = new ILBuilder(moduleBeingBuilt, new LocalSlotManager(slotAllocator: null), OptimizationLevel.Release, areLocalsZeroed: false);\n\n                foreach (MethodSymbol method in _moduleInitializerMethods.OrderBy<MethodSymbol>(LexicalOrderSymbolComparer.Instance))\n                {\n                    ilBuilder.EmitOpCode(ILOpCode.Call, stackAdjustment: 0);\n\n                    ilBuilder.EmitToken(\n                        moduleBeingBuilt.Translate(method, methodBodyDiagnosticBag, needDeclaration: true),\n                        CSharpSyntaxTree.Dummy.GetRoot(),\n                        methodBodyDiagnosticBag);\n                }\n\n                ilBuilder.EmitRet(isVoid: true);\n                ilBuilder.Realize();\n                moduleBeingBuilt.RootModuleType.SetStaticConstructorBody(ilBuilder.RealizedIL);\n            } 797956"];
2559 [label="GenerateModuleInitializer(moduleBeingBuilt, methodBodyDiagnosticBag); 797957"];
2560 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 797958"];
2561 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 797959"];
2562 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 797960"];
2563 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 797961"];
2564 [label="bool hasMethodBodyError = !FilterAndAppendAndFreeDiagnostics(diagnostics, ref methodBodyDiagnosticBag, cancellationToken); 797962"];
2565 [label="if (hasDeclarationErrors || hasMethodBodyError)\n                {\n                    return false;\n                } 797963"];
2566 [label="return true; 797964"];
2567 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 797965"];
2568 [label="param GenerateResourcesAndDocumentationComments(CommonPEModuleBuilder moduleBuilder) 797966"];
2569 [label="param GenerateResourcesAndDocumentationComments(Stream? xmlDocStream) 797967"];
2570 [label="param GenerateResourcesAndDocumentationComments(Stream? win32Resources) 797968"];
2571 [label="param GenerateResourcesAndDocumentationComments(string? outputNameOverride) 797969"];
2572 [label="param GenerateResourcesAndDocumentationComments(DiagnosticBag diagnostics) 797970"];
2573 [label="param GenerateResourcesAndDocumentationComments(CancellationToken cancellationToken) 797971"];
2574 [label="param GenerateResourcesAndDocumentationComments(this) 797972"];
2575 [label="DiagnosticBag? resourceDiagnostics = DiagnosticBag.GetInstance(); 797973"];
2576 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 797974"];
2577 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 797975"];
2578 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 797976"];
2579 [label="SetupWin32Resources(moduleBuilder, win32Resources, resourceDiagnostics); 797977"];
2580 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 797978"];
2581 [label="SourceAssembly 797979"];
2582 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 797980"];
2583 [label="GetBoundReferenceManager() 797981"];
2584 [label="param GetBoundReferenceManager(this) 797982"];
2585 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 797983"];
2586 [label="return _referenceManager; 797984"];
2587 [label="GetBoundReferenceManager(); 797985"];
2588 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 797986"];
2589 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 797987"];
2590 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 797988"];
2591 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 797989"];
2592 [label="AddedModulesResourceNames(resourceDiagnostics) 797990"];
2593 [label="param AddedModulesResourceNames(DiagnosticBag diagnostics) 797991"];
2594 [label="param AddedModulesResourceNames(this) 797992"];
2595 [label="SourceAssembly 797993"];
2596 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 797994"];
2597 [label="GetBoundReferenceManager() 797995"];
2598 [label="param GetBoundReferenceManager(this) 797996"];
2599 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 797997"];
2600 [label="return _referenceManager; 797998"];
2601 [label="GetBoundReferenceManager(); 797999"];
2602 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 798000"];
2603 [label="ImmutableArray<ModuleSymbol> modules = SourceAssembly.Modules; 798001"];
2604 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 798002"];
2605 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                var m = (Symbols.Metadata.PE.PEModuleSymbol)modules[i];\n                ImmutableArray<EmbeddedResource> resources;\n\n                try\n                {\n                    resources = m.Module.GetEmbeddedResourcesOrThrow();\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, m), NoLocation.Singleton);\n                    continue;\n                }\n\n                foreach (var resource in resources)\n                {\n                    yield return resource.Name;\n                }\n            } 798003"];
2606 [label="param AddedModulesResourceNames(this) 798004"];
2607 [label="ReportManifestResourceDuplicates(\n                moduleBuilder.ManifestResources,\n                SourceAssembly.Modules.Skip(1).Select(m => m.Name),   //all modules except the first one\n                AddedModulesResourceNames(resourceDiagnostics),\n                resourceDiagnostics); 798005"];
2608 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 798006"];
2609 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 798007"];
2610 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 798008"];
2611 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 798009"];
2612 [label="if (!FilterAndAppendAndFreeDiagnostics(diagnostics, ref resourceDiagnostics, cancellationToken))\n            {\n                return false;\n            } 798010"];
2613 [label="cancellationToken.ThrowIfCancellationRequested(); 798011"];
2614 [label="DiagnosticBag? xmlDiagnostics = DiagnosticBag.GetInstance(); 798012"];
2615 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 798013"];
2616 [label="string? assemblyName = FileNameUtilities.ChangeExtension(outputNameOverride, extension: null); 798014"];
2617 [label="new[] { '\\r\\n', '\\r', '\\n' } 798015"];
2618 [label="'\\r\\n' 798016"];
2619 [label="'\\r' 798017"];
2620 [label="'\\n' 798018"];
2621 [label="new[] { '\\r\\n', '\\r', '\\n' } 798019"];
2622 [label="new[] { '\\r\\n', '\\r', '\\n' } 798020"];
2623 [label="new[] { '\\r\\n', '\\r', '\\n' } 798021"];
2624 [label="s_newLineSequences = new[] { '\\r\\n', '\\r', '\\n' } 798022"];
2625 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 798023"];
2626 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 798024"];
2627 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 798025"];
2628 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 798026"];
2629 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 798027"];
2630 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken); 798028"];
2631 [label="DocumentationCommentCompiler.WriteDocumentationCommentXml(this, assemblyName, xmlDocStream, xmlDiagnostics, cancellationToken) 798029"];
2632 [label="param WriteDocumentationCommentXml(CSharpCompilation compilation) 798030"];
2633 [label="param WriteDocumentationCommentXml(string? assemblyName) 798031"];
2634 [label="param WriteDocumentationCommentXml(Stream? xmlDocStream) 798032"];
2635 [label="param WriteDocumentationCommentXml(DiagnosticBag diagnostics) 798033"];
2636 [label="param WriteDocumentationCommentXml(CancellationToken cancellationToken) 798034"];
2637 [label="param WriteDocumentationCommentXml(SyntaxTree? filterTree = null) 798035"];
2638 [label="param WriteDocumentationCommentXml(TextSpan? filterSpanWithinTree = null) 798036"];
2639 [label="StreamWriter writer = null; 798037"];
2640 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 798038"];
2641 [label="if (xmlDocStream != null && xmlDocStream.CanWrite)\n            {\n                writer = new StreamWriter(\n                    stream: xmlDocStream,\n                    encoding: new UTF8Encoding(encoderShouldEmitUTF8Identifier: false, throwOnInvalidBytes: false),\n                    bufferSize: 0x400, // Default.\n                    leaveOpen: true); // Don't close caller's stream.\n            } 798039"];
2642 [label="compilation.SourceAssembly 798040"];
2643 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 798041"];
2644 [label="GetBoundReferenceManager() 798042"];
2645 [label="param GetBoundReferenceManager(this) 798043"];
2646 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 798044"];
2647 [label="return _referenceManager; 798045"];
2648 [label="GetBoundReferenceManager(); 798046"];
2649 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 798047"];
2650 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 798048"];
2651 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 798049"];
2652 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 798050"];
2653 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 798051"];
2654 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 798052"];
2655 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 798053"];
2656 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 798054"];
2657 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 798055"];
2658 [label="var compiler = new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken); 798056"];
2659 [label="new DocumentationCommentCompiler(assemblyName ?? compilation.SourceAssembly.Name, compilation, writer, filterTree, filterSpanWithinTree,\n                        processIncludes: true, isForSingleSymbol: false, diagnostics: diagnostics, cancellationToken: cancellationToken) 798057"];
2660 [label="param DocumentationCommentCompiler(string assemblyName) 798058"];
2661 [label="param DocumentationCommentCompiler(CSharpCompilation compilation) 798059"];
2662 [label="param DocumentationCommentCompiler(TextWriter writer) 798060"];
2663 [label="param DocumentationCommentCompiler(SyntaxTree filterTree) 798061"];
2664 [label="param DocumentationCommentCompiler(TextSpan? filterSpanWithinTree) 798062"];
2665 [label="param DocumentationCommentCompiler(bool processIncludes) 798063"];
2666 [label="param DocumentationCommentCompiler(bool isForSingleSymbol) 798064"];
2667 [label="param DocumentationCommentCompiler(DiagnosticBag diagnostics) 798065"];
2668 [label="param DocumentationCommentCompiler(CancellationToken cancellationToken) 798066"];
2669 [label="param DocumentationCommentCompiler(this) 798067"];
2670 [label="param DocumentationCommentCompiler(this) 798068"];
2671 [label="_assemblyName 798069"];
2672 [label="_compilation 798070"];
2673 [label="_writer 798071"];
2674 [label="_filterTree 798072"];
2675 [label="_filterSpanWithinTree 798073"];
2676 [label="_processIncludes 798074"];
2677 [label="_isForSingleSymbol 798075"];
2678 [label="_diagnostics 798076"];
2679 [label="_lazyComparer 798077"];
2680 [label="_includedFileCache 798078"];
2681 [label="_indentDepth 798079"];
2682 [label="_temporaryStringBuilders 798080"];
2683 [label="_assemblyName 798081"];
2684 [label="_compilation 798082"];
2685 [label="_writer 798083"];
2686 [label="_filterTree 798084"];
2687 [label="_filterSpanWithinTree 798085"];
2688 [label="_processIncludes 798086"];
2689 [label="_isForSingleSymbol 798087"];
2690 [label="_diagnostics 798088"];
2691 [label="_cancellationToken 798089"];
2692 [label="compilation.SourceAssembly 798090"];
2693 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 798091"];
2694 [label="GetBoundReferenceManager() 798092"];
2695 [label="param GetBoundReferenceManager(this) 798093"];
2696 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 798094"];
2697 [label="return _referenceManager; 798095"];
2698 [label="GetBoundReferenceManager(); 798096"];
2699 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 798097"];
2700 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 798098"];
2701 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 798099"];
2702 [label="compiler.Visit(compilation.SourceAssembly.GlobalNamespace); 798100"];
2703 [label="param VisitNamespace(NamespaceSymbol symbol) 798101"];
2704 [label="param VisitNamespace(this) 798102"];
2705 [label="_cancellationToken.ThrowIfCancellationRequested(); 798103"];
2706 [label="if (symbol.IsGlobalNamespace)\n            {\n                Debug.Assert(_assemblyName != null);\n\n                WriteLine('<?xml version=\\'1.0\\'?>');\n                WriteLine('<doc>');\n                Indent();\n\n                if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                }\n\n                WriteLine('<members>');\n                Indent();\n            } 798104"];
2707 [label="Debug.Assert(_assemblyName != null); 798105"];
2708 [label="WriteLine('<?xml version=\\'1.0\\'?>'); 798106"];
2709 [label="WriteLine('<?xml version=\\'1.0\\'?>') 798107"];
2710 [label="param WriteLine(string message) 798108"];
2711 [label="param WriteLine(this) 798109"];
2712 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798110"];
2713 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798111"];
2714 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798112"];
2715 [label="WriteLine('<doc>'); 798113"];
2716 [label="WriteLine('<doc>') 798114"];
2717 [label="param WriteLine(string message) 798115"];
2718 [label="param WriteLine(this) 798116"];
2719 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798117"];
2720 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798118"];
2721 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798119"];
2722 [label="Indent() 798120"];
2723 [label="param Indent(this) 798121"];
2724 [label="_indentDepth 798122"];
2725 [label="Indent(); 798123"];
2726 [label="_compilation.Options 798124"];
2727 [label="if (!_compilation.Options.OutputKind.IsNetModule())\n                {\n                    WriteLine('<assembly>');\n                    Indent();\n                    WriteLine('<name>{0}</name>', _assemblyName);\n                    Unindent();\n                    WriteLine('</assembly>');\n                } 798125"];
2728 [label="WriteLine('<assembly>'); 798126"];
2729 [label="WriteLine('<assembly>') 798127"];
2730 [label="param WriteLine(string message) 798128"];
2731 [label="param WriteLine(this) 798129"];
2732 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798130"];
2733 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798131"];
2734 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798132"];
2735 [label="Indent() 798133"];
2736 [label="param Indent(this) 798134"];
2737 [label="_indentDepth 798135"];
2738 [label="Indent(); 798136"];
2739 [label="WriteLine('<name>{0}</name>', _assemblyName); 798137"];
2740 [label="WriteLine('<name>{0}</name>', _assemblyName) 798138"];
2741 [label="WriteLine('<name>{0}</name>', _assemblyName) 798139"];
2742 [label="param WriteLine(string format) 798140"];
2743 [label="param WriteLine(params object[] args) 798141"];
2744 [label="param WriteLine(this) 798142"];
2745 [label="WriteLine(string.Format(format, args)); 798143"];
2746 [label="WriteLine(string.Format(format, args)); 798144"];
2747 [label="WriteLine(string.Format(format, args)); 798145"];
2748 [label="WriteLine(string.Format(format, args)) 798146"];
2749 [label="param WriteLine(string message) 798147"];
2750 [label="param WriteLine(this) 798148"];
2751 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798149"];
2752 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798150"];
2753 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798151"];
2754 [label="WriteLine(string.Format(format, args)); 798152"];
2755 [label="Unindent() 798153"];
2756 [label="param Unindent(this) 798154"];
2757 [label="_indentDepth 798155"];
2758 [label="Debug.Assert(_indentDepth >= 0); 798156"];
2759 [label="Debug.Assert(_indentDepth >= 0); 798157"];
2760 [label="Unindent(); 798158"];
2761 [label="WriteLine('</assembly>'); 798159"];
2762 [label="WriteLine('</assembly>') 798160"];
2763 [label="param WriteLine(string message) 798161"];
2764 [label="param WriteLine(this) 798162"];
2765 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798163"];
2766 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798164"];
2767 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798165"];
2768 [label="WriteLine('<members>'); 798166"];
2769 [label="WriteLine('<members>') 798167"];
2770 [label="param WriteLine(string message) 798168"];
2771 [label="param WriteLine(this) 798169"];
2772 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798170"];
2773 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798171"];
2774 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798172"];
2775 [label="Indent() 798173"];
2776 [label="param Indent(this) 798174"];
2777 [label="_indentDepth 798175"];
2778 [label="Indent(); 798176"];
2779 [label="Debug.Assert(!_isForSingleSymbol); 798177"];
2780 [label="foreach (var s in symbol.GetMembers())\n            {\n                _cancellationToken.ThrowIfCancellationRequested();\n                s.Accept(this);\n            } 798178"];
2781 [label="_cancellationToken.ThrowIfCancellationRequested(); 798179"];
2782 [label="s.Accept(this); 798180"];
2783 [label="s.Accept(this); 798181"];
2784 [label="s.Accept(this); 798182"];
2785 [label="param VisitNamedType(NamedTypeSymbol symbol) 798183"];
2786 [label="param VisitNamedType(this) 798184"];
2787 [label="_cancellationToken.ThrowIfCancellationRequested(); 798185"];
2788 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 798186"];
2789 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 798187"];
2790 [label="DefaultVisit(symbol); 798188"];
2791 [label="DefaultVisit(symbol) 798189"];
2792 [label="param DefaultVisit(Symbol symbol) 798190"];
2793 [label="param DefaultVisit(this) 798191"];
2794 [label="_cancellationToken.ThrowIfCancellationRequested(); 798192"];
2795 [label="if (ShouldSkip(symbol))\n            {\n                return;\n            } 798193"];
2796 [label="ShouldSkip(symbol) 798194"];
2797 [label="param ShouldSkip(Symbol symbol) 798195"];
2798 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 798196"];
2799 [label="return symbol.IsImplicitlyDeclared ||\n                symbol.IsAccessor() ||\n                symbol is SynthesizedSimpleProgramEntryPointSymbol ||\n                symbol is SimpleProgramNamedTypeSymbol ||\n                symbol is SynthesizedRecordPropertySymbol; 798197"];
2800 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 798198"];
2801 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 798199"];
2802 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 798200"];
2803 [label="bool isPartialMethodDefinitionPart = symbol.IsPartialDefinition(); 798201"];
2804 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 798202"];
2805 [label="DocumentationMode maxDocumentationMode; 798203"];
2806 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 798204"];
2807 [label="docCommentNodes 798205"];
2808 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 798206"];
2809 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 798207"];
2810 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 798208"];
2811 [label="TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes) 798209"];
2812 [label="param TryGetDocumentationCommentNodes(Symbol symbol) 798210"];
2813 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 798211"];
2814 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 798212"];
2815 [label="param TryGetDocumentationCommentNodes(this) 798213"];
2816 [label="maxDocumentationMode = DocumentationMode.None; 798214"];
2817 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 798215"];
2818 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 798216"];
2819 [label="foreach (SyntaxReference reference in symbol.DeclaringSyntaxReferences)\n            {\n                DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode;\n                maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode;\n\n                ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics);\n                foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                }\n            } 798217"];
2820 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 798218"];
2821 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 798219"];
2822 [label="currDocumentationMode > maxDocumentationMode 798220"];
2823 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 798221"];
2824 [label="ImmutableArray<DocumentationCommentTriviaSyntax> triviaList = SourceDocumentationCommentUtils.GetDocumentationCommentTriviaFromSyntaxNode((CSharpSyntaxNode)reference.GetSyntax(), _diagnostics); 798222"];
2825 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 798223"];
2826 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 798224"];
2827 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 798225"];
2828 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 798226"];
2829 [label="return true; 798227"];
2830 [label="if (!TryGetDocumentationCommentNodes(symbol, out maxDocumentationMode, out docCommentNodes))\n            {\n                // If the XML in any of the doc comments is invalid, skip all further processing (for this symbol) and \n                // just write a comment saying that info was lost for this symbol.\n                string message = ErrorFacts.GetMessage(MessageID.IDS_XMLIGNORED, CultureInfo.CurrentUICulture);\n                WriteLine(string.Format(CultureInfo.CurrentUICulture, message, symbol.GetDocumentationCommentId()));\n                return;\n            } 798228"];
2831 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 798229"];
2832 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 798230"];
2833 [label="return; 798231"];
2834 [label="DefaultVisit(symbol); 798232"];
2835 [label="if (!_isForSingleSymbol)\n            {\n                foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                }\n            } 798233"];
2836 [label="foreach (Symbol member in symbol.GetMembers())\n                {\n                    _cancellationToken.ThrowIfCancellationRequested();\n                    member.Accept(this);\n                } 798234"];
2837 [label="_cancellationToken.ThrowIfCancellationRequested(); 798235"];
2838 [label="member.Accept(this); 798236"];
2839 [label="member.Accept(this); 798237"];
2840 [label="member.Accept(this); 798238"];
2841 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 798239"];
2842 [label="if (_filterTree != null && !symbol.IsDefinedInSourceTree(_filterTree, _filterSpanWithinTree))\n            {\n                return;\n            } 798240"];
2843 [label="if (isPartialMethodDefinitionPart)\n            {\n                MethodSymbol implementationPart = ((MethodSymbol)symbol).PartialImplementationPart;\n                if ((object)implementationPart != null)\n                {\n                    Visit(implementationPart);\n                }\n            } 798241"];
2844 [label="DocumentationMode maxDocumentationMode; 798242"];
2845 [label="ImmutableArray<DocumentationCommentTriviaSyntax> docCommentNodes; 798243"];
2846 [label="docCommentNodes 798244"];
2847 [label="param TryGetDocumentationCommentNodes(out DocumentationMode maxDocumentationMode) 798245"];
2848 [label="param TryGetDocumentationCommentNodes(out ImmutableArray<DocumentationCommentTriviaSyntax> nodes) 798246"];
2849 [label="maxDocumentationMode = DocumentationMode.None; 798247"];
2850 [label="nodes = default(ImmutableArray<DocumentationCommentTriviaSyntax>); 798248"];
2851 [label="ArrayBuilder<DocumentationCommentTriviaSyntax> builder = null; 798249"];
2852 [label="DocumentationMode currDocumentationMode = reference.SyntaxTree.Options.DocumentationMode; 798250"];
2853 [label="maxDocumentationMode = currDocumentationMode > maxDocumentationMode ? currDocumentationMode : maxDocumentationMode; 798251"];
2854 [label="currDocumentationMode > maxDocumentationMode 798252"];
2855 [label="foreach (var trivia in triviaList)\n                {\n                    if (ContainsXmlParseDiagnostic(trivia))\n                    {\n                        if (builder != null)\n                        {\n                            builder.Free();\n                        }\n                        return false;\n                    }\n\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<DocumentationCommentTriviaSyntax>.GetInstance();\n                    }\n                    builder.Add(trivia);\n                } 798253"];
2856 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 798254"];
2857 [label="if (builder == null)\n            {\n                nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty;\n            }\n            else\n            {\n                builder.Sort(Comparer);\n                nodes = builder.ToImmutableAndFree();\n            } 798255"];
2858 [label="nodes = ImmutableArray<DocumentationCommentTriviaSyntax>.Empty; 798256"];
2859 [label="return true; 798257"];
2860 [label="if (docCommentNodes.IsEmpty)\n            {\n                if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                }\n                return;\n            } 798258"];
2861 [label="if (maxDocumentationMode >= DocumentationMode.Diagnose && RequiresDocumentationComment(symbol))\n                {\n                    // Report the error at a location in the tree that was parsing doc comments.\n                    Location location = GetLocationInTreeReportingDocumentationCommentDiagnostics(symbol);\n                    if (location != null)\n                    {\n                        _diagnostics.Add(ErrorCode.WRN_MissingXMLComment, location, symbol);\n                    }\n                } 798259"];
2862 [label="return; 798260"];
2863 [label="if (symbol.IsGlobalNamespace)\n            {\n                Unindent();\n                WriteLine('</members>');\n                Unindent();\n                WriteLine('</doc>');\n            } 798261"];
2864 [label="Unindent() 798262"];
2865 [label="Debug.Assert(_indentDepth >= 0); 798263"];
2866 [label="Unindent(); 798264"];
2867 [label="WriteLine('</members>'); 798265"];
2868 [label="WriteLine('</members>') 798266"];
2869 [label="param WriteLine(string message) 798267"];
2870 [label="param WriteLine(this) 798268"];
2871 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798269"];
2872 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798270"];
2873 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798271"];
2874 [label="Unindent() 798272"];
2875 [label="_indentDepth 798273"];
2876 [label="Debug.Assert(_indentDepth >= 0); 798274"];
2877 [label="Debug.Assert(_indentDepth >= 0); 798275"];
2878 [label="Unindent(); 798276"];
2879 [label="WriteLine('</doc>'); 798277"];
2880 [label="WriteLine('</doc>') 798278"];
2881 [label="param WriteLine(string message) 798279"];
2882 [label="param WriteLine(this) 798280"];
2883 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798281"];
2884 [label="if (_temporaryStringBuilders?.Count > 0)\n            {\n                StringBuilder builder = _temporaryStringBuilders.Peek().Pooled.Builder;\n                builder.Append(MakeIndent(_indentDepth));\n                builder.AppendLine(message);\n            }\n            else if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798282"];
2885 [label="if (_writer != null)\n            {\n                _writer.Write(MakeIndent(_indentDepth));\n                _writer.WriteLine(message);\n            } 798283"];
2886 [label="Debug.Assert(compiler._indentDepth == 0); 798284"];
2887 [label="Debug.Assert(compiler._indentDepth == 0); 798285"];
2888 [label="writer?.Flush(); 798286"];
2889 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 798287"];
2890 [label="if (filterTree != null)\n            {\n                // Will respect the DocumentationMode.\n                UnprocessedDocumentationCommentFinder.ReportUnprocessed(filterTree, filterSpanWithinTree, diagnostics, cancellationToken);\n            }\n            else\n            {\n                foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                }\n            } 798288"];
2891 [label="compilation.SyntaxTrees 798289"];
2892 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 798290"];
2893 [label="_syntaxAndDeclarations.GetLazyState() 798291"];
2894 [label="param GetLazyState(this) 798292"];
2895 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 798293"];
2896 [label="foreach (SyntaxTree tree in compilation.SyntaxTrees)\n                {\n                    // Will respect the DocumentationMode.\n                    UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken);\n                } 798294"];
2897 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 798295"];
2898 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 798296"];
2899 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken); 798297"];
2900 [label="UnprocessedDocumentationCommentFinder.ReportUnprocessed(tree, null, diagnostics, cancellationToken) 798298"];
2901 [label="param ReportUnprocessed(SyntaxTree tree) 798299"];
2902 [label="param ReportUnprocessed(TextSpan? filterSpanWithinTree) 798300"];
2903 [label="param ReportUnprocessed(DiagnosticBag diagnostics) 798301"];
2904 [label="param ReportUnprocessed(CancellationToken cancellationToken) 798302"];
2905 [label="if (tree.ReportDocumentationCommentDiagnostics())\n            {\n                UnprocessedDocumentationCommentFinder finder = new UnprocessedDocumentationCommentFinder(diagnostics, filterSpanWithinTree, cancellationToken);\n                finder.Visit(tree.GetRoot(cancellationToken));\n            } 798303"];
2906 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 798304"];
2907 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 798305"];
2908 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 798306"];
2909 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 798307"];
2910 [label="return FilterAndAppendAndFreeDiagnostics(diagnostics, ref xmlDiagnostics, cancellationToken); 798308"];
2911 [label="param ReportUnusedImports(SyntaxTree? filterTree) 798309"];
2912 [label="param ReportUnusedImports(DiagnosticBag diagnostics) 798310"];
2913 [label="param ReportUnusedImports(CancellationToken cancellationToken) 798311"];
2914 [label="param ReportUnusedImports(this) 798312"];
2915 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 798313"];
2916 [label="if (_lazyImportInfos != null &&\n                filterTree != null &&\n                filterTree.Options.DocumentationMode != DocumentationMode.None)\n            {\n                foreach (ImportInfo info in _lazyImportInfos)\n                {\n                    cancellationToken.ThrowIfCancellationRequested();\n\n                    SyntaxTree infoTree = info.Tree;\n                    if ((filterTree == null || filterTree == infoTree) && infoTree.Options.DocumentationMode != DocumentationMode.None)\n                    {\n                        TextSpan infoSpan = info.Span;\n                        if (!this.IsImportDirectiveUsed(infoTree, infoSpan.Start))\n                        {\n                            ErrorCode code = info.Kind == SyntaxKind.ExternAliasDirective\n                                ? ErrorCode.HDN_UnusedExternAlias\n                                : ErrorCode.HDN_UnusedUsingDirective;\n                            diagnostics.Add(code, infoTree.GetLocation(infoSpan));\n                        }\n                    }\n                }\n            } 798314"];
2917 [label="CompleteTrees(filterTree); 798315"];
2918 [label="CompleteTrees(filterTree) 798316"];
2919 [label="param CompleteTrees(SyntaxTree? filterTree) 798317"];
2920 [label="param CompleteTrees(this) 798318"];
2921 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 798319"];
2922 [label="if (EventQueue != null)\n            {\n                if (filterTree != null)\n                {\n                    CompleteTree(filterTree);\n                }\n                else\n                {\n                    foreach (var tree in this.SyntaxTrees)\n                    {\n                        CompleteTree(tree);\n                    }\n                }\n            } 798320"];
2923 [label="CompleteTrees(filterTree); 798321"];
2924 [label="get { return this.SourceModule.GetPublicSymbol(); } 798322"];
2925 [label="this.SourceModule 798323"];
2926 [label="get\n            {\n                return Assembly.Modules[0];\n            } 798324"];
2927 [label="Assembly 798325"];
2928 [label="get\n            {\n                return SourceAssembly;\n            } 798326"];
2929 [label="SourceAssembly 798327"];
2930 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 798328"];
2931 [label="GetBoundReferenceManager() 798329"];
2932 [label="param GetBoundReferenceManager(this) 798330"];
2933 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 798331"];
2934 [label="return _referenceManager; 798332"];
2935 [label="GetBoundReferenceManager(); 798333"];
2936 [label="return Assembly.Modules[0]; 798334"];
2937 [label="get { return SourceAssembly.IsDelaySigned; } 798335"];
2938 [label="SourceAssembly 798336"];
2939 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 798337"];
2940 [label="GetBoundReferenceManager() 798338"];
2941 [label="param GetBoundReferenceManager(this) 798339"];
2942 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 798340"];
2943 [label="return _referenceManager; 798341"];
2944 [label="GetBoundReferenceManager(); 798342"];
2945 [label="SourceAssembly.IsDelaySigned 798343"];
2946 [label="get { return SourceAssembly.StrongNameKeys; } 798344"];
2947 [label="SourceAssembly 798345"];
2948 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 798346"];
2949 [label="GetBoundReferenceManager() 798347"];
2950 [label="param GetBoundReferenceManager(this) 798348"];
2951 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 798349"];
2952 [label="return _referenceManager; 798350"];
2953 [label="GetBoundReferenceManager(); 798351"];
2954 [label="param GetCorLibraryReferenceToEmit(CodeAnalysis.Emit.EmitContext context) 798352"];
2955 [label="param GetCorLibraryReferenceToEmit(this) 798353"];
2956 [label="CorLibrary 798354"];
2957 [label="get { return SourceModule.ContainingSourceAssembly.CorLibrary; } 798355"];
2958 [label="return SourceModule.ContainingSourceAssembly.CorLibrary; 798356"];
2959 [label="AssemblySymbol corLibrary = CorLibrary; 798357"];
2960 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 798358"];
2961 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 798359"];
2962 [label="if (!corLibrary.IsMissing &&\n                !corLibrary.IsLinked &&\n                !ReferenceEquals(corLibrary, SourceModule.ContainingAssembly))\n            {\n                return Translate(corLibrary, context.Diagnostics);\n            } 798360"];
2963 [label="return Translate(corLibrary, context.Diagnostics); 798361"];
2964 [label="return Translate(corLibrary, context.Diagnostics); 798362"];
2965 [label="Translate(corLibrary, context.Diagnostics) 798363"];
2966 [label="param Translate(AssemblySymbol assembly) 798364"];
2967 [label="param Translate(DiagnosticBag diagnostics) 798365"];
2968 [label="param Translate(this) 798366"];
2969 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 798367"];
2970 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 798368"];
2971 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 798369"];
2972 [label="Cci.IModuleReference reference; 798370"];
2973 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 798371"];
2974 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 798372"];
2975 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(assembly, out reference))\n            {\n                return (Cci.IAssemblyReference)reference;\n            } 798373"];
2976 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 798374"];
2977 [label="AssemblyReference asmRef = new AssemblyReference(assembly); 798375"];
2978 [label="new AssemblyReference(assembly) 798376"];
2979 [label="param AssemblyReference(AssemblySymbol assemblySymbol) 798377"];
2980 [label="param AssemblyReference(this) 798378"];
2981 [label="_targetAssembly 798379"];
2982 [label="Debug.Assert((object)assemblySymbol != null); 798380"];
2983 [label="Debug.Assert((object)assemblySymbol != null); 798381"];
2984 [label="_targetAssembly 798382"];
2985 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 798383"];
2986 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 798384"];
2987 [label="AssemblyReference cachedAsmRef = (AssemblyReference)AssemblyOrModuleSymbolToModuleRefMap.GetOrAdd(assembly, asmRef); 798385"];
2988 [label="if (cachedAsmRef == asmRef)\n            {\n                ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics);\n            } 798386"];
2989 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 798387"];
2990 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 798388"];
2991 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 798389"];
2992 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics) 798390"];
2993 [label="param ValidateReferencedAssembly(AssemblySymbol assembly) 798391"];
2994 [label="param ValidateReferencedAssembly(AssemblyReference asmRef) 798392"];
2995 [label="param ValidateReferencedAssembly(DiagnosticBag diagnostics) 798393"];
2996 [label="param ValidateReferencedAssembly(this) 798394"];
2997 [label="AssemblyIdentity asmIdentity = SourceModule.ContainingAssembly.Identity; 798395"];
2998 [label="asmRef.Identity 798396"];
2999 [label="=> _targetAssembly.Identity 798397"];
3000 [label="_targetAssembly.Identity 798398"];
3001 [label="AssemblyIdentity refIdentity = asmRef.Identity; 798399"];
3002 [label="if (asmIdentity.IsStrongName && !refIdentity.IsStrongName &&\n                asmRef.Identity.ContentType != AssemblyContentType.WindowsRuntime)\n            {\n                // Dev12 reported error, we have changed it to a warning to allow referencing libraries \n                // built for platforms that don't support strong names.\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ReferencedAssemblyDoesNotHaveStrongName, assembly), NoLocation.Singleton);\n            } 798400"];
3003 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 798401"];
3004 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 798402"];
3005 [label="if (OutputKind != OutputKind.NetModule &&\n               !string.IsNullOrEmpty(refIdentity.CultureName) &&\n               !string.Equals(refIdentity.CultureName, asmIdentity.CultureName, StringComparison.OrdinalIgnoreCase))\n            {\n                diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_RefCultureMismatch, assembly, refIdentity.CultureName), NoLocation.Singleton);\n            } 798403"];
3006 [label="var refMachine = assembly.Machine; 798404"];
3007 [label="if ((object)assembly != (object)assembly.CorLibrary &&\n                !(refMachine == Machine.I386 && !assembly.Bit32Required))\n            {\n                var machine = SourceModule.Machine;\n\n                if (!(machine == Machine.I386 && !SourceModule.Bit32Required) &&\n                    machine != refMachine)\n                {\n                    // Different machine types, and neither is agnostic\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.WRN_ConflictingMachineAssembly, assembly), NoLocation.Singleton);\n                }\n            } 798405"];
3008 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 798406"];
3009 [label="if (_embeddedTypesManagerOpt != null && _embeddedTypesManagerOpt.IsFrozen)\n            {\n                _embeddedTypesManagerOpt.ReportIndirectReferencesToLinkedAssemblies(assembly, diagnostics);\n            } 798407"];
3010 [label="ValidateReferencedAssembly(assembly, cachedAsmRef, diagnostics); 798408"];
3011 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 798409"];
3012 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 798410"];
3013 [label="AssemblyOrModuleSymbolToModuleRefMap.TryAdd(assembly.Modules[0], cachedAsmRef); 798411"];
3014 [label="return cachedAsmRef; 798412"];
3015 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 798413"];
3016 [label="=> _targetAssembly.Identity 798414"];
3017 [label="_targetAssembly.Identity 798415"];
3018 [label="param GetAssemblyReferencesFromAddedModules(DiagnosticBag diagnostics) 798416"];
3019 [label="param GetAssemblyReferencesFromAddedModules(this) 798417"];
3020 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 798418"];
3021 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 798419"];
3022 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 798420"];
3023 [label="param GetAssemblyReferencesFromAddedModules(this) 798421"];
3024 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 798422"];
3025 [label="param GetFiles(EmitContext context) 798423"];
3026 [label="param GetFiles(this) 798424"];
3027 [label="if (!context.IsRefAssembly)\n            {\n                return getFiles(ref _lazyFiles, context, _sourceAssembly);\n            } 798425"];
3028 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 798426"];
3029 [label="return getFiles(ref _lazyFiles, context, _sourceAssembly); 798427"];
3030 [label="getFiles(ref _lazyFiles, context, _sourceAssembly) 798428"];
3031 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 798429"];
3032 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 798430"];
3033 [label="ImmutableArray<Cci.IFileReference> getFiles(ref ImmutableArray<Cci.IFileReference> lazyFiles, EmitContext contxt, SourceAssemblySymbol sourceAssSymbol)\n            {\n                if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                }\n\n                return lazyFiles;\n            } 798431"];
3034 [label="if (lazyFiles.IsDefault)\n                {\n                    var builder = ArrayBuilder<Cci.IFileReference>.GetInstance();\n                    try\n                    {\n                        var modules = sourceAssSymbol.Modules;\n                        for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        }\n\n                        if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        }\n\n                        // Dev12 compilers don't report ERR_CryptoHashFailed if there are no files to be hashed.\n                        if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        }\n                    }\n                    finally\n                    {\n                        builder.Free();\n                    }\n                } 798432"];
3035 [label="var builder = ArrayBuilder<Cci.IFileReference>.GetInstance(); 798433"];
3036 [label="var modules = sourceAssSymbol.Modules; 798434"];
3037 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 798435"];
3038 [label="for (int i = 1; i < modules.Length; i++)\n                        {\n                            builder.Add((Cci.IFileReference)Translate(modules[i], contxt.Diagnostics));\n                        } 798436"];
3039 [label="if (!contxt.IsRefAssembly)\n                        {\n                            // resources are not emitted into ref assemblies\n                            foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            }\n                        } 798437"];
3040 [label="foreach (ResourceDescription resource in ManifestResources)\n                            {\n                                if (!resource.IsEmbedded)\n                                {\n                                    builder.Add(resource);\n                                }\n                            } 798438"];
3041 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 798439"];
3042 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 798440"];
3043 [label="if (ImmutableInterlocked.InterlockedInitialize(ref lazyFiles, builder.ToImmutable()) && lazyFiles.Length > 0)\n                        {\n                            if (!CryptographicHashProvider.IsSupportedAlgorithm(sourceAssSymbol.HashAlgorithm))\n                            {\n                                contxt.Diagnostics.Add(new CSDiagnostic(new CSDiagnosticInfo(ErrorCode.ERR_CryptoHashFailed), NoLocation.Singleton));\n                            }\n                        } 798441"];
3044 [label="builder.Free(); 798442"];
3045 [label="return lazyFiles; 798443"];
3046 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 798444"];
3047 [label="=> _embeddedTypesManagerOpt 798445"];
3048 [label="_embeddedTypesManagerOpt 798446"];
3049 [label="param GetAnonymousTypeDefinitions(EmitContext context) 798447"];
3050 [label="param GetAnonymousTypeDefinitions(this) 798448"];
3051 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 798449"];
3052 [label="Compilation.AnonymousTypeManager 798450"];
3053 [label="get\n            {\n                return _anonymousTypeManager;\n            } 798451"];
3054 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 798452"];
3055 [label="return Compilation.AnonymousTypeManager.GetAllCreatedTemplates()\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n\n#endif\n                   ; 798453"];
3056 [label="param GetAdditionalTopLevelTypeDefinitions(EmitContext context) 798454"];
3057 [label="param GetAdditionalTopLevelTypeDefinitions(this) 798455"];
3058 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 798456"];
3059 [label="GetAdditionalTopLevelTypes(context.Diagnostics) 798457"];
3060 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 798458"];
3061 [label="=> _additionalTypes 798459"];
3062 [label="_additionalTypes 798460"];
3063 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 798461"];
3064 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 798462"];
3065 [label="param GetEmbeddedTypeDefinitions(EmitContext context) 798463"];
3066 [label="param GetEmbeddedTypeDefinitions(this) 798464"];
3067 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 798465"];
3068 [label="GetEmbeddedTypes(context.Diagnostics) 798466"];
3069 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 798467"];
3070 [label="param GetEmbeddedTypes(this) 798468"];
3071 [label="var builder = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 798469"];
3072 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 798470"];
3073 [label="CreateEmbeddedAttributesIfNeeded(diagnostics) 798471"];
3074 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 798472"];
3075 [label="param CreateEmbeddedAttributesIfNeeded(this) 798473"];
3076 [label="GetNeedsGeneratedAttributes() 798474"];
3077 [label="param GetNeedsGeneratedAttributes(this) 798475"];
3078 [label="_needsGeneratedAttributes_IsFrozen = true; 798476"];
3079 [label="_needsGeneratedAttributes_IsFrozen 798477"];
3080 [label="GetNeedsGeneratedAttributesInternal() 798478"];
3081 [label="param GetNeedsGeneratedAttributesInternal(this) 798479"];
3082 [label="return (EmbeddableAttributes)_needsGeneratedAttributes | Compilation.GetNeedsGeneratedAttributes(); 798480"];
3083 [label="return GetNeedsGeneratedAttributesInternal(); 798481"];
3084 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 798482"];
3085 [label="ShouldEmitNullablePublicOnlyAttribute() 798483"];
3086 [label="param ShouldEmitNullablePublicOnlyAttribute(this) 798484"];
3087 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 798485"];
3088 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 798486"];
3089 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 798487"];
3090 [label="return; 798488"];
3091 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 798489"];
3092 [label="builder.AddIfNotNull(_lazyEmbeddedAttribute); 798490"];
3093 [label="builder.AddIfNotNull(_lazyIsReadOnlyAttribute); 798491"];
3094 [label="builder.AddIfNotNull(_lazyIsUnmanagedAttribute); 798492"];
3095 [label="builder.AddIfNotNull(_lazyIsByRefLikeAttribute); 798493"];
3096 [label="builder.AddIfNotNull(_lazyNullableAttribute); 798494"];
3097 [label="builder.AddIfNotNull(_lazyNullableContextAttribute); 798495"];
3098 [label="builder.AddIfNotNull(_lazyNullablePublicOnlyAttribute); 798496"];
3099 [label="builder.AddIfNotNull(_lazyNativeIntegerAttribute); 798497"];
3100 [label="return builder.ToImmutableAndFree(); 798498"];
3101 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 798499"];
3102 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 798500"];
3103 [label="param GetTopLevelSourceTypeDefinitions(EmitContext context) 798501"];
3104 [label="param GetTopLevelSourceTypeDefinitions(this) 798502"];
3105 [label="var namespacesToProcess = new Stack<NamespaceSymbol>(); 798503"];
3106 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 798504"];
3107 [label="namespacesToProcess.Push(SourceModule.GlobalNamespace); 798505"];
3108 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 798506"];
3109 [label="while (namespacesToProcess.Count > 0)\n            {\n                var ns = namespacesToProcess.Pop();\n                foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                }\n            } 798507"];
3110 [label="var ns = namespacesToProcess.Pop(); 798508"];
3111 [label="foreach (var member in ns.GetMembers())\n                {\n                    if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    }\n                } 798509"];
3112 [label="if (member.Kind == SymbolKind.Namespace)\n                    {\n                        namespacesToProcess.Push((NamespaceSymbol)member);\n                    }\n                    else\n                    {\n                        yield return ((NamedTypeSymbol)member).GetCciAdapter();\n                    } 798510"];
3113 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 798511"];
3114 [label="yield return ((NamedTypeSymbol)member).GetCciAdapter(); 798512"];
3115 [label="param ShouldEmitNullableAttributes(Symbol symbol) 798513"];
3116 [label="param ShouldEmitNullableAttributes(this) 798514"];
3117 [label="RoslynDebug.Assert(symbol is object); 798515"];
3118 [label="Debug.Assert(symbol.IsDefinition); 798516"];
3119 [label="SourceModule 798517"];
3120 [label="get\n            {\n                return Assembly.Modules[0];\n            } 798518"];
3121 [label="Assembly 798519"];
3122 [label="get\n            {\n                return SourceAssembly;\n            } 798520"];
3123 [label="SourceAssembly 798521"];
3124 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 798522"];
3125 [label="GetBoundReferenceManager() 798523"];
3126 [label="param GetBoundReferenceManager(this) 798524"];
3127 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 798525"];
3128 [label="return _referenceManager; 798526"];
3129 [label="GetBoundReferenceManager(); 798527"];
3130 [label="return Assembly.Modules[0]; 798528"];
3131 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 798529"];
3132 [label="EmitNullablePublicOnly 798530"];
3133 [label="get\n            {\n                if (!_lazyEmitNullablePublicOnly.HasValue())\n                {\n                    // Lafhis\n                    var firstSt = SyntaxTrees.FirstOrDefault();\n                    bool value = firstSt != null && firstSt.Options != null &&\n                        firstSt.Options.Features != null && \n                        firstSt.Options.Features.ContainsKey('nullablePublicOnly') == true;\n                    _lazyEmitNullablePublicOnly = value.ToThreeState();\n                }\n                return _lazyEmitNullablePublicOnly.Value();\n            } 798531"];
3134 [label="param SynthesizeNullableAttributeIfNecessary(Symbol symbol) 798532"];
3135 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 798533"];
3136 [label="param SynthesizeNullableAttributeIfNecessary(TypeWithAnnotations type) 798534"];
3137 [label="param SynthesizeNullableAttributeIfNecessary(this) 798535"];
3138 [label="Compilation.SourceModule 798536"];
3139 [label="get\n            {\n                return Assembly.Modules[0];\n            } 798537"];
3140 [label="Assembly 798538"];
3141 [label="SourceAssembly 798539"];
3142 [label="GetBoundReferenceManager() 798540"];
3143 [label="param GetBoundReferenceManager(this) 798541"];
3144 [label="GetBoundReferenceManager(); 798542"];
3145 [label="return Assembly.Modules[0]; 798543"];
3146 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 798544"];
3147 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 798545"];
3148 [label="var flagsBuilder = ArrayBuilder<byte>.GetInstance(); 798546"];
3149 [label="type.AddNullableTransforms(flagsBuilder); 798547"];
3150 [label="type.AddNullableTransforms(flagsBuilder); 798548"];
3151 [label="SynthesizedAttributeData attribute; 798549"];
3152 [label="if (!flagsBuilder.Any())\n            {\n                attribute = null;\n            }\n            else\n            {\n                Debug.Assert(flagsBuilder.All(f => f <= 2));\n                byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder);\n                if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                }\n            } 798550"];
3153 [label="attribute = null; 798551"];
3154 [label="flagsBuilder.Free(); 798552"];
3155 [label="return attribute; 798553"];
3156 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 798554"];
3157 [label="new LexicalOrderSymbolComparer() 798555"];
3158 [label="param LexicalOrderSymbolComparer(this) 798556"];
3159 [label="Instance = new LexicalOrderSymbolComparer() 798557"];
3160 [label="param GetSynthesizedNestedTypes(NamedTypeSymbol container) 798558"];
3161 [label="param GetSynthesizedNestedTypes(this) 798559"];
3162 [label="return null; 798560"];
3163 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 798561"];
3164 [label="param GetSourceAssemblyAttributes(bool isRefAssembly) 798562"];
3165 [label="param GetSourceAssemblyAttributes(this) 798563"];
3166 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 798564"];
3167 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 798565"];
3168 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 798566"];
3169 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 798567"];
3170 [label="return SourceModule.ContainingSourceAssembly\n                .GetCustomAttributesToEmit(this, isRefAssembly, emittingAssemblyAttributesInNetModule: OutputKind.IsNetModule()); 798568"];
3171 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 798569"];
3172 [label="NamedTypeSymbol result; 798570"];
3173 [label="GetBoundReferenceManager() 798571"];
3174 [label="GetBoundReferenceManager(); 798572"];
3175 [label="Debug.Assert(result.SpecialType == specialType); 798573"];
3176 [label="SourceAssembly 798574"];
3177 [label="GetBoundReferenceManager() 798575"];
3178 [label="param GetBoundReferenceManager(this) 798576"];
3179 [label="GetBoundReferenceManager(); 798577"];
3180 [label="GetBoundReferenceManager() 798578"];
3181 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    assemblies.Add(referenceManager.ReferencedAssemblies[i]);\n                }\n            } 798579"];
3182 [label="param Translate(MethodSymbol methodSymbol) 798580"];
3183 [label="param Translate(SyntaxNode syntaxNodeOpt) 798581"];
3184 [label="param Translate(DiagnosticBag diagnostics) 798582"];
3185 [label="param Translate(BoundArgListOperator optArgList = null) 798583"];
3186 [label="param Translate(bool needDeclaration = false) 798584"];
3187 [label="param Translate(this) 798585"];
3188 [label="Debug.Assert(!methodSymbol.IsDefaultValueTypeConstructor()); 798586"];
3189 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 798587"];
3190 [label="Debug.Assert(optArgList == null || (methodSymbol.IsVararg && !needDeclaration)); 798588"];
3191 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 798589"];
3192 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 798590"];
3193 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 798591"];
3194 [label="Cci.IMethodReference unexpandedMethodRef = Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration); 798592"];
3195 [label="Translate(methodSymbol, syntaxNodeOpt, diagnostics, needDeclaration) 798593"];
3196 [label="param Translate(MethodSymbol methodSymbol) 798594"];
3197 [label="param Translate(SyntaxNode syntaxNodeOpt) 798595"];
3198 [label="param Translate(DiagnosticBag diagnostics) 798596"];
3199 [label="param Translate(bool needDeclaration) 798597"];
3200 [label="param Translate(this) 798598"];
3201 [label="object reference; 798599"];
3202 [label="Cci.IMethodReference methodRef; 798600"];
3203 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 798601"];
3204 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 798602"];
3205 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 798603"];
3206 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 798604"];
3207 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 798605"];
3208 [label="bool typeIsGeneric = IsGenericType(container); 798606"];
3209 [label="IsGenericType(container) 798607"];
3210 [label="param IsGenericType(NamedTypeSymbol toCheck) 798608"];
3211 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798609"];
3212 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798610"];
3213 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 798611"];
3214 [label="toCheck = toCheck.ContainingType; 798612"];
3215 [label="return false; 798613"];
3216 [label="bool typeIsGeneric = IsGenericType(container); 798614"];
3217 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 798615"];
3218 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 798616"];
3219 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 798617"];
3220 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 798618"];
3221 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 798619"];
3222 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 798620"];
3223 [label="if (optArgList != null && optArgList.Arguments.Length > 0)\n            {\n                Cci.IParameterTypeInformation[] @params = new Cci.IParameterTypeInformation[optArgList.Arguments.Length];\n                int ordinal = methodSymbol.ParameterCount;\n\n                for (int i = 0; i < @params.Length; i++)\n                {\n                    @params[i] = new ArgListParameterTypeInformation(ordinal,\n                                                                    !optArgList.ArgumentRefKindsOpt.IsDefaultOrEmpty && optArgList.ArgumentRefKindsOpt[i] != RefKind.None,\n                                                                    Translate(optArgList.Arguments[i].Type, syntaxNodeOpt, diagnostics));\n                    ordinal++;\n                }\n\n                return new ExpandedVarargsMethodReference(unexpandedMethodRef, @params.AsImmutableOrNull());\n            }\n            else\n            {\n                return unexpandedMethodRef;\n            } 798621"];
3224 [label="param Translate(TypeSymbol typeSymbol) 798622"];
3225 [label="param Translate(SyntaxNode syntaxNodeOpt) 798623"];
3226 [label="param Translate(DiagnosticBag diagnostics) 798624"];
3227 [label="param Translate(this) 798625"];
3228 [label="Debug.Assert(diagnostics != null); 798626"];
3229 [label="Debug.Assert(diagnostics != null); 798627"];
3230 [label="switch (typeSymbol.Kind)\n            {\n                case SymbolKind.DynamicType:\n                    return Translate((DynamicTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.ArrayType:\n                    return Translate((ArrayTypeSymbol)typeSymbol);\n\n                case SymbolKind.ErrorType:\n                case SymbolKind.NamedType:\n                    return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics);\n\n                case SymbolKind.PointerType:\n                    return Translate((PointerTypeSymbol)typeSymbol);\n\n                case SymbolKind.TypeParameter:\n                    return Translate((TypeParameterSymbol)typeSymbol);\n\n                case SymbolKind.FunctionPointerType:\n                    return Translate((FunctionPointerTypeSymbol)typeSymbol);\n            } 798628"];
3231 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 798629"];
3232 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 798630"];
3233 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 798631"];
3234 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 798632"];
3235 [label="Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics) 798633"];
3236 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 798634"];
3237 [label="param Translate(SyntaxNode syntaxNodeOpt) 798635"];
3238 [label="param Translate(DiagnosticBag diagnostics) 798636"];
3239 [label="param Translate(bool fromImplements = false) 798637"];
3240 [label="param Translate(bool needDeclaration = false) 798638"];
3241 [label="param Translate(this) 798639"];
3242 [label="Debug.Assert(namedTypeSymbol.IsDefinitionOrDistinct()); 798640"];
3243 [label="Debug.Assert(diagnostics != null); 798641"];
3244 [label="Debug.Assert(diagnostics != null); 798642"];
3245 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798643"];
3246 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798644"];
3247 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 798645"];
3248 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798646"];
3249 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798647"];
3250 [label="object reference; 798648"];
3251 [label="Cci.INamedTypeReference typeRef; 798649"];
3252 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 798650"];
3253 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798651"];
3254 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798652"];
3255 [label="IsGenericType(container) 798653"];
3256 [label="param IsGenericType(NamedTypeSymbol toCheck) 798654"];
3257 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798655"];
3258 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798656"];
3259 [label="return false; 798657"];
3260 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798658"];
3261 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798659"];
3262 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 798660"];
3263 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 798661"];
3264 [label="return _embeddedTypesManagerOpt?.EmbedTypeIfNeedTo(namedTypeSymbol, fromImplements, syntaxNodeOpt, diagnostics) ?? namedTypeSymbol.GetCciAdapter(); 798662"];
3265 [label="param Translate(NamedTypeSymbol namedTypeSymbol) 798663"];
3266 [label="param Translate(SyntaxNode syntaxNodeOpt) 798664"];
3267 [label="param Translate(DiagnosticBag diagnostics) 798665"];
3268 [label="param Translate(bool fromImplements = false) 798666"];
3269 [label="param Translate(bool needDeclaration = false) 798667"];
3270 [label="param Translate(this) 798668"];
3271 [label="Debug.Assert(diagnostics != null); 798669"];
3272 [label="Debug.Assert(diagnostics != null); 798670"];
3273 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798671"];
3274 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798672"];
3275 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 798673"];
3276 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798674"];
3277 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798675"];
3278 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 798676"];
3279 [label="param Translate(ModuleSymbol module) 798677"];
3280 [label="param Translate(DiagnosticBag diagnostics) 798678"];
3281 [label="param Translate(this) 798679"];
3282 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 798680"];
3283 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 798681"];
3284 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 798682"];
3285 [label="if ((object)module == null)\n            {\n                return null;\n            } 798683"];
3286 [label="if ((object)module == null)\n            {\n                return null;\n            } 798684"];
3287 [label="Cci.IModuleReference moduleRef; 798685"];
3288 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 798686"];
3289 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 798687"];
3290 [label="if (AssemblyOrModuleSymbolToModuleRefMap.TryGetValue(module, out moduleRef))\n            {\n                return moduleRef;\n            } 798688"];
3291 [label="return moduleRef; 798689"];
3292 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798690"];
3293 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798691"];
3294 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 798692"];
3295 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798693"];
3296 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798694"];
3297 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 798695"];
3298 [label="param Translate(ImmutableArray<ParameterSymbol> @params) 798696"];
3299 [label="param Translate(this) 798697"];
3300 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 798698"];
3301 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 798699"];
3302 [label="Debug.Assert(@params.All(p => p.IsDefinitionOrDistinct())); 798700"];
3303 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 798701"];
3304 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 798702"];
3305 [label="MustBeWrapped(@params.First()) 798703"];
3306 [label="param MustBeWrapped(ParameterSymbol param) 798704"];
3307 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 798705"];
3308 [label="var container = param.ContainingSymbol; 798706"];
3309 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 798707"];
3310 [label="ContainerIsGeneric(container) 798708"];
3311 [label="param ContainerIsGeneric(Symbol container) 798709"];
3312 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798710"];
3313 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798711"];
3314 [label="IsGenericType(container.ContainingType) 798712"];
3315 [label="param IsGenericType(NamedTypeSymbol toCheck) 798713"];
3316 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798714"];
3317 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798715"];
3318 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 798716"];
3319 [label="toCheck = toCheck.ContainingType; 798717"];
3320 [label="return false; 798718"];
3321 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798719"];
3322 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798720"];
3323 [label="return false; 798721"];
3324 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 798722"];
3325 [label="bool mustBeTranslated = @params.Any() && MustBeWrapped(@params.First()); 798723"];
3326 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 798724"];
3327 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 798725"];
3328 [label="Debug.Assert(@params.All(p => mustBeTranslated == MustBeWrapped(p)), 'either all or no parameters need translating'); 798726"];
3329 [label="param MustBeWrapped(ParameterSymbol param) 798727"];
3330 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 798728"];
3331 [label="var container = param.ContainingSymbol; 798729"];
3332 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 798730"];
3333 [label="ContainerIsGeneric(container) 798731"];
3334 [label="param ContainerIsGeneric(Symbol container) 798732"];
3335 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798733"];
3336 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798734"];
3337 [label="IsGenericType(container.ContainingType) 798735"];
3338 [label="param IsGenericType(NamedTypeSymbol toCheck) 798736"];
3339 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798737"];
3340 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798738"];
3341 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 798739"];
3342 [label="toCheck = toCheck.ContainingType; 798740"];
3343 [label="return false; 798741"];
3344 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798742"];
3345 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798743"];
3346 [label="return false; 798744"];
3347 [label="if (!mustBeTranslated)\n            {\n#if DEBUG\n                return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter());\n#else\n                return StaticCast<Cci.IParameterTypeInformation>.From(@params);\n#endif\n            } 798745"];
3348 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 798746"];
3349 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 798747"];
3350 [label="return @params.SelectAsArray<ParameterSymbol, Cci.IParameterTypeInformation>(p => p.GetCciAdapter()); 798748"];
3351 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 798749"];
3352 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 798750"];
3353 [label="param Translate(SyntaxNode syntaxNodeOpt) 798751"];
3354 [label="param Translate(DiagnosticBag diagnostics) 798752"];
3355 [label="param Translate(bool fromImplements = false) 798753"];
3356 [label="param Translate(bool needDeclaration = false) 798754"];
3357 [label="Debug.Assert(diagnostics != null); 798755"];
3358 [label="Debug.Assert(diagnostics != null); 798756"];
3359 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798757"];
3360 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798758"];
3361 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 798759"];
3362 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798760"];
3363 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798761"];
3364 [label="object reference; 798762"];
3365 [label="Cci.INamedTypeReference typeRef; 798763"];
3366 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 798764"];
3367 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798765"];
3368 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798766"];
3369 [label="IsGenericType(container) 798767"];
3370 [label="param IsGenericType(NamedTypeSymbol toCheck) 798768"];
3371 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798769"];
3372 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798770"];
3373 [label="return false; 798771"];
3374 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798772"];
3375 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798773"];
3376 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 798774"];
3377 [label="param IsPlatformType(Cci.ITypeReference typeRef) 798775"];
3378 [label="param IsPlatformType(Cci.PlatformType platformType) 798776"];
3379 [label="param IsPlatformType(this) 798777"];
3380 [label="var namedType = typeRef.GetInternalSymbol() as NamedTypeSymbol; 798778"];
3381 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 798779"];
3382 [label="if ((object)namedType != null)\n            {\n                if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                }\n\n                return namedType.SpecialType == (SpecialType)platformType;\n            } 798780"];
3383 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 798781"];
3384 [label="return namedType.SpecialType == (SpecialType)platformType; 798782"];
3385 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 798783"];
3386 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 798784"];
3387 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 798785"];
3388 [label="param Translate(SyntaxNode syntaxNodeOpt) 798786"];
3389 [label="param Translate(DiagnosticBag diagnostics) 798787"];
3390 [label="param Translate(bool fromImplements = false) 798788"];
3391 [label="param Translate(bool needDeclaration = false) 798789"];
3392 [label="Debug.Assert(diagnostics != null); 798790"];
3393 [label="Debug.Assert(diagnostics != null); 798791"];
3394 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798792"];
3395 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798793"];
3396 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 798794"];
3397 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798795"];
3398 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798796"];
3399 [label="object reference; 798797"];
3400 [label="Cci.INamedTypeReference typeRef; 798798"];
3401 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 798799"];
3402 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798800"];
3403 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798801"];
3404 [label="IsGenericType(container) 798802"];
3405 [label="param IsGenericType(NamedTypeSymbol toCheck) 798803"];
3406 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798804"];
3407 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798805"];
3408 [label="return false; 798806"];
3409 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798807"];
3410 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798808"];
3411 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 798809"];
3412 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798810"];
3413 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798811"];
3414 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 798812"];
3415 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798813"];
3416 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798814"];
3417 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 798815"];
3418 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 798816"];
3419 [label="param MustBeWrapped(ParameterSymbol param) 798817"];
3420 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 798818"];
3421 [label="var container = param.ContainingSymbol; 798819"];
3422 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 798820"];
3423 [label="ContainerIsGeneric(container) 798821"];
3424 [label="param ContainerIsGeneric(Symbol container) 798822"];
3425 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798823"];
3426 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798824"];
3427 [label="IsGenericType(container.ContainingType) 798825"];
3428 [label="param IsGenericType(NamedTypeSymbol toCheck) 798826"];
3429 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798827"];
3430 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798828"];
3431 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 798829"];
3432 [label="toCheck = toCheck.ContainingType; 798830"];
3433 [label="return false; 798831"];
3434 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798832"];
3435 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798833"];
3436 [label="param MustBeWrapped(ParameterSymbol param) 798834"];
3437 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 798835"];
3438 [label="var container = param.ContainingSymbol; 798836"];
3439 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 798837"];
3440 [label="ContainerIsGeneric(container) 798838"];
3441 [label="param ContainerIsGeneric(Symbol container) 798839"];
3442 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798840"];
3443 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798841"];
3444 [label="IsGenericType(container.ContainingType) 798842"];
3445 [label="param IsGenericType(NamedTypeSymbol toCheck) 798843"];
3446 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798844"];
3447 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798845"];
3448 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 798846"];
3449 [label="toCheck = toCheck.ContainingType; 798847"];
3450 [label="return false; 798848"];
3451 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798849"];
3452 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 798850"];
3453 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 798851"];
3454 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 798852"];
3455 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 798853"];
3456 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 798854"];
3457 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 798855"];
3458 [label="bool typeIsGeneric = IsGenericType(container); 798856"];
3459 [label="IsGenericType(container) 798857"];
3460 [label="param IsGenericType(NamedTypeSymbol toCheck) 798858"];
3461 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798859"];
3462 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798860"];
3463 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 798861"];
3464 [label="toCheck = toCheck.ContainingType; 798862"];
3465 [label="return false; 798863"];
3466 [label="bool typeIsGeneric = IsGenericType(container); 798864"];
3467 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 798865"];
3468 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 798866"];
3469 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 798867"];
3470 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 798868"];
3471 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 798869"];
3472 [label="toCheck = toCheck.ContainingType; 798870"];
3473 [label="param GetSourceAssemblySecurityAttributes(this) 798871"];
3474 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 798872"];
3475 [label="return SourceModule.ContainingSourceAssembly.GetSecurityAttributes(); 798873"];
3476 [label="return Translate(corLibrary, context.Diagnostics); 798874"];
3477 [label="param Translate(DiagnosticBag diagnostics) 798875"];
3478 [label="if (ReferenceEquals(SourceModule.ContainingAssembly, assembly))\n            {\n                return (Cci.IAssemblyReference)this;\n            } 798876"];
3479 [label="return (Cci.IAssemblyReference)reference; 798877"];
3480 [label="ImmutableArray<ModuleSymbol> modules = SourceModule.ContainingAssembly.Modules; 798878"];
3481 [label="for (int i = 1; i < modules.Length; i++)\n            {\n                foreach (AssemblySymbol aRef in modules[i].GetReferencedAssemblySymbols())\n                {\n                    yield return Translate(aRef, diagnostics);\n                }\n            } 798879"];
3482 [label="param GetSourceModuleAttributes(this) 798880"];
3483 [label="return SourceModule.GetCustomAttributesToEmit(this); 798881"];
3484 [label="return SourceModule.GetCustomAttributesToEmit(this); 798882"];
3485 [label="return SourceModule.GetCustomAttributesToEmit(this); 798883"];
3486 [label="if (context.MetadataOnly)\n            {\n                return SpecializedCollections.EmptyEnumerable<Cci.INamespaceTypeDefinition>();\n            } 798884"];
3487 [label="return GetAdditionalTopLevelTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 798885"];
3488 [label="param GetAdditionalTopLevelTypes(DiagnosticBag diagnostics) 798886"];
3489 [label="return GetEmbeddedTypes(context.Diagnostics)\n#if DEBUG\n                   .Select(type => type.GetCciAdapter())\n#endif\n                   ; 798887"];
3490 [label="param GetEmbeddedTypes(DiagnosticBag diagnostics) 798888"];
3491 [label="CreateEmbeddedAttributesIfNeeded(diagnostics); 798889"];
3492 [label="param CreateEmbeddedAttributesIfNeeded(DiagnosticBag diagnostics) 798890"];
3493 [label="return GetNeedsGeneratedAttributesInternal(); 798891"];
3494 [label="EmbeddableAttributes needsAttributes = GetNeedsGeneratedAttributes(); 798892"];
3495 [label="if (ShouldEmitNullablePublicOnlyAttribute() &&\n                Compilation.CheckIfAttributeShouldBeEmbedded(EmbeddableAttributes.NullablePublicOnlyAttribute, diagnostics, Location.None))\n            {\n                needsAttributes |= EmbeddableAttributes.NullablePublicOnlyAttribute;\n            }\n            else if (needsAttributes == 0)\n            {\n                return;\n            } 798893"];
3496 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 798894"];
3497 [label="if (needsAttributes == 0)\n            {\n                return;\n            } 798895"];
3498 [label="return; 798896"];
3499 [label="Debug.Assert(symbol.IsDefinition); 798897"];
3500 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 798898"];
3501 [label="return _referenceManager; 798899"];
3502 [label="GetBoundReferenceManager(); 798900"];
3503 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 798901"];
3504 [label="param GetBoundReferenceManager(this) 798902"];
3505 [label="GetBoundReferenceManager(); 798903"];
3506 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 798904"];
3507 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 798905"];
3508 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 798906"];
3509 [label="Debug.Assert(flagsBuilder.All(f => f <= 2)); 798907"];
3510 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 798908"];
3511 [label="byte? commonValue = MostCommonNullableValueBuilder.GetCommonValue(flagsBuilder); 798909"];
3512 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 798910"];
3513 [label="if (commonValue != null)\n                {\n                    attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault());\n                }\n                else\n                {\n                    NamedTypeSymbol byteType = Compilation.GetSpecialType(SpecialType.System_Byte);\n                    var byteArrayType = ArrayTypeSymbol.CreateSZArray(byteType.ContainingAssembly, TypeWithAnnotations.Create(byteType));\n                    var value = flagsBuilder.SelectAsArray((flag, byteType) => new TypedConstant(byteType, TypedConstantKind.Primitive, flag), byteType);\n                    attribute = SynthesizeNullableAttribute(\n                        WellKnownMember.System_Runtime_CompilerServices_NullableAttribute__ctorTransformFlags,\n                        ImmutableArray.Create(new TypedConstant(byteArrayType, value)));\n                } 798911"];
3514 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 798912"];
3515 [label="attribute = SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()); 798913"];
3516 [label="SynthesizeNullableAttributeIfNecessary(nullableContextValue, commonValue.GetValueOrDefault()) 798914"];
3517 [label="param SynthesizeNullableAttributeIfNecessary(byte? nullableContextValue) 798915"];
3518 [label="param SynthesizeNullableAttributeIfNecessary(byte nullableValue) 798916"];
3519 [label="param SynthesizeNullableAttributeIfNecessary(this) 798917"];
3520 [label="if (nullableValue == nullableContextValue ||\n                (nullableContextValue == null && nullableValue == 0))\n            {\n                return null;\n            } 798918"];
3521 [label="return null; 798919"];
3522 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798920"];
3523 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798921"];
3524 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 798922"];
3525 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798923"];
3526 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798924"];
3527 [label="object reference; 798925"];
3528 [label="Cci.INamedTypeReference typeRef; 798926"];
3529 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 798927"];
3530 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798928"];
3531 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798929"];
3532 [label="IsGenericType(container) 798930"];
3533 [label="param IsGenericType(NamedTypeSymbol toCheck) 798931"];
3534 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798932"];
3535 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798933"];
3536 [label="return false; 798934"];
3537 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798935"];
3538 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798936"];
3539 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 798937"];
3540 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 798938"];
3541 [label="Debug.Assert(symbol.IsDefinition); 798939"];
3542 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 798940"];
3543 [label="return _referenceManager; 798941"];
3544 [label="GetBoundReferenceManager(); 798942"];
3545 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 798943"];
3546 [label="param GetBoundReferenceManager(this) 798944"];
3547 [label="GetBoundReferenceManager(); 798945"];
3548 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 798946"];
3549 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 798947"];
3550 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 798948"];
3551 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 798949"];
3552 [label="param Translate(SyntaxNode syntaxNodeOpt) 798950"];
3553 [label="param Translate(DiagnosticBag diagnostics) 798951"];
3554 [label="param Translate(bool fromImplements = false) 798952"];
3555 [label="param Translate(bool needDeclaration = false) 798953"];
3556 [label="Debug.Assert(diagnostics != null); 798954"];
3557 [label="Debug.Assert(diagnostics != null); 798955"];
3558 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798956"];
3559 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 798957"];
3560 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 798958"];
3561 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798959"];
3562 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 798960"];
3563 [label="object reference; 798961"];
3564 [label="Cci.INamedTypeReference typeRef; 798962"];
3565 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 798963"];
3566 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798964"];
3567 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798965"];
3568 [label="IsGenericType(container) 798966"];
3569 [label="param IsGenericType(NamedTypeSymbol toCheck) 798967"];
3570 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798968"];
3571 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 798969"];
3572 [label="return false; 798970"];
3573 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798971"];
3574 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 798972"];
3575 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 798973"];
3576 [label="param GetExportedTypes(DiagnosticBag diagnostics) 798974"];
3577 [label="param GetExportedTypes(this) 798975"];
3578 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 798976"];
3579 [label="if (_lazyExportedTypes.IsDefault)\n            {\n                _lazyExportedTypes = CalculateExportedTypes();\n\n                if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                }\n            } 798977"];
3580 [label="CalculateExportedTypes() 798978"];
3581 [label="param CalculateExportedTypes(this) 798979"];
3582 [label="SourceAssemblySymbol sourceAssembly = SourceModule.ContainingSourceAssembly; 798980"];
3583 [label="var builder = ArrayBuilder<Cci.ExportedType>.GetInstance(); 798981"];
3584 [label="if (!OutputKind.IsNetModule())\n            {\n                var modules = sourceAssembly.Modules;\n                for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                }\n            } 798982"];
3585 [label="var modules = sourceAssembly.Modules; 798983"];
3586 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 798984"];
3587 [label="for (int i = 1; i < modules.Length; i++) //NOTE: skipping modules[0]\n                {\n                    GetExportedTypes(modules[i].GlobalNamespace, -1, builder);\n                } 798985"];
3588 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 798986"];
3589 [label="sourceAssembly.DeclaringCompilation.Options 798987"];
3590 [label="get\n            {\n                return _options;\n            } 798988"];
3591 [label="Debug.Assert(OutputKind.IsNetModule() == sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule()); 798989"];
3592 [label="GetForwardedTypes(sourceAssembly, builder); 798990"];
3593 [label="GetForwardedTypes(sourceAssembly, builder); 798991"];
3594 [label="GetForwardedTypes(sourceAssembly, builder) 798992"];
3595 [label="param GetForwardedTypes(SourceAssemblySymbol sourceAssembly) 798993"];
3596 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 798994"];
3597 [label="var seenTopLevelForwardedTypes = new HashSet<NamedTypeSymbol>(); 798995"];
3598 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 798996"];
3599 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 798997"];
3600 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 798998"];
3601 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder) 798999"];
3602 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 799000"];
3603 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 799001"];
3604 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 799002"];
3605 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 799003"];
3606 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 799004"];
3607 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetSourceDecodedWellKnownAttributeData(), builder); 799005"];
3608 [label="sourceAssembly.DeclaringCompilation.Options 799006"];
3609 [label="get\n            {\n                return _options;\n            } 799007"];
3610 [label="if (!sourceAssembly.DeclaringCompilation.Options.OutputKind.IsNetModule())\n            {\n                GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder);\n            } 799008"];
3611 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 799009"];
3612 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 799010"];
3613 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 799011"];
3614 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder) 799012"];
3615 [label="param GetForwardedTypes(HashSet<NamedTypeSymbol> seenTopLevelTypes) 799013"];
3616 [label="param GetForwardedTypes(CommonAssemblyWellKnownAttributeData<NamedTypeSymbol> wellKnownAttributeData) 799014"];
3617 [label="param GetForwardedTypes(ArrayBuilder<Cci.ExportedType>? builder) 799015"];
3618 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 799016"];
3619 [label="if (wellKnownAttributeData != null && wellKnownAttributeData.ForwardedTypes != null && wellKnownAttributeData.ForwardedTypes.Count > 0)\n            {\n                // (type, index of the parent exported type in builder, or -1 if the type is a top-level type)\n                var stack = ArrayBuilder<(NamedTypeSymbol type, int parentIndex)>.GetInstance();\n\n                // Hashset enumeration is not guaranteed to be deterministic. Emitting in the order of fully qualified names.\n                IEnumerable<NamedTypeSymbol> orderedForwardedTypes = wellKnownAttributeData.ForwardedTypes;\n\n                if (builder is object)\n                {\n                    orderedForwardedTypes = orderedForwardedTypes.OrderBy(t => t.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.QualifiedNameArityFormat));\n                }\n\n                foreach (NamedTypeSymbol forwardedType in orderedForwardedTypes)\n                {\n                    NamedTypeSymbol originalDefinition = forwardedType.OriginalDefinition;\n                    Debug.Assert((object)originalDefinition.ContainingType == null, 'How did a nested type get forwarded?');\n\n                    // Since we need to allow multiple constructions of the same generic type at the source\n                    // level, we need to de-dup the original definitions before emitting.\n                    if (!seenTopLevelTypes.Add(originalDefinition)) continue;\n\n                    if (builder is object)\n                    {\n                        // Return all nested types.\n                        // Note the order: depth first, children in reverse order (to match dev10, not a requirement).\n                        Debug.Assert(stack.Count == 0);\n                        stack.Push((originalDefinition, -1));\n\n                        while (stack.Count > 0)\n                        {\n                            var (type, parentIndex) = stack.Pop();\n\n                            // In general, we don't want private types to appear in the ExportedTypes table.\n                            // BREAK: dev11 emits these types.  The problem was discovered in dev10, but failed\n                            // to meet the bar Bug: Dev10/258038 and was left as-is.\n                            if (type.DeclaredAccessibility == Accessibility.Private)\n                            {\n                                // NOTE: this will also exclude nested types of type\n                                continue;\n                            }\n\n                            // NOTE: not bothering to put nested types in seenTypes - the top-level type is adequate protection.\n\n                            int index = builder.Count;\n                            builder.Add(new Cci.ExportedType(type.GetCciAdapter(), parentIndex, isForwarder: true));\n\n                            // Iterate backwards so they get popped in forward order.\n                            ImmutableArray<NamedTypeSymbol> nested = type.GetTypeMembers(); // Ordered.\n                            for (int i = nested.Length - 1; i >= 0; i--)\n                            {\n                                stack.Push((nested[i], index));\n                            }\n                        }\n                    }\n                }\n\n                stack.Free();\n            } 799017"];
3620 [label="GetForwardedTypes(seenTopLevelForwardedTypes, sourceAssembly.GetNetModuleDecodedWellKnownAttributeData(), builder); 799018"];
3621 [label="return seenTopLevelForwardedTypes; 799019"];
3622 [label="GetForwardedTypes(sourceAssembly, builder); 799020"];
3623 [label="return builder.ToImmutableAndFree(); 799021"];
3624 [label="_lazyExportedTypes = CalculateExportedTypes(); 799022"];
3625 [label="_lazyExportedTypes 799023"];
3626 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 799024"];
3627 [label="if (_lazyExportedTypes.Length > 0)\n                {\n                    ReportExportedTypeNameCollisions(_lazyExportedTypes, diagnostics);\n                } 799025"];
3628 [label="return _lazyExportedTypes; 799026"];
3629 [label="param AddEmbeddedResourcesFromAddedModules(ArrayBuilder<Cci.ManagedResource> builder) 799027"];
3630 [label="param AddEmbeddedResourcesFromAddedModules(DiagnosticBag diagnostics) 799028"];
3631 [label="param AddEmbeddedResourcesFromAddedModules(this) 799029"];
3632 [label="var modules = _sourceAssembly.Modules; 799030"];
3633 [label="int count = modules.Length; 799031"];
3634 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 799032"];
3635 [label="for (int i = 1; i < count; i++)\n            {\n                var file = (Cci.IFileReference)Translate(modules[i], diagnostics);\n\n                try\n                {\n                    foreach (EmbeddedResource resource in ((Symbols.Metadata.PE.PEModuleSymbol)modules[i]).Module.GetEmbeddedResourcesOrThrow())\n                    {\n                        builder.Add(new Cci.ManagedResource(\n                            resource.Name,\n                            (resource.Attributes & ManifestResourceAttributes.Public) != 0,\n                            null,\n                            file,\n                            resource.Offset));\n                    }\n                }\n                catch (BadImageFormatException)\n                {\n                    diagnostics.Add(new CSDiagnosticInfo(ErrorCode.ERR_BindToBogus, modules[i]), NoLocation.Singleton);\n                }\n            } 799033"];
3636 [label="=> ImmutableArray<Cci.UsedNamespaceOrType>.Empty 799034"];
3637 [label="ImmutableArray<Cci.UsedNamespaceOrType>.Empty 799035"];
3638 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 799036"];
3639 [label="this.SyntaxTrees 799037"];
3640 [label="_syntaxAndDeclarations.GetLazyState() 799038"];
3641 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 799039"];
3642 [label="=> null 799040"];
3643 [label="null 799041"];
3644 [label="result = compilation.Emit(\n                    executableStream,\n                    metadataPEStream: null,\n                    pdbStream: pdbStream,\n                    xmlDocumentationStream: null,\n                    win32Resources: null,\n                    manifestResources: manifestResources,\n                    options: emitOptions,\n                    debugEntryPoint: null,\n                    sourceLinkStream: null,\n                    embeddedTexts,\n                    testData: testData,\n                    cancellationToken: default); 799042"];
3645 [label="param CommonGetBoundReferenceManager(this) 799043"];
3646 [label="GetBoundReferenceManager() 799044"];
3647 [label="param GetBoundReferenceManager(this) 799045"];
3648 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 799046"];
3649 [label="return _referenceManager; 799047"];
3650 [label="return GetBoundReferenceManager(); 799048"];
3651 [label="param SerializePdbEmbeddedCompilationOptions(BlobBuilder builder) 799049"];
3652 [label="param SerializePdbEmbeddedCompilationOptions(this) 799050"];
3653 [label="Debug.Assert(LanguageVersion == LanguageVersion.MapSpecifiedToEffectiveVersion()); 799051"];
3654 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 799052"];
3655 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 799053"];
3656 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()) 799054"];
3657 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 799055"];
3658 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 799056"];
3659 [label="void WriteValue(string key, string value)\n            {\n                builder.WriteUTF8(key);\n                builder.WriteByte(0);\n                builder.WriteUTF8(value);\n                builder.WriteByte(0);\n            } 799057"];
3660 [label="builder.WriteUTF8(key); 799058"];
3661 [label="builder.WriteUTF8(key); 799059"];
3662 [label="builder.WriteUTF8(key); 799060"];
3663 [label="builder.WriteByte(0); 799061"];
3664 [label="builder.WriteByte(0); 799062"];
3665 [label="builder.WriteUTF8(value); 799063"];
3666 [label="builder.WriteUTF8(value); 799064"];
3667 [label="builder.WriteUTF8(value); 799065"];
3668 [label="builder.WriteByte(0); 799066"];
3669 [label="builder.WriteByte(0); 799067"];
3670 [label="WriteValue(CompilationOptionNames.LanguageVersion, LanguageVersion.ToDisplayString()); 799068"];
3671 [label="Options 799069"];
3672 [label="get\n            {\n                return _options;\n            } 799070"];
3673 [label="return _options; 799071"];
3674 [label="if (Options.CheckOverflow)\n            {\n                WriteValue(CompilationOptionNames.Checked, Options.CheckOverflow.ToString());\n            } 799072"];
3675 [label="Options 799073"];
3676 [label="get\n            {\n                return _options;\n            } 799074"];
3677 [label="return _options; 799075"];
3678 [label="if (Options.NullableContextOptions != NullableContextOptions.Disable)\n            {\n                WriteValue(CompilationOptionNames.Nullable, Options.NullableContextOptions.ToString());\n            } 799076"];
3679 [label="Options 799077"];
3680 [label="get\n            {\n                return _options;\n            } 799078"];
3681 [label="return _options; 799079"];
3682 [label="if (Options.AllowUnsafe)\n            {\n                WriteValue(CompilationOptionNames.Unsafe, Options.AllowUnsafe.ToString());\n            } 799080"];
3683 [label="GetPreprocessorSymbols() 799081"];
3684 [label="param GetPreprocessorSymbols(this) 799082"];
3685 [label="SyntaxTrees 799083"];
3686 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 799084"];
3687 [label="_syntaxAndDeclarations.GetLazyState() 799085"];
3688 [label="param GetLazyState(this) 799086"];
3689 [label="if (_lazyState == null)\n            {\n                Interlocked.CompareExchange(ref _lazyState, CreateState(this.ExternalSyntaxTrees, this.ScriptClassName, this.Resolver, this.MessageProvider, this.IsSubmission), null);\n            } 799087"];
3690 [label="CSharpSyntaxTree? firstTree = (CSharpSyntaxTree?)SyntaxTrees.FirstOrDefault(); 799088"];
3691 [label="if (firstTree is null)\n            {\n                return ImmutableArray<string>.Empty;\n            } 799089"];
3692 [label="return firstTree.Options.PreprocessorSymbolNames.ToImmutableArray(); 799090"];
3693 [label="var preprocessorSymbols = GetPreprocessorSymbols(); 799091"];
3694 [label="if (preprocessorSymbols.Any())\n            {\n                WriteValue(CompilationOptionNames.Define, string.Join(',', preprocessorSymbols));\n            } 799092"];
3695 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799093"];
3696 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799094"];
3697 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 799095"];
3698 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799096"];
3699 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799097"];
3700 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 799098"];
3701 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 799099"];
3702 [label="param MustBeWrapped(ParameterSymbol param) 799100"];
3703 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 799101"];
3704 [label="var container = param.ContainingSymbol; 799102"];
3705 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 799103"];
3706 [label="ContainerIsGeneric(container) 799104"];
3707 [label="param ContainerIsGeneric(Symbol container) 799105"];
3708 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799106"];
3709 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799107"];
3710 [label="IsGenericType(container.ContainingType) 799108"];
3711 [label="param IsGenericType(NamedTypeSymbol toCheck) 799109"];
3712 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799110"];
3713 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799111"];
3714 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 799112"];
3715 [label="toCheck = toCheck.ContainingType; 799113"];
3716 [label="return false; 799114"];
3717 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799115"];
3718 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799116"];
3719 [label="param MustBeWrapped(ParameterSymbol param) 799117"];
3720 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 799118"];
3721 [label="var container = param.ContainingSymbol; 799119"];
3722 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 799120"];
3723 [label="ContainerIsGeneric(container) 799121"];
3724 [label="param ContainerIsGeneric(Symbol container) 799122"];
3725 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799123"];
3726 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799124"];
3727 [label="IsGenericType(container.ContainingType) 799125"];
3728 [label="param IsGenericType(NamedTypeSymbol toCheck) 799126"];
3729 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799127"];
3730 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799128"];
3731 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 799129"];
3732 [label="toCheck = toCheck.ContainingType; 799130"];
3733 [label="return false; 799131"];
3734 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799132"];
3735 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799133"];
3736 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 799134"];
3737 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 799135"];
3738 [label="param Translate(SyntaxNode syntaxNodeOpt) 799136"];
3739 [label="param Translate(DiagnosticBag diagnostics) 799137"];
3740 [label="param Translate(bool fromImplements = false) 799138"];
3741 [label="param Translate(bool needDeclaration = false) 799139"];
3742 [label="Debug.Assert(diagnostics != null); 799140"];
3743 [label="Debug.Assert(diagnostics != null); 799141"];
3744 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799142"];
3745 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799143"];
3746 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 799144"];
3747 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799145"];
3748 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799146"];
3749 [label="object reference; 799147"];
3750 [label="Cci.INamedTypeReference typeRef; 799148"];
3751 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 799149"];
3752 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799150"];
3753 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799151"];
3754 [label="IsGenericType(container) 799152"];
3755 [label="param IsGenericType(NamedTypeSymbol toCheck) 799153"];
3756 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799154"];
3757 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799155"];
3758 [label="return false; 799156"];
3759 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799157"];
3760 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799158"];
3761 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 799159"];
3762 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 799160"];
3763 [label="=> _sourceAssembly 799161"];
3764 [label="_sourceAssembly 799162"];
3765 [label="=> _metadataName 799163"];
3766 [label="_metadataName 799164"];
3767 [label="Debug.Assert(HaveDeterminedTopLevelTypes); 799165"];
3768 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799166"];
3769 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799167"];
3770 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 799168"];
3771 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799169"];
3772 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799170"];
3773 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 799171"];
3774 [label="param MemberVisibility(Symbol symbol) 799172"];
3775 [label="switch (symbol.DeclaredAccessibility)\n            {\n                case Accessibility.Public:\n                    return Cci.TypeMemberVisibility.Public;\n\n                case Accessibility.Private:\n                    if (symbol.ContainingType?.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level private member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Private;\n                    }\n\n                case Accessibility.Internal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    }\n\n                case Accessibility.Protected:\n                    if (symbol.ContainingType.TypeKind == TypeKind.Submission)\n                    {\n                        // top-level protected member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Family;\n                    }\n\n                case Accessibility.ProtectedAndInternal:\n                    Debug.Assert(symbol.ContainingType.TypeKind != TypeKind.Submission);\n                    return Cci.TypeMemberVisibility.FamilyAndAssembly;\n\n                case Accessibility.ProtectedOrInternal:\n                    if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested protected internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.FamilyOrAssembly;\n                    }\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n            } 799173"];
3776 [label="return Cci.TypeMemberVisibility.Public; 799174"];
3777 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 799175"];
3778 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 799176"];
3779 [label="param Translate(SyntaxNode syntaxNodeOpt) 799177"];
3780 [label="param Translate(DiagnosticBag diagnostics) 799178"];
3781 [label="param Translate(bool fromImplements = false) 799179"];
3782 [label="param Translate(bool needDeclaration = false) 799180"];
3783 [label="Debug.Assert(diagnostics != null); 799181"];
3784 [label="Debug.Assert(diagnostics != null); 799182"];
3785 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799183"];
3786 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799184"];
3787 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 799185"];
3788 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799186"];
3789 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799187"];
3790 [label="object reference; 799188"];
3791 [label="Cci.INamedTypeReference typeRef; 799189"];
3792 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 799190"];
3793 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799191"];
3794 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799192"];
3795 [label="IsGenericType(container) 799193"];
3796 [label="param IsGenericType(NamedTypeSymbol toCheck) 799194"];
3797 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799195"];
3798 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799196"];
3799 [label="return false; 799197"];
3800 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799198"];
3801 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799199"];
3802 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 799200"];
3803 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 799201"];
3804 [label="get { return _metadataName; } 799202"];
3805 [label="return _metadataName; 799203"];
3806 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799204"];
3807 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799205"];
3808 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 799206"];
3809 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799207"];
3810 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799208"];
3811 [label="object reference; 799209"];
3812 [label="Cci.INamedTypeReference typeRef; 799210"];
3813 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 799211"];
3814 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799212"];
3815 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799213"];
3816 [label="IsGenericType(container) 799214"];
3817 [label="param IsGenericType(NamedTypeSymbol toCheck) 799215"];
3818 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799216"];
3819 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799217"];
3820 [label="return false; 799218"];
3821 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799219"];
3822 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799220"];
3823 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 799221"];
3824 [label="if (symbol.ContainingAssembly.IsInteractive)\n                    {\n                        // top-level or nested internal member:\n                        return Cci.TypeMemberVisibility.Public;\n                    }\n                    else\n                    {\n                        return Cci.TypeMemberVisibility.Assembly;\n                    } 799222"];
3825 [label="return Cci.TypeMemberVisibility.Assembly; 799223"];
3826 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 799224"];
3827 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799225"];
3828 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799226"];
3829 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 799227"];
3830 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799228"];
3831 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799229"];
3832 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 799230"];
3833 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 799231"];
3834 [label="GetBoundReferenceManager() 799232"];
3835 [label="GetBoundReferenceManager(); 799233"];
3836 [label="Debug.Assert(result.SpecialType == specialType); 799234"];
3837 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 799235"];
3838 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 799236"];
3839 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 799237"];
3840 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 799238"];
3841 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 799239"];
3842 [label="bool typeIsGeneric = IsGenericType(container); 799240"];
3843 [label="IsGenericType(container) 799241"];
3844 [label="param IsGenericType(NamedTypeSymbol toCheck) 799242"];
3845 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799243"];
3846 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799244"];
3847 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 799245"];
3848 [label="toCheck = toCheck.ContainingType; 799246"];
3849 [label="return false; 799247"];
3850 [label="bool typeIsGeneric = IsGenericType(container); 799248"];
3851 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 799249"];
3852 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 799250"];
3853 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 799251"];
3854 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 799252"];
3855 [label="param MustBeWrapped(ParameterSymbol param) 799253"];
3856 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 799254"];
3857 [label="var container = param.ContainingSymbol; 799255"];
3858 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 799256"];
3859 [label="ContainerIsGeneric(container) 799257"];
3860 [label="param ContainerIsGeneric(Symbol container) 799258"];
3861 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799259"];
3862 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799260"];
3863 [label="IsGenericType(container.ContainingType) 799261"];
3864 [label="param IsGenericType(NamedTypeSymbol toCheck) 799262"];
3865 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799263"];
3866 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799264"];
3867 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 799265"];
3868 [label="toCheck = toCheck.ContainingType; 799266"];
3869 [label="return false; 799267"];
3870 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799268"];
3871 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799269"];
3872 [label="param MustBeWrapped(ParameterSymbol param) 799270"];
3873 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 799271"];
3874 [label="var container = param.ContainingSymbol; 799272"];
3875 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 799273"];
3876 [label="ContainerIsGeneric(container) 799274"];
3877 [label="param ContainerIsGeneric(Symbol container) 799275"];
3878 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799276"];
3879 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799277"];
3880 [label="IsGenericType(container.ContainingType) 799278"];
3881 [label="param IsGenericType(NamedTypeSymbol toCheck) 799279"];
3882 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799280"];
3883 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799281"];
3884 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 799282"];
3885 [label="toCheck = toCheck.ContainingType; 799283"];
3886 [label="return false; 799284"];
3887 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799285"];
3888 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799286"];
3889 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 799287"];
3890 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 799288"];
3891 [label="param Translate(SyntaxNode syntaxNodeOpt) 799289"];
3892 [label="param Translate(DiagnosticBag diagnostics) 799290"];
3893 [label="param Translate(bool fromImplements = false) 799291"];
3894 [label="param Translate(bool needDeclaration = false) 799292"];
3895 [label="Debug.Assert(diagnostics != null); 799293"];
3896 [label="Debug.Assert(diagnostics != null); 799294"];
3897 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799295"];
3898 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799296"];
3899 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 799297"];
3900 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799298"];
3901 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799299"];
3902 [label="object reference; 799300"];
3903 [label="Cci.INamedTypeReference typeRef; 799301"];
3904 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 799302"];
3905 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799303"];
3906 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799304"];
3907 [label="IsGenericType(container) 799305"];
3908 [label="param IsGenericType(NamedTypeSymbol toCheck) 799306"];
3909 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799307"];
3910 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799308"];
3911 [label="return false; 799309"];
3912 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799310"];
3913 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799311"];
3914 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 799312"];
3915 [label="if (platformType == Cci.PlatformType.SystemType)\n                {\n                    return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type);\n                } 799313"];
3916 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 799314"];
3917 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 799315"];
3918 [label="return (object)namedType == (object)Compilation.GetWellKnownType(WellKnownType.System_Type); 799316"];
3919 [label="GetBoundReferenceManager() 799317"];
3920 [label="param GetBoundReferenceManager(this) 799318"];
3921 [label="GetBoundReferenceManager(); 799319"];
3922 [label="NamedTypeSymbol container = methodSymbol.ContainingType; 799320"];
3923 [label="if (container.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                methodSymbol = AnonymousTypeManager.TranslateAnonymousTypeMethodSymbol(methodSymbol);\n            } 799321"];
3924 [label="if (!methodSymbol.IsDefinition)\n            {\n                Debug.Assert(!needDeclaration);\n                Debug.Assert(!(methodSymbol.OriginalDefinition is NativeIntegerMethodSymbol));\n                Debug.Assert(!(methodSymbol.ConstructedFrom is NativeIntegerMethodSymbol));\n\n                return (Cci.IMethodReference)GetCciAdapter(methodSymbol);\n            }\n            else if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 799322"];
3925 [label="if (!needDeclaration)\n            {\n                bool methodIsGeneric = methodSymbol.IsGenericMethod;\n                bool typeIsGeneric = IsGenericType(container);\n\n                if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                }\n            } 799323"];
3926 [label="bool methodIsGeneric = methodSymbol.IsGenericMethod; 799324"];
3927 [label="bool typeIsGeneric = IsGenericType(container); 799325"];
3928 [label="IsGenericType(container) 799326"];
3929 [label="param IsGenericType(NamedTypeSymbol toCheck) 799327"];
3930 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799328"];
3931 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799329"];
3932 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 799330"];
3933 [label="toCheck = toCheck.ContainingType; 799331"];
3934 [label="return false; 799332"];
3935 [label="bool typeIsGeneric = IsGenericType(container); 799333"];
3936 [label="if (methodIsGeneric || typeIsGeneric)\n                {\n                    if (_genericInstanceMap.TryGetValue(methodSymbol, out reference))\n                    {\n                        return (Cci.IMethodReference)reference;\n                    }\n\n                    if (methodIsGeneric)\n                    {\n                        if (typeIsGeneric)\n                        {\n                            // Specialized and generic instance at the same time.\n                            methodRef = new SpecializedGenericMethodInstanceReference(methodSymbol);\n                        }\n                        else\n                        {\n                            methodRef = new GenericMethodInstanceReference(methodSymbol);\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(typeIsGeneric);\n                        methodRef = new SpecializedMethodReference(methodSymbol);\n                    }\n\n                    methodRef = (Cci.IMethodReference)_genericInstanceMap.GetOrAdd(methodSymbol, methodRef);\n\n                    return methodRef;\n                }\n                else if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 799334"];
3937 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 799335"];
3938 [label="if (methodSymbol is NativeIntegerMethodSymbol { UnderlyingMethod: MethodSymbol underlyingMethod })\n                {\n                    methodSymbol = underlyingMethod;\n                } 799336"];
3939 [label="if (_embeddedTypesManagerOpt != null)\n            {\n                return _embeddedTypesManagerOpt.EmbedMethodIfNeedTo(methodSymbol.GetCciAdapter(), syntaxNodeOpt, diagnostics);\n            } 799337"];
3940 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799338"];
3941 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799339"];
3942 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 799340"];
3943 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799341"];
3944 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799342"];
3945 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 799343"];
3946 [label="if (ReferenceEquals(SourceModule, module))\n            {\n                return this;\n            } 799344"];
3947 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 799345"];
3948 [label="return Translate((NamedTypeSymbol)typeSymbol, syntaxNodeOpt, diagnostics); 799346"];
3949 [label="param Translate(SyntaxNode syntaxNodeOpt) 799347"];
3950 [label="param Translate(DiagnosticBag diagnostics) 799348"];
3951 [label="param Translate(bool fromImplements = false) 799349"];
3952 [label="param Translate(bool needDeclaration = false) 799350"];
3953 [label="Debug.Assert(diagnostics != null); 799351"];
3954 [label="Debug.Assert(diagnostics != null); 799352"];
3955 [label="if (namedTypeSymbol.IsAnonymousType)\n            {\n                Debug.Assert(!needDeclaration);\n                namedTypeSymbol = AnonymousTypeManager.TranslateAnonymousTypeSymbol(namedTypeSymbol);\n            }\n            else if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799353"];
3956 [label="if (namedTypeSymbol.IsTupleType)\n            {\n                CheckTupleUnderlyingType(namedTypeSymbol, syntaxNodeOpt, diagnostics);\n            } 799354"];
3957 [label="if (namedTypeSymbol.OriginalDefinition.Kind == SymbolKind.ErrorType)\n            {\n                ErrorTypeSymbol errorType = (ErrorTypeSymbol)namedTypeSymbol.OriginalDefinition;\n                DiagnosticInfo diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n\n                if (diagInfo == null && namedTypeSymbol.Kind == SymbolKind.ErrorType)\n                {\n                    errorType = (ErrorTypeSymbol)namedTypeSymbol;\n                    diagInfo = errorType.GetUseSiteDiagnostic() ?? errorType.ErrorInfo;\n                }\n\n                // Try to decrease noise by not complaining about the same type over and over again.\n                if (_reportedErrorTypesMap.Add(errorType))\n                {\n                    diagnostics.Add(new CSDiagnostic(diagInfo ?? new CSDiagnosticInfo(ErrorCode.ERR_BogusType, string.Empty), syntaxNodeOpt == null ? NoLocation.Singleton : syntaxNodeOpt.Location));\n                }\n\n                return CodeAnalysis.Emit.ErrorType.Singleton;\n            } 799355"];
3958 [label="if (!namedTypeSymbol.IsDefinition)\n            {\n                // generic instantiation for sure\n                Debug.Assert(!needDeclaration);\n\n                if (namedTypeSymbol.IsUnboundGenericType)\n                {\n                    namedTypeSymbol = namedTypeSymbol.OriginalDefinition;\n                }\n                else\n                {\n                    return (Cci.INamedTypeReference)GetCciAdapter(namedTypeSymbol);\n                }\n            }\n            else if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799356"];
3959 [label="if (!needDeclaration)\n            {\n                object reference;\n                Cci.INamedTypeReference typeRef;\n\n                NamedTypeSymbol container = namedTypeSymbol.ContainingType;\n\n                if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                }\n            } 799357"];
3960 [label="object reference; 799358"];
3961 [label="Cci.INamedTypeReference typeRef; 799359"];
3962 [label="NamedTypeSymbol container = namedTypeSymbol.ContainingType; 799360"];
3963 [label="if (namedTypeSymbol.Arity > 0)\n                {\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    if ((object)container != null)\n                    {\n                        if (IsGenericType(container))\n                        {\n                            // Container is a generic instance too.\n                            typeRef = new SpecializedGenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                        else\n                        {\n                            typeRef = new GenericNestedTypeInstanceReference(namedTypeSymbol);\n                        }\n                    }\n                    else\n                    {\n                        typeRef = new GenericNamespaceTypeInstanceReference(namedTypeSymbol);\n                    }\n\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799361"];
3964 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799362"];
3965 [label="IsGenericType(container) 799363"];
3966 [label="param IsGenericType(NamedTypeSymbol toCheck) 799364"];
3967 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799365"];
3968 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799366"];
3969 [label="return false; 799367"];
3970 [label="if (IsGenericType(container))\n                {\n                    Debug.Assert((object)container != null);\n\n                    if (_genericInstanceMap.TryGetValue(namedTypeSymbol, out reference))\n                    {\n                        return (Cci.INamedTypeReference)reference;\n                    }\n\n                    typeRef = new SpecializedNestedTypeReference(namedTypeSymbol);\n                    typeRef = (Cci.INamedTypeReference)_genericInstanceMap.GetOrAdd(namedTypeSymbol, typeRef);\n\n                    return typeRef;\n                }\n                else if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799368"];
3971 [label="if (namedTypeSymbol.NativeIntegerUnderlyingType is NamedTypeSymbol underlyingType)\n                {\n                    namedTypeSymbol = underlyingType;\n                } 799369"];
3972 [label="Debug.Assert(namedTypeSymbol.IsDefinition); 799370"];
3973 [label="param MustBeWrapped(ParameterSymbol param) 799371"];
3974 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 799372"];
3975 [label="var container = param.ContainingSymbol; 799373"];
3976 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 799374"];
3977 [label="ContainerIsGeneric(container) 799375"];
3978 [label="param ContainerIsGeneric(Symbol container) 799376"];
3979 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799377"];
3980 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799378"];
3981 [label="IsGenericType(container.ContainingType) 799379"];
3982 [label="param IsGenericType(NamedTypeSymbol toCheck) 799380"];
3983 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799381"];
3984 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799382"];
3985 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 799383"];
3986 [label="toCheck = toCheck.ContainingType; 799384"];
3987 [label="return false; 799385"];
3988 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799386"];
3989 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799387"];
3990 [label="param MustBeWrapped(ParameterSymbol param) 799388"];
3991 [label="if (param.IsDefinition)\n            {\n                var container = param.ContainingSymbol;\n                if (ContainerIsGeneric(container))\n                {\n                    return true;\n                }\n            } 799389"];
3992 [label="var container = param.ContainingSymbol; 799390"];
3993 [label="if (ContainerIsGeneric(container))\n                {\n                    return true;\n                } 799391"];
3994 [label="ContainerIsGeneric(container) 799392"];
3995 [label="param ContainerIsGeneric(Symbol container) 799393"];
3996 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799394"];
3997 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799395"];
3998 [label="IsGenericType(container.ContainingType) 799396"];
3999 [label="param IsGenericType(NamedTypeSymbol toCheck) 799397"];
4000 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799398"];
4001 [label="while ((object)toCheck != null)\n            {\n                if (toCheck.Arity > 0)\n                {\n                    return true;\n                }\n\n                toCheck = toCheck.ContainingType;\n            } 799399"];
4002 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 799400"];
4003 [label="toCheck = toCheck.ContainingType; 799401"];
4004 [label="return false; 799402"];
4005 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799403"];
4006 [label="return container.Kind == SymbolKind.Method && ((MethodSymbol)container).IsGenericMethod ||\n                IsGenericType(container.ContainingType); 799404"];
4007 [label="if (toCheck.Arity > 0)\n                {\n                    return true;\n                } 799405"];
4008 [label="toCheck = toCheck.ContainingType; 799406"];
4009 [label="Debug.Assert(symbol.IsDefinition); 799407"];
4010 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 799408"];
4011 [label="return _referenceManager; 799409"];
4012 [label="GetBoundReferenceManager(); 799410"];
4013 [label="if (symbol.ContainingModule != SourceModule)\n            {\n                return false;\n            } 799411"];
4014 [label="param GetBoundReferenceManager(this) 799412"];
4015 [label="GetBoundReferenceManager(); 799413"];
4016 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 799414"];
4017 [label="if ((object)Compilation.SourceModule != symbol.ContainingModule)\n            {\n                // For symbols that are not defined in the same compilation (like NoPia), don't synthesize this attribute.\n                return null;\n            } 799415"];
4018 [label="param SynthesizeNullableAttributeIfNecessary(this) 799416"];
4019 [label="return this; 799417"];
4020 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 799418"];
4021 [label="return _referenceManager; 799419"];
4022 [label="GetBoundReferenceManager(); 799420"];
4023 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 799421"];
4024 [label="if (pdbStream != null)\n                {\n                    pdb = pdbStream.ToImmutable();\n                    pdbStream.Dispose();\n                } 799422"];
4025 [label="diagnostics.AddRange(result.Diagnostics); 799423"];
4026 [label="diagnostics.AddRange(result.Diagnostics); 799424"];
4027 [label="assembly = executableStream.ToImmutable(); 799425"];
4028 [label="assembly = executableStream.ToImmutable(); 799426"];
4029 [label="if (result.Success)\n            {\n                return new EmitOutput(assembly, pdb);\n            } 799427"];
4030 [label="return new EmitOutput(assembly, pdb); 799428"];
4031 [label="return new EmitOutput(assembly, pdb); 799429"];
4032 [label="return new EmitOutput(assembly, pdb); 799430"];
4033 [label="new EmitOutput(assembly, pdb) 799431"];
4034 [label="param EmitOutput(ImmutableArray<byte> assembly) 799432"];
4035 [label="param EmitOutput(ImmutableArray<byte> pdb) 799433"];
4036 [label="param EmitOutput(this) 799434"];
4037 [label="Assembly 799435"];
4038 [label="if (pdb.IsDefault)\n            {\n                // We didn't emit a discrete PDB file, so we'll look for an embedded PDB instead.\n                using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                }\n            } 799436"];
4039 [label="using (var peReader = new PEReader(Assembly))\n                {\n                    DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb);\n                    if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    }\n                } 799437"];
4040 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 799438"];
4041 [label="DebugDirectoryEntry portablePdbEntry = peReader.ReadDebugDirectory().FirstOrDefault(e => e.Type == DebugDirectoryEntryType.EmbeddedPortablePdb); 799439"];
4042 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 799440"];
4043 [label="if (portablePdbEntry.DataSize != 0)\n                    {\n                        using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        }\n                    } 799441"];
4044 [label="using (var embeddedMetadataProvider = peReader.ReadEmbeddedPortablePdbDebugDirectoryData(portablePdbEntry))\n                        {\n                            var mdReader = embeddedMetadataProvider.GetMetadataReader();\n                            pdb = readMetadata(mdReader);\n                        } 799442"];
4045 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 799443"];
4046 [label="var mdReader = embeddedMetadataProvider.GetMetadataReader(); 799444"];
4047 [label="pdb = readMetadata(mdReader); 799445"];
4048 [label="readMetadata(mdReader) 799446"];
4049 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 799447"];
4050 [label="unsafe ImmutableArray<byte> readMetadata(MetadataReader mdReader)\n            {\n                var length = mdReader.MetadataLength;\n                var bytes = new byte[length];\n                Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length);\n                return ImmutableArray.Create(bytes);\n            } 799448"];
4051 [label="var length = mdReader.MetadataLength; 799449"];
4052 [label="var bytes = new byte[length]; 799450"];
4053 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 799451"];
4054 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 799452"];
4055 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 799453"];
4056 [label="Marshal.Copy((IntPtr)mdReader.MetadataPointer, bytes, 0, length); 799454"];
4057 [label="return ImmutableArray.Create(bytes); 799455"];
4058 [label="return ImmutableArray.Create(bytes); 799456"];
4059 [label="Pdb 799457"];
4060 [label="get { return this.Assembly.GetPublicSymbol(); } 799458"];
4061 [label="this.Assembly 799459"];
4062 [label="get\n            {\n                return SourceAssembly;\n            } 799460"];
4063 [label="SourceAssembly 799461"];
4064 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 799462"];
4065 [label="GetBoundReferenceManager() 799463"];
4066 [label="param GetBoundReferenceManager(this) 799464"];
4067 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 799465"];
4068 [label="return _referenceManager; 799466"];
4069 [label="GetBoundReferenceManager(); 799467"];
4070 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 799468"];
4071 [label="return this.Assembly.GetPublicSymbol(); 799469"];
4072 [label="_diagnostics = testEnvironment.GetDiagnostics(); 799470"];
4073 [label="_diagnostics 799471"];
4074 [label="EmittedAssemblyData = testEnvironment.GetMainImage(); 799472"];
4075 [label="EmittedAssemblyData 799473"];
4076 [label="EmittedAssemblyPdb = testEnvironment.GetMainPdb(); 799474"];
4077 [label="EmittedAssemblyPdb 799475"];
4078 [label="_testData = ((IInternalRuntimeEnvironment)testEnvironment).GetCompilationTestData(); 799476"];
4079 [label="_testData 799477"];
4080 [label="return _compilation.Assembly.Identity.GetDisplayName(); 799478"];
4081 [label="_compilation.Assembly 799479"];
4082 [label="get { return this.Assembly.GetPublicSymbol(); } 799480"];
4083 [label="this.Assembly 799481"];
4084 [label="SourceAssembly 799482"];
4085 [label="GetBoundReferenceManager() 799483"];
4086 [label="param GetBoundReferenceManager(this) 799484"];
4087 [label="GetBoundReferenceManager(); 799485"];
4088 [label="return _compilation.Assembly.Identity.GetDisplayName(); 799486"];
4089 [label="_allModuleData = testEnvironment.GetAllModuleData(); 799487"];
4090 [label="_allModuleData 799488"];
4091 [label="testEnvironment.Verify(peVerify); 799489"];
4092 [label="testEnvironment.Verify(peVerify); 799490"];
4093 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 799491"];
4094 [label="if (expectedSignatures != null)\n            {\n                MetadataSignatureUnitTestHelper.VerifyMemberSignatures(testEnvironment, expectedSignatures);\n            } 799492"];
4095 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 799493"];
4096 [label="if (expectedOutput != null || expectedReturnCode != null)\n            {\n                var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput);\n\n                if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                }\n            } 799494"];
4097 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 799495"];
4098 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 799496"];
4099 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 799497"];
4100 [label="var returnCode = testEnvironment.Execute(mainModuleName, args, expectedOutput); 799498"];
4101 [label="if (expectedReturnCode is int exCode)\n                {\n                    Assert.Equal(exCode, returnCode);\n                } 799499"];
4102 [label="verifier.Emit(expectedOutput, expectedReturnCode, args, manifestResources, emitOptions, verify, expectedSignatures); 799500"];
4103 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 799501"];
4104 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 799502"];
4105 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 799503"];
4106 [label="if (assemblyValidator != null || symbolValidator != null)\n            {\n                // We're dual-purposing emitters here.  In this context, it\n                // tells the validator the version of Emit that is calling it. \n                RunValidators(verifier, assemblyValidator, symbolValidator);\n            } 799504"];
4107 [label="return verifier; 799505"];
4108 [label="var verifier = Emit(compilation,\n                                dependencies,\n                                manifestResources,\n                                expectedSignatures,\n                                expectedOutput,\n                                expectedReturnCode,\n                                args ?? Array.Empty<string>(),\n                                assemblyValidator,\n                                symbolValidator,\n                                emitOptions,\n                                verify); 799506"];
4109 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 799507"];
4110 [label="if (result == null)\n            {\n                result = verifier;\n            }\n            else\n            {\n                // only one emitter should return a verifier\n                CustomAssert.Null(verifier);\n            } 799508"];
4111 [label="result = verifier; 799509"];
4112 [label="CustomAssert.NotNull(result); 799510"];
4113 [label="return result; 799511"];
4114 [label="return CompileAndVerifyCommon(\n                compilation,\n                manifestResources,\n                dependencies,\n                translate(sourceSymbolValidator),\n                validator,\n                translate(symbolValidator),\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 799512"];
4115 [label="return CompileAndVerify(\n                compilation,\n                manifestResources,\n                dependencies,\n                sourceSymbolValidator,\n                assemblyValidator,\n                symbolValidator,\n                expectedSignatures,\n                expectedOutput,\n                expectedReturnCode,\n                args,\n                emitOptions,\n                verify); 799513"];
4116 [label="CompileAndVerify(source, expectedOutput: '45'); 799514"];
2 -> 0;
2 -> 1;
3 -> 1;
4 -> 3;
5 -> 4;
6 -> 5;
7 -> 6;
8 -> 7;
8 -> 6;
9 -> 1;
9 -> 2;
9 -> 8;
10 -> 1;
11 -> 1;
12 -> 11;
12 -> 1;
13 -> 1;
14 -> 12;
14 -> 13;
15 -> 14;
15 -> 13;
16 -> 13;
17 -> 15;
17 -> 16;
18 -> 16;
19 -> 17;
19 -> 18;
19 -> 16;
20 -> 16;
20 -> 1;
21 -> 1;
22 -> 1;
23 -> 20;
23 -> 22;
24 -> 21;
24 -> 22;
25 -> 21;
25 -> 22;
26 -> 21;
26 -> 22;
27 -> 21;
27 -> 22;
28 -> 21;
28 -> 22;
29 -> 21;
29 -> 22;
30 -> 21;
30 -> 22;
31 -> 21;
31 -> 22;
32 -> 21;
32 -> 22;
33 -> 21;
33 -> 22;
34 -> 21;
34 -> 22;
35 -> 21;
35 -> 22;
36 -> 21;
36 -> 22;
37 -> 21;
37 -> 22;
38 -> 21;
38 -> 22;
39 -> 10;
39 -> 22;
40 -> 22;
41 -> 31;
41 -> 40;
41 -> 22;
42 -> 41;
42 -> 22;
43 -> 42;
43 -> 34;
43 -> 22;
44 -> 23;
44 -> 22;
45 -> 24;
45 -> 22;
46 -> 43;
46 -> 22;
47 -> 35;
47 -> 22;
48 -> 37;
48 -> 22;
49 -> 22;
50 -> 49;
51 -> 50;
51 -> 22;
52 -> 22;
53 -> 22;
54 -> 44;
54 -> 53;
55 -> 45;
55 -> 53;
56 -> 46;
56 -> 53;
57 -> 47;
57 -> 53;
58 -> 48;
58 -> 53;
59 -> 51;
59 -> 53;
60 -> 52;
60 -> 53;
61 -> 52;
61 -> 53;
62 -> 54;
62 -> 53;
63 -> 58;
63 -> 53;
64 -> 55;
64 -> 53;
65 -> 53;
66 -> 63;
66 -> 65;
67 -> 64;
67 -> 65;
68 -> 66;
68 -> 65;
69 -> 65;
70 -> 68;
70 -> 69;
71 -> 70;
71 -> 69;
72 -> 71;
73 -> 0;
73 -> 72;
74 -> 73;
75 -> 74;
76 -> 74;
77 -> 0;
77 -> 76;
78 -> 77;
78 -> 75;
78 -> 74;
79 -> 78;
79 -> 72;
80 -> 65;
81 -> 67;
81 -> 80;
81 -> 65;
82 -> 79;
82 -> 81;
83 -> 56;
83 -> 53;
84 -> 57;
84 -> 53;
85 -> 59;
85 -> 53;
86 -> 60;
86 -> 53;
87 -> 61;
87 -> 53;
88 -> 53;
89 -> 62;
89 -> 88;
90 -> 82;
90 -> 88;
91 -> 83;
91 -> 88;
92 -> 84;
92 -> 88;
93 -> 85;
93 -> 88;
94 -> 86;
94 -> 88;
95 -> 87;
95 -> 88;
96 -> 89;
96 -> 88;
97 -> 90;
97 -> 88;
98 -> 91;
98 -> 88;
99 -> 92;
99 -> 88;
100 -> 93;
100 -> 88;
101 -> 94;
101 -> 88;
102 -> 95;
102 -> 88;
103 -> 88;
104 -> 103;
104 -> 88;
105 -> 88;
106 -> 96;
106 -> 105;
107 -> 97;
107 -> 105;
108 -> 98;
108 -> 105;
109 -> 99;
109 -> 105;
110 -> 100;
110 -> 105;
111 -> 101;
111 -> 105;
112 -> 102;
112 -> 105;
113 -> 104;
113 -> 105;
114 -> 109;
114 -> 105;
115 -> 111;
115 -> 105;
116 -> 105;
117 -> 114;
117 -> 116;
118 -> 115;
118 -> 116;
119 -> 106;
119 -> 116;
120 -> 119;
120 -> 19;
120 -> 116;
121 -> 120;
122 -> 118;
122 -> 120;
123 -> 117;
123 -> 120;
124 -> 120;
125 -> 121;
125 -> 124;
126 -> 122;
126 -> 124;
127 -> 123;
127 -> 124;
128 -> 121;
128 -> 124;
129 -> 124;
130 -> 127;
130 -> 129;
130 -> 124;
131 -> 0;
131 -> 130;
132 -> 125;
132 -> 124;
133 -> 0;
133 -> 124;
134 -> 133;
134 -> 128;
134 -> 124;
135 -> 124;
136 -> 132;
136 -> 134;
136 -> 135;
136 -> 0;
136 -> 124;
137 -> 136;
137 -> 124;
138 -> 131;
138 -> 124;
139 -> 126;
139 -> 124;
140 -> 124;
141 -> 137;
141 -> 138;
141 -> 139;
141 -> 140;
141 -> 136;
141 -> 0;
141 -> 124;
142 -> 124;
143 -> 141;
143 -> 142;
144 -> 142;
145 -> 142;
146 -> 143;
146 -> 141;
146 -> 145;
146 -> 142;
147 -> 144;
147 -> 142;
148 -> 142;
149 -> 146;
149 -> 141;
149 -> 145;
149 -> 147;
149 -> 148;
149 -> 144;
149 -> 142;
150 -> 142;
151 -> 150;
151 -> 144;
151 -> 142;
152 -> 144;
152 -> 142;
153 -> 142;
154 -> 152;
154 -> 153;
154 -> 144;
154 -> 151;
154 -> 142;
155 -> 143;
155 -> 142;
156 -> 155;
156 -> 121;
156 -> 120;
157 -> 121;
157 -> 105;
158 -> 105;
159 -> 108;
159 -> 158;
159 -> 105;
160 -> 0;
160 -> 105;
161 -> 113;
161 -> 105;
162 -> 110;
162 -> 157;
162 -> 107;
162 -> 108;
162 -> 105;
163 -> 162;
163 -> 105;
164 -> 105;
165 -> 163;
165 -> 164;
166 -> 0;
166 -> 164;
167 -> 166;
168 -> 105;
169 -> 42;
171 -> 169;
171 -> 170;
172 -> 171;
173 -> 0;
175 -> 173;
175 -> 174;
177 -> 175;
177 -> 176;
178 -> 177;
179 -> 162;
179 -> 121;
179 -> 156;
179 -> 141;
179 -> 78;
179 -> 0;
179 -> 42;
179 -> 75;
179 -> 105;
180 -> 105;
181 -> 179;
181 -> 180;
182 -> 179;
182 -> 180;
183 -> 179;
183 -> 180;
184 -> 179;
184 -> 180;
185 -> 181;
185 -> 180;
186 -> 184;
186 -> 180;
187 -> 182;
187 -> 180;
188 -> 183;
188 -> 180;
189 -> 180;
190 -> 180;
191 -> 185;
191 -> 190;
192 -> 186;
192 -> 190;
193 -> 187;
193 -> 190;
194 -> 188;
194 -> 190;
195 -> 189;
195 -> 190;
196 -> 189;
196 -> 190;
197 -> 189;
197 -> 190;
198 -> 189;
198 -> 190;
199 -> 190;
200 -> 192;
200 -> 199;
200 -> 190;
201 -> 198;
201 -> 190;
202 -> 194;
202 -> 190;
203 -> 191;
203 -> 190;
204 -> 192;
204 -> 190;
205 -> 202;
205 -> 190;
206 -> 195;
206 -> 190;
207 -> 196;
207 -> 190;
208 -> 197;
208 -> 190;
209 -> 198;
209 -> 190;
210 -> 190;
211 -> 0;
211 -> 190;
212 -> 192;
212 -> 202;
212 -> 190;
213 -> 190;
214 -> 211;
214 -> 213;
215 -> 212;
215 -> 213;
216 -> 212;
216 -> 213;
217 -> 211;
217 -> 213;
218 -> 209;
218 -> 213;
219 -> 210;
219 -> 213;
220 -> 210;
220 -> 213;
221 -> 214;
221 -> 213;
222 -> 215;
222 -> 213;
223 -> 216;
223 -> 213;
224 -> 217;
224 -> 213;
225 -> 218;
225 -> 213;
226 -> 213;
227 -> 226;
227 -> 221;
227 -> 222;
227 -> 223;
227 -> 224;
227 -> 225;
227 -> 0;
227 -> 202;
227 -> 213;
228 -> 226;
228 -> 213;
229 -> 219;
229 -> 226;
229 -> 213;
230 -> 190;
231 -> 203;
231 -> 230;
232 -> 204;
232 -> 230;
233 -> 205;
233 -> 230;
234 -> 206;
234 -> 230;
235 -> 207;
235 -> 230;
236 -> 208;
236 -> 230;
237 -> 209;
237 -> 230;
238 -> 210;
238 -> 230;
239 -> 210;
239 -> 230;
240 -> 210;
240 -> 230;
241 -> 210;
241 -> 230;
242 -> 210;
242 -> 230;
243 -> 210;
243 -> 230;
244 -> 231;
244 -> 230;
245 -> 232;
245 -> 230;
246 -> 233;
246 -> 230;
247 -> 234;
247 -> 230;
248 -> 235;
248 -> 230;
249 -> 236;
249 -> 230;
250 -> 237;
250 -> 230;
251 -> 238;
251 -> 230;
252 -> 239;
252 -> 230;
253 -> 240;
253 -> 230;
254 -> 240;
254 -> 227;
254 -> 230;
255 -> 254;
255 -> 227;
255 -> 228;
255 -> 229;
255 -> 230;
256 -> 241;
256 -> 230;
257 -> 242;
257 -> 230;
258 -> 230;
259 -> 244;
259 -> 258;
260 -> 245;
260 -> 258;
261 -> 246;
261 -> 258;
262 -> 247;
262 -> 258;
263 -> 248;
263 -> 258;
264 -> 249;
264 -> 258;
265 -> 250;
265 -> 258;
266 -> 251;
266 -> 258;
267 -> 252;
267 -> 258;
268 -> 253;
268 -> 258;
269 -> 255;
269 -> 258;
270 -> 256;
270 -> 258;
271 -> 257;
271 -> 258;
272 -> 243;
272 -> 258;
273 -> 259;
273 -> 258;
274 -> 261;
274 -> 258;
275 -> 269;
275 -> 258;
276 -> 265;
276 -> 258;
277 -> 270;
277 -> 258;
278 -> 271;
278 -> 258;
279 -> 258;
280 -> 279;
280 -> 273;
280 -> 274;
280 -> 275;
280 -> 276;
280 -> 277;
280 -> 278;
280 -> 202;
280 -> 255;
280 -> 258;
281 -> 279;
281 -> 258;
282 -> 279;
282 -> 258;
283 -> 279;
283 -> 258;
284 -> 279;
284 -> 258;
285 -> 279;
285 -> 258;
286 -> 279;
286 -> 258;
287 -> 279;
287 -> 258;
288 -> 279;
288 -> 258;
289 -> 279;
289 -> 258;
290 -> 279;
290 -> 258;
291 -> 279;
291 -> 258;
292 -> 279;
292 -> 258;
293 -> 279;
293 -> 258;
294 -> 279;
294 -> 258;
295 -> 279;
295 -> 258;
296 -> 279;
296 -> 258;
297 -> 279;
297 -> 258;
298 -> 279;
298 -> 258;
299 -> 279;
299 -> 258;
300 -> 279;
300 -> 258;
301 -> 279;
301 -> 258;
302 -> 279;
302 -> 258;
303 -> 279;
303 -> 258;
304 -> 279;
304 -> 258;
305 -> 279;
305 -> 258;
306 -> 279;
306 -> 258;
307 -> 258;
308 -> 307;
308 -> 279;
308 -> 258;
309 -> 279;
309 -> 258;
310 -> 309;
310 -> 280;
310 -> 281;
310 -> 282;
310 -> 283;
310 -> 284;
310 -> 285;
310 -> 286;
310 -> 287;
310 -> 288;
310 -> 289;
310 -> 290;
310 -> 291;
310 -> 292;
310 -> 293;
310 -> 294;
310 -> 295;
310 -> 296;
310 -> 297;
310 -> 298;
310 -> 299;
310 -> 300;
310 -> 301;
310 -> 302;
310 -> 303;
310 -> 304;
310 -> 305;
310 -> 306;
310 -> 308;
310 -> 307;
310 -> 258;
311 -> 310;
311 -> 279;
311 -> 258;
312 -> 260;
312 -> 279;
312 -> 258;
313 -> 279;
313 -> 258;
314 -> 258;
315 -> 258;
316 -> 313;
316 -> 315;
317 -> 314;
317 -> 315;
318 -> 317;
318 -> 315;
319 -> 317;
319 -> 315;
320 -> 317;
320 -> 315;
321 -> 316;
321 -> 317;
321 -> 315;
322 -> 314;
322 -> 279;
322 -> 258;
323 -> 279;
323 -> 310;
323 -> 258;
324 -> 323;
324 -> 310;
324 -> 311;
324 -> 312;
324 -> 322;
324 -> 321;
324 -> 319;
324 -> 320;
324 -> 258;
325 -> 324;
325 -> 279;
325 -> 258;
326 -> 279;
326 -> 324;
326 -> 258;
327 -> 326;
327 -> 324;
327 -> 325;
327 -> 258;
328 -> 327;
328 -> 279;
328 -> 258;
329 -> 279;
329 -> 327;
329 -> 258;
330 -> 329;
330 -> 327;
330 -> 328;
330 -> 258;
331 -> 330;
331 -> 279;
331 -> 258;
332 -> 279;
332 -> 330;
332 -> 258;
333 -> 332;
333 -> 330;
333 -> 331;
333 -> 258;
334 -> 333;
334 -> 279;
334 -> 258;
335 -> 279;
335 -> 258;
336 -> 335;
336 -> 333;
336 -> 334;
336 -> 258;
337 -> 336;
337 -> 279;
337 -> 258;
338 -> 268;
338 -> 336;
338 -> 258;
339 -> 258;
340 -> 338;
340 -> 339;
341 -> 339;
342 -> 340;
342 -> 339;
343 -> 342;
343 -> 336;
343 -> 337;
343 -> 339;
344 -> 0;
344 -> 339;
345 -> 344;
345 -> 341;
345 -> 339;
346 -> 345;
346 -> 258;
347 -> 346;
347 -> 279;
347 -> 258;
348 -> 265;
348 -> 258;
349 -> 348;
350 -> 262;
350 -> 349;
350 -> 348;
351 -> 263;
351 -> 349;
351 -> 348;
352 -> 350;
352 -> 351;
352 -> 348;
353 -> 264;
353 -> 349;
353 -> 348;
354 -> 352;
354 -> 353;
354 -> 348;
355 -> 267;
355 -> 258;
356 -> 279;
356 -> 336;
356 -> 337;
356 -> 347;
356 -> 355;
357 -> 355;
358 -> 279;
358 -> 357;
359 -> 358;
359 -> 356;
359 -> 357;
360 -> 266;
360 -> 355;
361 -> 356;
361 -> 359;
361 -> 360;
361 -> 355;
362 -> 361;
362 -> 279;
362 -> 355;
363 -> 268;
363 -> 279;
363 -> 258;
364 -> 279;
364 -> 361;
364 -> 258;
365 -> 258;
366 -> 279;
366 -> 361;
366 -> 365;
366 -> 258;
367 -> 190;
368 -> 193;
368 -> 367;
368 -> 190;
369 -> 193;
369 -> 368;
370 -> 368;
371 -> 369;
371 -> 370;
372 -> 210;
372 -> 370;
373 -> 370;
374 -> 371;
374 -> 373;
374 -> 370;
375 -> 371;
375 -> 370;
376 -> 375;
376 -> 361;
376 -> 362;
376 -> 363;
376 -> 370;
377 -> 370;
378 -> 372;
378 -> 376;
378 -> 370;
379 -> 377;
379 -> 370;
380 -> 378;
380 -> 376;
380 -> 370;
381 -> 379;
381 -> 380;
381 -> 377;
381 -> 376;
381 -> 370;
382 -> 370;
383 -> 370;
384 -> 371;
384 -> 370;
385 -> 384;
385 -> 381;
385 -> 370;
386 -> 385;
387 -> 385;
388 -> 385;
389 -> 372;
389 -> 388;
389 -> 385;
390 -> 385;
391 -> 377;
391 -> 390;
391 -> 388;
391 -> 385;
392 -> 382;
392 -> 385;
392 -> 391;
393 -> 383;
393 -> 385;
394 -> 377;
394 -> 391;
394 -> 370;
395 -> 372;
395 -> 394;
395 -> 370;
396 -> 371;
396 -> 370;
397 -> 370;
398 -> 396;
398 -> 397;
399 -> 378;
399 -> 397;
400 -> 399;
400 -> 394;
400 -> 397;
401 -> 399;
401 -> 394;
401 -> 397;
402 -> 399;
402 -> 394;
402 -> 397;
403 -> 399;
403 -> 394;
403 -> 397;
404 -> 399;
404 -> 394;
404 -> 397;
405 -> 398;
405 -> 397;
406 -> 399;
406 -> 394;
406 -> 405;
406 -> 397;
407 -> 397;
408 -> 404;
408 -> 407;
408 -> 397;
409 -> 406;
409 -> 408;
410 -> 408;
411 -> 409;
411 -> 410;
412 -> 399;
412 -> 410;
413 -> 411;
413 -> 410;
414 -> 412;
414 -> 406;
414 -> 410;
415 -> 410;
416 -> 410;
417 -> 413;
417 -> 416;
418 -> 414;
418 -> 416;
419 -> 414;
419 -> 416;
420 -> 414;
420 -> 416;
421 -> 414;
421 -> 416;
422 -> 415;
422 -> 416;
423 -> 415;
423 -> 416;
424 -> 416;
424 -> 417;
424 -> 418;
424 -> 419;
424 -> 420;
424 -> 421;
424 -> 406;
425 -> 415;
425 -> 408;
426 -> 425;
426 -> 370;
427 -> 372;
427 -> 424;
427 -> 370;
428 -> 392;
428 -> 370;
429 -> 426;
429 -> 370;
430 -> 370;
431 -> 427;
431 -> 430;
432 -> 428;
432 -> 430;
433 -> 429;
433 -> 430;
434 -> 372;
434 -> 430;
435 -> 434;
435 -> 424;
435 -> 430;
436 -> 430;
437 -> 434;
437 -> 436;
438 -> 437;
438 -> 424;
438 -> 436;
439 -> 438;
439 -> 436;
440 -> 439;
440 -> 430;
441 -> 434;
441 -> 424;
441 -> 416;
441 -> 422;
441 -> 430;
442 -> 430;
443 -> 441;
443 -> 442;
444 -> 443;
444 -> 441;
444 -> 442;
445 -> 430;
446 -> 444;
446 -> 445;
447 -> 431;
447 -> 430;
448 -> 432;
448 -> 430;
449 -> 433;
449 -> 430;
450 -> 430;
451 -> 430;
452 -> 435;
452 -> 451;
453 -> 435;
453 -> 451;
454 -> 435;
454 -> 451;
455 -> 440;
455 -> 451;
456 -> 444;
456 -> 451;
457 -> 446;
457 -> 451;
458 -> 446;
458 -> 451;
459 -> 447;
459 -> 451;
460 -> 448;
460 -> 451;
461 -> 449;
461 -> 451;
462 -> 446;
462 -> 451;
463 -> 450;
463 -> 451;
464 -> 450;
464 -> 451;
465 -> 455;
465 -> 451;
466 -> 456;
466 -> 451;
467 -> 457;
467 -> 451;
468 -> 461;
468 -> 446;
468 -> 451;
469 -> 463;
469 -> 451;
470 -> 451;
471 -> 465;
471 -> 470;
472 -> 466;
472 -> 470;
473 -> 467;
473 -> 470;
474 -> 469;
474 -> 470;
475 -> 464;
475 -> 470;
476 -> 474;
476 -> 470;
477 -> 470;
478 -> 477;
478 -> 470;
479 -> 477;
479 -> 470;
480 -> 477;
480 -> 470;
481 -> 477;
481 -> 470;
482 -> 477;
482 -> 470;
483 -> 477;
483 -> 470;
484 -> 477;
484 -> 470;
485 -> 477;
485 -> 470;
486 -> 477;
486 -> 470;
487 -> 477;
487 -> 470;
488 -> 477;
488 -> 470;
489 -> 477;
489 -> 470;
490 -> 477;
490 -> 470;
491 -> 477;
491 -> 470;
492 -> 477;
492 -> 470;
493 -> 477;
493 -> 470;
494 -> 477;
494 -> 470;
495 -> 477;
495 -> 470;
496 -> 477;
496 -> 470;
497 -> 477;
497 -> 470;
498 -> 477;
498 -> 470;
499 -> 477;
499 -> 470;
500 -> 477;
500 -> 470;
501 -> 477;
501 -> 470;
502 -> 477;
502 -> 470;
503 -> 477;
503 -> 470;
504 -> 470;
505 -> 504;
505 -> 477;
505 -> 470;
506 -> 477;
506 -> 470;
507 -> 477;
507 -> 470;
508 -> 470;
509 -> 470;
510 -> 507;
510 -> 509;
511 -> 508;
511 -> 509;
512 -> 511;
512 -> 509;
513 -> 511;
513 -> 509;
514 -> 511;
514 -> 509;
515 -> 510;
515 -> 511;
515 -> 509;
516 -> 508;
516 -> 477;
516 -> 470;
517 -> 477;
517 -> 470;
518 -> 470;
519 -> 468;
519 -> 518;
520 -> 518;
521 -> 519;
521 -> 518;
522 -> 521;
522 -> 468;
523 -> 521;
524 -> 522;
524 -> 523;
525 -> 458;
525 -> 470;
526 -> 525;
527 -> 471;
527 -> 526;
527 -> 525;
528 -> 472;
528 -> 526;
528 -> 525;
529 -> 527;
529 -> 528;
529 -> 525;
530 -> 473;
530 -> 526;
530 -> 525;
531 -> 529;
531 -> 530;
531 -> 525;
532 -> 459;
532 -> 460;
533 -> 477;
533 -> 460;
534 -> 459;
534 -> 533;
534 -> 468;
534 -> 524;
534 -> 460;
535 -> 459;
535 -> 477;
535 -> 460;
536 -> 477;
536 -> 534;
536 -> 470;
537 -> 470;
538 -> 477;
538 -> 534;
538 -> 537;
538 -> 470;
539 -> 450;
539 -> 370;
540 -> 539;
540 -> 368;
541 -> 540;
541 -> 534;
541 -> 190;
542 -> 540;
542 -> 190;
543 -> 179;
543 -> 542;
543 -> 534;
543 -> 535;
543 -> 461;
543 -> 105;
544 -> 543;
544 -> 105;
545 -> 105;
546 -> 544;
546 -> 545;
547 -> 545;
548 -> 546;
548 -> 547;
549 -> 547;
550 -> 548;
550 -> 543;
550 -> 549;
551 -> 549;
552 -> 550;
552 -> 543;
552 -> 551;
552 -> 549;
553 -> 550;
553 -> 543;
553 -> 552;
554 -> 552;
555 -> 553;
555 -> 554;
556 -> 553;
556 -> 554;
557 -> 553;
557 -> 554;
558 -> 553;
558 -> 554;
559 -> 553;
559 -> 554;
560 -> 554;
561 -> 554;
562 -> 554;
563 -> 554;
564 -> 554;
565 -> 0;
565 -> 554;
566 -> 555;
566 -> 554;
567 -> 560;
567 -> 566;
568 -> 566;
569 -> 556;
569 -> 566;
570 -> 557;
570 -> 566;
571 -> 558;
571 -> 566;
572 -> 559;
572 -> 566;
573 -> 561;
573 -> 566;
574 -> 562;
574 -> 566;
575 -> 563;
575 -> 566;
576 -> 564;
576 -> 566;
577 -> 565;
577 -> 566;
578 -> 566;
579 -> 567;
579 -> 578;
580 -> 568;
580 -> 578;
581 -> 569;
581 -> 578;
582 -> 570;
582 -> 578;
583 -> 571;
583 -> 578;
584 -> 572;
584 -> 578;
585 -> 573;
585 -> 578;
586 -> 574;
586 -> 578;
587 -> 575;
587 -> 578;
588 -> 576;
588 -> 578;
589 -> 577;
589 -> 578;
590 -> 580;
590 -> 543;
590 -> 578;
591 -> 590;
591 -> 0;
591 -> 578;
592 -> 580;
592 -> 578;
593 -> 581;
593 -> 578;
594 -> 584;
594 -> 578;
595 -> 588;
595 -> 578;
596 -> 589;
596 -> 578;
597 -> 578;
598 -> 592;
598 -> 597;
599 -> 593;
599 -> 597;
600 -> 594;
600 -> 597;
601 -> 595;
601 -> 597;
602 -> 596;
602 -> 597;
603 -> 598;
603 -> 599;
603 -> 600;
603 -> 597;
604 -> 598;
604 -> 597;
605 -> 603;
605 -> 597;
606 -> 601;
606 -> 604;
606 -> 605;
606 -> 564;
606 -> 603;
606 -> 597;
607 -> 603;
607 -> 597;
608 -> 602;
608 -> 607;
608 -> 0;
608 -> 606;
608 -> 597;
609 -> 578;
610 -> 580;
610 -> 578;
611 -> 579;
611 -> 610;
611 -> 560;
611 -> 608;
611 -> 578;
612 -> 580;
612 -> 578;
613 -> 585;
613 -> 561;
613 -> 578;
614 -> 585;
614 -> 612;
614 -> 613;
614 -> 561;
614 -> 611;
614 -> 578;
615 -> 560;
615 -> 614;
615 -> 554;
616 -> 561;
616 -> 614;
616 -> 554;
617 -> 562;
617 -> 554;
618 -> 563;
618 -> 554;
619 -> 608;
619 -> 554;
620 -> 554;
621 -> 554;
622 -> 615;
622 -> 621;
623 -> 616;
623 -> 621;
624 -> 617;
624 -> 621;
625 -> 618;
625 -> 621;
626 -> 616;
626 -> 621;
627 -> 619;
627 -> 621;
628 -> 620;
628 -> 621;
629 -> 628;
629 -> 621;
630 -> 628;
630 -> 621;
631 -> 628;
631 -> 621;
632 -> 628;
632 -> 621;
633 -> 628;
633 -> 621;
634 -> 622;
634 -> 621;
635 -> 622;
635 -> 615;
635 -> 621;
636 -> 622;
636 -> 621;
637 -> 626;
637 -> 634;
637 -> 621;
638 -> 0;
638 -> 621;
639 -> 622;
639 -> 628;
639 -> 621;
640 -> 623;
640 -> 628;
640 -> 621;
641 -> 624;
641 -> 628;
641 -> 621;
642 -> 625;
642 -> 628;
642 -> 621;
643 -> 626;
643 -> 628;
643 -> 621;
644 -> 627;
644 -> 628;
644 -> 621;
645 -> 620;
645 -> 552;
646 -> 552;
647 -> 553;
647 -> 645;
647 -> 646;
647 -> 640;
647 -> 641;
647 -> 642;
647 -> 643;
647 -> 644;
647 -> 639;
647 -> 637;
647 -> 615;
647 -> 617;
647 -> 618;
647 -> 552;
648 -> 550;
648 -> 647;
648 -> 549;
649 -> 648;
649 -> 547;
650 -> 649;
650 -> 545;
651 -> 650;
651 -> 647;
651 -> 545;
652 -> 545;
653 -> 650;
653 -> 652;
653 -> 647;
653 -> 545;
654 -> 0;
654 -> 545;
655 -> 653;
655 -> 654;
655 -> 545;
656 -> 112;
656 -> 655;
656 -> 105;
657 -> 543;
657 -> 105;
658 -> 657;
658 -> 22;
659 -> 25;
659 -> 22;
660 -> 26;
660 -> 22;
661 -> 27;
661 -> 22;
662 -> 28;
662 -> 22;
663 -> 29;
663 -> 22;
664 -> 30;
664 -> 22;
665 -> 31;
665 -> 22;
666 -> 32;
666 -> 22;
667 -> 33;
667 -> 22;
668 -> 36;
668 -> 22;
669 -> 38;
669 -> 22;
670 -> 22;
671 -> 658;
671 -> 670;
672 -> 659;
672 -> 670;
673 -> 660;
673 -> 670;
674 -> 661;
674 -> 670;
675 -> 662;
675 -> 670;
676 -> 663;
676 -> 670;
677 -> 664;
677 -> 670;
678 -> 665;
678 -> 670;
679 -> 666;
679 -> 670;
680 -> 667;
680 -> 670;
681 -> 668;
681 -> 670;
682 -> 669;
682 -> 670;
683 -> 39;
683 -> 670;
684 -> 671;
684 -> 670;
685 -> 672;
685 -> 670;
686 -> 673;
686 -> 670;
687 -> 674;
687 -> 670;
688 -> 670;
689 -> 687;
689 -> 688;
690 -> 683;
690 -> 688;
691 -> 688;
692 -> 689;
692 -> 691;
692 -> 688;
693 -> 692;
694 -> 675;
694 -> 670;
695 -> 676;
695 -> 670;
696 -> 670;
697 -> 695;
697 -> 696;
698 -> 683;
698 -> 696;
699 -> 696;
700 -> 697;
700 -> 699;
700 -> 696;
701 -> 700;
702 -> 677;
702 -> 670;
703 -> 678;
703 -> 670;
704 -> 679;
704 -> 670;
705 -> 680;
705 -> 670;
706 -> 681;
706 -> 670;
707 -> 682;
707 -> 670;
708 -> 670;
709 -> 684;
709 -> 708;
710 -> 685;
710 -> 708;
711 -> 686;
711 -> 708;
712 -> 693;
712 -> 708;
713 -> 694;
713 -> 708;
714 -> 701;
714 -> 708;
715 -> 702;
715 -> 708;
716 -> 703;
716 -> 708;
717 -> 704;
717 -> 708;
718 -> 705;
718 -> 708;
719 -> 706;
719 -> 708;
720 -> 707;
720 -> 708;
721 -> 683;
721 -> 708;
722 -> 709;
722 -> 708;
723 -> 708;
724 -> 716;
724 -> 723;
724 -> 708;
725 -> 709;
725 -> 655;
725 -> 708;
726 -> 708;
727 -> 725;
727 -> 726;
728 -> 727;
728 -> 725;
728 -> 726;
729 -> 724;
729 -> 728;
729 -> 708;
730 -> 708;
731 -> 712;
731 -> 730;
731 -> 708;
732 -> 708;
733 -> 709;
733 -> 708;
734 -> 711;
734 -> 708;
735 -> 710;
735 -> 708;
736 -> 715;
736 -> 708;
737 -> 716;
737 -> 708;
738 -> 717;
738 -> 708;
739 -> 708;
740 -> 739;
740 -> 718;
740 -> 708;
741 -> 713;
741 -> 708;
742 -> 714;
742 -> 708;
743 -> 719;
743 -> 708;
744 -> 720;
744 -> 708;
745 -> 708;
746 -> 733;
746 -> 745;
747 -> 734;
747 -> 745;
748 -> 735;
748 -> 745;
749 -> 736;
749 -> 745;
750 -> 737;
750 -> 745;
751 -> 738;
751 -> 745;
752 -> 740;
752 -> 745;
753 -> 741;
753 -> 745;
754 -> 742;
754 -> 745;
755 -> 743;
755 -> 745;
756 -> 744;
756 -> 745;
757 -> 721;
757 -> 745;
758 -> 746;
758 -> 745;
759 -> 757;
759 -> 9;
759 -> 745;
760 -> 747;
760 -> 745;
761 -> 745;
762 -> 745;
763 -> 758;
763 -> 762;
764 -> 759;
764 -> 762;
765 -> 760;
765 -> 762;
766 -> 761;
766 -> 762;
767 -> 766;
767 -> 762;
768 -> 766;
768 -> 762;
769 -> 766;
769 -> 762;
770 -> 766;
770 -> 762;
771 -> 766;
771 -> 762;
772 -> 766;
772 -> 762;
773 -> 763;
773 -> 766;
773 -> 762;
774 -> 765;
774 -> 766;
774 -> 762;
775 -> 764;
775 -> 766;
775 -> 762;
776 -> 750;
776 -> 745;
777 -> 751;
777 -> 745;
778 -> 752;
778 -> 745;
779 -> 748;
779 -> 745;
780 -> 755;
780 -> 745;
781 -> 756;
781 -> 745;
782 -> 749;
782 -> 745;
783 -> 745;
784 -> 776;
784 -> 783;
785 -> 777;
785 -> 783;
786 -> 778;
786 -> 783;
787 -> 779;
787 -> 783;
788 -> 780;
788 -> 783;
789 -> 781;
789 -> 783;
790 -> 782;
790 -> 783;
791 -> 761;
791 -> 783;
792 -> 0;
793 -> 792;
794 -> 793;
795 -> 791;
795 -> 774;
795 -> 783;
796 -> 783;
797 -> 795;
797 -> 796;
798 -> 797;
798 -> 796;
799 -> 794;
799 -> 793;
799 -> 798;
799 -> 796;
800 -> 799;
800 -> 783;
801 -> 787;
801 -> 783;
802 -> 788;
802 -> 783;
803 -> 783;
804 -> 800;
804 -> 803;
805 -> 801;
805 -> 803;
806 -> 802;
806 -> 803;
807 -> 791;
807 -> 803;
809 -> 807;
809 -> 773;
809 -> 803;
810 -> 805;
810 -> 803;
811 -> 806;
811 -> 803;
812 -> 803;
813 -> 809;
813 -> 810;
813 -> 811;
813 -> 812;
813 -> 804;
813 -> 728;
813 -> 799;
813 -> 803;
814 -> 813;
814 -> 812;
815 -> 813;
815 -> 812;
816 -> 813;
816 -> 812;
817 -> 813;
817 -> 812;
818 -> 813;
818 -> 812;
819 -> 813;
819 -> 812;
820 -> 814;
820 -> 812;
821 -> 812;
822 -> 820;
822 -> 821;
823 -> 821;
824 -> 822;
824 -> 821;
825 -> 821;
826 -> 824;
826 -> 825;
827 -> 825;
828 -> 826;
828 -> 813;
828 -> 825;
829 -> 825;
830 -> 828;
830 -> 829;
831 -> 825;
832 -> 830;
832 -> 831;
832 -> 825;
833 -> 826;
833 -> 830;
833 -> 825;
834 -> 825;
835 -> 833;
835 -> 834;
836 -> 834;
837 -> 835;
837 -> 836;
838 -> 837;
838 -> 833;
838 -> 836;
839 -> 837;
839 -> 838;
840 -> 838;
841 -> 839;
841 -> 840;
842 -> 840;
843 -> 841;
843 -> 842;
844 -> 842;
845 -> 843;
845 -> 839;
845 -> 844;
846 -> 845;
846 -> 842;
847 -> 846;
847 -> 840;
848 -> 839;
848 -> 840;
849 -> 840;
850 -> 837;
850 -> 847;
850 -> 838;
851 -> 837;
851 -> 847;
851 -> 836;
852 -> 851;
852 -> 834;
853 -> 827;
853 -> 825;
854 -> 853;
854 -> 821;
855 -> 821;
856 -> 854;
856 -> 855;
856 -> 821;
857 -> 823;
857 -> 821;
858 -> 857;
858 -> 812;
859 -> 0;
859 -> 812;
860 -> 858;
860 -> 812;
861 -> 812;
862 -> 814;
862 -> 861;
862 -> 812;
863 -> 858;
863 -> 812;
864 -> 861;
864 -> 863;
864 -> 862;
864 -> 823;
864 -> 852;
864 -> 812;
865 -> 864;
866 -> 859;
866 -> 864;
867 -> 816;
867 -> 864;
868 -> 817;
868 -> 864;
869 -> 864;
870 -> 865;
870 -> 869;
871 -> 866;
871 -> 869;
872 -> 867;
872 -> 869;
873 -> 868;
873 -> 869;
874 -> 870;
874 -> 852;
874 -> 823;
874 -> 861;
874 -> 862;
874 -> 864;
874 -> 869;
875 -> 874;
876 -> 874;
877 -> 876;
877 -> 852;
877 -> 864;
877 -> 861;
877 -> 862;
877 -> 823;
877 -> 874;
878 -> 876;
878 -> 877;
878 -> 0;
878 -> 874;
879 -> 878;
879 -> 874;
880 -> 877;
880 -> 879;
881 -> 880;
881 -> 879;
882 -> 874;
883 -> 881;
883 -> 882;
883 -> 880;
883 -> 874;
884 -> 871;
884 -> 883;
884 -> 859;
884 -> 0;
884 -> 874;
885 -> 877;
885 -> 874;
886 -> 874;
887 -> 885;
887 -> 886;
888 -> 887;
888 -> 883;
888 -> 0;
888 -> 886;
889 -> 888;
889 -> 886;
890 -> 889;
891 -> 889;
892 -> 878;
892 -> 889;
893 -> 892;
894 -> 881;
894 -> 893;
894 -> 890;
894 -> 892;
895 -> 871;
895 -> 894;
895 -> 884;
895 -> 892;
896 -> 881;
896 -> 892;
897 -> 0;
897 -> 892;
898 -> 890;
898 -> 892;
899 -> 892;
900 -> 896;
900 -> 897;
900 -> 898;
900 -> 899;
900 -> 894;
900 -> 890;
900 -> 892;
901 -> 900;
901 -> 889;
902 -> 872;
902 -> 900;
902 -> 901;
902 -> 889;
903 -> 889;
904 -> 902;
905 -> 871;
905 -> 902;
905 -> 895;
906 -> 902;
907 -> 902;
908 -> 869;
909 -> 814;
909 -> 812;
910 -> 815;
910 -> 812;
911 -> 817;
911 -> 812;
912 -> 818;
912 -> 812;
913 -> 819;
913 -> 812;
914 -> 812;
915 -> 909;
915 -> 914;
916 -> 910;
916 -> 914;
917 -> 911;
917 -> 914;
918 -> 912;
918 -> 914;
919 -> 913;
919 -> 914;
920 -> 914;
921 -> 919;
921 -> 920;
921 -> 914;
922 -> 0;
922 -> 921;
923 -> 914;
924 -> 914;
925 -> 914;
926 -> 922;
926 -> 0;
926 -> 914;
927 -> 926;
927 -> 914;
928 -> 915;
928 -> 902;
928 -> 914;
929 -> 914;
930 -> 928;
930 -> 929;
931 -> 929;
932 -> 930;
932 -> 931;
933 -> 931;
934 -> 933;
935 -> 932;
935 -> 929;
936 -> 914;
937 -> 914;
938 -> 923;
938 -> 914;
939 -> 914;
940 -> 927;
940 -> 914;
941 -> 916;
941 -> 914;
942 -> 922;
942 -> 914;
943 -> 935;
943 -> 914;
944 -> 918;
944 -> 914;
945 -> 938;
945 -> 939;
945 -> 940;
945 -> 941;
945 -> 942;
945 -> 943;
945 -> 944;
945 -> 915;
945 -> 923;
945 -> 935;
945 -> 922;
945 -> 0;
945 -> 914;
946 -> 945;
946 -> 939;
947 -> 946;
947 -> 945;
947 -> 939;
948 -> 945;
948 -> 939;
949 -> 945;
949 -> 939;
950 -> 945;
950 -> 939;
951 -> 945;
951 -> 939;
952 -> 945;
952 -> 939;
953 -> 945;
953 -> 939;
954 -> 945;
954 -> 939;
955 -> 945;
955 -> 939;
956 -> 945;
956 -> 939;
957 -> 956;
957 -> 947;
957 -> 939;
958 -> 948;
958 -> 939;
959 -> 954;
959 -> 939;
960 -> 939;
961 -> 958;
961 -> 960;
962 -> 959;
962 -> 960;
963 -> 956;
963 -> 960;
964 -> 961;
964 -> 960;
965 -> 960;
966 -> 964;
966 -> 965;
967 -> 963;
967 -> 965;
968 -> 965;
969 -> 967;
969 -> 968;
970 -> 968;
971 -> 969;
971 -> 970;
972 -> 970;
973 -> 971;
973 -> 972;
974 -> 973;
974 -> 947;
974 -> 972;
975 -> 973;
975 -> 947;
975 -> 972;
976 -> 975;
976 -> 970;
977 -> 971;
977 -> 947;
977 -> 970;
978 -> 971;
978 -> 977;
978 -> 970;
979 -> 978;
979 -> 968;
980 -> 979;
980 -> 965;
981 -> 980;
981 -> 965;
982 -> 980;
982 -> 977;
982 -> 981;
983 -> 982;
983 -> 960;
984 -> 960;
985 -> 983;
985 -> 984;
985 -> 960;
986 -> 983;
986 -> 985;
987 -> 986;
987 -> 939;
988 -> 939;
989 -> 987;
989 -> 988;
989 -> 939;
990 -> 948;
990 -> 939;
991 -> 987;
991 -> 939;
992 -> 939;
993 -> 990;
993 -> 991;
993 -> 992;
993 -> 956;
993 -> 977;
993 -> 939;
994 -> 993;
994 -> 992;
995 -> 992;
996 -> 994;
996 -> 995;
997 -> 995;
998 -> 996;
998 -> 997;
999 -> 998;
999 -> 995;
1000 -> 996;
1000 -> 992;
1001 -> 992;
1002 -> 1000;
1002 -> 1001;
1003 -> 1000;
1003 -> 1001;
1004 -> 1001;
1005 -> 1003;
1005 -> 1004;
1006 -> 1004;
1007 -> 1006;
1008 -> 1005;
1008 -> 1001;
1009 -> 1003;
1009 -> 1001;
1010 -> 1001;
1011 -> 1010;
1012 -> 1011;
1013 -> 993;
1013 -> 992;
1014 -> 992;
1015 -> 1013;
1015 -> 1014;
1016 -> 1014;
1017 -> 1015;
1017 -> 1016;
1018 -> 1017;
1018 -> 1008;
1018 -> 1016;
1019 -> 1017;
1019 -> 1008;
1019 -> 1016;
1020 -> 1019;
1020 -> 1014;
1021 -> 1015;
1021 -> 1008;
1021 -> 1014;
1022 -> 1021;
1022 -> 992;
1023 -> 992;
1024 -> 1022;
1024 -> 1023;
1025 -> 993;
1025 -> 992;
1026 -> 992;
1027 -> 993;
1027 -> 1026;
1027 -> 1024;
1027 -> 939;
1028 -> 939;
1029 -> 952;
1029 -> 1028;
1029 -> 939;
1030 -> 1029;
1031 -> 939;
1032 -> 956;
1032 -> 1027;
1032 -> 939;
1033 -> 956;
1033 -> 1027;
1033 -> 1032;
1034 -> 1033;
1034 -> 1032;
1035 -> 956;
1035 -> 1027;
1035 -> 1034;
1036 -> 1032;
1037 -> 1036;
1038 -> 1037;
1038 -> 1036;
1039 -> 1036;
1039 -> 1027;
1039 -> 1035;
1040 -> 1039;
1040 -> 1032;
1041 -> 948;
1041 -> 1032;
1042 -> 1035;
1042 -> 1032;
1043 -> 1027;
1043 -> 1032;
1044 -> 1030;
1044 -> 1032;
1045 -> 1032;
1046 -> 1032;
1047 -> 1040;
1047 -> 1046;
1048 -> 1041;
1048 -> 1046;
1049 -> 1042;
1049 -> 1046;
1050 -> 1043;
1050 -> 1046;
1051 -> 1044;
1051 -> 1046;
1052 -> 1045;
1052 -> 1046;
1053 -> 1047;
1053 -> 1046;
1054 -> 1048;
1054 -> 1046;
1055 -> 1049;
1055 -> 1046;
1056 -> 1050;
1056 -> 1046;
1057 -> 1051;
1057 -> 1046;
1058 -> 0;
1058 -> 1046;
1059 -> 1046;
1060 -> 1053;
1060 -> 1059;
1061 -> 1054;
1061 -> 1059;
1062 -> 1055;
1062 -> 1059;
1063 -> 1056;
1063 -> 1059;
1064 -> 1057;
1064 -> 1059;
1065 -> 1058;
1065 -> 1059;
1066 -> 1052;
1066 -> 1059;
1067 -> 1059;
1068 -> 1060;
1068 -> 1039;
1068 -> 1067;
1068 -> 1059;
1069 -> 1061;
1069 -> 1059;
1070 -> 1062;
1070 -> 1059;
1071 -> 1063;
1071 -> 1059;
1072 -> 1064;
1072 -> 1059;
1073 -> 1059;
1074 -> 1068;
1074 -> 1073;
1075 -> 1069;
1075 -> 1073;
1076 -> 1070;
1076 -> 1073;
1077 -> 1071;
1077 -> 1073;
1078 -> 1072;
1078 -> 1073;
1079 -> 1066;
1079 -> 1073;
1080 -> 1074;
1080 -> 1068;
1080 -> 1073;
1081 -> 1074;
1081 -> 1073;
1082 -> 1077;
1082 -> 1073;
1083 -> 1078;
1083 -> 1073;
1084 -> 1076;
1084 -> 1073;
1085 -> 1075;
1085 -> 1073;
1086 -> 1073;
1087 -> 1086;
1088 -> 1073;
1089 -> 1088;
1089 -> 1080;
1089 -> 1081;
1089 -> 1082;
1089 -> 1083;
1089 -> 1084;
1089 -> 1085;
1089 -> 1086;
1089 -> 1068;
1089 -> 1030;
1089 -> 1087;
1089 -> 1073;
1090 -> 1089;
1090 -> 1088;
1091 -> 1088;
1092 -> 1089;
1092 -> 1091;
1092 -> 1073;
1093 -> 1073;
1094 -> 1093;
1094 -> 1088;
1094 -> 1073;
1095 -> 0;
1095 -> 1073;
1096 -> 1095;
1096 -> 0;
1096 -> 1073;
1097 -> 1096;
1097 -> 1088;
1097 -> 1073;
1098 -> 1073;
1099 -> 1098;
1099 -> 1088;
1099 -> 1073;
1100 -> 1088;
1100 -> 1073;
1101 -> 1088;
1101 -> 1073;
1102 -> 1088;
1102 -> 1073;
1103 -> 1088;
1103 -> 1073;
1104 -> 1088;
1104 -> 1073;
1105 -> 1074;
1105 -> 1092;
1105 -> 1073;
1106 -> 1105;
1106 -> 0;
1106 -> 1073;
1107 -> 1106;
1107 -> 1073;
1108 -> 1107;
1108 -> 1088;
1108 -> 1073;
1109 -> 1088;
1109 -> 1092;
1109 -> 1094;
1109 -> 1073;
1110 -> 1074;
1110 -> 1073;
1111 -> 1088;
1111 -> 1073;
1112 -> 1109;
1112 -> 1110;
1112 -> 1111;
1112 -> 1092;
1112 -> 1094;
1112 -> 1097;
1112 -> 1099;
1112 -> 1100;
1112 -> 1101;
1112 -> 1108;
1112 -> 1102;
1112 -> 1103;
1112 -> 1104;
1112 -> 1093;
1112 -> 1096;
1112 -> 1098;
1112 -> 1073;
1113 -> 1074;
1113 -> 1112;
1113 -> 1073;
1114 -> 1066;
1114 -> 1059;
1115 -> 1066;
1115 -> 1059;
1116 -> 1066;
1116 -> 1059;
1117 -> 1066;
1117 -> 1059;
1118 -> 1066;
1118 -> 1059;
1119 -> 1066;
1119 -> 1059;
1120 -> 1066;
1120 -> 1059;
1121 -> 1066;
1121 -> 1059;
1122 -> 1066;
1122 -> 1059;
1123 -> 1066;
1123 -> 1059;
1124 -> 1060;
1124 -> 1059;
1125 -> 1060;
1125 -> 1066;
1125 -> 1059;
1126 -> 1065;
1126 -> 1059;
1127 -> 1126;
1127 -> 1066;
1127 -> 1059;
1128 -> 1059;
1129 -> 1061;
1129 -> 1112;
1129 -> 1128;
1129 -> 1059;
1130 -> 1129;
1130 -> 1059;
1131 -> 1060;
1131 -> 1112;
1131 -> 1130;
1132 -> 1060;
1132 -> 1112;
1132 -> 1131;
1132 -> 1066;
1132 -> 1059;
1133 -> 1066;
1133 -> 1112;
1133 -> 1059;
1134 -> 1060;
1134 -> 1059;
1135 -> 1066;
1135 -> 1059;
1136 -> 1133;
1136 -> 1134;
1136 -> 1135;
1136 -> 1112;
1136 -> 1114;
1136 -> 1125;
1136 -> 1115;
1136 -> 1116;
1136 -> 1117;
1136 -> 1118;
1136 -> 1119;
1136 -> 1120;
1136 -> 1121;
1136 -> 1122;
1136 -> 1123;
1136 -> 1132;
1136 -> 1127;
1136 -> 1131;
1136 -> 1126;
1136 -> 1059;
1137 -> 939;
1138 -> 949;
1138 -> 1137;
1138 -> 939;
1139 -> 950;
1139 -> 1045;
1139 -> 939;
1140 -> 939;
1141 -> 951;
1141 -> 1140;
1141 -> 939;
1142 -> 951;
1142 -> 1045;
1142 -> 1141;
1143 -> 939;
1144 -> 953;
1144 -> 1143;
1144 -> 939;
1145 -> 953;
1145 -> 1136;
1145 -> 1144;
1146 -> 1045;
1146 -> 1145;
1146 -> 1136;
1146 -> 1139;
1146 -> 1142;
1146 -> 1144;
1147 -> 1045;
1147 -> 953;
1147 -> 1144;
1148 -> 1045;
1148 -> 939;
1149 -> 945;
1149 -> 1148;
1149 -> 1146;
1149 -> 1147;
1149 -> 914;
1150 -> 945;
1150 -> 939;
1151 -> 945;
1151 -> 939;
1152 -> 945;
1152 -> 939;
1153 -> 945;
1153 -> 939;
1154 -> 945;
1154 -> 939;
1155 -> 945;
1155 -> 939;
1156 -> 945;
1156 -> 939;
1157 -> 945;
1157 -> 939;
1158 -> 939;
1159 -> 1152;
1159 -> 939;
1160 -> 1154;
1160 -> 939;
1161 -> 0;
1161 -> 939;
1162 -> 939;
1163 -> 1156;
1163 -> 939;
1164 -> 939;
1165 -> 1161;
1165 -> 1164;
1166 -> 1162;
1166 -> 1164;
1167 -> 1163;
1167 -> 1164;
1168 -> 1157;
1168 -> 1164;
1169 -> 1164;
1170 -> 1165;
1170 -> 1164;
1171 -> 1166;
1171 -> 1164;
1172 -> 1169;
1172 -> 1164;
1173 -> 1167;
1173 -> 1164;
1174 -> 1164;
1175 -> 1170;
1175 -> 1174;
1176 -> 1171;
1176 -> 1174;
1177 -> 1172;
1177 -> 1174;
1178 -> 1173;
1178 -> 1174;
1179 -> 1168;
1179 -> 1174;
1180 -> 1174;
1181 -> 1175;
1181 -> 0;
1181 -> 1174;
1182 -> 1181;
1182 -> 1176;
1182 -> 1174;
1183 -> 1182;
1184 -> 1179;
1184 -> 1183;
1185 -> 1183;
1186 -> 1184;
1186 -> 1149;
1186 -> 1185;
1187 -> 1185;
1188 -> 1186;
1188 -> 1182;
1189 -> 1182;
1190 -> 1179;
1190 -> 1189;
1191 -> 1190;
1191 -> 1149;
1191 -> 1189;
1192 -> 1191;
1192 -> 1182;
1193 -> 1192;
1194 -> 1188;
1194 -> 1149;
1194 -> 1192;
1195 -> 1178;
1195 -> 1192;
1196 -> 1193;
1196 -> 1194;
1196 -> 1195;
1196 -> 1149;
1196 -> 1192;
1197 -> 1196;
1197 -> 1193;
1198 -> 1196;
1198 -> 1193;
1199 -> 1196;
1199 -> 1193;
1200 -> 1196;
1200 -> 1193;
1201 -> 1193;
1202 -> 1201;
1202 -> 1193;
1203 -> 1193;
1204 -> 1198;
1204 -> 1203;
1205 -> 1204;
1205 -> 1193;
1206 -> 1199;
1206 -> 1193;
1207 -> 1201;
1207 -> 1193;
1208 -> 1205;
1208 -> 1196;
1208 -> 1206;
1208 -> 1207;
1208 -> 1202;
1208 -> 1193;
1209 -> 1182;
1210 -> 1188;
1210 -> 1182;
1211 -> 1178;
1211 -> 1149;
1211 -> 1208;
1211 -> 1210;
1212 -> 1210;
1212 -> 1149;
1212 -> 1211;
1213 -> 1175;
1213 -> 0;
1213 -> 1174;
1214 -> 1180;
1214 -> 1213;
1215 -> 1214;
1215 -> 1179;
1215 -> 1180;
1215 -> 1211;
1215 -> 1213;
1216 -> 1213;
1217 -> 1213;
1218 -> 1179;
1218 -> 1217;
1219 -> 1218;
1219 -> 1215;
1219 -> 1217;
1220 -> 1219;
1220 -> 1213;
1221 -> 1213;
1222 -> 1179;
1222 -> 1221;
1223 -> 1222;
1223 -> 1220;
1223 -> 1221;
1224 -> 1223;
1224 -> 1213;
1225 -> 1178;
1225 -> 1220;
1225 -> 1213;
1226 -> 1213;
1227 -> 1179;
1227 -> 1226;
1228 -> 1227;
1228 -> 1225;
1228 -> 1226;
1229 -> 1227;
1229 -> 1225;
1229 -> 1226;
1230 -> 1229;
1230 -> 1213;
1231 -> 1178;
1231 -> 1230;
1231 -> 1213;
1232 -> 1178;
1232 -> 1213;
1233 -> 1213;
1234 -> 1213;
1235 -> 1233;
1235 -> 1234;
1236 -> 1233;
1236 -> 1234;
1237 -> 1233;
1237 -> 1234;
1238 -> 1232;
1238 -> 1234;
1239 -> 1179;
1239 -> 1234;
1240 -> 1234;
1241 -> 1239;
1241 -> 1240;
1242 -> 1241;
1242 -> 1231;
1242 -> 1240;
1243 -> 1240;
1244 -> 1242;
1244 -> 1243;
1245 -> 1244;
1245 -> 1243;
1246 -> 1245;
1246 -> 1242;
1246 -> 1243;
1247 -> 1243;
1248 -> 1246;
1248 -> 1247;
1249 -> 1248;
1249 -> 1246;
1249 -> 1247;
1250 -> 1249;
1250 -> 1247;
1251 -> 1250;
1251 -> 1234;
1252 -> 1238;
1252 -> 1234;
1253 -> 1251;
1253 -> 1252;
1253 -> 1250;
1253 -> 1231;
1253 -> 1234;
1254 -> 1234;
1255 -> 1234;
1256 -> 1235;
1256 -> 1255;
1256 -> 1234;
1257 -> 1234;
1258 -> 1239;
1258 -> 1257;
1259 -> 1257;
1260 -> 1258;
1260 -> 1259;
1261 -> 1259;
1262 -> 1260;
1262 -> 1261;
1263 -> 1262;
1263 -> 1253;
1263 -> 1261;
1264 -> 1262;
1264 -> 1253;
1264 -> 1261;
1265 -> 1264;
1265 -> 1259;
1266 -> 1260;
1266 -> 1253;
1266 -> 1259;
1267 -> 1266;
1267 -> 1234;
1268 -> 1254;
1268 -> 1234;
1269 -> 1238;
1269 -> 1234;
1270 -> 1268;
1270 -> 1269;
1270 -> 1267;
1270 -> 1231;
1270 -> 1266;
1270 -> 1234;
1271 -> 1234;
1272 -> 1271;
1273 -> 1272;
1274 -> 1270;
1274 -> 1273;
1275 -> 1274;
1275 -> 1272;
1276 -> 1271;
1277 -> 1276;
1278 -> 1277;
1279 -> 1271;
1280 -> 1279;
1281 -> 1280;
1282 -> 1270;
1282 -> 1271;
1283 -> 1282;
1283 -> 1270;
1283 -> 1271;
1284 -> 1271;
1285 -> 1282;
1285 -> 1270;
1285 -> 1284;
1285 -> 1271;
1286 -> 1285;
1287 -> 1282;
1287 -> 1270;
1287 -> 1285;
1288 -> 1286;
1288 -> 1285;
1289 -> 1285;
1290 -> 1282;
1290 -> 1288;
1290 -> 1271;
1291 -> 1270;
1291 -> 1271;
1292 -> 1270;
1292 -> 1271;
1293 -> 1292;
1293 -> 1290;
1293 -> 1271;
1294 -> 1270;
1294 -> 1271;
1295 -> 1270;
1295 -> 1271;
1296 -> 1271;
1297 -> 1295;
1297 -> 1296;
1298 -> 1297;
1298 -> 1290;
1298 -> 1296;
1299 -> 1297;
1299 -> 1290;
1299 -> 1296;
1300 -> 1299;
1300 -> 1271;
1301 -> 1271;
1302 -> 1301;
1302 -> 1300;
1302 -> 1290;
1302 -> 1271;
1303 -> 1301;
1303 -> 1302;
1304 -> 1300;
1304 -> 1303;
1304 -> 1301;
1305 -> 1294;
1305 -> 1304;
1305 -> 1303;
1306 -> 1270;
1306 -> 1271;
1307 -> 1306;
1307 -> 1305;
1307 -> 1271;
1308 -> 1274;
1308 -> 1307;
1308 -> 1273;
1309 -> 1274;
1309 -> 1307;
1309 -> 1273;
1310 -> 1309;
1310 -> 1272;
1311 -> 1270;
1311 -> 1271;
1312 -> 1270;
1312 -> 1271;
1313 -> 1311;
1313 -> 0;
1313 -> 1271;
1314 -> 1271;
1315 -> 1311;
1315 -> 1271;
1316 -> 1312;
1316 -> 1315;
1316 -> 1307;
1316 -> 1271;
1317 -> 1316;
1318 -> 1317;
1319 -> 1318;
1319 -> 1317;
1320 -> 1317;
1320 -> 1316;
1321 -> 1311;
1321 -> 1316;
1322 -> 1320;
1322 -> 1311;
1322 -> 1271;
1323 -> 1320;
1323 -> 1271;
1324 -> 1270;
1324 -> 1271;
1325 -> 1270;
1325 -> 1271;
1326 -> 1324;
1326 -> 1323;
1326 -> 1271;
1327 -> 1271;
1328 -> 1271;
1329 -> 1326;
1329 -> 1328;
1330 -> 1327;
1330 -> 1328;
1331 -> 1325;
1331 -> 1328;
1332 -> 1330;
1332 -> 1328;
1333 -> 1329;
1333 -> 1328;
1334 -> 1328;
1335 -> 1331;
1335 -> 1323;
1335 -> 1328;
1336 -> 1328;
1337 -> 1333;
1337 -> 1336;
1338 -> 1334;
1338 -> 1336;
1339 -> 1335;
1339 -> 1336;
1340 -> 1331;
1340 -> 1336;
1341 -> 1339;
1341 -> 1336;
1342 -> 1338;
1342 -> 1336;
1343 -> 1340;
1343 -> 1323;
1343 -> 1342;
1344 -> 1340;
1344 -> 1323;
1344 -> 1343;
1344 -> 1336;
1345 -> 1341;
1345 -> 1344;
1345 -> 1323;
1345 -> 1343;
1345 -> 1336;
1346 -> 1337;
1346 -> 1336;
1347 -> 1336;
1348 -> 1346;
1348 -> 1347;
1349 -> 1340;
1349 -> 1347;
1350 -> 1348;
1350 -> 1347;
1351 -> 1347;
1352 -> 1350;
1352 -> 1351;
1353 -> 1349;
1353 -> 1351;
1354 -> 1351;
1355 -> 1352;
1355 -> 1354;
1355 -> 1351;
1356 -> 1351;
1357 -> 1353;
1357 -> 1345;
1357 -> 1356;
1358 -> 1356;
1359 -> 1357;
1359 -> 1351;
1360 -> 1352;
1360 -> 1351;
1361 -> 1359;
1361 -> 1345;
1361 -> 1360;
1361 -> 1351;
1362 -> 1347;
1363 -> 1349;
1363 -> 1361;
1363 -> 1362;
1364 -> 1362;
1365 -> 1363;
1365 -> 1347;
1366 -> 1345;
1366 -> 1336;
1367 -> 1336;
1368 -> 1366;
1368 -> 1367;
1368 -> 1336;
1369 -> 1368;
1370 -> 1369;
1370 -> 1365;
1371 -> 1370;
1371 -> 1368;
1372 -> 1345;
1372 -> 1368;
1373 -> 1371;
1373 -> 1368;
1374 -> 1368;
1375 -> 1336;
1376 -> 1373;
1376 -> 1365;
1376 -> 1336;
1377 -> 1336;
1378 -> 1376;
1378 -> 1377;
1378 -> 1336;
1379 -> 1337;
1379 -> 1336;
1380 -> 1338;
1380 -> 1336;
1381 -> 1373;
1381 -> 1365;
1381 -> 1336;
1382 -> 1336;
1383 -> 1379;
1383 -> 1382;
1384 -> 1380;
1384 -> 1382;
1385 -> 1381;
1385 -> 1382;
1386 -> 1340;
1386 -> 1382;
1387 -> 1386;
1387 -> 1382;
1388 -> 1383;
1388 -> 1382;
1389 -> 1384;
1389 -> 1382;
1390 -> 1387;
1390 -> 1388;
1390 -> 1389;
1390 -> 1373;
1390 -> 1382;
1391 -> 1382;
1392 -> 1390;
1392 -> 1382;
1393 -> 1382;
1394 -> 1393;
1395 -> 1385;
1395 -> 1393;
1396 -> 1393;
1397 -> 1395;
1397 -> 1396;
1397 -> 1393;
1398 -> 1385;
1398 -> 1393;
1399 -> 1392;
1399 -> 1393;
1400 -> 1395;
1400 -> 1393;
1401 -> 1398;
1401 -> 1399;
1401 -> 1400;
1401 -> 1392;
1401 -> 1393;
1402 -> 1390;
1402 -> 1401;
1403 -> 1324;
1403 -> 1271;
1404 -> 1402;
1404 -> 1327;
1405 -> 1404;
1405 -> 1402;
1405 -> 1327;
1406 -> 1405;
1407 -> 1406;
1407 -> 1405;
1408 -> 1405;
1409 -> 1407;
1409 -> 1408;
1410 -> 1404;
1410 -> 1408;
1411 -> 1408;
1412 -> 1410;
1412 -> 1411;
1413 -> 1411;
1414 -> 1412;
1414 -> 1413;
1415 -> 1414;
1415 -> 1411;
1416 -> 1412;
1416 -> 1408;
1417 -> 1409;
1417 -> 1416;
1417 -> 1406;
1417 -> 1412;
1417 -> 1408;
1418 -> 1408;
1419 -> 1410;
1419 -> 1418;
1420 -> 1419;
1420 -> 1417;
1420 -> 1418;
1421 -> 1419;
1421 -> 1417;
1421 -> 1418;
1422 -> 1421;
1422 -> 1408;
1423 -> 1408;
1424 -> 1423;
1424 -> 1422;
1424 -> 1417;
1424 -> 1408;
1425 -> 1423;
1425 -> 1424;
1426 -> 1422;
1426 -> 1425;
1426 -> 1423;
1427 -> 1405;
1428 -> 1404;
1428 -> 1405;
1429 -> 1428;
1429 -> 1426;
1429 -> 1405;
1430 -> 1405;
1431 -> 1406;
1431 -> 1429;
1431 -> 1405;
1432 -> 1404;
1432 -> 1431;
1432 -> 1405;
1433 -> 1429;
1433 -> 1405;
1434 -> 1405;
1435 -> 1404;
1435 -> 1432;
1435 -> 1327;
1436 -> 1402;
1436 -> 1327;
1437 -> 1327;
1438 -> 1436;
1438 -> 1437;
1439 -> 1437;
1440 -> 1439;
1441 -> 1438;
1441 -> 1440;
1442 -> 1441;
1442 -> 1435;
1442 -> 1440;
1443 -> 1441;
1443 -> 1435;
1443 -> 1440;
1444 -> 1443;
1444 -> 1439;
1445 -> 1438;
1445 -> 1435;
1445 -> 1439;
1446 -> 1445;
1446 -> 1327;
1447 -> 1327;
1448 -> 1270;
1448 -> 1271;
1449 -> 1270;
1449 -> 1271;
1450 -> 1448;
1450 -> 1446;
1450 -> 1271;
1451 -> 1271;
1452 -> 1450;
1452 -> 1451;
1453 -> 1450;
1453 -> 1451;
1454 -> 1449;
1454 -> 1451;
1455 -> 1451;
1456 -> 1454;
1456 -> 1455;
1457 -> 1455;
1458 -> 1456;
1458 -> 1457;
1458 -> 1446;
1458 -> 1455;
1459 -> 1458;
1459 -> 1455;
1460 -> 1459;
1460 -> 1451;
1461 -> 1453;
1461 -> 1451;
1462 -> 1452;
1462 -> 1461;
1462 -> 1458;
1462 -> 1446;
1462 -> 1451;
1463 -> 1451;
1464 -> 1454;
1464 -> 1463;
1465 -> 1464;
1465 -> 1462;
1465 -> 1463;
1466 -> 1451;
1467 -> 1465;
1467 -> 1460;
1467 -> 1451;
1468 -> 1270;
1468 -> 1271;
1469 -> 1270;
1469 -> 1271;
1470 -> 1270;
1470 -> 1271;
1471 -> 1469;
1471 -> 1271;
1472 -> 1468;
1472 -> 1271;
1473 -> 1271;
1474 -> 1271;
1475 -> 1472;
1475 -> 1474;
1476 -> 1473;
1476 -> 1474;
1477 -> 1470;
1477 -> 1474;
1478 -> 1476;
1478 -> 1474;
1479 -> 1475;
1479 -> 1474;
1480 -> 1474;
1481 -> 1479;
1481 -> 1480;
1482 -> 1477;
1482 -> 1480;
1483 -> 1481;
1483 -> 1480;
1484 -> 1480;
1485 -> 1483;
1485 -> 1484;
1486 -> 1482;
1486 -> 1484;
1487 -> 1484;
1488 -> 1485;
1488 -> 1487;
1488 -> 1484;
1489 -> 1484;
1490 -> 1489;
1491 -> 1485;
1491 -> 1484;
1492 -> 1480;
1493 -> 1492;
1494 -> 1474;
1495 -> 1474;
1496 -> 1467;
1496 -> 1474;
1497 -> 1474;
1498 -> 1496;
1498 -> 1497;
1498 -> 1474;
1499 -> 1495;
1499 -> 1474;
1500 -> 1496;
1500 -> 1499;
1500 -> 1467;
1500 -> 1474;
1501 -> 1500;
1502 -> 1270;
1502 -> 1271;
1503 -> 1270;
1503 -> 1271;
1504 -> 1271;
1505 -> 1502;
1505 -> 1504;
1506 -> 1504;
1507 -> 1505;
1507 -> 1501;
1507 -> 1506;
1508 -> 1506;
1509 -> 1507;
1509 -> 1271;
1510 -> 1503;
1510 -> 1271;
1511 -> 1509;
1511 -> 1510;
1511 -> 1271;
1512 -> 1271;
1513 -> 1511;
1514 -> 1513;
1514 -> 1511;
1515 -> 1511;
1515 -> 1311;
1515 -> 1271;
1516 -> 1270;
1516 -> 1271;
1517 -> 1270;
1517 -> 1271;
1518 -> 1516;
1518 -> 1271;
1519 -> 1518;
1519 -> 1511;
1519 -> 1271;
1520 -> 1516;
1520 -> 1519;
1520 -> 1271;
1521 -> 1271;
1522 -> 1517;
1522 -> 1521;
1523 -> 1521;
1524 -> 1522;
1524 -> 1523;
1525 -> 1523;
1526 -> 1525;
1527 -> 1524;
1527 -> 1526;
1528 -> 1527;
1528 -> 1519;
1528 -> 1526;
1529 -> 1527;
1529 -> 1519;
1529 -> 1526;
1530 -> 1529;
1530 -> 1525;
1531 -> 1524;
1531 -> 1519;
1531 -> 1525;
1532 -> 1521;
1533 -> 1531;
1533 -> 1271;
1534 -> 1271;
1535 -> 1517;
1535 -> 1534;
1536 -> 1535;
1536 -> 1531;
1536 -> 1534;
1537 -> 1536;
1538 -> 1537;
1538 -> 1536;
1539 -> 1536;
1540 -> 1538;
1540 -> 1539;
1540 -> 1536;
1541 -> 1540;
1541 -> 1536;
1542 -> 1541;
1542 -> 1535;
1542 -> 1536;
1543 -> 1535;
1543 -> 1540;
1543 -> 1542;
1543 -> 1534;
1544 -> 1543;
1544 -> 1271;
1545 -> 1544;
1546 -> 1516;
1546 -> 1545;
1546 -> 1271;
1547 -> 1527;
1547 -> 1545;
1547 -> 1526;
1548 -> 1527;
1548 -> 1545;
1548 -> 1526;
1549 -> 1548;
1549 -> 1525;
1550 -> 1545;
1550 -> 1271;
1551 -> 1292;
1551 -> 1545;
1551 -> 1271;
1552 -> 1282;
1552 -> 1545;
1552 -> 1271;
1553 -> 1235;
1553 -> 1234;
1554 -> 1553;
1555 -> 1554;
1555 -> 1239;
1555 -> 1553;
1556 -> 1553;
1557 -> 1556;
1557 -> 1239;
1557 -> 1553;
1558 -> 1239;
1558 -> 1545;
1558 -> 1555;
1558 -> 1557;
1558 -> 1234;
1559 -> 1234;
1560 -> 1237;
1560 -> 1559;
1560 -> 1234;
1561 -> 1235;
1561 -> 1234;
1562 -> 1236;
1562 -> 1234;
1563 -> 1238;
1563 -> 1234;
1564 -> 1234;
1565 -> 1561;
1565 -> 1564;
1566 -> 1562;
1566 -> 1564;
1567 -> 1563;
1567 -> 1564;
1568 -> 1239;
1568 -> 1564;
1569 -> 1564;
1570 -> 1565;
1570 -> 1569;
1570 -> 1564;
1571 -> 1568;
1571 -> 1558;
1571 -> 1564;
1572 -> 1571;
1573 -> 1568;
1573 -> 1571;
1574 -> 1572;
1574 -> 1571;
1575 -> 1567;
1575 -> 1571;
1576 -> 1571;
1577 -> 1571;
1578 -> 1573;
1578 -> 1577;
1579 -> 1574;
1579 -> 1577;
1580 -> 1575;
1580 -> 1577;
1581 -> 1576;
1581 -> 1577;
1582 -> 1576;
1582 -> 1577;
1583 -> 1577;
1584 -> 1578;
1584 -> 1577;
1585 -> 1581;
1585 -> 1577;
1586 -> 1582;
1586 -> 1577;
1587 -> 1583;
1587 -> 1577;
1588 -> 1580;
1588 -> 1577;
1589 -> 1577;
1590 -> 1577;
1591 -> 1584;
1591 -> 1590;
1592 -> 1585;
1592 -> 1590;
1593 -> 1586;
1593 -> 1590;
1594 -> 1587;
1594 -> 1590;
1595 -> 1588;
1595 -> 1590;
1596 -> 1589;
1596 -> 1590;
1597 -> 1590;
1598 -> 1597;
1598 -> 1590;
1599 -> 1597;
1599 -> 1590;
1600 -> 1597;
1600 -> 1590;
1601 -> 1597;
1601 -> 1590;
1602 -> 1597;
1602 -> 1590;
1603 -> 1597;
1603 -> 1590;
1604 -> 1591;
1604 -> 1597;
1604 -> 1590;
1605 -> 1592;
1605 -> 1597;
1605 -> 1590;
1606 -> 1593;
1606 -> 1597;
1606 -> 1590;
1607 -> 1594;
1607 -> 1597;
1607 -> 1590;
1608 -> 1595;
1608 -> 1597;
1608 -> 1590;
1609 -> 0;
1609 -> 1590;
1610 -> 1609;
1610 -> 1597;
1610 -> 1590;
1611 -> 1590;
1612 -> 1597;
1612 -> 1611;
1613 -> 1611;
1614 -> 1612;
1614 -> 1597;
1614 -> 1599;
1614 -> 1605;
1614 -> 1613;
1614 -> 1611;
1615 -> 1611;
1616 -> 1612;
1616 -> 1597;
1616 -> 1598;
1616 -> 1604;
1616 -> 1615;
1617 -> 1616;
1617 -> 1597;
1617 -> 1609;
1617 -> 1615;
1618 -> 1614;
1618 -> 1617;
1618 -> 1597;
1618 -> 1609;
1618 -> 1611;
1619 -> 1618;
1619 -> 1590;
1620 -> 1619;
1621 -> 1620;
1621 -> 1597;
1621 -> 1619;
1622 -> 1577;
1623 -> 1578;
1623 -> 1622;
1624 -> 1622;
1625 -> 1623;
1625 -> 1624;
1626 -> 1625;
1626 -> 1609;
1626 -> 1624;
1627 -> 1625;
1627 -> 1609;
1627 -> 1624;
1628 -> 1627;
1628 -> 1622;
1629 -> 1623;
1629 -> 1609;
1629 -> 1622;
1630 -> 1629;
1630 -> 1577;
1631 -> 1630;
1631 -> 1589;
1631 -> 1629;
1631 -> 1597;
1631 -> 1598;
1631 -> 1604;
1631 -> 1599;
1631 -> 1605;
1631 -> 1600;
1631 -> 1606;
1631 -> 1601;
1631 -> 1607;
1631 -> 1602;
1631 -> 1610;
1631 -> 1603;
1631 -> 1621;
1631 -> 1608;
1631 -> 1576;
1631 -> 1583;
1631 -> 1231;
1631 -> 1620;
1631 -> 1577;
1632 -> 1577;
1633 -> 1631;
1633 -> 1632;
1634 -> 1631;
1634 -> 1632;
1635 -> 1634;
1635 -> 1631;
1635 -> 1632;
1636 -> 1633;
1636 -> 1632;
1637 -> 1633;
1637 -> 1632;
1638 -> 1632;
1639 -> 1637;
1639 -> 1638;
1640 -> 1634;
1640 -> 1638;
1641 -> 1639;
1641 -> 1635;
1641 -> 0;
1641 -> 1638;
1642 -> 1638;
1643 -> 1639;
1643 -> 1635;
1643 -> 0;
1643 -> 1638;
1644 -> 1639;
1644 -> 1635;
1644 -> 0;
1644 -> 1643;
1645 -> 1639;
1645 -> 1635;
1645 -> 0;
1645 -> 1638;
1646 -> 1639;
1646 -> 1635;
1646 -> 0;
1646 -> 1638;
1647 -> 1639;
1647 -> 1635;
1647 -> 0;
1647 -> 1638;
1648 -> 1639;
1648 -> 1635;
1648 -> 0;
1648 -> 1638;
1649 -> 1639;
1649 -> 1635;
1649 -> 0;
1649 -> 1638;
1650 -> 1638;
1651 -> 1639;
1651 -> 1638;
1652 -> 1650;
1652 -> 1638;
1653 -> 1640;
1653 -> 1635;
1653 -> 1651;
1653 -> 1652;
1653 -> 1638;
1654 -> 1638;
1655 -> 1639;
1655 -> 1638;
1656 -> 1654;
1656 -> 1638;
1657 -> 1638;
1658 -> 1655;
1658 -> 1657;
1659 -> 1656;
1659 -> 1657;
1660 -> 1640;
1660 -> 1657;
1661 -> 1657;
1662 -> 1658;
1662 -> 1653;
1662 -> 1657;
1663 -> 1657;
1664 -> 1663;
1664 -> 1638;
1665 -> 1664;
1665 -> 1638;
1666 -> 1639;
1666 -> 1662;
1666 -> 0;
1666 -> 1665;
1667 -> 0;
1667 -> 1666;
1668 -> 1639;
1668 -> 1662;
1668 -> 0;
1668 -> 1638;
1669 -> 1668;
1669 -> 1638;
1670 -> 1667;
1670 -> 1669;
1671 -> 1670;
1671 -> 0;
1671 -> 1632;
1672 -> 1670;
1672 -> 1632;
1673 -> 1632;
1674 -> 1672;
1674 -> 1673;
1675 -> 1674;
1675 -> 1673;
1676 -> 1675;
1677 -> 1632;
1678 -> 1677;
1678 -> 1633;
1678 -> 1670;
1678 -> 1632;
1679 -> 1633;
1679 -> 1670;
1679 -> 1677;
1679 -> 1678;
1680 -> 1678;
1681 -> 1679;
1681 -> 1678;
1682 -> 1680;
1682 -> 1678;
1683 -> 1678;
1684 -> 1681;
1684 -> 1683;
1685 -> 1682;
1685 -> 1683;
1686 -> 1634;
1686 -> 1683;
1687 -> 1683;
1688 -> 1683;
1688 -> 1678;
1689 -> 1678;
1690 -> 1689;
1690 -> 1678;
1691 -> 1687;
1691 -> 1690;
1692 -> 1678;
1693 -> 1691;
1693 -> 1692;
1693 -> 1678;
1694 -> 1693;
1694 -> 1688;
1694 -> 1678;
1695 -> 1688;
1695 -> 1678;
1696 -> 1676;
1696 -> 1695;
1697 -> 1676;
1697 -> 1632;
1698 -> 1632;
1699 -> 1633;
1699 -> 1684;
1699 -> 1698;
1699 -> 1632;
1700 -> 1699;
1700 -> 1632;
1701 -> 1632;
1702 -> 1700;
1702 -> 1701;
1703 -> 1634;
1703 -> 1701;
1704 -> 1702;
1704 -> 1699;
1704 -> 0;
1704 -> 1701;
1705 -> 1701;
1706 -> 1702;
1706 -> 1699;
1706 -> 0;
1706 -> 1701;
1707 -> 1702;
1707 -> 1699;
1707 -> 0;
1707 -> 1706;
1708 -> 1702;
1708 -> 1699;
1708 -> 0;
1708 -> 1701;
1709 -> 1702;
1709 -> 1699;
1709 -> 0;
1709 -> 1701;
1710 -> 1702;
1710 -> 1699;
1710 -> 0;
1710 -> 1701;
1711 -> 1702;
1711 -> 1699;
1711 -> 0;
1711 -> 1701;
1712 -> 1702;
1712 -> 1699;
1712 -> 0;
1712 -> 1701;
1713 -> 1701;
1714 -> 1713;
1714 -> 1701;
1715 -> 1701;
1716 -> 1715;
1716 -> 1701;
1717 -> 1701;
1718 -> 1716;
1718 -> 1717;
1719 -> 1703;
1719 -> 1717;
1720 -> 1717;
1721 -> 1717;
1722 -> 1721;
1722 -> 1701;
1723 -> 1722;
1723 -> 1701;
1724 -> 1702;
1725 -> 1702;
1726 -> 1724;
1726 -> 1725;
1727 -> 1703;
1727 -> 1725;
1728 -> 1726;
1728 -> 1702;
1728 -> 0;
1728 -> 1725;
1729 -> 1726;
1729 -> 1702;
1729 -> 1725;
1730 -> 1725;
1731 -> 1729;
1731 -> 1730;
1731 -> 1725;
1732 -> 1729;
1732 -> 1725;
1733 -> 1725;
1734 -> 1732;
1734 -> 1733;
1735 -> 1727;
1735 -> 1733;
1736 -> 1734;
1736 -> 1702;
1736 -> 0;
1736 -> 1733;
1737 -> 1733;
1738 -> 1734;
1738 -> 1702;
1738 -> 0;
1738 -> 1733;
1739 -> 1734;
1739 -> 1702;
1739 -> 0;
1739 -> 1738;
1740 -> 1734;
1740 -> 1702;
1740 -> 0;
1740 -> 1733;
1741 -> 1734;
1741 -> 1702;
1741 -> 0;
1741 -> 1733;
1742 -> 1734;
1742 -> 1702;
1742 -> 0;
1742 -> 1733;
1743 -> 1734;
1743 -> 1702;
1743 -> 0;
1743 -> 1733;
1744 -> 1734;
1744 -> 1702;
1744 -> 0;
1744 -> 1733;
1745 -> 1735;
1745 -> 1702;
1745 -> 1734;
1745 -> 1733;
1746 -> 1745;
1747 -> 1702;
1748 -> 1746;
1748 -> 1747;
1749 -> 1748;
1749 -> 1747;
1750 -> 1749;
1751 -> 1632;
1752 -> 1750;
1752 -> 1751;
1753 -> 1633;
1753 -> 1745;
1753 -> 1632;
1754 -> 1632;
1755 -> 1753;
1755 -> 1754;
1756 -> 1753;
1756 -> 1754;
1757 -> 1756;
1757 -> 1753;
1757 -> 1754;
1758 -> 1755;
1758 -> 1754;
1759 -> 1754;
1760 -> 1758;
1760 -> 1759;
1761 -> 1756;
1761 -> 1759;
1762 -> 1760;
1762 -> 1757;
1762 -> 0;
1762 -> 1759;
1763 -> 1762;
1764 -> 1755;
1764 -> 1754;
1765 -> 1754;
1766 -> 1764;
1766 -> 1765;
1767 -> 1756;
1767 -> 1765;
1768 -> 1766;
1768 -> 1757;
1768 -> 0;
1768 -> 1765;
1769 -> 1765;
1770 -> 1766;
1770 -> 1757;
1770 -> 0;
1770 -> 1765;
1771 -> 1766;
1771 -> 1757;
1771 -> 1770;
1772 -> 1770;
1773 -> 1771;
1773 -> 1772;
1774 -> 1773;
1774 -> 1757;
1774 -> 0;
1774 -> 1772;
1775 -> 1772;
1776 -> 1773;
1776 -> 1757;
1776 -> 0;
1777 -> 1773;
1777 -> 1757;
1777 -> 0;
1777 -> 1772;
1778 -> 1773;
1778 -> 1757;
1778 -> 0;
1778 -> 1772;
1779 -> 1773;
1779 -> 1757;
1779 -> 0;
1779 -> 1772;
1780 -> 1773;
1780 -> 1757;
1780 -> 0;
1780 -> 1772;
1781 -> 1773;
1781 -> 1757;
1781 -> 0;
1781 -> 1772;
1782 -> 1773;
1783 -> 1754;
1784 -> 1782;
1784 -> 1783;
1785 -> 1784;
1785 -> 1783;
1786 -> 1785;
1787 -> 1754;
1788 -> 1756;
1788 -> 1787;
1789 -> 1787;
1790 -> 1788;
1790 -> 1773;
1790 -> 1789;
1790 -> 1787;
1791 -> 1787;
1792 -> 1788;
1792 -> 1773;
1792 -> 1791;
1793 -> 1790;
1793 -> 1754;
1794 -> 1755;
1794 -> 1793;
1795 -> 1793;
1796 -> 1794;
1796 -> 1795;
1797 -> 1756;
1797 -> 1795;
1798 -> 1796;
1798 -> 1773;
1798 -> 1795;
1799 -> 1798;
1800 -> 1797;
1800 -> 1798;
1801 -> 1793;
1802 -> 1577;
1803 -> 1589;
1803 -> 1802;
1804 -> 1803;
1804 -> 1800;
1804 -> 1802;
1805 -> 1802;
1806 -> 1804;
1806 -> 1805;
1806 -> 1802;
1807 -> 1802;
1808 -> 1804;
1808 -> 1807;
1808 -> 1800;
1808 -> 1802;
1809 -> 1808;
1810 -> 1577;
1811 -> 1583;
1811 -> 1577;
1812 -> 1811;
1812 -> 1809;
1812 -> 1577;
1813 -> 1568;
1813 -> 1809;
1813 -> 1571;
1814 -> 1572;
1814 -> 1571;
1815 -> 1813;
1815 -> 1814;
1815 -> 1809;
1815 -> 1571;
1816 -> 1568;
1816 -> 1815;
1816 -> 1564;
1817 -> 1568;
1817 -> 1815;
1817 -> 1564;
1818 -> 1558;
1818 -> 1234;
1819 -> 1818;
1819 -> 1815;
1819 -> 1234;
1820 -> 1817;
1820 -> 1234;
1821 -> 1213;
1822 -> 1179;
1822 -> 1820;
1822 -> 1821;
1822 -> 1213;
1823 -> 1178;
1823 -> 1820;
1823 -> 1174;
1824 -> 1175;
1824 -> 0;
1824 -> 1174;
1825 -> 1177;
1825 -> 1174;
1826 -> 1180;
1826 -> 1174;
1827 -> 1178;
1827 -> 1174;
1828 -> 1825;
1828 -> 1826;
1828 -> 1827;
1828 -> 1179;
1828 -> 1169;
1828 -> 1823;
1828 -> 1174;
1829 -> 1174;
1830 -> 1164;
1831 -> 1169;
1831 -> 1828;
1831 -> 1164;
1832 -> 1158;
1832 -> 939;
1833 -> 1160;
1833 -> 1831;
1833 -> 1832;
1833 -> 1163;
1833 -> 1157;
1833 -> 1149;
1833 -> 939;
1834 -> 1158;
1834 -> 939;
1835 -> 1150;
1835 -> 939;
1836 -> 1152;
1836 -> 939;
1837 -> 1151;
1837 -> 1836;
1838 -> 1835;
1838 -> 1833;
1838 -> 1836;
1839 -> 1154;
1839 -> 1836;
1840 -> 1836;
1841 -> 1838;
1841 -> 1840;
1842 -> 1838;
1842 -> 1840;
1843 -> 1838;
1843 -> 1840;
1844 -> 1838;
1844 -> 1840;
1845 -> 1840;
1846 -> 1842;
1846 -> 1838;
1846 -> 1845;
1846 -> 1840;
1847 -> 0;
1847 -> 1840;
1848 -> 1846;
1848 -> 1840;
1849 -> 1837;
1849 -> 1846;
1849 -> 1836;
1850 -> 1836;
1851 -> 1157;
1851 -> 1836;
1852 -> 1835;
1852 -> 1836;
1853 -> 1151;
1853 -> 1836;
1854 -> 1153;
1854 -> 1836;
1855 -> 1833;
1855 -> 1836;
1856 -> 1850;
1856 -> 1836;
1857 -> 1155;
1857 -> 1836;
1858 -> 1156;
1858 -> 1836;
1859 -> 1836;
1860 -> 1851;
1860 -> 1859;
1861 -> 1852;
1861 -> 1859;
1862 -> 1853;
1862 -> 1859;
1863 -> 1854;
1863 -> 1859;
1864 -> 1855;
1864 -> 1859;
1865 -> 1856;
1865 -> 1859;
1866 -> 1857;
1866 -> 1859;
1867 -> 1858;
1867 -> 1859;
1868 -> 1859;
1869 -> 1860;
1869 -> 1868;
1869 -> 1859;
1870 -> 1859;
1871 -> 1865;
1871 -> 1870;
1871 -> 1859;
1872 -> 1859;
1873 -> 1860;
1873 -> 1872;
1874 -> 1873;
1874 -> 1846;
1874 -> 1872;
1875 -> 1874;
1875 -> 1859;
1876 -> 1859;
1877 -> 1859;
1878 -> 1866;
1878 -> 1859;
1879 -> 1860;
1879 -> 1878;
1880 -> 1861;
1880 -> 1878;
1881 -> 1864;
1881 -> 1878;
1882 -> 1865;
1882 -> 1878;
1883 -> 1867;
1883 -> 1878;
1884 -> 1878;
1885 -> 1879;
1885 -> 1884;
1886 -> 1880;
1886 -> 1884;
1887 -> 1881;
1887 -> 1884;
1888 -> 1882;
1888 -> 1884;
1889 -> 1883;
1889 -> 1884;
1890 -> 1889;
1890 -> 1884;
1891 -> 1884;
1892 -> 1890;
1892 -> 1891;
1893 -> 1885;
1893 -> 1891;
1894 -> 1891;
1895 -> 1893;
1895 -> 1846;
1895 -> 1894;
1895 -> 1891;
1896 -> 1895;
1897 -> 1893;
1897 -> 1895;
1898 -> 1895;
1899 -> 1898;
1900 -> 1899;
1900 -> 1898;
1901 -> 1895;
1902 -> 1901;
1902 -> 1897;
1903 -> 1902;
1903 -> 1895;
1904 -> 1903;
1905 -> 1903;
1906 -> 1905;
1906 -> 1903;
1907 -> 1903;
1908 -> 1904;
1908 -> 1903;
1909 -> 1908;
1910 -> 1909;
1910 -> 1908;
1911 -> 1897;
1911 -> 1908;
1912 -> 1892;
1912 -> 1908;
1913 -> 1909;
1913 -> 1908;
1914 -> 1908;
1915 -> 1911;
1915 -> 1914;
1916 -> 1912;
1916 -> 1914;
1917 -> 1913;
1917 -> 1914;
1918 -> 1893;
1918 -> 1914;
1919 -> 1914;
1920 -> 1914;
1921 -> 1914;
1922 -> 1914;
1923 -> 1918;
1923 -> 1922;
1924 -> 1923;
1924 -> 1914;
1925 -> 1914;
1926 -> 1918;
1926 -> 1925;
1927 -> 1925;
1928 -> 1926;
1928 -> 1927;
1929 -> 1928;
1929 -> 1925;
1930 -> 1926;
1930 -> 1914;
1931 -> 1914;
1932 -> 1918;
1932 -> 1931;
1933 -> 1932;
1933 -> 1926;
1933 -> 1931;
1934 -> 1931;
1935 -> 1933;
1935 -> 1934;
1936 -> 1935;
1936 -> 1933;
1936 -> 1934;
1937 -> 1934;
1938 -> 1936;
1938 -> 1937;
1939 -> 1937;
1940 -> 1938;
1940 -> 1939;
1941 -> 1939;
1942 -> 1940;
1942 -> 1941;
1943 -> 1942;
1943 -> 1939;
1944 -> 1940;
1944 -> 1937;
1945 -> 1944;
1945 -> 1914;
1946 -> 1914;
1947 -> 1924;
1947 -> 1946;
1947 -> 1914;
1948 -> 1947;
1949 -> 1920;
1949 -> 1947;
1950 -> 0;
1950 -> 1947;
1951 -> 1916;
1951 -> 1947;
1952 -> 1947;
1953 -> 1950;
1953 -> 1952;
1954 -> 1950;
1954 -> 1952;
1955 -> 1951;
1955 -> 1952;
1956 -> 1918;
1956 -> 1952;
1957 -> 1952;
1958 -> 1953;
1958 -> 1957;
1958 -> 1952;
1959 -> 1954;
1959 -> 0;
1959 -> 1952;
1960 -> 1956;
1960 -> 1952;
1961 -> 1954;
1961 -> 1952;
1962 -> 1953;
1962 -> 1952;
1963 -> 1955;
1963 -> 1952;
1964 -> 1952;
1965 -> 1952;
1966 -> 1960;
1966 -> 1965;
1967 -> 1961;
1967 -> 1965;
1968 -> 1962;
1968 -> 1965;
1969 -> 1963;
1969 -> 1965;
1970 -> 1964;
1970 -> 1965;
1971 -> 1966;
1971 -> 1965;
1972 -> 1967;
1972 -> 1965;
1973 -> 1969;
1973 -> 1965;
1974 -> 1965;
1975 -> 1971;
1975 -> 1974;
1976 -> 1972;
1976 -> 1974;
1977 -> 1973;
1977 -> 1974;
1978 -> 1970;
1978 -> 1974;
1979 -> 1978;
1979 -> 1974;
1980 -> 1978;
1980 -> 1974;
1981 -> 1978;
1981 -> 1974;
1982 -> 1978;
1982 -> 1974;
1983 -> 1978;
1983 -> 1974;
1984 -> 1974;
1985 -> 1984;
1985 -> 1978;
1985 -> 1974;
1986 -> 1975;
1986 -> 1978;
1986 -> 1974;
1987 -> 1976;
1987 -> 0;
1987 -> 1974;
1988 -> 1987;
1988 -> 1978;
1988 -> 1974;
1989 -> 1976;
1989 -> 0;
1989 -> 1974;
1990 -> 1989;
1990 -> 1978;
1990 -> 1974;
1991 -> 1976;
1991 -> 0;
1991 -> 1974;
1992 -> 1991;
1992 -> 1978;
1992 -> 1974;
1993 -> 1977;
1993 -> 1978;
1993 -> 1974;
1994 -> 1970;
1994 -> 1965;
1995 -> 1968;
1995 -> 1970;
1995 -> 1965;
1996 -> 1952;
1997 -> 1964;
1997 -> 1996;
1998 -> 1996;
1999 -> 1996;
2000 -> 1999;
2000 -> 1996;
2001 -> 1996;
2002 -> 1997;
2002 -> 1986;
2002 -> 2001;
2003 -> 2002;
2003 -> 1944;
2003 -> 2001;
2004 -> 2003;
2004 -> 1996;
2005 -> 1998;
2005 -> 1996;
2006 -> 1996;
2007 -> 2000;
2007 -> 2006;
2008 -> 2004;
2008 -> 2006;
2009 -> 2005;
2009 -> 2006;
2010 -> 1997;
2010 -> 2006;
2011 -> 2008;
2011 -> 2003;
2011 -> 0;
2011 -> 2006;
2012 -> 2010;
2012 -> 1988;
2012 -> 2011;
2013 -> 2008;
2013 -> 2006;
2014 -> 2007;
2014 -> 2013;
2014 -> 1999;
2014 -> 2003;
2014 -> 2006;
2015 -> 2008;
2015 -> 2014;
2015 -> 2006;
2016 -> 2015;
2017 -> 2010;
2017 -> 1992;
2017 -> 2016;
2018 -> 2007;
2018 -> 2017;
2019 -> 2016;
2019 -> 2017;
2020 -> 2009;
2020 -> 2017;
2021 -> 2017;
2022 -> 2018;
2022 -> 2021;
2023 -> 2019;
2023 -> 2021;
2024 -> 2020;
2024 -> 2021;
2025 -> 2023;
2025 -> 2014;
2025 -> 0;
2025 -> 2021;
2026 -> 2021;
2026 -> 1990;
2026 -> 2025;
2027 -> 2021;
2027 -> 1992;
2027 -> 2025;
2028 -> 2023;
2028 -> 2027;
2029 -> 2028;
2029 -> 2027;
2030 -> 2027;
2031 -> 2029;
2031 -> 2030;
2032 -> 2021;
2032 -> 2030;
2033 -> 2031;
2033 -> 2014;
2033 -> 2030;
2034 -> 2032;
2034 -> 1995;
2034 -> 2033;
2035 -> 2034;
2036 -> 2022;
2036 -> 2035;
2037 -> 2028;
2037 -> 2035;
2038 -> 2024;
2038 -> 2035;
2039 -> 2035;
2040 -> 2036;
2040 -> 2039;
2041 -> 2037;
2041 -> 2039;
2042 -> 2038;
2042 -> 2039;
2043 -> 2021;
2043 -> 2039;
2044 -> 2043;
2044 -> 1993;
2044 -> 1149;
2044 -> 2034;
2044 -> 2039;
2045 -> 2041;
2045 -> 2039;
2046 -> 2040;
2046 -> 2045;
2046 -> 2044;
2046 -> 2039;
2047 -> 2040;
2047 -> 2039;
2048 -> 2039;
2049 -> 2047;
2049 -> 2048;
2050 -> 2043;
2050 -> 2048;
2051 -> 2048;
2052 -> 2049;
2052 -> 2046;
2052 -> 2051;
2052 -> 2048;
2053 -> 2048;
2054 -> 2049;
2054 -> 2046;
2054 -> 2053;
2054 -> 2048;
2055 -> 2048;
2056 -> 2054;
2056 -> 2055;
2057 -> 2050;
2057 -> 2055;
2058 -> 2056;
2058 -> 2055;
2059 -> 2055;
2060 -> 2059;
2060 -> 2055;
2061 -> 2057;
2061 -> 1985;
2061 -> 2058;
2061 -> 2060;
2061 -> 1984;
2061 -> 2054;
2061 -> 2055;
2062 -> 2061;
2063 -> 2062;
2063 -> 2055;
2064 -> 2048;
2065 -> 2063;
2065 -> 2064;
2065 -> 2048;
2066 -> 2048;
2067 -> 2050;
2067 -> 1986;
2067 -> 2066;
2068 -> 2067;
2068 -> 2061;
2068 -> 2066;
2069 -> 2067;
2069 -> 2061;
2069 -> 2066;
2070 -> 2069;
2070 -> 2048;
2071 -> 2048;
2072 -> 2071;
2072 -> 2049;
2072 -> 2061;
2072 -> 2048;
2073 -> 2070;
2073 -> 2072;
2074 -> 2049;
2074 -> 2071;
2074 -> 2061;
2074 -> 2072;
2075 -> 2072;
2076 -> 2073;
2076 -> 2075;
2077 -> 2074;
2077 -> 2075;
2078 -> 2050;
2078 -> 2075;
2079 -> 2075;
2080 -> 2076;
2080 -> 2079;
2080 -> 2075;
2081 -> 2077;
2081 -> 2074;
2081 -> 0;
2081 -> 2075;
2082 -> 2077;
2082 -> 2074;
2082 -> 2081;
2083 -> 2076;
2083 -> 2082;
2083 -> 2074;
2083 -> 2081;
2084 -> 2081;
2085 -> 2083;
2085 -> 2084;
2086 -> 2078;
2086 -> 2084;
2087 -> 2085;
2087 -> 2084;
2088 -> 2087;
2089 -> 2087;
2090 -> 2088;
2090 -> 2089;
2090 -> 2087;
2091 -> 2087;
2092 -> 2087;
2093 -> 2091;
2093 -> 2092;
2093 -> 2087;
2094 -> 2087;
2095 -> 2094;
2095 -> 2087;
2096 -> 2094;
2096 -> 2083;
2096 -> 2086;
2096 -> 2095;
2097 -> 2081;
2098 -> 2077;
2098 -> 2075;
2099 -> 2075;
2100 -> 2098;
2100 -> 2099;
2101 -> 2078;
2101 -> 2099;
2102 -> 2101;
2102 -> 2096;
2102 -> 2100;
2102 -> 2099;
2102 -> 2083;
2103 -> 2102;
2104 -> 2103;
2104 -> 2099;
2105 -> 2104;
2105 -> 2048;
2106 -> 2039;
2107 -> 2105;
2107 -> 2106;
2107 -> 2039;
2108 -> 2105;
2108 -> 2102;
2108 -> 2107;
2109 -> 2108;
2110 -> 2108;
2111 -> 2109;
2111 -> 2110;
2112 -> 2043;
2112 -> 2110;
2113 -> 2112;
2113 -> 1995;
2113 -> 2111;
2113 -> 2110;
2114 -> 2108;
2114 -> 2113;
2115 -> 2042;
2115 -> 2114;
2115 -> 1998;
2115 -> 2109;
2115 -> 2113;
2116 -> 2039;
2117 -> 2040;
2117 -> 2115;
2117 -> 2116;
2117 -> 2039;
2118 -> 2035;
2119 -> 2021;
2120 -> 2022;
2120 -> 2117;
2120 -> 2119;
2120 -> 2021;
2121 -> 2017;
2122 -> 2006;
2123 -> 1996;
2124 -> 1999;
2124 -> 2120;
2124 -> 1996;
2125 -> 1997;
2125 -> 2096;
2125 -> 2124;
2125 -> 1996;
2126 -> 1998;
2126 -> 1996;
2127 -> 2126;
2127 -> 1952;
2128 -> 2127;
2128 -> 1947;
2129 -> 1947;
2130 -> 1949;
2130 -> 2129;
2131 -> 2128;
2131 -> 2129;
2132 -> 2131;
2132 -> 2129;
2133 -> 2132;
2133 -> 2125;
2133 -> 2129;
2134 -> 2133;
2135 -> 2134;
2136 -> 2130;
2136 -> 2135;
2136 -> 1920;
2136 -> 2125;
2136 -> 2134;
2137 -> 1947;
2138 -> 1945;
2138 -> 1915;
2138 -> 1947;
2139 -> 1914;
2140 -> 1914;
2141 -> 1914;
2142 -> 1920;
2142 -> 1914;
2143 -> 2142;
2143 -> 2136;
2143 -> 1914;
2144 -> 2143;
2145 -> 2143;
2146 -> 2144;
2146 -> 2143;
2147 -> 2143;
2148 -> 2145;
2148 -> 2147;
2149 -> 2146;
2149 -> 2147;
2150 -> 1918;
2150 -> 2147;
2151 -> 2148;
2151 -> 2136;
2151 -> 2147;
2152 -> 2148;
2152 -> 2136;
2152 -> 2147;
2153 -> 2147;
2154 -> 2152;
2154 -> 2136;
2154 -> 0;
2154 -> 2147;
2155 -> 2152;
2155 -> 2147;
2156 -> 2148;
2156 -> 2155;
2156 -> 0;
2156 -> 2147;
2157 -> 2147;
2158 -> 2148;
2158 -> 2155;
2158 -> 2157;
2158 -> 2147;
2159 -> 2158;
2160 -> 2159;
2160 -> 2158;
2161 -> 2153;
2161 -> 2159;
2161 -> 2158;
2162 -> 2160;
2162 -> 2143;
2163 -> 2143;
2163 -> 2162;
2164 -> 2160;
2164 -> 2162;
2165 -> 2144;
2165 -> 2162;
2166 -> 2162;
2167 -> 2163;
2167 -> 2166;
2168 -> 2164;
2168 -> 2166;
2169 -> 2165;
2169 -> 2166;
2170 -> 1918;
2170 -> 2166;
2171 -> 2168;
2171 -> 2166;
2172 -> 2167;
2172 -> 2155;
2172 -> 2166;
2173 -> 2166;
2174 -> 2173;
2174 -> 2162;
2175 -> 2143;
2175 -> 2155;
2175 -> 2174;
2176 -> 2144;
2176 -> 2175;
2177 -> 1919;
2177 -> 2176;
2177 -> 2144;
2177 -> 2175;
2178 -> 2143;
2178 -> 2175;
2179 -> 2141;
2179 -> 2178;
2179 -> 2155;
2179 -> 2175;
2180 -> 2144;
2180 -> 2177;
2180 -> 2162;
2181 -> 1914;
2182 -> 2141;
2182 -> 2179;
2182 -> 2181;
2182 -> 1914;
2183 -> 0;
2183 -> 2182;
2184 -> 2182;
2185 -> 2139;
2185 -> 2184;
2185 -> 2182;
2186 -> 1914;
2187 -> 2141;
2187 -> 2179;
2187 -> 2186;
2187 -> 1914;
2188 -> 1948;
2188 -> 2187;
2189 -> 2140;
2189 -> 2188;
2190 -> 1914;
2191 -> 1914;
2192 -> 2141;
2192 -> 2179;
2192 -> 2191;
2192 -> 1914;
2193 -> 2141;
2193 -> 2192;
2194 -> 2193;
2195 -> 2192;
2196 -> 2141;
2196 -> 2194;
2196 -> 2195;
2196 -> 2192;
2197 -> 2196;
2198 -> 2139;
2198 -> 1914;
2199 -> 2141;
2199 -> 2197;
2199 -> 1914;
2200 -> 2140;
2200 -> 2189;
2200 -> 1914;
2201 -> 2197;
2201 -> 1914;
2202 -> 1920;
2202 -> 2199;
2202 -> 1914;
2203 -> 1919;
2203 -> 2180;
2203 -> 1914;
2205 -> 0;
2207 -> 2204;
2207 -> 2206;
2208 -> 2205;
2208 -> 2206;
2209 -> 2206;
2210 -> 2209;
2210 -> 2206;
2211 -> 2207;
2211 -> 2209;
2211 -> 2206;
2212 -> 2208;
2212 -> 2209;
2212 -> 2206;
2213 -> 2206;
2214 -> 2201;
2214 -> 1908;
2215 -> 2203;
2215 -> 1908;
2216 -> 1908;
2217 -> 1908;
2218 -> 2214;
2218 -> 2217;
2219 -> 2215;
2219 -> 2217;
2220 -> 2216;
2220 -> 2217;
2221 -> 2220;
2221 -> 2217;
2222 -> 2218;
2222 -> 2220;
2222 -> 2217;
2223 -> 2219;
2223 -> 2220;
2223 -> 2217;
2224 -> 1903;
2225 -> 2224;
2225 -> 2202;
2226 -> 2225;
2226 -> 1903;
2227 -> 1903;
2228 -> 1893;
2228 -> 2202;
2228 -> 1895;
2229 -> 2216;
2229 -> 1895;
2230 -> 1895;
2231 -> 2228;
2231 -> 2229;
2231 -> 2230;
2231 -> 2222;
2231 -> 2223;
2231 -> 2202;
2231 -> 2203;
2231 -> 1895;
2232 -> 1893;
2232 -> 2231;
2232 -> 1891;
2233 -> 2232;
2233 -> 2231;
2233 -> 1884;
2234 -> 2232;
2234 -> 2231;
2234 -> 1884;
2235 -> 1888;
2235 -> 2234;
2235 -> 1850;
2235 -> 2231;
2235 -> 1884;
2236 -> 2232;
2236 -> 2235;
2236 -> 1884;
2237 -> 1884;
2238 -> 2236;
2238 -> 2237;
2238 -> 1884;
2239 -> 2236;
2239 -> 1884;
2240 -> 1884;
2241 -> 2239;
2241 -> 2240;
2241 -> 1884;
2242 -> 2236;
2242 -> 2235;
2242 -> 2241;
2243 -> 2242;
2243 -> 2241;
2244 -> 1885;
2244 -> 2241;
2245 -> 2241;
2246 -> 2245;
2247 -> 2243;
2247 -> 2246;
2248 -> 2247;
2248 -> 2245;
2249 -> 1884;
2250 -> 2239;
2250 -> 2249;
2250 -> 1884;
2251 -> 2236;
2251 -> 1884;
2252 -> 1860;
2252 -> 1859;
2253 -> 1861;
2253 -> 1859;
2254 -> 1862;
2254 -> 1859;
2255 -> 1863;
2255 -> 1859;
2256 -> 1864;
2256 -> 1859;
2257 -> 1865;
2257 -> 1859;
2258 -> 1866;
2258 -> 1859;
2259 -> 2251;
2259 -> 1859;
2260 -> 1867;
2260 -> 1859;
2261 -> 1859;
2262 -> 1859;
2263 -> 2252;
2263 -> 2262;
2264 -> 2253;
2264 -> 2262;
2265 -> 2254;
2265 -> 2262;
2266 -> 2255;
2266 -> 2262;
2267 -> 2256;
2267 -> 2262;
2268 -> 2257;
2268 -> 2262;
2269 -> 2258;
2269 -> 2262;
2270 -> 2259;
2270 -> 2262;
2271 -> 2260;
2271 -> 2262;
2272 -> 2261;
2272 -> 2262;
2273 -> 2262;
2274 -> 2273;
2274 -> 2262;
2275 -> 2273;
2275 -> 2262;
2276 -> 2273;
2276 -> 2262;
2277 -> 2273;
2277 -> 2262;
2278 -> 2273;
2278 -> 2262;
2279 -> 2273;
2279 -> 2262;
2280 -> 2273;
2280 -> 2262;
2281 -> 2273;
2281 -> 2262;
2282 -> 2273;
2282 -> 2262;
2283 -> 2273;
2283 -> 2262;
2284 -> 2273;
2284 -> 2262;
2285 -> 2262;
2286 -> 2263;
2286 -> 2285;
2286 -> 2262;
2287 -> 2262;
2288 -> 2268;
2288 -> 2287;
2288 -> 2262;
2289 -> 2263;
2289 -> 2273;
2289 -> 2262;
2290 -> 2264;
2290 -> 2273;
2290 -> 2262;
2291 -> 2265;
2291 -> 2273;
2291 -> 2262;
2292 -> 2271;
2292 -> 2273;
2292 -> 2262;
2293 -> 2268;
2293 -> 2273;
2293 -> 2262;
2294 -> 2269;
2294 -> 2273;
2294 -> 2262;
2295 -> 2270;
2295 -> 2273;
2295 -> 2262;
2296 -> 2267;
2296 -> 2273;
2296 -> 2262;
2297 -> 2267;
2297 -> 2262;
2298 -> 2262;
2299 -> 2297;
2299 -> 2298;
2300 -> 2273;
2300 -> 2298;
2301 -> 2299;
2301 -> 2298;
2302 -> 2262;
2303 -> 2265;
2303 -> 2262;
2304 -> 2264;
2304 -> 2243;
2304 -> 2303;
2305 -> 2304;
2305 -> 2273;
2305 -> 2303;
2306 -> 2266;
2306 -> 2273;
2306 -> 2262;
2307 -> 1859;
2308 -> 1860;
2308 -> 2307;
2309 -> 2308;
2309 -> 2243;
2309 -> 2307;
2310 -> 2309;
2310 -> 1859;
2311 -> 2310;
2312 -> 2311;
2312 -> 2261;
2312 -> 2310;
2313 -> 1859;
2314 -> 1860;
2314 -> 2313;
2315 -> 2313;
2316 -> 2314;
2316 -> 2315;
2317 -> 2315;
2318 -> 2316;
2318 -> 2317;
2319 -> 2317;
2320 -> 2318;
2320 -> 2319;
2321 -> 2320;
2321 -> 2243;
2321 -> 2319;
2322 -> 2320;
2322 -> 2243;
2322 -> 2319;
2323 -> 2322;
2323 -> 2317;
2324 -> 2318;
2324 -> 2243;
2324 -> 2317;
2325 -> 2313;
2326 -> 2324;
2326 -> 1859;
2327 -> 1859;
2328 -> 2326;
2328 -> 2327;
2329 -> 2261;
2329 -> 2327;
2330 -> 2328;
2330 -> 2324;
2330 -> 2327;
2331 -> 2329;
2331 -> 2330;
2332 -> 2330;
2333 -> 2331;
2333 -> 2332;
2333 -> 2330;
2333 -> 2273;
2333 -> 2274;
2333 -> 2289;
2333 -> 2275;
2333 -> 2291;
2333 -> 2276;
2333 -> 2306;
2333 -> 2277;
2333 -> 2293;
2333 -> 2278;
2333 -> 2296;
2333 -> 2279;
2333 -> 2290;
2333 -> 2280;
2333 -> 2294;
2333 -> 2281;
2333 -> 2305;
2333 -> 2282;
2333 -> 2295;
2333 -> 2283;
2333 -> 2312;
2333 -> 2284;
2333 -> 2292;
2333 -> 1149;
2333 -> 2304;
2333 -> 2311;
2334 -> 2333;
2334 -> 2332;
2335 -> 2333;
2335 -> 2332;
2336 -> 2333;
2336 -> 2332;
2337 -> 2336;
2337 -> 2333;
2337 -> 2332;
2338 -> 2334;
2338 -> 2332;
2339 -> 2332;
2340 -> 2337;
2340 -> 2339;
2341 -> 2338;
2341 -> 2339;
2342 -> 2339;
2343 -> 2340;
2343 -> 2342;
2343 -> 2339;
2344 -> 2332;
2345 -> 2336;
2345 -> 2333;
2345 -> 2332;
2346 -> 2332;
2347 -> 2336;
2347 -> 2345;
2347 -> 2346;
2348 -> 2347;
2348 -> 2332;
2349 -> 2334;
2349 -> 2348;
2350 -> 2348;
2351 -> 2349;
2351 -> 2350;
2352 -> 2336;
2352 -> 2350;
2353 -> 2350;
2354 -> 2352;
2354 -> 2345;
2354 -> 2350;
2355 -> 2354;
2355 -> 2348;
2356 -> 2355;
2356 -> 2348;
2357 -> 2332;
2358 -> 2333;
2358 -> 2357;
2358 -> 2356;
2358 -> 2330;
2359 -> 1859;
2360 -> 1859;
2361 -> 2261;
2361 -> 2360;
2362 -> 2361;
2362 -> 2358;
2362 -> 2360;
2363 -> 2360;
2364 -> 2362;
2364 -> 2363;
2364 -> 2360;
2365 -> 2360;
2366 -> 2365;
2366 -> 2360;
2367 -> 2362;
2367 -> 2366;
2367 -> 2358;
2367 -> 2360;
2368 -> 2367;
2369 -> 1859;
2370 -> 1859;
2371 -> 1861;
2371 -> 2370;
2371 -> 1859;
2372 -> 1865;
2372 -> 2371;
2373 -> 2371;
2374 -> 2372;
2374 -> 2373;
2375 -> 1861;
2375 -> 2373;
2376 -> 2375;
2376 -> 2368;
2376 -> 2373;
2377 -> 2376;
2377 -> 2371;
2378 -> 2377;
2378 -> 2371;
2379 -> 1865;
2379 -> 2371;
2380 -> 2371;
2381 -> 2378;
2381 -> 2380;
2382 -> 2379;
2382 -> 2380;
2383 -> 2261;
2383 -> 2380;
2384 -> 2381;
2384 -> 2380;
2385 -> 2371;
2386 -> 1865;
2386 -> 2371;
2387 -> 2371;
2388 -> 2386;
2388 -> 2387;
2389 -> 1861;
2389 -> 2387;
2390 -> 2387;
2391 -> 2388;
2391 -> 2387;
2392 -> 2387;
2393 -> 2391;
2393 -> 2392;
2394 -> 2389;
2394 -> 2392;
2395 -> 2392;
2396 -> 2394;
2396 -> 2395;
2397 -> 2395;
2398 -> 2397;
2398 -> 2396;
2398 -> 2395;
2399 -> 2395;
2400 -> 2396;
2400 -> 2399;
2401 -> 2400;
2401 -> 2368;
2401 -> 2398;
2401 -> 2399;
2402 -> 2401;
2402 -> 2395;
2403 -> 2402;
2403 -> 2392;
2404 -> 2392;
2405 -> 2394;
2405 -> 2404;
2406 -> 2405;
2406 -> 2401;
2406 -> 2404;
2407 -> 2406;
2407 -> 2392;
2408 -> 2407;
2409 -> 2403;
2409 -> 2408;
2409 -> 2407;
2410 -> 2409;
2411 -> 2387;
2412 -> 2390;
2412 -> 2387;
2413 -> 2389;
2413 -> 2406;
2413 -> 2387;
2414 -> 2412;
2414 -> 2413;
2414 -> 2390;
2414 -> 2406;
2414 -> 2387;
2415 -> 2390;
2415 -> 2387;
2416 -> 2389;
2416 -> 2414;
2416 -> 2387;
2417 -> 2390;
2417 -> 2387;
2418 -> 2389;
2418 -> 2416;
2418 -> 2387;
2419 -> 2390;
2419 -> 2387;
2420 -> 2389;
2420 -> 2418;
2420 -> 2387;
2421 -> 2390;
2421 -> 2387;
2422 -> 2389;
2422 -> 2420;
2422 -> 2387;
2423 -> 2390;
2423 -> 2387;
2424 -> 2389;
2424 -> 2422;
2424 -> 2387;
2425 -> 2390;
2425 -> 2387;
2426 -> 2389;
2426 -> 2424;
2426 -> 2387;
2427 -> 2390;
2427 -> 2387;
2428 -> 2389;
2428 -> 2426;
2428 -> 2387;
2429 -> 2390;
2429 -> 2428;
2429 -> 2387;
2430 -> 2429;
2430 -> 2371;
2431 -> 2430;
2431 -> 2371;
2432 -> 1865;
2432 -> 2371;
2433 -> 2371;
2434 -> 2431;
2434 -> 2433;
2435 -> 2432;
2435 -> 2433;
2436 -> 2261;
2436 -> 2433;
2437 -> 2434;
2437 -> 2433;
2438 -> 2371;
2439 -> 2371;
2440 -> 1860;
2440 -> 2439;
2441 -> 2440;
2441 -> 2428;
2441 -> 2439;
2442 -> 2441;
2442 -> 2371;
2443 -> 2261;
2443 -> 2371;
2444 -> 1861;
2444 -> 2371;
2445 -> 1865;
2445 -> 2371;
2446 -> 2371;
2447 -> 2442;
2447 -> 2446;
2448 -> 0;
2448 -> 2446;
2449 -> 2442;
2449 -> 2448;
2449 -> 0;
2449 -> 2371;
2450 -> 2442;
2450 -> 2446;
2451 -> 2446;
2452 -> 2442;
2452 -> 2451;
2452 -> 2449;
2452 -> 2371;
2453 -> 2371;
2454 -> 2261;
2454 -> 2453;
2455 -> 2454;
2455 -> 2452;
2455 -> 2453;
2456 -> 2453;
2457 -> 2455;
2457 -> 2456;
2457 -> 2453;
2458 -> 2453;
2459 -> 2458;
2459 -> 2453;
2460 -> 2371;
2461 -> 1861;
2461 -> 2455;
2461 -> 2371;
2462 -> 2371;
2463 -> 2461;
2463 -> 2462;
2463 -> 2371;
2464 -> 1859;
2465 -> 1861;
2465 -> 2464;
2465 -> 1859;
2466 -> 2261;
2466 -> 2455;
2466 -> 1861;
2466 -> 1859;
2467 -> 1859;
2468 -> 1860;
2468 -> 2467;
2469 -> 2468;
2469 -> 2455;
2469 -> 2467;
2470 -> 2469;
2470 -> 1859;
2471 -> 1859;
2472 -> 1866;
2472 -> 2471;
2472 -> 1859;
2473 -> 1860;
2473 -> 2472;
2474 -> 1865;
2474 -> 2472;
2475 -> 1867;
2475 -> 2472;
2476 -> 2472;
2477 -> 2473;
2477 -> 2476;
2478 -> 2474;
2478 -> 2476;
2479 -> 2475;
2479 -> 2476;
2480 -> 2476;
2481 -> 2477;
2481 -> 2480;
2482 -> 2480;
2483 -> 2481;
2483 -> 2482;
2484 -> 2482;
2485 -> 2483;
2485 -> 2484;
2486 -> 2485;
2486 -> 2470;
2486 -> 2484;
2487 -> 2485;
2487 -> 2470;
2487 -> 2484;
2488 -> 2487;
2488 -> 2482;
2489 -> 2483;
2489 -> 2470;
2489 -> 2482;
2490 -> 2489;
2490 -> 2476;
2491 -> 2479;
2491 -> 2476;
2492 -> 2491;
2492 -> 2490;
2492 -> 1149;
2492 -> 2489;
2492 -> 2476;
2493 -> 2476;
2494 -> 2478;
2494 -> 2492;
2494 -> 2476;
2495 -> 2472;
2496 -> 2472;
2497 -> 1861;
2497 -> 2496;
2497 -> 2472;
2498 -> 2251;
2498 -> 2496;
2498 -> 2472;
2499 -> 2497;
2499 -> 2498;
2499 -> 2472;
2500 -> 2472;
2501 -> 1860;
2501 -> 2500;
2502 -> 2501;
2502 -> 2494;
2502 -> 2500;
2503 -> 2502;
2503 -> 2472;
2504 -> 2251;
2504 -> 2503;
2505 -> 1865;
2505 -> 2503;
2506 -> 2503;
2507 -> 2504;
2507 -> 2506;
2508 -> 2504;
2508 -> 2506;
2509 -> 2504;
2509 -> 2506;
2510 -> 2504;
2510 -> 2506;
2511 -> 2507;
2511 -> 2506;
2512 -> 2506;
2513 -> 2508;
2513 -> 2506;
2514 -> 2509;
2514 -> 2506;
2515 -> 2506;
2516 -> 2511;
2516 -> 2515;
2517 -> 2512;
2517 -> 2515;
2518 -> 2513;
2518 -> 2515;
2519 -> 2512;
2519 -> 2515;
2520 -> 2514;
2520 -> 2515;
2521 -> 2510;
2521 -> 2515;
2522 -> 2516;
2522 -> 2515;
2523 -> 2515;
2524 -> 2519;
2524 -> 2523;
2524 -> 2515;
2525 -> 2516;
2525 -> 2515;
2526 -> 2517;
2526 -> 2515;
2527 -> 2518;
2527 -> 2515;
2528 -> 2520;
2528 -> 2515;
2529 -> 2515;
2530 -> 2525;
2530 -> 2529;
2531 -> 2526;
2531 -> 2529;
2532 -> 2527;
2532 -> 2529;
2533 -> 2528;
2533 -> 2529;
2534 -> 2521;
2534 -> 2529;
2535 -> 2529;
2536 -> 2529;
2537 -> 2530;
2537 -> 2522;
2537 -> 2529;
2538 -> 2537;
2538 -> 2522;
2538 -> 2529;
2539 -> 2530;
2539 -> 2522;
2539 -> 2529;
2540 -> 2530;
2540 -> 2539;
2540 -> 2529;
2541 -> 2533;
2541 -> 2540;
2542 -> 2529;
2543 -> 2534;
2543 -> 2539;
2543 -> 2542;
2543 -> 2529;
2544 -> 2530;
2544 -> 2539;
2544 -> 2529;
2545 -> 2515;
2546 -> 2519;
2546 -> 2545;
2546 -> 2515;
2547 -> 2544;
2547 -> 2546;
2548 -> 1836;
2549 -> 1850;
2549 -> 1836;
2550 -> 2549;
2550 -> 2547;
2550 -> 1836;
2551 -> 1835;
2551 -> 2550;
2552 -> 1850;
2552 -> 2550;
2553 -> 2550;
2554 -> 2551;
2554 -> 2553;
2555 -> 2552;
2555 -> 2553;
2556 -> 1157;
2556 -> 2553;
2557 -> 2556;
2557 -> 2550;
2557 -> 2553;
2558 -> 2556;
2558 -> 2550;
2558 -> 2553;
2559 -> 2550;
2560 -> 1154;
2560 -> 1836;
2561 -> 1850;
2561 -> 1836;
2562 -> 1156;
2562 -> 1836;
2563 -> 2560;
2563 -> 2561;
2563 -> 2562;
2563 -> 1157;
2563 -> 2550;
2563 -> 1149;
2563 -> 1836;
2564 -> 1836;
2565 -> 1833;
2565 -> 2563;
2565 -> 1836;
2566 -> 939;
2567 -> 945;
2567 -> 2566;
2567 -> 2563;
2567 -> 914;
2568 -> 945;
2568 -> 939;
2569 -> 945;
2569 -> 939;
2570 -> 945;
2570 -> 939;
2571 -> 945;
2571 -> 939;
2572 -> 945;
2572 -> 939;
2573 -> 945;
2573 -> 939;
2574 -> 945;
2574 -> 939;
2575 -> 939;
2576 -> 2568;
2576 -> 939;
2577 -> 2570;
2577 -> 939;
2578 -> 2575;
2578 -> 939;
2579 -> 2574;
2579 -> 2576;
2579 -> 2577;
2579 -> 2578;
2579 -> 2567;
2579 -> 2575;
2579 -> 939;
2580 -> 2568;
2580 -> 2579;
2580 -> 939;
2581 -> 939;
2582 -> 2574;
2582 -> 2581;
2583 -> 2581;
2584 -> 2582;
2584 -> 2583;
2585 -> 2584;
2585 -> 2579;
2585 -> 2583;
2586 -> 2584;
2586 -> 2579;
2586 -> 2583;
2587 -> 2586;
2587 -> 2581;
2588 -> 2582;
2588 -> 2579;
2588 -> 2581;
2589 -> 2588;
2589 -> 939;
2590 -> 939;
2591 -> 2575;
2591 -> 939;
2592 -> 939;
2593 -> 2591;
2593 -> 2592;
2594 -> 2574;
2594 -> 2592;
2595 -> 2592;
2596 -> 2594;
2596 -> 2595;
2597 -> 2595;
2598 -> 2596;
2598 -> 2597;
2599 -> 2598;
2599 -> 2589;
2599 -> 2597;
2600 -> 2598;
2600 -> 2589;
2600 -> 2597;
2601 -> 2600;
2601 -> 2595;
2602 -> 2596;
2602 -> 2589;
2602 -> 2595;
2603 -> 2602;
2603 -> 2592;
2604 -> 2592;
2605 -> 2604;
2605 -> 2603;
2605 -> 2602;
2605 -> 2592;
2606 -> 2592;
2607 -> 2606;
2607 -> 939;
2608 -> 2572;
2608 -> 939;
2609 -> 2575;
2609 -> 939;
2610 -> 2573;
2610 -> 939;
2611 -> 2608;
2611 -> 2609;
2611 -> 2610;
2611 -> 2574;
2611 -> 2602;
2611 -> 2567;
2611 -> 939;
2612 -> 939;
2613 -> 2573;
2613 -> 2567;
2613 -> 2611;
2613 -> 939;
2614 -> 939;
2615 -> 2571;
2615 -> 939;
2616 -> 939;
2621 -> 2618;
2621 -> 2617;
2622 -> 2619;
2622 -> 2617;
2623 -> 2620;
2623 -> 2617;
2624 -> 2617;
2625 -> 2574;
2625 -> 939;
2626 -> 2615;
2626 -> 939;
2627 -> 2569;
2627 -> 939;
2628 -> 2614;
2628 -> 939;
2629 -> 2573;
2629 -> 939;
2630 -> 939;
2631 -> 939;
2632 -> 2625;
2632 -> 2631;
2633 -> 2626;
2633 -> 2631;
2634 -> 2627;
2634 -> 2631;
2635 -> 2628;
2635 -> 2631;
2636 -> 2629;
2636 -> 2631;
2637 -> 2630;
2637 -> 2631;
2638 -> 2630;
2638 -> 2631;
2639 -> 2631;
2640 -> 2631;
2641 -> 2634;
2641 -> 2640;
2641 -> 2631;
2642 -> 2631;
2643 -> 2632;
2643 -> 2642;
2644 -> 2642;
2645 -> 2643;
2645 -> 2644;
2646 -> 2645;
2646 -> 2613;
2646 -> 2644;
2647 -> 2645;
2647 -> 2613;
2647 -> 2644;
2648 -> 2647;
2648 -> 2642;
2649 -> 2643;
2649 -> 2613;
2649 -> 2642;
2650 -> 2649;
2650 -> 2631;
2651 -> 2650;
2651 -> 2633;
2651 -> 2631;
2652 -> 2632;
2652 -> 2631;
2653 -> 2639;
2653 -> 2631;
2654 -> 2637;
2654 -> 2631;
2655 -> 2638;
2655 -> 2631;
2656 -> 2631;
2657 -> 2635;
2657 -> 2631;
2658 -> 2636;
2658 -> 2631;
2659 -> 2631;
2660 -> 2651;
2660 -> 2659;
2661 -> 2652;
2661 -> 2659;
2662 -> 2653;
2662 -> 2659;
2663 -> 2654;
2663 -> 2659;
2664 -> 2655;
2664 -> 2659;
2665 -> 2656;
2665 -> 2659;
2666 -> 2656;
2666 -> 2659;
2667 -> 2657;
2667 -> 2659;
2668 -> 2658;
2668 -> 2659;
2669 -> 2656;
2669 -> 2659;
2670 -> 2659;
2671 -> 2670;
2671 -> 2659;
2672 -> 2670;
2672 -> 2659;
2673 -> 2670;
2673 -> 2659;
2674 -> 2670;
2674 -> 2659;
2675 -> 2670;
2675 -> 2659;
2676 -> 2670;
2676 -> 2659;
2677 -> 2670;
2677 -> 2659;
2678 -> 2670;
2678 -> 2659;
2679 -> 2670;
2679 -> 2659;
2680 -> 2670;
2680 -> 2659;
2681 -> 2670;
2681 -> 2659;
2682 -> 2670;
2682 -> 2659;
2683 -> 2660;
2683 -> 2670;
2683 -> 2659;
2684 -> 2661;
2684 -> 2670;
2684 -> 2659;
2685 -> 2662;
2685 -> 2670;
2685 -> 2659;
2686 -> 2663;
2686 -> 2670;
2686 -> 2659;
2687 -> 2664;
2687 -> 2670;
2687 -> 2659;
2688 -> 2665;
2688 -> 2670;
2688 -> 2659;
2689 -> 2666;
2689 -> 2670;
2689 -> 2659;
2690 -> 2667;
2690 -> 2670;
2690 -> 2659;
2691 -> 2668;
2691 -> 2670;
2691 -> 2659;
2692 -> 2631;
2693 -> 2632;
2693 -> 2692;
2694 -> 2692;
2695 -> 2693;
2695 -> 2694;
2696 -> 2695;
2696 -> 2649;
2696 -> 2694;
2697 -> 2695;
2697 -> 2649;
2697 -> 2694;
2698 -> 2697;
2698 -> 2692;
2699 -> 2693;
2699 -> 2649;
2699 -> 2692;
2700 -> 2699;
2700 -> 2631;
2701 -> 2700;
2701 -> 2656;
2701 -> 2699;
2701 -> 2670;
2701 -> 2671;
2701 -> 2683;
2701 -> 2672;
2701 -> 2684;
2701 -> 2673;
2701 -> 2685;
2701 -> 2674;
2701 -> 2686;
2701 -> 2675;
2701 -> 2687;
2701 -> 2676;
2701 -> 2688;
2701 -> 2677;
2701 -> 2689;
2701 -> 2678;
2701 -> 2690;
2701 -> 2679;
2701 -> 2680;
2701 -> 2681;
2701 -> 2682;
2701 -> 2691;
2701 -> 2630;
2701 -> 2614;
2701 -> 2613;
2701 -> 2631;
2702 -> 2631;
2703 -> 2701;
2703 -> 2702;
2704 -> 2701;
2704 -> 2702;
2705 -> 2704;
2705 -> 2701;
2705 -> 2702;
2706 -> 2703;
2706 -> 2705;
2706 -> 2702;
2707 -> 2706;
2708 -> 2706;
2709 -> 2706;
2710 -> 2708;
2710 -> 2709;
2711 -> 2704;
2711 -> 2709;
2712 -> 2711;
2712 -> 2705;
2712 -> 2709;
2713 -> 2709;
2714 -> 2712;
2715 -> 2706;
2716 -> 2706;
2717 -> 2715;
2717 -> 2716;
2718 -> 2704;
2718 -> 2716;
2719 -> 2718;
2719 -> 2705;
2719 -> 2716;
2720 -> 2716;
2721 -> 2719;
2722 -> 2706;
2723 -> 2704;
2723 -> 2722;
2724 -> 2723;
2724 -> 2705;
2724 -> 2722;
2725 -> 2706;
2726 -> 2706;
2727 -> 2726;
2727 -> 2706;
2728 -> 2727;
2729 -> 2727;
2730 -> 2728;
2730 -> 2729;
2731 -> 2704;
2731 -> 2729;
2732 -> 2731;
2732 -> 2705;
2732 -> 2729;
2733 -> 2729;
2734 -> 2732;
2735 -> 2727;
2736 -> 2704;
2736 -> 2735;
2737 -> 2736;
2737 -> 2705;
2737 -> 2724;
2737 -> 2735;
2738 -> 2727;
2739 -> 2727;
2740 -> 2704;
2740 -> 2705;
2740 -> 2739;
2740 -> 2727;
2741 -> 2727;
2742 -> 2739;
2742 -> 2741;
2743 -> 2739;
2743 -> 2741;
2744 -> 2704;
2744 -> 2741;
2745 -> 2742;
2745 -> 2741;
2746 -> 2743;
2746 -> 2741;
2747 -> 2745;
2747 -> 2746;
2747 -> 2741;
2748 -> 2741;
2749 -> 2747;
2749 -> 2748;
2750 -> 2744;
2750 -> 2748;
2751 -> 2750;
2751 -> 2705;
2751 -> 2748;
2752 -> 2748;
2753 -> 2751;
2754 -> 2741;
2755 -> 2727;
2756 -> 2704;
2756 -> 2755;
2757 -> 2756;
2757 -> 2705;
2757 -> 2724;
2757 -> 2737;
2757 -> 2755;
2758 -> 2755;
2759 -> 2756;
2759 -> 2705;
2759 -> 2724;
2759 -> 2737;
2759 -> 2757;
2759 -> 2758;
2759 -> 2755;
2760 -> 2727;
2761 -> 2727;
2762 -> 2727;
2763 -> 2761;
2763 -> 2762;
2764 -> 2704;
2764 -> 2762;
2765 -> 2764;
2765 -> 2705;
2765 -> 2762;
2766 -> 2762;
2767 -> 2765;
2768 -> 2706;
2769 -> 2706;
2770 -> 2768;
2770 -> 2769;
2771 -> 2704;
2771 -> 2769;
2772 -> 2771;
2772 -> 2705;
2772 -> 2769;
2773 -> 2769;
2774 -> 2772;
2775 -> 2706;
2776 -> 2704;
2776 -> 2775;
2777 -> 2776;
2777 -> 2705;
2777 -> 2724;
2777 -> 2737;
2777 -> 2757;
2777 -> 2775;
2778 -> 2706;
2779 -> 2704;
2779 -> 2705;
2779 -> 2702;
2780 -> 2703;
2780 -> 2705;
2780 -> 2724;
2780 -> 2737;
2780 -> 2757;
2780 -> 2777;
2780 -> 2702;
2781 -> 2704;
2781 -> 2705;
2781 -> 2724;
2781 -> 2737;
2781 -> 2757;
2781 -> 2777;
2781 -> 2780;
2782 -> 2704;
2782 -> 2780;
2783 -> 2782;
2783 -> 2780;
2783 -> 2781;
2783 -> 2705;
2783 -> 2724;
2783 -> 2737;
2783 -> 2757;
2783 -> 2777;
2784 -> 2780;
2785 -> 2783;
2785 -> 2784;
2786 -> 2783;
2786 -> 2784;
2787 -> 2786;
2787 -> 2783;
2787 -> 2784;
2788 -> 2784;
2789 -> 2786;
2789 -> 2787;
2789 -> 2788;
2789 -> 2784;
2790 -> 2785;
2790 -> 2784;
2791 -> 2784;
2792 -> 2790;
2792 -> 2791;
2793 -> 2786;
2793 -> 2791;
2794 -> 2793;
2794 -> 2787;
2794 -> 2791;
2795 -> 2792;
2795 -> 2791;
2796 -> 2791;
2797 -> 2795;
2797 -> 2796;
2798 -> 2797;
2798 -> 2796;
2799 -> 2798;
2799 -> 2794;
2799 -> 2796;
2800 -> 2791;
2801 -> 2793;
2801 -> 2799;
2801 -> 2800;
2801 -> 2791;
2802 -> 2792;
2802 -> 2791;
2803 -> 2802;
2803 -> 2799;
2803 -> 2791;
2804 -> 2803;
2804 -> 2791;
2805 -> 2791;
2806 -> 2791;
2807 -> 2806;
2807 -> 2791;
2808 -> 2792;
2808 -> 2791;
2809 -> 2805;
2809 -> 2791;
2810 -> 2806;
2810 -> 2791;
2811 -> 2791;
2812 -> 2808;
2812 -> 2811;
2813 -> 2809;
2813 -> 2811;
2814 -> 2810;
2814 -> 2811;
2815 -> 2793;
2815 -> 2811;
2816 -> 0;
2816 -> 2811;
2817 -> 2811;
2818 -> 2811;
2819 -> 2812;
2819 -> 2803;
2819 -> 2811;
2820 -> 2819;
2820 -> 2803;
2821 -> 2820;
2821 -> 2816;
2821 -> 2819;
2822 -> 2821;
2822 -> 2819;
2823 -> 2819;
2824 -> 2815;
2824 -> 2823;
2824 -> 2819;
2825 -> 2824;
2825 -> 2819;
2826 -> 2811;
2827 -> 2818;
2827 -> 2826;
2827 -> 2811;
2828 -> 0;
2828 -> 2827;
2829 -> 2811;
2830 -> 2829;
2830 -> 2791;
2831 -> 2828;
2831 -> 0;
2831 -> 2791;
2832 -> 2822;
2832 -> 0;
2832 -> 2831;
2833 -> 2831;
2834 -> 2784;
2835 -> 2786;
2835 -> 2824;
2835 -> 2784;
2836 -> 2785;
2836 -> 2824;
2836 -> 2835;
2837 -> 2786;
2837 -> 2836;
2838 -> 2786;
2838 -> 2836;
2839 -> 2838;
2839 -> 2836;
2839 -> 2837;
2840 -> 2836;
2841 -> 2840;
2842 -> 2839;
2842 -> 2841;
2842 -> 2840;
2843 -> 2839;
2843 -> 2840;
2844 -> 2840;
2845 -> 2840;
2846 -> 2845;
2846 -> 2840;
2847 -> 2844;
2847 -> 2840;
2848 -> 2845;
2848 -> 2840;
2849 -> 0;
2849 -> 2840;
2850 -> 2840;
2851 -> 2840;
2852 -> 2839;
2853 -> 2852;
2853 -> 2849;
2853 -> 2839;
2854 -> 2853;
2854 -> 2839;
2855 -> 2839;
2856 -> 2840;
2857 -> 2851;
2857 -> 2856;
2857 -> 2840;
2858 -> 0;
2858 -> 2857;
2859 -> 2840;
2860 -> 2858;
2860 -> 0;
2860 -> 2840;
2861 -> 2854;
2861 -> 0;
2861 -> 2860;
2862 -> 2860;
2863 -> 2703;
2863 -> 2839;
2863 -> 2702;
2864 -> 2863;
2865 -> 2864;
2866 -> 2863;
2867 -> 2863;
2868 -> 2863;
2869 -> 2867;
2869 -> 2868;
2870 -> 2704;
2870 -> 2868;
2871 -> 2870;
2871 -> 2839;
2871 -> 2868;
2872 -> 2868;
2873 -> 2871;
2874 -> 2863;
2875 -> 2874;
2875 -> 2839;
2875 -> 2864;
2876 -> 2874;
2877 -> 2874;
2877 -> 2839;
2877 -> 2864;
2877 -> 2875;
2877 -> 2876;
2878 -> 2863;
2879 -> 2863;
2880 -> 2863;
2881 -> 2879;
2881 -> 2880;
2882 -> 2704;
2882 -> 2880;
2883 -> 2882;
2883 -> 2839;
2883 -> 2880;
2884 -> 2880;
2885 -> 2883;
2886 -> 2631;
2887 -> 2656;
2887 -> 2875;
2887 -> 2886;
2887 -> 2631;
2888 -> 2639;
2888 -> 2631;
2889 -> 2631;
2890 -> 2637;
2890 -> 2889;
2890 -> 2631;
2891 -> 2890;
2892 -> 2632;
2892 -> 2891;
2893 -> 2891;
2894 -> 2892;
2894 -> 2875;
2894 -> 2893;
2895 -> 2893;
2896 -> 2894;
2896 -> 2890;
2897 -> 2896;
2898 -> 2635;
2898 -> 2896;
2899 -> 2636;
2899 -> 2896;
2900 -> 2896;
2901 -> 2897;
2901 -> 2900;
2902 -> 2897;
2902 -> 2900;
2903 -> 2898;
2903 -> 2900;
2904 -> 2899;
2904 -> 2900;
2905 -> 2901;
2905 -> 2900;
2906 -> 2572;
2906 -> 939;
2907 -> 2614;
2907 -> 939;
2908 -> 2573;
2908 -> 939;
2909 -> 2906;
2909 -> 2907;
2909 -> 2908;
2909 -> 2574;
2909 -> 2905;
2909 -> 939;
2910 -> 939;
2911 -> 945;
2911 -> 939;
2912 -> 945;
2912 -> 939;
2913 -> 945;
2913 -> 939;
2914 -> 945;
2914 -> 939;
2915 -> 939;
2916 -> 2914;
2916 -> 2909;
2916 -> 2915;
2916 -> 939;
2917 -> 2911;
2917 -> 939;
2918 -> 939;
2919 -> 2917;
2919 -> 2918;
2920 -> 2914;
2920 -> 2918;
2921 -> 2918;
2922 -> 2920;
2922 -> 2909;
2922 -> 2921;
2922 -> 2918;
2923 -> 939;
2924 -> 945;
2924 -> 939;
2925 -> 939;
2926 -> 2924;
2926 -> 2925;
2927 -> 2925;
2928 -> 2926;
2928 -> 2927;
2929 -> 2927;
2930 -> 2928;
2930 -> 2929;
2931 -> 2929;
2932 -> 2930;
2932 -> 2931;
2933 -> 2932;
2933 -> 2909;
2933 -> 2931;
2934 -> 2932;
2934 -> 2909;
2934 -> 2931;
2935 -> 2934;
2935 -> 2929;
2936 -> 2925;
2937 -> 945;
2937 -> 939;
2938 -> 939;
2939 -> 2937;
2939 -> 2938;
2940 -> 2938;
2941 -> 2939;
2941 -> 2940;
2942 -> 2941;
2942 -> 2909;
2942 -> 2940;
2943 -> 2941;
2943 -> 2909;
2943 -> 2940;
2944 -> 2943;
2944 -> 2938;
2945 -> 939;
2946 -> 945;
2946 -> 939;
2947 -> 939;
2948 -> 2946;
2948 -> 2947;
2949 -> 2947;
2950 -> 2948;
2950 -> 2949;
2951 -> 2950;
2951 -> 2909;
2951 -> 2949;
2952 -> 2950;
2952 -> 2909;
2952 -> 2949;
2953 -> 2952;
2953 -> 2947;
2954 -> 945;
2954 -> 939;
2955 -> 945;
2955 -> 939;
2956 -> 939;
2957 -> 2955;
2957 -> 2956;
2958 -> 2957;
2958 -> 2909;
2958 -> 2956;
2959 -> 2958;
2959 -> 939;
2960 -> 2959;
2960 -> 2909;
2960 -> 939;
2961 -> 2959;
2961 -> 939;
2962 -> 2955;
2962 -> 2909;
2962 -> 939;
2963 -> 2959;
2963 -> 2960;
2964 -> 2954;
2964 -> 2909;
2964 -> 2960;
2965 -> 2960;
2966 -> 2963;
2966 -> 2965;
2967 -> 2964;
2967 -> 2965;
2968 -> 2955;
2968 -> 2965;
2969 -> 2968;
2969 -> 2909;
2969 -> 2965;
2970 -> 2966;
2970 -> 2965;
2971 -> 2969;
2971 -> 2970;
2971 -> 2965;
2972 -> 2965;
2973 -> 2966;
2973 -> 2965;
2974 -> 2972;
2974 -> 2965;
2975 -> 2968;
2975 -> 2909;
2975 -> 2973;
2975 -> 2974;
2975 -> 2965;
2976 -> 2966;
2976 -> 2965;
2977 -> 2965;
2978 -> 2965;
2979 -> 2976;
2979 -> 2978;
2980 -> 2977;
2980 -> 2978;
2981 -> 2980;
2981 -> 2978;
2982 -> 2978;
2983 -> 2979;
2983 -> 2982;
2983 -> 2978;
2984 -> 2979;
2984 -> 2980;
2984 -> 2978;
2985 -> 2966;
2985 -> 2965;
2986 -> 2977;
2986 -> 2965;
2987 -> 2968;
2987 -> 2975;
2987 -> 2985;
2987 -> 2986;
2987 -> 2984;
2987 -> 2965;
2988 -> 2987;
2988 -> 2977;
2988 -> 2965;
2989 -> 2966;
2989 -> 2988;
2990 -> 2987;
2990 -> 2988;
2991 -> 2967;
2991 -> 2988;
2992 -> 2988;
2993 -> 2989;
2993 -> 2992;
2994 -> 2990;
2994 -> 2992;
2995 -> 2991;
2995 -> 2992;
2996 -> 2968;
2996 -> 2992;
2997 -> 2996;
2997 -> 2987;
2997 -> 2992;
2998 -> 2992;
2999 -> 2994;
2999 -> 2998;
3000 -> 2999;
3000 -> 2987;
3000 -> 2998;
3001 -> 3000;
3001 -> 2992;
3002 -> 2997;
3002 -> 2987;
3002 -> 2992;
3003 -> 2996;
3003 -> 2987;
3003 -> 0;
3003 -> 2992;
3004 -> 3001;
3004 -> 2987;
3004 -> 2992;
3005 -> 3003;
3005 -> 3004;
3005 -> 2992;
3006 -> 2993;
3006 -> 2987;
3006 -> 2992;
3007 -> 2993;
3007 -> 2987;
3007 -> 2992;
3008 -> 2992;
3009 -> 2996;
3009 -> 2987;
3009 -> 3008;
3009 -> 2992;
3010 -> 2988;
3011 -> 2965;
3012 -> 2966;
3012 -> 2987;
3012 -> 3011;
3012 -> 2965;
3013 -> 2987;
3013 -> 2965;
3014 -> 2987;
3014 -> 2965;
3015 -> 945;
3015 -> 3014;
3015 -> 3012;
3015 -> 914;
3016 -> 945;
3016 -> 939;
3017 -> 3016;
3017 -> 3015;
3017 -> 939;
3018 -> 945;
3018 -> 939;
3019 -> 945;
3019 -> 939;
3020 -> 3019;
3020 -> 3017;
3020 -> 939;
3021 -> 939;
3022 -> 3021;
3022 -> 3020;
3022 -> 3017;
3022 -> 939;
3023 -> 939;
3024 -> 945;
3024 -> 3023;
3024 -> 3017;
3024 -> 914;
3025 -> 945;
3025 -> 939;
3026 -> 945;
3026 -> 939;
3027 -> 3025;
3027 -> 3024;
3027 -> 939;
3028 -> 3026;
3028 -> 3024;
3028 -> 3027;
3029 -> 3025;
3029 -> 3027;
3030 -> 3027;
3031 -> 3028;
3031 -> 3030;
3032 -> 3029;
3032 -> 3030;
3033 -> 3026;
3033 -> 3030;
3034 -> 3031;
3034 -> 3024;
3034 -> 3030;
3035 -> 3034;
3036 -> 3031;
3036 -> 3024;
3036 -> 3034;
3037 -> 3034;
3038 -> 3037;
3038 -> 3036;
3038 -> 3024;
3038 -> 3034;
3039 -> 3032;
3039 -> 3024;
3039 -> 3034;
3040 -> 3033;
3040 -> 3024;
3040 -> 3039;
3041 -> 3031;
3041 -> 3034;
3042 -> 3035;
3042 -> 3034;
3043 -> 3034;
3044 -> 3035;
3044 -> 3042;
3044 -> 3034;
3045 -> 3042;
3045 -> 3030;
3046 -> 945;
3046 -> 3045;
3046 -> 3044;
3046 -> 3042;
3046 -> 914;
3047 -> 945;
3047 -> 939;
3048 -> 3047;
3048 -> 3046;
3048 -> 939;
3049 -> 945;
3049 -> 939;
3050 -> 945;
3050 -> 939;
3051 -> 3049;
3051 -> 3048;
3051 -> 939;
3052 -> 939;
3053 -> 3050;
3053 -> 3048;
3053 -> 3052;
3054 -> 3053;
3054 -> 939;
3055 -> 939;
3056 -> 945;
3056 -> 939;
3057 -> 945;
3057 -> 939;
3058 -> 3056;
3058 -> 3054;
3058 -> 939;
3059 -> 939;
3060 -> 3058;
3060 -> 3059;
3061 -> 3057;
3061 -> 3059;
3062 -> 3061;
3062 -> 3054;
3062 -> 3059;
3063 -> 3062;
3063 -> 939;
3064 -> 939;
3065 -> 945;
3065 -> 939;
3066 -> 945;
3066 -> 939;
3067 -> 3065;
3067 -> 3063;
3067 -> 939;
3068 -> 939;
3069 -> 3067;
3069 -> 3068;
3070 -> 3066;
3070 -> 3068;
3071 -> 3068;
3072 -> 3069;
3072 -> 3068;
3073 -> 3068;
3074 -> 3072;
3074 -> 3073;
3075 -> 3070;
3075 -> 3073;
3076 -> 3073;
3077 -> 3075;
3077 -> 3076;
3078 -> 3076;
3079 -> 3078;
3079 -> 3077;
3079 -> 3076;
3080 -> 3076;
3081 -> 3077;
3081 -> 3080;
3082 -> 3081;
3082 -> 3063;
3082 -> 3079;
3082 -> 3080;
3083 -> 3082;
3083 -> 3076;
3084 -> 3083;
3084 -> 3073;
3085 -> 3073;
3086 -> 3075;
3086 -> 3085;
3087 -> 3082;
3087 -> 3073;
3088 -> 3087;
3089 -> 3084;
3089 -> 3088;
3089 -> 3087;
3090 -> 3089;
3091 -> 3068;
3092 -> 3071;
3092 -> 3068;
3093 -> 3071;
3093 -> 3068;
3094 -> 3071;
3094 -> 3068;
3095 -> 3071;
3095 -> 3068;
3096 -> 3071;
3096 -> 3068;
3097 -> 3071;
3097 -> 3068;
3098 -> 3071;
3098 -> 3068;
3099 -> 3071;
3099 -> 3068;
3100 -> 3071;
3100 -> 3082;
3100 -> 3068;
3101 -> 3100;
3101 -> 939;
3102 -> 939;
3103 -> 945;
3103 -> 939;
3104 -> 945;
3104 -> 939;
3105 -> 939;
3106 -> 3104;
3106 -> 3101;
3106 -> 939;
3107 -> 3105;
3107 -> 3106;
3107 -> 3101;
3107 -> 939;
3108 -> 939;
3109 -> 3105;
3109 -> 3107;
3109 -> 3108;
3109 -> 939;
3110 -> 3105;
3110 -> 3107;
3110 -> 3109;
3111 -> 3110;
3111 -> 3109;
3112 -> 3111;
3112 -> 3110;
3112 -> 0;
3113 -> 3112;
3114 -> 3111;
3114 -> 3110;
3114 -> 3112;
3115 -> 945;
3115 -> 939;
3116 -> 945;
3116 -> 939;
3117 -> 3115;
3117 -> 939;
3118 -> 3115;
3118 -> 3113;
3118 -> 939;
3119 -> 939;
3120 -> 3116;
3120 -> 3119;
3121 -> 3119;
3122 -> 3120;
3122 -> 3121;
3123 -> 3121;
3124 -> 3122;
3124 -> 3123;
3125 -> 3123;
3126 -> 3124;
3126 -> 3125;
3127 -> 3126;
3127 -> 3113;
3127 -> 3125;
3128 -> 3126;
3128 -> 3113;
3128 -> 3125;
3129 -> 3128;
3129 -> 3123;
3130 -> 3119;
3131 -> 3113;
3131 -> 939;
3132 -> 939;
3133 -> 3116;
3133 -> 3132;
3134 -> 945;
3134 -> 939;
3135 -> 945;
3135 -> 939;
3136 -> 945;
3136 -> 939;
3137 -> 945;
3137 -> 939;
3138 -> 939;
3139 -> 3137;
3139 -> 3113;
3139 -> 3138;
3140 -> 3138;
3141 -> 3140;
3142 -> 3141;
3143 -> 3139;
3143 -> 3142;
3144 -> 3143;
3144 -> 3141;
3145 -> 3138;
3146 -> 3139;
3146 -> 939;
3147 -> 3146;
3147 -> 3134;
3147 -> 3139;
3147 -> 939;
3148 -> 939;
3149 -> 3148;
3149 -> 939;
3150 -> 3136;
3150 -> 3149;
3150 -> 3113;
3150 -> 3148;
3150 -> 3139;
3150 -> 939;
3151 -> 939;
3152 -> 3148;
3152 -> 3150;
3152 -> 939;
3153 -> 3152;
3154 -> 3148;
3154 -> 3152;
3154 -> 939;
3155 -> 3153;
3155 -> 939;
3156 -> 945;
3156 -> 3155;
3156 -> 3154;
3156 -> 914;
3158 -> 3157;
3159 -> 3157;
3160 -> 945;
3160 -> 939;
3161 -> 945;
3161 -> 939;
3162 -> 939;
3163 -> 945;
3163 -> 3162;
3163 -> 3156;
3163 -> 914;
3164 -> 945;
3164 -> 939;
3165 -> 945;
3165 -> 939;
3166 -> 3165;
3166 -> 939;
3167 -> 3164;
3167 -> 939;
3168 -> 3165;
3168 -> 3163;
3168 -> 939;
3169 -> 3166;
3169 -> 3167;
3169 -> 3168;
3169 -> 3165;
3169 -> 3163;
3169 -> 939;
3170 -> 939;
3171 -> 3169;
3171 -> 0;
3171 -> 3170;
3172 -> 3170;
3173 -> 3169;
3174 -> 3173;
3174 -> 3169;
3175 -> 3169;
3175 -> 3170;
3176 -> 3170;
3177 -> 3176;
3178 -> 3169;
3178 -> 3177;
3179 -> 3178;
3179 -> 3176;
3180 -> 3170;
3181 -> 3170;
3182 -> 945;
3182 -> 939;
3183 -> 945;
3183 -> 939;
3184 -> 945;
3184 -> 939;
3185 -> 945;
3185 -> 939;
3186 -> 945;
3186 -> 939;
3187 -> 945;
3187 -> 939;
3188 -> 3182;
3188 -> 939;
3189 -> 939;
3190 -> 3185;
3190 -> 3189;
3190 -> 939;
3191 -> 3182;
3191 -> 939;
3192 -> 3183;
3192 -> 939;
3193 -> 3184;
3193 -> 939;
3194 -> 3186;
3194 -> 939;
3195 -> 939;
3196 -> 3191;
3196 -> 3195;
3197 -> 3192;
3197 -> 3195;
3198 -> 3193;
3198 -> 3195;
3199 -> 3194;
3199 -> 3195;
3200 -> 3187;
3200 -> 3195;
3201 -> 3195;
3202 -> 3195;
3203 -> 3196;
3203 -> 3169;
3203 -> 3195;
3204 -> 3203;
3204 -> 3169;
3204 -> 3195;
3205 -> 3196;
3205 -> 3169;
3205 -> 3195;
3206 -> 3199;
3206 -> 3205;
3207 -> 3196;
3207 -> 3169;
3207 -> 3206;
3208 -> 3203;
3208 -> 3206;
3209 -> 3206;
3210 -> 3208;
3210 -> 3209;
3211 -> 3209;
3212 -> 3210;
3212 -> 3211;
3212 -> 3209;
3213 -> 3212;
3214 -> 3210;
3214 -> 3169;
3214 -> 3212;
3215 -> 3209;
3216 -> 3215;
3216 -> 3206;
3217 -> 3207;
3217 -> 3216;
3217 -> 3206;
3218 -> 3196;
3218 -> 3217;
3219 -> 3196;
3219 -> 3169;
3219 -> 3217;
3220 -> 3195;
3221 -> 3200;
3221 -> 3169;
3221 -> 3220;
3221 -> 3195;
3222 -> 939;
3223 -> 3185;
3223 -> 3222;
3223 -> 939;
3224 -> 945;
3224 -> 939;
3225 -> 945;
3225 -> 939;
3226 -> 945;
3226 -> 939;
3227 -> 945;
3227 -> 939;
3228 -> 939;
3229 -> 3226;
3229 -> 3228;
3229 -> 939;
3230 -> 3224;
3230 -> 3169;
3230 -> 939;
3231 -> 3224;
3231 -> 3230;
3232 -> 3225;
3232 -> 3230;
3233 -> 3226;
3233 -> 3230;
3234 -> 3230;
3235 -> 3230;
3236 -> 3231;
3236 -> 3235;
3237 -> 3232;
3237 -> 3235;
3238 -> 3233;
3238 -> 3235;
3239 -> 3234;
3239 -> 3235;
3240 -> 3234;
3240 -> 3235;
3241 -> 3227;
3241 -> 3235;
3242 -> 3236;
3242 -> 3169;
3242 -> 3235;
3243 -> 3235;
3244 -> 3238;
3244 -> 3243;
3244 -> 3235;
3245 -> 3236;
3245 -> 3242;
3245 -> 3235;
3246 -> 3236;
3246 -> 3242;
3246 -> 3245;
3247 -> 3236;
3247 -> 3242;
3247 -> 0;
3247 -> 3235;
3248 -> 3236;
3248 -> 3242;
3248 -> 3235;
3249 -> 3240;
3249 -> 3248;
3250 -> 3249;
3251 -> 3249;
3252 -> 3236;
3252 -> 3242;
3252 -> 3249;
3253 -> 3249;
3254 -> 3252;
3254 -> 3253;
3255 -> 3253;
3256 -> 3254;
3256 -> 3255;
3257 -> 3255;
3258 -> 3256;
3258 -> 3257;
3258 -> 3255;
3259 -> 3255;
3260 -> 3259;
3260 -> 3253;
3261 -> 3236;
3261 -> 3242;
3261 -> 3260;
3262 -> 3236;
3262 -> 3242;
3262 -> 3235;
3263 -> 3241;
3263 -> 3242;
3263 -> 3235;
3264 -> 3236;
3264 -> 3242;
3264 -> 3235;
3265 -> 945;
3265 -> 939;
3266 -> 945;
3266 -> 939;
3267 -> 945;
3267 -> 939;
3268 -> 945;
3268 -> 939;
3269 -> 945;
3269 -> 939;
3270 -> 945;
3270 -> 939;
3271 -> 939;
3272 -> 3267;
3272 -> 3271;
3272 -> 939;
3273 -> 3265;
3273 -> 3263;
3273 -> 939;
3274 -> 3265;
3274 -> 3263;
3274 -> 3273;
3275 -> 3265;
3275 -> 3263;
3275 -> 0;
3275 -> 939;
3276 -> 3265;
3276 -> 3263;
3276 -> 939;
3277 -> 3269;
3277 -> 3276;
3278 -> 3265;
3278 -> 3263;
3278 -> 939;
3279 -> 945;
3279 -> 939;
3280 -> 945;
3280 -> 939;
3281 -> 945;
3281 -> 939;
3282 -> 3281;
3282 -> 3263;
3282 -> 939;
3283 -> 3279;
3283 -> 939;
3284 -> 3282;
3284 -> 3283;
3284 -> 939;
3285 -> 939;
3286 -> 3279;
3286 -> 3285;
3286 -> 939;
3287 -> 939;
3288 -> 3279;
3288 -> 939;
3289 -> 3287;
3289 -> 939;
3290 -> 3281;
3290 -> 3263;
3290 -> 3288;
3290 -> 3289;
3290 -> 939;
3291 -> 3290;
3292 -> 3265;
3292 -> 3291;
3292 -> 939;
3293 -> 3265;
3293 -> 3291;
3293 -> 3292;
3294 -> 3265;
3294 -> 3291;
3294 -> 0;
3294 -> 939;
3295 -> 3265;
3295 -> 3291;
3295 -> 939;
3296 -> 3269;
3296 -> 3295;
3297 -> 3265;
3297 -> 3291;
3297 -> 939;
3298 -> 945;
3298 -> 939;
3299 -> 945;
3299 -> 939;
3300 -> 3298;
3300 -> 939;
3301 -> 939;
3302 -> 3300;
3302 -> 3301;
3302 -> 3291;
3302 -> 939;
3303 -> 3298;
3303 -> 939;
3304 -> 3303;
3304 -> 3291;
3304 -> 3302;
3304 -> 939;
3305 -> 939;
3306 -> 3304;
3306 -> 3305;
3307 -> 3306;
3307 -> 3304;
3307 -> 3305;
3308 -> 3306;
3308 -> 3304;
3308 -> 3307;
3309 -> 3308;
3309 -> 3307;
3310 -> 3307;
3311 -> 3309;
3311 -> 3310;
3312 -> 3311;
3312 -> 3304;
3312 -> 0;
3312 -> 3310;
3313 -> 3311;
3313 -> 3304;
3313 -> 3310;
3314 -> 3310;
3315 -> 3313;
3315 -> 3314;
3316 -> 3314;
3317 -> 3315;
3317 -> 3316;
3317 -> 3314;
3318 -> 3317;
3319 -> 3315;
3319 -> 3304;
3319 -> 3317;
3320 -> 3314;
3321 -> 3320;
3321 -> 3310;
3322 -> 3312;
3322 -> 3321;
3322 -> 3310;
3323 -> 3305;
3324 -> 3323;
3324 -> 939;
3325 -> 3304;
3325 -> 3324;
3325 -> 939;
3326 -> 3298;
3326 -> 939;
3327 -> 3325;
3327 -> 939;
3328 -> 939;
3329 -> 3327;
3329 -> 3328;
3330 -> 3329;
3330 -> 3327;
3330 -> 3328;
3331 -> 3329;
3331 -> 3327;
3331 -> 3330;
3332 -> 3331;
3332 -> 3330;
3333 -> 3330;
3334 -> 3332;
3334 -> 3333;
3335 -> 3334;
3335 -> 3327;
3335 -> 0;
3335 -> 3333;
3336 -> 3334;
3336 -> 3327;
3336 -> 3333;
3337 -> 3333;
3338 -> 3336;
3338 -> 3337;
3339 -> 3337;
3340 -> 3338;
3340 -> 3339;
3340 -> 3337;
3341 -> 3340;
3342 -> 3338;
3342 -> 3327;
3342 -> 3340;
3343 -> 3337;
3344 -> 3343;
3344 -> 3333;
3345 -> 3335;
3345 -> 3344;
3345 -> 3333;
3346 -> 3328;
3347 -> 3325;
3347 -> 939;
3348 -> 3298;
3348 -> 3347;
3349 -> 3347;
3350 -> 3348;
3350 -> 3349;
3350 -> 3291;
3350 -> 3327;
3350 -> 3347;
3351 -> 3225;
3351 -> 3350;
3352 -> 3226;
3352 -> 3350;
3353 -> 3351;
3353 -> 3350;
3354 -> 3352;
3354 -> 3350;
3355 -> 3350;
3356 -> 3350;
3357 -> 3350;
3358 -> 3354;
3358 -> 3357;
3358 -> 3350;
3359 -> 3350;
3360 -> 3350;
3360 -> 3359;
3361 -> 3350;
3361 -> 0;
3362 -> 3350;
3363 -> 3356;
3363 -> 3362;
3364 -> 3363;
3365 -> 3363;
3366 -> 3350;
3366 -> 3363;
3367 -> 3363;
3368 -> 3366;
3368 -> 3367;
3369 -> 3367;
3370 -> 3368;
3370 -> 3369;
3371 -> 3369;
3372 -> 3370;
3372 -> 3371;
3372 -> 3369;
3373 -> 3369;
3374 -> 3373;
3374 -> 3367;
3375 -> 3350;
3375 -> 3374;
3376 -> 3350;
3377 -> 945;
3377 -> 939;
3378 -> 945;
3378 -> 939;
3379 -> 945;
3379 -> 939;
3380 -> 3377;
3380 -> 3350;
3380 -> 939;
3381 -> 939;
3382 -> 3380;
3382 -> 3381;
3382 -> 939;
3383 -> 3378;
3383 -> 0;
3383 -> 3382;
3384 -> 3380;
3384 -> 3378;
3384 -> 3382;
3385 -> 3378;
3385 -> 0;
3385 -> 3384;
3386 -> 3225;
3386 -> 3384;
3387 -> 3226;
3387 -> 3384;
3388 -> 3386;
3388 -> 3384;
3389 -> 3387;
3389 -> 3384;
3390 -> 3384;
3391 -> 3384;
3392 -> 3384;
3393 -> 3389;
3393 -> 3392;
3393 -> 3384;
3394 -> 3384;
3395 -> 3384;
3395 -> 3394;
3396 -> 3384;
3396 -> 0;
3397 -> 3384;
3398 -> 3391;
3398 -> 3397;
3399 -> 3398;
3400 -> 3398;
3401 -> 3384;
3401 -> 3398;
3402 -> 3398;
3403 -> 3401;
3403 -> 3402;
3404 -> 3402;
3405 -> 3403;
3405 -> 3404;
3406 -> 3404;
3407 -> 3405;
3407 -> 3406;
3407 -> 3404;
3408 -> 3404;
3409 -> 3408;
3409 -> 3402;
3410 -> 3384;
3410 -> 3409;
3411 -> 3384;
3412 -> 3265;
3412 -> 3384;
3412 -> 939;
3413 -> 3265;
3413 -> 3384;
3413 -> 3412;
3414 -> 3265;
3414 -> 3384;
3414 -> 0;
3414 -> 939;
3415 -> 3265;
3415 -> 3384;
3415 -> 939;
3416 -> 3269;
3416 -> 3415;
3417 -> 3265;
3417 -> 3384;
3417 -> 939;
3418 -> 3281;
3418 -> 3384;
3418 -> 939;
3419 -> 3384;
3419 -> 3305;
3420 -> 3419;
3420 -> 3384;
3420 -> 3305;
3421 -> 3419;
3421 -> 3384;
3421 -> 3420;
3422 -> 3421;
3422 -> 3420;
3423 -> 3420;
3424 -> 3422;
3424 -> 3423;
3425 -> 3424;
3425 -> 3384;
3425 -> 0;
3425 -> 3423;
3426 -> 3424;
3426 -> 3384;
3426 -> 3423;
3427 -> 3423;
3428 -> 3426;
3428 -> 3427;
3429 -> 3427;
3430 -> 3428;
3430 -> 3429;
3430 -> 3427;
3431 -> 3430;
3432 -> 3428;
3432 -> 3384;
3432 -> 3430;
3433 -> 3427;
3434 -> 3433;
3434 -> 3423;
3435 -> 3425;
3435 -> 3434;
3435 -> 3423;
3436 -> 3384;
3436 -> 3328;
3437 -> 3436;
3437 -> 3384;
3437 -> 3328;
3438 -> 3436;
3438 -> 3384;
3438 -> 3437;
3439 -> 3438;
3439 -> 3437;
3440 -> 3437;
3441 -> 3439;
3441 -> 3440;
3442 -> 3441;
3442 -> 3384;
3442 -> 0;
3442 -> 3440;
3443 -> 3441;
3443 -> 3384;
3443 -> 3440;
3444 -> 3440;
3445 -> 3443;
3445 -> 3444;
3446 -> 3444;
3447 -> 3445;
3447 -> 3446;
3447 -> 3444;
3448 -> 3447;
3449 -> 3445;
3449 -> 3384;
3449 -> 3447;
3450 -> 3444;
3451 -> 3450;
3451 -> 3440;
3452 -> 3442;
3452 -> 3451;
3452 -> 3440;
3453 -> 3196;
3453 -> 3384;
3453 -> 3195;
3454 -> 3453;
3454 -> 3384;
3454 -> 3195;
3455 -> 3196;
3455 -> 3384;
3455 -> 3195;
3456 -> 3199;
3456 -> 3455;
3457 -> 3196;
3457 -> 3384;
3457 -> 3456;
3458 -> 3453;
3458 -> 3456;
3459 -> 3456;
3460 -> 3458;
3460 -> 3459;
3461 -> 3459;
3462 -> 3460;
3462 -> 3461;
3462 -> 3459;
3463 -> 3462;
3464 -> 3460;
3464 -> 3384;
3464 -> 3462;
3465 -> 3459;
3466 -> 3465;
3466 -> 3456;
3467 -> 3457;
3467 -> 3466;
3467 -> 3456;
3468 -> 3196;
3468 -> 3467;
3469 -> 3196;
3469 -> 3384;
3469 -> 3467;
3470 -> 3200;
3470 -> 3384;
3470 -> 3220;
3470 -> 3195;
3471 -> 3407;
3472 -> 3405;
3472 -> 3384;
3472 -> 3407;
3473 -> 945;
3473 -> 939;
3474 -> 3473;
3474 -> 3384;
3474 -> 939;
3475 -> 939;
3476 -> 2954;
3476 -> 3474;
3477 -> 3476;
3477 -> 3474;
3478 -> 3474;
3479 -> 3474;
3480 -> 3019;
3480 -> 3479;
3480 -> 939;
3481 -> 3021;
3481 -> 3480;
3481 -> 3479;
3481 -> 939;
3482 -> 945;
3482 -> 939;
3483 -> 3482;
3483 -> 939;
3484 -> 3483;
3484 -> 3482;
3484 -> 3479;
3484 -> 939;
3485 -> 939;
3486 -> 3049;
3486 -> 3484;
3486 -> 939;
3487 -> 3056;
3487 -> 3484;
3487 -> 939;
3488 -> 3487;
3488 -> 3059;
3489 -> 3065;
3489 -> 3484;
3489 -> 939;
3490 -> 3489;
3490 -> 3068;
3491 -> 3490;
3491 -> 3068;
3492 -> 3491;
3492 -> 3073;
3493 -> 3484;
3493 -> 3076;
3494 -> 3493;
3494 -> 3073;
3495 -> 3484;
3495 -> 3073;
3496 -> 3495;
3497 -> 3494;
3497 -> 3496;
3497 -> 3495;
3498 -> 3497;
3499 -> 3115;
3499 -> 3484;
3499 -> 939;
3500 -> 3126;
3500 -> 3484;
3500 -> 3125;
3501 -> 3126;
3501 -> 3484;
3501 -> 3125;
3502 -> 3501;
3502 -> 3123;
3503 -> 3484;
3503 -> 939;
3504 -> 3484;
3504 -> 3142;
3505 -> 3504;
3505 -> 3141;
3506 -> 3484;
3506 -> 939;
3507 -> 3506;
3507 -> 3134;
3507 -> 3484;
3507 -> 939;
3508 -> 3148;
3508 -> 3484;
3509 -> 3484;
3510 -> 3148;
3510 -> 3484;
3511 -> 3510;
3511 -> 3508;
3511 -> 3484;
3512 -> 3484;
3513 -> 3511;
3513 -> 3512;
3513 -> 3484;
3514 -> 3135;
3514 -> 3513;
3515 -> 3511;
3515 -> 3513;
3516 -> 3513;
3517 -> 3514;
3517 -> 3516;
3518 -> 3515;
3518 -> 3516;
3519 -> 3137;
3519 -> 3516;
3520 -> 3518;
3520 -> 3517;
3520 -> 3516;
3521 -> 3520;
3522 -> 3265;
3522 -> 3521;
3522 -> 939;
3523 -> 3265;
3523 -> 3521;
3523 -> 3522;
3524 -> 3265;
3524 -> 3521;
3524 -> 0;
3524 -> 939;
3525 -> 3265;
3525 -> 3521;
3525 -> 939;
3526 -> 3269;
3526 -> 3525;
3527 -> 3526;
3528 -> 3526;
3529 -> 3265;
3529 -> 3521;
3529 -> 3526;
3530 -> 3526;
3531 -> 3529;
3531 -> 3530;
3532 -> 3530;
3533 -> 3531;
3533 -> 3532;
3534 -> 3532;
3535 -> 3533;
3535 -> 3534;
3535 -> 3532;
3536 -> 3532;
3537 -> 3536;
3537 -> 3530;
3538 -> 3265;
3538 -> 3521;
3538 -> 3537;
3539 -> 3265;
3539 -> 3521;
3539 -> 939;
3540 -> 3281;
3540 -> 3521;
3540 -> 939;
3541 -> 3115;
3541 -> 3521;
3541 -> 939;
3542 -> 3126;
3542 -> 3521;
3542 -> 3125;
3543 -> 3126;
3543 -> 3521;
3543 -> 3125;
3544 -> 3543;
3544 -> 3123;
3545 -> 3521;
3545 -> 939;
3546 -> 3521;
3546 -> 3142;
3547 -> 3546;
3547 -> 3141;
3548 -> 3521;
3548 -> 939;
3549 -> 3548;
3549 -> 3134;
3549 -> 3521;
3549 -> 939;
3550 -> 3225;
3550 -> 3521;
3551 -> 3226;
3551 -> 3521;
3552 -> 3550;
3552 -> 3521;
3553 -> 3551;
3553 -> 3521;
3554 -> 3521;
3555 -> 3521;
3556 -> 3521;
3557 -> 3553;
3557 -> 3556;
3557 -> 3521;
3558 -> 3521;
3559 -> 3521;
3559 -> 3558;
3560 -> 3521;
3560 -> 0;
3561 -> 3521;
3562 -> 3555;
3562 -> 3561;
3563 -> 3562;
3564 -> 3562;
3565 -> 3521;
3565 -> 3562;
3566 -> 3562;
3567 -> 3565;
3567 -> 3566;
3568 -> 3566;
3569 -> 3567;
3569 -> 3568;
3570 -> 3568;
3571 -> 3569;
3571 -> 3570;
3571 -> 3568;
3572 -> 3568;
3573 -> 3572;
3573 -> 3566;
3574 -> 3521;
3574 -> 3573;
3575 -> 3521;
3576 -> 945;
3576 -> 939;
3577 -> 945;
3577 -> 939;
3578 -> 3577;
3578 -> 3521;
3578 -> 939;
3579 -> 3577;
3579 -> 3521;
3579 -> 939;
3580 -> 3579;
3581 -> 3577;
3581 -> 3580;
3582 -> 3581;
3582 -> 3521;
3582 -> 3580;
3583 -> 3580;
3584 -> 3581;
3584 -> 3521;
3584 -> 3580;
3585 -> 3582;
3585 -> 3521;
3585 -> 3584;
3586 -> 3584;
3587 -> 3586;
3587 -> 3585;
3587 -> 3521;
3587 -> 3584;
3588 -> 3581;
3588 -> 3521;
3588 -> 3580;
3589 -> 3580;
3590 -> 3582;
3590 -> 3521;
3590 -> 3589;
3591 -> 3590;
3591 -> 3580;
3592 -> 3582;
3592 -> 3580;
3593 -> 3583;
3593 -> 3580;
3594 -> 3580;
3595 -> 3592;
3595 -> 3594;
3596 -> 3593;
3596 -> 3594;
3597 -> 3594;
3598 -> 3597;
3598 -> 3594;
3599 -> 3595;
3599 -> 3521;
3599 -> 3594;
3600 -> 3596;
3600 -> 3594;
3601 -> 3594;
3602 -> 3598;
3602 -> 3601;
3603 -> 3599;
3603 -> 3601;
3604 -> 3600;
3604 -> 3601;
3605 -> 3601;
3606 -> 3603;
3606 -> 3605;
3606 -> 3601;
3607 -> 3594;
3608 -> 3594;
3609 -> 3595;
3609 -> 3599;
3609 -> 3608;
3610 -> 3609;
3610 -> 3594;
3611 -> 3597;
3611 -> 3610;
3612 -> 3595;
3612 -> 3599;
3612 -> 3610;
3613 -> 3596;
3613 -> 3610;
3614 -> 3610;
3615 -> 3611;
3615 -> 3614;
3616 -> 3612;
3616 -> 3614;
3617 -> 3613;
3617 -> 3614;
3618 -> 3614;
3619 -> 3616;
3619 -> 3618;
3619 -> 3614;
3620 -> 3610;
3621 -> 3597;
3621 -> 3594;
3622 -> 3621;
3622 -> 3580;
3623 -> 3583;
3623 -> 3580;
3624 -> 3623;
3624 -> 3579;
3625 -> 3624;
3625 -> 3577;
3625 -> 3579;
3626 -> 3579;
3627 -> 3577;
3627 -> 3612;
3627 -> 3625;
3627 -> 3623;
3627 -> 3626;
3627 -> 3579;
3628 -> 3577;
3628 -> 3612;
3628 -> 3625;
3628 -> 939;
3629 -> 945;
3629 -> 939;
3630 -> 945;
3630 -> 939;
3631 -> 945;
3631 -> 939;
3632 -> 3631;
3632 -> 3628;
3632 -> 939;
3633 -> 3632;
3633 -> 3628;
3633 -> 939;
3634 -> 939;
3635 -> 3634;
3635 -> 3633;
3635 -> 939;
3636 -> 945;
3636 -> 939;
3637 -> 0;
3637 -> 939;
3638 -> 945;
3638 -> 3637;
3638 -> 3628;
3638 -> 0;
3638 -> 914;
3639 -> 939;
3640 -> 3639;
3641 -> 3640;
3642 -> 945;
3642 -> 939;
3643 -> 939;
3644 -> 945;
3644 -> 3643;
3644 -> 3638;
3644 -> 914;
3645 -> 945;
3645 -> 939;
3646 -> 939;
3647 -> 3645;
3647 -> 3646;
3648 -> 3647;
3648 -> 3644;
3648 -> 3646;
3649 -> 3647;
3649 -> 3644;
3649 -> 3646;
3650 -> 3649;
3650 -> 939;
3651 -> 945;
3651 -> 939;
3652 -> 945;
3652 -> 939;
3653 -> 3652;
3653 -> 3650;
3653 -> 939;
3654 -> 0;
3654 -> 939;
3655 -> 3652;
3655 -> 3650;
3655 -> 939;
3656 -> 939;
3657 -> 3654;
3657 -> 3656;
3658 -> 3655;
3658 -> 3656;
3659 -> 3652;
3659 -> 3656;
3660 -> 3657;
3660 -> 3656;
3661 -> 3656;
3662 -> 3651;
3662 -> 3660;
3662 -> 3661;
3662 -> 3656;
3663 -> 3656;
3664 -> 3651;
3664 -> 3663;
3664 -> 3656;
3665 -> 3658;
3665 -> 3656;
3666 -> 3656;
3667 -> 3651;
3667 -> 3665;
3667 -> 3666;
3667 -> 3656;
3668 -> 3656;
3669 -> 3651;
3669 -> 3668;
3669 -> 3656;
3670 -> 939;
3671 -> 939;
3672 -> 3652;
3672 -> 3671;
3673 -> 3672;
3673 -> 3650;
3673 -> 3671;
3674 -> 3673;
3674 -> 939;
3675 -> 939;
3676 -> 3652;
3676 -> 3675;
3677 -> 3676;
3677 -> 3650;
3677 -> 3675;
3678 -> 3677;
3678 -> 939;
3679 -> 939;
3680 -> 3652;
3680 -> 3679;
3681 -> 3680;
3681 -> 3650;
3681 -> 3679;
3682 -> 3681;
3682 -> 939;
3683 -> 939;
3684 -> 3652;
3684 -> 3683;
3685 -> 3683;
3686 -> 3684;
3686 -> 3685;
3687 -> 3685;
3688 -> 3686;
3688 -> 3650;
3688 -> 3687;
3689 -> 3687;
3690 -> 3688;
3690 -> 3683;
3691 -> 3690;
3691 -> 3683;
3692 -> 3690;
3692 -> 3683;
3693 -> 3692;
3693 -> 939;
3694 -> 3693;
3694 -> 939;
3695 -> 3265;
3695 -> 3694;
3695 -> 939;
3696 -> 3265;
3696 -> 3694;
3696 -> 3695;
3697 -> 3265;
3697 -> 3694;
3697 -> 0;
3697 -> 939;
3698 -> 3265;
3698 -> 3694;
3698 -> 939;
3699 -> 3269;
3699 -> 3698;
3700 -> 3265;
3700 -> 3694;
3700 -> 939;
3701 -> 3281;
3701 -> 3694;
3701 -> 939;
3702 -> 3694;
3702 -> 3305;
3703 -> 3702;
3703 -> 3694;
3703 -> 3305;
3704 -> 3702;
3704 -> 3694;
3704 -> 3703;
3705 -> 3704;
3705 -> 3703;
3706 -> 3703;
3707 -> 3705;
3707 -> 3706;
3708 -> 3707;
3708 -> 3694;
3708 -> 0;
3708 -> 3706;
3709 -> 3707;
3709 -> 3694;
3709 -> 3706;
3710 -> 3706;
3711 -> 3709;
3711 -> 3710;
3712 -> 3710;
3713 -> 3711;
3713 -> 3712;
3713 -> 3710;
3714 -> 3713;
3715 -> 3711;
3715 -> 3694;
3715 -> 3713;
3716 -> 3710;
3717 -> 3716;
3717 -> 3706;
3718 -> 3708;
3718 -> 3717;
3718 -> 3706;
3719 -> 3694;
3719 -> 3328;
3720 -> 3719;
3720 -> 3694;
3720 -> 3328;
3721 -> 3719;
3721 -> 3694;
3721 -> 3720;
3722 -> 3721;
3722 -> 3720;
3723 -> 3720;
3724 -> 3722;
3724 -> 3723;
3725 -> 3724;
3725 -> 3694;
3725 -> 0;
3725 -> 3723;
3726 -> 3724;
3726 -> 3694;
3726 -> 3723;
3727 -> 3723;
3728 -> 3726;
3728 -> 3727;
3729 -> 3727;
3730 -> 3728;
3730 -> 3729;
3730 -> 3727;
3731 -> 3730;
3732 -> 3728;
3732 -> 3694;
3732 -> 3730;
3733 -> 3727;
3734 -> 3733;
3734 -> 3723;
3735 -> 3725;
3735 -> 3734;
3735 -> 3723;
3736 -> 3225;
3736 -> 3694;
3737 -> 3226;
3737 -> 3694;
3738 -> 3736;
3738 -> 3694;
3739 -> 3737;
3739 -> 3694;
3740 -> 3694;
3741 -> 3694;
3742 -> 3694;
3743 -> 3739;
3743 -> 3742;
3743 -> 3694;
3744 -> 3694;
3745 -> 3694;
3745 -> 3744;
3746 -> 3694;
3746 -> 0;
3747 -> 3694;
3748 -> 3741;
3748 -> 3747;
3749 -> 3748;
3750 -> 3748;
3751 -> 3694;
3751 -> 3748;
3752 -> 3748;
3753 -> 3751;
3753 -> 3752;
3754 -> 3752;
3755 -> 3753;
3755 -> 3754;
3756 -> 3754;
3757 -> 3755;
3757 -> 3756;
3757 -> 3754;
3758 -> 3754;
3759 -> 3758;
3759 -> 3752;
3760 -> 3694;
3760 -> 3759;
3761 -> 3694;
3762 -> 3378;
3762 -> 0;
3762 -> 3694;
3763 -> 945;
3763 -> 939;
3764 -> 3763;
3764 -> 3694;
3764 -> 939;
3765 -> 945;
3765 -> 939;
3766 -> 3765;
3766 -> 3764;
3766 -> 939;
3767 -> 3577;
3767 -> 3766;
3767 -> 939;
3768 -> 3265;
3768 -> 3766;
3768 -> 939;
3769 -> 3265;
3769 -> 3766;
3769 -> 3768;
3770 -> 3265;
3770 -> 3766;
3770 -> 0;
3770 -> 939;
3771 -> 3265;
3771 -> 3766;
3771 -> 939;
3772 -> 3269;
3772 -> 3771;
3773 -> 3265;
3773 -> 3766;
3773 -> 939;
3774 -> 945;
3774 -> 939;
3775 -> 3774;
3775 -> 3766;
3775 -> 939;
3776 -> 0;
3776 -> 3775;
3777 -> 3225;
3777 -> 3776;
3778 -> 3226;
3778 -> 3776;
3779 -> 3777;
3779 -> 3776;
3780 -> 3778;
3780 -> 3776;
3781 -> 3776;
3782 -> 3776;
3783 -> 3776;
3784 -> 3780;
3784 -> 3783;
3784 -> 3776;
3785 -> 3776;
3786 -> 3776;
3786 -> 3785;
3787 -> 3776;
3787 -> 0;
3788 -> 3776;
3789 -> 3782;
3789 -> 3788;
3790 -> 3789;
3791 -> 3789;
3792 -> 3776;
3792 -> 3789;
3793 -> 3789;
3794 -> 3792;
3794 -> 3793;
3795 -> 3793;
3796 -> 3794;
3796 -> 3795;
3797 -> 3795;
3798 -> 3796;
3798 -> 3797;
3798 -> 3795;
3799 -> 3795;
3800 -> 3799;
3800 -> 3793;
3801 -> 3776;
3801 -> 3800;
3802 -> 3776;
3803 -> 3378;
3803 -> 0;
3803 -> 3776;
3804 -> 945;
3804 -> 939;
3805 -> 3804;
3805 -> 3776;
3805 -> 939;
3806 -> 3265;
3806 -> 3805;
3806 -> 939;
3807 -> 3265;
3807 -> 3805;
3807 -> 3806;
3808 -> 3265;
3808 -> 3805;
3808 -> 0;
3808 -> 939;
3809 -> 3265;
3809 -> 3805;
3809 -> 939;
3810 -> 3269;
3810 -> 3809;
3811 -> 3810;
3812 -> 3810;
3813 -> 3265;
3813 -> 3805;
3813 -> 3810;
3814 -> 3810;
3815 -> 3813;
3815 -> 3814;
3816 -> 3814;
3817 -> 3815;
3817 -> 3816;
3818 -> 3816;
3819 -> 3817;
3819 -> 3818;
3819 -> 3816;
3820 -> 3816;
3821 -> 3820;
3821 -> 3814;
3822 -> 3265;
3822 -> 3805;
3822 -> 3821;
3823 -> 3265;
3823 -> 3805;
3823 -> 939;
3824 -> 3774;
3824 -> 3805;
3825 -> 0;
3825 -> 3824;
3826 -> 3281;
3826 -> 3825;
3826 -> 939;
3827 -> 3265;
3827 -> 3825;
3827 -> 939;
3828 -> 3265;
3828 -> 3825;
3828 -> 3827;
3829 -> 3265;
3829 -> 3825;
3829 -> 0;
3829 -> 939;
3830 -> 3265;
3830 -> 3825;
3830 -> 939;
3831 -> 3269;
3831 -> 3830;
3832 -> 3265;
3832 -> 3825;
3832 -> 939;
3833 -> 3825;
3833 -> 0;
3833 -> 3170;
3834 -> 3825;
3835 -> 3834;
3835 -> 3825;
3836 -> 3825;
3836 -> 3170;
3837 -> 3196;
3837 -> 3825;
3837 -> 3195;
3838 -> 3837;
3838 -> 3825;
3838 -> 3195;
3839 -> 3196;
3839 -> 3825;
3839 -> 3195;
3840 -> 3199;
3840 -> 3839;
3841 -> 3196;
3841 -> 3825;
3841 -> 3840;
3842 -> 3837;
3842 -> 3840;
3843 -> 3840;
3844 -> 3842;
3844 -> 3843;
3845 -> 3843;
3846 -> 3844;
3846 -> 3845;
3846 -> 3843;
3847 -> 3846;
3848 -> 3844;
3848 -> 3825;
3848 -> 3846;
3849 -> 3843;
3850 -> 3849;
3850 -> 3840;
3851 -> 3841;
3851 -> 3850;
3851 -> 3840;
3852 -> 3196;
3852 -> 3851;
3853 -> 3196;
3853 -> 3825;
3853 -> 3851;
3854 -> 3200;
3854 -> 3825;
3854 -> 3220;
3854 -> 3195;
3855 -> 3825;
3855 -> 3305;
3856 -> 3855;
3856 -> 3825;
3856 -> 3305;
3857 -> 3855;
3857 -> 3825;
3857 -> 3856;
3858 -> 3857;
3858 -> 3856;
3859 -> 3856;
3860 -> 3858;
3860 -> 3859;
3861 -> 3860;
3861 -> 3825;
3861 -> 0;
3861 -> 3859;
3862 -> 3860;
3862 -> 3825;
3862 -> 3859;
3863 -> 3859;
3864 -> 3862;
3864 -> 3863;
3865 -> 3863;
3866 -> 3864;
3866 -> 3865;
3866 -> 3863;
3867 -> 3866;
3868 -> 3864;
3868 -> 3825;
3868 -> 3866;
3869 -> 3863;
3870 -> 3869;
3870 -> 3859;
3871 -> 3861;
3871 -> 3870;
3871 -> 3859;
3872 -> 3825;
3872 -> 3328;
3873 -> 3872;
3873 -> 3825;
3873 -> 3328;
3874 -> 3872;
3874 -> 3825;
3874 -> 3873;
3875 -> 3874;
3875 -> 3873;
3876 -> 3873;
3877 -> 3875;
3877 -> 3876;
3878 -> 3877;
3878 -> 3825;
3878 -> 0;
3878 -> 3876;
3879 -> 3877;
3879 -> 3825;
3879 -> 3876;
3880 -> 3876;
3881 -> 3879;
3881 -> 3880;
3882 -> 3880;
3883 -> 3881;
3883 -> 3882;
3883 -> 3880;
3884 -> 3883;
3885 -> 3881;
3885 -> 3825;
3885 -> 3883;
3886 -> 3880;
3887 -> 3886;
3887 -> 3876;
3888 -> 3878;
3888 -> 3887;
3888 -> 3876;
3889 -> 3225;
3889 -> 3825;
3890 -> 3226;
3890 -> 3825;
3891 -> 3889;
3891 -> 3825;
3892 -> 3890;
3892 -> 3825;
3893 -> 3825;
3894 -> 3825;
3895 -> 3825;
3896 -> 3892;
3896 -> 3895;
3896 -> 3825;
3897 -> 3825;
3898 -> 3825;
3898 -> 3897;
3899 -> 3825;
3899 -> 0;
3900 -> 3825;
3901 -> 3894;
3901 -> 3900;
3902 -> 3901;
3903 -> 3901;
3904 -> 3825;
3904 -> 3901;
3905 -> 3901;
3906 -> 3904;
3906 -> 3905;
3907 -> 3905;
3908 -> 3906;
3908 -> 3907;
3909 -> 3907;
3910 -> 3908;
3910 -> 3909;
3910 -> 3907;
3911 -> 3907;
3912 -> 3911;
3912 -> 3905;
3913 -> 3825;
3913 -> 3912;
3914 -> 3825;
3915 -> 3378;
3915 -> 0;
3915 -> 3825;
3916 -> 0;
3916 -> 3915;
3917 -> 3916;
3917 -> 3379;
3917 -> 3825;
3917 -> 3915;
3918 -> 3915;
3919 -> 3918;
3920 -> 3917;
3920 -> 3919;
3921 -> 3920;
3921 -> 3918;
3922 -> 3196;
3922 -> 3917;
3922 -> 3195;
3923 -> 3922;
3923 -> 3917;
3923 -> 3195;
3924 -> 3196;
3924 -> 3917;
3924 -> 3195;
3925 -> 3199;
3925 -> 3924;
3926 -> 3196;
3926 -> 3917;
3926 -> 3925;
3927 -> 3922;
3927 -> 3925;
3928 -> 3925;
3929 -> 3927;
3929 -> 3928;
3930 -> 3928;
3931 -> 3929;
3931 -> 3930;
3931 -> 3928;
3932 -> 3931;
3933 -> 3929;
3933 -> 3917;
3933 -> 3931;
3934 -> 3928;
3935 -> 3934;
3935 -> 3925;
3936 -> 3926;
3936 -> 3935;
3936 -> 3925;
3937 -> 3196;
3937 -> 3936;
3938 -> 3196;
3938 -> 3917;
3938 -> 3936;
3939 -> 3200;
3939 -> 3917;
3939 -> 3220;
3939 -> 3195;
3940 -> 3265;
3940 -> 3917;
3940 -> 939;
3941 -> 3265;
3941 -> 3917;
3941 -> 3940;
3942 -> 3265;
3942 -> 3917;
3942 -> 0;
3942 -> 939;
3943 -> 3265;
3943 -> 3917;
3943 -> 939;
3944 -> 3269;
3944 -> 3943;
3945 -> 3265;
3945 -> 3917;
3945 -> 939;
3946 -> 3281;
3946 -> 3917;
3946 -> 939;
3947 -> 3225;
3947 -> 3917;
3948 -> 3226;
3948 -> 3917;
3949 -> 3947;
3949 -> 3917;
3950 -> 3948;
3950 -> 3917;
3951 -> 3917;
3952 -> 3917;
3953 -> 3917;
3954 -> 3950;
3954 -> 3953;
3954 -> 3917;
3955 -> 3917;
3956 -> 3917;
3956 -> 3955;
3957 -> 3917;
3957 -> 0;
3958 -> 3917;
3959 -> 3952;
3959 -> 3958;
3960 -> 3959;
3961 -> 3959;
3962 -> 3917;
3962 -> 3959;
3963 -> 3959;
3964 -> 3962;
3964 -> 3963;
3965 -> 3963;
3966 -> 3964;
3966 -> 3965;
3967 -> 3965;
3968 -> 3966;
3968 -> 3967;
3968 -> 3965;
3969 -> 3965;
3970 -> 3969;
3970 -> 3963;
3971 -> 3917;
3971 -> 3970;
3972 -> 3917;
3973 -> 3917;
3973 -> 3305;
3974 -> 3973;
3974 -> 3917;
3974 -> 3305;
3975 -> 3973;
3975 -> 3917;
3975 -> 3974;
3976 -> 3975;
3976 -> 3974;
3977 -> 3974;
3978 -> 3976;
3978 -> 3977;
3979 -> 3978;
3979 -> 3917;
3979 -> 0;
3979 -> 3977;
3980 -> 3978;
3980 -> 3917;
3980 -> 3977;
3981 -> 3977;
3982 -> 3980;
3982 -> 3981;
3983 -> 3981;
3984 -> 3982;
3984 -> 3983;
3984 -> 3981;
3985 -> 3984;
3986 -> 3982;
3986 -> 3917;
3986 -> 3984;
3987 -> 3981;
3988 -> 3987;
3988 -> 3977;
3989 -> 3979;
3989 -> 3988;
3989 -> 3977;
3990 -> 3917;
3990 -> 3328;
3991 -> 3990;
3991 -> 3917;
3991 -> 3328;
3992 -> 3990;
3992 -> 3917;
3992 -> 3991;
3993 -> 3992;
3993 -> 3991;
3994 -> 3991;
3995 -> 3993;
3995 -> 3994;
3996 -> 3995;
3996 -> 3917;
3996 -> 0;
3996 -> 3994;
3997 -> 3995;
3997 -> 3917;
3997 -> 3994;
3998 -> 3994;
3999 -> 3997;
3999 -> 3998;
4000 -> 3998;
4001 -> 3999;
4001 -> 4000;
4001 -> 3998;
4002 -> 4001;
4003 -> 3999;
4003 -> 3917;
4003 -> 4001;
4004 -> 3998;
4005 -> 4004;
4005 -> 3994;
4006 -> 3996;
4006 -> 4005;
4006 -> 3994;
4007 -> 3968;
4008 -> 3966;
4008 -> 3917;
4008 -> 3968;
4009 -> 3115;
4009 -> 3917;
4009 -> 939;
4010 -> 3126;
4010 -> 3917;
4010 -> 3125;
4011 -> 3126;
4011 -> 3917;
4011 -> 3125;
4012 -> 4011;
4012 -> 3123;
4013 -> 3917;
4013 -> 939;
4014 -> 3917;
4014 -> 3142;
4015 -> 4014;
4015 -> 3141;
4016 -> 3917;
4016 -> 939;
4017 -> 4016;
4017 -> 3134;
4017 -> 3917;
4017 -> 939;
4018 -> 3137;
4018 -> 3917;
4019 -> 3281;
4019 -> 3946;
4020 -> 2950;
4020 -> 4019;
4020 -> 2949;
4021 -> 2950;
4021 -> 4019;
4021 -> 2949;
4022 -> 4021;
4022 -> 2947;
4023 -> 914;
4024 -> 927;
4024 -> 4023;
4024 -> 914;
4025 -> 4019;
4025 -> 914;
4026 -> 917;
4026 -> 4025;
4026 -> 4019;
4026 -> 914;
4027 -> 923;
4027 -> 914;
4028 -> 4027;
4028 -> 4026;
4028 -> 914;
4029 -> 4019;
4029 -> 4028;
4029 -> 914;
4030 -> 4028;
4030 -> 4029;
4031 -> 924;
4031 -> 4029;
4032 -> 4029;
4033 -> 4029;
4034 -> 4030;
4034 -> 4033;
4035 -> 4031;
4035 -> 4033;
4036 -> 4032;
4036 -> 4033;
4037 -> 4034;
4037 -> 4036;
4037 -> 4033;
4038 -> 4035;
4038 -> 924;
4038 -> 4033;
4039 -> 4036;
4039 -> 4037;
4039 -> 4038;
4040 -> 4039;
4040 -> 4038;
4041 -> 0;
4041 -> 4038;
4042 -> 4038;
4043 -> 4040;
4043 -> 4042;
4043 -> 4038;
4044 -> 4040;
4044 -> 4043;
4045 -> 4043;
4046 -> 4044;
4046 -> 4045;
4046 -> 4043;
4047 -> 4046;
4047 -> 4043;
4048 -> 4043;
4049 -> 4047;
4049 -> 4048;
4050 -> 4036;
4050 -> 4048;
4051 -> 4049;
4051 -> 4044;
4051 -> 4046;
4051 -> 4048;
4052 -> 4051;
4052 -> 4048;
4053 -> 4049;
4053 -> 4044;
4053 -> 4046;
4053 -> 4048;
4054 -> 4052;
4054 -> 4048;
4055 -> 4048;
4056 -> 4051;
4056 -> 4048;
4057 -> 4052;
4057 -> 4048;
4058 -> 4057;
4058 -> 4054;
4058 -> 4048;
4059 -> 4058;
4059 -> 4036;
4059 -> 4033;
4060 -> 813;
4060 -> 812;
4061 -> 812;
4062 -> 4060;
4062 -> 4061;
4063 -> 4061;
4064 -> 4062;
4064 -> 4063;
4065 -> 4063;
4066 -> 4064;
4066 -> 4065;
4067 -> 4066;
4067 -> 4059;
4067 -> 4065;
4068 -> 4066;
4068 -> 4059;
4068 -> 4065;
4069 -> 4068;
4069 -> 4063;
4070 -> 4064;
4070 -> 4059;
4070 -> 4063;
4071 -> 4070;
4071 -> 812;
4072 -> 804;
4072 -> 4071;
4072 -> 803;
4073 -> 4072;
4073 -> 807;
4073 -> 803;
4074 -> 804;
4074 -> 4072;
4074 -> 803;
4075 -> 4074;
4075 -> 807;
4075 -> 803;
4076 -> 804;
4076 -> 4074;
4076 -> 803;
4077 -> 4076;
4077 -> 807;
4077 -> 803;
4078 -> 804;
4078 -> 4076;
4078 -> 803;
4079 -> 4078;
4079 -> 807;
4079 -> 803;
4080 -> 807;
4080 -> 773;
4080 -> 4078;
4080 -> 803;
4081 -> 803;
4082 -> 4080;
4082 -> 4081;
4083 -> 4081;
4084 -> 4083;
4085 -> 4084;
4086 -> 4082;
4086 -> 4085;
4087 -> 4086;
4087 -> 4084;
4088 -> 803;
4089 -> 799;
4089 -> 4082;
4089 -> 783;
4090 -> 4089;
4090 -> 791;
4090 -> 783;
4091 -> 789;
4091 -> 783;
4092 -> 799;
4092 -> 4091;
4092 -> 4089;
4092 -> 783;
4093 -> 783;
4094 -> 790;
4094 -> 4093;
4094 -> 783;
4095 -> 783;
4096 -> 784;
4096 -> 4095;
4096 -> 783;
4097 -> 4082;
4097 -> 4096;
4098 -> 786;
4098 -> 4096;
4099 -> 784;
4099 -> 4096;
4100 -> 799;
4100 -> 4097;
4100 -> 4098;
4100 -> 4099;
4100 -> 4092;
4100 -> 739;
4100 -> 4096;
4101 -> 785;
4101 -> 4096;
4102 -> 745;
4103 -> 745;
4104 -> 753;
4104 -> 4103;
4104 -> 745;
4105 -> 754;
4105 -> 4103;
4105 -> 745;
4106 -> 4104;
4106 -> 4105;
4106 -> 745;
4107 -> 761;
4107 -> 745;
4108 -> 4107;
4108 -> 708;
4109 -> 708;
4110 -> 732;
4110 -> 4109;
4110 -> 708;
4111 -> 4108;
4111 -> 4110;
4112 -> 4111;
4112 -> 708;
4113 -> 4111;
4113 -> 708;
4114 -> 4113;
4114 -> 670;
4115 -> 4114;
4115 -> 22;
4116 -> 4115;
4116 -> 1;
}