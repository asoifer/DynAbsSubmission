digraph G {
0 [label="EXTERNAL"];
1 [label="param InitializeTestModule(this) 651842"];
2 [label="RuntimeHelpers.RunModuleConstructor(typeof(TestBase).Module.ModuleHandle); 651843"];
3 [label="param TypeTests(this) 651844"];
4 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 651845"];
5 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 651846"];
6 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 651847"];
7 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 651848"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 651849"];
9 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 651850"];
10 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 651851"];
11 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 651852"];
12 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 651853"];
13 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 651854"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 651855"];
15 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 651856"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 651857"];
17 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 651858"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 651859"];
19 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 651860"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 651861"];
21 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 651862"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 651863"];
23 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 651864"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 651865"];
25 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 651866"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 651867"];
27 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 651868"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 651869"];
29 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 651870"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 651871"];
31 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 651872"];
32 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 651873"];
33 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 651874"];
34 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 651875"];
35 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 651876"];
36 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 651877"];
37 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 651878"];
38 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 651879"];
39 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 651880"];
40 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 651881"];
41 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 651882"];
42 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 651883"];
43 [label="LazyThreadSafetyMode.PublicationOnly 651884"];
44 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 651885"];
45 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 651886"];
46 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 651887"];
47 [label="LazyThreadSafetyMode.PublicationOnly 651888"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 651889"];
49 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 651890"];
50 [label="RuntimeUtilities.IsCoreClrRuntime 651891"];
51 [label="'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' 651892"];
52 [label="new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51') 651893"];
53 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 651894"];
54 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 651895"];
55 [label="LazyThreadSafetyMode.PublicationOnly 651896"];
56 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 651897"];
57 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 651898"];
58 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 651899"];
59 [label="LazyThreadSafetyMode.PublicationOnly 651900"];
60 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 651901"];
61 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 651902"];
62 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 651903"];
63 [label="LazyThreadSafetyMode.PublicationOnly 651904"];
64 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 651905"];
65 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 651906"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 651907"];
67 [label="LazyThreadSafetyMode.PublicationOnly 651908"];
68 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651909"];
69 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651910"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 651911"];
71 [label="LazyThreadSafetyMode.PublicationOnly 651912"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651913"];
73 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651914"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 651915"];
75 [label="LazyThreadSafetyMode.PublicationOnly 651916"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651917"];
77 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651918"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 651919"];
79 [label="LazyThreadSafetyMode.PublicationOnly 651920"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651921"];
81 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651922"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 651923"];
83 [label="LazyThreadSafetyMode.PublicationOnly 651924"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651925"];
85 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651926"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 651927"];
87 [label="LazyThreadSafetyMode.PublicationOnly 651928"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651929"];
89 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651930"];
90 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 651931"];
91 [label="LazyThreadSafetyMode.PublicationOnly 651932"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651933"];
93 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651934"];
94 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 651935"];
95 [label="LazyThreadSafetyMode.PublicationOnly 651936"];
96 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 651937"];
97 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 651938"];
98 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 651939"];
99 [label="LazyThreadSafetyMode.PublicationOnly 651940"];
100 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 651941"];
101 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 651942"];
102 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 651943"];
103 [label="LazyThreadSafetyMode.PublicationOnly 651944"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651945"];
105 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651946"];
106 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 651947"];
107 [label="LazyThreadSafetyMode.PublicationOnly 651948"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651949"];
109 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651950"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 651951"];
111 [label="LazyThreadSafetyMode.PublicationOnly 651952"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651953"];
113 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651954"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 651955"];
115 [label="LazyThreadSafetyMode.PublicationOnly 651956"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651957"];
117 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651958"];
118 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 651959"];
119 [label="LazyThreadSafetyMode.PublicationOnly 651960"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 651961"];
121 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 651962"];
122 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 651963"];
123 [label="LazyThreadSafetyMode.PublicationOnly 651964"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651965"];
125 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651966"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 651967"];
127 [label="LazyThreadSafetyMode.PublicationOnly 651968"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651969"];
129 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651970"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 651971"];
131 [label="LazyThreadSafetyMode.PublicationOnly 651972"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651973"];
133 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651974"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 651975"];
135 [label="LazyThreadSafetyMode.PublicationOnly 651976"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651977"];
137 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651978"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 651979"];
139 [label="LazyThreadSafetyMode.PublicationOnly 651980"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651981"];
141 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651982"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 651983"];
143 [label="LazyThreadSafetyMode.PublicationOnly 651984"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651985"];
145 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651986"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 651987"];
147 [label="LazyThreadSafetyMode.PublicationOnly 651988"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651989"];
149 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651990"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 651991"];
151 [label="LazyThreadSafetyMode.PublicationOnly 651992"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651993"];
153 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651994"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 651995"];
155 [label="LazyThreadSafetyMode.PublicationOnly 651996"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651997"];
157 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 651998"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 651999"];
159 [label="LazyThreadSafetyMode.PublicationOnly 652000"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 652001"];
161 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 652002"];
162 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 652003"];
163 [label="LazyThreadSafetyMode.PublicationOnly 652004"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 652005"];
165 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 652006"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 652007"];
167 [label="LazyThreadSafetyMode.PublicationOnly 652008"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 652009"];
169 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 652010"];
170 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 652011"];
171 [label="LazyThreadSafetyMode.PublicationOnly 652012"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 652013"];
173 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 652014"];
174 [label="@'R:\\Invalid.dll' 652015"];
175 [label="fullPath: @'R:\\Invalid.dll' 652016"];
176 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 652017"];
177 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 652018"];
178 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 652019"];
179 [label="MscorlibRef_v4_0_30316_17626 652020"];
180 [label="Net451.mscorlib 652021"];
181 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 652022"];
182 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 652023"];
183 [label="'/*<bind>*/' 652024"];
184 [label="StartString = '/*<bind>*/' 652025"];
185 [label="'/*</bind>*/' 652026"];
186 [label="EndString = '/*</bind>*/' 652027"];
187 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 652028"];
188 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 652029"];
189 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 652030"];
190 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 652031"];
191 [label="param CSharpTestBase(this) 652032"];
192 [label="param CommonTestBase(this) 652033"];
193 [label="param TestBase(this) 652034"];
194 [label="_temp 652035"];
195 [label="param SimpleGeneric(this) 652036"];
196 [label="var text =\n@'namespace NS\n{\n    public interface IGoo<T> {}\n\n    internal class A<V, U> {}\n\n    public struct S<X, Y, Z> {}\n}'; 652037"];
197 [label="var comp = CreateCompilation(text); 652038"];
198 [label="text 652039"];
199 [label="param operator(string source) 652040"];
200 [label="source 652041"];
201 [label="new CSharpTestSource(source) 652042"];
202 [label="param CSharpTestSource(object value) 652043"];
203 [label="param CSharpTestSource(this) 652044"];
204 [label="Value 652045"];
205 [label="var comp = CreateCompilation(text); 652046"];
206 [label="var comp = CreateCompilation(text); 652047"];
207 [label="CreateCompilation(text) 652048"];
208 [label="param CreateCompilation(CSharpTestSource source) 652049"];
209 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 652050"];
210 [label="param CreateCompilation(CSharpCompilationOptions options = null) 652051"];
211 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 652052"];
212 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 652053"];
213 [label="param CreateCompilation(string assemblyName = '') 652054"];
214 [label="param CreateCompilation(string sourceFileName = '') 652055"];
215 [label="param CreateCompilation(bool skipUsesIsNullable = false) 652056"];
216 [label="source 652057"];
217 [label="targetFramework 652058"];
218 [label="references 652059"];
219 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 652060"];
220 [label="param GetReferences(TargetFramework tf) 652061"];
221 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 652062"];
222 [label="var references = GetReferences(tf); 652063"];
223 [label="GetReferences(tf) 652064"];
224 [label="param GetReferences(TargetFramework targetFramework) 652065"];
225 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 652066"];
226 [label="StandardReferences 652067"];
227 [label="RuntimeUtilities.IsCoreClrRuntime 652068"];
228 [label="NetStandard20References 652069"];
229 [label="ImmutableArray.Create<MetadataReference>(NetStandard20.netstandard, NetStandard20.mscorlib, NetStandard20.SystemRuntime, NetStandard20.SystemCore, NetStandard20.SystemDynamicRuntime, NetStandard20.SystemLinq, NetStandard20.SystemLinqExpressions) 652070"];
230 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 652071"];
231 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 652072"];
232 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 652073"];
233 [label="return references; 652074"];
234 [label="options 652075"];
235 [label="parseOptions 652076"];
236 [label="assemblyName 652077"];
237 [label="sourceFileName 652078"];
238 [label="skipUsesIsNullable 652079"];
239 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 652080"];
240 [label="param CreateEmptyCompilation(CSharpTestSource source) 652081"];
241 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 652082"];
242 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 652083"];
243 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 652084"];
244 [label="param CreateEmptyCompilation(string assemblyName = '') 652085"];
245 [label="param CreateEmptyCompilation(string sourceFileName = '') 652086"];
246 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 652087"];
247 [label="source 652088"];
248 [label="references 652089"];
249 [label="options 652090"];
250 [label="parseOptions 652091"];
251 [label="assemblyName 652092"];
252 [label="sourceFileName 652093"];
253 [label="skipUsesIsNullable 652094"];
254 [label="null 652095"];
255 [label="experimentalFeature: null 652096"];
256 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 652097"];
257 [label="param CreateCompilationCore(CSharpTestSource source) 652098"];
258 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 652099"];
259 [label="param CreateCompilationCore(CSharpCompilationOptions options) 652100"];
260 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 652101"];
261 [label="param CreateCompilationCore(string assemblyName) 652102"];
262 [label="param CreateCompilationCore(string sourceFileName) 652103"];
263 [label="param CreateCompilationCore(bool skipUsesIsNullable) 652104"];
264 [label="param CreateCompilationCore(MessageID? experimentalFeature) 652105"];
265 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 652106"];
266 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 652107"];
267 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 652108"];
268 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 652109"];
269 [label="param GetSyntaxTrees(string sourceFileName = '') 652110"];
270 [label="param GetSyntaxTrees(this) 652111"];
271 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 652112"];
272 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 652113"];
273 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 652114"];
274 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 652115"];
275 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 652116"];
276 [label="param Parse(string text) 652117"];
277 [label="param Parse(string filename = '') 652118"];
278 [label="param Parse(CSharpParseOptions options = null) 652119"];
279 [label="param Parse(Encoding encoding = null) 652120"];
280 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 652121"];
281 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 652122"];
282 [label="kind: SourceCodeKind.Regular 652123"];
283 [label="documentationMode: DocumentationMode.Parse 652124"];
284 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 652125"];
285 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 652126"];
286 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 652127"];
287 [label="SourceCodeKind.Script 652128"];
288 [label="Regular.WithKind(SourceCodeKind.Script) 652129"];
289 [label="Script = Regular.WithKind(SourceCodeKind.Script) 652130"];
290 [label="LanguageVersion.CSharp6 652131"];
291 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 652132"];
292 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 652133"];
293 [label="LanguageVersion.CSharp7 652134"];
294 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 652135"];
295 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 652136"];
296 [label="LanguageVersion.CSharp7_1 652137"];
297 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 652138"];
298 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 652139"];
299 [label="LanguageVersion.CSharp7_2 652140"];
300 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 652141"];
301 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 652142"];
302 [label="LanguageVersion.CSharp7_3 652143"];
303 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 652144"];
304 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 652145"];
305 [label="LanguageVersion.Default 652146"];
306 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 652147"];
307 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 652148"];
308 [label="LanguageVersion.Preview 652149"];
309 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 652150"];
310 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 652151"];
311 [label="LanguageVersion.CSharp8 652152"];
312 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 652153"];
313 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 652154"];
314 [label="LanguageVersion.CSharp9 652155"];
315 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 652156"];
316 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 652157"];
317 [label="DocumentationMode.Diagnose 652158"];
318 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 652159"];
319 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 652160"];
320 [label="Regular 652161"];
321 [label="'UseLegacyStrongNameProvider' 652162"];
322 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 652163"];
323 [label="param WithFeature(this CSharpParseOptions options) 652164"];
324 [label="param WithFeature(string feature) 652165"];
325 [label="param WithFeature(string value = 'true') 652166"];
326 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 652167"];
327 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 652168"];
328 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 652169"];
329 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 652170"];
330 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 652171"];
331 [label="new[] { new KeyValuePair<string, string>(feature, value) } 652172"];
332 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 652173"];
333 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 652174"];
334 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 652175"];
335 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 652176"];
336 [label="1 652177"];
337 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 652178"];
338 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 652179"];
339 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 652180"];
340 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 652181"];
341 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 652182"];
342 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 652183"];
343 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 652184"];
344 [label="LanguageVersion.CSharp8 652185"];
345 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 652186"];
346 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 652187"];
347 [label="RegularWithExtendedPartialMethods = RegularPreview 652188"];
348 [label="new SmallDictionary<string, string> { } 652189"];
349 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 652190"];
350 [label="kind: SourceCodeKind.Regular 652191"];
351 [label="documentationMode: DocumentationMode.None 652192"];
352 [label="languageVersion: LanguageVersion.Preview 652193"];
353 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 652194"];
354 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 652195"];
355 [label="s_experimentalFeatures 652196"];
356 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 652197"];
357 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 652198"];
358 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 652199"];
359 [label="'testV7SwitchBinder' 652200"];
360 [label="'true' 652201"];
361 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 652202"];
362 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 652203"];
363 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 652204"];
364 [label="RegularWithoutRecursivePatterns = Regular7_3 652205"];
365 [label="RegularWithRecursivePatterns = Regular8 652206"];
366 [label="RegularWithoutPatternCombinators = Regular8 652207"];
367 [label="RegularWithPatternCombinators = RegularPreview 652208"];
368 [label="OutputKind.DynamicallyLinkedLibrary 652209"];
369 [label="OptimizationLevel.Release 652210"];
370 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 652211"];
371 [label="param CreateTestOptions(OutputKind outputKind) 652212"];
372 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 652213"];
373 [label="param CreateTestOptions(bool allowUnsafe = false) 652214"];
374 [label="outputKind 652215"];
375 [label="optimizationLevel: optimizationLevel 652216"];
376 [label="warningLevel: Diagnostic.MaxWarningLevel 652217"];
377 [label="allowUnsafe: allowUnsafe 652218"];
378 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652219"];
379 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652220"];
380 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 652221"];
381 [label="OutputKind.ConsoleApplication 652222"];
382 [label="OptimizationLevel.Release 652223"];
383 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 652224"];
384 [label="param CreateTestOptions(OutputKind outputKind) 652225"];
385 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 652226"];
386 [label="param CreateTestOptions(bool allowUnsafe = false) 652227"];
387 [label="outputKind 652228"];
388 [label="optimizationLevel: optimizationLevel 652229"];
389 [label="warningLevel: Diagnostic.MaxWarningLevel 652230"];
390 [label="allowUnsafe: allowUnsafe 652231"];
391 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652232"];
392 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652233"];
393 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 652234"];
394 [label="true 652235"];
395 [label="ReleaseDll.WithDebugPlusMode(true) 652236"];
396 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 652237"];
397 [label="true 652238"];
398 [label="ReleaseExe.WithDebugPlusMode(true) 652239"];
399 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 652240"];
400 [label="OutputKind.DynamicallyLinkedLibrary 652241"];
401 [label="OptimizationLevel.Debug 652242"];
402 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 652243"];
403 [label="param CreateTestOptions(OutputKind outputKind) 652244"];
404 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 652245"];
405 [label="param CreateTestOptions(bool allowUnsafe = false) 652246"];
406 [label="outputKind 652247"];
407 [label="optimizationLevel: optimizationLevel 652248"];
408 [label="warningLevel: Diagnostic.MaxWarningLevel 652249"];
409 [label="allowUnsafe: allowUnsafe 652250"];
410 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652251"];
411 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652252"];
412 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 652253"];
413 [label="OutputKind.ConsoleApplication 652254"];
414 [label="OptimizationLevel.Debug 652255"];
415 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 652256"];
416 [label="param CreateTestOptions(OutputKind outputKind) 652257"];
417 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 652258"];
418 [label="param CreateTestOptions(bool allowUnsafe = false) 652259"];
419 [label="outputKind 652260"];
420 [label="optimizationLevel: optimizationLevel 652261"];
421 [label="warningLevel: Diagnostic.MaxWarningLevel 652262"];
422 [label="allowUnsafe: allowUnsafe 652263"];
423 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652264"];
424 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652265"];
425 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 652266"];
426 [label="OutputKind.WindowsRuntimeMetadata 652267"];
427 [label="OptimizationLevel.Release 652268"];
428 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 652269"];
429 [label="param CreateTestOptions(OutputKind outputKind) 652270"];
430 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 652271"];
431 [label="param CreateTestOptions(bool allowUnsafe = false) 652272"];
432 [label="outputKind 652273"];
433 [label="optimizationLevel: optimizationLevel 652274"];
434 [label="warningLevel: Diagnostic.MaxWarningLevel 652275"];
435 [label="allowUnsafe: allowUnsafe 652276"];
436 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652277"];
437 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652278"];
438 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 652279"];
439 [label="OutputKind.WindowsRuntimeMetadata 652280"];
440 [label="OptimizationLevel.Debug 652281"];
441 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 652282"];
442 [label="param CreateTestOptions(OutputKind outputKind) 652283"];
443 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 652284"];
444 [label="param CreateTestOptions(bool allowUnsafe = false) 652285"];
445 [label="outputKind 652286"];
446 [label="optimizationLevel: optimizationLevel 652287"];
447 [label="warningLevel: Diagnostic.MaxWarningLevel 652288"];
448 [label="allowUnsafe: allowUnsafe 652289"];
449 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652290"];
450 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652291"];
451 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 652292"];
452 [label="OutputKind.NetModule 652293"];
453 [label="OptimizationLevel.Release 652294"];
454 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 652295"];
455 [label="param CreateTestOptions(OutputKind outputKind) 652296"];
456 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 652297"];
457 [label="param CreateTestOptions(bool allowUnsafe = false) 652298"];
458 [label="outputKind 652299"];
459 [label="optimizationLevel: optimizationLevel 652300"];
460 [label="warningLevel: Diagnostic.MaxWarningLevel 652301"];
461 [label="allowUnsafe: allowUnsafe 652302"];
462 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652303"];
463 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652304"];
464 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 652305"];
465 [label="OutputKind.NetModule 652306"];
466 [label="OptimizationLevel.Debug 652307"];
467 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 652308"];
468 [label="param CreateTestOptions(OutputKind outputKind) 652309"];
469 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 652310"];
470 [label="param CreateTestOptions(bool allowUnsafe = false) 652311"];
471 [label="outputKind 652312"];
472 [label="optimizationLevel: optimizationLevel 652313"];
473 [label="warningLevel: Diagnostic.MaxWarningLevel 652314"];
474 [label="allowUnsafe: allowUnsafe 652315"];
475 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652316"];
476 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 652317"];
477 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 652318"];
478 [label="true 652319"];
479 [label="ReleaseDll.WithAllowUnsafe(true) 652320"];
480 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 652321"];
481 [label="true 652322"];
482 [label="ReleaseExe.WithAllowUnsafe(true) 652323"];
483 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 652324"];
484 [label="true 652325"];
485 [label="DebugDll.WithAllowUnsafe(true) 652326"];
486 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 652327"];
487 [label="true 652328"];
488 [label="DebugExe.WithAllowUnsafe(true) 652329"];
489 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 652330"];
490 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 652331"];
491 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 652332"];
492 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 652333"];
493 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 652334"];
494 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 652335"];
495 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 652336"];
496 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 652337"];
497 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 652338"];
498 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 652339"];
499 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 652340"];
500 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 652341"];
501 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 652342"];
502 [label="DebugInformationFormat.Pdb 652343"];
503 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 652344"];
504 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 652345"];
505 [label="options = TestOptions.Regular; 652346"];
506 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 652347"];
507 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 652348"];
508 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 652349"];
509 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 652350"];
510 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 652351"];
511 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 652352"];
512 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 652353"];
513 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 652354"];
514 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 652355"];
515 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 652356"];
516 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 652357"];
517 [label="param CheckSerializable(SyntaxTree tree) 652358"];
518 [label="var stream = new MemoryStream(); 652359"];
519 [label="var root = tree.GetRoot(); 652360"];
520 [label="var root = tree.GetRoot(); 652361"];
521 [label="root.SerializeTo(stream); 652362"];
522 [label="root.SerializeTo(stream); 652363"];
523 [label="root.SerializeTo(stream); 652364"];
524 [label="stream.Position = 0; 652365"];
525 [label="stream.Position 652366"];
526 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 652367"];
527 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 652368"];
528 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 652369"];
529 [label="return tree; 652370"];
530 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 652371"];
531 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 652372"];
532 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 652373"];
533 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 652374"];
534 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 652375"];
535 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 652376"];
536 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 652377"];
537 [label="hasTopLevelStatements 652378"];
538 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 652379"];
539 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 652380"];
540 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 652381"];
541 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 652382"];
542 [label="'ROSLYN_TEST_IOPERATION' 652383"];
543 [label="Environment.GetEnvironmentVariable('ROSLYN_TEST_IOPERATION') 652384"];
544 [label="string.IsNullOrEmpty(Environment.GetEnvironmentVariable('ROSLYN_TEST_IOPERATION')) 652385"];
545 [label="internal static bool EnableVerifyIOperation { get; } = !string.IsNullOrEmpty(Environment.GetEnvironmentVariable('ROSLYN_TEST_IOPERATION')); 652386"];
546 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 652387"];
547 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 652388"];
548 [label="param ValidateIOperations(Func<Compilation> createCompilation) 652389"];
549 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 652390"];
550 [label="return; 652391"];
551 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 652392"];
552 [label="var compilation = createCompilationLambda(); 652393"];
553 [label="var compilation = createCompilationLambda(); 652394"];
554 [label="return Guid.NewGuid().ToString('D'); 652395"];
555 [label="var compilation = createCompilationLambda(); 652396"];
556 [label="OutputKind.ConsoleApplication 652397"];
557 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 652398"];
558 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 652399"];
559 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 652400"];
560 [label="OutputKind.DynamicallyLinkedLibrary 652401"];
561 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 652402"];
562 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 652403"];
563 [label="true 652404"];
564 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 652405"];
565 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 652406"];
566 [label="param Create(string? assemblyName) 652407"];
567 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 652408"];
568 [label="param Create(IEnumerable<MetadataReference>? references = null) 652409"];
569 [label="param Create(CSharpCompilationOptions? options = null) 652410"];
570 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 652411"];
571 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 652412"];
572 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 652413"];
573 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 652414"];
574 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 652415"];
575 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 652416"];
576 [label="param Create(string? assemblyName) 652417"];
577 [label="param Create(CSharpCompilationOptions options) 652418"];
578 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 652419"];
579 [label="param Create(IEnumerable<MetadataReference>? references) 652420"];
580 [label="param Create(CSharpCompilation? previousSubmission) 652421"];
581 [label="param Create(Type? returnType) 652422"];
582 [label="param Create(Type? hostObjectType) 652423"];
583 [label="param Create(bool isSubmission) 652424"];
584 [label="RoslynDebug.Assert(options != null); 652425"];
585 [label="RoslynDebug.Assert(options != null); 652426"];
586 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 652427"];
587 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 652428"];
588 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 652429"];
589 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 652430"];
590 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 652431"];
591 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 652432"];
592 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 652433"];
593 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 652434"];
594 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 652435"];
595 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 652436"];
596 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 652437"];
597 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 652438"];
598 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 652439"];
599 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 652440"];
600 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 652441"];
601 [label="param CSharpCompilation(string? assemblyName) 652442"];
602 [label="param CSharpCompilation(CSharpCompilationOptions options) 652443"];
603 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 652444"];
604 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 652445"];
605 [label="param CSharpCompilation(Type? submissionReturnType) 652446"];
606 [label="param CSharpCompilation(Type? hostObjectType) 652447"];
607 [label="param CSharpCompilation(bool isSubmission) 652448"];
608 [label="param CSharpCompilation(ReferenceManager? referenceManager) 652449"];
609 [label="param CSharpCompilation(bool reuseReferenceManager) 652450"];
610 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 652451"];
611 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 652452"];
612 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 652453"];
613 [label="param CSharpCompilation(this) 652454"];
614 [label="assemblyName 652455"];
615 [label="options 652456"];
616 [label="references 652457"];
617 [label="previousSubmission 652458"];
618 [label="submissionReturnType 652459"];
619 [label="hostObjectType 652460"];
620 [label="isSubmission 652461"];
621 [label="referenceManager 652462"];
622 [label="reuseReferenceManager 652463"];
623 [label="syntaxAndDeclarations 652464"];
624 [label="syntaxAndDeclarations.ExternalSyntaxTrees 652465"];
625 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 652466"];
626 [label="semanticModelProvider 652467"];
627 [label="eventQueue 652468"];
628 [label="param CSharpCompilation(this) 652469"];
629 [label="param CSharpCompilation(string? assemblyName) 652470"];
630 [label="param CSharpCompilation(CSharpCompilationOptions options) 652471"];
631 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 652472"];
632 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 652473"];
633 [label="param CSharpCompilation(Type? submissionReturnType) 652474"];
634 [label="param CSharpCompilation(Type? hostObjectType) 652475"];
635 [label="param CSharpCompilation(bool isSubmission) 652476"];
636 [label="param CSharpCompilation(ReferenceManager? referenceManager) 652477"];
637 [label="param CSharpCompilation(bool reuseReferenceManager) 652478"];
638 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 652479"];
639 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 652480"];
640 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 652481"];
641 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 652482"];
642 [label="param CSharpCompilation(this) 652483"];
643 [label="assemblyName 652484"];
644 [label="references 652485"];
645 [label="features 652486"];
646 [label="isSubmission 652487"];
647 [label="semanticModelProvider 652488"];
648 [label="eventQueue 652489"];
649 [label="param CSharpCompilation(this) 652490"];
650 [label="param CSharpCompilation(this) 652491"];
651 [label="_options 652492"];
652 [label="_globalImports 652493"];
653 [label="_previousSubmissionImports 652494"];
654 [label="_globalNamespaceAlias 652495"];
655 [label="_scriptClass 652496"];
656 [label="_lazyHostObjectTypeSymbol 652497"];
657 [label="_lazyImportInfos 652498"];
658 [label="_conversions 652499"];
659 [label="_anonymousTypeManager 652500"];
660 [label="_lazyGlobalNamespace 652501"];
661 [label="builtInOperators 652502"];
662 [label="_lazyAssemblySymbol 652503"];
663 [label="_referenceManager 652504"];
664 [label="_syntaxAndDeclarations 652505"];
665 [label="_lazyEntryPoint 652506"];
666 [label="_lazyEmitNullablePublicOnly 652507"];
667 [label="_lazyCompilationUnitCompletedTrees 652508"];
668 [label="NullableAnalysisData 652509"];
669 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 652510"];
670 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 652511"];
671 [label="_externAliasTargets 652512"];
672 [label="_moduleInitializerMethods 652513"];
673 [label="_binderFactories 652514"];
674 [label="_ignoreAccessibilityBinderFactories 652515"];
675 [label="_lazyDeclarationDiagnostics 652516"];
676 [label="_declarationDiagnosticsFrozen 652517"];
677 [label="new DiagnosticBag() 652518"];
678 [label="_additionalCodegenWarnings = new DiagnosticBag() 652519"];
679 [label="WellKnownMemberSignatureComparer 652520"];
680 [label="_lazyWellKnownTypes 652521"];
681 [label="_lazyWellKnownTypeMembers 652522"];
682 [label="_usesNullableAttributes 652523"];
683 [label="_needsGeneratedAttributes 652524"];
684 [label="_needsGeneratedAttributes_IsFrozen 652525"];
685 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 652526"];
686 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 652527"];
687 [label="new WellKnownMembersSignatureComparer(this) 652528"];
688 [label="param WellKnownMembersSignatureComparer(CSharpCompilation compilation) 652529"];
689 [label="param WellKnownMembersSignatureComparer(this) 652530"];
690 [label="new SpecialMembersSignatureComparer() 652531"];
691 [label="param SpecialMembersSignatureComparer(this) 652532"];
692 [label="Instance = new SpecialMembersSignatureComparer() 652533"];
693 [label="param WellKnownMembersSignatureComparer(this) 652534"];
694 [label="param SpecialMembersSignatureComparer(this) 652535"];
695 [label="param SpecialMembersSignatureComparer(this) 652536"];
696 [label="_compilation 652537"];
697 [label="_compilation 652538"];
698 [label="WellKnownMemberSignatureComparer 652539"];
699 [label="_options 652540"];
700 [label="this.builtInOperators = new BuiltInOperators(this); 652541"];
701 [label="this.builtInOperators = new BuiltInOperators(this); 652542"];
702 [label="this.builtInOperators 652543"];
703 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 652544"];
704 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 652545"];
705 [label="_scriptClass 652546"];
706 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 652547"];
707 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 652548"];
708 [label="_globalImports 652549"];
709 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 652550"];
710 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 652551"];
711 [label="_previousSubmissionImports 652552"];
712 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 652553"];
713 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 652554"];
714 [label="_globalNamespaceAlias 652555"];
715 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 652556"];
716 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 652557"];
717 [label="new AnonymousTypeManager(this) 652558"];
718 [label="param AnonymousTypeManager(CSharpCompilation compilation) 652559"];
719 [label="param AnonymousTypeManager(this) 652560"];
720 [label="param AnonymousTypeManager(this) 652561"];
721 [label="public CSharpCompilation Compilation { get; } 652562"];
722 [label="_lazyAnonymousTypeTemplates 652563"];
723 [label="_lazySynthesizedDelegates 652564"];
724 [label="new ConcurrentDictionary<Location, bool>() 652565"];
725 [label="_sourceLocationsSeen = new ConcurrentDictionary<Location, bool>() 652566"];
726 [label="Debug.Assert(compilation != null); 652567"];
727 [label="Debug.Assert(compilation != null); 652568"];
728 [label="this.Compilation 652569"];
729 [label="_anonymousTypeManager 652570"];
730 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 652571"];
731 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 652572"];
732 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 652573"];
733 [label="LanguageVersion? result = null; 652574"];
734 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 652575"];
735 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 652576"];
736 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 652577"];
737 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 652578"];
738 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 652579"];
739 [label="this.LanguageVersion 652580"];
740 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 652581"];
741 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652582"];
742 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652583"];
743 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652584"];
744 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652585"];
745 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652586"];
746 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652587"];
747 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 652588"];
748 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 652589"];
749 [label="this.Options 652590"];
750 [label="get\n            {\n                return _options;\n            } 652591"];
751 [label="return _options; 652592"];
752 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 652593"];
753 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 652594"];
754 [label="new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata) 652595"];
755 [label="param ReferenceManager(string simpleAssemblyName) 652596"];
756 [label="param ReferenceManager(AssemblyIdentityComparer identityComparer) 652597"];
757 [label="param ReferenceManager(Dictionary<MetadataReference, MetadataOrDiagnostic>? observedMetadata) 652598"];
758 [label="param ReferenceManager(this) 652599"];
759 [label="simpleAssemblyName 652600"];
760 [label="identityComparer 652601"];
761 [label="observedMetadata 652602"];
762 [label="param ReferenceManager(this) 652603"];
763 [label="param ReferenceManager(this) 652604"];
764 [label="_referenceManager 652605"];
765 [label="_syntaxAndDeclarations 652606"];
766 [label="Debug.Assert(_lazyAssemblySymbol is null); 652607"];
767 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 652608"];
768 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 652609"];
769 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 652610"];
770 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 652611"];
771 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 652612"];
772 [label="compilation.AddSyntaxTrees(syntaxTrees) 652613"];
773 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 652614"];
774 [label="param AddSyntaxTrees(this) 652615"];
775 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 652616"];
776 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 652617"];
777 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 652618"];
778 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 652619"];
779 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 652620"];
780 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 652621"];
781 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 652622"];
782 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 652623"];
783 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 652624"];
784 [label="bool reuseReferenceManager = true; 652625"];
785 [label="int i = 0; 652626"];
786 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 652627"];
787 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 652628"];
788 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 652629"];
789 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 652630"];
790 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 652631"];
791 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 652632"];
792 [label="externalSyntaxTrees.Add(tree); 652633"];
793 [label="externalSyntaxTrees.Add(tree); 652634"];
794 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 652635"];
795 [label="i++; 652636"];
796 [label="externalSyntaxTrees.Free(); 652637"];
797 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 652638"];
798 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 652639"];
799 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 652640"];
800 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 652641"];
801 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 652642"];
802 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 652643"];
803 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 652644"];
804 [label="param Update(ReferenceManager referenceManager) 652645"];
805 [label="param Update(bool reuseReferenceManager) 652646"];
806 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 652647"];
807 [label="param Update(this) 652648"];
808 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 652649"];
809 [label="this.PreviousSubmission 652650"];
810 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 652651"];
811 [label="ScriptCompilationInfo 652652"];
812 [label="ScriptCompilationInfo?.PreviousScriptCompilation 652653"];
813 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 652654"];
814 [label="this.SubmissionReturnType 652655"];
815 [label="=> ScriptCompilationInfo 652656"];
816 [label="ScriptCompilationInfo 652657"];
817 [label="this.HostObjectType 652658"];
818 [label="=> ScriptCompilationInfo 652659"];
819 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 652660"];
820 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 652661"];
821 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 652662"];
822 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 652663"];
823 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 652664"];
824 [label="param CSharpCompilation(string? assemblyName) 652665"];
825 [label="param CSharpCompilation(CSharpCompilationOptions options) 652666"];
826 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 652667"];
827 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 652668"];
828 [label="param CSharpCompilation(Type? submissionReturnType) 652669"];
829 [label="param CSharpCompilation(Type? hostObjectType) 652670"];
830 [label="param CSharpCompilation(bool isSubmission) 652671"];
831 [label="param CSharpCompilation(ReferenceManager? referenceManager) 652672"];
832 [label="param CSharpCompilation(bool reuseReferenceManager) 652673"];
833 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 652674"];
834 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 652675"];
835 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 652676"];
836 [label="param CSharpCompilation(this) 652677"];
837 [label="previousSubmission 652678"];
838 [label="submissionReturnType 652679"];
839 [label="hostObjectType 652680"];
840 [label="syntaxAndDeclarations.ExternalSyntaxTrees 652681"];
841 [label="eventQueue 652682"];
842 [label="param CSharpCompilation(this) 652683"];
843 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 652684"];
844 [label="param CSharpCompilation(Type? submissionReturnType) 652685"];
845 [label="param CSharpCompilation(Type? hostObjectType) 652686"];
846 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 652687"];
847 [label="param CSharpCompilation(this) 652688"];
848 [label="eventQueue 652689"];
849 [label="param CSharpCompilation(this) 652690"];
850 [label="_options 652691"];
851 [label="_globalImports 652692"];
852 [label="_previousSubmissionImports 652693"];
853 [label="_globalNamespaceAlias 652694"];
854 [label="_scriptClass 652695"];
855 [label="_lazyHostObjectTypeSymbol 652696"];
856 [label="_lazyImportInfos 652697"];
857 [label="_conversions 652698"];
858 [label="_anonymousTypeManager 652699"];
859 [label="_lazyGlobalNamespace 652700"];
860 [label="builtInOperators 652701"];
861 [label="_lazyAssemblySymbol 652702"];
862 [label="_referenceManager 652703"];
863 [label="_syntaxAndDeclarations 652704"];
864 [label="_lazyEntryPoint 652705"];
865 [label="_lazyEmitNullablePublicOnly 652706"];
866 [label="_lazyCompilationUnitCompletedTrees 652707"];
867 [label="NullableAnalysisData 652708"];
868 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 652709"];
869 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 652710"];
870 [label="_externAliasTargets 652711"];
871 [label="_moduleInitializerMethods 652712"];
872 [label="_binderFactories 652713"];
873 [label="_ignoreAccessibilityBinderFactories 652714"];
874 [label="_lazyDeclarationDiagnostics 652715"];
875 [label="_declarationDiagnosticsFrozen 652716"];
876 [label="new DiagnosticBag() 652717"];
877 [label="_additionalCodegenWarnings = new DiagnosticBag() 652718"];
878 [label="WellKnownMemberSignatureComparer 652719"];
879 [label="_lazyWellKnownTypes 652720"];
880 [label="_lazyWellKnownTypeMembers 652721"];
881 [label="_usesNullableAttributes 652722"];
882 [label="_needsGeneratedAttributes 652723"];
883 [label="_needsGeneratedAttributes_IsFrozen 652724"];
884 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 652725"];
885 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 652726"];
886 [label="new WellKnownMembersSignatureComparer(this) 652727"];
887 [label="param WellKnownMembersSignatureComparer(CSharpCompilation compilation) 652728"];
888 [label="param WellKnownMembersSignatureComparer(this) 652729"];
889 [label="param WellKnownMembersSignatureComparer(this) 652730"];
890 [label="param SpecialMembersSignatureComparer(this) 652731"];
891 [label="param SpecialMembersSignatureComparer(this) 652732"];
892 [label="_compilation 652733"];
893 [label="_compilation 652734"];
894 [label="WellKnownMemberSignatureComparer 652735"];
895 [label="this.builtInOperators = new BuiltInOperators(this); 652736"];
896 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 652737"];
897 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 652738"];
898 [label="new AnonymousTypeManager(this) 652739"];
899 [label="param AnonymousTypeManager(CSharpCompilation compilation) 652740"];
900 [label="param AnonymousTypeManager(this) 652741"];
901 [label="param AnonymousTypeManager(this) 652742"];
902 [label="public CSharpCompilation Compilation { get; } 652743"];
903 [label="_lazyAnonymousTypeTemplates 652744"];
904 [label="_lazySynthesizedDelegates 652745"];
905 [label="new ConcurrentDictionary<Location, bool>() 652746"];
906 [label="_sourceLocationsSeen = new ConcurrentDictionary<Location, bool>() 652747"];
907 [label="Debug.Assert(compilation != null); 652748"];
908 [label="Debug.Assert(compilation != null); 652749"];
909 [label="this.Compilation 652750"];
910 [label="_anonymousTypeManager 652751"];
911 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 652752"];
912 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 652753"];
913 [label="LanguageVersion? result = null; 652754"];
914 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 652755"];
915 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 652756"];
916 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 652757"];
917 [label="result = version; 652758"];
918 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 652759"];
919 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652760"];
920 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652761"];
921 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652762"];
922 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652763"];
923 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652764"];
924 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 652765"];
925 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 652766"];
926 [label="referenceManager.AssertCanReuseForCompilation(this); 652767"];
927 [label="referenceManager.AssertCanReuseForCompilation(this); 652768"];
928 [label="_referenceManager 652769"];
929 [label="Debug.Assert(_lazyAssemblySymbol is null); 652770"];
930 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 652771"];
931 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 652772"];
932 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 652773"];
933 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 652774"];
934 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 652775"];
935 [label="return compilation; 652776"];
936 [label="var compilation = createCompilationLambda(); 652777"];
937 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 652778"];
938 [label="IsNullableEnabled(compilation) 652779"];
939 [label="param IsNullableEnabled(CSharpCompilation compilation) 652780"];
940 [label="compilation.SyntaxTrees 652781"];
941 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 652782"];
942 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 652783"];
943 [label="var trees = compilation.SyntaxTrees; 652784"];
944 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 652785"];
945 [label="var options = (CSharpParseOptions)trees[0].Options; 652786"];
946 [label="var options = (CSharpParseOptions)trees[0].Options; 652787"];
947 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 652788"];
948 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 652789"];
949 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 652790"];
950 [label="return compilation; 652791"];
951 [label="comp.GlobalNamespace 652792"];
952 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 652793"];
953 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 652794"];
954 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 652795"];
955 [label="GetAllUnaliasedModules(modules); 652796"];
956 [label="GetAllUnaliasedModules(modules) 652797"];
957 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 652798"];
958 [label="param GetAllUnaliasedModules(this) 652799"];
959 [label="Assembly 652800"];
960 [label="get\n            {\n                return SourceAssembly;\n            } 652801"];
961 [label="SourceAssembly 652802"];
962 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 652803"];
963 [label="GetBoundReferenceManager() 652804"];
964 [label="param GetBoundReferenceManager(this) 652805"];
965 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 652806"];
966 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 652807"];
967 [label="_referenceManager.CreateSourceAssemblyForCompilation(this) 652808"];
968 [label="param CreateSourceAssemblyForCompilation(CSharpCompilation compilation) 652809"];
969 [label="param CreateSourceAssemblyForCompilation(this) 652810"];
970 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 652811"];
971 [label="CreateAndSetSourceAssemblyFullBind(compilation) 652812"];
972 [label="param CreateAndSetSourceAssemblyFullBind(CSharpCompilation compilation) 652813"];
973 [label="param CreateAndSetSourceAssemblyFullBind(this) 652814"];
974 [label="var resolutionDiagnostics = DiagnosticBag.GetInstance(); 652815"];
975 [label="var assemblyReferencesBySimpleName = PooledDictionary<string, List<ReferencedAssemblyIdentity>>.GetInstance(); 652816"];
976 [label="compilation.Options 652817"];
977 [label="get\n            {\n                return _options;\n            } 652818"];
978 [label="bool supersedeLowerVersions = compilation.Options.ReferencesSupersedeLowerVersions; 652819"];
979 [label="IDictionary<(string, string), MetadataReference>? boundReferenceDirectiveMap; 652820"];
980 [label="ImmutableArray<MetadataReference> boundReferenceDirectives; 652821"];
981 [label="boundReferenceDirectives 652822"];
982 [label="ImmutableArray<AssemblyData> referencedAssemblies; 652823"];
983 [label="referencedAssemblies 652824"];
984 [label="ImmutableArray<PEModule> modules; 652825"];
985 [label="modules 652826"];
986 [label="ImmutableArray<MetadataReference> explicitReferences; 652827"];
987 [label="explicitReferences 652828"];
988 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652829"];
989 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652830"];
990 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652831"];
991 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652832"];
992 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652833"];
993 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652834"];
994 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652835"];
995 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652836"];
996 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652837"];
997 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652838"];
998 [label="get { return this.Declarations.ReferenceDirectives; } 652839"];
999 [label="this.Declarations 652840"];
1000 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 652841"];
1001 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 652842"];
1002 [label="return this.Declarations.ReferenceDirectives; 652843"];
1003 [label="this.Declarations.ReferenceDirectives 652844"];
1004 [label="param ToDeclarationModifiers(this SyntaxTokenList modifiers) 652845"];
1005 [label="param ToDeclarationModifiers(DiagnosticBag diagnostics) 652846"];
1006 [label="var result = DeclarationModifiers.None; 652847"];
1007 [label="bool seenNoDuplicates = true; 652848"];
1008 [label="bool seenNoAccessibilityDuplicates = true; 652849"];
1009 [label="foreach (var modifier in modifiers)\n            {\n                DeclarationModifiers one = ToDeclarationModifier(modifier.ContextualKind());\n\n                ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics);\n\n                result |= one;\n            } 652850"];
1010 [label="DeclarationModifiers one = ToDeclarationModifier(modifier.ContextualKind()); 652851"];
1011 [label="ToDeclarationModifier(modifier.ContextualKind()) 652852"];
1012 [label="param ToDeclarationModifier(SyntaxKind kind) 652853"];
1013 [label="switch (kind)\n            {\n                case SyntaxKind.AbstractKeyword:\n                    return DeclarationModifiers.Abstract;\n                case SyntaxKind.AsyncKeyword:\n                    return DeclarationModifiers.Async;\n                case SyntaxKind.SealedKeyword:\n                    return DeclarationModifiers.Sealed;\n                case SyntaxKind.StaticKeyword:\n                    return DeclarationModifiers.Static;\n                case SyntaxKind.NewKeyword:\n                    return DeclarationModifiers.New;\n                case SyntaxKind.PublicKeyword:\n                    return DeclarationModifiers.Public;\n                case SyntaxKind.ProtectedKeyword:\n                    return DeclarationModifiers.Protected;\n                case SyntaxKind.InternalKeyword:\n                    return DeclarationModifiers.Internal;\n                case SyntaxKind.PrivateKeyword:\n                    return DeclarationModifiers.Private;\n                case SyntaxKind.ExternKeyword:\n                    return DeclarationModifiers.Extern;\n                case SyntaxKind.ReadOnlyKeyword:\n                    return DeclarationModifiers.ReadOnly;\n                case SyntaxKind.PartialKeyword:\n                    return DeclarationModifiers.Partial;\n                case SyntaxKind.UnsafeKeyword:\n                    return DeclarationModifiers.Unsafe;\n                case SyntaxKind.VirtualKeyword:\n                    return DeclarationModifiers.Virtual;\n                case SyntaxKind.OverrideKeyword:\n                    return DeclarationModifiers.Override;\n                case SyntaxKind.ConstKeyword:\n                    return DeclarationModifiers.Const;\n                case SyntaxKind.FixedKeyword:\n                    return DeclarationModifiers.Fixed;\n                case SyntaxKind.VolatileKeyword:\n                    return DeclarationModifiers.Volatile;\n                case SyntaxKind.RefKeyword:\n                    return DeclarationModifiers.Ref;\n                case SyntaxKind.DataKeyword:\n                    return DeclarationModifiers.Data;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 652854"];
1014 [label="return DeclarationModifiers.Public; 652855"];
1015 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652856"];
1016 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652857"];
1017 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652858"];
1018 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652859"];
1019 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652860"];
1020 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652861"];
1021 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics) 652862"];
1022 [label="param ReportDuplicateModifiers(SyntaxToken modifierToken) 652863"];
1023 [label="param ReportDuplicateModifiers(DeclarationModifiers modifierKind) 652864"];
1024 [label="param ReportDuplicateModifiers(DeclarationModifiers allModifiers) 652865"];
1025 [label="param ReportDuplicateModifiers(ref bool seenNoDuplicates) 652866"];
1026 [label="param ReportDuplicateModifiers(ref bool seenNoAccessibilityDuplicates) 652867"];
1027 [label="param ReportDuplicateModifiers(DiagnosticBag diagnostics) 652868"];
1028 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 652869"];
1029 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 652870"];
1030 [label="result |= one; 652871"];
1031 [label="switch (result & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.Protected | DeclarationModifiers.Internal:\n                    // the two keywords 'protected' and 'internal' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.ProtectedInternal;\n                    break;\n\n                case DeclarationModifiers.Private | DeclarationModifiers.Protected:\n                    // the two keywords 'private' and 'protected' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.PrivateProtected;\n                    break;\n            } 652872"];
1032 [label="return result; 652873"];
1033 [label="return DeclarationModifiers.Internal; 652874"];
1034 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652875"];
1035 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652876"];
1036 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652877"];
1037 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652878"];
1038 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652879"];
1039 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652880"];
1040 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics) 652881"];
1041 [label="param ReportDuplicateModifiers(SyntaxToken modifierToken) 652882"];
1042 [label="param ReportDuplicateModifiers(DeclarationModifiers modifierKind) 652883"];
1043 [label="param ReportDuplicateModifiers(DeclarationModifiers allModifiers) 652884"];
1044 [label="param ReportDuplicateModifiers(ref bool seenNoDuplicates) 652885"];
1045 [label="param ReportDuplicateModifiers(ref bool seenNoAccessibilityDuplicates) 652886"];
1046 [label="param ReportDuplicateModifiers(DiagnosticBag diagnostics) 652887"];
1047 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 652888"];
1048 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 652889"];
1049 [label="switch (result & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.Protected | DeclarationModifiers.Internal:\n                    // the two keywords 'protected' and 'internal' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.ProtectedInternal;\n                    break;\n\n                case DeclarationModifiers.Private | DeclarationModifiers.Protected:\n                    // the two keywords 'private' and 'protected' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.PrivateProtected;\n                    break;\n            } 652890"];
1050 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652891"];
1051 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652892"];
1052 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652893"];
1053 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652894"];
1054 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 652895"];
1055 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics) 652896"];
1056 [label="param ReportDuplicateModifiers(SyntaxToken modifierToken) 652897"];
1057 [label="param ReportDuplicateModifiers(DeclarationModifiers modifierKind) 652898"];
1058 [label="param ReportDuplicateModifiers(DeclarationModifiers allModifiers) 652899"];
1059 [label="param ReportDuplicateModifiers(ref bool seenNoDuplicates) 652900"];
1060 [label="param ReportDuplicateModifiers(ref bool seenNoAccessibilityDuplicates) 652901"];
1061 [label="param ReportDuplicateModifiers(DiagnosticBag diagnostics) 652902"];
1062 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 652903"];
1063 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 652904"];
1064 [label="get { return _options; } 652905"];
1065 [label="return _options; 652906"];
1066 [label="get { return CSharp.MessageProvider.Instance; } 652907"];
1067 [label="return CSharp.MessageProvider.Instance; 652908"];
1068 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652909"];
1069 [label="param CreateAssemblyDataForFile(PEAssembly assembly) 652910"];
1070 [label="param CreateAssemblyDataForFile(WeakList<IAssemblySymbolInternal> cachedSymbols) 652911"];
1071 [label="param CreateAssemblyDataForFile(DocumentationProvider documentationProvider) 652912"];
1072 [label="param CreateAssemblyDataForFile(string sourceAssemblySimpleName) 652913"];
1073 [label="param CreateAssemblyDataForFile(MetadataImportOptions importOptions) 652914"];
1074 [label="param CreateAssemblyDataForFile(bool embedInteropTypes) 652915"];
1075 [label="param CreateAssemblyDataForFile(this) 652916"];
1076 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 652917"];
1077 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 652918"];
1078 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 652919"];
1079 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 652920"];
1080 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 652921"];
1081 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 652922"];
1082 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 652923"];
1083 [label="new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions) 652924"];
1084 [label="param AssemblyDataForFile(PEAssembly assembly) 652925"];
1085 [label="param AssemblyDataForFile(WeakList<IAssemblySymbolInternal> cachedSymbols) 652926"];
1086 [label="param AssemblyDataForFile(bool embedInteropTypes) 652927"];
1087 [label="param AssemblyDataForFile(DocumentationProvider documentationProvider) 652928"];
1088 [label="param AssemblyDataForFile(string sourceAssemblySimpleName) 652929"];
1089 [label="param AssemblyDataForFile(MetadataImportOptions compilationImportOptions) 652930"];
1090 [label="param AssemblyDataForFile(this) 652931"];
1091 [label="assembly.Identity 652932"];
1092 [label="assembly.AssemblyReferences 652933"];
1093 [label="embedInteropTypes 652934"];
1094 [label="param AssemblyDataForFile(this) 652935"];
1095 [label="param AssemblyDataForMetadataOrCompilation(AssemblyIdentity identity) 652936"];
1096 [label="param AssemblyDataForMetadataOrCompilation(ImmutableArray<AssemblyIdentity> referencedAssemblies) 652937"];
1097 [label="param AssemblyDataForMetadataOrCompilation(bool embedInteropTypes) 652938"];
1098 [label="param AssemblyDataForMetadataOrCompilation(this) 652939"];
1099 [label="param AssemblyDataForMetadataOrCompilation(this) 652940"];
1100 [label="_assemblies 652941"];
1101 [label="_identity 652942"];
1102 [label="_embedInteropTypes 652943"];
1103 [label="RoslynDebug.Assert(identity != null); 652944"];
1104 [label="RoslynDebug.Assert(identity != null); 652945"];
1105 [label="Debug.Assert(!referencedAssemblies.IsDefault); 652946"];
1106 [label="_embedInteropTypes 652947"];
1107 [label="_identity 652948"];
1108 [label="_referencedAssemblies 652949"];
1109 [label="Assembly 652950"];
1110 [label="CachedSymbols 652951"];
1111 [label="DocumentationProvider 652952"];
1112 [label="_compilationImportOptions 652953"];
1113 [label="_sourceAssemblySimpleName 652954"];
1114 [label="_internalsVisibleComputed 652955"];
1115 [label="_internalsPotentiallyVisibleToCompilation 652956"];
1116 [label="RoslynDebug.Assert(documentationProvider != null); 652957"];
1117 [label="RoslynDebug.Assert(documentationProvider != null); 652958"];
1118 [label="RoslynDebug.Assert(cachedSymbols != null); 652959"];
1119 [label="RoslynDebug.Assert(cachedSymbols != null); 652960"];
1120 [label="CachedSymbols 652961"];
1121 [label="Assembly 652962"];
1122 [label="DocumentationProvider 652963"];
1123 [label="_compilationImportOptions 652964"];
1124 [label="_sourceAssemblySimpleName 652965"];
1125 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 652966"];
1126 [label="RoslynDebug.Assert(identity != null); 652967"];
1127 [label="Debug.Assert(!referencedAssemblies.IsDefault); 652968"];
1128 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 652969"];
1129 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 652970"];
1130 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 652971"];
1131 [label="get\n                    {\n                        return _identity;\n                    } 652972"];
1132 [label="return _identity; 652973"];
1133 [label="var explicitAssemblyData = referencedAssemblies.Insert(0, assemblyBeingBuiltData); 652974"];
1134 [label="var explicitAssemblyData = referencedAssemblies.Insert(0, assemblyBeingBuiltData); 652975"];
1135 [label="bool hasCircularReference; 652976"];
1136 [label="int corLibraryIndex; 652977"];
1137 [label="ImmutableArray<MetadataReference> implicitlyResolvedReferences; 652978"];
1138 [label="implicitlyResolvedReferences 652979"];
1139 [label="ImmutableArray<ResolvedReference> implicitlyResolvedReferenceMap; 652980"];
1140 [label="implicitlyResolvedReferenceMap 652981"];
1141 [label="ImmutableArray<AssemblyData> allAssemblyData; 652982"];
1142 [label="allAssemblyData 652983"];
1143 [label="var temp1 = compilation.ScriptCompilationInfo; 652984"];
1144 [label="var temp2 = temp1 != null ? temp1.PreviousScriptCompilation : null; 652985"];
1145 [label="var temp2 = temp1 != null ? temp1.PreviousScriptCompilation : null; 652986"];
1146 [label="temp1 != null 652987"];
1147 [label="var temp3 = temp2 != null ? temp2.GetBoundReferenceManager() : null; 652988"];
1148 [label="var temp3 = temp2 != null ? temp2.GetBoundReferenceManager() : null; 652989"];
1149 [label="temp2 != null 652990"];
1150 [label="var temp4 = temp3 != null ? temp3.ImplicitReferenceResolutions : null; 652991"];
1151 [label="var temp4 = temp3 != null ? temp3.ImplicitReferenceResolutions : null; 652992"];
1152 [label="temp3 != null 652993"];
1153 [label="var implicitReferenceResolutions = temp4 ?? ImmutableDictionary<AssemblyIdentity, PortableExecutableReference?>.Empty; 652994"];
1154 [label="var implicitReferenceResolutions = temp4 ?? ImmutableDictionary<AssemblyIdentity, PortableExecutableReference?>.Empty; 652995"];
1155 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 652996"];
1156 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 652997"];
1157 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 652998"];
1158 [label="compilation.Options 652999"];
1159 [label="get\n            {\n                return _options;\n            } 653000"];
1160 [label="return _options; 653001"];
1161 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653002"];
1162 [label="compilation.Options 653003"];
1163 [label="get\n            {\n                return _options;\n            } 653004"];
1164 [label="return _options; 653005"];
1165 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653006"];
1166 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653007"];
1167 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653008"];
1168 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653009"];
1169 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653010"];
1170 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653011"];
1171 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653012"];
1172 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653013"];
1173 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653014"];
1174 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653015"];
1175 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653016"];
1176 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 653017"];
1177 [label="param BindAssemblyReferences(ImmutableArray<AssemblyData> assemblies) 653018"];
1178 [label="param BindAssemblyReferences(AssemblyIdentityComparer assemblyIdentityComparer) 653019"];
1179 [label="param BindAssemblyReferences(this) 653020"];
1180 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 653021"];
1181 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 653022"];
1182 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 653023"];
1183 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 653024"];
1184 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 653025"];
1185 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 653026"];
1186 [label="return _embedInteropTypes; 653027"];
1187 [label="get\n                    {\n                        return _referencedAssemblies;\n                    } 653028"];
1188 [label="return _referencedAssemblies; 653029"];
1189 [label="get\n                    {\n                        return Assembly.ContainsNoPiaLocalTypes();\n                    } 653030"];
1190 [label="return Assembly.ContainsNoPiaLocalTypes(); 653031"];
1191 [label="get\n                    {\n                        return Assembly.DeclaresTheObjectClass;\n                    } 653032"];
1192 [label="return Assembly.DeclaresTheObjectClass; 653033"];
1193 [label="get\n                    {\n                        if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        }\n\n                        return _assemblies;\n                    } 653034"];
1194 [label="if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        } 653035"];
1195 [label="if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        } 653036"];
1196 [label="_assemblies = new List<AssemblySymbol>(); 653037"];
1197 [label="_assemblies 653038"];
1198 [label="AddAvailableSymbols(_assemblies); 653039"];
1199 [label="AddAvailableSymbols(_assemblies) 653040"];
1200 [label="param AddAvailableSymbols(List<AssemblySymbol> assemblies) 653041"];
1201 [label="param AddAvailableSymbols(this) 653042"];
1202 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 653043"];
1203 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 653044"];
1204 [label="AddAvailableSymbols(_assemblies); 653045"];
1205 [label="return _assemblies; 653046"];
1206 [label="AddAvailableSymbols(_assemblies); 653047"];
1207 [label="AddAvailableSymbols(_assemblies) 653048"];
1208 [label="param AddAvailableSymbols(List<AssemblySymbol> assemblies) 653049"];
1209 [label="param AddAvailableSymbols(this) 653050"];
1210 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 653051"];
1211 [label="AddAvailableSymbols(_assemblies); 653052"];
1212 [label="Debug.Assert(bindingResult.Length == allAssemblyData.Length); 653053"];
1213 [label="var references = explicitReferences.AddRange(implicitlyResolvedReferences); 653054"];
1214 [label="referenceMap = referenceMap.AddRange(implicitlyResolvedReferenceMap); 653055"];
1215 [label="referenceMap = referenceMap.AddRange(implicitlyResolvedReferenceMap); 653056"];
1216 [label="Dictionary<MetadataReference, int> referencedAssembliesMap, referencedModulesMap; 653057"];
1217 [label="ImmutableArray<ImmutableArray<string>> aliasesOfReferencedAssemblies; 653058"];
1218 [label="aliasesOfReferencedAssemblies 653059"];
1219 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 653060"];
1220 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 653061"];
1221 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 653062"];
1222 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 653063"];
1223 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 653064"];
1224 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 653065"];
1225 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 653066"];
1226 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 653067"];
1227 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 653068"];
1228 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 653069"];
1229 [label="var newSymbols = new List<int>(); 653070"];
1230 [label="for (int i = 1; i < bindingResult.Length; i++)\n                    {\n                        ref BoundInputAssembly bound = ref bindingResult[i];\n                        if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        }\n\n                        Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked);\n                    } 653071"];
1231 [label="for (int i = 1; i < bindingResult.Length; i++)\n                    {\n                        ref BoundInputAssembly bound = ref bindingResult[i];\n                        if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        }\n\n                        Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked);\n                    } 653072"];
1232 [label="ref BoundInputAssembly bound = ref bindingResult[i]; 653073"];
1233 [label="if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        } 653074"];
1234 [label="bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol(); 653075"];
1235 [label="((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol() 653076"];
1236 [label="param CreateAssemblySymbol(this) 653077"];
1237 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 653078"];
1238 [label="this.IsLinked 653079"];
1239 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 653080"];
1240 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 653081"];
1241 [label="this.EffectiveImportOptions 653082"];
1242 [label="get\n                    {\n                        // We need to import internal members if they might be visible to the compilation being compiled:\n                        if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        }\n\n                        return _compilationImportOptions;\n                    } 653083"];
1243 [label="InternalsMayBeVisibleToCompilation 653084"];
1244 [label="get\n                    {\n                        if (!_internalsVisibleComputed)\n                        {\n                            _internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly);\n                            _internalsVisibleComputed = true;\n                        }\n\n                        return _internalsPotentiallyVisibleToCompilation;\n                    } 653085"];
1245 [label="if (!_internalsVisibleComputed)\n                        {\n                            _internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly);\n                            _internalsVisibleComputed = true;\n                        } 653086"];
1246 [label="_internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly); 653087"];
1247 [label="_internalsPotentiallyVisibleToCompilation 653088"];
1248 [label="_internalsVisibleComputed = true; 653089"];
1249 [label="_internalsVisibleComputed 653090"];
1250 [label="return _internalsPotentiallyVisibleToCompilation; 653091"];
1251 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 653092"];
1252 [label="return _compilationImportOptions; 653093"];
1253 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 653094"];
1254 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 653095"];
1255 [label="new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions) 653096"];
1256 [label="param PEAssemblySymbol(PEAssembly assembly) 653097"];
1257 [label="param PEAssemblySymbol(DocumentationProvider documentationProvider) 653098"];
1258 [label="param PEAssemblySymbol(bool isLinked) 653099"];
1259 [label="param PEAssemblySymbol(MetadataImportOptions importOptions) 653100"];
1260 [label="param PEAssemblySymbol(this) 653101"];
1261 [label="param PEAssemblySymbol(this) 653102"];
1262 [label="param MetadataOrSourceAssemblySymbol(this) 653103"];
1263 [label="param MetadataOrSourceAssemblySymbol(this) 653104"];
1264 [label="param NonMissingAssemblySymbol(this) 653105"];
1265 [label="new char[] { '+' } 653106"];
1266 [label="'+' 653107"];
1267 [label="new char[] { '+' } 653108"];
1268 [label="s_nestedTypeNameSeparators = new char[] { '+' } 653109"];
1269 [label="param NonMissingAssemblySymbol(this) 653110"];
1270 [label="param AssemblySymbol(this) 653111"];
1271 [label="SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier 653112"];
1272 [label="SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 653113"];
1273 [label="SymbolDisplayCompilerInternalOptions.None 653114"];
1274 [label="SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .WithCompilerInternalOptions(SymbolDisplayCompilerInternalOptions.None) 653115"];
1275 [label="s_debuggerDisplayFormat =\n            SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .WithCompilerInternalOptions(SymbolDisplayCompilerInternalOptions.None) 653116"];
1276 [label="param AssemblySymbol(this) 653117"];
1277 [label="param Symbol(this) 653118"];
1278 [label="_lazyISymbol 653119"];
1279 [label="_corLibrary 653120"];
1280 [label="new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 653121"];
1281 [label="_emittedNameToTypeMap =\n            new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 653122"];
1282 [label="_globalNamespace 653123"];
1283 [label="_lazySpecialTypes 653124"];
1284 [label="_cachedSpecialTypes 653125"];
1285 [label="_lazyNativeIntegerTypes 653126"];
1286 [label="_lazyTypeNames 653127"];
1287 [label="_lazyNamespaceNames 653128"];
1288 [label="_lazySpecialTypeMembers 653129"];
1289 [label="_assembliesToWhichInternalAccessHasBeenAnalyzed 653130"];
1290 [label="_assembly 653131"];
1291 [label="_documentationProvider 653132"];
1292 [label="_isLinked 653133"];
1293 [label="Debug.Assert(assembly != null); 653134"];
1294 [label="Debug.Assert(assembly != null); 653135"];
1295 [label="Debug.Assert(documentationProvider != null); 653136"];
1296 [label="Debug.Assert(documentationProvider != null); 653137"];
1297 [label="_assembly 653138"];
1298 [label="_documentationProvider 653139"];
1299 [label="var modules = new ModuleSymbol[assembly.Modules.Length]; 653140"];
1300 [label="for (int i = 0; i < assembly.Modules.Length; i++)\n            {\n                modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i);\n            } 653141"];
1301 [label="for (int i = 0; i < assembly.Modules.Length; i++)\n            {\n                modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i);\n            } 653142"];
1302 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 653143"];
1303 [label="31 653144"];
1304 [label="DefaultTypeMapCapacity = 31 653145"];
1305 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 653146"];
1306 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 653147"];
1307 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 653148"];
1308 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 653149"];
1309 [label="new PEModuleSymbol(this, assembly.Modules[i], importOptions, i) 653150"];
1310 [label="param PEModuleSymbol(PEAssemblySymbol assemblySymbol) 653151"];
1311 [label="param PEModuleSymbol(PEModule module) 653152"];
1312 [label="param PEModuleSymbol(MetadataImportOptions importOptions) 653153"];
1313 [label="param PEModuleSymbol(int ordinal) 653154"];
1314 [label="param PEModuleSymbol(this) 653155"];
1315 [label="assemblySymbol 653156"];
1316 [label="module 653157"];
1317 [label="importOptions 653158"];
1318 [label="ordinal 653159"];
1319 [label="param PEModuleSymbol(this) 653160"];
1320 [label="param PEModuleSymbol(AssemblySymbol assemblySymbol) 653161"];
1321 [label="param PEModuleSymbol(PEModule module) 653162"];
1322 [label="param PEModuleSymbol(MetadataImportOptions importOptions) 653163"];
1323 [label="param PEModuleSymbol(int ordinal) 653164"];
1324 [label="param PEModuleSymbol(this) 653165"];
1325 [label="param PEModuleSymbol(this) 653166"];
1326 [label="param NonMissingModuleSymbol(this) 653167"];
1327 [label="param NonMissingModuleSymbol(this) 653168"];
1328 [label="param ModuleSymbol(this) 653169"];
1329 [label="param ModuleSymbol(this) 653170"];
1330 [label="param Symbol(this) 653171"];
1331 [label="_lazyISymbol 653172"];
1332 [label="_moduleReferences 653173"];
1333 [label="_assemblySymbol 653174"];
1334 [label="_ordinal 653175"];
1335 [label="_module 653176"];
1336 [label="_globalNamespace 653177"];
1337 [label="_lazySystemTypeSymbol 653178"];
1338 [label="_lazyEventRegistrationTokenSymbol 653179"];
1339 [label="_lazyEventRegistrationTokenTableSymbol 653180"];
1340 [label="2 653181"];
1341 [label="concurrencyLevel: 2 653182"];
1342 [label="capacity: DefaultTypeMapCapacity 653183"];
1343 [label="new ConcurrentDictionary<TypeDefinitionHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 653184"];
1344 [label="TypeHandleToTypeMap =\n                                    new ConcurrentDictionary<TypeDefinitionHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 653185"];
1345 [label="2 653186"];
1346 [label="concurrencyLevel: 2 653187"];
1347 [label="capacity: DefaultTypeMapCapacity 653188"];
1348 [label="new ConcurrentDictionary<TypeReferenceHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 653189"];
1349 [label="TypeRefHandleToTypeMap =\n                                    new ConcurrentDictionary<TypeReferenceHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 653190"];
1350 [label="ImportOptions 653191"];
1351 [label="_lazyTypeNames 653192"];
1352 [label="_lazyNamespaceNames 653193"];
1353 [label="_lazyNullableMemberMetadata 653194"];
1354 [label="Debug.Assert((object)assemblySymbol != null); 653195"];
1355 [label="Debug.Assert((object)assemblySymbol != null); 653196"];
1356 [label="Debug.Assert(module != null); 653197"];
1357 [label="Debug.Assert(module != null); 653198"];
1358 [label="_assemblySymbol 653199"];
1359 [label="_ordinal 653200"];
1360 [label="_module 653201"];
1361 [label="this.ImportOptions 653202"];
1362 [label="_globalNamespace = new PEGlobalNamespaceSymbol(this); 653203"];
1363 [label="_globalNamespace = new PEGlobalNamespaceSymbol(this); 653204"];
1364 [label="new PEGlobalNamespaceSymbol(this) 653205"];
1365 [label="param PEGlobalNamespaceSymbol(PEModuleSymbol moduleSymbol) 653206"];
1366 [label="param PEGlobalNamespaceSymbol(this) 653207"];
1367 [label="param PEGlobalNamespaceSymbol(this) 653208"];
1368 [label="param PENamespaceSymbol(this) 653209"];
1369 [label="param PENamespaceSymbol(this) 653210"];
1370 [label="param NamespaceSymbol(this) 653211"];
1371 [label="param NamespaceSymbol(this) 653212"];
1372 [label="param NamespaceOrTypeSymbol(this) 653213"];
1373 [label="param NamespaceOrTypeSymbol(this) 653214"];
1374 [label="param Symbol(this) 653215"];
1375 [label="_lazyISymbol 653216"];
1376 [label="_lazyAdapter 653217"];
1377 [label="_lazyQualifiedName 653218"];
1378 [label="lazyNamespaces 653219"];
1379 [label="lazyTypes 653220"];
1380 [label="_lazyNoPiaLocalTypes 653221"];
1381 [label="_moduleSymbol 653222"];
1382 [label="Debug.Assert((object)moduleSymbol != null); 653223"];
1383 [label="Debug.Assert((object)moduleSymbol != null); 653224"];
1384 [label="_moduleSymbol 653225"];
1385 [label="_globalNamespace 653226"];
1386 [label="this.MetadataLocation = ImmutableArray.Create<MetadataLocation>(new MetadataLocation(this)); 653227"];
1387 [label="this.MetadataLocation = ImmutableArray.Create<MetadataLocation>(new MetadataLocation(this)); 653228"];
1388 [label="this.MetadataLocation 653229"];
1389 [label="Debug.Assert(ordinal >= 0); 653230"];
1390 [label="Debug.Assert(ordinal >= 0); 653231"];
1391 [label="modules[i] 653232"];
1392 [label="_modules = modules.AsImmutableOrNull(); 653233"];
1393 [label="_modules = modules.AsImmutableOrNull(); 653234"];
1394 [label="_modules 653235"];
1395 [label="_isLinked 653236"];
1396 [label="bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol(); 653237"];
1397 [label="bound.AssemblySymbol 653238"];
1398 [label="newSymbols.Add(i); 653239"];
1399 [label="newSymbols.Add(i); 653240"];
1400 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 653241"];
1401 [label="allAssemblyData[i].IsLinked 653242"];
1402 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 653243"];
1403 [label="bound.AssemblySymbol.IsLinked 653244"];
1404 [label="get\n            {\n                return _isLinked;\n            } 653245"];
1405 [label="return _isLinked; 653246"];
1406 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 653247"];
1407 [label="return _internalsPotentiallyVisibleToCompilation; 653248"];
1408 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 653249"];
1409 [label="_assembly 653250"];
1410 [label="_documentationProvider 653251"];
1411 [label="Debug.Assert(assembly != null); 653252"];
1412 [label="Debug.Assert(documentationProvider != null); 653253"];
1413 [label="_assemblySymbol 653254"];
1414 [label="_ordinal 653255"];
1415 [label="_module 653256"];
1416 [label="_globalNamespace 653257"];
1417 [label="ImportOptions 653258"];
1418 [label="Debug.Assert((object)assemblySymbol != null); 653259"];
1419 [label="Debug.Assert(module != null); 653260"];
1420 [label="_moduleSymbol 653261"];
1421 [label="Debug.Assert((object)moduleSymbol != null); 653262"];
1422 [label="Debug.Assert(ordinal >= 0); 653263"];
1423 [label="bound.AssemblySymbol 653264"];
1424 [label="newSymbols.Add(i); 653265"];
1425 [label="newSymbols.Add(i); 653266"];
1426 [label="allAssemblyData[i].IsLinked 653267"];
1427 [label="bound.AssemblySymbol.IsLinked 653268"];
1428 [label="get\n            {\n                return _isLinked;\n            } 653269"];
1429 [label="return _isLinked; 653270"];
1430 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 653271"];
1431 [label="_assembly 653272"];
1432 [label="_documentationProvider 653273"];
1433 [label="_assemblySymbol 653274"];
1434 [label="_ordinal 653275"];
1435 [label="_module 653276"];
1436 [label="_globalNamespace 653277"];
1437 [label="ImportOptions 653278"];
1438 [label="Debug.Assert((object)assemblySymbol != null); 653279"];
1439 [label="Debug.Assert(module != null); 653280"];
1440 [label="_moduleSymbol 653281"];
1441 [label="Debug.Assert((object)moduleSymbol != null); 653282"];
1442 [label="Debug.Assert(ordinal >= 0); 653283"];
1443 [label="bound.AssemblySymbol 653284"];
1444 [label="newSymbols.Add(i); 653285"];
1445 [label="get\n            {\n                return _isLinked;\n            } 653286"];
1446 [label="return _isLinked; 653287"];
1447 [label="return _internalsPotentiallyVisibleToCompilation; 653288"];
1448 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 653289"];
1449 [label="_assembly 653290"];
1450 [label="_documentationProvider 653291"];
1451 [label="Debug.Assert(assembly != null); 653292"];
1452 [label="Debug.Assert(documentationProvider != null); 653293"];
1453 [label="Debug.Assert(ordinal >= 0); 653294"];
1454 [label="bound.AssemblySymbol 653295"];
1455 [label="newSymbols.Add(i); 653296"];
1456 [label="newSymbols.Add(i); 653297"];
1457 [label="bound.AssemblySymbol.IsLinked 653298"];
1458 [label="get\n            {\n                return _isLinked;\n            } 653299"];
1459 [label="return _isLinked; 653300"];
1460 [label="newSymbols.Add(i); 653301"];
1461 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 653302"];
1462 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 653303"];
1463 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 653304"];
1464 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 653305"];
1465 [label="t_assemblyForWhichCurrentThreadIsComputingKeys 653306"];
1466 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 653307"];
1467 [label="new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules) 653308"];
1468 [label="param SourceAssemblySymbol(CSharpCompilation compilation) 653309"];
1469 [label="param SourceAssemblySymbol(string assemblySimpleName) 653310"];
1470 [label="param SourceAssemblySymbol(string moduleName) 653311"];
1471 [label="param SourceAssemblySymbol(ImmutableArray<PEModule> netModules) 653312"];
1472 [label="param SourceAssemblySymbol(this) 653313"];
1473 [label="param SourceAssemblySymbol(this) 653314"];
1474 [label="param MetadataOrSourceAssemblySymbol(this) 653315"];
1475 [label="param MetadataOrSourceAssemblySymbol(this) 653316"];
1476 [label="param NonMissingAssemblySymbol(this) 653317"];
1477 [label="param NonMissingAssemblySymbol(this) 653318"];
1478 [label="param AssemblySymbol(this) 653319"];
1479 [label="param AssemblySymbol(this) 653320"];
1480 [label="param Symbol(this) 653321"];
1481 [label="_lazyISymbol 653322"];
1482 [label="_corLibrary 653323"];
1483 [label="new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 653324"];
1484 [label="_emittedNameToTypeMap =\n            new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 653325"];
1485 [label="_globalNamespace 653326"];
1486 [label="_lazySpecialTypes 653327"];
1487 [label="_cachedSpecialTypes 653328"];
1488 [label="_lazyNativeIntegerTypes 653329"];
1489 [label="_lazyTypeNames 653330"];
1490 [label="_lazyNamespaceNames 653331"];
1491 [label="_lazySpecialTypeMembers 653332"];
1492 [label="_assembliesToWhichInternalAccessHasBeenAnalyzed 653333"];
1493 [label="_compilation 653334"];
1494 [label="lazyAssemblyIdentity 653335"];
1495 [label="_assemblySimpleName 653336"];
1496 [label="_lazyStrongNameKeys 653337"];
1497 [label="_lazySourceAttributesBag 653338"];
1498 [label="_lazyNetModuleAttributesBag 653339"];
1499 [label="_lazyForwardedTypesFromSource 653340"];
1500 [label="_lazyOmittedAttributeIndices 653341"];
1501 [label="_lazyContainsExtensionMethods 653342"];
1502 [label="new ConcurrentDictionary<FieldSymbol, bool>() 653343"];
1503 [label="_unassignedFieldsMap = new ConcurrentDictionary<FieldSymbol, bool>() 653344"];
1504 [label="new ConcurrentSet<FieldSymbol>() 653345"];
1505 [label="_unreadFields = new ConcurrentSet<FieldSymbol>() 653346"];
1506 [label="new ConcurrentSet<TypeSymbol>() 653347"];
1507 [label="TypesReferencedInExternalMethods = new ConcurrentSet<TypeSymbol>() 653348"];
1508 [label="_optimisticallyGrantedInternalsAccess 653349"];
1509 [label="_lazyInternalsVisibleToMap 653350"];
1510 [label="Debug.Assert(compilation != null); 653351"];
1511 [label="Debug.Assert(compilation != null); 653352"];
1512 [label="Debug.Assert(assemblySimpleName != null); 653353"];
1513 [label="Debug.Assert(assemblySimpleName != null); 653354"];
1514 [label="Debug.Assert(!String.IsNullOrWhiteSpace(moduleName)); 653355"];
1515 [label="Debug.Assert(!netModules.IsDefault); 653356"];
1516 [label="_compilation 653357"];
1517 [label="_assemblySimpleName 653358"];
1518 [label="ArrayBuilder<ModuleSymbol> moduleBuilder = new ArrayBuilder<ModuleSymbol>(1 + netModules.Length); 653359"];
1519 [label="ArrayBuilder<ModuleSymbol> moduleBuilder = new ArrayBuilder<ModuleSymbol>(1 + netModules.Length); 653360"];
1520 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 653361"];
1521 [label="compilation.Declarations 653362"];
1522 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 653363"];
1523 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 653364"];
1524 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 653365"];
1525 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 653366"];
1526 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 653367"];
1527 [label="new SourceModuleSymbol(this, compilation.Declarations, moduleName) 653368"];
1528 [label="param SourceModuleSymbol(SourceAssemblySymbol assemblySymbol) 653369"];
1529 [label="param SourceModuleSymbol(DeclarationTable declarations) 653370"];
1530 [label="param SourceModuleSymbol(string moduleName) 653371"];
1531 [label="param SourceModuleSymbol(this) 653372"];
1532 [label="param SourceModuleSymbol(this) 653373"];
1533 [label="param NonMissingModuleSymbol(this) 653374"];
1534 [label="param NonMissingModuleSymbol(this) 653375"];
1535 [label="param ModuleSymbol(this) 653376"];
1536 [label="param ModuleSymbol(this) 653377"];
1537 [label="param Symbol(this) 653378"];
1538 [label="_lazyISymbol 653379"];
1539 [label="_moduleReferences 653380"];
1540 [label="_assemblySymbol 653381"];
1541 [label="_lazyContainsExplicitDefinitionOfNoPiaLocalTypes = ThreeState.Unknown 653382"];
1542 [label="_sources 653383"];
1543 [label="_lazyCustomAttributesBag 653384"];
1544 [label="_globalNamespace 653385"];
1545 [label="_hasBadAttributes 653386"];
1546 [label="_name 653387"];
1547 [label="Debug.Assert((object)assemblySymbol != null); 653388"];
1548 [label="Debug.Assert((object)assemblySymbol != null); 653389"];
1549 [label="_assemblySymbol 653390"];
1550 [label="_sources 653391"];
1551 [label="_name 653392"];
1552 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 653393"];
1553 [label="compilation.Options 653394"];
1554 [label="get\n            {\n                return _options;\n            } 653395"];
1555 [label="return _options; 653396"];
1556 [label="var importOptions = (compilation.Options.MetadataImportOptions == MetadataImportOptions.All) ?\n                MetadataImportOptions.All : MetadataImportOptions.Internal; 653397"];
1557 [label="(compilation.Options.MetadataImportOptions == MetadataImportOptions.All) 653398"];
1558 [label="foreach (PEModule netModule in netModules)\n            {\n                moduleBuilder.Add(new PEModuleSymbol(this, netModule, importOptions, moduleBuilder.Count));\n                // SetReferences will be called later by the ReferenceManager (in CreateSourceAssemblyFullBind for \n                // a fresh manager, in CreateSourceAssemblyReuseData for a reused one).\n            } 653399"];
1559 [label="_modules = moduleBuilder.ToImmutableAndFree(); 653400"];
1560 [label="_modules 653401"];
1561 [label="compilation.Options 653402"];
1562 [label="get\n            {\n                return _options;\n            } 653403"];
1563 [label="return _options; 653404"];
1564 [label="if (!compilation.Options.CryptoPublicKey.IsEmpty)\n            {\n                // Private key is not necessary for assembly identity, only when emitting.  For this reason, the private key can remain null.\n                _lazyStrongNameKeys = StrongNameKeys.Create(compilation.Options.CryptoPublicKey, privateKey: null, hasCounterSignature: false, MessageProvider.Instance);\n            } 653405"];
1565 [label="if (!compilation.Options.CryptoPublicKey.IsEmpty)\n            {\n                // Private key is not necessary for assembly identity, only when emitting.  For this reason, the private key can remain null.\n                _lazyStrongNameKeys = StrongNameKeys.Create(compilation.Options.CryptoPublicKey, privateKey: null, hasCounterSignature: false, MessageProvider.Instance);\n            } 653406"];
1566 [label="AssemblySymbol? corLibrary; 653407"];
1567 [label="if (corLibraryIndex == 0)\n                    {\n                        corLibrary = assemblySymbol;\n                    }\n                    else if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 653408"];
1568 [label="if (corLibraryIndex == 0)\n                    {\n                        corLibrary = assemblySymbol;\n                    }\n                    else if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 653409"];
1569 [label="if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 653410"];
1570 [label="corLibrary = bindingResult[corLibraryIndex].AssemblySymbol; 653411"];
1571 [label="assemblySymbol.SetCorLibrary(corLibrary); 653412"];
1572 [label="assemblySymbol.SetCorLibrary(corLibrary) 653413"];
1573 [label="param SetCorLibrary(AssemblySymbol corLibrary) 653414"];
1574 [label="param SetCorLibrary(this) 653415"];
1575 [label="Debug.Assert((object)_corLibrary == null); 653416"];
1576 [label="Debug.Assert((object)_corLibrary == null); 653417"];
1577 [label="_corLibrary 653418"];
1578 [label="assemblySymbol.SetCorLibrary(corLibrary); 653419"];
1579 [label="Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies = null; 653420"];
1580 [label="int totalReferencedAssemblyCount = allAssemblyData.Length - 1; 653421"];
1581 [label="int totalReferencedAssemblyCount = allAssemblyData.Length - 1; 653422"];
1582 [label="ImmutableArray<ModuleReferences<AssemblySymbol>> moduleReferences; 653423"];
1583 [label="moduleReferences 653424"];
1584 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 653425"];
1585 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 653426"];
1586 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 653427"];
1587 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 653428"];
1588 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 653429"];
1589 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 653430"];
1590 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences) 653431"];
1591 [label="param SetupReferencesForSourceAssembly(SourceAssemblySymbol sourceAssembly) 653432"];
1592 [label="param SetupReferencesForSourceAssembly(ImmutableArray<PEModule> modules) 653433"];
1593 [label="param SetupReferencesForSourceAssembly(int totalReferencedAssemblyCount) 653434"];
1594 [label="param SetupReferencesForSourceAssembly(BoundInputAssembly[] bindingResult) 653435"];
1595 [label="param SetupReferencesForSourceAssembly(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 653436"];
1596 [label="param SetupReferencesForSourceAssembly(out ImmutableArray<ModuleReferences<AssemblySymbol>> moduleReferences) 653437"];
1597 [label="sourceAssembly.Modules 653438"];
1598 [label="get\n            {\n                return _modules;\n            } 653439"];
1599 [label="return _modules; 653440"];
1600 [label="var moduleSymbols = sourceAssembly.Modules; 653441"];
1601 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 653442"];
1602 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 653443"];
1603 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 653444"];
1604 [label="var moduleReferencesBuilder = (moduleSymbols.Length > 1) ? ArrayBuilder<ModuleReferences<AssemblySymbol>>.GetInstance() : null; 653445"];
1605 [label="var moduleReferencesBuilder = (moduleSymbols.Length > 1) ? ArrayBuilder<ModuleReferences<AssemblySymbol>>.GetInstance() : null; 653446"];
1606 [label="(moduleSymbols.Length > 1) 653447"];
1607 [label="int refsUsed = 0; 653448"];
1608 [label="for (int moduleIndex = 0; moduleIndex < moduleSymbols.Length; moduleIndex++)\n                {\n                    int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length;\n\n                    var identities = new AssemblyIdentity[refsCount];\n                    var symbols = new AssemblySymbol[refsCount];\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n\n                    for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    }\n\n                    var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty());\n\n                    if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    }\n\n                    moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly);\n\n                    refsUsed += refsCount;\n                } 653449"];
1609 [label="for (int moduleIndex = 0; moduleIndex < moduleSymbols.Length; moduleIndex++)\n                {\n                    int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length;\n\n                    var identities = new AssemblyIdentity[refsCount];\n                    var symbols = new AssemblySymbol[refsCount];\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n\n                    for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    }\n\n                    var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty());\n\n                    if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    }\n\n                    moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly);\n\n                    refsUsed += refsCount;\n                } 653450"];
1610 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 653451"];
1611 [label="(moduleIndex == 0) 653452"];
1612 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 653453"];
1613 [label="var identities = new AssemblyIdentity[refsCount]; 653454"];
1614 [label="var symbols = new AssemblySymbol[refsCount]; 653455"];
1615 [label="ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null; 653456"];
1616 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 653457"];
1617 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 653458"];
1618 [label="Debug.Assert(bindingResult[0].ReferenceBinding is object); 653459"];
1619 [label="Debug.Assert(bindingResult[0].ReferenceBinding is object); 653460"];
1620 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 653461"];
1621 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 653462"];
1622 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 653463"];
1623 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 653464"];
1624 [label="Debug.Assert(boundReference.ReferenceIdentity is object); 653465"];
1625 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        } 653466"];
1626 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 653467"];
1627 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 653468"];
1628 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 653469"];
1629 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 653470"];
1630 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 653471"];
1631 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 653472"];
1632 [label="param GetAssemblyDefinitionSymbol(ref ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies) 653473"];
1633 [label="Debug.Assert(referenceBinding.IsBound); 653474"];
1634 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 653475"];
1635 [label="var assembly = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol; 653476"];
1636 [label="Debug.Assert(assembly is object); 653477"];
1637 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 653478"];
1638 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 653479"];
1639 [label="return assembly; 653480"];
1640 [label="symbols[k] 653481"];
1641 [label="identities[k] 653482"];
1642 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 653483"];
1643 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 653484"];
1644 [label="Debug.Assert(boundReference.ReferenceIdentity is object); 653485"];
1645 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        } 653486"];
1646 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 653487"];
1647 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 653488"];
1648 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 653489"];
1649 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 653490"];
1650 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 653491"];
1651 [label="Debug.Assert(referenceBinding.IsBound); 653492"];
1652 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 653493"];
1653 [label="var assembly = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol; 653494"];
1654 [label="Debug.Assert(assembly is object); 653495"];
1655 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 653496"];
1656 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 653497"];
1657 [label="return assembly; 653498"];
1658 [label="symbols[k] 653499"];
1659 [label="identities[k] 653500"];
1660 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 653501"];
1661 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 653502"];
1662 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 653503"];
1663 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 653504"];
1664 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 653505"];
1665 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 653506"];
1666 [label="if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    } 653507"];
1667 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 653508"];
1668 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 653509"];
1669 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 653510"];
1670 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly) 653511"];
1671 [label="param SetReferences(ModuleReferences<AssemblySymbol> moduleReferences) 653512"];
1672 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 653513"];
1673 [label="param SetReferences(this) 653514"];
1674 [label="Debug.Assert(moduleReferences != null); 653515"];
1675 [label="Debug.Assert(moduleReferences != null); 653516"];
1676 [label="AssertReferencesUninitialized() 653517"];
1677 [label="param AssertReferencesUninitialized(this) 653518"];
1678 [label="Debug.Assert(_moduleReferences == null); 653519"];
1679 [label="Debug.Assert(_moduleReferences == null); 653520"];
1680 [label="AssertReferencesUninitialized(); 653521"];
1681 [label="_moduleReferences 653522"];
1682 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 653523"];
1683 [label="refsUsed += refsCount; 653524"];
1684 [label="moduleReferences = moduleReferencesBuilder.ToImmutableOrEmptyAndFree(); 653525"];
1685 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 653526"];
1686 [label="if (newSymbols.Count > 0)\n                    {\n                        // Only if we detected that a referenced assembly refers to the assembly being built\n                        // we allow the references to get a hold of the assembly being built.\n                        if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        }\n\n                        InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies);\n                    } 653527"];
1687 [label="if (newSymbols.Count > 0)\n                    {\n                        // Only if we detected that a referenced assembly refers to the assembly being built\n                        // we allow the references to get a hold of the assembly being built.\n                        if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        }\n\n                        InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies);\n                    } 653528"];
1688 [label="if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        } 653529"];
1689 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 653530"];
1690 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 653531"];
1691 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 653532"];
1692 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 653533"];
1693 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies) 653534"];
1694 [label="param InitializeNewSymbols(List<int> newSymbols) 653535"];
1695 [label="param InitializeNewSymbols(SourceAssemblySymbol sourceAssembly) 653536"];
1696 [label="param InitializeNewSymbols(ImmutableArray<AssemblyData> assemblies) 653537"];
1697 [label="param InitializeNewSymbols(BoundInputAssembly[] bindingResult) 653538"];
1698 [label="param InitializeNewSymbols(Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 653539"];
1699 [label="Debug.Assert(newSymbols.Count > 0); 653540"];
1700 [label="Debug.Assert(newSymbols.Count > 0); 653541"];
1701 [label="sourceAssembly.CorLibrary 653542"];
1702 [label="get\n            {\n                return _corLibrary;\n            } 653543"];
1703 [label="return _corLibrary; 653544"];
1704 [label="var corLibrary = sourceAssembly.CorLibrary; 653545"];
1705 [label="RoslynDebug.Assert((object)corLibrary != null); 653546"];
1706 [label="RoslynDebug.Assert((object)corLibrary != null); 653547"];
1707 [label="foreach (int i in newSymbols)\n                {\n                    var compilationData = assemblies[i] as AssemblyDataForCompilation;\n\n                    if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                } 653548"];
1708 [label="var compilationData = assemblies[i] as AssemblyDataForCompilation; 653549"];
1709 [label="if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    } 653550"];
1710 [label="if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    } 653551"];
1711 [label="var fileData = (AssemblyDataForFile)assemblies[i]; 653552"];
1712 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 653553"];
1713 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 653554"];
1714 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 653555"];
1715 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 653556"];
1716 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 653557"];
1717 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly) 653558"];
1718 [label="param SetupReferencesForFileAssembly(AssemblyDataForFile fileData) 653559"];
1719 [label="param SetupReferencesForFileAssembly(BoundInputAssembly[] bindingResult) 653560"];
1720 [label="param SetupReferencesForFileAssembly(ref BoundInputAssembly currentBindingResult) 653561"];
1721 [label="param SetupReferencesForFileAssembly(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 653562"];
1722 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 653563"];
1723 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 653564"];
1724 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 653565"];
1725 [label="var portableExecutableAssemblySymbol = (PEAssemblySymbol)currentBindingResult.AssemblySymbol; 653566"];
1726 [label="portableExecutableAssemblySymbol.Modules 653567"];
1727 [label="get\n            {\n                return _modules;\n            } 653568"];
1728 [label="return _modules; 653569"];
1729 [label="ImmutableArray<ModuleSymbol> modules = portableExecutableAssemblySymbol.Modules; 653570"];
1730 [label="int moduleCount = modules.Length; 653571"];
1731 [label="int refsUsed = 0; 653572"];
1732 [label="for (int j = 0; j < moduleCount; j++)\n                {\n                    int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j];\n                    var identities = new AssemblyIdentity[moduleReferenceCount];\n                    var symbols = new AssemblySymbol[moduleReferenceCount];\n\n                    fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount);\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n                    for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    }\n\n                    var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty());\n                    modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly);\n\n                    refsUsed += moduleReferenceCount;\n                } 653573"];
1733 [label="for (int j = 0; j < moduleCount; j++)\n                {\n                    int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j];\n                    var identities = new AssemblyIdentity[moduleReferenceCount];\n                    var symbols = new AssemblySymbol[moduleReferenceCount];\n\n                    fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount);\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n                    for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    }\n\n                    var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty());\n                    modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly);\n\n                    refsUsed += moduleReferenceCount;\n                } 653574"];
1734 [label="int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j]; 653575"];
1735 [label="var identities = new AssemblyIdentity[moduleReferenceCount]; 653576"];
1736 [label="var symbols = new AssemblySymbol[moduleReferenceCount]; 653577"];
1737 [label="fileData.AssemblyReferences 653578"];
1738 [label="get\n                    {\n                        return _referencedAssemblies;\n                    } 653579"];
1739 [label="return _referencedAssemblies; 653580"];
1740 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 653581"];
1741 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 653582"];
1742 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 653583"];
1743 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 653584"];
1744 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 653585"];
1745 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 653586"];
1746 [label="ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null; 653587"];
1747 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 653588"];
1748 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 653589"];
1749 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 653590"];
1750 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 653591"];
1751 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 653592"];
1752 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 653593"];
1753 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 653594"];
1754 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 653595"];
1755 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 653596"];
1756 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 653597"];
1757 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly) 653598"];
1758 [label="param SetReferences(ModuleReferences<AssemblySymbol> moduleReferences) 653599"];
1759 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 653600"];
1760 [label="param SetReferences(this) 653601"];
1761 [label="Debug.Assert(moduleReferences != null); 653602"];
1762 [label="Debug.Assert(moduleReferences != null); 653603"];
1763 [label="AssertReferencesUninitialized() 653604"];
1764 [label="param AssertReferencesUninitialized(this) 653605"];
1765 [label="Debug.Assert(_moduleReferences == null); 653606"];
1766 [label="Debug.Assert(_moduleReferences == null); 653607"];
1767 [label="AssertReferencesUninitialized(); 653608"];
1768 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 653609"];
1769 [label="refsUsed += moduleReferenceCount; 653610"];
1770 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 653611"];
1771 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 653612"];
1772 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 653613"];
1773 [label="param SetupReferencesForFileAssembly(BoundInputAssembly[] bindingResult) 653614"];
1774 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 653615"];
1775 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 653616"];
1776 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 653617"];
1777 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 653618"];
1778 [label="var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k]; 653619"];
1779 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        } 653620"];
1780 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 653621"];
1781 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 653622"];
1782 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 653623"];
1783 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 653624"];
1784 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 653625"];
1785 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 653626"];
1786 [label="param GetAssemblyDefinitionSymbol(ref ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies) 653627"];
1787 [label="Debug.Assert(referenceBinding.IsBound); 653628"];
1788 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 653629"];
1789 [label="Debug.Assert(assembly is object); 653630"];
1790 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 653631"];
1791 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 653632"];
1792 [label="symbols[k] 653633"];
1793 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 653634"];
1794 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 653635"];
1795 [label="GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies) 653636"];
1796 [label="param GetOrAddMissingAssemblySymbol(AssemblyIdentity assemblyIdentity) 653637"];
1797 [label="param GetOrAddMissingAssemblySymbol(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 653638"];
1798 [label="MissingAssemblySymbol? missingAssembly; 653639"];
1799 [label="if (missingAssemblies == null)\n                {\n                    missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>();\n                }\n                else if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 653640"];
1800 [label="if (missingAssemblies == null)\n                {\n                    missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>();\n                }\n                else if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 653641"];
1801 [label="missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>(); 653642"];
1802 [label="missingAssembly = new MissingAssemblySymbol(assemblyIdentity); 653643"];
1803 [label="missingAssembly = new MissingAssemblySymbol(assemblyIdentity); 653644"];
1804 [label="new MissingAssemblySymbol(assemblyIdentity) 653645"];
1805 [label="param MissingAssemblySymbol(AssemblyIdentity identity) 653646"];
1806 [label="param MissingAssemblySymbol(this) 653647"];
1807 [label="param MissingAssemblySymbol(this) 653648"];
1808 [label="identity 653649"];
1809 [label="moduleSymbol 653650"];
1810 [label="Debug.Assert(identity != null); 653651"];
1811 [label="Debug.Assert(identity != null); 653652"];
1812 [label="this.identity 653653"];
1813 [label="moduleSymbol = new MissingModuleSymbol(this, 0); 653654"];
1814 [label="moduleSymbol = new MissingModuleSymbol(this, 0); 653655"];
1815 [label="new MissingModuleSymbol(this, 0) 653656"];
1816 [label="param MissingModuleSymbol(AssemblySymbol assembly) 653657"];
1817 [label="param MissingModuleSymbol(int ordinal) 653658"];
1818 [label="param MissingModuleSymbol(this) 653659"];
1819 [label="param MissingModuleSymbol(this) 653660"];
1820 [label="assembly 653661"];
1821 [label="ordinal 653662"];
1822 [label="globalNamespace 653663"];
1823 [label="Debug.Assert((object)assembly != null); 653664"];
1824 [label="Debug.Assert((object)assembly != null); 653665"];
1825 [label="Debug.Assert(ordinal >= -1); 653666"];
1826 [label="Debug.Assert(ordinal >= -1); 653667"];
1827 [label="this.assembly 653668"];
1828 [label="this.ordinal 653669"];
1829 [label="globalNamespace = new MissingNamespaceSymbol(this); 653670"];
1830 [label="globalNamespace = new MissingNamespaceSymbol(this); 653671"];
1831 [label="new MissingNamespaceSymbol(this) 653672"];
1832 [label="param MissingNamespaceSymbol(MissingModuleSymbol containingModule) 653673"];
1833 [label="param MissingNamespaceSymbol(this) 653674"];
1834 [label="param MissingNamespaceSymbol(this) 653675"];
1835 [label="_name 653676"];
1836 [label="_containingSymbol 653677"];
1837 [label="Debug.Assert((object)containingModule != null); 653678"];
1838 [label="Debug.Assert((object)containingModule != null); 653679"];
1839 [label="_containingSymbol 653680"];
1840 [label="_name 653681"];
1841 [label="globalNamespace 653682"];
1842 [label="moduleSymbol 653683"];
1843 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 653684"];
1844 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 653685"];
1845 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 653686"];
1846 [label="return missingAssembly; 653687"];
1847 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 653688"];
1848 [label="symbols[k] 653689"];
1849 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 653690"];
1850 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 653691"];
1851 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 653692"];
1852 [label="identity 653693"];
1853 [label="moduleSymbol 653694"];
1854 [label="Debug.Assert(identity != null); 653695"];
1855 [label="assembly 653696"];
1856 [label="ordinal 653697"];
1857 [label="globalNamespace 653698"];
1858 [label="Debug.Assert((object)assembly != null); 653699"];
1859 [label="Debug.Assert(ordinal >= -1); 653700"];
1860 [label="_name 653701"];
1861 [label="_containingSymbol 653702"];
1862 [label="Debug.Assert((object)containingModule != null); 653703"];
1863 [label="return missingAssembly; 653704"];
1864 [label="symbols[k] 653705"];
1865 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 653706"];
1866 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 653707"];
1867 [label="Debug.Assert(moduleReferences != null); 653708"];
1868 [label="Debug.Assert(moduleReferences != null); 653709"];
1869 [label="AssertReferencesUninitialized() 653710"];
1870 [label="param AssertReferencesUninitialized(this) 653711"];
1871 [label="Debug.Assert(_moduleReferences == null); 653712"];
1872 [label="Debug.Assert(_moduleReferences == null); 653713"];
1873 [label="AssertReferencesUninitialized(); 653714"];
1874 [label="refsUsed += moduleReferenceCount; 653715"];
1875 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 653716"];
1876 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 653717"];
1877 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 653718"];
1878 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 653719"];
1879 [label="Debug.Assert(referenceBinding.IsBound); 653720"];
1880 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 653721"];
1881 [label="Debug.Assert(assembly is object); 653722"];
1882 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 653723"];
1883 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 653724"];
1884 [label="Debug.Assert(moduleReferences != null); 653725"];
1885 [label="AssertReferencesUninitialized() 653726"];
1886 [label="param AssertReferencesUninitialized(this) 653727"];
1887 [label="Debug.Assert(_moduleReferences == null); 653728"];
1888 [label="Debug.Assert(_moduleReferences == null); 653729"];
1889 [label="AssertReferencesUninitialized(); 653730"];
1890 [label="refsUsed += moduleReferenceCount; 653731"];
1891 [label="var linkedReferencedAssembliesBuilder = ArrayBuilder<AssemblySymbol>.GetInstance(); 653732"];
1892 [label="sourceAssembly.Modules 653733"];
1893 [label="get\n            {\n                return _modules;\n            } 653734"];
1894 [label="return _modules; 653735"];
1895 [label="var noPiaResolutionAssemblies = sourceAssembly.Modules[0].GetReferencedAssemblySymbols(); 653736"];
1896 [label="var noPiaResolutionAssemblies = sourceAssembly.Modules[0].GetReferencedAssemblySymbols(); 653737"];
1897 [label="sourceAssembly.Modules[0].GetReferencedAssemblySymbols() 653738"];
1898 [label="param GetReferencedAssemblySymbols(this) 653739"];
1899 [label="AssertReferencesInitialized() 653740"];
1900 [label="param AssertReferencesInitialized(this) 653741"];
1901 [label="Debug.Assert(_moduleReferences != null); 653742"];
1902 [label="Debug.Assert(_moduleReferences != null); 653743"];
1903 [label="AssertReferencesInitialized(); 653744"];
1904 [label="return _moduleReferences.Symbols; 653745"];
1905 [label="foreach (int i in newSymbols)\n                {\n                    ref BoundInputAssembly currentBindingResult = ref bindingResult[i];\n                    Debug.Assert(currentBindingResult.AssemblySymbol is object);\n                    Debug.Assert(currentBindingResult.ReferenceBinding is object);\n\n                    if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    }\n\n                    // Setup linked referenced assemblies.\n                    linkedReferencedAssembliesBuilder.Clear();\n\n                    if (assemblies[i].IsLinked)\n                    {\n                        linkedReferencedAssembliesBuilder.Add(currentBindingResult.AssemblySymbol);\n                    }\n\n                    foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    }\n\n                    if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    }\n\n                    currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary);\n                } 653746"];
1906 [label="ref BoundInputAssembly currentBindingResult = ref bindingResult[i]; 653747"];
1907 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 653748"];
1908 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 653749"];
1909 [label="if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    } 653750"];
1910 [label="assemblies[i].ContainsNoPiaLocalTypes 653751"];
1911 [label="get\n                    {\n                        return Assembly.ContainsNoPiaLocalTypes();\n                    } 653752"];
1912 [label="linkedReferencedAssembliesBuilder.Clear(); 653753"];
1913 [label="if (assemblies[i].IsLinked)\n                    {\n                        linkedReferencedAssembliesBuilder.Add(currentBindingResult.AssemblySymbol);\n                    } 653754"];
1914 [label="assemblies[i].IsLinked 653755"];
1915 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 653756"];
1916 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 653757"];
1917 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 653758"];
1918 [label="if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    } 653759"];
1919 [label="if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    } 653760"];
1920 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary); 653761"];
1921 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary) 653762"];
1922 [label="param SetCorLibrary(AssemblySymbol corLibrary) 653763"];
1923 [label="param SetCorLibrary(this) 653764"];
1924 [label="Debug.Assert((object)_corLibrary == null); 653765"];
1925 [label="Debug.Assert((object)_corLibrary == null); 653766"];
1926 [label="_corLibrary 653767"];
1927 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary); 653768"];
1928 [label="ref BoundInputAssembly currentBindingResult = ref bindingResult[i]; 653769"];
1929 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 653770"];
1930 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 653771"];
1931 [label="if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    } 653772"];
1932 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 653773"];
1933 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 653774"];
1934 [label="if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        } 653775"];
1935 [label="assemblies[referenceBinding.DefinitionIndex].IsLinked 653776"];
1936 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 653777"];
1937 [label="Debug.Assert((object)_corLibrary == null); 653778"];
1938 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 653779"];
1939 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 653780"];
1940 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 653781"];
1941 [label="assemblies[referenceBinding.DefinitionIndex].IsLinked 653782"];
1942 [label="Debug.Assert((object)_corLibrary == null); 653783"];
1943 [label="linkedReferencedAssembliesBuilder.Free(); 653784"];
1944 [label="if (missingAssemblies != null)\n                {\n                    foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    }\n                } 653785"];
1945 [label="if (missingAssemblies != null)\n                {\n                    foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    }\n                } 653786"];
1946 [label="foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    } 653787"];
1947 [label="missingAssembly.SetCorLibrary(corLibrary); 653788"];
1948 [label="missingAssembly.SetCorLibrary(corLibrary) 653789"];
1949 [label="param SetCorLibrary(AssemblySymbol corLibrary) 653790"];
1950 [label="Debug.Assert((object)_corLibrary == null); 653791"];
1951 [label="missingAssembly.SetCorLibrary(corLibrary); 653792"];
1952 [label="Debug.Assert((object)_corLibrary == null); 653793"];
1953 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 653794"];
1954 [label="if (compilation._lazyAssemblySymbol is null)\n                    {\n                        lock (SymbolCacheAndReferenceManagerStateGuard)\n                        {\n                            if (compilation._lazyAssemblySymbol is null)\n                            {\n                                if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                }\n\n                                UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult);\n\n                                InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies());\n\n                                // Make sure that the given compilation holds on this instance of reference manager.\n                                Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference);\n                                compilation._referenceManager = this;\n\n                                // Finally, publish the source symbol after all data have been written.\n                                // Once lazyAssemblySymbol is non-null other readers might start reading the data written above.\n                                compilation._lazyAssemblySymbol = assemblySymbol;\n                            }\n                        }\n                    } 653795"];
1955 [label="if (compilation._lazyAssemblySymbol is null)\n                            {\n                                if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                }\n\n                                UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult);\n\n                                InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies());\n\n                                // Make sure that the given compilation holds on this instance of reference manager.\n                                Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference);\n                                compilation._referenceManager = this;\n\n                                // Finally, publish the source symbol after all data have been written.\n                                // Once lazyAssemblySymbol is non-null other readers might start reading the data written above.\n                                compilation._lazyAssemblySymbol = assemblySymbol;\n                            } 653796"];
1956 [label="if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                } 653797"];
1957 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 653798"];
1958 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 653799"];
1959 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult) 653800"];
1960 [label="param UpdateSymbolCacheNoLock(List<int> newSymbols) 653801"];
1961 [label="param UpdateSymbolCacheNoLock(ImmutableArray<AssemblyData> assemblies) 653802"];
1962 [label="param UpdateSymbolCacheNoLock(BoundInputAssembly[] bindingResult) 653803"];
1963 [label="foreach (int i in newSymbols)\n                {\n                    ref BoundInputAssembly current = ref bindingResult[i];\n                    Debug.Assert(current.AssemblySymbol is object);\n\n                    var compilationData = assemblies[i] as AssemblyDataForCompilation;\n                    if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    }\n                } 653804"];
1964 [label="ref BoundInputAssembly current = ref bindingResult[i]; 653805"];
1965 [label="Debug.Assert(current.AssemblySymbol is object); 653806"];
1966 [label="var compilationData = assemblies[i] as AssemblyDataForCompilation; 653807"];
1967 [label="if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    } 653808"];
1968 [label="if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    } 653809"];
1969 [label="var fileData = (AssemblyDataForFile)assemblies[i]; 653810"];
1970 [label="fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol); 653811"];
1971 [label="fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol); 653812"];
1972 [label="Debug.Assert(current.AssemblySymbol is object); 653813"];
1973 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 653814"];
1974 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 653815"];
1975 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 653816"];
1976 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 653817"];
1977 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 653818"];
1978 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 653819"];
1979 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 653820"];
1980 [label="ReferenceEquals(corLibrary, assemblySymbol) 653821"];
1981 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 653822"];
1982 [label="assemblySymbol.SourceModule 653823"];
1983 [label="get { return (SourceModuleSymbol)this.Modules[0]; } 653824"];
1984 [label="this.Modules 653825"];
1985 [label="get\n            {\n                return _modules;\n            } 653826"];
1986 [label="return _modules; 653827"];
1987 [label="return (SourceModuleSymbol)this.Modules[0]; 653828"];
1988 [label="return (SourceModuleSymbol)this.Modules[0]; 653829"];
1989 [label="assemblySymbol.SourceModule.GetReferencedAssemblySymbols() 653830"];
1990 [label="param GetReferencedAssemblySymbols(this) 653831"];
1991 [label="AssertReferencesInitialized() 653832"];
1992 [label="param AssertReferencesInitialized(this) 653833"];
1993 [label="Debug.Assert(_moduleReferences != null); 653834"];
1994 [label="Debug.Assert(_moduleReferences != null); 653835"];
1995 [label="AssertReferencesInitialized(); 653836"];
1996 [label="return _moduleReferences.Symbols; 653837"];
1997 [label="assemblySymbol.SourceModule 653838"];
1998 [label="get { return (SourceModuleSymbol)this.Modules[0]; } 653839"];
1999 [label="this.Modules 653840"];
2000 [label="get\n            {\n                return _modules;\n            } 653841"];
2001 [label="return _modules; 653842"];
2002 [label="return (SourceModuleSymbol)this.Modules[0]; 653843"];
2003 [label="assemblySymbol.SourceModule.GetUnifiedAssemblies() 653844"];
2004 [label="param GetUnifiedAssemblies(this) 653845"];
2005 [label="AssertReferencesInitialized() 653846"];
2006 [label="param AssertReferencesInitialized(this) 653847"];
2007 [label="Debug.Assert(_moduleReferences != null); 653848"];
2008 [label="Debug.Assert(_moduleReferences != null); 653849"];
2009 [label="AssertReferencesInitialized(); 653850"];
2010 [label="return _moduleReferences.UnifiedAssemblies; 653851"];
2011 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 653852"];
2012 [label="Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference); 653853"];
2013 [label="Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference); 653854"];
2014 [label="compilation._referenceManager 653855"];
2015 [label="compilation._lazyAssemblySymbol 653856"];
2016 [label="return true; 653857"];
2017 [label="resolutionDiagnostics.Free(); 653858"];
2018 [label="assemblyReferencesBySimpleName.Free(); 653859"];
2019 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 653860"];
2020 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 653861"];
2021 [label="AssertBound(); 653862"];
2022 [label="Debug.Assert(compilation._lazyAssemblySymbol is object); 653863"];
2023 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 653864"];
2024 [label="Debug.Assert(_lazyAssemblySymbol is object); 653865"];
2025 [label="return _referenceManager; 653866"];
2026 [label="GetBoundReferenceManager(); 653867"];
2027 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 653868"];
2028 [label="return _lazyAssemblySymbol; 653869"];
2029 [label="return SourceAssembly; 653870"];
2030 [label="modules.AddRange(Assembly.Modules); 653871"];
2031 [label="Assembly.Modules 653872"];
2032 [label="get\n            {\n                return _modules;\n            } 653873"];
2033 [label="modules.AddRange(Assembly.Modules); 653874"];
2034 [label="GetBoundReferenceManager() 653875"];
2035 [label="param GetBoundReferenceManager(this) 653876"];
2036 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 653877"];
2037 [label="return _referenceManager; 653878"];
2038 [label="var referenceManager = GetBoundReferenceManager(); 653879"];
2039 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 653880"];
2040 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 653881"];
2041 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 653882"];
2042 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 653883"];
2043 [label="referenceManager.ReferencedAssemblies[i].Modules 653884"];
2044 [label="get\n            {\n                return _modules;\n            } 653885"];
2045 [label="GetAllUnaliasedModules(modules); 653886"];
2046 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 653887"];
2047 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 653888"];
2048 [label="new NamespaceExtent(this) 653889"];
2049 [label="param NamespaceExtent(CSharpCompilation compilation) 653890"];
2050 [label="param NamespaceExtent(this) 653891"];
2051 [label="_kind 653892"];
2052 [label="_symbolOrCompilation 653893"];
2053 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 653894"];
2054 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 653895"];
2055 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 653896"];
2056 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 653897"];
2057 [label="var diagnostics = DiagnosticBag.GetInstance(); 653898"];
2058 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 653899"];
2059 [label="DeclaringCompilation 653900"];
2060 [label="get\n            {\n                return _assemblySymbol.DeclaringCompilation;\n            } 653901"];
2061 [label="_assemblySymbol.DeclaringCompilation 653902"];
2062 [label="get\n            {\n                return _compilation;\n            } 653903"];
2063 [label="return _compilation; 653904"];
2064 [label="return _assemblySymbol.DeclaringCompilation; 653905"];
2065 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 653906"];
2066 [label="DeclaringCompilation.MergedRootDeclaration 653907"];
2067 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 653908"];
2068 [label="Declarations 653909"];
2069 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 653910"];
2070 [label="return Declarations.GetMergedRoot(this); 653911"];
2071 [label="return Declarations.GetMergedRoot(this); 653912"];
2072 [label="return Declarations.GetMergedRoot(this); 653913"];
2073 [label="0x1 653914"];
2074 [label="LazyAllMembersIsSorted = 0x1 653915"];
2075 [label="d =>\n            new NamespaceDeclarationSyntaxReference(d.SyntaxReference) 653916"];
2076 [label="s_declaringSyntaxReferencesSelector = d =>\n            new NamespaceDeclarationSyntaxReference(d.SyntaxReference) 653917"];
2077 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 653918"];
2078 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 653919"];
2079 [label="new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics) 653920"];
2080 [label="param SourceNamespaceSymbol(SourceModuleSymbol module) 653921"];
2081 [label="param SourceNamespaceSymbol(Symbol container) 653922"];
2082 [label="param SourceNamespaceSymbol(MergedNamespaceDeclaration mergedDeclaration) 653923"];
2083 [label="param SourceNamespaceSymbol(DiagnosticBag diagnostics) 653924"];
2084 [label="param SourceNamespaceSymbol(this) 653925"];
2085 [label="param SourceNamespaceSymbol(this) 653926"];
2086 [label="_module 653927"];
2087 [label="_container 653928"];
2088 [label="_mergedDeclaration 653929"];
2089 [label="_nameToMembersMap 653930"];
2090 [label="_nameToTypeMembersMap 653931"];
2091 [label="_flags 653932"];
2092 [label="new LexicalSortKey() { _treeOrdinal = -1, _position = 0 } 653933"];
2093 [label="1 653934"];
2094 [label="_treeOrdinal 653935"];
2095 [label="0 653936"];
2096 [label="_position 653937"];
2097 [label="NotInSource = new LexicalSortKey() { _treeOrdinal = -1, _position = 0 } 653938"];
2098 [label="new LexicalSortKey() { _treeOrdinal = -1, _position = -1 } 653939"];
2099 [label="1 653940"];
2100 [label="_treeOrdinal 653941"];
2101 [label="1 653942"];
2102 [label="_position 653943"];
2103 [label="NotInitialized = new LexicalSortKey() { _treeOrdinal = -1, _position = -1 } 653944"];
2104 [label="new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue - 1 } 653945"];
2105 [label="_treeOrdinal 653946"];
2106 [label="1 653947"];
2107 [label="int.MaxValue - 1 653948"];
2108 [label="_position 653949"];
2109 [label="SynthesizedCtor = new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue - 1 } 653950"];
2110 [label="new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue } 653951"];
2111 [label="_treeOrdinal 653952"];
2112 [label="_position 653953"];
2113 [label="SynthesizedCCtor = new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue } 653954"];
2114 [label="_lazyLexicalSortKey = LexicalSortKey.NotInitialized 653955"];
2115 [label="Debug.Assert(mergedDeclaration != null); 653956"];
2116 [label="Debug.Assert(mergedDeclaration != null); 653957"];
2117 [label="_module 653958"];
2118 [label="_container 653959"];
2119 [label="_mergedDeclaration 653960"];
2120 [label="foreach (var singleDeclaration in mergedDeclaration.Declarations)\n            {\n                diagnostics.AddRange(singleDeclaration.Diagnostics);\n            } 653961"];
2121 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 653962"];
2122 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 653963"];
2123 [label="Debug.Assert(diagnostics.IsEmptyWithoutResolution); 653964"];
2124 [label="diagnostics.Free(); 653965"];
2125 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 653966"];
2126 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 653967"];
2127 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 653968"];
2128 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 653969"];
2129 [label="return _globalNamespace; 653970"];
2130 [label="param GetHashCode(this) 653971"];
2131 [label="return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this); 653972"];
2132 [label="return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this); 653973"];
2133 [label="get { return _globalNamespace; } 653974"];
2134 [label="return _globalNamespace; 653975"];
2135 [label="MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)) 653976"];
2136 [label="param Create(NamespaceExtent extent) 653977"];
2137 [label="param Create(NamespaceSymbol containingNamespace) 653978"];
2138 [label="param Create(ImmutableArray<NamespaceSymbol> namespacesToMerge) 653979"];
2139 [label="param Create(string nameOpt = null) 653980"];
2140 [label="Debug.Assert(namespacesToMerge.Length != 0); 653981"];
2141 [label="Debug.Assert(namespacesToMerge.Length != 0); 653982"];
2142 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 653983"];
2143 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 653984"];
2144 [label="(namespacesToMerge.Length == 1 && nameOpt == null) 653985"];
2145 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 653986"];
2146 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 653987"];
2147 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 653988"];
2148 [label="new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt) 653989"];
2149 [label="param MergedNamespaceSymbol(NamespaceExtent extent) 653990"];
2150 [label="param MergedNamespaceSymbol(NamespaceSymbol containingNamespace) 653991"];
2151 [label="param MergedNamespaceSymbol(ImmutableArray<NamespaceSymbol> namespacesToMerge) 653992"];
2152 [label="param MergedNamespaceSymbol(string nameOpt) 653993"];
2153 [label="param MergedNamespaceSymbol(this) 653994"];
2154 [label="param MergedNamespaceSymbol(this) 653995"];
2155 [label="_containingNamespace 653996"];
2156 [label="_nameOpt 653997"];
2157 [label="_cachedLookup 653998"];
2158 [label="_extent 653999"];
2159 [label="_namespacesToMerge 654000"];
2160 [label="_containingNamespace 654001"];
2161 [label="_cachedLookup = new CachingDictionary<string, Symbol>(SlowGetChildrenOfName, SlowGetChildNames, EqualityComparer<string>.Default); 654002"];
2162 [label="_cachedLookup = new CachingDictionary<string, Symbol>(SlowGetChildrenOfName, SlowGetChildNames, EqualityComparer<string>.Default); 654003"];
2163 [label="_cachedLookup 654004"];
2164 [label="_nameOpt 654005"];
2165 [label="foreach (NamespaceSymbol ns in namespacesToMerge)\n            {\n                Debug.Assert(ns.ConstituentNamespaces.Length == 1);\n            } 654006"];
2166 [label="ns.ConstituentNamespaces 654007"];
2167 [label="get\n            {\n                return ImmutableArray.Create(this);\n            } 654008"];
2168 [label="return ImmutableArray.Create(this); 654009"];
2169 [label="Debug.Assert(ns.ConstituentNamespaces.Length == 1); 654010"];
2170 [label="Debug.Assert(ns.ConstituentNamespaces.Length == 1); 654011"];
2171 [label="modules.Free(); 654012"];
2172 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 654013"];
2173 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 654014"];
2174 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 654015"];
2175 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 654016"];
2176 [label="return _lazyGlobalNamespace; 654017"];
2177 [label="var namespaceNS = comp.GlobalNamespace.GetMembers('NS').First() as NamespaceOrTypeSymbol; 654018"];
2178 [label="var namespaceNS = comp.GlobalNamespace.GetMembers('NS').First() as NamespaceOrTypeSymbol; 654019"];
2179 [label="comp.GlobalNamespace.GetMembers('NS') 654020"];
2180 [label="param GetMembers(string name) 654021"];
2181 [label="param GetMembers(this) 654022"];
2182 [label="return _cachedLookup[name]; 654023"];
2183 [label="_cachedLookup 654024"];
2184 [label="param SlowGetChildrenOfName(string name) 654025"];
2185 [label="param SlowGetChildrenOfName(this) 654026"];
2186 [label="ArrayBuilder<NamespaceSymbol> namespaceSymbols = null; 654027"];
2187 [label="var otherSymbols = ArrayBuilder<Symbol>.GetInstance(); 654028"];
2188 [label="foreach (NamespaceSymbol namespaceSymbol in _namespacesToMerge)\n            {\n                foreach (Symbol childSymbol in namespaceSymbol.GetMembers(name))\n                {\n                    if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    }\n                }\n            } 654029"];
2189 [label="foreach (Symbol childSymbol in namespaceSymbol.GetMembers(name))\n                {\n                    if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    }\n                } 654030"];
2190 [label="namespaceSymbol.GetMembers(name) 654031"];
2191 [label="param GetMembers(string name) 654032"];
2192 [label="param GetMembers(this) 654033"];
2193 [label="ImmutableArray<NamespaceOrTypeSymbol> members; 654034"];
2194 [label="members 654035"];
2195 [label="this.GetNameToMembersMap() 654036"];
2196 [label="param GetNameToMembersMap(this) 654037"];
2197 [label="if (_nameToMembersMap == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                }\n\n                diagnostics.Free();\n            } 654038"];
2198 [label="if (_nameToMembersMap == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                }\n\n                diagnostics.Free();\n            } 654039"];
2199 [label="var diagnostics = DiagnosticBag.GetInstance(); 654040"];
2200 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 654041"];
2201 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 654042"];
2202 [label="MakeNameToMembersMap(diagnostics) 654043"];
2203 [label="param MakeNameToMembersMap(DiagnosticBag diagnostics) 654044"];
2204 [label="param MakeNameToMembersMap(this) 654045"];
2205 [label="var builder = new NameToSymbolMapBuilder(_mergedDeclaration.Children.Length); 654046"];
2206 [label="_mergedDeclaration.Children 654047"];
2207 [label="param NameToSymbolMapBuilder(int capacity) 654048"];
2208 [label="param NameToSymbolMapBuilder(this) 654049"];
2209 [label="_dictionary = new Dictionary<string, object>(capacity, StringOrdinalComparer.Instance); 654050"];
2210 [label="_dictionary = new Dictionary<string, object>(capacity, StringOrdinalComparer.Instance); 654051"];
2211 [label="_dictionary 654052"];
2212 [label="foreach (var declaration in _mergedDeclaration.Children)\n            {\n                builder.Add(BuildSymbol(declaration, diagnostics));\n            } 654053"];
2213 [label="builder.Add(BuildSymbol(declaration, diagnostics)); 654054"];
2214 [label="builder.Add(BuildSymbol(declaration, diagnostics)); 654055"];
2215 [label="BuildSymbol(declaration, diagnostics) 654056"];
2216 [label="param BuildSymbol(MergedNamespaceOrTypeDeclaration declaration) 654057"];
2217 [label="param BuildSymbol(DiagnosticBag diagnostics) 654058"];
2218 [label="param BuildSymbol(this) 654059"];
2219 [label="switch (declaration.Kind)\n            {\n                case DeclarationKind.Namespace:\n                    return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.Struct:\n                case DeclarationKind.Interface:\n                case DeclarationKind.Enum:\n                case DeclarationKind.Delegate:\n                case DeclarationKind.Class:\n                case DeclarationKind.Record:\n                    return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.Script:\n                case DeclarationKind.Submission:\n                case DeclarationKind.ImplicitClass:\n                    return new ImplicitNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.SimpleProgram:\n                    return new SimpleProgramNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaration.Kind);\n            } 654060"];
2220 [label="return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics); 654061"];
2221 [label="return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics); 654062"];
2222 [label="return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics); 654063"];
2223 [label="return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics); 654064"];
2224 [label="return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics); 654065"];
2225 [label="new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics) 654066"];
2226 [label="param SourceNamespaceSymbol(SourceModuleSymbol module) 654067"];
2227 [label="param SourceNamespaceSymbol(Symbol container) 654068"];
2228 [label="param SourceNamespaceSymbol(MergedNamespaceDeclaration mergedDeclaration) 654069"];
2229 [label="param SourceNamespaceSymbol(DiagnosticBag diagnostics) 654070"];
2230 [label="param SourceNamespaceSymbol(this) 654071"];
2231 [label="_module 654072"];
2232 [label="_container 654073"];
2233 [label="_mergedDeclaration 654074"];
2234 [label="Debug.Assert(mergedDeclaration != null); 654075"];
2235 [label="Debug.Assert(mergedDeclaration != null); 654076"];
2236 [label="builder.Add(BuildSymbol(declaration, diagnostics)) 654077"];
2237 [label="param Add(NamespaceOrTypeSymbol symbol) 654078"];
2238 [label="param Add(this) 654079"];
2239 [label="symbol.Name 654080"];
2240 [label="=> _mergedDeclaration.Name 654081"];
2241 [label="_mergedDeclaration.Name 654082"];
2242 [label="string name = symbol.Name; 654083"];
2243 [label="object item; 654084"];
2244 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 654085"];
2245 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 654086"];
2246 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 654087"];
2247 [label="_dictionary 654088"];
2248 [label="builder.CreateMap() 654089"];
2249 [label="param CreateMap(this) 654090"];
2250 [label="var result = new Dictionary<String, ImmutableArray<NamespaceOrTypeSymbol>>(_dictionary.Count, StringOrdinalComparer.Instance); 654091"];
2251 [label="var result = new Dictionary<String, ImmutableArray<NamespaceOrTypeSymbol>>(_dictionary.Count, StringOrdinalComparer.Instance); 654092"];
2252 [label="foreach (var kvp in _dictionary)\n                {\n                    object value = kvp.Value;\n                    ImmutableArray<NamespaceOrTypeSymbol> members;\n\n                    var builder = value as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    }\n\n                    result.Add(kvp.Key, members);\n                } 654093"];
2253 [label="object value = kvp.Value; 654094"];
2254 [label="ImmutableArray<NamespaceOrTypeSymbol> members; 654095"];
2255 [label="members 654096"];
2256 [label="var builder = value as ArrayBuilder<NamespaceOrTypeSymbol>; 654097"];
2257 [label="if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    } 654098"];
2258 [label="if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    } 654099"];
2259 [label="NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value; 654100"];
2260 [label="symbol.Kind 654101"];
2261 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 654102"];
2262 [label="return SymbolKind.Namespace; 654103"];
2263 [label="members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol)); 654104"];
2264 [label="symbol.Kind == SymbolKind.Namespace 654105"];
2265 [label="members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol)); 654106"];
2266 [label="result.Add(kvp.Key, members); 654107"];
2267 [label="result.Add(kvp.Key, members); 654108"];
2268 [label="result.Add(kvp.Key, members); 654109"];
2269 [label="return result; 654110"];
2270 [label="var result = builder.CreateMap(); 654111"];
2271 [label="CheckMembers(this, result, diagnostics); 654112"];
2272 [label="CheckMembers(this, result, diagnostics); 654113"];
2273 [label="CheckMembers(this, result, diagnostics); 654114"];
2274 [label="CheckMembers(this, result, diagnostics) 654115"];
2275 [label="param CheckMembers(NamespaceSymbol @namespace) 654116"];
2276 [label="param CheckMembers(Dictionary<string, ImmutableArray<NamespaceOrTypeSymbol>> result) 654117"];
2277 [label="param CheckMembers(DiagnosticBag diagnostics) 654118"];
2278 [label="var memberOfArity = new Symbol[10]; 654119"];
2279 [label="MergedNamespaceSymbol mergedAssemblyNamespace = null; 654120"];
2280 [label="@namespace.ContainingAssembly 654121"];
2281 [label="=> _module.ContainingAssembly 654122"];
2282 [label="_module.ContainingAssembly 654123"];
2283 [label="get\n            {\n                return _assemblySymbol;\n            } 654124"];
2284 [label="return _assemblySymbol; 654125"];
2285 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 654126"];
2286 [label="@namespace.ContainingAssembly.Modules 654127"];
2287 [label="get\n            {\n                return _modules;\n            } 654128"];
2288 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 654129"];
2289 [label="foreach (var name in result.Keys)\n            {\n                Array.Clear(memberOfArity, 0, memberOfArity.Length);\n                foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                }\n            } 654130"];
2290 [label="foreach (var name in result.Keys)\n            {\n                Array.Clear(memberOfArity, 0, memberOfArity.Length);\n                foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                }\n            } 654131"];
2291 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 654132"];
2292 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 654133"];
2293 [label="foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                } 654134"];
2294 [label="var nts = symbol as NamedTypeSymbol; 654135"];
2295 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 654136"];
2296 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 654137"];
2297 [label="((object)nts != null) 654138"];
2298 [label="if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    } 654139"];
2299 [label="var other = memberOfArity[arity]; 654140"];
2300 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 654141"];
2301 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 654142"];
2302 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 654143"];
2303 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 654144"];
2304 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 654145"];
2305 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 654146"];
2306 [label="memberOfArity[arity] 654147"];
2307 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 654148"];
2308 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 654149"];
2309 [label="CheckMembers(this, result, diagnostics); 654150"];
2310 [label="return result; 654151"];
2311 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 654152"];
2312 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 654153"];
2313 [label="this.DeclaringCompilation 654154"];
2314 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 654155"];
2315 [label="this.Kind 654156"];
2316 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 654157"];
2317 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 654158"];
2318 [label="this.ContainingModule 654159"];
2319 [label="get\n            {\n                return _module;\n            } 654160"];
2320 [label="return _module; 654161"];
2321 [label="var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol; 654162"];
2322 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 654163"];
2323 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 654164"];
2324 [label="(object)sourceModuleSymbol == null 654165"];
2325 [label="sourceModuleSymbol.DeclaringCompilation 654166"];
2326 [label="this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics); 654167"];
2327 [label="this.DeclaringCompilation.DeclarationDiagnostics 654168"];
2328 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 654169"];
2329 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 654170"];
2330 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 654171"];
2331 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 654172"];
2332 [label="var diagnostics = new DiagnosticBag(); 654173"];
2333 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 654174"];
2334 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 654175"];
2335 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 654176"];
2336 [label="return _lazyDeclarationDiagnostics; 654177"];
2337 [label="this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics); 654178"];
2338 [label="RegisterDeclaredCorTypes() 654179"];
2339 [label="param RegisterDeclaredCorTypes(this) 654180"];
2340 [label="ContainingAssembly 654181"];
2341 [label="=> _module.ContainingAssembly 654182"];
2342 [label="_module.ContainingAssembly 654183"];
2343 [label="get\n            {\n                return _assemblySymbol;\n            } 654184"];
2344 [label="return _assemblySymbol; 654185"];
2345 [label="AssemblySymbol containingAssembly = ContainingAssembly; 654186"];
2346 [label="containingAssembly.KeepLookingForDeclaredSpecialTypes 654187"];
2347 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 654188"];
2348 [label="this.CorLibrary 654189"];
2349 [label="get\n            {\n                return _corLibrary;\n            } 654190"];
2350 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 654191"];
2351 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 654192"];
2352 [label="if (containingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                // Register newly declared COR types\n                foreach (var array in _nameToMembersMap.Values)\n                {\n                    foreach (var member in array)\n                    {\n                        var type = member as NamedTypeSymbol;\n\n                        if ((object)type != null && type.SpecialType != SpecialType.None)\n                        {\n                            containingAssembly.RegisterDeclaredSpecialType(type);\n\n                            if (!containingAssembly.KeepLookingForDeclaredSpecialTypes)\n                            {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } 654193"];
2353 [label="RegisterDeclaredCorTypes(); 654194"];
2354 [label="DeclaringCompilation 654195"];
2355 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 654196"];
2356 [label="this.Kind 654197"];
2357 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 654198"];
2358 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 654199"];
2359 [label="this.ContainingModule 654200"];
2360 [label="get\n            {\n                return _module;\n            } 654201"];
2361 [label="return _module; 654202"];
2362 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 654203"];
2363 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 654204"];
2364 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 654205"];
2365 [label="DeclaringCompilation.SymbolDeclaredEvent(this) 654206"];
2366 [label="param SymbolDeclaredEvent(Symbol symbol) 654207"];
2367 [label="param SymbolDeclaredEvent(this) 654208"];
2368 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 654209"];
2369 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 654210"];
2370 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 654211"];
2371 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 654212"];
2372 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 654213"];
2373 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 654214"];
2374 [label="var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap); 654215"];
2375 [label="_state.NotePartComplete(CompletionPart.NameToMembersMap) 654216"];
2376 [label="param NotePartComplete(CompletionPart part) 654217"];
2377 [label="param NotePartComplete(this) 654218"];
2378 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 654219"];
2379 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 654220"];
2380 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 654221"];
2381 [label="Debug.Assert(wasSetThisThread); 654222"];
2382 [label="diagnostics.Free(); 654223"];
2383 [label="return _nameToMembersMap; 654224"];
2384 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 654225"];
2385 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 654226"];
2386 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 654227"];
2387 [label="return this.GetNameToMembersMap().TryGetValue(name, out members)\n                ? members.Cast<NamespaceOrTypeSymbol, Symbol>()\n                : ImmutableArray<Symbol>.Empty; 654228"];
2388 [label="this.GetNameToMembersMap().TryGetValue(name, out members) 654229"];
2389 [label="childSymbol.Kind 654230"];
2390 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 654231"];
2391 [label="if (childSymbol.Kind == SymbolKind.Namespace)\n                    {\n                        namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance();\n                        namespaceSymbols.Add((NamespaceSymbol)childSymbol);\n                    }\n                    else\n                    {\n                        otherSymbols.Add(childSymbol);\n                    } 654232"];
2392 [label="namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance(); 654233"];
2393 [label="namespaceSymbols = namespaceSymbols ?? ArrayBuilder<NamespaceSymbol>.GetInstance(); 654234"];
2394 [label="namespaceSymbols.Add((NamespaceSymbol)childSymbol); 654235"];
2395 [label="namespaceSymbols.Add((NamespaceSymbol)childSymbol); 654236"];
2396 [label="param GetMembers(string name) 654237"];
2397 [label="param GetMembers(this) 654238"];
2398 [label="EnsureAllMembersLoaded() 654239"];
2399 [label="param EnsureAllMembersLoaded(this) 654240"];
2400 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups;\n\n                try\n                {\n                    groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal);\n                }\n                catch (BadImageFormatException)\n                {\n                    groups = SpecializedCollections.EmptyEnumerable<IGrouping<string, TypeDefinitionHandle>>();\n                }\n\n                LoadAllMembers(groups);\n            } 654241"];
2401 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups;\n\n                try\n                {\n                    groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal);\n                }\n                catch (BadImageFormatException)\n                {\n                    groups = SpecializedCollections.EmptyEnumerable<IGrouping<string, TypeDefinitionHandle>>();\n                }\n\n                LoadAllMembers(groups);\n            } 654242"];
2402 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 654243"];
2403 [label="_moduleSymbol.Module 654244"];
2404 [label="get\n            {\n                return _module;\n            } 654245"];
2405 [label="return _module; 654246"];
2406 [label="groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal); 654247"];
2407 [label="groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal); 654248"];
2408 [label="LoadAllMembers(groups); 654249"];
2409 [label="LoadAllMembers(groups) 654250"];
2410 [label="param LoadAllMembers(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 654251"];
2411 [label="param LoadAllMembers(this) 654252"];
2412 [label="Debug.Assert(typesByNS != null); 654253"];
2413 [label="Debug.Assert(typesByNS != null); 654254"];
2414 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> nestedTypes = null; 654255"];
2415 [label="IEnumerable<KeyValuePair<string, IEnumerable<IGrouping<string, TypeDefinitionHandle>>>> nestedNamespaces = null; 654256"];
2416 [label="this.IsGlobalNamespace 654257"];
2417 [label="get\n            {\n                return true;\n            } 654258"];
2418 [label="return true; 654259"];
2419 [label="bool isGlobalNamespace = this.IsGlobalNamespace; 654260"];
2420 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 654261"];
2421 [label="isGlobalNamespace 654262"];
2422 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 654263"];
2423 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 654264"];
2424 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 654265"];
2425 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 654266"];
2426 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 654267"];
2427 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 654268"];
2428 [label="LazyInitializeNamespaces(nestedNamespaces); 654269"];
2429 [label="LazyInitializeNamespaces(nestedNamespaces) 654270"];
2430 [label="param LazyInitializeNamespaces(IEnumerable<KeyValuePair<string, IEnumerable<IGrouping<string, TypeDefinitionHandle>>>> childNamespaces) 654271"];
2431 [label="param LazyInitializeNamespaces(this) 654272"];
2432 [label="if (this.lazyNamespaces == null)\n            {\n                var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance);\n\n                foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                }\n\n                Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null);\n            } 654273"];
2433 [label="if (this.lazyNamespaces == null)\n            {\n                var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance);\n\n                foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                }\n\n                Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null);\n            } 654274"];
2434 [label="var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance); 654275"];
2435 [label="foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                } 654276"];
2436 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 654277"];
2437 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 654278"];
2438 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 654279"];
2439 [label="new PENestedNamespaceSymbol(child.Key, this, child.Value) 654280"];
2440 [label="param PENestedNamespaceSymbol(string name) 654281"];
2441 [label="param PENestedNamespaceSymbol(PENamespaceSymbol containingNamespace) 654282"];
2442 [label="param PENestedNamespaceSymbol(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 654283"];
2443 [label="param PENestedNamespaceSymbol(this) 654284"];
2444 [label="param PENestedNamespaceSymbol(this) 654285"];
2445 [label="_containingNamespaceSymbol 654286"];
2446 [label="_name 654287"];
2447 [label="_typesByNS 654288"];
2448 [label="Debug.Assert(name != null); 654289"];
2449 [label="Debug.Assert(name != null); 654290"];
2450 [label="Debug.Assert((object)containingNamespace != null); 654291"];
2451 [label="Debug.Assert((object)containingNamespace != null); 654292"];
2452 [label="Debug.Assert(typesByNS != null); 654293"];
2453 [label="Debug.Assert(typesByNS != null); 654294"];
2454 [label="_containingNamespaceSymbol 654295"];
2455 [label="_name 654296"];
2456 [label="_typesByNS 654297"];
2457 [label="c.Name 654298"];
2458 [label="get\n            {\n                return _name;\n            } 654299"];
2459 [label="return _name; 654300"];
2460 [label="namespaces.Add(c.Name, c); 654301"];
2461 [label="namespaces.Add(c.Name, c); 654302"];
2462 [label="namespaces.Add(c.Name, c); 654303"];
2463 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 654304"];
2464 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 654305"];
2465 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 654306"];
2466 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 654307"];
2467 [label="LazyInitializeNamespaces(nestedNamespaces); 654308"];
2468 [label="LazyInitializeTypes(nestedTypes); 654309"];
2469 [label="LazyInitializeTypes(nestedTypes) 654310"];
2470 [label="param LazyInitializeTypes(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typeGroups) 654311"];
2471 [label="param LazyInitializeTypes(this) 654312"];
2472 [label="if (this.lazyTypes == null)\n            {\n                var moduleSymbol = ContainingPEModule;\n\n                var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes();\n                Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null;\n\n                foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance);\n                children.Free();\n\n                if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                }\n\n                var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null);\n\n                // Build cache of TypeDef Tokens\n                // Potentially this can be done in the background.\n                if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n            } 654313"];
2473 [label="if (this.lazyTypes == null)\n            {\n                var moduleSymbol = ContainingPEModule;\n\n                var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes();\n                Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null;\n\n                foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance);\n                children.Free();\n\n                if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                }\n\n                var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null);\n\n                // Build cache of TypeDef Tokens\n                // Potentially this can be done in the background.\n                if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n            } 654314"];
2474 [label="ContainingPEModule 654315"];
2475 [label="get\n            {\n                return _moduleSymbol;\n            } 654316"];
2476 [label="return _moduleSymbol; 654317"];
2477 [label="var moduleSymbol = ContainingPEModule; 654318"];
2478 [label="var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance(); 654319"];
2479 [label="moduleSymbol.Module 654320"];
2480 [label="get\n            {\n                return _module;\n            } 654321"];
2481 [label="var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes(); 654322"];
2482 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 654323"];
2483 [label="foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                } 654324"];
2484 [label="foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                } 654325"];
2485 [label="foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    } 654326"];
2486 [label="if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        } 654327"];
2487 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 654328"];
2488 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 654329"];
2489 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 654330"];
2490 [label="EmptyComparer.Instance 654331"];
2491 [label="new Dictionary<string, ImmutableArray<PENamedTypeSymbol>>(EmptyComparer.Instance) 654332"];
2492 [label="s_emptyNestedTypes = new Dictionary<string, ImmutableArray<PENamedTypeSymbol>>(EmptyComparer.Instance) 654333"];
2493 [label="new UncommonProperties() 654334"];
2494 [label="param UncommonProperties(this) 654335"];
2495 [label="lazyEnumUnderlyingType 654336"];
2496 [label="lazyObsoleteAttributeData = ObsoleteAttributeData.Uninitialized 654337"];
2497 [label="lazyAttributeUsageInfo = AttributeUsageInfo.Null 654338"];
2498 [label="lazyContainsExtensionMethods 654339"];
2499 [label="lazyIsByRefLike 654340"];
2500 [label="lazyIsReadOnly 654341"];
2501 [label="lazyDefaultMemberName 654342"];
2502 [label="new UnsupportedMetadataTypeSymbol() 654343"];
2503 [label="param UnsupportedMetadataTypeSymbol(BadImageFormatException? mrEx = null) 654344"];
2504 [label="param UnsupportedMetadataTypeSymbol(this) 654345"];
2505 [label="param ErrorTypeSymbol(this) 654346"];
2506 [label="param ErrorTypeSymbol(TupleExtraData? tupleData = null) 654347"];
2507 [label="symbol =>\n        {\n            if (!symbol.IsStatic)\n            {\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Field:\n                    case SymbolKind.Event:\n                        return true;\n                }\n            }\n            return false;\n        } 654348"];
2508 [label="IsInstanceFieldOrEvent = symbol =>\n        {\n            if (!symbol.IsStatic)\n            {\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Field:\n                    case SymbolKind.Event:\n                        return true;\n                }\n            }\n            return false;\n        } 654349"];
2509 [label="type => !type.HasType 654350"];
2510 [label="TypeWithAnnotationsIsNullFunction = type => !type.HasType 654351"];
2511 [label="type => type.HasType && type.Type.IsErrorType() 654352"];
2512 [label="TypeWithAnnotationsIsErrorType = type => type.HasType && type.Type.IsErrorType() 654353"];
2513 [label="8 654354"];
2514 [label="ValueTupleRestPosition = 8 654355"];
2515 [label="1 654356"];
2516 [label="ValueTupleRestPosition - 1 654357"];
2517 [label="ValueTupleRestIndex = ValueTupleRestPosition - 1 654358"];
2518 [label="'ValueTuple' 654359"];
2519 [label="ValueTupleTypeName = 'ValueTuple' 654360"];
2520 [label="'Rest' 654361"];
2521 [label="ValueTupleRestFieldName = 'Rest' 654362"];
2522 [label="{\n                                                            WellKnownType.System_ValueTuple_T1,\n                                                            WellKnownType.System_ValueTuple_T2,\n                                                            WellKnownType.System_ValueTuple_T3,\n                                                            WellKnownType.System_ValueTuple_T4,\n                                                            WellKnownType.System_ValueTuple_T5,\n                                                            WellKnownType.System_ValueTuple_T6,\n                                                            WellKnownType.System_ValueTuple_T7,\n                                                            WellKnownType.System_ValueTuple_TRest } 654363"];
2523 [label="tupleTypes = {\n                                                            WellKnownType.System_ValueTuple_T1,\n                                                            WellKnownType.System_ValueTuple_T2,\n                                                            WellKnownType.System_ValueTuple_T3,\n                                                            WellKnownType.System_ValueTuple_T4,\n                                                            WellKnownType.System_ValueTuple_T5,\n                                                            WellKnownType.System_ValueTuple_T6,\n                                                            WellKnownType.System_ValueTuple_T7,\n                                                            WellKnownType.System_ValueTuple_TRest } 654364"];
2524 [label="{\n                                                            WellKnownMember.System_ValueTuple_T1__ctor,\n                                                            WellKnownMember.System_ValueTuple_T2__ctor,\n                                                            WellKnownMember.System_ValueTuple_T3__ctor,\n                                                            WellKnownMember.System_ValueTuple_T4__ctor,\n                                                            WellKnownMember.System_ValueTuple_T5__ctor,\n                                                            WellKnownMember.System_ValueTuple_T6__ctor,\n                                                            WellKnownMember.System_ValueTuple_T7__ctor,\n                                                            WellKnownMember.System_ValueTuple_TRest__ctor } 654365"];
2525 [label="tupleCtors = {\n                                                            WellKnownMember.System_ValueTuple_T1__ctor,\n                                                            WellKnownMember.System_ValueTuple_T2__ctor,\n                                                            WellKnownMember.System_ValueTuple_T3__ctor,\n                                                            WellKnownMember.System_ValueTuple_T4__ctor,\n                                                            WellKnownMember.System_ValueTuple_T5__ctor,\n                                                            WellKnownMember.System_ValueTuple_T6__ctor,\n                                                            WellKnownMember.System_ValueTuple_T7__ctor,\n                                                            WellKnownMember.System_ValueTuple_TRest__ctor } 654366"];
2526 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 654367"];
2527 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 } 654368"];
2528 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 } 654369"];
2529 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 } 654370"];
2530 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 } 654371"];
2531 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 } 654372"];
2532 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 } 654373"];
2533 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 } 654374"];
2534 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest } 654375"];
2535 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 654376"];
2536 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 654377"];
2537 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 654378"];
2538 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 654379"];
2539 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 654380"];
2540 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 654381"];
2541 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 654382"];
2542 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 654383"];
2543 [label="tupleMembers = new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 654384"];
2544 [label="tupleData 654385"];
2545 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 654386"];
2546 [label="param NamedTypeSymbol(this) 654387"];
2547 [label="'<invalid-global-code>' 654388"];
2548 [label="ImplicitTypeName = '<invalid-global-code>' 654389"];
2549 [label="0 654390"];
2550 [label="TypeCompareKind.ConsiderEverything 654391"];
2551 [label="new SymbolEqualityComparer(TypeCompareKind.ConsiderEverything) 654392"];
2552 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 654393"];
2553 [label="param SymbolEqualityComparer(this) 654394"];
2554 [label="_comparison 654395"];
2555 [label="_comparison 654396"];
2556 [label="ConsiderEverything = new SymbolEqualityComparer(TypeCompareKind.ConsiderEverything) 654397"];
2557 [label="TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 654398"];
2558 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 654399"];
2559 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 654400"];
2560 [label="param SymbolEqualityComparer(this) 654401"];
2561 [label="_comparison 654402"];
2562 [label="_comparison 654403"];
2563 [label="IgnoringTupleNamesAndNullability = new SymbolEqualityComparer(TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 654404"];
2564 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 654405"];
2565 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 654406"];
2566 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 654407"];
2567 [label="param SymbolEqualityComparer(this) 654408"];
2568 [label="_comparison 654409"];
2569 [label="_comparison 654410"];
2570 [label="IgnoringDynamicTupleNamesAndNullability = new SymbolEqualityComparer(TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 654411"];
2571 [label="TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 654412"];
2572 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 654413"];
2573 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 654414"];
2574 [label="param SymbolEqualityComparer(this) 654415"];
2575 [label="_comparison 654416"];
2576 [label="_comparison 654417"];
2577 [label="IgnoringNullable = new SymbolEqualityComparer(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 654418"];
2578 [label="TypeCompareKind.ObliviousNullableModifierMatchesAny 654419"];
2579 [label="new SymbolEqualityComparer(TypeCompareKind.ObliviousNullableModifierMatchesAny) 654420"];
2580 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 654421"];
2581 [label="param SymbolEqualityComparer(this) 654422"];
2582 [label="_comparison 654423"];
2583 [label="_comparison 654424"];
2584 [label="ObliviousNullableModifierMatchesAny = new SymbolEqualityComparer(TypeCompareKind.ObliviousNullableModifierMatchesAny) 654425"];
2585 [label="TypeCompareKind.AllIgnoreOptions 654426"];
2586 [label="new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions) 654427"];
2587 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 654428"];
2588 [label="param SymbolEqualityComparer(this) 654429"];
2589 [label="_comparison 654430"];
2590 [label="_comparison 654431"];
2591 [label="AllIgnoreOptions = new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions) 654432"];
2592 [label="TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 654433"];
2593 [label="new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes)) 654434"];
2594 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 654435"];
2595 [label="param SymbolEqualityComparer(this) 654436"];
2596 [label="_comparison 654437"];
2597 [label="_comparison 654438"];
2598 [label="AllIgnoreOptionsPlusNullableWithUnknownMatchesAny =\n                                                                  new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes)) 654439"];
2599 [label="TypeCompareKind.CLRSignatureCompareOptions 654440"];
2600 [label="new SymbolEqualityComparer(TypeCompareKind.CLRSignatureCompareOptions) 654441"];
2601 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 654442"];
2602 [label="param SymbolEqualityComparer(this) 654443"];
2603 [label="_comparison 654444"];
2604 [label="_comparison 654445"];
2605 [label="CLRSignature = new SymbolEqualityComparer(TypeCompareKind.CLRSignatureCompareOptions) 654446"];
2606 [label="SymbolEqualityComparer.CLRSignature 654447"];
2607 [label="new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 654448"];
2608 [label="new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 654449"];
2609 [label="EmptyInterfacesAndTheirBaseInterfaces =\n                                                new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 654450"];
2610 [label="new InterfaceInfo() 654451"];
2611 [label="param InterfaceInfo(this) 654452"];
2612 [label="interfacesAndTheirBaseInterfaces 654453"];
2613 [label="_implementationForInterfaceMemberMap 654454"];
2614 [label="explicitInterfaceImplementationMap 654455"];
2615 [label="s_noInterfaces = new InterfaceInfo() 654456"];
2616 [label="(type) => type.SetUnknownNullabilityForReferenceTypes() 654457"];
2617 [label="s_setUnknownNullability =\n            (type) => type.SetUnknownNullabilityForReferenceTypes() 654458"];
2618 [label="param TypeSymbol(this) 654459"];
2619 [label="param NamespaceOrTypeSymbol(this) 654460"];
2620 [label="param Symbol(this) 654461"];
2621 [label="_lazyISymbol 654462"];
2622 [label="_lazyAbstractMembers 654463"];
2623 [label="_lazyInterfaceInfo 654464"];
2624 [label="_lazyAdapter 654465"];
2625 [label="_hasNoBaseCycles 654466"];
2626 [label="_lazyTupleData 654467"];
2627 [label="_lazyTupleData 654468"];
2628 [label="_mrEx 654469"];
2629 [label="_mrEx 654470"];
2630 [label="UnknownResultType = new UnsupportedMetadataTypeSymbol() 654471"];
2631 [label="lazyComImportCoClassType = ErrorTypeSymbol.UnknownResultType 654472"];
2632 [label="lazyHasEmbeddedAttribute = ThreeState.Unknown 654473"];
2633 [label="s_noUncommonProperties = new UncommonProperties() 654474"];
2634 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 654475"];
2635 [label="PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key) 654476"];
2636 [label="param Create(PEModuleSymbol moduleSymbol) 654477"];
2637 [label="param Create(PENamespaceSymbol containingNamespace) 654478"];
2638 [label="param Create(TypeDefinitionHandle handle) 654479"];
2639 [label="param Create(string emittedNamespaceName) 654480"];
2640 [label="GenericParameterHandleCollection genericParameterHandles; 654481"];
2641 [label="genericParameterHandles 654482"];
2642 [label="ushort arity; 654483"];
2643 [label="BadImageFormatException mrEx = null; 654484"];
2644 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 654485"];
2645 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 654486"];
2646 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 654487"];
2647 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 654488"];
2648 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 654489"];
2649 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx) 654490"];
2650 [label="param GetGenericInfo(PEModuleSymbol moduleSymbol) 654491"];
2651 [label="param GetGenericInfo(TypeDefinitionHandle handle) 654492"];
2652 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 654493"];
2653 [label="param GetGenericInfo(out ushort arity) 654494"];
2654 [label="param GetGenericInfo(out BadImageFormatException mrEx) 654495"];
2655 [label="moduleSymbol.Module 654496"];
2656 [label="get\n            {\n                return _module;\n            } 654497"];
2657 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 654498"];
2658 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 654499"];
2659 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 654500"];
2660 [label="arity = (ushort)genericParameterHandles.Count; 654501"];
2661 [label="mrEx = null; 654502"];
2662 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 654503"];
2663 [label="bool mangleName; 654504"];
2664 [label="PENamedTypeSymbol result; 654505"];
2665 [label="if (arity == 0)\n            {\n                result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName);\n            }\n            else\n            {\n                result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName);\n            } 654506"];
2666 [label="if (arity == 0)\n            {\n                result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName);\n            }\n            else\n            {\n                result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName);\n            } 654507"];
2667 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 654508"];
2668 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 654509"];
2669 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 654510"];
2670 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 654511"];
2671 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 654512"];
2672 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 654513"];
2673 [label="new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName) 654514"];
2674 [label="param PENamedTypeSymbolNonGeneric(PEModuleSymbol moduleSymbol) 654515"];
2675 [label="param PENamedTypeSymbolNonGeneric(NamespaceOrTypeSymbol container) 654516"];
2676 [label="param PENamedTypeSymbolNonGeneric(TypeDefinitionHandle handle) 654517"];
2677 [label="param PENamedTypeSymbolNonGeneric(string emittedNamespaceName) 654518"];
2678 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 654519"];
2679 [label="param PENamedTypeSymbolNonGeneric(this) 654520"];
2680 [label="moduleSymbol 654521"];
2681 [label="container 654522"];
2682 [label="handle 654523"];
2683 [label="emittedNamespaceName 654524"];
2684 [label="0 654525"];
2685 [label="mangleName 654526"];
2686 [label="param PENamedTypeSymbolNonGeneric(this) 654527"];
2687 [label="param PENamedTypeSymbol(PEModuleSymbol moduleSymbol) 654528"];
2688 [label="param PENamedTypeSymbol(NamespaceOrTypeSymbol container) 654529"];
2689 [label="param PENamedTypeSymbol(TypeDefinitionHandle handle) 654530"];
2690 [label="param PENamedTypeSymbol(string emittedNamespaceName) 654531"];
2691 [label="param PENamedTypeSymbol(ushort arity) 654532"];
2692 [label="param PENamedTypeSymbol(out bool mangleName) 654533"];
2693 [label="param PENamedTypeSymbol(this) 654534"];
2694 [label="param PENamedTypeSymbol(this) 654535"];
2695 [label="param NamedTypeSymbol(this) 654536"];
2696 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 654537"];
2697 [label="param NamedTypeSymbol(this) 654538"];
2698 [label="param TypeSymbol(this) 654539"];
2699 [label="param TypeSymbol(this) 654540"];
2700 [label="_lazyAbstractMembers 654541"];
2701 [label="_lazyInterfaceInfo 654542"];
2702 [label="_lazyAdapter 654543"];
2703 [label="_hasNoBaseCycles 654544"];
2704 [label="_lazyTupleData 654545"];
2705 [label="_lazyTupleData 654546"];
2706 [label="_container 654547"];
2707 [label="_name 654548"];
2708 [label="_flags 654549"];
2709 [label="_corTypeId 654550"];
2710 [label="_lazyMemberNames 654551"];
2711 [label="_lazyMembersByName 654552"];
2712 [label="_lazyNestedTypes 654553"];
2713 [label="_lazyKind 654554"];
2714 [label="_lazyNullableContextValue 654555"];
2715 [label="_lazyBaseType = ErrorTypeSymbol.UnknownResultType 654556"];
2716 [label="default(ImmutableArray<NamedTypeSymbol>) 654557"];
2717 [label="_lazyInterfaces = default(ImmutableArray<NamedTypeSymbol>) 654558"];
2718 [label="_lazyDeclaredBaseType = ErrorTypeSymbol.UnknownResultType 654559"];
2719 [label="default(ImmutableArray<NamedTypeSymbol>) 654560"];
2720 [label="_lazyDeclaredInterfaces = default(ImmutableArray<NamedTypeSymbol>) 654561"];
2721 [label="_lazyDocComment 654562"];
2722 [label="_lazyUseSiteDiagnostic = CSDiagnosticInfo.EmptyErrorInfo 654563"];
2723 [label="_lazyUncommonProperties 654564"];
2724 [label="public IEnumerable<object> fieldDefs { get; set; } 654565"];
2725 [label="Debug.Assert(!handle.IsNil); 654566"];
2726 [label="Debug.Assert((object)container != null); 654567"];
2727 [label="Debug.Assert((object)container != null); 654568"];
2728 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 654569"];
2729 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 654570"];
2730 [label="string metadataName; 654571"];
2731 [label="bool makeBad = false; 654572"];
2732 [label="moduleSymbol.Module 654573"];
2733 [label="get\n            {\n                return _module;\n            } 654574"];
2734 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 654575"];
2735 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 654576"];
2736 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 654577"];
2737 [label="_handle 654578"];
2738 [label="_container 654579"];
2739 [label="moduleSymbol.Module 654580"];
2740 [label="get\n            {\n                return _module;\n            } 654581"];
2741 [label="return _module; 654582"];
2742 [label="_flags = moduleSymbol.Module.GetTypeDefFlagsOrThrow(handle); 654583"];
2743 [label="_flags = moduleSymbol.Module.GetTypeDefFlagsOrThrow(handle); 654584"];
2744 [label="_flags 654585"];
2745 [label="if (arity == 0)\n            {\n                _name = metadataName;\n                mangleName = false;\n            }\n            else\n            {\n                // Unmangle name for a generic type.\n                _name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity);\n                Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName));\n                mangleName = !ReferenceEquals(_name, metadataName);\n            } 654586"];
2746 [label="if (arity == 0)\n            {\n                _name = metadataName;\n                mangleName = false;\n            }\n            else\n            {\n                // Unmangle name for a generic type.\n                _name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity);\n                Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName));\n                mangleName = !ReferenceEquals(_name, metadataName);\n            } 654587"];
2747 [label="_name 654588"];
2748 [label="mangleName = false; 654589"];
2749 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 654590"];
2750 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 654591"];
2751 [label="moduleSymbol.ContainingAssembly 654592"];
2752 [label="get\n            {\n                return _assemblySymbol;\n            } 654593"];
2753 [label="return _assemblySymbol; 654594"];
2754 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 654595"];
2755 [label="moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes 654596"];
2756 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 654597"];
2757 [label="this.CorLibrary 654598"];
2758 [label="get\n            {\n                return _corLibrary;\n            } 654599"];
2759 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 654600"];
2760 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 654601"];
2761 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 654602"];
2762 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 654603"];
2763 [label="this.DeclaredAccessibility 654604"];
2764 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 654605"];
2765 [label="Accessibility access = Accessibility.Private; 654606"];
2766 [label="switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                } 654607"];
2767 [label="access = Accessibility.Internal; 654608"];
2768 [label="return access; 654609"];
2769 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 654610"];
2770 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 654611"];
2771 [label="_corTypeId 654612"];
2772 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 654613"];
2773 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 654614"];
2774 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 654615"];
2775 [label="return result; 654616"];
2776 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 654617"];
2777 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 654618"];
2778 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 654619"];
2779 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 654620"];
2780 [label="get\n            {\n                return _name;\n            } 654621"];
2781 [label="return _name; 654622"];
2782 [label="children.Free(); 654623"];
2783 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 654624"];
2784 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 654625"];
2785 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 654626"];
2786 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 654627"];
2787 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 654628"];
2788 [label="if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 654629"];
2789 [label="if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 654630"];
2790 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 654631"];
2791 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict) 654632"];
2792 [label="param OnNewTypeDeclarationsLoaded(Dictionary<string, ImmutableArray<PENamedTypeSymbol>> typesDict) 654633"];
2793 [label="param OnNewTypeDeclarationsLoaded(this) 654634"];
2794 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 654635"];
2795 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 654636"];
2796 [label="_assemblySymbol.KeepLookingForDeclaredSpecialTypes 654637"];
2797 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 654638"];
2798 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 654639"];
2799 [label="foreach (var types in typesDict.Values)\n            {\n                foreach (var type in types)\n                {\n                    bool added;\n                    added = TypeHandleToTypeMap.TryAdd(type.Handle, type);\n                    Debug.Assert(added);\n\n                    // Register newly loaded COR types\n                    if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    }\n                }\n            } 654640"];
2800 [label="foreach (var type in types)\n                {\n                    bool added;\n                    added = TypeHandleToTypeMap.TryAdd(type.Handle, type);\n                    Debug.Assert(added);\n\n                    // Register newly loaded COR types\n                    if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    }\n                } 654641"];
2801 [label="bool added; 654642"];
2802 [label="type.Handle 654643"];
2803 [label="get\n            {\n                return _handle;\n            } 654644"];
2804 [label="return _handle; 654645"];
2805 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 654646"];
2806 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 654647"];
2807 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 654648"];
2808 [label="Debug.Assert(added); 654649"];
2809 [label="type.SpecialType 654650"];
2810 [label="get\n            {\n                return _corTypeId;\n            } 654651"];
2811 [label="return _corTypeId; 654652"];
2812 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 654653"];
2813 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 654654"];
2814 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 654655"];
2815 [label="LazyInitializeTypes(nestedTypes); 654656"];
2816 [label="LoadAllMembers(groups); 654657"];
2817 [label="EnsureAllMembersLoaded(); 654658"];
2818 [label="PENestedNamespaceSymbol ns = null; 654659"];
2819 [label="ImmutableArray<PENamedTypeSymbol> t; 654660"];
2820 [label="t 654661"];
2821 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 654662"];
2822 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 654663"];
2823 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 654664"];
2824 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 654665"];
2825 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 654666"];
2826 [label="if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 654667"];
2827 [label="return ImmutableArray<Symbol>.Empty; 654668"];
2828 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 654669"];
2829 [label="Debug.Assert(typesByNS != null); 654670"];
2830 [label="get\n            {\n                return true;\n            } 654671"];
2831 [label="_containingNamespaceSymbol 654672"];
2832 [label="_name 654673"];
2833 [label="_typesByNS 654674"];
2834 [label="Debug.Assert(name != null); 654675"];
2835 [label="Debug.Assert((object)containingNamespace != null); 654676"];
2836 [label="Debug.Assert(typesByNS != null); 654677"];
2837 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 654678"];
2838 [label="GenericParameterHandleCollection genericParameterHandles; 654679"];
2839 [label="genericParameterHandles 654680"];
2840 [label="ushort arity; 654681"];
2841 [label="BadImageFormatException mrEx = null; 654682"];
2842 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 654683"];
2843 [label="param GetGenericInfo(out ushort arity) 654684"];
2844 [label="param GetGenericInfo(out BadImageFormatException mrEx) 654685"];
2845 [label="mrEx = null; 654686"];
2846 [label="bool mangleName; 654687"];
2847 [label="PENamedTypeSymbol result; 654688"];
2848 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 654689"];
2849 [label="mangleName 654690"];
2850 [label="param PENamedTypeSymbol(out bool mangleName) 654691"];
2851 [label="_lazyTupleData 654692"];
2852 [label="_container 654693"];
2853 [label="_name 654694"];
2854 [label="_flags 654695"];
2855 [label="_corTypeId 654696"];
2856 [label="Debug.Assert(!handle.IsNil); 654697"];
2857 [label="Debug.Assert((object)container != null); 654698"];
2858 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 654699"];
2859 [label="string metadataName; 654700"];
2860 [label="bool makeBad = false; 654701"];
2861 [label="mangleName = false; 654702"];
2862 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 654703"];
2863 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 654704"];
2864 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 654705"];
2865 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 654706"];
2866 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 654707"];
2867 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 654708"];
2868 [label="_assemblySymbol.KeepLookingForDeclaredSpecialTypes 654709"];
2869 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 654710"];
2870 [label="bool added; 654711"];
2871 [label="Debug.Assert(added); 654712"];
2872 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 654713"];
2873 [label="EnsureAllMembersLoaded(); 654714"];
2874 [label="return ImmutableArray<Symbol>.Empty; 654715"];
2875 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 654716"];
2876 [label="Debug.Assert(typesByNS != null); 654717"];
2877 [label="get\n            {\n                return true;\n            } 654718"];
2878 [label="_containingNamespaceSymbol 654719"];
2879 [label="_name 654720"];
2880 [label="_typesByNS 654721"];
2881 [label="Debug.Assert(name != null); 654722"];
2882 [label="Debug.Assert((object)containingNamespace != null); 654723"];
2883 [label="Debug.Assert(typesByNS != null); 654724"];
2884 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 654725"];
2885 [label="GenericParameterHandleCollection genericParameterHandles; 654726"];
2886 [label="genericParameterHandles 654727"];
2887 [label="ushort arity; 654728"];
2888 [label="BadImageFormatException mrEx = null; 654729"];
2889 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 654730"];
2890 [label="param GetGenericInfo(out ushort arity) 654731"];
2891 [label="param GetGenericInfo(out BadImageFormatException mrEx) 654732"];
2892 [label="mrEx = null; 654733"];
2893 [label="PENamedTypeSymbol result; 654734"];
2894 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 654735"];
2895 [label="mangleName 654736"];
2896 [label="param PENamedTypeSymbol(out bool mangleName) 654737"];
2897 [label="Debug.Assert(!handle.IsNil); 654738"];
2898 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 654739"];
2899 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 654740"];
2900 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 654741"];
2901 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 654742"];
2902 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 654743"];
2903 [label="bool added; 654744"];
2904 [label="Debug.Assert(added); 654745"];
2905 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 654746"];
2906 [label="EnsureAllMembersLoaded(); 654747"];
2907 [label="return ImmutableArray<Symbol>.Empty; 654748"];
2908 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 654749"];
2909 [label="Debug.Assert(typesByNS != null); 654750"];
2910 [label="get\n            {\n                return true;\n            } 654751"];
2911 [label="_containingNamespaceSymbol 654752"];
2912 [label="_name 654753"];
2913 [label="_typesByNS 654754"];
2914 [label="Debug.Assert(name != null); 654755"];
2915 [label="Debug.Assert((object)containingNamespace != null); 654756"];
2916 [label="Debug.Assert(typesByNS != null); 654757"];
2917 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 654758"];
2918 [label="GenericParameterHandleCollection genericParameterHandles; 654759"];
2919 [label="genericParameterHandles 654760"];
2920 [label="ushort arity; 654761"];
2921 [label="BadImageFormatException mrEx = null; 654762"];
2922 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 654763"];
2923 [label="param GetGenericInfo(out ushort arity) 654764"];
2924 [label="param GetGenericInfo(out BadImageFormatException mrEx) 654765"];
2925 [label="mrEx = null; 654766"];
2926 [label="PENamedTypeSymbol result; 654767"];
2927 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 654768"];
2928 [label="mangleName 654769"];
2929 [label="param PENamedTypeSymbol(out bool mangleName) 654770"];
2930 [label="_lazyTupleData 654771"];
2931 [label="_container 654772"];
2932 [label="_name 654773"];
2933 [label="_flags 654774"];
2934 [label="_corTypeId 654775"];
2935 [label="Debug.Assert(!handle.IsNil); 654776"];
2936 [label="Debug.Assert((object)container != null); 654777"];
2937 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 654778"];
2938 [label="string metadataName; 654779"];
2939 [label="bool makeBad = false; 654780"];
2940 [label="mangleName = false; 654781"];
2941 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 654782"];
2942 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 654783"];
2943 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 654784"];
2944 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 654785"];
2945 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 654786"];
2946 [label="EnsureAllMembersLoaded(); 654787"];
2947 [label="return ImmutableArray<Symbol>.Empty; 654788"];
2948 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 654789"];
2949 [label="mangleName 654790"];
2950 [label="param PENamedTypeSymbol(out bool mangleName) 654791"];
2951 [label="_lazyTupleData 654792"];
2952 [label="_container 654793"];
2953 [label="_name 654794"];
2954 [label="_flags 654795"];
2955 [label="_corTypeId 654796"];
2956 [label="Debug.Assert(!handle.IsNil); 654797"];
2957 [label="Debug.Assert((object)container != null); 654798"];
2958 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 654799"];
2959 [label="string metadataName; 654800"];
2960 [label="bool makeBad = false; 654801"];
2961 [label="mangleName = false; 654802"];
2962 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 654803"];
2963 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 654804"];
2964 [label="bool added; 654805"];
2965 [label="Debug.Assert(added); 654806"];
2966 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 654807"];
2967 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 654808"];
2968 [label="Debug.Assert(typesByNS != null); 654809"];
2969 [label="get\n            {\n                return true;\n            } 654810"];
2970 [label="_containingNamespaceSymbol 654811"];
2971 [label="_name 654812"];
2972 [label="_typesByNS 654813"];
2973 [label="Debug.Assert(name != null); 654814"];
2974 [label="Debug.Assert((object)containingNamespace != null); 654815"];
2975 [label="Debug.Assert(typesByNS != null); 654816"];
2976 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 654817"];
2977 [label="genericParameterHandles 654818"];
2978 [label="ushort arity; 654819"];
2979 [label="BadImageFormatException mrEx = null; 654820"];
2980 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 654821"];
2981 [label="param GetGenericInfo(out ushort arity) 654822"];
2982 [label="param GetGenericInfo(out BadImageFormatException mrEx) 654823"];
2983 [label="mrEx = null; 654824"];
2984 [label="PENamedTypeSymbol result; 654825"];
2985 [label="Debug.Assert(!handle.IsNil); 654826"];
2986 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 654827"];
2987 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 654828"];
2988 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 654829"];
2989 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 654830"];
2990 [label="EnsureAllMembersLoaded(); 654831"];
2991 [label="return ImmutableArray<Symbol>.Empty; 654832"];
2992 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 654833"];
2993 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 654834"];
2994 [label="mangleName 654835"];
2995 [label="param PENamedTypeSymbol(out bool mangleName) 654836"];
2996 [label="_lazyTupleData 654837"];
2997 [label="_container 654838"];
2998 [label="_name 654839"];
2999 [label="_flags 654840"];
3000 [label="_corTypeId 654841"];
3001 [label="Debug.Assert(!handle.IsNil); 654842"];
3002 [label="Debug.Assert((object)container != null); 654843"];
3003 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 654844"];
3004 [label="string metadataName; 654845"];
3005 [label="bool makeBad = false; 654846"];
3006 [label="mangleName = false; 654847"];
3007 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 654848"];
3008 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 654849"];
3009 [label="bool added; 654850"];
3010 [label="Debug.Assert(added); 654851"];
3011 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 654852"];
3012 [label="if (namespaceSymbols != null)\n            {\n                otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()));\n            } 654853"];
3013 [label="if (namespaceSymbols != null)\n            {\n                otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()));\n            } 654854"];
3014 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 654855"];
3015 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 654856"];
3016 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 654857"];
3017 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 654858"];
3018 [label="MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree()) 654859"];
3019 [label="param Create(NamespaceExtent extent) 654860"];
3020 [label="param Create(NamespaceSymbol containingNamespace) 654861"];
3021 [label="param Create(ImmutableArray<NamespaceSymbol> namespacesToMerge) 654862"];
3022 [label="param Create(string nameOpt = null) 654863"];
3023 [label="Debug.Assert(namespacesToMerge.Length != 0); 654864"];
3024 [label="Debug.Assert(namespacesToMerge.Length != 0); 654865"];
3025 [label="otherSymbols.Add(MergedNamespaceSymbol.Create(_extent, this, namespaceSymbols.ToImmutableAndFree())); 654866"];
3026 [label="return otherSymbols.ToImmutableAndFree(); 654867"];
3027 [label="CustomAssert.Equal(3, namespaceNS.GetMembers().Length); 654868"];
3028 [label="namespaceNS.GetMembers() 654869"];
3029 [label="param GetMembers(this) 654870"];
3030 [label="if ((_flags & LazyAllMembersIsSorted) != 0)\n            {\n                return _lazyAllMembers;\n            }\n            else\n            {\n                var allMembers = this.GetMembersUnordered();\n\n                if (allMembers.Length >= 2)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyAllMembers, allMembers);\n                }\n\n                ThreadSafeFlagOperations.Set(ref _flags, LazyAllMembersIsSorted);\n                return allMembers;\n            } 654871"];
3031 [label="if ((_flags & LazyAllMembersIsSorted) != 0)\n            {\n                return _lazyAllMembers;\n            }\n            else\n            {\n                var allMembers = this.GetMembersUnordered();\n\n                if (allMembers.Length >= 2)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyAllMembers, allMembers);\n                }\n\n                ThreadSafeFlagOperations.Set(ref _flags, LazyAllMembersIsSorted);\n                return allMembers;\n            } 654872"];
3032 [label="this.GetMembersUnordered() 654873"];
3033 [label="param GetMembersUnordered(this) 654874"];
3034 [label="var result = _lazyAllMembers; 654875"];
3035 [label="if (result.IsDefault)\n            {\n                var members = StaticCast<Symbol>.From(this.GetNameToMembersMap().Flatten(null));  // don't sort.\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyAllMembers, members);\n                result = _lazyAllMembers;\n            } 654876"];
3036 [label="this.GetNameToMembersMap() 654877"];
3037 [label="param BuildSymbol(this) 654878"];
3038 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 654879"];
3039 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 654880"];
3040 [label="new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics) 654881"];
3041 [label="param SourceNamedTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 654882"];
3042 [label="param SourceNamedTypeSymbol(MergedTypeDeclaration declaration) 654883"];
3043 [label="param SourceNamedTypeSymbol(DiagnosticBag diagnostics) 654884"];
3044 [label="param SourceNamedTypeSymbol(TupleExtraData tupleData = null) 654885"];
3045 [label="param SourceNamedTypeSymbol(this) 654886"];
3046 [label="false 654887"];
3047 [label="considerName: false 654888"];
3048 [label="false 654889"];
3049 [label="considerExplicitlyImplementedInterfaces: false 654890"];
3050 [label="true 654891"];
3051 [label="considerReturnType: true 654892"];
3052 [label="false 654893"];
3053 [label="considerTypeConstraints: false 654894"];
3054 [label="true 654895"];
3055 [label="considerRefKindDifferences: true 654896"];
3056 [label="true 654897"];
3057 [label="considerCallingConvention: true 654898"];
3058 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 654899"];
3059 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerRefKindDifferences: true,\n            considerCallingConvention: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 654900"];
3060 [label="param MemberSignatureComparer(bool considerName) 654901"];
3061 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 654902"];
3062 [label="param MemberSignatureComparer(bool considerReturnType) 654903"];
3063 [label="param MemberSignatureComparer(bool considerTypeConstraints) 654904"];
3064 [label="param MemberSignatureComparer(bool considerCallingConvention) 654905"];
3065 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 654906"];
3066 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 654907"];
3067 [label="param MemberSignatureComparer(this) 654908"];
3068 [label="_considerName 654909"];
3069 [label="_considerExplicitlyImplementedInterfaces 654910"];
3070 [label="_considerReturnType 654911"];
3071 [label="_considerTypeConstraints 654912"];
3072 [label="_considerCallingConvention 654913"];
3073 [label="_considerRefKindDifferences 654914"];
3074 [label="_typeComparison 654915"];
3075 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 654916"];
3076 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 654917"];
3077 [label="_considerName 654918"];
3078 [label="_considerExplicitlyImplementedInterfaces 654919"];
3079 [label="_considerReturnType 654920"];
3080 [label="_considerTypeConstraints 654921"];
3081 [label="_considerCallingConvention 654922"];
3082 [label="_considerRefKindDifferences 654923"];
3083 [label="_typeComparison 654924"];
3084 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 654925"];
3085 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 654926"];
3086 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 654927"];
3087 [label="ExplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerRefKindDifferences: true,\n            considerCallingConvention: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 654928"];
3088 [label="true 654929"];
3089 [label="considerName: true 654930"];
3090 [label="true 654931"];
3091 [label="considerExplicitlyImplementedInterfaces: true 654932"];
3092 [label="true 654933"];
3093 [label="considerReturnType: true 654934"];
3094 [label="false 654935"];
3095 [label="considerTypeConstraints: false 654936"];
3096 [label="true 654937"];
3097 [label="considerCallingConvention: true 654938"];
3098 [label="true 654939"];
3099 [label="considerRefKindDifferences: true 654940"];
3100 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 654941"];
3101 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 654942"];
3102 [label="param MemberSignatureComparer(bool considerName) 654943"];
3103 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 654944"];
3104 [label="param MemberSignatureComparer(bool considerReturnType) 654945"];
3105 [label="param MemberSignatureComparer(bool considerTypeConstraints) 654946"];
3106 [label="param MemberSignatureComparer(bool considerCallingConvention) 654947"];
3107 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 654948"];
3108 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 654949"];
3109 [label="param MemberSignatureComparer(this) 654950"];
3110 [label="_considerName 654951"];
3111 [label="_considerExplicitlyImplementedInterfaces 654952"];
3112 [label="_considerReturnType 654953"];
3113 [label="_considerTypeConstraints 654954"];
3114 [label="_considerCallingConvention 654955"];
3115 [label="_considerRefKindDifferences 654956"];
3116 [label="_typeComparison 654957"];
3117 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 654958"];
3118 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 654959"];
3119 [label="_considerName 654960"];
3120 [label="_considerExplicitlyImplementedInterfaces 654961"];
3121 [label="_considerReturnType 654962"];
3122 [label="_considerTypeConstraints 654963"];
3123 [label="_considerCallingConvention 654964"];
3124 [label="_considerRefKindDifferences 654965"];
3125 [label="_typeComparison 654966"];
3126 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 654967"];
3127 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 654968"];
3128 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 654969"];
3129 [label="CSharpImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 654970"];
3130 [label="true 654971"];
3131 [label="considerName: true 654972"];
3132 [label="true 654973"];
3133 [label="considerExplicitlyImplementedInterfaces: true 654974"];
3134 [label="false 654975"];
3135 [label="considerReturnType: false 654976"];
3136 [label="false 654977"];
3137 [label="considerTypeConstraints: false 654978"];
3138 [label="false 654979"];
3139 [label="considerCallingConvention: false 654980"];
3140 [label="true 654981"];
3141 [label="considerRefKindDifferences: true 654982"];
3142 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 654983"];
3143 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 654984"];
3144 [label="param MemberSignatureComparer(bool considerName) 654985"];
3145 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 654986"];
3146 [label="param MemberSignatureComparer(bool considerReturnType) 654987"];
3147 [label="param MemberSignatureComparer(bool considerTypeConstraints) 654988"];
3148 [label="param MemberSignatureComparer(bool considerCallingConvention) 654989"];
3149 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 654990"];
3150 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 654991"];
3151 [label="param MemberSignatureComparer(this) 654992"];
3152 [label="_considerName 654993"];
3153 [label="_considerExplicitlyImplementedInterfaces 654994"];
3154 [label="_considerReturnType 654995"];
3155 [label="_considerTypeConstraints 654996"];
3156 [label="_considerCallingConvention 654997"];
3157 [label="_considerRefKindDifferences 654998"];
3158 [label="_typeComparison 654999"];
3159 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655000"];
3160 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655001"];
3161 [label="_considerName 655002"];
3162 [label="_considerExplicitlyImplementedInterfaces 655003"];
3163 [label="_considerReturnType 655004"];
3164 [label="_considerTypeConstraints 655005"];
3165 [label="_considerCallingConvention 655006"];
3166 [label="_considerRefKindDifferences 655007"];
3167 [label="_typeComparison 655008"];
3168 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655009"];
3169 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655010"];
3170 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655011"];
3171 [label="CSharpCloseImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655012"];
3172 [label="true 655013"];
3173 [label="considerName: true 655014"];
3174 [label="true 655015"];
3175 [label="considerExplicitlyImplementedInterfaces: true 655016"];
3176 [label="false 655017"];
3177 [label="considerReturnType: false 655018"];
3178 [label="false 655019"];
3179 [label="considerTypeConstraints: false 655020"];
3180 [label="false 655021"];
3181 [label="considerCallingConvention: false 655022"];
3182 [label="false 655023"];
3183 [label="considerRefKindDifferences: false 655024"];
3184 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 655025"];
3185 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655026"];
3186 [label="param MemberSignatureComparer(bool considerName) 655027"];
3187 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655028"];
3188 [label="param MemberSignatureComparer(bool considerReturnType) 655029"];
3189 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655030"];
3190 [label="param MemberSignatureComparer(bool considerCallingConvention) 655031"];
3191 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655032"];
3192 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655033"];
3193 [label="param MemberSignatureComparer(this) 655034"];
3194 [label="_considerName 655035"];
3195 [label="_considerExplicitlyImplementedInterfaces 655036"];
3196 [label="_considerReturnType 655037"];
3197 [label="_considerTypeConstraints 655038"];
3198 [label="_considerCallingConvention 655039"];
3199 [label="_considerRefKindDifferences 655040"];
3200 [label="_typeComparison 655041"];
3201 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655042"];
3202 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655043"];
3203 [label="_considerName 655044"];
3204 [label="_considerExplicitlyImplementedInterfaces 655045"];
3205 [label="_considerReturnType 655046"];
3206 [label="_considerTypeConstraints 655047"];
3207 [label="_considerCallingConvention 655048"];
3208 [label="_considerRefKindDifferences 655049"];
3209 [label="_typeComparison 655050"];
3210 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655051"];
3211 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655052"];
3212 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655053"];
3213 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 655054"];
3214 [label="_typeComparison 655055"];
3215 [label="DuplicateSourceComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655056"];
3216 [label="true 655057"];
3217 [label="considerName: true 655058"];
3218 [label="true 655059"];
3219 [label="considerExplicitlyImplementedInterfaces: true 655060"];
3220 [label="false 655061"];
3221 [label="considerReturnType: false 655062"];
3222 [label="false 655063"];
3223 [label="considerTypeConstraints: false 655064"];
3224 [label="false 655065"];
3225 [label="considerCallingConvention: false 655066"];
3226 [label="true 655067"];
3227 [label="considerRefKindDifferences: true 655068"];
3228 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 655069"];
3229 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655070"];
3230 [label="param MemberSignatureComparer(bool considerName) 655071"];
3231 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655072"];
3232 [label="param MemberSignatureComparer(bool considerReturnType) 655073"];
3233 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655074"];
3234 [label="param MemberSignatureComparer(bool considerCallingConvention) 655075"];
3235 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655076"];
3236 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655077"];
3237 [label="param MemberSignatureComparer(this) 655078"];
3238 [label="_considerName 655079"];
3239 [label="_considerExplicitlyImplementedInterfaces 655080"];
3240 [label="_considerReturnType 655081"];
3241 [label="_considerTypeConstraints 655082"];
3242 [label="_considerCallingConvention 655083"];
3243 [label="_considerRefKindDifferences 655084"];
3244 [label="_typeComparison 655085"];
3245 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655086"];
3246 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655087"];
3247 [label="_considerName 655088"];
3248 [label="_considerExplicitlyImplementedInterfaces 655089"];
3249 [label="_considerReturnType 655090"];
3250 [label="_considerTypeConstraints 655091"];
3251 [label="_considerCallingConvention 655092"];
3252 [label="_considerRefKindDifferences 655093"];
3253 [label="_typeComparison 655094"];
3254 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655095"];
3255 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655096"];
3256 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655097"];
3257 [label="RecordAPISignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655098"];
3258 [label="true 655099"];
3259 [label="considerName: true 655100"];
3260 [label="true 655101"];
3261 [label="considerExplicitlyImplementedInterfaces: true 655102"];
3262 [label="false 655103"];
3263 [label="considerReturnType: false 655104"];
3264 [label="false 655105"];
3265 [label="considerTypeConstraints: false 655106"];
3266 [label="false 655107"];
3267 [label="considerCallingConvention: false 655108"];
3268 [label="true 655109"];
3269 [label="considerRefKindDifferences: true 655110"];
3270 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 655111"];
3271 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655112"];
3272 [label="param MemberSignatureComparer(bool considerName) 655113"];
3273 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655114"];
3274 [label="param MemberSignatureComparer(bool considerReturnType) 655115"];
3275 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655116"];
3276 [label="param MemberSignatureComparer(bool considerCallingConvention) 655117"];
3277 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655118"];
3278 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655119"];
3279 [label="param MemberSignatureComparer(this) 655120"];
3280 [label="_considerName 655121"];
3281 [label="_considerExplicitlyImplementedInterfaces 655122"];
3282 [label="_considerReturnType 655123"];
3283 [label="_considerTypeConstraints 655124"];
3284 [label="_considerCallingConvention 655125"];
3285 [label="_considerRefKindDifferences 655126"];
3286 [label="_typeComparison 655127"];
3287 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655128"];
3288 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655129"];
3289 [label="_considerName 655130"];
3290 [label="_considerExplicitlyImplementedInterfaces 655131"];
3291 [label="_considerReturnType 655132"];
3292 [label="_considerTypeConstraints 655133"];
3293 [label="_considerCallingConvention 655134"];
3294 [label="_considerRefKindDifferences 655135"];
3295 [label="_typeComparison 655136"];
3296 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655137"];
3297 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655138"];
3298 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655139"];
3299 [label="PartialMethodsComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655140"];
3300 [label="true 655141"];
3301 [label="considerName: true 655142"];
3302 [label="false 655143"];
3303 [label="considerExplicitlyImplementedInterfaces: false 655144"];
3304 [label="false 655145"];
3305 [label="considerReturnType: false 655146"];
3306 [label="false 655147"];
3307 [label="considerTypeConstraints: false 655148"];
3308 [label="false 655149"];
3309 [label="considerCallingConvention: false 655150"];
3310 [label="true 655151"];
3311 [label="considerRefKindDifferences: true 655152"];
3312 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 655153"];
3313 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655154"];
3314 [label="param MemberSignatureComparer(bool considerName) 655155"];
3315 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655156"];
3316 [label="param MemberSignatureComparer(bool considerReturnType) 655157"];
3317 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655158"];
3318 [label="param MemberSignatureComparer(bool considerCallingConvention) 655159"];
3319 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655160"];
3320 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655161"];
3321 [label="param MemberSignatureComparer(this) 655162"];
3322 [label="_considerName 655163"];
3323 [label="_considerExplicitlyImplementedInterfaces 655164"];
3324 [label="_considerReturnType 655165"];
3325 [label="_considerTypeConstraints 655166"];
3326 [label="_considerCallingConvention 655167"];
3327 [label="_considerRefKindDifferences 655168"];
3328 [label="_typeComparison 655169"];
3329 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655170"];
3330 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655171"];
3331 [label="_considerName 655172"];
3332 [label="_considerExplicitlyImplementedInterfaces 655173"];
3333 [label="_considerReturnType 655174"];
3334 [label="_considerTypeConstraints 655175"];
3335 [label="_considerCallingConvention 655176"];
3336 [label="_considerRefKindDifferences 655177"];
3337 [label="_typeComparison 655178"];
3338 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655179"];
3339 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655180"];
3340 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655181"];
3341 [label="CSharpOverrideComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655182"];
3342 [label="true 655183"];
3343 [label="considerName: true 655184"];
3344 [label="false 655185"];
3345 [label="considerExplicitlyImplementedInterfaces: false 655186"];
3346 [label="true 655187"];
3347 [label="considerReturnType: true 655188"];
3348 [label="false 655189"];
3349 [label="considerTypeConstraints: false 655190"];
3350 [label="false 655191"];
3351 [label="considerCallingConvention: false 655192"];
3352 [label="false 655193"];
3353 [label="considerRefKindDifferences: false 655194"];
3354 [label="TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames 655195"];
3355 [label="typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames 655196"];
3356 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames) 655197"];
3357 [label="param MemberSignatureComparer(bool considerName) 655198"];
3358 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655199"];
3359 [label="param MemberSignatureComparer(bool considerReturnType) 655200"];
3360 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655201"];
3361 [label="param MemberSignatureComparer(bool considerCallingConvention) 655202"];
3362 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655203"];
3363 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655204"];
3364 [label="param MemberSignatureComparer(this) 655205"];
3365 [label="_considerName 655206"];
3366 [label="_considerExplicitlyImplementedInterfaces 655207"];
3367 [label="_considerReturnType 655208"];
3368 [label="_considerTypeConstraints 655209"];
3369 [label="_considerCallingConvention 655210"];
3370 [label="_considerRefKindDifferences 655211"];
3371 [label="_typeComparison 655212"];
3372 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655213"];
3373 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655214"];
3374 [label="_considerName 655215"];
3375 [label="_considerExplicitlyImplementedInterfaces 655216"];
3376 [label="_considerReturnType 655217"];
3377 [label="_considerTypeConstraints 655218"];
3378 [label="_considerCallingConvention 655219"];
3379 [label="_considerRefKindDifferences 655220"];
3380 [label="_typeComparison 655221"];
3381 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655222"];
3382 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655223"];
3383 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655224"];
3384 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 655225"];
3385 [label="_typeComparison 655226"];
3386 [label="CSharpWithTupleNamesComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames) 655227"];
3387 [label="true 655228"];
3388 [label="considerName: true 655229"];
3389 [label="false 655230"];
3390 [label="considerExplicitlyImplementedInterfaces: false 655231"];
3391 [label="true 655232"];
3392 [label="considerReturnType: true 655233"];
3393 [label="false 655234"];
3394 [label="considerTypeConstraints: false 655235"];
3395 [label="false 655236"];
3396 [label="considerCallingConvention: false 655237"];
3397 [label="false 655238"];
3398 [label="considerRefKindDifferences: false 655239"];
3399 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 655240"];
3400 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655241"];
3401 [label="param MemberSignatureComparer(bool considerName) 655242"];
3402 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655243"];
3403 [label="param MemberSignatureComparer(bool considerReturnType) 655244"];
3404 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655245"];
3405 [label="param MemberSignatureComparer(bool considerCallingConvention) 655246"];
3406 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655247"];
3407 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655248"];
3408 [label="param MemberSignatureComparer(this) 655249"];
3409 [label="_considerName 655250"];
3410 [label="_considerExplicitlyImplementedInterfaces 655251"];
3411 [label="_considerReturnType 655252"];
3412 [label="_considerTypeConstraints 655253"];
3413 [label="_considerCallingConvention 655254"];
3414 [label="_considerRefKindDifferences 655255"];
3415 [label="_typeComparison 655256"];
3416 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655257"];
3417 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655258"];
3418 [label="_considerName 655259"];
3419 [label="_considerExplicitlyImplementedInterfaces 655260"];
3420 [label="_considerReturnType 655261"];
3421 [label="_considerTypeConstraints 655262"];
3422 [label="_considerCallingConvention 655263"];
3423 [label="_considerRefKindDifferences 655264"];
3424 [label="_typeComparison 655265"];
3425 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655266"];
3426 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655267"];
3427 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655268"];
3428 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 655269"];
3429 [label="_typeComparison 655270"];
3430 [label="CSharpWithoutTupleNamesComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655271"];
3431 [label="false 655272"];
3432 [label="considerName: false 655273"];
3433 [label="false 655274"];
3434 [label="considerExplicitlyImplementedInterfaces: false 655275"];
3435 [label="false 655276"];
3436 [label="considerReturnType: false 655277"];
3437 [label="false 655278"];
3438 [label="considerTypeConstraints: false 655279"];
3439 [label="false 655280"];
3440 [label="considerCallingConvention: false 655281"];
3441 [label="true 655282"];
3442 [label="considerRefKindDifferences: true 655283"];
3443 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 655284"];
3444 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false, //Bug: DevDiv #15775\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655285"];
3445 [label="param MemberSignatureComparer(bool considerName) 655286"];
3446 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655287"];
3447 [label="param MemberSignatureComparer(bool considerReturnType) 655288"];
3448 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655289"];
3449 [label="param MemberSignatureComparer(bool considerCallingConvention) 655290"];
3450 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655291"];
3451 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655292"];
3452 [label="param MemberSignatureComparer(this) 655293"];
3453 [label="_considerName 655294"];
3454 [label="_considerExplicitlyImplementedInterfaces 655295"];
3455 [label="_considerReturnType 655296"];
3456 [label="_considerTypeConstraints 655297"];
3457 [label="_considerCallingConvention 655298"];
3458 [label="_considerRefKindDifferences 655299"];
3459 [label="_typeComparison 655300"];
3460 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655301"];
3461 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655302"];
3462 [label="_considerName 655303"];
3463 [label="_considerExplicitlyImplementedInterfaces 655304"];
3464 [label="_considerReturnType 655305"];
3465 [label="_considerTypeConstraints 655306"];
3466 [label="_considerCallingConvention 655307"];
3467 [label="_considerRefKindDifferences 655308"];
3468 [label="_typeComparison 655309"];
3469 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655310"];
3470 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655311"];
3471 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655312"];
3472 [label="CSharpAccessorOverrideComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false, //Bug: DevDiv #15775\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 655313"];
3473 [label="true 655314"];
3474 [label="considerName: true 655315"];
3475 [label="false 655316"];
3476 [label="considerExplicitlyImplementedInterfaces: false 655317"];
3477 [label="true 655318"];
3478 [label="considerReturnType: true 655319"];
3479 [label="false 655320"];
3480 [label="considerTypeConstraints: false 655321"];
3481 [label="false 655322"];
3482 [label="considerCallingConvention: false 655323"];
3483 [label="true 655324"];
3484 [label="considerRefKindDifferences: true 655325"];
3485 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 655326"];
3486 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655327"];
3487 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655328"];
3488 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655329"];
3489 [label="param MemberSignatureComparer(bool considerName) 655330"];
3490 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655331"];
3491 [label="param MemberSignatureComparer(bool considerReturnType) 655332"];
3492 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655333"];
3493 [label="param MemberSignatureComparer(bool considerCallingConvention) 655334"];
3494 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655335"];
3495 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655336"];
3496 [label="param MemberSignatureComparer(this) 655337"];
3497 [label="_considerName 655338"];
3498 [label="_considerExplicitlyImplementedInterfaces 655339"];
3499 [label="_considerReturnType 655340"];
3500 [label="_considerTypeConstraints 655341"];
3501 [label="_considerCallingConvention 655342"];
3502 [label="_considerRefKindDifferences 655343"];
3503 [label="_typeComparison 655344"];
3504 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655345"];
3505 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655346"];
3506 [label="_considerName 655347"];
3507 [label="_considerExplicitlyImplementedInterfaces 655348"];
3508 [label="_considerReturnType 655349"];
3509 [label="_considerTypeConstraints 655350"];
3510 [label="_considerCallingConvention 655351"];
3511 [label="_considerRefKindDifferences 655352"];
3512 [label="_typeComparison 655353"];
3513 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655354"];
3514 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655355"];
3515 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655356"];
3516 [label="CSharpCustomModifierOverrideComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655357"];
3517 [label="false 655358"];
3518 [label="considerName: false 655359"];
3519 [label="false 655360"];
3520 [label="considerExplicitlyImplementedInterfaces: false 655361"];
3521 [label="false 655362"];
3522 [label="considerReturnType: false 655363"];
3523 [label="false 655364"];
3524 [label="considerTypeConstraints: false 655365"];
3525 [label="false 655366"];
3526 [label="considerCallingConvention: false 655367"];
3527 [label="false 655368"];
3528 [label="considerRefKindDifferences: false 655369"];
3529 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 655370"];
3530 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 655371"];
3531 [label="typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 655372"];
3532 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 655373"];
3533 [label="param MemberSignatureComparer(bool considerName) 655374"];
3534 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655375"];
3535 [label="param MemberSignatureComparer(bool considerReturnType) 655376"];
3536 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655377"];
3537 [label="param MemberSignatureComparer(bool considerCallingConvention) 655378"];
3538 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655379"];
3539 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655380"];
3540 [label="param MemberSignatureComparer(this) 655381"];
3541 [label="_considerName 655382"];
3542 [label="_considerExplicitlyImplementedInterfaces 655383"];
3543 [label="_considerReturnType 655384"];
3544 [label="_considerTypeConstraints 655385"];
3545 [label="_considerCallingConvention 655386"];
3546 [label="_considerRefKindDifferences 655387"];
3547 [label="_typeComparison 655388"];
3548 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655389"];
3549 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655390"];
3550 [label="_considerName 655391"];
3551 [label="_considerExplicitlyImplementedInterfaces 655392"];
3552 [label="_considerReturnType 655393"];
3553 [label="_considerTypeConstraints 655394"];
3554 [label="_considerCallingConvention 655395"];
3555 [label="_considerRefKindDifferences 655396"];
3556 [label="_typeComparison 655397"];
3557 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655398"];
3558 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655399"];
3559 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655400"];
3560 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 655401"];
3561 [label="_typeComparison 655402"];
3562 [label="SloppyOverrideComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 655403"];
3563 [label="true 655404"];
3564 [label="considerName: true 655405"];
3565 [label="false 655406"];
3566 [label="considerExplicitlyImplementedInterfaces: false 655407"];
3567 [label="true 655408"];
3568 [label="considerReturnType: true 655409"];
3569 [label="false 655410"];
3570 [label="considerTypeConstraints: false 655411"];
3571 [label="true 655412"];
3572 [label="considerCallingConvention: true 655413"];
3573 [label="false 655414"];
3574 [label="considerRefKindDifferences: false 655415"];
3575 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 655416"];
3576 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655417"];
3577 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655418"];
3578 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655419"];
3579 [label="param MemberSignatureComparer(bool considerName) 655420"];
3580 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655421"];
3581 [label="param MemberSignatureComparer(bool considerReturnType) 655422"];
3582 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655423"];
3583 [label="param MemberSignatureComparer(bool considerCallingConvention) 655424"];
3584 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655425"];
3585 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655426"];
3586 [label="param MemberSignatureComparer(this) 655427"];
3587 [label="_considerName 655428"];
3588 [label="_considerExplicitlyImplementedInterfaces 655429"];
3589 [label="_considerReturnType 655430"];
3590 [label="_considerTypeConstraints 655431"];
3591 [label="_considerCallingConvention 655432"];
3592 [label="_considerRefKindDifferences 655433"];
3593 [label="_typeComparison 655434"];
3594 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655435"];
3595 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655436"];
3596 [label="_considerName 655437"];
3597 [label="_considerExplicitlyImplementedInterfaces 655438"];
3598 [label="_considerReturnType 655439"];
3599 [label="_considerTypeConstraints 655440"];
3600 [label="_considerCallingConvention 655441"];
3601 [label="_considerRefKindDifferences 655442"];
3602 [label="_typeComparison 655443"];
3603 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655444"];
3604 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655445"];
3605 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655446"];
3606 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 655447"];
3607 [label="_typeComparison 655448"];
3608 [label="RuntimeSignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655449"];
3609 [label="true 655450"];
3610 [label="considerName: true 655451"];
3611 [label="false 655452"];
3612 [label="considerExplicitlyImplementedInterfaces: false 655453"];
3613 [label="true 655454"];
3614 [label="considerReturnType: true 655455"];
3615 [label="false 655456"];
3616 [label="considerTypeConstraints: false 655457"];
3617 [label="true 655458"];
3618 [label="considerCallingConvention: true 655459"];
3619 [label="true 655460"];
3620 [label="considerRefKindDifferences: true 655461"];
3621 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 655462"];
3622 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655463"];
3623 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655464"];
3624 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655465"];
3625 [label="param MemberSignatureComparer(bool considerName) 655466"];
3626 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655467"];
3627 [label="param MemberSignatureComparer(bool considerReturnType) 655468"];
3628 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655469"];
3629 [label="param MemberSignatureComparer(bool considerCallingConvention) 655470"];
3630 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655471"];
3631 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655472"];
3632 [label="param MemberSignatureComparer(this) 655473"];
3633 [label="_considerName 655474"];
3634 [label="_considerExplicitlyImplementedInterfaces 655475"];
3635 [label="_considerReturnType 655476"];
3636 [label="_considerTypeConstraints 655477"];
3637 [label="_considerCallingConvention 655478"];
3638 [label="_considerRefKindDifferences 655479"];
3639 [label="_typeComparison 655480"];
3640 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655481"];
3641 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655482"];
3642 [label="_considerName 655483"];
3643 [label="_considerExplicitlyImplementedInterfaces 655484"];
3644 [label="_considerReturnType 655485"];
3645 [label="_considerTypeConstraints 655486"];
3646 [label="_considerCallingConvention 655487"];
3647 [label="_considerRefKindDifferences 655488"];
3648 [label="_typeComparison 655489"];
3649 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655490"];
3650 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655491"];
3651 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655492"];
3652 [label="RuntimePlusRefOutSignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655493"];
3653 [label="true 655494"];
3654 [label="considerName: true 655495"];
3655 [label="true 655496"];
3656 [label="considerExplicitlyImplementedInterfaces: true 655497"];
3657 [label="true 655498"];
3658 [label="considerReturnType: true 655499"];
3659 [label="false 655500"];
3660 [label="considerTypeConstraints: false 655501"];
3661 [label="true 655502"];
3662 [label="considerCallingConvention: true 655503"];
3663 [label="false 655504"];
3664 [label="considerRefKindDifferences: false 655505"];
3665 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 655506"];
3666 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655507"];
3667 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655508"];
3668 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655509"];
3669 [label="param MemberSignatureComparer(bool considerName) 655510"];
3670 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655511"];
3671 [label="param MemberSignatureComparer(bool considerReturnType) 655512"];
3672 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655513"];
3673 [label="param MemberSignatureComparer(bool considerCallingConvention) 655514"];
3674 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655515"];
3675 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655516"];
3676 [label="param MemberSignatureComparer(this) 655517"];
3677 [label="_considerName 655518"];
3678 [label="_considerExplicitlyImplementedInterfaces 655519"];
3679 [label="_considerReturnType 655520"];
3680 [label="_considerTypeConstraints 655521"];
3681 [label="_considerCallingConvention 655522"];
3682 [label="_considerRefKindDifferences 655523"];
3683 [label="_typeComparison 655524"];
3684 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655525"];
3685 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655526"];
3686 [label="_considerName 655527"];
3687 [label="_considerExplicitlyImplementedInterfaces 655528"];
3688 [label="_considerReturnType 655529"];
3689 [label="_considerTypeConstraints 655530"];
3690 [label="_considerCallingConvention 655531"];
3691 [label="_considerRefKindDifferences 655532"];
3692 [label="_typeComparison 655533"];
3693 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655534"];
3694 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655535"];
3695 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655536"];
3696 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 655537"];
3697 [label="_typeComparison 655538"];
3698 [label="RuntimeImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655539"];
3699 [label="true 655540"];
3700 [label="considerName: true 655541"];
3701 [label="true 655542"];
3702 [label="considerExplicitlyImplementedInterfaces: true 655543"];
3703 [label="true 655544"];
3704 [label="considerReturnType: true 655545"];
3705 [label="true 655546"];
3706 [label="considerTypeConstraints: true 655547"];
3707 [label="true 655548"];
3708 [label="considerCallingConvention: true 655549"];
3709 [label="true 655550"];
3710 [label="considerRefKindDifferences: true 655551"];
3711 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 655552"];
3712 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655553"];
3713 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655554"];
3714 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: true,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655555"];
3715 [label="param MemberSignatureComparer(bool considerName) 655556"];
3716 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655557"];
3717 [label="param MemberSignatureComparer(bool considerReturnType) 655558"];
3718 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655559"];
3719 [label="param MemberSignatureComparer(bool considerCallingConvention) 655560"];
3720 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655561"];
3721 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655562"];
3722 [label="param MemberSignatureComparer(this) 655563"];
3723 [label="_considerName 655564"];
3724 [label="_considerExplicitlyImplementedInterfaces 655565"];
3725 [label="_considerReturnType 655566"];
3726 [label="_considerTypeConstraints 655567"];
3727 [label="_considerCallingConvention 655568"];
3728 [label="_considerRefKindDifferences 655569"];
3729 [label="_typeComparison 655570"];
3730 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655571"];
3731 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655572"];
3732 [label="_considerName 655573"];
3733 [label="_considerExplicitlyImplementedInterfaces 655574"];
3734 [label="_considerReturnType 655575"];
3735 [label="_considerTypeConstraints 655576"];
3736 [label="_considerCallingConvention 655577"];
3737 [label="_considerRefKindDifferences 655578"];
3738 [label="_typeComparison 655579"];
3739 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655580"];
3740 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655581"];
3741 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655582"];
3742 [label="CSharpSignatureAndConstraintsAndReturnTypeComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: true,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655583"];
3743 [label="true 655584"];
3744 [label="considerName: true 655585"];
3745 [label="false 655586"];
3746 [label="considerExplicitlyImplementedInterfaces: false 655587"];
3747 [label="true 655588"];
3748 [label="considerReturnType: true 655589"];
3749 [label="false 655590"];
3750 [label="considerTypeConstraints: false 655591"];
3751 [label="true 655592"];
3752 [label="considerCallingConvention: true 655593"];
3753 [label="true 655594"];
3754 [label="considerRefKindDifferences: true 655595"];
3755 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 655596"];
3756 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655597"];
3757 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 655598"];
3758 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false, //we'll be comparing interface members anyway\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655599"];
3759 [label="param MemberSignatureComparer(bool considerName) 655600"];
3760 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655601"];
3761 [label="param MemberSignatureComparer(bool considerReturnType) 655602"];
3762 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655603"];
3763 [label="param MemberSignatureComparer(bool considerCallingConvention) 655604"];
3764 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655605"];
3765 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655606"];
3766 [label="param MemberSignatureComparer(this) 655607"];
3767 [label="_considerName 655608"];
3768 [label="_considerExplicitlyImplementedInterfaces 655609"];
3769 [label="_considerReturnType 655610"];
3770 [label="_considerTypeConstraints 655611"];
3771 [label="_considerCallingConvention 655612"];
3772 [label="_considerRefKindDifferences 655613"];
3773 [label="_typeComparison 655614"];
3774 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655615"];
3775 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655616"];
3776 [label="_considerName 655617"];
3777 [label="_considerExplicitlyImplementedInterfaces 655618"];
3778 [label="_considerReturnType 655619"];
3779 [label="_considerTypeConstraints 655620"];
3780 [label="_considerCallingConvention 655621"];
3781 [label="_considerRefKindDifferences 655622"];
3782 [label="_typeComparison 655623"];
3783 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655624"];
3784 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655625"];
3785 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655626"];
3786 [label="RetargetedExplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false, //we'll be comparing interface members anyway\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 655627"];
3787 [label="false 655628"];
3788 [label="considerName: false 655629"];
3789 [label="false 655630"];
3790 [label="considerExplicitlyImplementedInterfaces: false 655631"];
3791 [label="false 655632"];
3792 [label="considerReturnType: false 655633"];
3793 [label="false 655634"];
3794 [label="considerTypeConstraints: false 655635"];
3795 [label="false 655636"];
3796 [label="considerCallingConvention: false 655637"];
3797 [label="true 655638"];
3798 [label="considerRefKindDifferences: true 655639"];
3799 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 655640"];
3800 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 655641"];
3801 [label="typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 655642"];
3802 [label="new MemberSignatureComparer(\n            considerName: false, //handled by lookup\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 655643"];
3803 [label="param MemberSignatureComparer(bool considerName) 655644"];
3804 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 655645"];
3805 [label="param MemberSignatureComparer(bool considerReturnType) 655646"];
3806 [label="param MemberSignatureComparer(bool considerTypeConstraints) 655647"];
3807 [label="param MemberSignatureComparer(bool considerCallingConvention) 655648"];
3808 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 655649"];
3809 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 655650"];
3810 [label="param MemberSignatureComparer(this) 655651"];
3811 [label="_considerName 655652"];
3812 [label="_considerExplicitlyImplementedInterfaces 655653"];
3813 [label="_considerReturnType 655654"];
3814 [label="_considerTypeConstraints 655655"];
3815 [label="_considerCallingConvention 655656"];
3816 [label="_considerRefKindDifferences 655657"];
3817 [label="_typeComparison 655658"];
3818 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655659"];
3819 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 655660"];
3820 [label="_considerName 655661"];
3821 [label="_considerExplicitlyImplementedInterfaces 655662"];
3822 [label="_considerReturnType 655663"];
3823 [label="_considerTypeConstraints 655664"];
3824 [label="_considerCallingConvention 655665"];
3825 [label="_considerRefKindDifferences 655666"];
3826 [label="_typeComparison 655667"];
3827 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655668"];
3828 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 655669"];
3829 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 655670"];
3830 [label="CrefComparer = new MemberSignatureComparer(\n            considerName: false, //handled by lookup\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 655671"];
3831 [label="MemberSignatureComparer.RecordAPISignatureComparer 655672"];
3832 [label="PooledDictionary<Symbol, Symbol>.CreatePool(MemberSignatureComparer.RecordAPISignatureComparer) 655673"];
3833 [label="s_duplicateRecordMemberSignatureDictionary =\n            PooledDictionary<Symbol, Symbol>.CreatePool(MemberSignatureComparer.RecordAPISignatureComparer) 655674"];
3834 [label="EmptyComparer.Instance 655675"];
3835 [label="new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(EmptyComparer.Instance) 655676"];
3836 [label="s_emptyTypeMembers = new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(EmptyComparer.Instance) 655677"];
3837 [label="(DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, bool topLevel, Location location)\n            => diagnostics.Add(topLevel ?\n                ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride :\n                ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride,\n                location) 655678"];
3838 [label="ReportBadReturn =\n            (DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, bool topLevel, Location location)\n            => diagnostics.Add(topLevel ?\n                ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride :\n                ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride,\n                location) 655679"];
3839 [label="(DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, ParameterSymbol overridingParameter, bool topLevel, Location location)\n            => diagnostics.Add(\n                topLevel ? ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride : ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride,\n                location,\n                new FormattedSymbol(overridingParameter, SymbolDisplayFormat.ShortFormat)) 655680"];
3840 [label="ReportBadParameter =\n            (DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, ParameterSymbol overridingParameter, bool topLevel, Location location)\n            => diagnostics.Add(\n                topLevel ? ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride : ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride,\n                location,\n                new FormattedSymbol(overridingParameter, SymbolDisplayFormat.ShortFormat)) 655681"];
3841 [label="containingSymbol 655682"];
3842 [label="declaration 655683"];
3843 [label="diagnostics 655684"];
3844 [label="tupleData 655685"];
3845 [label="param SourceNamedTypeSymbol(this) 655686"];
3846 [label="param SourceMemberContainerTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 655687"];
3847 [label="param SourceMemberContainerTypeSymbol(MergedTypeDeclaration declaration) 655688"];
3848 [label="param SourceMemberContainerTypeSymbol(DiagnosticBag diagnostics) 655689"];
3849 [label="param SourceMemberContainerTypeSymbol(TupleExtraData? tupleData = null) 655690"];
3850 [label="param SourceMemberContainerTypeSymbol(this) 655691"];
3851 [label="tupleData 655692"];
3852 [label="param SourceMemberContainerTypeSymbol(this) 655693"];
3853 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 655694"];
3854 [label="_lazyTupleData 655695"];
3855 [label="_declModifiers 655696"];
3856 [label="_containingSymbol 655697"];
3857 [label="declaration 655698"];
3858 [label="new DeclaredMembersAndInitializers() 655699"];
3859 [label="param DeclaredMembersAndInitializers(this) 655700"];
3860 [label="HaveIndexers 655701"];
3861 [label="RecordDeclarationWithParameters 655702"];
3862 [label="RecordPrimaryConstructor 655703"];
3863 [label="InstanceInitializersIndexForRecordDeclarationWithParameters 655704"];
3864 [label="IsNullableEnabledForInstanceConstructorsAndFields 655705"];
3865 [label="IsNullableEnabledForStaticConstructorsAndFields 655706"];
3866 [label="UninitializedSentinel = new DeclaredMembersAndInitializers() 655707"];
3867 [label="_lazyDeclaredMembersAndInitializers = DeclaredMembersAndInitializers.UninitializedSentinel 655708"];
3868 [label="_lazyMembersAndInitializers 655709"];
3869 [label="_lazyMembersDictionary 655710"];
3870 [label="_lazyEarlyAttributeDecodingMembersDictionary 655711"];
3871 [label="_lazyTypeMembers 655712"];
3872 [label="_lazyKnownCircularStruct 655713"];
3873 [label="_lazyLexicalSortKey = LexicalSortKey.NotInitialized 655714"];
3874 [label="_lazyContainsExtensionMethods 655715"];
3875 [label="_lazyAnyMemberHasAttributes 655716"];
3876 [label="_containingSymbol 655717"];
3877 [label="this.declaration 655718"];
3878 [label="TypeKind typeKind = declaration.Kind.ToTypeKind(); 655719"];
3879 [label="declaration.Kind.ToTypeKind() 655720"];
3880 [label="param ToTypeKind(this DeclarationKind kind) 655721"];
3881 [label="switch (kind)\n            {\n                case DeclarationKind.Class:\n                case DeclarationKind.Script:\n                case DeclarationKind.ImplicitClass:\n                case DeclarationKind.SimpleProgram:\n                case DeclarationKind.Record:\n                    return TypeKind.Class;\n\n                case DeclarationKind.Submission:\n                    return TypeKind.Submission;\n\n                case DeclarationKind.Delegate:\n                    return TypeKind.Delegate;\n\n                case DeclarationKind.Enum:\n                    return TypeKind.Enum;\n\n                case DeclarationKind.Interface:\n                    return TypeKind.Interface;\n\n                case DeclarationKind.Struct:\n                    return TypeKind.Struct;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 655722"];
3882 [label="return TypeKind.Interface; 655723"];
3883 [label="var modifiers = MakeModifiers(typeKind, diagnostics); 655724"];
3884 [label="var modifiers = MakeModifiers(typeKind, diagnostics); 655725"];
3885 [label="MakeModifiers(typeKind, diagnostics) 655726"];
3886 [label="param MakeModifiers(TypeKind typeKind) 655727"];
3887 [label="param MakeModifiers(DiagnosticBag diagnostics) 655728"];
3888 [label="param MakeModifiers(this) 655729"];
3889 [label="this.ContainingSymbol 655730"];
3890 [label="get\n            {\n                return _containingSymbol;\n            } 655731"];
3891 [label="return _containingSymbol; 655732"];
3892 [label="Symbol containingSymbol = this.ContainingSymbol; 655733"];
3893 [label="DeclarationModifiers defaultAccess; 655734"];
3894 [label="var allowedModifiers = DeclarationModifiers.AccessibilityMask; 655735"];
3895 [label="containingSymbol.Kind 655736"];
3896 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 655737"];
3897 [label="if (containingSymbol.Kind == SymbolKind.Namespace)\n            {\n                defaultAccess = DeclarationModifiers.Internal;\n            }\n            else\n            {\n                allowedModifiers |= DeclarationModifiers.New;\n\n                if (((NamedTypeSymbol)containingSymbol).IsInterface)\n                {\n                    defaultAccess = DeclarationModifiers.Public;\n                }\n                else\n                {\n                    defaultAccess = DeclarationModifiers.Private;\n                }\n            } 655738"];
3898 [label="defaultAccess = DeclarationModifiers.Internal; 655739"];
3899 [label="switch (typeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Submission:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Sealed | DeclarationModifiers.Abstract\n                        | DeclarationModifiers.Unsafe;\n\n                    if (!this.IsRecord)\n                    {\n                        allowedModifiers |= DeclarationModifiers.Static;\n                    }\n\n                    break;\n                case TypeKind.Struct:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Ref | DeclarationModifiers.ReadOnly | DeclarationModifiers.Unsafe;\n                    break;\n                case TypeKind.Interface:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Unsafe;\n                    break;\n                case TypeKind.Delegate:\n                    allowedModifiers |= DeclarationModifiers.Unsafe;\n                    break;\n            } 655740"];
3900 [label="allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Unsafe; 655741"];
3901 [label="allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Unsafe; 655742"];
3902 [label="bool modifierErrors; 655743"];
3903 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 655744"];
3904 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 655745"];
3905 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 655746"];
3906 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 655747"];
3907 [label="MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors) 655748"];
3908 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers defaultAccess) 655749"];
3909 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers allowedModifiers) 655750"];
3910 [label="param MakeAndCheckTypeModifiers(DiagnosticBag diagnostics) 655751"];
3911 [label="param MakeAndCheckTypeModifiers(out bool modifierErrors) 655752"];
3912 [label="param MakeAndCheckTypeModifiers(this) 655753"];
3913 [label="modifierErrors = false; 655754"];
3914 [label="var result = DeclarationModifiers.Unset; 655755"];
3915 [label="var partCount = declaration.Declarations.Length; 655756"];
3916 [label="var missingPartial = false; 655757"];
3917 [label="for (var i = 0; i < partCount; i++)\n            {\n                var decl = declaration.Declarations[i];\n                var mods = decl.Modifiers;\n\n                if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                }\n\n                if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n\n                if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                }\n\n            } 655758"];
3918 [label="for (var i = 0; i < partCount; i++)\n            {\n                var decl = declaration.Declarations[i];\n                var mods = decl.Modifiers;\n\n                if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                }\n\n                if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n\n                if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                }\n\n            } 655759"];
3919 [label="var decl = declaration.Declarations[i]; 655760"];
3920 [label="var mods = decl.Modifiers; 655761"];
3921 [label="if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                } 655762"];
3922 [label="if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                } 655763"];
3923 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 655764"];
3924 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 655765"];
3925 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 655766"];
3926 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 655767"];
3927 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 655768"];
3928 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 655769"];
3929 [label="ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors) 655770"];
3930 [label="param CheckModifiers(DeclarationModifiers modifiers) 655771"];
3931 [label="param CheckModifiers(DeclarationModifiers allowedModifiers) 655772"];
3932 [label="param CheckModifiers(Location errorLocation) 655773"];
3933 [label="param CheckModifiers(DiagnosticBag diagnostics) 655774"];
3934 [label="param CheckModifiers(SyntaxTokenList? modifierTokens) 655775"];
3935 [label="param CheckModifiers(out bool modifierErrors) 655776"];
3936 [label="modifierErrors = false; 655777"];
3937 [label="DeclarationModifiers errorModifiers = modifiers & ~allowedModifiers; 655778"];
3938 [label="DeclarationModifiers result = modifiers & allowedModifiers; 655779"];
3939 [label="while (errorModifiers != DeclarationModifiers.None)\n            {\n                DeclarationModifiers oneError = errorModifiers & ~(errorModifiers - 1);\n                Debug.Assert(oneError != DeclarationModifiers.None);\n                errorModifiers = errorModifiers & ~oneError;\n\n                switch (oneError)\n                {\n                    case DeclarationModifiers.Partial:\n                        // Provide a specialized error message in the case of partial.\n                        ReportPartialError(errorLocation, diagnostics, modifierTokens);\n                        break;\n\n                    default:\n                        diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, ConvertSingleModifierToSyntaxText(oneError));\n                        break;\n                }\n\n                modifierErrors = true;\n            } 655780"];
3940 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 655781"];
3941 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 655782"];
3942 [label="return result; 655783"];
3943 [label="if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    } 655784"];
3944 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 655785"];
3945 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 655786"];
3946 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 655787"];
3947 [label="ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false) 655788"];
3948 [label="param CheckAccessibility(DeclarationModifiers modifiers) 655789"];
3949 [label="param CheckAccessibility(Symbol symbol) 655790"];
3950 [label="param CheckAccessibility(bool isExplicitInterfaceImplementation) 655791"];
3951 [label="if (!IsValidAccessibility(modifiers))\n            {\n                // error CS0107: More than one protection modifier\n                return new CSDiagnosticInfo(ErrorCode.ERR_BadMemberProtection);\n            } 655792"];
3952 [label="IsValidAccessibility(modifiers) 655793"];
3953 [label="param IsValidAccessibility(DeclarationModifiers modifiers) 655794"];
3954 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                case DeclarationModifiers.Private:\n                case DeclarationModifiers.Protected:\n                case DeclarationModifiers.Internal:\n                case DeclarationModifiers.Public:\n                case DeclarationModifiers.ProtectedInternal:\n                case DeclarationModifiers.PrivateProtected:\n                    return true;\n\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return false;\n            } 655795"];
3955 [label="return true; 655796"];
3956 [label="symbol.Kind 655797"];
3957 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 655798"];
3958 [label="return SymbolKind.NamedType; 655799"];
3959 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 655800"];
3960 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 655801"];
3961 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 655802"];
3962 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 655803"];
3963 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 655804"];
3964 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                } 655805"];
3965 [label="return null; 655806"];
3966 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 655807"];
3967 [label="if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        } 655808"];
3968 [label="if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        } 655809"];
3969 [label="if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                } 655810"];
3970 [label="result = mods; 655811"];
3971 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 655812"];
3972 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 655813"];
3973 [label="if (missingPartial)\n            {\n                if ((result & DeclarationModifiers.Partial) == 0)\n                {\n                    // duplicate definitions\n                    switch (this.ContainingSymbol.Kind)\n                    {\n                        case SymbolKind.Namespace:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, declaration.Declarations[i].NameLocation, this.Name, this.ContainingSymbol);\n                                modifierErrors = true;\n                            }\n                            break;\n\n                        case SymbolKind.NamedType:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                if (ContainingType!.Locations.Length == 1 || ContainingType.IsPartial())\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateNameInClass, declaration.Declarations[i].NameLocation, this.ContainingSymbol, this.Name);\n                                modifierErrors = true;\n                            }\n                            break;\n                    }\n                }\n                else\n                {\n                    for (var i = 0; i < partCount; i++)\n                    {\n                        var singleDeclaration = declaration.Declarations[i];\n                        var mods = singleDeclaration.Modifiers;\n                        if ((mods & DeclarationModifiers.Partial) == 0)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_MissingPartial, singleDeclaration.NameLocation, this.Name);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n            } 655814"];
3974 [label="this.Name 655815"];
3975 [label="get\n            {\n                return declaration.Name;\n            } 655816"];
3976 [label="return declaration.Name; 655817"];
3977 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 655818"];
3978 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 655819"];
3979 [label="return result; 655820"];
3980 [label="(type, containingSymbol, unused) => HasInvalidTypeParameter(type, containingSymbol) 655821"];
3981 [label="s_hasInvalidTypeParameterFunc =\n            (type, containingSymbol, unused) => HasInvalidTypeParameter(type, containingSymbol) 655822"];
3982 [label="this.CheckUnsafeModifier(mods, diagnostics); 655823"];
3983 [label="this.CheckUnsafeModifier(mods, diagnostics); 655824"];
3984 [label="this.CheckUnsafeModifier(mods, diagnostics); 655825"];
3985 [label="this.CheckUnsafeModifier(mods, diagnostics) 655826"];
3986 [label="param CheckUnsafeModifier(this Symbol symbol) 655827"];
3987 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 655828"];
3988 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 655829"];
3989 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 655830"];
3990 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 655831"];
3991 [label="symbol.Locations 655832"];
3992 [label="get\n            {\n                return declaration.NameLocations.Cast<SourceLocation, Location>();\n            } 655833"];
3993 [label="return declaration.NameLocations.Cast<SourceLocation, Location>(); 655834"];
3994 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 655835"];
3995 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 655836"];
3996 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 655837"];
3997 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics) 655838"];
3998 [label="param CheckUnsafeModifier(this Symbol symbol) 655839"];
3999 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 655840"];
4000 [label="param CheckUnsafeModifier(Location errorLocation) 655841"];
4001 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 655842"];
4002 [label="if (((modifiers & DeclarationModifiers.Unsafe) == DeclarationModifiers.Unsafe) && !symbol.CompilationAllowsUnsafe())\n            {\n                Debug.Assert(errorLocation != null);\n                diagnostics.Add(ErrorCode.ERR_IllegalUnsafe, errorLocation);\n            } 655843"];
4003 [label="this.CheckUnsafeModifier(mods, diagnostics); 655844"];
4004 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 655845"];
4005 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 655846"];
4006 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 655847"];
4007 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 655848"];
4008 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 655849"];
4009 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 655850"];
4010 [label="switch (typeKind)\n            {\n                case TypeKind.Interface:\n                    mods |= DeclarationModifiers.Abstract;\n                    break;\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n                case TypeKind.Delegate:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n            } 655851"];
4011 [label="mods |= DeclarationModifiers.Abstract; 655852"];
4012 [label="return mods; 655853"];
4013 [label="foreach (var singleDeclaration in declaration.Declarations)\n            {\n                diagnostics.AddRange(singleDeclaration.Diagnostics);\n            } 655854"];
4014 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 655855"];
4015 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 655856"];
4016 [label="int access = (int)(modifiers & DeclarationModifiers.AccessibilityMask); 655857"];
4017 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 655858"];
4018 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 655859"];
4019 [label="_declModifiers 655860"];
4020 [label="var specialType = access == (int)DeclarationModifiers.Public\n                ? MakeSpecialType()\n                : SpecialType.None; 655861"];
4021 [label="access == (int)DeclarationModifiers.Public 655862"];
4022 [label="MakeSpecialType() 655863"];
4023 [label="param MakeSpecialType(this) 655864"];
4024 [label="ContainingSymbol 655865"];
4025 [label="get\n            {\n                return _containingSymbol;\n            } 655866"];
4026 [label="return _containingSymbol; 655867"];
4027 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 655868"];
4028 [label="ContainingSymbol.Kind 655869"];
4029 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 655870"];
4030 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 655871"];
4031 [label="ContainingSymbol 655872"];
4032 [label="get\n            {\n                return _containingSymbol;\n            } 655873"];
4033 [label="return _containingSymbol; 655874"];
4034 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 655875"];
4035 [label="ContainingSymbol.ContainingAssembly 655876"];
4036 [label="=> _module.ContainingAssembly 655877"];
4037 [label="_module.ContainingAssembly 655878"];
4038 [label="get\n            {\n                return _assemblySymbol;\n            } 655879"];
4039 [label="return _assemblySymbol; 655880"];
4040 [label="ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes 655881"];
4041 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 655882"];
4042 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 655883"];
4043 [label="return SpecialType.None; 655884"];
4044 [label="0 655885"];
4045 [label="SpecialTypeOffset = 0 655886"];
4046 [label="6 655887"];
4047 [label="SpecialTypeSize = 6 655888"];
4048 [label="SpecialTypeOffset + SpecialTypeSize 655889"];
4049 [label="ManagedKindOffset = SpecialTypeOffset + SpecialTypeSize 655890"];
4050 [label="2 655891"];
4051 [label="ManagedKindSize = 2 655892"];
4052 [label="ManagedKindOffset + ManagedKindSize 655893"];
4053 [label="FieldDefinitionsNotedOffset = ManagedKindOffset + ManagedKindSize 655894"];
4054 [label="1 655895"];
4055 [label="FieldDefinitionsNotedSize = 1 655896"];
4056 [label="FieldDefinitionsNotedOffset + FieldDefinitionsNotedSize 655897"];
4057 [label="FlattenedMembersIsSortedOffset = FieldDefinitionsNotedOffset + FieldDefinitionsNotedSize 655898"];
4058 [label="1 655899"];
4059 [label="FlattenedMembersIsSortedSize = 1 655900"];
4060 [label="FlattenedMembersIsSortedOffset + FlattenedMembersIsSortedSize 655901"];
4061 [label="TypeKindOffset = FlattenedMembersIsSortedOffset + FlattenedMembersIsSortedSize 655902"];
4062 [label="4 655903"];
4063 [label="TypeKindSize = 4 655904"];
4064 [label="TypeKindOffset + TypeKindSize 655905"];
4065 [label="NullableContextOffset = TypeKindOffset + TypeKindSize 655906"];
4066 [label="3 655907"];
4067 [label="NullableContextSize = 3 655908"];
4068 [label="1 655909"];
4069 [label="1 << SpecialTypeSize 655910"];
4070 [label="1 655911"];
4071 [label="(1 << SpecialTypeSize) - 1 655912"];
4072 [label="SpecialTypeMask = (1 << SpecialTypeSize) - 1 655913"];
4073 [label="1 655914"];
4074 [label="1 << ManagedKindSize 655915"];
4075 [label="1 655916"];
4076 [label="(1 << ManagedKindSize) - 1 655917"];
4077 [label="ManagedKindMask = (1 << ManagedKindSize) - 1 655918"];
4078 [label="1 655919"];
4079 [label="1 << TypeKindSize 655920"];
4080 [label="1 655921"];
4081 [label="(1 << TypeKindSize) - 1 655922"];
4082 [label="TypeKindMask = (1 << TypeKindSize) - 1 655923"];
4083 [label="1 655924"];
4084 [label="1 << NullableContextSize 655925"];
4085 [label="1 655926"];
4086 [label="(1 << NullableContextSize) - 1 655927"];
4087 [label="NullableContextMask = (1 << NullableContextSize) - 1 655928"];
4088 [label="1 655929"];
4089 [label="1 << FieldDefinitionsNotedOffset 655930"];
4090 [label="FieldDefinitionsNotedBit = 1 << FieldDefinitionsNotedOffset 655931"];
4091 [label="1 655932"];
4092 [label="1 << FlattenedMembersIsSortedOffset 655933"];
4093 [label="FlattenedMembersIsSortedBit = 1 << FlattenedMembersIsSortedOffset 655934"];
4094 [label="Debug.Assert(EnumUtilities.ContainsAllValues<SpecialType>(SpecialTypeMask)); 655935"];
4095 [label="Debug.Assert(EnumUtilities.ContainsAllValues<NullableContextKind>(NullableContextMask)); 655936"];
4096 [label="_flags = new Flags(specialType, typeKind); 655937"];
4097 [label="_flags = new Flags(specialType, typeKind); 655938"];
4098 [label="_flags = new Flags(specialType, typeKind); 655939"];
4099 [label="new Flags(specialType, typeKind) 655940"];
4100 [label="param Flags(SpecialType specialType) 655941"];
4101 [label="param Flags(TypeKind typeKind) 655942"];
4102 [label="param Flags(this) 655943"];
4103 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 655944"];
4104 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 655945"];
4105 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 655946"];
4106 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 655947"];
4107 [label="_flags = specialTypeInt | typeKindInt; 655948"];
4108 [label="_flags 655949"];
4109 [label="_flags 655950"];
4110 [label="this.ContainingType 655951"];
4111 [label="get\n            {\n                return _containingSymbol as NamedTypeSymbol;\n            } 655952"];
4112 [label="return _containingSymbol as NamedTypeSymbol; 655953"];
4113 [label="var containingType = this.ContainingType; 655954"];
4114 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 655955"];
4115 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 655956"];
4116 [label="state.NotePartComplete(CompletionPart.TypeArguments); 655957"];
4117 [label="state.NotePartComplete(CompletionPart.TypeArguments) 655958"];
4118 [label="param NotePartComplete(CompletionPart part) 655959"];
4119 [label="param NotePartComplete(this) 655960"];
4120 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 655961"];
4121 [label="_lazyCustomAttributesBag 655962"];
4122 [label="_lazyDocComment 655963"];
4123 [label="_lazyExpandedDocComment 655964"];
4124 [label="_lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.Unknown 655965"];
4125 [label="_lazyDeclaredBases 655966"];
4126 [label="_lazyBaseType = ErrorTypeSymbol.UnknownResultType 655967"];
4127 [label="_lazyEnumValueField 655968"];
4128 [label="_lazyEnumUnderlyingType = ErrorTypeSymbol.UnknownResultType 655969"];
4129 [label="switch (declaration.Kind)\n            {\n                case DeclarationKind.Struct:\n                case DeclarationKind.Interface:\n                case DeclarationKind.Enum:\n                case DeclarationKind.Delegate:\n                case DeclarationKind.Class:\n                case DeclarationKind.Record:\n                    break;\n                default:\n                    Debug.Assert(false, 'bad declaration kind');\n                    break;\n            } 655970"];
4130 [label="containingSymbol.Kind 655971"];
4131 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 655972"];
4132 [label="if (containingSymbol.Kind == SymbolKind.NamedType)\n            {\n                // Nested types are never unified.\n                _lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.False;\n            } 655973"];
4133 [label="get\n            {\n                return declaration.Name;\n            } 655974"];
4134 [label="return declaration.Name; 655975"];
4135 [label="param BuildSymbol(this) 655976"];
4136 [label="param SourceNamedTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 655977"];
4137 [label="param SourceNamedTypeSymbol(TupleExtraData tupleData = null) 655978"];
4138 [label="containingSymbol 655979"];
4139 [label="tupleData 655980"];
4140 [label="param SourceMemberContainerTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 655981"];
4141 [label="param SourceMemberContainerTypeSymbol(TupleExtraData? tupleData = null) 655982"];
4142 [label="tupleData 655983"];
4143 [label="_lazyTupleData 655984"];
4144 [label="_declModifiers 655985"];
4145 [label="_containingSymbol 655986"];
4146 [label="declaration 655987"];
4147 [label="_lazyDeclaredMembersAndInitializers = DeclaredMembersAndInitializers.UninitializedSentinel 655988"];
4148 [label="_lazyMembersAndInitializers 655989"];
4149 [label="_lazyMembersDictionary 655990"];
4150 [label="_lazyEarlyAttributeDecodingMembersDictionary 655991"];
4151 [label="_lazyTypeMembers 655992"];
4152 [label="_lazyKnownCircularStruct 655993"];
4153 [label="_lazyLexicalSortKey = LexicalSortKey.NotInitialized 655994"];
4154 [label="_lazyContainsExtensionMethods 655995"];
4155 [label="_lazyAnyMemberHasAttributes 655996"];
4156 [label="_containingSymbol 655997"];
4157 [label="TypeKind typeKind = declaration.Kind.ToTypeKind(); 655998"];
4158 [label="declaration.Kind.ToTypeKind() 655999"];
4159 [label="param ToTypeKind(this DeclarationKind kind) 656000"];
4160 [label="switch (kind)\n            {\n                case DeclarationKind.Class:\n                case DeclarationKind.Script:\n                case DeclarationKind.ImplicitClass:\n                case DeclarationKind.SimpleProgram:\n                case DeclarationKind.Record:\n                    return TypeKind.Class;\n\n                case DeclarationKind.Submission:\n                    return TypeKind.Submission;\n\n                case DeclarationKind.Delegate:\n                    return TypeKind.Delegate;\n\n                case DeclarationKind.Enum:\n                    return TypeKind.Enum;\n\n                case DeclarationKind.Interface:\n                    return TypeKind.Interface;\n\n                case DeclarationKind.Struct:\n                    return TypeKind.Struct;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 656001"];
4161 [label="return TypeKind.Class; 656002"];
4162 [label="var modifiers = MakeModifiers(typeKind, diagnostics); 656003"];
4163 [label="var modifiers = MakeModifiers(typeKind, diagnostics); 656004"];
4164 [label="param MakeModifiers(TypeKind typeKind) 656005"];
4165 [label="param MakeModifiers(DiagnosticBag diagnostics) 656006"];
4166 [label="this.ContainingSymbol 656007"];
4167 [label="get\n            {\n                return _containingSymbol;\n            } 656008"];
4168 [label="return _containingSymbol; 656009"];
4169 [label="Symbol containingSymbol = this.ContainingSymbol; 656010"];
4170 [label="DeclarationModifiers defaultAccess; 656011"];
4171 [label="var allowedModifiers = DeclarationModifiers.AccessibilityMask; 656012"];
4172 [label="containingSymbol.Kind 656013"];
4173 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 656014"];
4174 [label="if (containingSymbol.Kind == SymbolKind.Namespace)\n            {\n                defaultAccess = DeclarationModifiers.Internal;\n            }\n            else\n            {\n                allowedModifiers |= DeclarationModifiers.New;\n\n                if (((NamedTypeSymbol)containingSymbol).IsInterface)\n                {\n                    defaultAccess = DeclarationModifiers.Public;\n                }\n                else\n                {\n                    defaultAccess = DeclarationModifiers.Private;\n                }\n            } 656015"];
4175 [label="defaultAccess = DeclarationModifiers.Internal; 656016"];
4176 [label="switch (typeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Submission:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Sealed | DeclarationModifiers.Abstract\n                        | DeclarationModifiers.Unsafe;\n\n                    if (!this.IsRecord)\n                    {\n                        allowedModifiers |= DeclarationModifiers.Static;\n                    }\n\n                    break;\n                case TypeKind.Struct:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Ref | DeclarationModifiers.ReadOnly | DeclarationModifiers.Unsafe;\n                    break;\n                case TypeKind.Interface:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Unsafe;\n                    break;\n                case TypeKind.Delegate:\n                    allowedModifiers |= DeclarationModifiers.Unsafe;\n                    break;\n            } 656017"];
4177 [label="allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Sealed | DeclarationModifiers.Abstract\n                        | DeclarationModifiers.Unsafe; 656018"];
4178 [label="allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Sealed | DeclarationModifiers.Abstract\n                        | DeclarationModifiers.Unsafe; 656019"];
4179 [label="this.IsRecord 656020"];
4180 [label="get\n            {\n                return this.declaration.Declarations[0].Kind == DeclarationKind.Record;\n            } 656021"];
4181 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.Record; 656022"];
4182 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.Record; 656023"];
4183 [label="if (!this.IsRecord)\n                    {\n                        allowedModifiers |= DeclarationModifiers.Static;\n                    } 656024"];
4184 [label="allowedModifiers |= DeclarationModifiers.Static; 656025"];
4185 [label="bool modifierErrors; 656026"];
4186 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 656027"];
4187 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 656028"];
4188 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 656029"];
4189 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 656030"];
4190 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers defaultAccess) 656031"];
4191 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers allowedModifiers) 656032"];
4192 [label="param MakeAndCheckTypeModifiers(DiagnosticBag diagnostics) 656033"];
4193 [label="param MakeAndCheckTypeModifiers(out bool modifierErrors) 656034"];
4194 [label="var result = DeclarationModifiers.Unset; 656035"];
4195 [label="var missingPartial = false; 656036"];
4196 [label="var mods = decl.Modifiers; 656037"];
4197 [label="if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                } 656038"];
4198 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 656039"];
4199 [label="ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors) 656040"];
4200 [label="param CheckModifiers(DeclarationModifiers modifiers) 656041"];
4201 [label="param CheckModifiers(DeclarationModifiers allowedModifiers) 656042"];
4202 [label="param CheckModifiers(Location errorLocation) 656043"];
4203 [label="param CheckModifiers(DiagnosticBag diagnostics) 656044"];
4204 [label="param CheckModifiers(SyntaxTokenList? modifierTokens) 656045"];
4205 [label="param CheckModifiers(out bool modifierErrors) 656046"];
4206 [label="modifierErrors = false; 656047"];
4207 [label="DeclarationModifiers errorModifiers = modifiers & ~allowedModifiers; 656048"];
4208 [label="DeclarationModifiers result = modifiers & allowedModifiers; 656049"];
4209 [label="while (errorModifiers != DeclarationModifiers.None)\n            {\n                DeclarationModifiers oneError = errorModifiers & ~(errorModifiers - 1);\n                Debug.Assert(oneError != DeclarationModifiers.None);\n                errorModifiers = errorModifiers & ~oneError;\n\n                switch (oneError)\n                {\n                    case DeclarationModifiers.Partial:\n                        // Provide a specialized error message in the case of partial.\n                        ReportPartialError(errorLocation, diagnostics, modifierTokens);\n                        break;\n\n                    default:\n                        diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, ConvertSingleModifierToSyntaxText(oneError));\n                        break;\n                }\n\n                modifierErrors = true;\n            } 656050"];
4210 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 656051"];
4211 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 656052"];
4212 [label="return result; 656053"];
4213 [label="if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    } 656054"];
4214 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 656055"];
4215 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 656056"];
4216 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 656057"];
4217 [label="ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false) 656058"];
4218 [label="param CheckAccessibility(DeclarationModifiers modifiers) 656059"];
4219 [label="param CheckAccessibility(Symbol symbol) 656060"];
4220 [label="param CheckAccessibility(bool isExplicitInterfaceImplementation) 656061"];
4221 [label="if (!IsValidAccessibility(modifiers))\n            {\n                // error CS0107: More than one protection modifier\n                return new CSDiagnosticInfo(ErrorCode.ERR_BadMemberProtection);\n            } 656062"];
4222 [label="IsValidAccessibility(modifiers) 656063"];
4223 [label="param IsValidAccessibility(DeclarationModifiers modifiers) 656064"];
4224 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                case DeclarationModifiers.Private:\n                case DeclarationModifiers.Protected:\n                case DeclarationModifiers.Internal:\n                case DeclarationModifiers.Public:\n                case DeclarationModifiers.ProtectedInternal:\n                case DeclarationModifiers.PrivateProtected:\n                    return true;\n\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return false;\n            } 656065"];
4225 [label="return true; 656066"];
4226 [label="symbol.Kind 656067"];
4227 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656068"];
4228 [label="return SymbolKind.NamedType; 656069"];
4229 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 656070"];
4230 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 656071"];
4231 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 656072"];
4232 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 656073"];
4233 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 656074"];
4234 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                } 656075"];
4235 [label="return null; 656076"];
4236 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 656077"];
4237 [label="if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        } 656078"];
4238 [label="if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        } 656079"];
4239 [label="if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                } 656080"];
4240 [label="result = mods; 656081"];
4241 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 656082"];
4242 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 656083"];
4243 [label="if (missingPartial)\n            {\n                if ((result & DeclarationModifiers.Partial) == 0)\n                {\n                    // duplicate definitions\n                    switch (this.ContainingSymbol.Kind)\n                    {\n                        case SymbolKind.Namespace:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, declaration.Declarations[i].NameLocation, this.Name, this.ContainingSymbol);\n                                modifierErrors = true;\n                            }\n                            break;\n\n                        case SymbolKind.NamedType:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                if (ContainingType!.Locations.Length == 1 || ContainingType.IsPartial())\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateNameInClass, declaration.Declarations[i].NameLocation, this.ContainingSymbol, this.Name);\n                                modifierErrors = true;\n                            }\n                            break;\n                    }\n                }\n                else\n                {\n                    for (var i = 0; i < partCount; i++)\n                    {\n                        var singleDeclaration = declaration.Declarations[i];\n                        var mods = singleDeclaration.Modifiers;\n                        if ((mods & DeclarationModifiers.Partial) == 0)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_MissingPartial, singleDeclaration.NameLocation, this.Name);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n            } 656084"];
4244 [label="this.Name 656085"];
4245 [label="get\n            {\n                return declaration.Name;\n            } 656086"];
4246 [label="return declaration.Name; 656087"];
4247 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 656088"];
4248 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 656089"];
4249 [label="return result; 656090"];
4250 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 656091"];
4251 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 656092"];
4252 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics) 656093"];
4253 [label="param CheckUnsafeModifier(this Symbol symbol) 656094"];
4254 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 656095"];
4255 [label="param CheckUnsafeModifier(Location errorLocation) 656096"];
4256 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 656097"];
4257 [label="if (((modifiers & DeclarationModifiers.Unsafe) == DeclarationModifiers.Unsafe) && !symbol.CompilationAllowsUnsafe())\n            {\n                Debug.Assert(errorLocation != null);\n                diagnostics.Add(ErrorCode.ERR_IllegalUnsafe, errorLocation);\n            } 656098"];
4258 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 656099"];
4259 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 656100"];
4260 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 656101"];
4261 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 656102"];
4262 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 656103"];
4263 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 656104"];
4264 [label="switch (typeKind)\n            {\n                case TypeKind.Interface:\n                    mods |= DeclarationModifiers.Abstract;\n                    break;\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n                case TypeKind.Delegate:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n            } 656105"];
4265 [label="return mods; 656106"];
4266 [label="int access = (int)(modifiers & DeclarationModifiers.AccessibilityMask); 656107"];
4267 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 656108"];
4268 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 656109"];
4269 [label="_declModifiers 656110"];
4270 [label="var specialType = access == (int)DeclarationModifiers.Public\n                ? MakeSpecialType()\n                : SpecialType.None; 656111"];
4271 [label="access == (int)DeclarationModifiers.Public 656112"];
4272 [label="_flags = new Flags(specialType, typeKind); 656113"];
4273 [label="_flags = new Flags(specialType, typeKind); 656114"];
4274 [label="_flags = new Flags(specialType, typeKind); 656115"];
4275 [label="new Flags(specialType, typeKind) 656116"];
4276 [label="param Flags(SpecialType specialType) 656117"];
4277 [label="param Flags(TypeKind typeKind) 656118"];
4278 [label="param Flags(this) 656119"];
4279 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 656120"];
4280 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 656121"];
4281 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 656122"];
4282 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 656123"];
4283 [label="_flags = specialTypeInt | typeKindInt; 656124"];
4284 [label="_flags 656125"];
4285 [label="_flags 656126"];
4286 [label="this.ContainingType 656127"];
4287 [label="get\n            {\n                return _containingSymbol as NamedTypeSymbol;\n            } 656128"];
4288 [label="return _containingSymbol as NamedTypeSymbol; 656129"];
4289 [label="var containingType = this.ContainingType; 656130"];
4290 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 656131"];
4291 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 656132"];
4292 [label="state.NotePartComplete(CompletionPart.TypeArguments); 656133"];
4293 [label="state.NotePartComplete(CompletionPart.TypeArguments) 656134"];
4294 [label="param NotePartComplete(CompletionPart part) 656135"];
4295 [label="_lazyCustomAttributesBag 656136"];
4296 [label="_lazyDocComment 656137"];
4297 [label="_lazyExpandedDocComment 656138"];
4298 [label="_lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.Unknown 656139"];
4299 [label="_lazyDeclaredBases 656140"];
4300 [label="_lazyBaseType = ErrorTypeSymbol.UnknownResultType 656141"];
4301 [label="_lazyEnumValueField 656142"];
4302 [label="_lazyEnumUnderlyingType = ErrorTypeSymbol.UnknownResultType 656143"];
4303 [label="switch (declaration.Kind)\n            {\n                case DeclarationKind.Struct:\n                case DeclarationKind.Interface:\n                case DeclarationKind.Enum:\n                case DeclarationKind.Delegate:\n                case DeclarationKind.Class:\n                case DeclarationKind.Record:\n                    break;\n                default:\n                    Debug.Assert(false, 'bad declaration kind');\n                    break;\n            } 656144"];
4304 [label="containingSymbol.Kind 656145"];
4305 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 656146"];
4306 [label="if (containingSymbol.Kind == SymbolKind.NamedType)\n            {\n                // Nested types are never unified.\n                _lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.False;\n            } 656147"];
4307 [label="get\n            {\n                return declaration.Name;\n            } 656148"];
4308 [label="return declaration.Name; 656149"];
4309 [label="param BuildSymbol(this) 656150"];
4310 [label="param SourceNamedTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 656151"];
4311 [label="param SourceNamedTypeSymbol(TupleExtraData tupleData = null) 656152"];
4312 [label="containingSymbol 656153"];
4313 [label="tupleData 656154"];
4314 [label="param SourceMemberContainerTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 656155"];
4315 [label="param SourceMemberContainerTypeSymbol(TupleExtraData? tupleData = null) 656156"];
4316 [label="tupleData 656157"];
4317 [label="_lazyTupleData 656158"];
4318 [label="_declModifiers 656159"];
4319 [label="_containingSymbol 656160"];
4320 [label="declaration 656161"];
4321 [label="_lazyDeclaredMembersAndInitializers = DeclaredMembersAndInitializers.UninitializedSentinel 656162"];
4322 [label="_lazyMembersAndInitializers 656163"];
4323 [label="_lazyMembersDictionary 656164"];
4324 [label="_lazyEarlyAttributeDecodingMembersDictionary 656165"];
4325 [label="_lazyTypeMembers 656166"];
4326 [label="_lazyKnownCircularStruct 656167"];
4327 [label="_lazyLexicalSortKey = LexicalSortKey.NotInitialized 656168"];
4328 [label="_lazyContainsExtensionMethods 656169"];
4329 [label="_lazyAnyMemberHasAttributes 656170"];
4330 [label="_containingSymbol 656171"];
4331 [label="return TypeKind.Struct; 656172"];
4332 [label="param MakeModifiers(DiagnosticBag diagnostics) 656173"];
4333 [label="this.ContainingSymbol 656174"];
4334 [label="get\n            {\n                return _containingSymbol;\n            } 656175"];
4335 [label="return _containingSymbol; 656176"];
4336 [label="Symbol containingSymbol = this.ContainingSymbol; 656177"];
4337 [label="DeclarationModifiers defaultAccess; 656178"];
4338 [label="var allowedModifiers = DeclarationModifiers.AccessibilityMask; 656179"];
4339 [label="containingSymbol.Kind 656180"];
4340 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 656181"];
4341 [label="if (containingSymbol.Kind == SymbolKind.Namespace)\n            {\n                defaultAccess = DeclarationModifiers.Internal;\n            }\n            else\n            {\n                allowedModifiers |= DeclarationModifiers.New;\n\n                if (((NamedTypeSymbol)containingSymbol).IsInterface)\n                {\n                    defaultAccess = DeclarationModifiers.Public;\n                }\n                else\n                {\n                    defaultAccess = DeclarationModifiers.Private;\n                }\n            } 656182"];
4342 [label="defaultAccess = DeclarationModifiers.Internal; 656183"];
4343 [label="allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Ref | DeclarationModifiers.ReadOnly | DeclarationModifiers.Unsafe; 656184"];
4344 [label="allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Ref | DeclarationModifiers.ReadOnly | DeclarationModifiers.Unsafe; 656185"];
4345 [label="bool modifierErrors; 656186"];
4346 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 656187"];
4347 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 656188"];
4348 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 656189"];
4349 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 656190"];
4350 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers defaultAccess) 656191"];
4351 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers allowedModifiers) 656192"];
4352 [label="param MakeAndCheckTypeModifiers(DiagnosticBag diagnostics) 656193"];
4353 [label="param MakeAndCheckTypeModifiers(out bool modifierErrors) 656194"];
4354 [label="var result = DeclarationModifiers.Unset; 656195"];
4355 [label="var missingPartial = false; 656196"];
4356 [label="param CheckModifiers(DeclarationModifiers allowedModifiers) 656197"];
4357 [label="param CheckModifiers(DiagnosticBag diagnostics) 656198"];
4358 [label="param CheckModifiers(out bool modifierErrors) 656199"];
4359 [label="DeclarationModifiers errorModifiers = modifiers & ~allowedModifiers; 656200"];
4360 [label="DeclarationModifiers result = modifiers & allowedModifiers; 656201"];
4361 [label="while (errorModifiers != DeclarationModifiers.None)\n            {\n                DeclarationModifiers oneError = errorModifiers & ~(errorModifiers - 1);\n                Debug.Assert(oneError != DeclarationModifiers.None);\n                errorModifiers = errorModifiers & ~oneError;\n\n                switch (oneError)\n                {\n                    case DeclarationModifiers.Partial:\n                        // Provide a specialized error message in the case of partial.\n                        ReportPartialError(errorLocation, diagnostics, modifierTokens);\n                        break;\n\n                    default:\n                        diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, ConvertSingleModifierToSyntaxText(oneError));\n                        break;\n                }\n\n                modifierErrors = true;\n            } 656202"];
4362 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 656203"];
4363 [label="return result; 656204"];
4364 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 656205"];
4365 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 656206"];
4366 [label="param CheckAccessibility(DeclarationModifiers modifiers) 656207"];
4367 [label="param CheckAccessibility(Symbol symbol) 656208"];
4368 [label="if (!IsValidAccessibility(modifiers))\n            {\n                // error CS0107: More than one protection modifier\n                return new CSDiagnosticInfo(ErrorCode.ERR_BadMemberProtection);\n            } 656209"];
4369 [label="param IsValidAccessibility(DeclarationModifiers modifiers) 656210"];
4370 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                case DeclarationModifiers.Private:\n                case DeclarationModifiers.Protected:\n                case DeclarationModifiers.Internal:\n                case DeclarationModifiers.Public:\n                case DeclarationModifiers.ProtectedInternal:\n                case DeclarationModifiers.PrivateProtected:\n                    return true;\n\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return false;\n            } 656211"];
4371 [label="return true; 656212"];
4372 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656213"];
4373 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 656214"];
4374 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 656215"];
4375 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                } 656216"];
4376 [label="if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                } 656217"];
4377 [label="result = mods; 656218"];
4378 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 656219"];
4379 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 656220"];
4380 [label="if (missingPartial)\n            {\n                if ((result & DeclarationModifiers.Partial) == 0)\n                {\n                    // duplicate definitions\n                    switch (this.ContainingSymbol.Kind)\n                    {\n                        case SymbolKind.Namespace:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, declaration.Declarations[i].NameLocation, this.Name, this.ContainingSymbol);\n                                modifierErrors = true;\n                            }\n                            break;\n\n                        case SymbolKind.NamedType:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                if (ContainingType!.Locations.Length == 1 || ContainingType.IsPartial())\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateNameInClass, declaration.Declarations[i].NameLocation, this.ContainingSymbol, this.Name);\n                                modifierErrors = true;\n                            }\n                            break;\n                    }\n                }\n                else\n                {\n                    for (var i = 0; i < partCount; i++)\n                    {\n                        var singleDeclaration = declaration.Declarations[i];\n                        var mods = singleDeclaration.Modifiers;\n                        if ((mods & DeclarationModifiers.Partial) == 0)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_MissingPartial, singleDeclaration.NameLocation, this.Name);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n            } 656221"];
4381 [label="this.Name 656222"];
4382 [label="get\n            {\n                return declaration.Name;\n            } 656223"];
4383 [label="return declaration.Name; 656224"];
4384 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 656225"];
4385 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 656226"];
4386 [label="return result; 656227"];
4387 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 656228"];
4388 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 656229"];
4389 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics) 656230"];
4390 [label="param CheckUnsafeModifier(this Symbol symbol) 656231"];
4391 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 656232"];
4392 [label="param CheckUnsafeModifier(Location errorLocation) 656233"];
4393 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 656234"];
4394 [label="if (((modifiers & DeclarationModifiers.Unsafe) == DeclarationModifiers.Unsafe) && !symbol.CompilationAllowsUnsafe())\n            {\n                Debug.Assert(errorLocation != null);\n                diagnostics.Add(ErrorCode.ERR_IllegalUnsafe, errorLocation);\n            } 656235"];
4395 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 656236"];
4396 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 656237"];
4397 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 656238"];
4398 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 656239"];
4399 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 656240"];
4400 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 656241"];
4401 [label="switch (typeKind)\n            {\n                case TypeKind.Interface:\n                    mods |= DeclarationModifiers.Abstract;\n                    break;\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n                case TypeKind.Delegate:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n            } 656242"];
4402 [label="mods |= DeclarationModifiers.Sealed; 656243"];
4403 [label="return mods; 656244"];
4404 [label="int access = (int)(modifiers & DeclarationModifiers.AccessibilityMask); 656245"];
4405 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 656246"];
4406 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 656247"];
4407 [label="_declModifiers 656248"];
4408 [label="var specialType = access == (int)DeclarationModifiers.Public\n                ? MakeSpecialType()\n                : SpecialType.None; 656249"];
4409 [label="access == (int)DeclarationModifiers.Public 656250"];
4410 [label="MakeSpecialType() 656251"];
4411 [label="param MakeSpecialType(this) 656252"];
4412 [label="ContainingSymbol 656253"];
4413 [label="get\n            {\n                return _containingSymbol;\n            } 656254"];
4414 [label="return _containingSymbol; 656255"];
4415 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 656256"];
4416 [label="ContainingSymbol.Kind 656257"];
4417 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 656258"];
4418 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 656259"];
4419 [label="ContainingSymbol 656260"];
4420 [label="get\n            {\n                return _containingSymbol;\n            } 656261"];
4421 [label="return _containingSymbol; 656262"];
4422 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 656263"];
4423 [label="ContainingSymbol.ContainingAssembly 656264"];
4424 [label="=> _module.ContainingAssembly 656265"];
4425 [label="_module.ContainingAssembly 656266"];
4426 [label="get\n            {\n                return _assemblySymbol;\n            } 656267"];
4427 [label="return _assemblySymbol; 656268"];
4428 [label="ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes 656269"];
4429 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 656270"];
4430 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 656271"];
4431 [label="return SpecialType.None; 656272"];
4432 [label="_flags = new Flags(specialType, typeKind); 656273"];
4433 [label="_flags = new Flags(specialType, typeKind); 656274"];
4434 [label="_flags = new Flags(specialType, typeKind); 656275"];
4435 [label="new Flags(specialType, typeKind) 656276"];
4436 [label="param Flags(SpecialType specialType) 656277"];
4437 [label="param Flags(TypeKind typeKind) 656278"];
4438 [label="param Flags(this) 656279"];
4439 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 656280"];
4440 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 656281"];
4441 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 656282"];
4442 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 656283"];
4443 [label="_flags = specialTypeInt | typeKindInt; 656284"];
4444 [label="_flags 656285"];
4445 [label="_flags 656286"];
4446 [label="this.ContainingType 656287"];
4447 [label="get\n            {\n                return _containingSymbol as NamedTypeSymbol;\n            } 656288"];
4448 [label="return _containingSymbol as NamedTypeSymbol; 656289"];
4449 [label="var containingType = this.ContainingType; 656290"];
4450 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 656291"];
4451 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 656292"];
4452 [label="state.NotePartComplete(CompletionPart.TypeArguments); 656293"];
4453 [label="state.NotePartComplete(CompletionPart.TypeArguments) 656294"];
4454 [label="param NotePartComplete(CompletionPart part) 656295"];
4455 [label="_lazyCustomAttributesBag 656296"];
4456 [label="_lazyDocComment 656297"];
4457 [label="_lazyExpandedDocComment 656298"];
4458 [label="_lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.Unknown 656299"];
4459 [label="_lazyDeclaredBases 656300"];
4460 [label="_lazyBaseType = ErrorTypeSymbol.UnknownResultType 656301"];
4461 [label="_lazyEnumValueField 656302"];
4462 [label="_lazyEnumUnderlyingType = ErrorTypeSymbol.UnknownResultType 656303"];
4463 [label="switch (declaration.Kind)\n            {\n                case DeclarationKind.Struct:\n                case DeclarationKind.Interface:\n                case DeclarationKind.Enum:\n                case DeclarationKind.Delegate:\n                case DeclarationKind.Class:\n                case DeclarationKind.Record:\n                    break;\n                default:\n                    Debug.Assert(false, 'bad declaration kind');\n                    break;\n            } 656304"];
4464 [label="containingSymbol.Kind 656305"];
4465 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 656306"];
4466 [label="if (containingSymbol.Kind == SymbolKind.NamedType)\n            {\n                // Nested types are never unified.\n                _lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.False;\n            } 656307"];
4467 [label="get\n            {\n                return declaration.Name;\n            } 656308"];
4468 [label="return declaration.Name; 656309"];
4469 [label="ImmutableArray<NamespaceOrTypeSymbol> members; 656310"];
4470 [label="members 656311"];
4471 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656312"];
4472 [label="return SymbolKind.NamedType; 656313"];
4473 [label="ImmutableArray<NamespaceOrTypeSymbol> members; 656314"];
4474 [label="members 656315"];
4475 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656316"];
4476 [label="param CheckMembers(NamespaceSymbol @namespace) 656317"];
4477 [label="param CheckMembers(DiagnosticBag diagnostics) 656318"];
4478 [label="var memberOfArity = new Symbol[10]; 656319"];
4479 [label="MergedNamespaceSymbol mergedAssemblyNamespace = null; 656320"];
4480 [label="@namespace.ContainingAssembly 656321"];
4481 [label="=> _module.ContainingAssembly 656322"];
4482 [label="_module.ContainingAssembly 656323"];
4483 [label="get\n            {\n                return _assemblySymbol;\n            } 656324"];
4484 [label="return _assemblySymbol; 656325"];
4485 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 656326"];
4486 [label="@namespace.ContainingAssembly.Modules 656327"];
4487 [label="get\n            {\n                return _modules;\n            } 656328"];
4488 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 656329"];
4489 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 656330"];
4490 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 656331"];
4491 [label="var nts = symbol as NamedTypeSymbol; 656332"];
4492 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 656333"];
4493 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 656334"];
4494 [label="((object)nts != null) 656335"];
4495 [label="nts.Arity 656336"];
4496 [label="get\n            {\n                return declaration.Arity;\n            } 656337"];
4497 [label="return declaration.Arity; 656338"];
4498 [label="if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    } 656339"];
4499 [label="var other = memberOfArity[arity]; 656340"];
4500 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 656341"];
4501 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 656342"];
4502 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 656343"];
4503 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 656344"];
4504 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 656345"];
4505 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 656346"];
4506 [label="memberOfArity[arity] 656347"];
4507 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 656348"];
4508 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 656349"];
4509 [label="nts.DeclaredAccessibility 656350"];
4510 [label="get\n            {\n                return ModifierUtils.EffectiveAccessibility(_declModifiers);\n            } 656351"];
4511 [label="return ModifierUtils.EffectiveAccessibility(_declModifiers); 656352"];
4512 [label="ModifierUtils.EffectiveAccessibility(_declModifiers) 656353"];
4513 [label="param EffectiveAccessibility(DeclarationModifiers modifiers) 656354"];
4514 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                    return Accessibility.NotApplicable; // for explicit interface implementation\n                case DeclarationModifiers.Private:\n                    return Accessibility.Private;\n                case DeclarationModifiers.Protected:\n                    return Accessibility.Protected;\n                case DeclarationModifiers.Internal:\n                    return Accessibility.Internal;\n                case DeclarationModifiers.Public:\n                    return Accessibility.Public;\n                case DeclarationModifiers.ProtectedInternal:\n                    return Accessibility.ProtectedOrInternal;\n                case DeclarationModifiers.PrivateProtected:\n                    return Accessibility.ProtectedAndInternal;\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return Accessibility.Public;\n            } 656355"];
4515 [label="return Accessibility.Public; 656356"];
4516 [label="Accessibility declaredAccessibility = nts.DeclaredAccessibility; 656357"];
4517 [label="if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        } 656358"];
4518 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 656359"];
4519 [label="if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    } 656360"];
4520 [label="var other = memberOfArity[arity]; 656361"];
4521 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 656362"];
4522 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 656363"];
4523 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 656364"];
4524 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 656365"];
4525 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 656366"];
4526 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 656367"];
4527 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 656368"];
4528 [label="nts.DeclaredAccessibility 656369"];
4529 [label="get\n            {\n                return ModifierUtils.EffectiveAccessibility(_declModifiers);\n            } 656370"];
4530 [label="return ModifierUtils.EffectiveAccessibility(_declModifiers); 656371"];
4531 [label="ModifierUtils.EffectiveAccessibility(_declModifiers) 656372"];
4532 [label="param EffectiveAccessibility(DeclarationModifiers modifiers) 656373"];
4533 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                    return Accessibility.NotApplicable; // for explicit interface implementation\n                case DeclarationModifiers.Private:\n                    return Accessibility.Private;\n                case DeclarationModifiers.Protected:\n                    return Accessibility.Protected;\n                case DeclarationModifiers.Internal:\n                    return Accessibility.Internal;\n                case DeclarationModifiers.Public:\n                    return Accessibility.Public;\n                case DeclarationModifiers.ProtectedInternal:\n                    return Accessibility.ProtectedOrInternal;\n                case DeclarationModifiers.PrivateProtected:\n                    return Accessibility.ProtectedAndInternal;\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return Accessibility.Public;\n            } 656374"];
4534 [label="return Accessibility.Internal; 656375"];
4535 [label="Accessibility declaredAccessibility = nts.DeclaredAccessibility; 656376"];
4536 [label="if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        } 656377"];
4537 [label="return Accessibility.Public; 656378"];
4538 [label="Accessibility declaredAccessibility = nts.DeclaredAccessibility; 656379"];
4539 [label="if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        } 656380"];
4540 [label="this.Kind 656381"];
4541 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 656382"];
4542 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 656383"];
4543 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 656384"];
4544 [label="RegisterDeclaredCorTypes() 656385"];
4545 [label="param RegisterDeclaredCorTypes(this) 656386"];
4546 [label="ContainingAssembly 656387"];
4547 [label="=> _module.ContainingAssembly 656388"];
4548 [label="_module.ContainingAssembly 656389"];
4549 [label="get\n            {\n                return _assemblySymbol;\n            } 656390"];
4550 [label="return _assemblySymbol; 656391"];
4551 [label="AssemblySymbol containingAssembly = ContainingAssembly; 656392"];
4552 [label="containingAssembly.KeepLookingForDeclaredSpecialTypes 656393"];
4553 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 656394"];
4554 [label="if (containingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                // Register newly declared COR types\n                foreach (var array in _nameToMembersMap.Values)\n                {\n                    foreach (var member in array)\n                    {\n                        var type = member as NamedTypeSymbol;\n\n                        if ((object)type != null && type.SpecialType != SpecialType.None)\n                        {\n                            containingAssembly.RegisterDeclaredSpecialType(type);\n\n                            if (!containingAssembly.KeepLookingForDeclaredSpecialTypes)\n                            {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } 656395"];
4555 [label="RegisterDeclaredCorTypes(); 656396"];
4556 [label="Debug.Assert(wasSetThisThread); 656397"];
4557 [label="var members = StaticCast<Symbol>.From(this.GetNameToMembersMap().Flatten(null)); 656398"];
4558 [label="var members = StaticCast<Symbol>.From(this.GetNameToMembersMap().Flatten(null)); 656399"];
4559 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyAllMembers, members); 656400"];
4560 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyAllMembers, members); 656401"];
4561 [label="result = _lazyAllMembers; 656402"];
4562 [label="return result.ConditionallyDeOrder(); 656403"];
4563 [label="var allMembers = this.GetMembersUnordered(); 656404"];
4564 [label="if (allMembers.Length >= 2)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyAllMembers, allMembers);\n                } 656405"];
4565 [label="if (allMembers.Length >= 2)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyAllMembers, allMembers);\n                } 656406"];
4566 [label="allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance); 656407"];
4567 [label="allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance); 656408"];
4568 [label="param ==(Symbol left) 656409"];
4569 [label="param ==(Symbol right) 656410"];
4570 [label="if (right is null)\n            {\n                return left is null;\n            } 656411"];
4571 [label="return (object)left == (object)right || right.Equals(left); 656412"];
4572 [label="return (object)left == (object)right || right.Equals(left); 656413"];
4573 [label="right.Equals(left) 656414"];
4574 [label="param Equals(object obj) 656415"];
4575 [label="param Equals(this) 656416"];
4576 [label="return this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind); 656417"];
4577 [label="return this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind); 656418"];
4578 [label="this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind) 656419"];
4579 [label="param Equals(Symbol other) 656420"];
4580 [label="param Equals(TypeCompareKind compareKind) 656421"];
4581 [label="param Equals(this) 656422"];
4582 [label="var t2 = other as TypeSymbol; 656423"];
4583 [label="if (t2 is null)\n            {\n                return false;\n            } 656424"];
4584 [label="return this.Equals(t2, compareKind); 656425"];
4585 [label="return this.Equals(t2, compareKind); 656426"];
4586 [label="this.Equals(t2, compareKind) 656427"];
4587 [label="param Equals(TypeSymbol t2) 656428"];
4588 [label="param Equals(TypeCompareKind comparison) 656429"];
4589 [label="param Equals(this) 656430"];
4590 [label="t2 is NativeIntegerTypeSymbol 656431"];
4591 [label="return t2 is NativeIntegerTypeSymbol ?\n                ((NativeIntegerTypeSymbol)t2).Equals(this, comparison) :\n                base.Equals(t2, comparison); 656432"];
4592 [label="return t2 is NativeIntegerTypeSymbol ?\n                ((NativeIntegerTypeSymbol)t2).Equals(this, comparison) :\n                base.Equals(t2, comparison); 656433"];
4593 [label="base.Equals(t2, comparison) 656434"];
4594 [label="param Equals(TypeSymbol t2) 656435"];
4595 [label="param Equals(TypeCompareKind comparison) 656436"];
4596 [label="param Equals(this) 656437"];
4597 [label="if ((object)t2 == this) return true; 656438"];
4598 [label="if ((object)t2 == null) return false; 656439"];
4599 [label="if ((object)t2 == null) return false; 656440"];
4600 [label="if ((comparison & TypeCompareKind.IgnoreDynamic) != 0)\n            {\n                if (t2.TypeKind == TypeKind.Dynamic)\n                {\n                    // if ignoring dynamic, then treat dynamic the same as the type 'object'\n                    if (this.SpecialType == SpecialType.System_Object)\n                    {\n                        return true;\n                    }\n                }\n            } 656441"];
4601 [label="if ((comparison & TypeCompareKind.IgnoreDynamic) != 0)\n            {\n                if (t2.TypeKind == TypeKind.Dynamic)\n                {\n                    // if ignoring dynamic, then treat dynamic the same as the type 'object'\n                    if (this.SpecialType == SpecialType.System_Object)\n                    {\n                        return true;\n                    }\n                }\n            } 656442"];
4602 [label="NamedTypeSymbol other = t2 as NamedTypeSymbol; 656443"];
4603 [label="if ((object)other == null) return false; 656444"];
4604 [label="if ((object)other == null) return false; 656445"];
4605 [label="this.OriginalDefinition 656446"];
4606 [label="get\n            {\n                return this;\n            } 656447"];
4607 [label="return this; 656448"];
4608 [label="var thisOriginalDefinition = this.OriginalDefinition; 656449"];
4609 [label="other.OriginalDefinition 656450"];
4610 [label="get\n            {\n                return this;\n            } 656451"];
4611 [label="return this; 656452"];
4612 [label="var otherOriginalDefinition = other.OriginalDefinition; 656453"];
4613 [label="bool thisIsOriginalDefinition = ((object)this == (object)thisOriginalDefinition); 656454"];
4614 [label="bool otherIsOriginalDefinition = ((object)other == (object)otherOriginalDefinition); 656455"];
4615 [label="if (thisIsOriginalDefinition && otherIsOriginalDefinition)\n            {\n                // If we continue, we either return false, or get into a cycle.\n                return false;\n            } 656456"];
4616 [label="return false; 656457"];
4617 [label="param GetLexicalSortKey(this) 656458"];
4618 [label="_lazyLexicalSortKey.IsInitialized 656459"];
4619 [label="get\n            {\n                return Volatile.Read(ref _position) >= 0;\n            } 656460"];
4620 [label="return Volatile.Read(ref _position) >= 0; 656461"];
4621 [label="return Volatile.Read(ref _position) >= 0; 656462"];
4622 [label="if (!_lazyLexicalSortKey.IsInitialized)\n            {\n                _lazyLexicalSortKey.SetFrom(declaration.GetLexicalSortKey(this.DeclaringCompilation));\n            } 656463"];
4623 [label="this.DeclaringCompilation 656464"];
4624 [label="this.Kind 656465"];
4625 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656466"];
4626 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 656467"];
4627 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 656468"];
4628 [label="this.ContainingSymbol 656469"];
4629 [label="get\n            {\n                return _containingSymbol;\n            } 656470"];
4630 [label="return _containingSymbol; 656471"];
4631 [label="var container = this.ContainingSymbol; 656472"];
4632 [label="return (object)container != null ? container.ContainingModule : null; 656473"];
4633 [label="return (object)container != null ? container.ContainingModule : null; 656474"];
4634 [label="(object)container != null 656475"];
4635 [label="container.ContainingModule 656476"];
4636 [label="_lazyLexicalSortKey.SetFrom(declaration.GetLexicalSortKey(this.DeclaringCompilation)); 656477"];
4637 [label="_lazyLexicalSortKey.SetFrom(declaration.GetLexicalSortKey(this.DeclaringCompilation)); 656478"];
4638 [label="param LexicalSortKey(Location location) 656479"];
4639 [label="param LexicalSortKey(CSharpCompilation compilation) 656480"];
4640 [label="param LexicalSortKey(this) 656481"];
4641 [label="location.SourceTree 656482"];
4642 [label="location.SourceSpan.Start 656483"];
4643 [label="compilation 656484"];
4644 [label="param LexicalSortKey(this) 656485"];
4645 [label="param LexicalSortKey(SyntaxTree tree) 656486"];
4646 [label="param LexicalSortKey(int position) 656487"];
4647 [label="param LexicalSortKey(CSharpCompilation compilation) 656488"];
4648 [label="param LexicalSortKey(this) 656489"];
4649 [label="null 656490"];
4650 [label="tree == null 656491"];
4651 [label="tree 656492"];
4652 [label="compilation.GetSyntaxTreeOrdinal(tree) 656493"];
4653 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 656494"];
4654 [label="param GetSyntaxTreeOrdinal(this) 656495"];
4655 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 656496"];
4656 [label="this.ContainsSyntaxTree(tree) 656497"];
4657 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 656498"];
4658 [label="param ContainsSyntaxTree(this) 656499"];
4659 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 656500"];
4660 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 656501"];
4661 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 656502"];
4662 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 656503"];
4663 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 656504"];
4664 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 656505"];
4665 [label="position 656506"];
4666 [label="param LexicalSortKey(int treeOrdinal) 656507"];
4667 [label="param LexicalSortKey(int position) 656508"];
4668 [label="param LexicalSortKey(this) 656509"];
4669 [label="Debug.Assert(position >= 0); 656510"];
4670 [label="Debug.Assert(position >= 0); 656511"];
4671 [label="Debug.Assert(treeOrdinal >= 0); 656512"];
4672 [label="Debug.Assert(treeOrdinal >= 0); 656513"];
4673 [label="_treeOrdinal 656514"];
4674 [label="_position 656515"];
4675 [label="_lazyLexicalSortKey.SetFrom(declaration.GetLexicalSortKey(this.DeclaringCompilation)); 656516"];
4676 [label="_lazyLexicalSortKey.SetFrom(declaration.GetLexicalSortKey(this.DeclaringCompilation)) 656517"];
4677 [label="param SetFrom(LexicalSortKey other) 656518"];
4678 [label="param SetFrom(this) 656519"];
4679 [label="other.IsInitialized 656520"];
4680 [label="get\n            {\n                return Volatile.Read(ref _position) >= 0;\n            } 656521"];
4681 [label="Debug.Assert(other.IsInitialized); 656522"];
4682 [label="_treeOrdinal 656523"];
4683 [label="Volatile.Write(ref _position, other._position); 656524"];
4684 [label="Volatile.Write(ref _position, other._position); 656525"];
4685 [label="Volatile.Write(ref _position, other._position); 656526"];
4686 [label="return _lazyLexicalSortKey; 656527"];
4687 [label="allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance); 656528"];
4688 [label="this.Kind 656529"];
4689 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656530"];
4690 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 656531"];
4691 [label="Debug.Assert(position >= 0); 656532"];
4692 [label="Debug.Assert(treeOrdinal >= 0); 656533"];
4693 [label="Debug.Assert(other.IsInitialized); 656534"];
4694 [label="this.Kind 656535"];
4695 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656536"];
4696 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 656537"];
4697 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 656538"];
4698 [label="this.ContainingSymbol 656539"];
4699 [label="get\n            {\n                return _containingSymbol;\n            } 656540"];
4700 [label="return (object)container != null ? container.ContainingModule : null; 656541"];
4701 [label="param Compare(LexicalSortKey xSortKey) 656542"];
4702 [label="param Compare(LexicalSortKey ySortKey) 656543"];
4703 [label="int comparison; 656544"];
4704 [label="xSortKey.TreeOrdinal 656545"];
4705 [label="get { return _treeOrdinal; } 656546"];
4706 [label="return _treeOrdinal; 656547"];
4707 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 656548"];
4708 [label="ySortKey.TreeOrdinal 656549"];
4709 [label="get { return _treeOrdinal; } 656550"];
4710 [label="return _treeOrdinal; 656551"];
4711 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 656552"];
4712 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 656553"];
4713 [label="xSortKey.Position 656554"];
4714 [label="get { return _position; } 656555"];
4715 [label="return _position; 656556"];
4716 [label="return xSortKey.Position - ySortKey.Position; 656557"];
4717 [label="ySortKey.Position 656558"];
4718 [label="get { return _position; } 656559"];
4719 [label="return _position; 656560"];
4720 [label="return xSortKey.Position - ySortKey.Position; 656561"];
4721 [label="return xSortKey.Position - ySortKey.Position; 656562"];
4722 [label="return _treeOrdinal; 656563"];
4723 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 656564"];
4724 [label="return _treeOrdinal; 656565"];
4725 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 656566"];
4726 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 656567"];
4727 [label="this.Kind 656568"];
4728 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656569"];
4729 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 656570"];
4730 [label="Debug.Assert(position >= 0); 656571"];
4731 [label="Debug.Assert(treeOrdinal >= 0); 656572"];
4732 [label="Debug.Assert(other.IsInitialized); 656573"];
4733 [label="ImmutableInterlocked.InterlockedExchange(ref _lazyAllMembers, allMembers); 656574"];
4734 [label="ImmutableInterlocked.InterlockedExchange(ref _lazyAllMembers, allMembers); 656575"];
4735 [label="ThreadSafeFlagOperations.Set(ref _flags, LazyAllMembersIsSorted); 656576"];
4736 [label="ThreadSafeFlagOperations.Set(ref _flags, LazyAllMembersIsSorted); 656577"];
4737 [label="return allMembers; 656578"];
4738 [label="CustomAssert.Equal(3, namespaceNS.GetMembers().Length); 656579"];
4739 [label="var igoo = namespaceNS.GetTypeMembers('IGoo').First(); 656580"];
4740 [label="namespaceNS.GetTypeMembers('IGoo') 656581"];
4741 [label="param GetTypeMembers(string name) 656582"];
4742 [label="param GetTypeMembers(this) 656583"];
4743 [label="ImmutableArray<NamedTypeSymbol> members; 656584"];
4744 [label="members 656585"];
4745 [label="this.GetNameToTypeMembersMap() 656586"];
4746 [label="param GetNameToTypeMembersMap(this) 656587"];
4747 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 656588"];
4748 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 656589"];
4749 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 656590"];
4750 [label="GetNameToMembersMap() 656591"];
4751 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 656592"];
4752 [label="GetTypesFromMemberMap(GetNameToMembersMap()) 656593"];
4753 [label="param GetTypesFromMemberMap(Dictionary<string, ImmutableArray<NamespaceOrTypeSymbol>> map) 656594"];
4754 [label="var dictionary = new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(StringOrdinalComparer.Instance); 656595"];
4755 [label="foreach (var kvp in map)\n            {\n                ImmutableArray<NamespaceOrTypeSymbol> members = kvp.Value;\n\n                bool hasType = false;\n                bool hasNamespace = false;\n\n                foreach (var symbol in members)\n                {\n                    if (symbol.Kind == SymbolKind.NamedType)\n                    {\n                        hasType = true;\n                        if (hasNamespace)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(symbol.Kind == SymbolKind.Namespace);\n                        hasNamespace = true;\n                        if (hasType)\n                        {\n                            break;\n                        }\n                    }\n                }\n\n                if (hasType)\n                {\n                    if (hasNamespace)\n                    {\n                        dictionary.Add(kvp.Key, members.OfType<NamedTypeSymbol>().AsImmutable());\n                    }\n                    else\n                    {\n                        dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>());\n                    }\n                }\n            } 656596"];
4756 [label="foreach (var kvp in map)\n            {\n                ImmutableArray<NamespaceOrTypeSymbol> members = kvp.Value;\n\n                bool hasType = false;\n                bool hasNamespace = false;\n\n                foreach (var symbol in members)\n                {\n                    if (symbol.Kind == SymbolKind.NamedType)\n                    {\n                        hasType = true;\n                        if (hasNamespace)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(symbol.Kind == SymbolKind.Namespace);\n                        hasNamespace = true;\n                        if (hasType)\n                        {\n                            break;\n                        }\n                    }\n                }\n\n                if (hasType)\n                {\n                    if (hasNamespace)\n                    {\n                        dictionary.Add(kvp.Key, members.OfType<NamedTypeSymbol>().AsImmutable());\n                    }\n                    else\n                    {\n                        dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>());\n                    }\n                }\n            } 656597"];
4757 [label="ImmutableArray<NamespaceOrTypeSymbol> members = kvp.Value; 656598"];
4758 [label="bool hasType = false; 656599"];
4759 [label="bool hasNamespace = false; 656600"];
4760 [label="foreach (var symbol in members)\n                {\n                    if (symbol.Kind == SymbolKind.NamedType)\n                    {\n                        hasType = true;\n                        if (hasNamespace)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(symbol.Kind == SymbolKind.Namespace);\n                        hasNamespace = true;\n                        if (hasType)\n                        {\n                            break;\n                        }\n                    }\n                } 656601"];
4761 [label="symbol.Kind 656602"];
4762 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656603"];
4763 [label="if (symbol.Kind == SymbolKind.NamedType)\n                    {\n                        hasType = true;\n                        if (hasNamespace)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(symbol.Kind == SymbolKind.Namespace);\n                        hasNamespace = true;\n                        if (hasType)\n                        {\n                            break;\n                        }\n                    } 656604"];
4764 [label="hasType = true; 656605"];
4765 [label="if (hasNamespace)\n                        {\n                            break;\n                        } 656606"];
4766 [label="if (hasType)\n                {\n                    if (hasNamespace)\n                    {\n                        dictionary.Add(kvp.Key, members.OfType<NamedTypeSymbol>().AsImmutable());\n                    }\n                    else\n                    {\n                        dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>());\n                    }\n                } 656607"];
4767 [label="if (hasNamespace)\n                    {\n                        dictionary.Add(kvp.Key, members.OfType<NamedTypeSymbol>().AsImmutable());\n                    }\n                    else\n                    {\n                        dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>());\n                    } 656608"];
4768 [label="dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>()); 656609"];
4769 [label="dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>()); 656610"];
4770 [label="dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>()); 656611"];
4771 [label="bool hasType = false; 656612"];
4772 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656613"];
4773 [label="if (hasNamespace)\n                        {\n                            break;\n                        } 656614"];
4774 [label="return dictionary; 656615"];
4775 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 656616"];
4776 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 656617"];
4777 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 656618"];
4778 [label="return _nameToTypeMembersMap; 656619"];
4779 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 656620"];
4780 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 656621"];
4781 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 656622"];
4782 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 656623"];
4783 [label="this.GetNameToTypeMembersMap().TryGetValue(name, out members) 656624"];
4784 [label="CustomAssert.Equal(namespaceNS, igoo.ContainingSymbol); 656625"];
4785 [label="igoo.ContainingSymbol 656626"];
4786 [label="get\n            {\n                return _containingSymbol;\n            } 656627"];
4787 [label="CustomAssert.Equal(namespaceNS, igoo.ContainingSymbol); 656628"];
4788 [label="CustomAssert.Equal(SymbolKind.NamedType, igoo.Kind); 656629"];
4789 [label="igoo.Kind 656630"];
4790 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656631"];
4791 [label="return SymbolKind.NamedType; 656632"];
4792 [label="CustomAssert.Equal(SymbolKind.NamedType, igoo.Kind); 656633"];
4793 [label="CustomAssert.Equal(TypeKind.Interface, igoo.TypeKind); 656634"];
4794 [label="igoo.TypeKind 656635"];
4795 [label="get\n            {\n                return _flags.TypeKind;\n            } 656636"];
4796 [label="_flags.TypeKind 656637"];
4797 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 656638"];
4798 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 656639"];
4799 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 656640"];
4800 [label="return _flags.TypeKind; 656641"];
4801 [label="CustomAssert.Equal(TypeKind.Interface, igoo.TypeKind); 656642"];
4802 [label="CustomAssert.Equal(Accessibility.Public, igoo.DeclaredAccessibility); 656643"];
4803 [label="igoo.DeclaredAccessibility 656644"];
4804 [label="get\n            {\n                return ModifierUtils.EffectiveAccessibility(_declModifiers);\n            } 656645"];
4805 [label="return ModifierUtils.EffectiveAccessibility(_declModifiers); 656646"];
4806 [label="ModifierUtils.EffectiveAccessibility(_declModifiers) 656647"];
4807 [label="param EffectiveAccessibility(DeclarationModifiers modifiers) 656648"];
4808 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                    return Accessibility.NotApplicable; // for explicit interface implementation\n                case DeclarationModifiers.Private:\n                    return Accessibility.Private;\n                case DeclarationModifiers.Protected:\n                    return Accessibility.Protected;\n                case DeclarationModifiers.Internal:\n                    return Accessibility.Internal;\n                case DeclarationModifiers.Public:\n                    return Accessibility.Public;\n                case DeclarationModifiers.ProtectedInternal:\n                    return Accessibility.ProtectedOrInternal;\n                case DeclarationModifiers.PrivateProtected:\n                    return Accessibility.ProtectedAndInternal;\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return Accessibility.Public;\n            } 656649"];
4809 [label="return Accessibility.Public; 656650"];
4810 [label="CustomAssert.Equal(Accessibility.Public, igoo.DeclaredAccessibility); 656651"];
4811 [label="CustomAssert.Equal(1, igoo.TypeParameters.Length); 656652"];
4812 [label="igoo.TypeParameters 656653"];
4813 [label="get\n            {\n                if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                }\n\n                return _lazyTypeParameters;\n            } 656654"];
4814 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                } 656655"];
4815 [label="var diagnostics = DiagnosticBag.GetInstance(); 656656"];
4816 [label="if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    } 656657"];
4817 [label="if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    } 656658"];
4818 [label="if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    } 656659"];
4819 [label="get\n            {\n                return this.declaration.SyntaxReferences;\n            } 656660"];
4820 [label="return this.declaration.SyntaxReferences; 656661"];
4821 [label="this.Kind 656662"];
4822 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656663"];
4823 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 656664"];
4824 [label="param ReportTypeNamedRecord(string? name) 656665"];
4825 [label="param ReportTypeNamedRecord(CSharpCompilation compilation) 656666"];
4826 [label="param ReportTypeNamedRecord(DiagnosticBag diagnostics) 656667"];
4827 [label="param ReportTypeNamedRecord(Location location) 656668"];
4828 [label="if (name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword) &&\n                compilation.LanguageVersion >= MessageID.IDS_FeatureRecords.RequiredVersion())\n            {\n                diagnostics.Add(ErrorCode.WRN_RecordNamedDisallowed, location, name);\n            } 656669"];
4829 [label="if (name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword) &&\n                compilation.LanguageVersion >= MessageID.IDS_FeatureRecords.RequiredVersion())\n            {\n                diagnostics.Add(ErrorCode.WRN_RecordNamedDisallowed, location, name);\n            } 656670"];
4830 [label="get\n            {\n                return _containingSymbol as NamedTypeSymbol;\n            } 656671"];
4831 [label="return _containingSymbol as NamedTypeSymbol; 656672"];
4832 [label="param TypeParameterBuilder(SyntaxReference syntaxRef) 656673"];
4833 [label="param TypeParameterBuilder(SourceNamedTypeSymbol owner) 656674"];
4834 [label="param TypeParameterBuilder(Location location) 656675"];
4835 [label="param TypeParameterBuilder(this) 656676"];
4836 [label="_syntaxRef 656677"];
4837 [label="_owner 656678"];
4838 [label="_location 656679"];
4839 [label="_syntaxRef 656680"];
4840 [label="Debug.Assert(syntaxRef.GetSyntax().IsKind(SyntaxKind.TypeParameter)); 656681"];
4841 [label="Debug.Assert(syntaxRef.GetSyntax().IsKind(SyntaxKind.TypeParameter)); 656682"];
4842 [label="Debug.Assert(syntaxRef.GetSyntax().IsKind(SyntaxKind.TypeParameter)); 656683"];
4843 [label="_owner 656684"];
4844 [label="_location 656685"];
4845 [label="if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    } 656686"];
4846 [label="param MakeSymbol(int ordinal) 656687"];
4847 [label="param MakeSymbol(IList<TypeParameterBuilder> builders) 656688"];
4848 [label="param MakeSymbol(DiagnosticBag diagnostics) 656689"];
4849 [label="param MakeSymbol(this) 656690"];
4850 [label="var syntaxNode = (TypeParameterSyntax)_syntaxRef.GetSyntax(); 656691"];
4851 [label="var syntaxNode = (TypeParameterSyntax)_syntaxRef.GetSyntax(); 656692"];
4852 [label="var result = new SourceTypeParameterSymbol(\n                _owner,\n                syntaxNode.Identifier.ValueText,\n                ordinal,\n                syntaxNode.VarianceKeyword.VarianceKindFromToken(),\n                ToLocations(builders),\n                ToSyntaxRefs(builders)); 656693"];
4853 [label="var result = new SourceTypeParameterSymbol(\n                _owner,\n                syntaxNode.Identifier.ValueText,\n                ordinal,\n                syntaxNode.VarianceKeyword.VarianceKindFromToken(),\n                ToLocations(builders),\n                ToSyntaxRefs(builders)); 656694"];
4854 [label="syntaxNode.Identifier 656695"];
4855 [label="param ToLocations(IList<TypeParameterBuilder> builders) 656696"];
4856 [label="var arrayBuilder = ArrayBuilder<Location>.GetInstance(builders.Count); 656697"];
4857 [label="foreach (var builder in builders)\n            {\n                arrayBuilder.Add(builder._location);\n            } 656698"];
4858 [label="arrayBuilder.Add(builder._location); 656699"];
4859 [label="arrayBuilder.Add(builder._location); 656700"];
4860 [label="return arrayBuilder.ToImmutableAndFree(); 656701"];
4861 [label="var result = new SourceTypeParameterSymbol(\n                _owner,\n                syntaxNode.Identifier.ValueText,\n                ordinal,\n                syntaxNode.VarianceKeyword.VarianceKindFromToken(),\n                ToLocations(builders),\n                ToSyntaxRefs(builders)); 656702"];
4862 [label="var result = new SourceTypeParameterSymbol(\n                _owner,\n                syntaxNode.Identifier.ValueText,\n                ordinal,\n                syntaxNode.VarianceKeyword.VarianceKindFromToken(),\n                ToLocations(builders),\n                ToSyntaxRefs(builders)); 656703"];
4863 [label="var result = new SourceTypeParameterSymbol(\n                _owner,\n                syntaxNode.Identifier.ValueText,\n                ordinal,\n                syntaxNode.VarianceKeyword.VarianceKindFromToken(),\n                ToLocations(builders),\n                ToSyntaxRefs(builders)); 656704"];
4864 [label="ToSyntaxRefs(builders) 656705"];
4865 [label="param ToSyntaxRefs(IList<TypeParameterBuilder> builders) 656706"];
4866 [label="var arrayBuilder = ArrayBuilder<SyntaxReference>.GetInstance(builders.Count); 656707"];
4867 [label="foreach (var builder in builders)\n            {\n                arrayBuilder.Add(builder._syntaxRef);\n            } 656708"];
4868 [label="foreach (var builder in builders)\n            {\n                arrayBuilder.Add(builder._syntaxRef);\n            } 656709"];
4869 [label="arrayBuilder.Add(builder._syntaxRef); 656710"];
4870 [label="arrayBuilder.Add(builder._syntaxRef); 656711"];
4871 [label="return arrayBuilder.ToImmutableAndFree(); 656712"];
4872 [label="var result = new SourceTypeParameterSymbol(\n                _owner,\n                syntaxNode.Identifier.ValueText,\n                ordinal,\n                syntaxNode.VarianceKeyword.VarianceKindFromToken(),\n                ToLocations(builders),\n                ToSyntaxRefs(builders)); 656713"];
4873 [label="new SourceTypeParameterSymbol(\n                _owner,\n                syntaxNode.Identifier.ValueText,\n                ordinal,\n                syntaxNode.VarianceKeyword.VarianceKindFromToken(),\n                ToLocations(builders),\n                ToSyntaxRefs(builders)) 656714"];
4874 [label="param SourceTypeParameterSymbol(SourceNamedTypeSymbol owner) 656715"];
4875 [label="param SourceTypeParameterSymbol(string name) 656716"];
4876 [label="param SourceTypeParameterSymbol(int ordinal) 656717"];
4877 [label="param SourceTypeParameterSymbol(VarianceKind varianceKind) 656718"];
4878 [label="param SourceTypeParameterSymbol(ImmutableArray<Location> locations) 656719"];
4879 [label="param SourceTypeParameterSymbol(ImmutableArray<SyntaxReference> syntaxRefs) 656720"];
4880 [label="param SourceTypeParameterSymbol(this) 656721"];
4881 [label="name 656722"];
4882 [label="ordinal 656723"];
4883 [label="locations 656724"];
4884 [label="syntaxRefs 656725"];
4885 [label="param SourceTypeParameterSymbol(this) 656726"];
4886 [label="param SourceTypeParameterSymbolBase(string name) 656727"];
4887 [label="param SourceTypeParameterSymbolBase(int ordinal) 656728"];
4888 [label="param SourceTypeParameterSymbolBase(ImmutableArray<Location> locations) 656729"];
4889 [label="param SourceTypeParameterSymbolBase(ImmutableArray<SyntaxReference> syntaxRefs) 656730"];
4890 [label="param SourceTypeParameterSymbolBase(this) 656731"];
4891 [label="param SourceTypeParameterSymbolBase(this) 656732"];
4892 [label="param TypeParameterSymbol(this) 656733"];
4893 [label="param TypeParameterSymbol(this) 656734"];
4894 [label="_lazyAdapter 656735"];
4895 [label="_name 656736"];
4896 [label="_ordinal 656737"];
4897 [label="_lazyCustomAttributesBag 656738"];
4898 [label="new TypeParameterBounds() 656739"];
4899 [label="param TypeParameterBounds(this) 656740"];
4900 [label="EffectiveBaseClass 656741"];
4901 [label="DeducedBaseType 656742"];
4902 [label="EffectiveBaseClass = null!; 656743"];
4903 [label="EffectiveBaseClass 656744"];
4904 [label="DeducedBaseType = null!; 656745"];
4905 [label="DeducedBaseType 656746"];
4906 [label="Unset = new TypeParameterBounds() 656747"];
4907 [label="_lazyBounds = TypeParameterBounds.Unset 656748"];
4908 [label="Debug.Assert(!syntaxRefs.IsEmpty); 656749"];
4909 [label="_name 656750"];
4910 [label="_ordinal 656751"];
4911 [label="_locations 656752"];
4912 [label="_syntaxRefs 656753"];
4913 [label="_owner 656754"];
4914 [label="_varianceKind 656755"];
4915 [label="_owner 656756"];
4916 [label="_varianceKind 656757"];
4917 [label="result.Name 656758"];
4918 [label="get\n            {\n                return _name;\n            } 656759"];
4919 [label="return _name; 656760"];
4920 [label="if (result.Name == result.ContainingSymbol.Name)\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeVariableSameAsParent, result.Locations[0], result.Name);\n            } 656761"];
4921 [label="result.ContainingSymbol 656762"];
4922 [label="get { return _owner; } 656763"];
4923 [label="return _owner; 656764"];
4924 [label="if (result.Name == result.ContainingSymbol.Name)\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeVariableSameAsParent, result.Locations[0], result.Name);\n            } 656765"];
4925 [label="result.ContainingSymbol.Name 656766"];
4926 [label="get\n            {\n                return declaration.Name;\n            } 656767"];
4927 [label="return declaration.Name; 656768"];
4928 [label="if (result.Name == result.ContainingSymbol.Name)\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeVariableSameAsParent, result.Locations[0], result.Name);\n            } 656769"];
4929 [label="return result; 656770"];
4930 [label="if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    } 656771"];
4931 [label="AddDeclarationDiagnostics(diagnostics); 656772"];
4932 [label="AddDeclarationDiagnostics(diagnostics) 656773"];
4933 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 656774"];
4934 [label="param AddDeclarationDiagnostics(this) 656775"];
4935 [label="ContainingSymbol 656776"];
4936 [label="get\n            {\n                return _containingSymbol;\n            } 656777"];
4937 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 656778"];
4938 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 656779"];
4939 [label="AddDeclarationDiagnostics(diagnostics); 656780"];
4940 [label="diagnostics.Free(); 656781"];
4941 [label="return _lazyTypeParameters; 656782"];
4942 [label="CustomAssert.Equal(1, igoo.TypeParameters.Length); 656783"];
4943 [label="CustomAssert.Equal('T', igoo.TypeParameters[0].Name); 656784"];
4944 [label="igoo.TypeParameters 656785"];
4945 [label="get\n            {\n                if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                }\n\n                return _lazyTypeParameters;\n            } 656786"];
4946 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                } 656787"];
4947 [label="return _lazyTypeParameters; 656788"];
4948 [label="CustomAssert.Equal('T', igoo.TypeParameters[0].Name); 656789"];
4949 [label="igoo.TypeParameters[0].Name 656790"];
4950 [label="get\n            {\n                return _name;\n            } 656791"];
4951 [label="return _name; 656792"];
4952 [label="CustomAssert.Equal(1, igoo.TypeArguments().Length); 656793"];
4953 [label="CustomAssert.Equal(1, igoo.TypeArguments().Length); 656794"];
4954 [label="igoo.TypeArguments() 656795"];
4955 [label="param TypeArguments(this NamedTypeSymbol symbol) 656796"];
4956 [label="symbol.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 656797"];
4957 [label="get\n            {\n                return GetTypeParametersAsTypeArguments();\n            } 656798"];
4958 [label="GetTypeParametersAsTypeArguments() 656799"];
4959 [label="param GetTypeParametersAsTypeArguments(this) 656800"];
4960 [label="this.TypeParameters 656801"];
4961 [label="get\n            {\n                if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                }\n\n                return _lazyTypeParameters;\n            } 656802"];
4962 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                } 656803"];
4963 [label="return _lazyTypeParameters; 656804"];
4964 [label="return TypeMap.TypeParametersAsTypeSymbolsWithAnnotations(this.TypeParameters); 656805"];
4965 [label="t => t.Type 656806"];
4966 [label="AsTypeSymbol = t => t.Type 656807"];
4967 [label="ReferenceEqualityComparer.Instance 656808"];
4968 [label="new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(ReferenceEqualityComparer.Instance) 656809"];
4969 [label="s_emptyDictionary =\n            new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(ReferenceEqualityComparer.Instance) 656810"];
4970 [label="new TypeMap() 656811"];
4971 [label="param TypeMap(this) 656812"];
4972 [label="s_emptyDictionary 656813"];
4973 [label="param AbstractTypeParameterMap(SmallDictionary<TypeParameterSymbol, TypeWithAnnotations> mapping) 656814"];
4974 [label="param AbstractTypeParameterMap(this) 656815"];
4975 [label="param AbstractTypeMap(this) 656816"];
4976 [label="Mapping 656817"];
4977 [label="this.Mapping 656818"];
4978 [label="Debug.Assert(s_emptyDictionary.IsEmpty()); 656819"];
4979 [label="s_emptyTypeMap = new TypeMap() 656820"];
4980 [label="TypeMap.TypeParametersAsTypeSymbolsWithAnnotations(this.TypeParameters) 656821"];
4981 [label="param TypeParametersAsTypeSymbolsWithAnnotations(ImmutableArray<TypeParameterSymbol> typeParameters) 656822"];
4982 [label="typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces 656823"];
4983 [label="genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters 656824"];
4984 [label="SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier 656825"];
4985 [label="miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier 656826"];
4986 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) 656827"];
4987 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) 656828"];
4988 [label="DebuggerDisplayFormat = new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) 656829"];
4989 [label="typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces 656830"];
4990 [label="genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters 656831"];
4991 [label="SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier 656832"];
4992 [label="SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier 656833"];
4993 [label="miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier 656834"];
4994 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 656835"];
4995 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 656836"];
4996 [label="TestDisplayFormat = new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 656837"];
4997 [label="return typeParameters.SelectAsArray(static (tp) => TypeWithAnnotations.Create(tp)); 656838"];
4998 [label="return typeParameters.SelectAsArray(static (tp) => TypeWithAnnotations.Create(tp)); 656839"];
4999 [label="param Create(TypeSymbol typeSymbol) 656840"];
5000 [label="param Create(NullableAnnotation nullableAnnotation = NullableAnnotation.Oblivious) 656841"];
5001 [label="param Create(ImmutableArray<CustomModifier> customModifiers = default) 656842"];
5002 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 656843"];
5003 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 656844"];
5004 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 656845"];
5005 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 656846"];
5006 [label="'Expressions' 656847"];
5007 [label="'Linq' 656848"];
5008 [label="'' 656849"];
5009 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 656850"];
5010 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 656851"];
5011 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 656852"];
5012 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 656853"];
5013 [label="s_expressionsNamespaceName = { 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 656854"];
5014 [label="(type, parameter, unused) => type.TypeKind == TypeKind.TypeParameter && (parameter is null || TypeSymbol.Equals(type, parameter, TypeCompareKind.ConsiderEverything2)) 656855"];
5015 [label="s_containsTypeParameterPredicate =\n            (type, parameter, unused) => type.TypeKind == TypeKind.TypeParameter && (parameter is null || TypeSymbol.Equals(type, parameter, TypeCompareKind.ConsiderEverything2)) 656856"];
5016 [label="(type, parameterContainer, unused) => type.TypeKind == TypeKind.TypeParameter && (object)type.ContainingSymbol == (object)parameterContainer 656857"];
5017 [label="s_isTypeParameterWithSpecificContainerPredicate =\n             (type, parameterContainer, unused) => type.TypeKind == TypeKind.TypeParameter && (object)type.ContainingSymbol == (object)parameterContainer 656858"];
5018 [label="(type, parameters, unused) => type.TypeKind == TypeKind.TypeParameter && parameters.Contains((TypeParameterSymbol)type) 656859"];
5019 [label="s_containsTypeParametersPredicate =\n            (type, parameters, unused) => type.TypeKind == TypeKind.TypeParameter && parameters.Contains((TypeParameterSymbol)type) 656860"];
5020 [label="(type, unused1, unused2) => type.TypeKind == TypeKind.Dynamic 656861"];
5021 [label="s_containsDynamicPredicate = (type, unused1, unused2) => type.TypeKind == TypeKind.Dynamic 656862"];
5022 [label="typeSymbol.IsNullableType() 656863"];
5023 [label="param IsNullableType(this TypeSymbol type) 656864"];
5024 [label="type.OriginalDefinition 656865"];
5025 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 656866"];
5026 [label="OriginalTypeSymbolDefinition 656867"];
5027 [label="get\n            {\n                return this.OriginalDefinition;\n            } 656868"];
5028 [label="this.OriginalDefinition 656869"];
5029 [label="get\n            {\n                return this;\n            } 656870"];
5030 [label="return this; 656871"];
5031 [label="return this.OriginalDefinition; 656872"];
5032 [label="return OriginalTypeSymbolDefinition; 656873"];
5033 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 656874"];
5034 [label="type.OriginalDefinition.SpecialType 656875"];
5035 [label="get\n            {\n                return SpecialType.None;\n            } 656876"];
5036 [label="return SpecialType.None; 656877"];
5037 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 656878"];
5038 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 656879"];
5039 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 656880"];
5040 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 656881"];
5041 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 656882"];
5042 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 656883"];
5043 [label="CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()) 656884"];
5044 [label="param CreateNonLazyType(TypeSymbol typeSymbol) 656885"];
5045 [label="param CreateNonLazyType(NullableAnnotation nullableAnnotation) 656886"];
5046 [label="param CreateNonLazyType(ImmutableArray<CustomModifier> customModifiers) 656887"];
5047 [label="customModifiers: ImmutableArray<CustomModifier>.Empty 656888"];
5048 [label="new NonLazyType(customModifiers: ImmutableArray<CustomModifier>.Empty) 656889"];
5049 [label="param NonLazyType(ImmutableArray<CustomModifier> customModifiers) 656890"];
5050 [label="param NonLazyType(this) 656891"];
5051 [label="param Extensions(this) 656892"];
5052 [label="Debug.Assert(!customModifiers.IsDefault); 656893"];
5053 [label="_customModifiers 656894"];
5054 [label="Default = new NonLazyType(customModifiers: ImmutableArray<CustomModifier>.Empty) 656895"];
5055 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 656896"];
5056 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 656897"];
5057 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 656898"];
5058 [label="Extensions.Create(customModifiers) 656899"];
5059 [label="param Create(ImmutableArray<CustomModifier> customModifiers) 656900"];
5060 [label="if (customModifiers.IsEmpty)\n                {\n                    return Default;\n                } 656901"];
5061 [label="return Default; 656902"];
5062 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 656903"];
5063 [label="new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)) 656904"];
5064 [label="param TypeWithAnnotations(TypeSymbol defaultType) 656905"];
5065 [label="param TypeWithAnnotations(NullableAnnotation nullableAnnotation) 656906"];
5066 [label="param TypeWithAnnotations(Extensions extensions) 656907"];
5067 [label="param TypeWithAnnotations(this) 656908"];
5068 [label="var a1 = defaultType is null; 656909"];
5069 [label="!a1 656910"];
5070 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 656911"];
5071 [label="defaultType.IsNullableType() 656912"];
5072 [label="param IsNullableType(this TypeSymbol type) 656913"];
5073 [label="type.OriginalDefinition 656914"];
5074 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 656915"];
5075 [label="OriginalTypeSymbolDefinition 656916"];
5076 [label="get\n            {\n                return this.OriginalDefinition;\n            } 656917"];
5077 [label="this.OriginalDefinition 656918"];
5078 [label="get\n            {\n                return this;\n            } 656919"];
5079 [label="return this; 656920"];
5080 [label="return this.OriginalDefinition; 656921"];
5081 [label="return OriginalTypeSymbolDefinition; 656922"];
5082 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 656923"];
5083 [label="type.OriginalDefinition.SpecialType 656924"];
5084 [label="get\n            {\n                return SpecialType.None;\n            } 656925"];
5085 [label="return SpecialType.None; 656926"];
5086 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 656927"];
5087 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 656928"];
5088 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 656929"];
5089 [label="Debug.Assert(a1 || a2 != true || a3); 656930"];
5090 [label="Debug.Assert(a1 || a2 != true || a3); 656931"];
5091 [label="Debug.Assert(extensions != null); 656932"];
5092 [label="Debug.Assert(extensions != null); 656933"];
5093 [label="DefaultType 656934"];
5094 [label="NullableAnnotation 656935"];
5095 [label="_extensions 656936"];
5096 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 656937"];
5097 [label="return typeParameters.SelectAsArray(static (tp) => TypeWithAnnotations.Create(tp)); 656938"];
5098 [label="return GetTypeParametersAsTypeArguments(); 656939"];
5099 [label="return TypeMap.AsTypeSymbols(symbol.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics); 656940"];
5100 [label="TypeMap.AsTypeSymbols(symbol.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics) 656941"];
5101 [label="param AsTypeSymbols(ImmutableArray<TypeWithAnnotations> typesOpt) 656942"];
5102 [label="typesOpt.IsDefault 656943"];
5103 [label="return typesOpt.IsDefault ? default : typesOpt.SelectAsArray(AsTypeSymbol); 656944"];
5104 [label="return typesOpt.IsDefault ? default : typesOpt.SelectAsArray(AsTypeSymbol); 656945"];
5105 [label="return typesOpt.IsDefault ? default : typesOpt.SelectAsArray(AsTypeSymbol); 656946"];
5106 [label="=> _extensions?.GetResolvedType(DefaultType) 656947"];
5107 [label="DefaultType 656948"];
5108 [label=".GetResolvedType(DefaultType) 656949"];
5109 [label="param GetResolvedType(TypeSymbol defaultType) 656950"];
5110 [label="=> defaultType 656951"];
5111 [label="defaultType 656952"];
5112 [label="_extensions?.GetResolvedType(DefaultType) 656953"];
5113 [label="var classA = namespaceNS.GetTypeMembers('A').First(); 656954"];
5114 [label="namespaceNS.GetTypeMembers('A') 656955"];
5115 [label="param GetTypeMembers(string name) 656956"];
5116 [label="param GetTypeMembers(this) 656957"];
5117 [label="ImmutableArray<NamedTypeSymbol> members; 656958"];
5118 [label="members 656959"];
5119 [label="this.GetNameToTypeMembersMap() 656960"];
5120 [label="param GetNameToTypeMembersMap(this) 656961"];
5121 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 656962"];
5122 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 656963"];
5123 [label="return _nameToTypeMembersMap; 656964"];
5124 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 656965"];
5125 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 656966"];
5126 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 656967"];
5127 [label="CustomAssert.Equal(namespaceNS, classA.ContainingSymbol); 656968"];
5128 [label="classA.ContainingSymbol 656969"];
5129 [label="get\n            {\n                return _containingSymbol;\n            } 656970"];
5130 [label="CustomAssert.Equal(namespaceNS, classA.ContainingSymbol); 656971"];
5131 [label="CustomAssert.Equal(SymbolKind.NamedType, classA.Kind); 656972"];
5132 [label="classA.Kind 656973"];
5133 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656974"];
5134 [label="return SymbolKind.NamedType; 656975"];
5135 [label="CustomAssert.Equal(SymbolKind.NamedType, classA.Kind); 656976"];
5136 [label="CustomAssert.Equal(TypeKind.Class, classA.TypeKind); 656977"];
5137 [label="classA.TypeKind 656978"];
5138 [label="get\n            {\n                return _flags.TypeKind;\n            } 656979"];
5139 [label="_flags.TypeKind 656980"];
5140 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 656981"];
5141 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 656982"];
5142 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 656983"];
5143 [label="return _flags.TypeKind; 656984"];
5144 [label="CustomAssert.Equal(TypeKind.Class, classA.TypeKind); 656985"];
5145 [label="CustomAssert.Equal(Accessibility.Internal, classA.DeclaredAccessibility); 656986"];
5146 [label="classA.DeclaredAccessibility 656987"];
5147 [label="get\n            {\n                return ModifierUtils.EffectiveAccessibility(_declModifiers);\n            } 656988"];
5148 [label="return ModifierUtils.EffectiveAccessibility(_declModifiers); 656989"];
5149 [label="ModifierUtils.EffectiveAccessibility(_declModifiers) 656990"];
5150 [label="param EffectiveAccessibility(DeclarationModifiers modifiers) 656991"];
5151 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                    return Accessibility.NotApplicable; // for explicit interface implementation\n                case DeclarationModifiers.Private:\n                    return Accessibility.Private;\n                case DeclarationModifiers.Protected:\n                    return Accessibility.Protected;\n                case DeclarationModifiers.Internal:\n                    return Accessibility.Internal;\n                case DeclarationModifiers.Public:\n                    return Accessibility.Public;\n                case DeclarationModifiers.ProtectedInternal:\n                    return Accessibility.ProtectedOrInternal;\n                case DeclarationModifiers.PrivateProtected:\n                    return Accessibility.ProtectedAndInternal;\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return Accessibility.Public;\n            } 656992"];
5152 [label="return Accessibility.Internal; 656993"];
5153 [label="CustomAssert.Equal(Accessibility.Internal, classA.DeclaredAccessibility); 656994"];
5154 [label="CustomAssert.Equal(2, classA.TypeParameters.Length); 656995"];
5155 [label="classA.TypeParameters 656996"];
5156 [label="get\n            {\n                if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                }\n\n                return _lazyTypeParameters;\n            } 656997"];
5157 [label="this.Kind 656998"];
5158 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 656999"];
5159 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 657000"];
5160 [label="param ReportTypeNamedRecord(string? name) 657001"];
5161 [label="param ReportTypeNamedRecord(CSharpCompilation compilation) 657002"];
5162 [label="param ReportTypeNamedRecord(DiagnosticBag diagnostics) 657003"];
5163 [label="param ReportTypeNamedRecord(Location location) 657004"];
5164 [label="if (name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword) &&\n                compilation.LanguageVersion >= MessageID.IDS_FeatureRecords.RequiredVersion())\n            {\n                diagnostics.Add(ErrorCode.WRN_RecordNamedDisallowed, location, name);\n            } 657005"];
5165 [label="if (name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword) &&\n                compilation.LanguageVersion >= MessageID.IDS_FeatureRecords.RequiredVersion())\n            {\n                diagnostics.Add(ErrorCode.WRN_RecordNamedDisallowed, location, name);\n            } 657006"];
5166 [label="_syntaxRef 657007"];
5167 [label="_owner 657008"];
5168 [label="_location 657009"];
5169 [label="param MakeSymbol(DiagnosticBag diagnostics) 657010"];
5170 [label="_name 657011"];
5171 [label="_ordinal 657012"];
5172 [label="Debug.Assert(!syntaxRefs.IsEmpty); 657013"];
5173 [label="_owner 657014"];
5174 [label="_varianceKind 657015"];
5175 [label="result.Name 657016"];
5176 [label="get\n            {\n                return _name;\n            } 657017"];
5177 [label="return _name; 657018"];
5178 [label="if (result.Name == result.ContainingSymbol.Name)\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeVariableSameAsParent, result.Locations[0], result.Name);\n            } 657019"];
5179 [label="result.ContainingSymbol 657020"];
5180 [label="get { return _owner; } 657021"];
5181 [label="return _owner; 657022"];
5182 [label="if (result.Name == result.ContainingSymbol.Name)\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeVariableSameAsParent, result.Locations[0], result.Name);\n            } 657023"];
5183 [label="result.ContainingSymbol.Name 657024"];
5184 [label="get\n            {\n                return declaration.Name;\n            } 657025"];
5185 [label="if (result.Name == result.ContainingSymbol.Name)\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeVariableSameAsParent, result.Locations[0], result.Name);\n            } 657026"];
5186 [label="AddDeclarationDiagnostics(diagnostics); 657027"];
5187 [label="AddDeclarationDiagnostics(diagnostics) 657028"];
5188 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 657029"];
5189 [label="param AddDeclarationDiagnostics(this) 657030"];
5190 [label="ContainingSymbol 657031"];
5191 [label="get\n            {\n                return _containingSymbol;\n            } 657032"];
5192 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 657033"];
5193 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 657034"];
5194 [label="CustomAssert.Equal(2, classA.TypeParameters.Length); 657035"];
5195 [label="CustomAssert.Equal('V', classA.TypeParameters[0].Name); 657036"];
5196 [label="classA.TypeParameters 657037"];
5197 [label="get\n            {\n                if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                }\n\n                return _lazyTypeParameters;\n            } 657038"];
5198 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                } 657039"];
5199 [label="return _lazyTypeParameters; 657040"];
5200 [label="CustomAssert.Equal('V', classA.TypeParameters[0].Name); 657041"];
5201 [label="classA.TypeParameters[0].Name 657042"];
5202 [label="get\n            {\n                return _name;\n            } 657043"];
5203 [label="return _name; 657044"];
5204 [label="CustomAssert.Equal('U', classA.TypeParameters[1].Name); 657045"];
5205 [label="classA.TypeParameters 657046"];
5206 [label="get\n            {\n                if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                }\n\n                return _lazyTypeParameters;\n            } 657047"];
5207 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                } 657048"];
5208 [label="return _lazyTypeParameters; 657049"];
5209 [label="CustomAssert.Equal('U', classA.TypeParameters[1].Name); 657050"];
5210 [label="classA.TypeParameters[1].Name 657051"];
5211 [label="get\n            {\n                return _name;\n            } 657052"];
5212 [label="return _name; 657053"];
5213 [label="CustomAssert.Equal(2, classA.TypeArguments().Length); 657054"];
5214 [label="CustomAssert.Equal(2, classA.TypeArguments().Length); 657055"];
5215 [label="classA.TypeArguments() 657056"];
5216 [label="param TypeArguments(this NamedTypeSymbol symbol) 657057"];
5217 [label="symbol.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 657058"];
5218 [label="GetTypeParametersAsTypeArguments() 657059"];
5219 [label="this.TypeParameters 657060"];
5220 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                } 657061"];
5221 [label="return _lazyTypeParameters; 657062"];
5222 [label="TypeMap.TypeParametersAsTypeSymbolsWithAnnotations(this.TypeParameters) 657063"];
5223 [label="return typeParameters.SelectAsArray(static (tp) => TypeWithAnnotations.Create(tp)); 657064"];
5224 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 657065"];
5225 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 657066"];
5226 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 657067"];
5227 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 657068"];
5228 [label="typeSymbol.IsNullableType() 657069"];
5229 [label="param IsNullableType(this TypeSymbol type) 657070"];
5230 [label="type.OriginalDefinition 657071"];
5231 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 657072"];
5232 [label="OriginalTypeSymbolDefinition 657073"];
5233 [label="get\n            {\n                return this.OriginalDefinition;\n            } 657074"];
5234 [label="this.OriginalDefinition 657075"];
5235 [label="get\n            {\n                return this;\n            } 657076"];
5236 [label="return this; 657077"];
5237 [label="return this.OriginalDefinition; 657078"];
5238 [label="return OriginalTypeSymbolDefinition; 657079"];
5239 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 657080"];
5240 [label="type.OriginalDefinition.SpecialType 657081"];
5241 [label="get\n            {\n                return SpecialType.None;\n            } 657082"];
5242 [label="return SpecialType.None; 657083"];
5243 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 657084"];
5244 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 657085"];
5245 [label="CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()) 657086"];
5246 [label="Extensions.Create(customModifiers) 657087"];
5247 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 657088"];
5248 [label="new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)) 657089"];
5249 [label="param TypeWithAnnotations(this) 657090"];
5250 [label="var a1 = defaultType is null; 657091"];
5251 [label="!a1 657092"];
5252 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 657093"];
5253 [label="defaultType.IsNullableType() 657094"];
5254 [label="param IsNullableType(this TypeSymbol type) 657095"];
5255 [label="type.OriginalDefinition 657096"];
5256 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 657097"];
5257 [label="OriginalTypeSymbolDefinition 657098"];
5258 [label="get\n            {\n                return this.OriginalDefinition;\n            } 657099"];
5259 [label="this.OriginalDefinition 657100"];
5260 [label="get\n            {\n                return this;\n            } 657101"];
5261 [label="return this; 657102"];
5262 [label="return this.OriginalDefinition; 657103"];
5263 [label="return OriginalTypeSymbolDefinition; 657104"];
5264 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 657105"];
5265 [label="type.OriginalDefinition.SpecialType 657106"];
5266 [label="get\n            {\n                return SpecialType.None;\n            } 657107"];
5267 [label="return SpecialType.None; 657108"];
5268 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 657109"];
5269 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 657110"];
5270 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 657111"];
5271 [label="Debug.Assert(a1 || a2 != true || a3); 657112"];
5272 [label="Debug.Assert(a1 || a2 != true || a3); 657113"];
5273 [label="Debug.Assert(extensions != null); 657114"];
5274 [label="Debug.Assert(extensions != null); 657115"];
5275 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 657116"];
5276 [label="TypeMap.AsTypeSymbols(symbol.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics) 657117"];
5277 [label="=> defaultType 657118"];
5278 [label="var structS = namespaceNS.GetTypeMembers('S').First(); 657119"];
5279 [label="namespaceNS.GetTypeMembers('S') 657120"];
5280 [label="param GetTypeMembers(string name) 657121"];
5281 [label="param GetTypeMembers(this) 657122"];
5282 [label="ImmutableArray<NamedTypeSymbol> members; 657123"];
5283 [label="members 657124"];
5284 [label="this.GetNameToTypeMembersMap() 657125"];
5285 [label="param GetNameToTypeMembersMap(this) 657126"];
5286 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 657127"];
5287 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 657128"];
5288 [label="return _nameToTypeMembersMap; 657129"];
5289 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 657130"];
5290 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 657131"];
5291 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 657132"];
5292 [label="CustomAssert.Equal(namespaceNS, structS.ContainingSymbol); 657133"];
5293 [label="structS.ContainingSymbol 657134"];
5294 [label="get\n            {\n                return _containingSymbol;\n            } 657135"];
5295 [label="CustomAssert.Equal(namespaceNS, structS.ContainingSymbol); 657136"];
5296 [label="CustomAssert.Equal(SymbolKind.NamedType, structS.Kind); 657137"];
5297 [label="structS.Kind 657138"];
5298 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 657139"];
5299 [label="return SymbolKind.NamedType; 657140"];
5300 [label="CustomAssert.Equal(SymbolKind.NamedType, structS.Kind); 657141"];
5301 [label="CustomAssert.Equal(TypeKind.Struct, structS.TypeKind); 657142"];
5302 [label="structS.TypeKind 657143"];
5303 [label="get\n            {\n                return _flags.TypeKind;\n            } 657144"];
5304 [label="_flags.TypeKind 657145"];
5305 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 657146"];
5306 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 657147"];
5307 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 657148"];
5308 [label="return _flags.TypeKind; 657149"];
5309 [label="CustomAssert.Equal(TypeKind.Struct, structS.TypeKind); 657150"];
5310 [label="CustomAssert.Equal(Accessibility.Public, structS.DeclaredAccessibility); 657151"];
5311 [label="structS.DeclaredAccessibility 657152"];
5312 [label="get\n            {\n                return ModifierUtils.EffectiveAccessibility(_declModifiers);\n            } 657153"];
5313 [label="return ModifierUtils.EffectiveAccessibility(_declModifiers); 657154"];
5314 [label="ModifierUtils.EffectiveAccessibility(_declModifiers) 657155"];
5315 [label="param EffectiveAccessibility(DeclarationModifiers modifiers) 657156"];
5316 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                    return Accessibility.NotApplicable; // for explicit interface implementation\n                case DeclarationModifiers.Private:\n                    return Accessibility.Private;\n                case DeclarationModifiers.Protected:\n                    return Accessibility.Protected;\n                case DeclarationModifiers.Internal:\n                    return Accessibility.Internal;\n                case DeclarationModifiers.Public:\n                    return Accessibility.Public;\n                case DeclarationModifiers.ProtectedInternal:\n                    return Accessibility.ProtectedOrInternal;\n                case DeclarationModifiers.PrivateProtected:\n                    return Accessibility.ProtectedAndInternal;\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return Accessibility.Public;\n            } 657157"];
5317 [label="return Accessibility.Public; 657158"];
5318 [label="CustomAssert.Equal(Accessibility.Public, structS.DeclaredAccessibility); 657159"];
5319 [label="CustomAssert.Equal(3, structS.TypeParameters.Length); 657160"];
5320 [label="structS.TypeParameters 657161"];
5321 [label="get\n            {\n                if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                }\n\n                return _lazyTypeParameters;\n            } 657162"];
5322 [label="this.Kind 657163"];
5323 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 657164"];
5324 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 657165"];
5325 [label="param ReportTypeNamedRecord(string? name) 657166"];
5326 [label="param ReportTypeNamedRecord(CSharpCompilation compilation) 657167"];
5327 [label="param ReportTypeNamedRecord(DiagnosticBag diagnostics) 657168"];
5328 [label="param ReportTypeNamedRecord(Location location) 657169"];
5329 [label="if (name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword) &&\n                compilation.LanguageVersion >= MessageID.IDS_FeatureRecords.RequiredVersion())\n            {\n                diagnostics.Add(ErrorCode.WRN_RecordNamedDisallowed, location, name);\n            } 657170"];
5330 [label="if (name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword) &&\n                compilation.LanguageVersion >= MessageID.IDS_FeatureRecords.RequiredVersion())\n            {\n                diagnostics.Add(ErrorCode.WRN_RecordNamedDisallowed, location, name);\n            } 657171"];
5331 [label="_syntaxRef 657172"];
5332 [label="_owner 657173"];
5333 [label="_location 657174"];
5334 [label="param MakeSymbol(DiagnosticBag diagnostics) 657175"];
5335 [label="_name 657176"];
5336 [label="_ordinal 657177"];
5337 [label="Debug.Assert(!syntaxRefs.IsEmpty); 657178"];
5338 [label="_owner 657179"];
5339 [label="_varianceKind 657180"];
5340 [label="result.Name 657181"];
5341 [label="get\n            {\n                return _name;\n            } 657182"];
5342 [label="return _name; 657183"];
5343 [label="if (result.Name == result.ContainingSymbol.Name)\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeVariableSameAsParent, result.Locations[0], result.Name);\n            } 657184"];
5344 [label="result.ContainingSymbol 657185"];
5345 [label="get { return _owner; } 657186"];
5346 [label="return _owner; 657187"];
5347 [label="if (result.Name == result.ContainingSymbol.Name)\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeVariableSameAsParent, result.Locations[0], result.Name);\n            } 657188"];
5348 [label="result.ContainingSymbol.Name 657189"];
5349 [label="get\n            {\n                return declaration.Name;\n            } 657190"];
5350 [label="if (result.Name == result.ContainingSymbol.Name)\n            {\n                diagnostics.Add(ErrorCode.ERR_TypeVariableSameAsParent, result.Locations[0], result.Name);\n            } 657191"];
5351 [label="AddDeclarationDiagnostics(diagnostics); 657192"];
5352 [label="AddDeclarationDiagnostics(diagnostics) 657193"];
5353 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 657194"];
5354 [label="param AddDeclarationDiagnostics(this) 657195"];
5355 [label="ContainingSymbol 657196"];
5356 [label="get\n            {\n                return _containingSymbol;\n            } 657197"];
5357 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 657198"];
5358 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 657199"];
5359 [label="CustomAssert.Equal(3, structS.TypeParameters.Length); 657200"];
5360 [label="CustomAssert.Equal('X', structS.TypeParameters[0].Name); 657201"];
5361 [label="structS.TypeParameters 657202"];
5362 [label="get\n            {\n                if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                }\n\n                return _lazyTypeParameters;\n            } 657203"];
5363 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                } 657204"];
5364 [label="return _lazyTypeParameters; 657205"];
5365 [label="CustomAssert.Equal('X', structS.TypeParameters[0].Name); 657206"];
5366 [label="structS.TypeParameters[0].Name 657207"];
5367 [label="get\n            {\n                return _name;\n            } 657208"];
5368 [label="return _name; 657209"];
5369 [label="CustomAssert.Equal('Y', structS.TypeParameters[1].Name); 657210"];
5370 [label="structS.TypeParameters 657211"];
5371 [label="get\n            {\n                if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                }\n\n                return _lazyTypeParameters;\n            } 657212"];
5372 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                } 657213"];
5373 [label="return _lazyTypeParameters; 657214"];
5374 [label="CustomAssert.Equal('Y', structS.TypeParameters[1].Name); 657215"];
5375 [label="structS.TypeParameters[1].Name 657216"];
5376 [label="get\n            {\n                return _name;\n            } 657217"];
5377 [label="return _name; 657218"];
5378 [label="CustomAssert.Equal('Z', structS.TypeParameters[2].Name); 657219"];
5379 [label="structS.TypeParameters 657220"];
5380 [label="get\n            {\n                if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                }\n\n                return _lazyTypeParameters;\n            } 657221"];
5381 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                } 657222"];
5382 [label="return _lazyTypeParameters; 657223"];
5383 [label="CustomAssert.Equal('Z', structS.TypeParameters[2].Name); 657224"];
5384 [label="structS.TypeParameters[2].Name 657225"];
5385 [label="get\n            {\n                return _name;\n            } 657226"];
5386 [label="return _name; 657227"];
5387 [label="CustomAssert.Equal(3, structS.TypeArguments().Length); 657228"];
5388 [label="CustomAssert.Equal(3, structS.TypeArguments().Length); 657229"];
5389 [label="structS.TypeArguments() 657230"];
5390 [label="param TypeArguments(this NamedTypeSymbol symbol) 657231"];
5391 [label="symbol.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 657232"];
5392 [label="GetTypeParametersAsTypeArguments() 657233"];
5393 [label="this.TypeParameters 657234"];
5394 [label="if (_lazyTypeParameters.IsDefault)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    if (ImmutableInterlocked.InterlockedInitialize(ref _lazyTypeParameters, MakeTypeParameters(diagnostics)))\n                    {\n                        AddDeclarationDiagnostics(diagnostics);\n                    }\n\n                    diagnostics.Free();\n                } 657235"];
5395 [label="return _lazyTypeParameters; 657236"];
5396 [label="TypeMap.TypeParametersAsTypeSymbolsWithAnnotations(this.TypeParameters) 657237"];
5397 [label="return typeParameters.SelectAsArray(static (tp) => TypeWithAnnotations.Create(tp)); 657238"];
5398 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 657239"];
5399 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 657240"];
5400 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 657241"];
5401 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 657242"];
5402 [label="typeSymbol.IsNullableType() 657243"];
5403 [label="param IsNullableType(this TypeSymbol type) 657244"];
5404 [label="type.OriginalDefinition 657245"];
5405 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 657246"];
5406 [label="OriginalTypeSymbolDefinition 657247"];
5407 [label="get\n            {\n                return this.OriginalDefinition;\n            } 657248"];
5408 [label="this.OriginalDefinition 657249"];
5409 [label="get\n            {\n                return this;\n            } 657250"];
5410 [label="return this; 657251"];
5411 [label="return this.OriginalDefinition; 657252"];
5412 [label="return OriginalTypeSymbolDefinition; 657253"];
5413 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 657254"];
5414 [label="type.OriginalDefinition.SpecialType 657255"];
5415 [label="get\n            {\n                return SpecialType.None;\n            } 657256"];
5416 [label="return SpecialType.None; 657257"];
5417 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 657258"];
5418 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 657259"];
5419 [label="CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()) 657260"];
5420 [label="Extensions.Create(customModifiers) 657261"];
5421 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 657262"];
5422 [label="new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)) 657263"];
5423 [label="param TypeWithAnnotations(this) 657264"];
5424 [label="var a1 = defaultType is null; 657265"];
5425 [label="!a1 657266"];
5426 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 657267"];
5427 [label="defaultType.IsNullableType() 657268"];
5428 [label="param IsNullableType(this TypeSymbol type) 657269"];
5429 [label="type.OriginalDefinition 657270"];
5430 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 657271"];
5431 [label="OriginalTypeSymbolDefinition 657272"];
5432 [label="get\n            {\n                return this.OriginalDefinition;\n            } 657273"];
5433 [label="this.OriginalDefinition 657274"];
5434 [label="get\n            {\n                return this;\n            } 657275"];
5435 [label="return this; 657276"];
5436 [label="return this.OriginalDefinition; 657277"];
5437 [label="return OriginalTypeSymbolDefinition; 657278"];
5438 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 657279"];
5439 [label="type.OriginalDefinition.SpecialType 657280"];
5440 [label="get\n            {\n                return SpecialType.None;\n            } 657281"];
5441 [label="return SpecialType.None; 657282"];
5442 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 657283"];
5443 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 657284"];
5444 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 657285"];
5445 [label="Debug.Assert(a1 || a2 != true || a3); 657286"];
5446 [label="Debug.Assert(a1 || a2 != true || a3); 657287"];
5447 [label="Debug.Assert(extensions != null); 657288"];
5448 [label="Debug.Assert(extensions != null); 657289"];
5449 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 657290"];
5450 [label="TypeMap.AsTypeSymbols(symbol.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics) 657291"];
5451 [label="=> defaultType 657292"];
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
42 -> 0;
43 -> 0;
44 -> 42;
44 -> 43;
44 -> 0;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 44;
49 -> 48;
50 -> 0;
51 -> 50;
52 -> 51;
52 -> 50;
53 -> 52;
55 -> 0;
56 -> 54;
56 -> 55;
57 -> 56;
58 -> 0;
59 -> 0;
60 -> 58;
60 -> 59;
60 -> 0;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 48;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 64;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 0;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 72;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 0;
93 -> 92;
95 -> 0;
96 -> 94;
96 -> 95;
97 -> 96;
98 -> 0;
99 -> 0;
100 -> 98;
100 -> 99;
100 -> 88;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 0;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 100;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 124;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 0;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 136;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 0;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 148;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 0;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
175 -> 174;
177 -> 175;
177 -> 176;
178 -> 177;
180 -> 0;
180 -> 179;
181 -> 180;
181 -> 0;
182 -> 181;
184 -> 183;
186 -> 185;
188 -> 187;
190 -> 189;
191 -> 3;
192 -> 191;
193 -> 192;
194 -> 193;
194 -> 192;
195 -> 1;
196 -> 1;
197 -> 196;
197 -> 1;
198 -> 1;
199 -> 197;
199 -> 198;
200 -> 199;
200 -> 198;
201 -> 198;
202 -> 200;
202 -> 201;
203 -> 201;
204 -> 202;
204 -> 203;
204 -> 201;
205 -> 201;
205 -> 1;
206 -> 1;
207 -> 1;
208 -> 205;
208 -> 207;
209 -> 206;
209 -> 207;
210 -> 206;
210 -> 207;
211 -> 206;
211 -> 207;
212 -> 206;
212 -> 207;
213 -> 206;
213 -> 207;
214 -> 206;
214 -> 207;
215 -> 206;
215 -> 207;
216 -> 208;
216 -> 207;
217 -> 212;
217 -> 207;
218 -> 209;
218 -> 207;
219 -> 207;
220 -> 217;
220 -> 219;
221 -> 218;
221 -> 219;
222 -> 220;
222 -> 219;
223 -> 219;
224 -> 222;
224 -> 223;
225 -> 224;
225 -> 223;
226 -> 225;
227 -> 0;
227 -> 226;
228 -> 227;
229 -> 228;
230 -> 229;
230 -> 226;
231 -> 219;
232 -> 221;
232 -> 231;
232 -> 219;
233 -> 230;
233 -> 232;
234 -> 210;
234 -> 207;
235 -> 211;
235 -> 207;
236 -> 213;
236 -> 207;
237 -> 214;
237 -> 207;
238 -> 215;
238 -> 207;
239 -> 207;
240 -> 216;
240 -> 239;
241 -> 233;
241 -> 239;
242 -> 234;
242 -> 239;
243 -> 235;
243 -> 239;
244 -> 236;
244 -> 239;
245 -> 237;
245 -> 239;
246 -> 238;
246 -> 239;
247 -> 240;
247 -> 239;
248 -> 241;
248 -> 239;
249 -> 242;
249 -> 239;
250 -> 243;
250 -> 239;
251 -> 244;
251 -> 239;
252 -> 245;
252 -> 239;
253 -> 246;
253 -> 239;
254 -> 239;
255 -> 254;
255 -> 239;
256 -> 239;
257 -> 247;
257 -> 256;
258 -> 248;
258 -> 256;
259 -> 249;
259 -> 256;
260 -> 250;
260 -> 256;
261 -> 251;
261 -> 256;
262 -> 252;
262 -> 256;
263 -> 253;
263 -> 256;
264 -> 255;
264 -> 256;
265 -> 260;
265 -> 256;
266 -> 262;
266 -> 256;
267 -> 256;
268 -> 265;
268 -> 267;
269 -> 266;
269 -> 267;
270 -> 257;
270 -> 267;
271 -> 270;
271 -> 204;
271 -> 267;
272 -> 271;
273 -> 269;
273 -> 271;
274 -> 268;
274 -> 271;
275 -> 271;
276 -> 272;
276 -> 275;
277 -> 273;
277 -> 275;
278 -> 274;
278 -> 275;
279 -> 272;
279 -> 275;
280 -> 275;
281 -> 278;
281 -> 280;
281 -> 275;
282 -> 0;
283 -> 0;
285 -> 282;
285 -> 283;
285 -> 284;
286 -> 285;
287 -> 0;
288 -> 286;
288 -> 285;
288 -> 287;
289 -> 288;
290 -> 0;
291 -> 286;
291 -> 285;
291 -> 290;
292 -> 291;
293 -> 0;
294 -> 286;
294 -> 285;
294 -> 293;
295 -> 294;
296 -> 0;
297 -> 286;
297 -> 285;
297 -> 296;
298 -> 297;
299 -> 0;
300 -> 286;
300 -> 285;
300 -> 299;
301 -> 300;
302 -> 0;
303 -> 286;
303 -> 285;
303 -> 302;
304 -> 303;
305 -> 0;
306 -> 286;
306 -> 285;
306 -> 305;
307 -> 306;
308 -> 0;
309 -> 286;
309 -> 285;
309 -> 308;
310 -> 309;
311 -> 0;
312 -> 286;
312 -> 285;
312 -> 311;
313 -> 312;
314 -> 0;
315 -> 286;
315 -> 285;
315 -> 314;
316 -> 315;
317 -> 0;
318 -> 286;
318 -> 285;
318 -> 317;
319 -> 318;
320 -> 286;
323 -> 320;
323 -> 322;
324 -> 321;
324 -> 322;
325 -> 322;
326 -> 323;
326 -> 285;
326 -> 322;
327 -> 322;
328 -> 324;
328 -> 322;
329 -> 325;
329 -> 322;
330 -> 328;
330 -> 329;
330 -> 322;
331 -> 330;
331 -> 327;
331 -> 322;
332 -> 326;
332 -> 327;
332 -> 285;
332 -> 331;
332 -> 330;
332 -> 322;
333 -> 332;
334 -> 0;
335 -> 334;
337 -> 335;
337 -> 336;
338 -> 286;
338 -> 285;
338 -> 337;
339 -> 338;
340 -> 0;
341 -> 340;
342 -> 286;
342 -> 285;
342 -> 341;
343 -> 342;
344 -> 0;
345 -> 286;
345 -> 285;
345 -> 344;
346 -> 345;
347 -> 310;
349 -> 348;
350 -> 0;
351 -> 0;
352 -> 0;
354 -> 350;
354 -> 351;
354 -> 352;
354 -> 353;
355 -> 349;
356 -> 354;
356 -> 355;
356 -> 348;
357 -> 356;
361 -> 358;
361 -> 359;
361 -> 360;
362 -> 292;
362 -> 285;
362 -> 291;
362 -> 358;
362 -> 361;
363 -> 362;
364 -> 304;
365 -> 313;
366 -> 313;
367 -> 310;
368 -> 0;
369 -> 0;
371 -> 368;
371 -> 370;
372 -> 369;
372 -> 370;
373 -> 370;
374 -> 371;
374 -> 370;
375 -> 372;
375 -> 370;
376 -> 0;
376 -> 370;
377 -> 373;
377 -> 370;
378 -> 370;
379 -> 374;
379 -> 375;
379 -> 376;
379 -> 377;
379 -> 378;
379 -> 370;
380 -> 379;
381 -> 0;
382 -> 0;
384 -> 381;
384 -> 383;
385 -> 382;
385 -> 383;
386 -> 383;
387 -> 384;
387 -> 383;
388 -> 385;
388 -> 383;
389 -> 0;
389 -> 383;
390 -> 386;
390 -> 383;
391 -> 383;
392 -> 387;
392 -> 388;
392 -> 389;
392 -> 390;
392 -> 391;
392 -> 383;
393 -> 392;
395 -> 380;
395 -> 379;
395 -> 394;
396 -> 395;
398 -> 393;
398 -> 392;
398 -> 397;
399 -> 398;
400 -> 0;
401 -> 0;
403 -> 400;
403 -> 402;
404 -> 401;
404 -> 402;
405 -> 402;
406 -> 403;
406 -> 402;
407 -> 404;
407 -> 402;
408 -> 0;
408 -> 402;
409 -> 405;
409 -> 402;
410 -> 402;
411 -> 406;
411 -> 407;
411 -> 408;
411 -> 409;
411 -> 410;
411 -> 402;
412 -> 411;
413 -> 0;
414 -> 0;
416 -> 413;
416 -> 415;
417 -> 414;
417 -> 415;
418 -> 415;
419 -> 416;
419 -> 415;
420 -> 417;
420 -> 415;
421 -> 0;
421 -> 415;
422 -> 418;
422 -> 415;
423 -> 415;
424 -> 419;
424 -> 420;
424 -> 421;
424 -> 422;
424 -> 423;
424 -> 415;
425 -> 424;
426 -> 0;
427 -> 0;
429 -> 426;
429 -> 428;
430 -> 427;
430 -> 428;
431 -> 428;
432 -> 429;
432 -> 428;
433 -> 430;
433 -> 428;
434 -> 0;
434 -> 428;
435 -> 431;
435 -> 428;
436 -> 428;
437 -> 432;
437 -> 433;
437 -> 434;
437 -> 435;
437 -> 436;
437 -> 428;
438 -> 437;
439 -> 0;
440 -> 0;
442 -> 439;
442 -> 441;
443 -> 440;
443 -> 441;
444 -> 441;
445 -> 442;
445 -> 441;
446 -> 443;
446 -> 441;
447 -> 0;
447 -> 441;
448 -> 444;
448 -> 441;
449 -> 441;
450 -> 445;
450 -> 446;
450 -> 447;
450 -> 448;
450 -> 449;
450 -> 441;
451 -> 450;
452 -> 0;
453 -> 0;
455 -> 452;
455 -> 454;
456 -> 453;
456 -> 454;
457 -> 454;
458 -> 455;
458 -> 454;
459 -> 456;
459 -> 454;
460 -> 0;
460 -> 454;
461 -> 457;
461 -> 454;
462 -> 454;
463 -> 458;
463 -> 459;
463 -> 460;
463 -> 461;
463 -> 462;
463 -> 454;
464 -> 463;
465 -> 0;
466 -> 0;
468 -> 465;
468 -> 467;
469 -> 466;
469 -> 467;
470 -> 467;
471 -> 468;
471 -> 467;
472 -> 469;
472 -> 467;
473 -> 0;
473 -> 467;
474 -> 470;
474 -> 467;
475 -> 467;
476 -> 471;
476 -> 472;
476 -> 473;
476 -> 474;
476 -> 475;
476 -> 467;
477 -> 476;
479 -> 380;
479 -> 379;
479 -> 478;
480 -> 479;
482 -> 393;
482 -> 392;
482 -> 481;
483 -> 482;
485 -> 412;
485 -> 411;
485 -> 484;
486 -> 485;
488 -> 425;
488 -> 424;
488 -> 487;
489 -> 488;
490 -> 0;
491 -> 380;
491 -> 379;
491 -> 490;
491 -> 0;
492 -> 491;
493 -> 0;
494 -> 393;
494 -> 392;
494 -> 493;
494 -> 0;
495 -> 494;
496 -> 0;
497 -> 464;
497 -> 463;
497 -> 496;
497 -> 0;
498 -> 497;
499 -> 0;
500 -> 412;
500 -> 411;
500 -> 499;
500 -> 0;
501 -> 500;
502 -> 0;
503 -> 0;
503 -> 502;
504 -> 503;
505 -> 286;
505 -> 281;
506 -> 276;
506 -> 275;
507 -> 0;
507 -> 275;
508 -> 507;
508 -> 279;
508 -> 275;
509 -> 275;
510 -> 506;
510 -> 508;
510 -> 509;
510 -> 0;
510 -> 275;
511 -> 510;
511 -> 275;
512 -> 505;
512 -> 275;
513 -> 277;
513 -> 275;
514 -> 275;
515 -> 511;
515 -> 512;
515 -> 513;
515 -> 514;
515 -> 510;
515 -> 285;
515 -> 275;
516 -> 275;
517 -> 515;
517 -> 516;
518 -> 516;
519 -> 516;
520 -> 517;
520 -> 515;
520 -> 519;
520 -> 516;
521 -> 518;
521 -> 516;
522 -> 516;
523 -> 520;
523 -> 515;
523 -> 519;
523 -> 521;
523 -> 522;
523 -> 518;
523 -> 516;
524 -> 516;
525 -> 524;
525 -> 518;
525 -> 516;
526 -> 518;
526 -> 516;
527 -> 516;
528 -> 526;
528 -> 527;
528 -> 518;
528 -> 525;
528 -> 516;
529 -> 517;
529 -> 516;
530 -> 529;
530 -> 272;
530 -> 271;
531 -> 272;
531 -> 256;
532 -> 256;
533 -> 259;
533 -> 532;
533 -> 256;
534 -> 531;
534 -> 533;
535 -> 533;
536 -> 534;
536 -> 535;
536 -> 272;
536 -> 530;
536 -> 515;
536 -> 533;
537 -> 536;
537 -> 533;
538 -> 380;
538 -> 537;
539 -> 0;
539 -> 256;
540 -> 264;
540 -> 256;
541 -> 261;
541 -> 531;
541 -> 258;
541 -> 538;
541 -> 256;
543 -> 542;
544 -> 543;
545 -> 544;
546 -> 541;
546 -> 256;
547 -> 256;
548 -> 546;
548 -> 547;
549 -> 545;
549 -> 547;
550 -> 549;
551 -> 256;
552 -> 541;
552 -> 272;
552 -> 530;
552 -> 515;
552 -> 229;
552 -> 0;
552 -> 379;
552 -> 256;
553 -> 256;
554 -> 553;
555 -> 552;
555 -> 554;
555 -> 256;
556 -> 0;
558 -> 556;
558 -> 557;
559 -> 558;
560 -> 0;
562 -> 560;
562 -> 561;
564 -> 562;
564 -> 563;
565 -> 564;
566 -> 552;
566 -> 553;
567 -> 552;
567 -> 553;
568 -> 552;
568 -> 553;
569 -> 552;
569 -> 553;
570 -> 566;
570 -> 553;
571 -> 569;
571 -> 553;
572 -> 567;
572 -> 553;
573 -> 568;
573 -> 553;
574 -> 553;
575 -> 553;
576 -> 570;
576 -> 575;
577 -> 571;
577 -> 575;
578 -> 572;
578 -> 575;
579 -> 573;
579 -> 575;
580 -> 574;
580 -> 575;
581 -> 574;
581 -> 575;
582 -> 574;
582 -> 575;
583 -> 574;
583 -> 575;
584 -> 575;
585 -> 577;
585 -> 584;
585 -> 575;
586 -> 583;
586 -> 575;
587 -> 579;
587 -> 575;
588 -> 587;
588 -> 555;
588 -> 575;
589 -> 576;
589 -> 575;
590 -> 577;
590 -> 575;
591 -> 588;
591 -> 575;
592 -> 580;
592 -> 575;
593 -> 581;
593 -> 575;
594 -> 582;
594 -> 575;
595 -> 583;
595 -> 575;
596 -> 575;
597 -> 0;
597 -> 575;
598 -> 577;
598 -> 588;
598 -> 575;
599 -> 597;
599 -> 598;
599 -> 595;
599 -> 596;
599 -> 0;
599 -> 588;
599 -> 575;
600 -> 575;
601 -> 589;
601 -> 600;
602 -> 590;
602 -> 600;
603 -> 591;
603 -> 600;
604 -> 592;
604 -> 600;
605 -> 593;
605 -> 600;
606 -> 594;
606 -> 600;
607 -> 595;
607 -> 600;
608 -> 596;
608 -> 600;
609 -> 596;
609 -> 600;
610 -> 599;
610 -> 600;
611 -> 596;
611 -> 600;
612 -> 596;
612 -> 600;
613 -> 596;
613 -> 600;
614 -> 601;
614 -> 600;
615 -> 602;
615 -> 600;
616 -> 603;
616 -> 600;
617 -> 604;
617 -> 600;
618 -> 605;
618 -> 600;
619 -> 606;
619 -> 600;
620 -> 607;
620 -> 600;
621 -> 608;
621 -> 600;
622 -> 609;
622 -> 600;
623 -> 610;
623 -> 600;
624 -> 610;
624 -> 599;
624 -> 600;
625 -> 624;
625 -> 599;
625 -> 600;
626 -> 611;
626 -> 600;
627 -> 612;
627 -> 600;
628 -> 600;
629 -> 614;
629 -> 628;
630 -> 615;
630 -> 628;
631 -> 616;
631 -> 628;
632 -> 617;
632 -> 628;
633 -> 618;
633 -> 628;
634 -> 619;
634 -> 628;
635 -> 620;
635 -> 628;
636 -> 621;
636 -> 628;
637 -> 622;
637 -> 628;
638 -> 623;
638 -> 628;
639 -> 625;
639 -> 628;
640 -> 626;
640 -> 628;
641 -> 627;
641 -> 628;
642 -> 613;
642 -> 628;
643 -> 629;
643 -> 628;
644 -> 631;
644 -> 628;
645 -> 639;
645 -> 628;
646 -> 635;
646 -> 628;
647 -> 640;
647 -> 628;
648 -> 641;
648 -> 628;
649 -> 628;
650 -> 649;
650 -> 643;
650 -> 644;
650 -> 645;
650 -> 646;
650 -> 647;
650 -> 648;
650 -> 588;
650 -> 625;
650 -> 628;
651 -> 649;
651 -> 628;
652 -> 649;
652 -> 628;
653 -> 649;
653 -> 628;
654 -> 649;
654 -> 628;
655 -> 649;
655 -> 628;
656 -> 649;
656 -> 628;
657 -> 649;
657 -> 628;
658 -> 649;
658 -> 628;
659 -> 649;
659 -> 628;
660 -> 649;
660 -> 628;
661 -> 649;
661 -> 628;
662 -> 649;
662 -> 628;
663 -> 649;
663 -> 628;
664 -> 649;
664 -> 628;
665 -> 649;
665 -> 628;
666 -> 649;
666 -> 628;
667 -> 649;
667 -> 628;
668 -> 649;
668 -> 628;
669 -> 649;
669 -> 628;
670 -> 649;
670 -> 628;
671 -> 649;
671 -> 628;
672 -> 649;
672 -> 628;
673 -> 649;
673 -> 628;
674 -> 649;
674 -> 628;
675 -> 649;
675 -> 628;
676 -> 649;
676 -> 628;
677 -> 628;
678 -> 677;
678 -> 649;
678 -> 628;
679 -> 649;
679 -> 628;
680 -> 649;
680 -> 628;
681 -> 649;
681 -> 628;
682 -> 649;
682 -> 628;
683 -> 649;
683 -> 628;
684 -> 649;
684 -> 628;
685 -> 649;
685 -> 628;
686 -> 628;
687 -> 628;
688 -> 685;
688 -> 687;
689 -> 686;
689 -> 687;
691 -> 690;
692 -> 690;
693 -> 687;
694 -> 689;
694 -> 693;
695 -> 693;
696 -> 689;
696 -> 687;
697 -> 688;
697 -> 689;
697 -> 687;
698 -> 686;
698 -> 649;
698 -> 628;
699 -> 630;
699 -> 649;
699 -> 628;
700 -> 649;
700 -> 628;
701 -> 700;
701 -> 650;
701 -> 651;
701 -> 699;
701 -> 652;
701 -> 653;
701 -> 654;
701 -> 655;
701 -> 656;
701 -> 657;
701 -> 658;
701 -> 659;
701 -> 660;
701 -> 661;
701 -> 662;
701 -> 663;
701 -> 664;
701 -> 665;
701 -> 666;
701 -> 667;
701 -> 668;
701 -> 669;
701 -> 670;
701 -> 671;
701 -> 672;
701 -> 673;
701 -> 674;
701 -> 675;
701 -> 676;
701 -> 678;
701 -> 679;
701 -> 698;
701 -> 680;
701 -> 681;
701 -> 682;
701 -> 683;
701 -> 684;
701 -> 677;
701 -> 695;
701 -> 696;
701 -> 697;
701 -> 628;
702 -> 701;
702 -> 649;
702 -> 628;
703 -> 649;
703 -> 701;
703 -> 628;
704 -> 703;
704 -> 701;
704 -> 702;
704 -> 628;
705 -> 704;
705 -> 649;
705 -> 628;
706 -> 649;
706 -> 704;
706 -> 628;
707 -> 706;
707 -> 704;
707 -> 705;
707 -> 628;
708 -> 707;
708 -> 649;
708 -> 628;
709 -> 649;
709 -> 707;
709 -> 628;
710 -> 709;
710 -> 707;
710 -> 708;
710 -> 628;
711 -> 710;
711 -> 649;
711 -> 628;
712 -> 649;
712 -> 710;
712 -> 628;
713 -> 712;
713 -> 710;
713 -> 711;
713 -> 628;
714 -> 713;
714 -> 649;
714 -> 628;
715 -> 649;
715 -> 628;
716 -> 628;
717 -> 628;
718 -> 715;
718 -> 717;
719 -> 716;
719 -> 717;
720 -> 717;
721 -> 720;
721 -> 717;
722 -> 720;
722 -> 717;
723 -> 720;
723 -> 717;
724 -> 717;
725 -> 724;
725 -> 720;
725 -> 717;
726 -> 717;
727 -> 718;
727 -> 726;
727 -> 717;
728 -> 718;
728 -> 720;
728 -> 717;
729 -> 716;
729 -> 649;
729 -> 628;
730 -> 638;
730 -> 713;
730 -> 628;
731 -> 628;
732 -> 730;
732 -> 731;
733 -> 731;
734 -> 732;
734 -> 731;
735 -> 734;
735 -> 713;
735 -> 714;
735 -> 729;
735 -> 731;
736 -> 0;
736 -> 731;
737 -> 736;
737 -> 733;
737 -> 731;
738 -> 737;
738 -> 628;
739 -> 738;
739 -> 649;
739 -> 628;
740 -> 635;
740 -> 628;
741 -> 740;
742 -> 632;
742 -> 741;
742 -> 740;
743 -> 633;
743 -> 741;
743 -> 740;
744 -> 742;
744 -> 743;
744 -> 740;
745 -> 634;
745 -> 741;
745 -> 740;
746 -> 744;
746 -> 745;
746 -> 740;
747 -> 637;
747 -> 628;
748 -> 649;
748 -> 713;
748 -> 714;
748 -> 729;
748 -> 739;
748 -> 720;
748 -> 721;
748 -> 728;
748 -> 722;
748 -> 723;
748 -> 725;
748 -> 724;
748 -> 747;
749 -> 747;
750 -> 649;
750 -> 749;
751 -> 750;
751 -> 748;
751 -> 749;
752 -> 636;
752 -> 747;
753 -> 747;
754 -> 747;
755 -> 748;
755 -> 754;
756 -> 751;
756 -> 754;
757 -> 752;
757 -> 754;
758 -> 753;
758 -> 754;
759 -> 755;
759 -> 754;
760 -> 756;
760 -> 754;
761 -> 757;
761 -> 754;
762 -> 754;
763 -> 762;
763 -> 759;
763 -> 760;
763 -> 761;
763 -> 748;
763 -> 754;
764 -> 753;
764 -> 649;
764 -> 747;
765 -> 638;
765 -> 649;
765 -> 628;
766 -> 649;
766 -> 763;
766 -> 628;
767 -> 628;
768 -> 649;
768 -> 763;
768 -> 767;
768 -> 628;
769 -> 575;
770 -> 578;
770 -> 769;
770 -> 575;
771 -> 578;
771 -> 770;
772 -> 770;
773 -> 771;
773 -> 772;
774 -> 596;
774 -> 772;
775 -> 772;
776 -> 773;
776 -> 775;
776 -> 772;
777 -> 773;
777 -> 772;
778 -> 777;
778 -> 763;
778 -> 764;
778 -> 765;
778 -> 772;
779 -> 772;
780 -> 774;
780 -> 778;
780 -> 772;
781 -> 779;
781 -> 772;
782 -> 780;
782 -> 778;
782 -> 772;
783 -> 781;
783 -> 782;
783 -> 779;
783 -> 778;
783 -> 772;
784 -> 772;
785 -> 772;
786 -> 773;
786 -> 772;
787 -> 786;
787 -> 783;
787 -> 772;
788 -> 787;
789 -> 787;
790 -> 787;
791 -> 774;
791 -> 790;
791 -> 787;
792 -> 787;
793 -> 779;
793 -> 792;
793 -> 790;
793 -> 787;
794 -> 784;
794 -> 787;
794 -> 793;
795 -> 785;
795 -> 787;
796 -> 779;
796 -> 793;
796 -> 772;
797 -> 774;
797 -> 796;
797 -> 772;
798 -> 773;
798 -> 772;
799 -> 780;
799 -> 798;
799 -> 796;
799 -> 772;
800 -> 774;
800 -> 799;
800 -> 772;
801 -> 794;
801 -> 772;
802 -> 799;
802 -> 772;
803 -> 772;
804 -> 800;
804 -> 803;
805 -> 801;
805 -> 803;
806 -> 802;
806 -> 803;
807 -> 774;
807 -> 803;
808 -> 807;
808 -> 799;
808 -> 803;
809 -> 803;
810 -> 807;
810 -> 809;
811 -> 810;
811 -> 799;
811 -> 809;
812 -> 811;
812 -> 809;
813 -> 812;
813 -> 803;
814 -> 803;
815 -> 808;
815 -> 814;
816 -> 815;
816 -> 808;
816 -> 814;
817 -> 803;
818 -> 816;
818 -> 817;
819 -> 804;
819 -> 803;
820 -> 805;
820 -> 803;
821 -> 806;
821 -> 803;
822 -> 803;
823 -> 803;
824 -> 808;
824 -> 823;
825 -> 808;
825 -> 823;
826 -> 808;
826 -> 823;
827 -> 813;
827 -> 823;
828 -> 816;
828 -> 823;
829 -> 818;
829 -> 823;
830 -> 818;
830 -> 823;
831 -> 819;
831 -> 823;
832 -> 820;
832 -> 823;
833 -> 821;
833 -> 823;
834 -> 818;
834 -> 823;
835 -> 822;
835 -> 823;
836 -> 822;
836 -> 823;
837 -> 827;
837 -> 823;
838 -> 828;
838 -> 823;
839 -> 829;
839 -> 823;
840 -> 833;
840 -> 818;
840 -> 823;
841 -> 835;
841 -> 823;
842 -> 823;
843 -> 837;
843 -> 842;
844 -> 838;
844 -> 842;
845 -> 839;
845 -> 842;
846 -> 841;
846 -> 842;
847 -> 836;
847 -> 842;
848 -> 846;
848 -> 842;
849 -> 842;
850 -> 849;
850 -> 842;
851 -> 849;
851 -> 842;
852 -> 849;
852 -> 842;
853 -> 849;
853 -> 842;
854 -> 849;
854 -> 842;
855 -> 849;
855 -> 842;
856 -> 849;
856 -> 842;
857 -> 849;
857 -> 842;
858 -> 849;
858 -> 842;
859 -> 849;
859 -> 842;
860 -> 849;
860 -> 842;
861 -> 849;
861 -> 842;
862 -> 849;
862 -> 842;
863 -> 849;
863 -> 842;
864 -> 849;
864 -> 842;
865 -> 849;
865 -> 842;
866 -> 849;
866 -> 842;
867 -> 849;
867 -> 842;
868 -> 849;
868 -> 842;
869 -> 849;
869 -> 842;
870 -> 849;
870 -> 842;
871 -> 849;
871 -> 842;
872 -> 849;
872 -> 842;
873 -> 849;
873 -> 842;
874 -> 849;
874 -> 842;
875 -> 849;
875 -> 842;
876 -> 842;
877 -> 876;
877 -> 849;
877 -> 842;
878 -> 849;
878 -> 842;
879 -> 849;
879 -> 842;
880 -> 849;
880 -> 842;
881 -> 849;
881 -> 842;
882 -> 849;
882 -> 842;
883 -> 849;
883 -> 842;
884 -> 849;
884 -> 842;
885 -> 842;
886 -> 842;
887 -> 884;
887 -> 886;
888 -> 885;
888 -> 886;
889 -> 886;
890 -> 888;
890 -> 889;
891 -> 889;
892 -> 888;
892 -> 886;
893 -> 887;
893 -> 888;
893 -> 886;
894 -> 885;
894 -> 849;
894 -> 842;
895 -> 849;
895 -> 842;
896 -> 849;
896 -> 842;
897 -> 842;
898 -> 842;
899 -> 896;
899 -> 898;
900 -> 897;
900 -> 898;
901 -> 898;
902 -> 901;
902 -> 898;
903 -> 901;
903 -> 898;
904 -> 901;
904 -> 898;
905 -> 898;
906 -> 905;
906 -> 901;
906 -> 898;
907 -> 898;
908 -> 899;
908 -> 907;
908 -> 898;
909 -> 899;
909 -> 901;
909 -> 898;
910 -> 897;
910 -> 849;
910 -> 842;
911 -> 842;
912 -> 840;
912 -> 911;
913 -> 911;
914 -> 912;
914 -> 911;
915 -> 914;
915 -> 840;
915 -> 910;
915 -> 901;
915 -> 902;
915 -> 909;
915 -> 903;
915 -> 904;
915 -> 906;
915 -> 905;
916 -> 914;
917 -> 915;
917 -> 916;
918 -> 830;
918 -> 842;
919 -> 918;
920 -> 843;
920 -> 919;
920 -> 918;
921 -> 844;
921 -> 919;
921 -> 918;
922 -> 920;
922 -> 921;
922 -> 918;
923 -> 845;
923 -> 919;
923 -> 918;
924 -> 922;
924 -> 923;
924 -> 918;
925 -> 831;
925 -> 832;
926 -> 849;
926 -> 832;
927 -> 831;
927 -> 926;
927 -> 840;
927 -> 910;
927 -> 917;
927 -> 901;
927 -> 902;
927 -> 909;
927 -> 903;
927 -> 904;
927 -> 906;
927 -> 905;
927 -> 832;
928 -> 831;
928 -> 849;
928 -> 832;
929 -> 849;
929 -> 927;
929 -> 842;
930 -> 842;
931 -> 849;
931 -> 927;
931 -> 930;
931 -> 842;
932 -> 822;
932 -> 772;
933 -> 932;
933 -> 770;
934 -> 933;
934 -> 927;
934 -> 575;
935 -> 933;
935 -> 575;
936 -> 552;
936 -> 935;
936 -> 927;
936 -> 928;
936 -> 833;
936 -> 256;
937 -> 936;
937 -> 256;
938 -> 256;
939 -> 937;
939 -> 938;
940 -> 938;
941 -> 939;
941 -> 940;
942 -> 941;
942 -> 936;
942 -> 940;
943 -> 942;
943 -> 938;
944 -> 943;
944 -> 942;
944 -> 938;
945 -> 938;
946 -> 943;
946 -> 945;
946 -> 942;
946 -> 938;
947 -> 0;
947 -> 938;
948 -> 946;
948 -> 947;
948 -> 938;
949 -> 263;
949 -> 948;
949 -> 256;
950 -> 936;
950 -> 256;
951 -> 1;
952 -> 950;
952 -> 951;
953 -> 952;
953 -> 948;
953 -> 951;
954 -> 953;
955 -> 954;
955 -> 953;
956 -> 953;
957 -> 955;
957 -> 956;
958 -> 952;
958 -> 956;
959 -> 956;
960 -> 958;
960 -> 959;
961 -> 959;
962 -> 960;
962 -> 961;
963 -> 961;
964 -> 962;
964 -> 963;
965 -> 964;
965 -> 948;
965 -> 963;
966 -> 964;
966 -> 965;
967 -> 965;
968 -> 966;
968 -> 967;
969 -> 964;
969 -> 948;
969 -> 967;
970 -> 968;
970 -> 967;
971 -> 967;
972 -> 970;
972 -> 971;
973 -> 969;
973 -> 971;
974 -> 971;
975 -> 971;
976 -> 971;
977 -> 972;
977 -> 976;
978 -> 977;
978 -> 971;
979 -> 971;
980 -> 971;
981 -> 980;
981 -> 971;
982 -> 971;
983 -> 982;
983 -> 971;
984 -> 971;
985 -> 984;
985 -> 971;
986 -> 971;
987 -> 986;
987 -> 971;
988 -> 972;
988 -> 971;
989 -> 975;
989 -> 971;
990 -> 986;
990 -> 971;
991 -> 979;
991 -> 971;
992 -> 980;
992 -> 971;
993 -> 982;
993 -> 971;
994 -> 984;
994 -> 971;
995 -> 974;
995 -> 971;
996 -> 988;
996 -> 989;
996 -> 990;
996 -> 991;
996 -> 992;
996 -> 993;
996 -> 994;
996 -> 995;
996 -> 973;
996 -> 948;
996 -> 975;
996 -> 974;
996 -> 987;
996 -> 981;
996 -> 983;
996 -> 985;
996 -> 971;
997 -> 971;
998 -> 996;
998 -> 997;
999 -> 997;
1000 -> 998;
1000 -> 999;
1001 -> 1000;
1001 -> 996;
1001 -> 999;
1002 -> 1001;
1002 -> 997;
1003 -> 997;
1004 -> 1002;
1004 -> 1003;
1005 -> 1002;
1005 -> 1003;
1006 -> 0;
1006 -> 1003;
1007 -> 1003;
1008 -> 1003;
1009 -> 1004;
1009 -> 1003;
1010 -> 1009;
1011 -> 1009;
1012 -> 1010;
1012 -> 1011;
1013 -> 1012;
1013 -> 1011;
1014 -> 0;
1014 -> 1013;
1015 -> 1009;
1016 -> 1014;
1016 -> 1009;
1017 -> 1006;
1017 -> 1009;
1018 -> 1007;
1018 -> 1009;
1019 -> 1008;
1019 -> 1009;
1020 -> 1005;
1020 -> 1009;
1021 -> 1009;
1022 -> 1015;
1022 -> 1021;
1023 -> 1016;
1023 -> 1021;
1024 -> 1017;
1024 -> 1021;
1025 -> 1018;
1025 -> 1021;
1026 -> 1019;
1026 -> 1021;
1027 -> 1020;
1027 -> 1021;
1028 -> 1024;
1028 -> 1023;
1028 -> 1021;
1029 -> 1021;
1030 -> 1006;
1030 -> 1014;
1030 -> 1009;
1031 -> 1030;
1031 -> 0;
1031 -> 1003;
1032 -> 1030;
1032 -> 1003;
1033 -> 0;
1033 -> 1032;
1034 -> 1032;
1035 -> 1033;
1035 -> 1032;
1036 -> 1006;
1036 -> 1032;
1037 -> 1007;
1037 -> 1032;
1038 -> 1008;
1038 -> 1032;
1039 -> 1005;
1039 -> 1032;
1040 -> 1032;
1041 -> 1034;
1041 -> 1040;
1042 -> 1035;
1042 -> 1040;
1043 -> 1036;
1043 -> 1040;
1044 -> 1037;
1044 -> 1040;
1045 -> 1038;
1045 -> 1040;
1046 -> 1039;
1046 -> 1040;
1047 -> 1043;
1047 -> 1042;
1047 -> 1040;
1048 -> 1040;
1049 -> 1033;
1049 -> 0;
1049 -> 1003;
1050 -> 1033;
1051 -> 1006;
1051 -> 1033;
1052 -> 1007;
1052 -> 1033;
1053 -> 1008;
1053 -> 1033;
1054 -> 1005;
1054 -> 1033;
1055 -> 1033;
1056 -> 1050;
1056 -> 1055;
1057 -> 1050;
1057 -> 1055;
1058 -> 1051;
1058 -> 1055;
1059 -> 1052;
1059 -> 1055;
1060 -> 1053;
1060 -> 1055;
1061 -> 1054;
1061 -> 1055;
1062 -> 1058;
1062 -> 1057;
1062 -> 1055;
1063 -> 1055;
1064 -> 996;
1064 -> 997;
1065 -> 1064;
1065 -> 1033;
1065 -> 997;
1066 -> 996;
1066 -> 997;
1067 -> 0;
1067 -> 997;
1068 -> 996;
1068 -> 1067;
1068 -> 1065;
1068 -> 971;
1069 -> 996;
1069 -> 997;
1070 -> 996;
1070 -> 997;
1071 -> 996;
1071 -> 997;
1072 -> 996;
1072 -> 997;
1073 -> 996;
1073 -> 997;
1074 -> 996;
1074 -> 997;
1075 -> 996;
1075 -> 997;
1076 -> 1069;
1076 -> 997;
1077 -> 1070;
1077 -> 997;
1078 -> 1074;
1078 -> 997;
1079 -> 1071;
1079 -> 997;
1080 -> 1072;
1080 -> 997;
1081 -> 1073;
1081 -> 997;
1082 -> 997;
1083 -> 997;
1084 -> 1076;
1084 -> 1083;
1085 -> 1077;
1085 -> 1083;
1086 -> 1078;
1086 -> 1083;
1087 -> 1079;
1087 -> 1083;
1088 -> 1080;
1088 -> 1083;
1089 -> 1081;
1089 -> 1083;
1090 -> 1082;
1090 -> 1083;
1091 -> 1084;
1091 -> 1068;
1091 -> 1083;
1092 -> 1084;
1092 -> 1068;
1092 -> 1083;
1093 -> 1086;
1093 -> 1083;
1094 -> 1083;
1095 -> 1091;
1095 -> 1094;
1096 -> 1092;
1096 -> 1094;
1097 -> 1093;
1097 -> 1094;
1098 -> 1090;
1098 -> 1094;
1099 -> 1094;
1100 -> 1099;
1100 -> 1094;
1101 -> 1099;
1101 -> 1094;
1102 -> 1099;
1102 -> 1094;
1103 -> 1094;
1104 -> 1095;
1104 -> 1103;
1104 -> 1094;
1105 -> 1096;
1105 -> 1068;
1105 -> 1094;
1106 -> 1097;
1106 -> 1099;
1106 -> 1094;
1107 -> 1095;
1107 -> 1099;
1107 -> 1094;
1108 -> 1096;
1108 -> 1099;
1108 -> 1094;
1109 -> 1090;
1109 -> 1083;
1110 -> 1090;
1110 -> 1083;
1111 -> 1090;
1111 -> 1083;
1112 -> 1090;
1112 -> 1083;
1113 -> 1090;
1113 -> 1083;
1114 -> 1090;
1114 -> 1083;
1115 -> 1090;
1115 -> 1083;
1116 -> 1083;
1117 -> 1087;
1117 -> 1116;
1117 -> 1083;
1118 -> 1083;
1119 -> 1085;
1119 -> 1118;
1119 -> 1083;
1120 -> 1085;
1120 -> 1090;
1120 -> 1083;
1121 -> 1084;
1121 -> 1090;
1121 -> 1083;
1122 -> 1087;
1122 -> 1090;
1122 -> 1083;
1123 -> 1089;
1123 -> 1090;
1123 -> 1083;
1124 -> 1088;
1124 -> 1090;
1124 -> 1083;
1125 -> 996;
1125 -> 1082;
1125 -> 1068;
1125 -> 1099;
1125 -> 1100;
1125 -> 1101;
1125 -> 1107;
1125 -> 1102;
1125 -> 1106;
1125 -> 1108;
1125 -> 1109;
1125 -> 1121;
1125 -> 1110;
1125 -> 1120;
1125 -> 1111;
1125 -> 1122;
1125 -> 1112;
1125 -> 1123;
1125 -> 1113;
1125 -> 1124;
1125 -> 1114;
1125 -> 1115;
1125 -> 971;
1126 -> 1125;
1126 -> 1103;
1126 -> 1094;
1127 -> 1125;
1127 -> 1094;
1128 -> 973;
1128 -> 1125;
1128 -> 971;
1129 -> 971;
1130 -> 1125;
1130 -> 971;
1131 -> 1128;
1131 -> 1129;
1132 -> 1131;
1132 -> 1128;
1132 -> 1129;
1133 -> 971;
1134 -> 1132;
1134 -> 971;
1135 -> 971;
1136 -> 971;
1137 -> 971;
1138 -> 1137;
1138 -> 971;
1139 -> 971;
1140 -> 1139;
1140 -> 971;
1141 -> 971;
1142 -> 1141;
1142 -> 971;
1143 -> 972;
1143 -> 1134;
1143 -> 971;
1144 -> 971;
1145 -> 1143;
1145 -> 1144;
1145 -> 971;
1146 -> 1145;
1146 -> 971;
1147 -> 971;
1148 -> 1146;
1148 -> 1147;
1148 -> 971;
1149 -> 1148;
1149 -> 971;
1150 -> 971;
1151 -> 1149;
1151 -> 1150;
1151 -> 971;
1152 -> 1151;
1152 -> 971;
1153 -> 0;
1153 -> 971;
1154 -> 1153;
1154 -> 1152;
1154 -> 971;
1155 -> 972;
1155 -> 971;
1156 -> 1134;
1156 -> 971;
1157 -> 1125;
1157 -> 971;
1158 -> 971;
1159 -> 972;
1159 -> 1158;
1160 -> 1159;
1160 -> 1134;
1160 -> 1158;
1161 -> 1160;
1161 -> 971;
1162 -> 971;
1163 -> 972;
1163 -> 1162;
1164 -> 1163;
1164 -> 1134;
1164 -> 1162;
1165 -> 1164;
1165 -> 971;
1166 -> 978;
1166 -> 971;
1167 -> 975;
1167 -> 971;
1168 -> 1141;
1168 -> 971;
1169 -> 1137;
1169 -> 971;
1170 -> 1139;
1170 -> 971;
1171 -> 1154;
1171 -> 971;
1172 -> 974;
1172 -> 971;
1173 -> 1135;
1173 -> 971;
1174 -> 1136;
1174 -> 971;
1175 -> 1155;
1175 -> 1156;
1175 -> 1157;
1175 -> 1161;
1175 -> 1165;
1175 -> 1166;
1175 -> 1167;
1175 -> 1168;
1175 -> 1169;
1175 -> 1170;
1175 -> 1171;
1175 -> 1172;
1175 -> 1173;
1175 -> 1174;
1175 -> 973;
1175 -> 1134;
1175 -> 1125;
1175 -> 1142;
1175 -> 1138;
1175 -> 1140;
1175 -> 0;
1175 -> 971;
1176 -> 971;
1177 -> 1175;
1177 -> 1176;
1178 -> 1175;
1178 -> 1176;
1179 -> 1175;
1179 -> 1176;
1180 -> 1179;
1180 -> 1175;
1180 -> 1176;
1181 -> 1177;
1181 -> 1176;
1182 -> 1176;
1183 -> 1178;
1183 -> 1176;
1184 -> 1180;
1184 -> 1181;
1184 -> 1182;
1184 -> 1183;
1184 -> 1175;
1184 -> 1176;
1185 -> 1175;
1185 -> 1176;
1186 -> 1185;
1186 -> 1184;
1186 -> 1176;
1187 -> 1175;
1187 -> 1176;
1188 -> 1187;
1188 -> 1186;
1188 -> 1176;
1189 -> 1175;
1189 -> 1176;
1190 -> 1189;
1190 -> 1188;
1190 -> 1176;
1191 -> 1175;
1191 -> 1176;
1192 -> 1191;
1192 -> 1190;
1192 -> 1176;
1193 -> 1175;
1193 -> 1176;
1194 -> 1176;
1195 -> 1193;
1195 -> 1192;
1195 -> 1194;
1195 -> 1176;
1196 -> 1195;
1197 -> 1196;
1197 -> 1193;
1197 -> 1195;
1198 -> 1193;
1198 -> 1192;
1198 -> 1197;
1198 -> 1195;
1199 -> 1195;
1200 -> 1198;
1200 -> 1199;
1201 -> 1193;
1201 -> 1199;
1202 -> 1201;
1202 -> 1192;
1202 -> 1199;
1203 -> 1202;
1203 -> 1192;
1203 -> 1197;
1203 -> 1199;
1204 -> 1195;
1205 -> 1193;
1205 -> 1192;
1205 -> 1197;
1205 -> 1176;
1206 -> 1193;
1206 -> 1205;
1207 -> 1205;
1208 -> 1206;
1208 -> 1207;
1209 -> 1193;
1209 -> 1207;
1210 -> 1209;
1210 -> 1205;
1210 -> 1207;
1211 -> 1205;
1212 -> 1205;
1212 -> 971;
1213 -> 1205;
1213 -> 971;
1214 -> 1205;
1214 -> 971;
1215 -> 1125;
1215 -> 1214;
1215 -> 1205;
1215 -> 1213;
1215 -> 971;
1216 -> 971;
1217 -> 971;
1218 -> 1217;
1218 -> 971;
1219 -> 1205;
1219 -> 971;
1220 -> 1213;
1220 -> 971;
1221 -> 1215;
1221 -> 971;
1222 -> 1125;
1222 -> 971;
1223 -> 1125;
1223 -> 1215;
1223 -> 971;
1224 -> 975;
1224 -> 971;
1225 -> 978;
1225 -> 971;
1226 -> 1216;
1226 -> 971;
1227 -> 1217;
1227 -> 971;
1228 -> 1219;
1228 -> 1220;
1228 -> 1221;
1228 -> 1222;
1228 -> 1223;
1228 -> 1224;
1228 -> 1225;
1228 -> 1226;
1228 -> 1227;
1228 -> 1215;
1228 -> 1213;
1228 -> 1218;
1228 -> 971;
1229 -> 971;
1230 -> 971;
1231 -> 1230;
1231 -> 1205;
1231 -> 1228;
1231 -> 971;
1232 -> 1205;
1232 -> 1228;
1232 -> 1230;
1232 -> 1231;
1233 -> 1232;
1233 -> 1228;
1233 -> 1231;
1234 -> 1205;
1234 -> 1230;
1234 -> 1228;
1234 -> 1233;
1235 -> 1233;
1236 -> 1234;
1236 -> 1235;
1237 -> 1236;
1237 -> 1234;
1237 -> 1235;
1238 -> 1235;
1239 -> 1236;
1239 -> 1238;
1240 -> 1239;
1240 -> 1235;
1241 -> 1235;
1242 -> 1236;
1242 -> 1241;
1243 -> 1241;
1244 -> 1242;
1244 -> 1243;
1245 -> 1244;
1245 -> 1234;
1245 -> 1243;
1246 -> 1244;
1246 -> 1234;
1246 -> 1245;
1247 -> 1246;
1247 -> 1244;
1247 -> 1245;
1248 -> 1245;
1249 -> 1248;
1249 -> 1244;
1249 -> 1245;
1250 -> 1244;
1250 -> 1246;
1250 -> 1247;
1250 -> 1243;
1251 -> 1250;
1251 -> 1241;
1252 -> 1242;
1252 -> 1246;
1252 -> 1241;
1253 -> 1252;
1253 -> 1235;
1254 -> 1235;
1255 -> 1235;
1256 -> 1237;
1256 -> 1255;
1257 -> 1237;
1257 -> 1255;
1258 -> 1240;
1258 -> 1255;
1259 -> 1253;
1259 -> 1255;
1260 -> 1254;
1260 -> 1255;
1261 -> 1255;
1262 -> 1260;
1262 -> 1261;
1263 -> 1261;
1264 -> 1262;
1264 -> 1263;
1267 -> 1266;
1267 -> 1265;
1268 -> 1265;
1269 -> 1263;
1270 -> 1264;
1270 -> 1269;
1271 -> 0;
1272 -> 0;
1272 -> 1271;
1273 -> 0;
1274 -> 1272;
1274 -> 0;
1274 -> 1273;
1275 -> 1274;
1276 -> 1269;
1277 -> 1270;
1277 -> 1276;
1278 -> 1277;
1278 -> 1276;
1279 -> 1270;
1279 -> 1269;
1280 -> 1263;
1281 -> 1280;
1281 -> 1264;
1281 -> 1263;
1282 -> 1264;
1282 -> 1263;
1283 -> 1262;
1283 -> 1261;
1284 -> 1262;
1284 -> 1261;
1285 -> 1262;
1285 -> 1261;
1286 -> 1262;
1286 -> 1261;
1287 -> 1262;
1287 -> 1261;
1288 -> 1262;
1288 -> 1261;
1289 -> 1262;
1289 -> 1261;
1290 -> 1260;
1290 -> 1255;
1291 -> 1260;
1291 -> 1255;
1292 -> 1260;
1292 -> 1255;
1293 -> 1255;
1294 -> 1256;
1294 -> 1293;
1294 -> 1255;
1295 -> 1255;
1296 -> 1257;
1296 -> 1295;
1296 -> 1255;
1297 -> 1256;
1297 -> 1260;
1297 -> 1255;
1298 -> 1257;
1298 -> 1260;
1298 -> 1255;
1299 -> 1256;
1299 -> 1246;
1299 -> 1247;
1299 -> 1249;
1299 -> 1255;
1300 -> 1255;
1301 -> 1300;
1301 -> 1256;
1301 -> 1246;
1301 -> 1247;
1301 -> 1249;
1301 -> 1255;
1302 -> 1260;
1302 -> 1301;
1304 -> 1303;
1305 -> 1256;
1305 -> 1246;
1305 -> 1300;
1305 -> 1247;
1305 -> 1249;
1305 -> 1301;
1306 -> 1259;
1306 -> 1301;
1307 -> 1300;
1307 -> 1301;
1308 -> 1301;
1309 -> 1301;
1310 -> 1302;
1310 -> 1309;
1311 -> 1305;
1311 -> 1309;
1312 -> 1306;
1312 -> 1309;
1313 -> 1307;
1313 -> 1309;
1314 -> 1308;
1314 -> 1309;
1315 -> 1310;
1315 -> 1309;
1316 -> 1311;
1316 -> 1309;
1317 -> 1312;
1317 -> 1309;
1318 -> 1313;
1318 -> 1309;
1319 -> 1309;
1320 -> 1315;
1320 -> 1319;
1321 -> 1316;
1321 -> 1319;
1322 -> 1317;
1322 -> 1319;
1323 -> 1318;
1323 -> 1319;
1324 -> 1314;
1324 -> 1319;
1325 -> 1319;
1326 -> 1324;
1326 -> 1325;
1327 -> 1325;
1328 -> 1326;
1328 -> 1327;
1329 -> 1327;
1330 -> 1328;
1330 -> 1329;
1331 -> 1330;
1331 -> 1329;
1332 -> 1326;
1332 -> 1325;
1333 -> 1324;
1333 -> 1319;
1334 -> 1324;
1334 -> 1319;
1335 -> 1324;
1335 -> 1319;
1336 -> 1324;
1336 -> 1319;
1337 -> 1324;
1337 -> 1319;
1338 -> 1324;
1338 -> 1319;
1339 -> 1324;
1339 -> 1319;
1340 -> 1319;
1341 -> 1340;
1341 -> 1319;
1342 -> 1304;
1342 -> 1319;
1343 -> 1341;
1343 -> 1342;
1343 -> 1319;
1344 -> 1343;
1344 -> 1324;
1344 -> 1319;
1345 -> 1319;
1346 -> 1345;
1346 -> 1319;
1347 -> 1304;
1347 -> 1319;
1348 -> 1346;
1348 -> 1347;
1348 -> 1319;
1349 -> 1348;
1349 -> 1324;
1349 -> 1319;
1350 -> 1324;
1350 -> 1319;
1351 -> 1324;
1351 -> 1319;
1352 -> 1324;
1352 -> 1319;
1353 -> 1324;
1353 -> 1319;
1354 -> 1319;
1355 -> 1320;
1355 -> 1354;
1355 -> 1319;
1356 -> 1319;
1357 -> 1321;
1357 -> 1356;
1357 -> 1319;
1358 -> 1320;
1358 -> 1324;
1358 -> 1319;
1359 -> 1323;
1359 -> 1324;
1359 -> 1319;
1360 -> 1321;
1360 -> 1324;
1360 -> 1319;
1361 -> 1322;
1361 -> 1324;
1361 -> 1319;
1362 -> 1324;
1362 -> 1319;
1363 -> 1319;
1364 -> 1319;
1365 -> 1362;
1365 -> 1364;
1366 -> 1363;
1366 -> 1364;
1367 -> 1364;
1368 -> 1366;
1368 -> 1367;
1369 -> 1367;
1370 -> 1368;
1370 -> 1369;
1371 -> 1369;
1372 -> 1370;
1372 -> 1371;
1373 -> 1371;
1374 -> 1372;
1374 -> 1373;
1375 -> 1374;
1375 -> 1373;
1376 -> 1370;
1376 -> 1369;
1377 -> 1370;
1377 -> 1369;
1378 -> 1368;
1378 -> 1367;
1379 -> 1368;
1379 -> 1367;
1380 -> 1368;
1380 -> 1367;
1381 -> 1366;
1381 -> 1364;
1382 -> 1364;
1383 -> 1365;
1383 -> 1382;
1383 -> 1364;
1384 -> 1365;
1384 -> 1366;
1384 -> 1364;
1385 -> 1363;
1385 -> 1324;
1385 -> 1319;
1386 -> 1324;
1386 -> 1319;
1387 -> 1386;
1387 -> 1331;
1387 -> 1332;
1387 -> 1358;
1387 -> 1359;
1387 -> 1360;
1387 -> 1385;
1387 -> 1337;
1387 -> 1338;
1387 -> 1339;
1387 -> 1344;
1387 -> 1349;
1387 -> 1361;
1387 -> 1351;
1387 -> 1352;
1387 -> 1353;
1387 -> 1343;
1387 -> 1348;
1387 -> 1278;
1387 -> 1279;
1387 -> 1281;
1387 -> 1282;
1387 -> 1283;
1387 -> 1284;
1387 -> 1285;
1387 -> 1286;
1387 -> 1287;
1387 -> 1288;
1387 -> 1289;
1387 -> 1297;
1387 -> 1298;
1387 -> 1292;
1387 -> 1280;
1387 -> 1305;
1387 -> 1375;
1387 -> 1376;
1387 -> 1377;
1387 -> 1378;
1387 -> 1379;
1387 -> 1380;
1387 -> 1384;
1387 -> 1319;
1388 -> 1387;
1388 -> 1324;
1388 -> 1319;
1389 -> 1309;
1390 -> 1313;
1390 -> 1389;
1390 -> 1309;
1391 -> 1308;
1391 -> 1300;
1391 -> 1299;
1391 -> 1301;
1392 -> 1299;
1392 -> 1255;
1393 -> 1392;
1393 -> 1299;
1393 -> 1391;
1393 -> 1387;
1393 -> 1388;
1393 -> 1255;
1394 -> 1393;
1394 -> 1260;
1394 -> 1255;
1395 -> 1258;
1395 -> 1260;
1395 -> 1255;
1396 -> 1254;
1396 -> 1233;
1397 -> 1396;
1397 -> 1232;
1397 -> 1233;
1398 -> 1230;
1398 -> 1233;
1399 -> 1229;
1399 -> 1398;
1399 -> 1233;
1400 -> 1205;
1400 -> 1230;
1400 -> 1393;
1400 -> 1394;
1400 -> 1395;
1400 -> 1231;
1401 -> 1231;
1402 -> 1400;
1402 -> 1401;
1403 -> 1231;
1404 -> 1232;
1404 -> 1228;
1404 -> 1397;
1404 -> 1403;
1405 -> 1404;
1405 -> 1400;
1405 -> 1403;
1406 -> 1402;
1406 -> 1405;
1406 -> 1231;
1407 -> 1400;
1408 -> 1407;
1408 -> 1400;
1409 -> 1400;
1410 -> 1400;
1411 -> 1400;
1412 -> 1400;
1413 -> 1400;
1414 -> 1400;
1415 -> 1400;
1416 -> 1400;
1417 -> 1400;
1418 -> 1400;
1419 -> 1400;
1420 -> 1400;
1421 -> 1400;
1422 -> 1400;
1423 -> 1400;
1424 -> 1231;
1424 -> 1400;
1425 -> 1229;
1425 -> 1399;
1425 -> 1424;
1425 -> 1400;
1426 -> 1400;
1427 -> 1400;
1428 -> 1400;
1428 -> 1423;
1428 -> 1427;
1429 -> 1428;
1429 -> 1400;
1429 -> 1427;
1430 -> 1426;
1430 -> 1429;
1430 -> 1400;
1431 -> 1426;
1431 -> 1400;
1432 -> 1426;
1432 -> 1400;
1433 -> 1426;
1434 -> 1426;
1435 -> 1426;
1436 -> 1426;
1437 -> 1426;
1438 -> 1426;
1439 -> 1426;
1440 -> 1426;
1441 -> 1426;
1442 -> 1426;
1442 -> 1422;
1442 -> 1400;
1443 -> 1426;
1443 -> 1400;
1444 -> 1400;
1445 -> 1400;
1445 -> 1443;
1445 -> 1427;
1446 -> 1445;
1446 -> 1426;
1446 -> 1427;
1447 -> 1426;
1448 -> 1447;
1448 -> 1426;
1449 -> 1426;
1450 -> 1426;
1451 -> 1426;
1452 -> 1426;
1453 -> 1426;
1454 -> 1426;
1455 -> 1400;
1455 -> 1426;
1456 -> 1229;
1456 -> 1399;
1456 -> 1425;
1456 -> 1455;
1456 -> 1426;
1457 -> 1426;
1458 -> 1426;
1458 -> 1454;
1458 -> 1457;
1459 -> 1458;
1459 -> 1426;
1459 -> 1457;
1460 -> 1426;
1461 -> 972;
1461 -> 971;
1462 -> 973;
1462 -> 1426;
1462 -> 971;
1463 -> 972;
1463 -> 1426;
1463 -> 971;
1464 -> 971;
1466 -> 1125;
1466 -> 971;
1467 -> 971;
1468 -> 1461;
1468 -> 1467;
1469 -> 1462;
1469 -> 1467;
1470 -> 1463;
1470 -> 1467;
1471 -> 1466;
1471 -> 1467;
1472 -> 1464;
1472 -> 1467;
1473 -> 1467;
1474 -> 1472;
1474 -> 1473;
1475 -> 1473;
1476 -> 1474;
1476 -> 1475;
1477 -> 1475;
1478 -> 1476;
1478 -> 1477;
1479 -> 1477;
1480 -> 1478;
1480 -> 1479;
1481 -> 1480;
1481 -> 1479;
1482 -> 1478;
1482 -> 1477;
1483 -> 1475;
1484 -> 1483;
1484 -> 1476;
1484 -> 1475;
1485 -> 1476;
1485 -> 1475;
1486 -> 1474;
1486 -> 1473;
1487 -> 1474;
1487 -> 1473;
1488 -> 1474;
1488 -> 1473;
1489 -> 1474;
1489 -> 1473;
1490 -> 1474;
1490 -> 1473;
1491 -> 1474;
1491 -> 1473;
1492 -> 1474;
1492 -> 1473;
1493 -> 1472;
1493 -> 1467;
1494 -> 1472;
1494 -> 1467;
1495 -> 1472;
1495 -> 1467;
1496 -> 1472;
1496 -> 1467;
1497 -> 1472;
1497 -> 1467;
1498 -> 1472;
1498 -> 1467;
1499 -> 1472;
1499 -> 1467;
1500 -> 1472;
1500 -> 1467;
1501 -> 1472;
1501 -> 1467;
1502 -> 1467;
1503 -> 1502;
1503 -> 1472;
1503 -> 1467;
1504 -> 1467;
1505 -> 1504;
1505 -> 1472;
1505 -> 1467;
1506 -> 1467;
1507 -> 1506;
1507 -> 1472;
1507 -> 1467;
1508 -> 1472;
1508 -> 1467;
1509 -> 1472;
1509 -> 1467;
1510 -> 1467;
1511 -> 1468;
1511 -> 1510;
1511 -> 1467;
1512 -> 1467;
1513 -> 1469;
1513 -> 1512;
1513 -> 1467;
1514 -> 1470;
1514 -> 1467;
1515 -> 1471;
1515 -> 1125;
1515 -> 1467;
1516 -> 1468;
1516 -> 1472;
1516 -> 1467;
1517 -> 1469;
1517 -> 1472;
1517 -> 1467;
1518 -> 1467;
1519 -> 1518;
1519 -> 1471;
1519 -> 1125;
1519 -> 1467;
1520 -> 1472;
1520 -> 1467;
1521 -> 1467;
1522 -> 1468;
1522 -> 1521;
1523 -> 1522;
1523 -> 1463;
1523 -> 1521;
1524 -> 1523;
1524 -> 1467;
1525 -> 1470;
1525 -> 1467;
1526 -> 1467;
1527 -> 1467;
1528 -> 1520;
1528 -> 1527;
1529 -> 1524;
1529 -> 1527;
1530 -> 1525;
1530 -> 1527;
1531 -> 1526;
1531 -> 1527;
1532 -> 1527;
1533 -> 1531;
1533 -> 1532;
1534 -> 1532;
1535 -> 1533;
1535 -> 1534;
1536 -> 1534;
1537 -> 1535;
1537 -> 1536;
1538 -> 1537;
1538 -> 1536;
1539 -> 1533;
1539 -> 1532;
1540 -> 1531;
1540 -> 1527;
1541 -> 0;
1541 -> 1531;
1541 -> 1527;
1542 -> 1531;
1542 -> 1527;
1543 -> 1531;
1543 -> 1527;
1544 -> 1531;
1544 -> 1527;
1545 -> 1531;
1545 -> 1527;
1546 -> 1531;
1546 -> 1527;
1547 -> 1527;
1548 -> 1528;
1548 -> 1547;
1548 -> 1527;
1549 -> 1528;
1549 -> 1531;
1549 -> 1527;
1550 -> 1529;
1550 -> 1531;
1550 -> 1527;
1551 -> 1530;
1551 -> 1531;
1551 -> 1527;
1552 -> 1519;
1552 -> 1526;
1552 -> 1538;
1552 -> 1539;
1552 -> 1549;
1552 -> 1541;
1552 -> 1550;
1552 -> 1543;
1552 -> 1544;
1552 -> 1545;
1552 -> 1551;
1552 -> 1481;
1552 -> 1482;
1552 -> 1484;
1552 -> 1485;
1552 -> 1486;
1552 -> 1487;
1552 -> 1488;
1552 -> 1489;
1552 -> 1490;
1552 -> 1491;
1552 -> 1492;
1552 -> 1516;
1552 -> 1494;
1552 -> 1517;
1552 -> 1496;
1552 -> 1497;
1552 -> 1498;
1552 -> 1499;
1552 -> 1500;
1552 -> 1501;
1552 -> 1503;
1552 -> 1505;
1552 -> 1507;
1552 -> 1508;
1552 -> 1509;
1552 -> 1483;
1552 -> 1523;
1552 -> 1502;
1552 -> 1504;
1552 -> 1506;
1552 -> 1467;
1553 -> 1467;
1554 -> 1468;
1554 -> 1553;
1555 -> 1554;
1555 -> 1552;
1555 -> 1553;
1556 -> 1555;
1556 -> 1467;
1557 -> 1556;
1557 -> 1467;
1558 -> 1471;
1558 -> 1467;
1559 -> 1519;
1559 -> 1552;
1559 -> 1467;
1560 -> 1559;
1560 -> 1472;
1560 -> 1467;
1561 -> 1467;
1562 -> 1468;
1562 -> 1561;
1563 -> 1562;
1563 -> 1552;
1563 -> 1561;
1564 -> 1563;
1564 -> 1467;
1565 -> 1564;
1565 -> 1552;
1565 -> 1560;
1565 -> 1467;
1566 -> 971;
1567 -> 971;
1568 -> 1205;
1568 -> 1567;
1568 -> 971;
1569 -> 1568;
1570 -> 1205;
1570 -> 1552;
1570 -> 1560;
1570 -> 1569;
1571 -> 1570;
1571 -> 971;
1572 -> 971;
1573 -> 1571;
1573 -> 1572;
1574 -> 1464;
1574 -> 1572;
1575 -> 1572;
1576 -> 1574;
1576 -> 1552;
1576 -> 1575;
1576 -> 1572;
1577 -> 1573;
1577 -> 1574;
1577 -> 1572;
1578 -> 971;
1579 -> 971;
1580 -> 971;
1581 -> 1205;
1581 -> 1552;
1581 -> 1580;
1581 -> 971;
1582 -> 971;
1583 -> 1582;
1583 -> 971;
1584 -> 1464;
1584 -> 971;
1585 -> 1125;
1585 -> 971;
1586 -> 1581;
1586 -> 971;
1587 -> 1205;
1587 -> 971;
1588 -> 1579;
1588 -> 971;
1589 -> 1582;
1589 -> 971;
1590 -> 971;
1591 -> 1584;
1591 -> 1590;
1592 -> 1585;
1592 -> 1590;
1593 -> 1586;
1593 -> 1590;
1594 -> 1587;
1594 -> 1590;
1595 -> 1588;
1595 -> 1590;
1596 -> 1589;
1596 -> 1590;
1597 -> 1590;
1598 -> 1591;
1598 -> 1597;
1599 -> 1598;
1599 -> 1552;
1599 -> 1560;
1599 -> 1597;
1600 -> 1599;
1600 -> 1590;
1601 -> 1590;
1602 -> 1601;
1602 -> 1592;
1602 -> 1125;
1602 -> 1590;
1603 -> 1600;
1603 -> 1552;
1603 -> 1559;
1603 -> 1602;
1603 -> 1590;
1604 -> 1590;
1605 -> 1600;
1605 -> 1552;
1605 -> 1559;
1605 -> 1604;
1605 -> 1590;
1606 -> 1605;
1606 -> 1590;
1607 -> 1590;
1608 -> 1590;
1609 -> 1608;
1609 -> 1600;
1609 -> 1552;
1609 -> 1559;
1609 -> 1590;
1610 -> 1609;
1611 -> 1610;
1611 -> 1609;
1612 -> 1593;
1612 -> 1611;
1613 -> 1612;
1613 -> 1609;
1614 -> 1612;
1614 -> 1609;
1615 -> 1609;
1616 -> 1609;
1617 -> 1616;
1617 -> 1612;
1617 -> 1609;
1618 -> 1617;
1619 -> 1594;
1619 -> 1552;
1619 -> 1560;
1619 -> 1577;
1619 -> 1618;
1619 -> 1617;
1620 -> 1617;
1621 -> 1594;
1621 -> 1552;
1621 -> 1560;
1621 -> 1577;
1621 -> 1620;
1621 -> 1617;
1622 -> 1607;
1622 -> 1616;
1622 -> 1617;
1623 -> 1621;
1623 -> 1552;
1623 -> 1560;
1623 -> 1577;
1623 -> 1559;
1623 -> 1622;
1623 -> 1617;
1624 -> 1623;
1624 -> 1552;
1624 -> 1559;
1624 -> 1617;
1625 -> 1623;
1625 -> 1552;
1625 -> 1559;
1625 -> 1617;
1626 -> 1594;
1626 -> 1625;
1627 -> 1623;
1627 -> 1625;
1628 -> 1615;
1628 -> 1625;
1629 -> 1625;
1630 -> 1626;
1630 -> 1629;
1631 -> 1627;
1631 -> 1629;
1632 -> 1628;
1632 -> 1629;
1633 -> 1631;
1633 -> 1552;
1633 -> 1559;
1633 -> 1629;
1634 -> 1631;
1634 -> 1552;
1634 -> 1559;
1634 -> 1629;
1635 -> 1630;
1635 -> 1552;
1635 -> 1560;
1635 -> 1577;
1635 -> 1631;
1635 -> 1559;
1635 -> 1629;
1636 -> 1635;
1636 -> 1629;
1637 -> 1629;
1638 -> 1631;
1638 -> 1552;
1638 -> 1559;
1638 -> 1637;
1638 -> 1629;
1639 -> 1635;
1639 -> 1629;
1640 -> 1639;
1640 -> 1616;
1640 -> 1614;
1640 -> 1625;
1641 -> 1623;
1641 -> 1552;
1641 -> 1559;
1641 -> 1616;
1641 -> 1613;
1641 -> 1617;
1642 -> 1607;
1642 -> 1617;
1643 -> 1621;
1643 -> 1552;
1643 -> 1560;
1643 -> 1577;
1643 -> 1559;
1643 -> 1642;
1643 -> 1617;
1644 -> 1643;
1644 -> 1552;
1644 -> 1559;
1644 -> 1617;
1645 -> 1643;
1645 -> 1552;
1645 -> 1559;
1645 -> 1617;
1646 -> 1594;
1646 -> 1645;
1647 -> 1643;
1647 -> 1645;
1648 -> 1645;
1649 -> 1646;
1649 -> 1648;
1650 -> 1647;
1650 -> 1648;
1651 -> 1650;
1651 -> 1552;
1651 -> 1559;
1651 -> 1648;
1652 -> 1650;
1652 -> 1552;
1652 -> 1559;
1652 -> 1648;
1653 -> 1649;
1653 -> 1552;
1653 -> 1560;
1653 -> 1577;
1653 -> 1650;
1653 -> 1559;
1653 -> 1648;
1654 -> 1653;
1654 -> 1648;
1655 -> 1648;
1656 -> 1650;
1656 -> 1552;
1656 -> 1559;
1656 -> 1655;
1656 -> 1648;
1657 -> 1653;
1657 -> 1648;
1658 -> 1657;
1658 -> 1617;
1658 -> 1614;
1658 -> 1645;
1659 -> 1643;
1659 -> 1552;
1659 -> 1559;
1659 -> 1617;
1659 -> 1613;
1660 -> 1613;
1660 -> 1609;
1661 -> 1660;
1661 -> 1613;
1661 -> 1641;
1661 -> 1659;
1661 -> 1552;
1661 -> 1560;
1661 -> 1577;
1661 -> 1559;
1661 -> 1609;
1662 -> 1614;
1662 -> 1609;
1663 -> 1662;
1663 -> 1614;
1663 -> 1640;
1663 -> 1658;
1663 -> 1661;
1663 -> 1609;
1664 -> 1632;
1664 -> 1609;
1665 -> 1661;
1665 -> 1663;
1665 -> 1664;
1665 -> 1609;
1666 -> 1609;
1667 -> 1600;
1667 -> 1608;
1667 -> 1552;
1667 -> 1560;
1667 -> 1577;
1667 -> 1559;
1667 -> 1665;
1667 -> 1609;
1668 -> 1665;
1668 -> 1609;
1669 -> 1591;
1669 -> 1609;
1670 -> 1609;
1671 -> 1668;
1671 -> 1670;
1672 -> 1669;
1672 -> 1670;
1673 -> 1667;
1673 -> 1670;
1674 -> 1670;
1675 -> 1671;
1675 -> 1674;
1675 -> 1670;
1676 -> 1670;
1677 -> 1673;
1677 -> 1676;
1678 -> 1676;
1679 -> 1677;
1679 -> 1667;
1679 -> 1678;
1679 -> 1676;
1680 -> 1670;
1681 -> 1671;
1681 -> 1673;
1681 -> 1670;
1682 -> 1609;
1683 -> 1607;
1683 -> 1612;
1683 -> 1609;
1684 -> 1606;
1684 -> 1590;
1685 -> 971;
1686 -> 971;
1687 -> 1229;
1687 -> 1399;
1687 -> 1425;
1687 -> 1456;
1687 -> 1686;
1687 -> 971;
1688 -> 1205;
1688 -> 1687;
1689 -> 1229;
1689 -> 1687;
1690 -> 1464;
1690 -> 1687;
1691 -> 1205;
1691 -> 1687;
1692 -> 1595;
1692 -> 1687;
1693 -> 1687;
1694 -> 1689;
1694 -> 1693;
1695 -> 1690;
1695 -> 1693;
1696 -> 1691;
1696 -> 1693;
1697 -> 1691;
1697 -> 1693;
1698 -> 1692;
1698 -> 1693;
1699 -> 1693;
1700 -> 1694;
1700 -> 1229;
1700 -> 1399;
1700 -> 1425;
1700 -> 1456;
1700 -> 1699;
1700 -> 1693;
1701 -> 1693;
1702 -> 1695;
1702 -> 1701;
1703 -> 1702;
1703 -> 1667;
1703 -> 1701;
1704 -> 1703;
1704 -> 1693;
1705 -> 1693;
1706 -> 1704;
1706 -> 1705;
1706 -> 1693;
1707 -> 1694;
1707 -> 1693;
1708 -> 1696;
1708 -> 1707;
1708 -> 1667;
1708 -> 1681;
1709 -> 1707;
1710 -> 1708;
1710 -> 1709;
1710 -> 1707;
1711 -> 1696;
1711 -> 1707;
1711 -> 1708;
1711 -> 1710;
1712 -> 1711;
1712 -> 1710;
1713 -> 1697;
1713 -> 1710;
1714 -> 1697;
1714 -> 1711;
1714 -> 1707;
1714 -> 1710;
1715 -> 1698;
1715 -> 1710;
1716 -> 1695;
1716 -> 1710;
1717 -> 1710;
1718 -> 1712;
1718 -> 1717;
1719 -> 1713;
1719 -> 1717;
1720 -> 1714;
1720 -> 1717;
1721 -> 1715;
1721 -> 1717;
1722 -> 1716;
1722 -> 1717;
1723 -> 1720;
1723 -> 1711;
1723 -> 1717;
1724 -> 1720;
1724 -> 1711;
1724 -> 1717;
1725 -> 1720;
1725 -> 1711;
1725 -> 1717;
1726 -> 1717;
1727 -> 1725;
1727 -> 1726;
1728 -> 1727;
1728 -> 1711;
1728 -> 1726;
1729 -> 1728;
1729 -> 1717;
1730 -> 1729;
1730 -> 1711;
1730 -> 1717;
1731 -> 1717;
1732 -> 1717;
1733 -> 1732;
1733 -> 1730;
1733 -> 1717;
1734 -> 1718;
1734 -> 1711;
1734 -> 1732;
1734 -> 1733;
1735 -> 1734;
1735 -> 1733;
1736 -> 1734;
1736 -> 1733;
1737 -> 1733;
1738 -> 1718;
1738 -> 1737;
1739 -> 1738;
1739 -> 1734;
1739 -> 1737;
1740 -> 1739;
1740 -> 1733;
1741 -> 1731;
1741 -> 1733;
1742 -> 1735;
1742 -> 1733;
1743 -> 1733;
1744 -> 1734;
1744 -> 1733;
1745 -> 1740;
1745 -> 1741;
1745 -> 1742;
1745 -> 1743;
1745 -> 1744;
1745 -> 1734;
1745 -> 1735;
1745 -> 1733;
1746 -> 1733;
1747 -> 1733;
1748 -> 1747;
1748 -> 1734;
1748 -> 1733;
1749 -> 1735;
1749 -> 1733;
1750 -> 1749;
1750 -> 1745;
1750 -> 1733;
1751 -> 1736;
1751 -> 1733;
1752 -> 1746;
1752 -> 1733;
1753 -> 1750;
1753 -> 1751;
1753 -> 1752;
1753 -> 1733;
1754 -> 1729;
1754 -> 1732;
1754 -> 1711;
1754 -> 1753;
1754 -> 1733;
1755 -> 1753;
1755 -> 1733;
1756 -> 1722;
1756 -> 1733;
1757 -> 1733;
1758 -> 1755;
1758 -> 1757;
1759 -> 1756;
1759 -> 1757;
1760 -> 1754;
1760 -> 1757;
1761 -> 1757;
1762 -> 1758;
1762 -> 1761;
1762 -> 1757;
1763 -> 1757;
1764 -> 1760;
1764 -> 1763;
1765 -> 1763;
1766 -> 1764;
1766 -> 1754;
1766 -> 1765;
1766 -> 1763;
1767 -> 1757;
1768 -> 1733;
1769 -> 1731;
1769 -> 1734;
1769 -> 1733;
1770 -> 1710;
1771 -> 1721;
1771 -> 1758;
1772 -> 1695;
1772 -> 1758;
1773 -> 1758;
1774 -> 1772;
1774 -> 1758;
1775 -> 1758;
1776 -> 1758;
1777 -> 1758;
1778 -> 1758;
1778 -> 1777;
1779 -> 1778;
1779 -> 1758;
1779 -> 1777;
1780 -> 1773;
1780 -> 1779;
1781 -> 1778;
1781 -> 1779;
1782 -> 1758;
1782 -> 1779;
1783 -> 1779;
1784 -> 1780;
1784 -> 1783;
1785 -> 1781;
1785 -> 1783;
1786 -> 1782;
1786 -> 1783;
1787 -> 1785;
1787 -> 1758;
1787 -> 1783;
1788 -> 1785;
1788 -> 1758;
1788 -> 1783;
1789 -> 1784;
1789 -> 1783;
1790 -> 1783;
1791 -> 1785;
1791 -> 1758;
1791 -> 1790;
1791 -> 1783;
1792 -> 1784;
1792 -> 1777;
1792 -> 1758;
1792 -> 1779;
1793 -> 1758;
1793 -> 1777;
1793 -> 1779;
1794 -> 1771;
1794 -> 1779;
1795 -> 1779;
1796 -> 1793;
1796 -> 1795;
1797 -> 1794;
1797 -> 1795;
1798 -> 1795;
1799 -> 1795;
1800 -> 1797;
1800 -> 1799;
1800 -> 1795;
1801 -> 1800;
1802 -> 1796;
1802 -> 1795;
1803 -> 1795;
1804 -> 1795;
1805 -> 1802;
1805 -> 1804;
1806 -> 1803;
1806 -> 1804;
1807 -> 1804;
1808 -> 1806;
1808 -> 1804;
1809 -> 1806;
1809 -> 1804;
1810 -> 1804;
1811 -> 1805;
1811 -> 1810;
1811 -> 1804;
1812 -> 1805;
1812 -> 1806;
1812 -> 1804;
1813 -> 1806;
1813 -> 1804;
1814 -> 1804;
1815 -> 1804;
1816 -> 1813;
1816 -> 1815;
1817 -> 1814;
1817 -> 1815;
1818 -> 1814;
1818 -> 1815;
1819 -> 1815;
1820 -> 1818;
1820 -> 1815;
1821 -> 1818;
1821 -> 1815;
1822 -> 1818;
1822 -> 1815;
1823 -> 1815;
1824 -> 1816;
1824 -> 1823;
1824 -> 1815;
1825 -> 1815;
1826 -> 1817;
1826 -> 1825;
1826 -> 1815;
1827 -> 1816;
1827 -> 1818;
1827 -> 1815;
1828 -> 1817;
1828 -> 1818;
1828 -> 1815;
1829 -> 1818;
1829 -> 1815;
1830 -> 1815;
1831 -> 1815;
1832 -> 1829;
1832 -> 1831;
1833 -> 1830;
1833 -> 1831;
1834 -> 1831;
1835 -> 1833;
1835 -> 1831;
1836 -> 1833;
1836 -> 1831;
1837 -> 1831;
1838 -> 1832;
1838 -> 1837;
1838 -> 1831;
1839 -> 1832;
1839 -> 1833;
1839 -> 1831;
1840 -> 0;
1840 -> 1833;
1840 -> 1831;
1841 -> 1830;
1841 -> 1818;
1841 -> 1815;
1842 -> 1814;
1842 -> 1806;
1842 -> 1804;
1843 -> 1796;
1843 -> 1795;
1844 -> 1803;
1844 -> 1795;
1845 -> 1801;
1845 -> 1843;
1845 -> 1844;
1845 -> 1795;
1846 -> 1803;
1846 -> 1795;
1847 -> 1846;
1847 -> 1779;
1848 -> 1847;
1848 -> 1777;
1848 -> 1758;
1848 -> 1779;
1849 -> 1796;
1849 -> 1801;
1850 -> 1798;
1850 -> 1801;
1851 -> 1801;
1851 -> 1849;
1851 -> 1850;
1851 -> 1758;
1851 -> 1845;
1851 -> 1806;
1851 -> 1812;
1851 -> 1842;
1851 -> 1818;
1851 -> 1827;
1851 -> 1828;
1851 -> 1841;
1851 -> 1833;
1851 -> 1840;
1851 -> 1839;
1852 -> 1851;
1853 -> 1851;
1854 -> 1851;
1855 -> 1851;
1856 -> 1851;
1857 -> 1851;
1858 -> 1851;
1859 -> 1851;
1860 -> 1851;
1861 -> 1851;
1862 -> 1851;
1863 -> 1851;
1864 -> 1863;
1864 -> 1777;
1864 -> 1758;
1864 -> 1851;
1865 -> 1758;
1865 -> 1792;
1865 -> 1848;
1865 -> 1864;
1865 -> 1851;
1866 -> 1774;
1866 -> 1758;
1867 -> 1758;
1868 -> 1865;
1868 -> 1867;
1868 -> 1758;
1869 -> 1758;
1870 -> 1865;
1870 -> 1869;
1871 -> 1869;
1872 -> 1870;
1872 -> 1865;
1872 -> 1871;
1872 -> 1869;
1873 -> 1758;
1874 -> 1758;
1875 -> 1695;
1875 -> 1865;
1876 -> 1875;
1876 -> 1865;
1877 -> 1865;
1878 -> 1865;
1879 -> 1865;
1880 -> 1865;
1881 -> 1865;
1882 -> 1865;
1883 -> 1876;
1883 -> 1865;
1884 -> 1865;
1885 -> 1865;
1886 -> 1865;
1886 -> 1885;
1887 -> 1885;
1888 -> 1886;
1888 -> 1865;
1888 -> 1887;
1888 -> 1885;
1889 -> 1865;
1890 -> 1865;
1891 -> 1693;
1892 -> 1693;
1893 -> 1695;
1893 -> 1892;
1894 -> 1893;
1894 -> 1865;
1894 -> 1892;
1895 -> 1894;
1895 -> 1693;
1896 -> 1693;
1897 -> 1693;
1898 -> 1895;
1898 -> 1897;
1899 -> 1897;
1900 -> 1898;
1900 -> 1899;
1901 -> 1899;
1902 -> 1900;
1902 -> 1895;
1902 -> 1901;
1902 -> 1899;
1903 -> 1897;
1904 -> 1898;
1904 -> 1895;
1904 -> 1897;
1905 -> 1694;
1905 -> 1693;
1906 -> 1697;
1906 -> 1895;
1906 -> 1905;
1907 -> 1906;
1907 -> 1895;
1907 -> 1905;
1908 -> 1906;
1908 -> 1895;
1908 -> 1905;
1909 -> 1696;
1909 -> 1905;
1909 -> 1895;
1910 -> 1905;
1911 -> 1909;
1911 -> 1910;
1912 -> 1891;
1912 -> 1905;
1913 -> 1696;
1913 -> 1905;
1913 -> 1911;
1914 -> 1905;
1915 -> 1913;
1915 -> 1914;
1916 -> 1906;
1916 -> 1895;
1916 -> 1905;
1917 -> 1916;
1917 -> 1913;
1917 -> 1905;
1918 -> 1905;
1919 -> 1891;
1919 -> 1912;
1919 -> 1918;
1919 -> 1905;
1920 -> 1704;
1920 -> 1905;
1921 -> 1905;
1922 -> 1920;
1922 -> 1921;
1923 -> 1906;
1923 -> 1895;
1923 -> 1921;
1924 -> 1921;
1925 -> 1923;
1925 -> 1913;
1925 -> 1924;
1925 -> 1921;
1926 -> 1922;
1926 -> 1923;
1926 -> 1921;
1927 -> 1905;
1928 -> 1697;
1928 -> 1913;
1928 -> 1926;
1928 -> 1905;
1929 -> 1928;
1929 -> 1913;
1929 -> 1905;
1930 -> 1928;
1930 -> 1913;
1930 -> 1905;
1931 -> 1696;
1931 -> 1905;
1931 -> 1913;
1931 -> 1926;
1932 -> 1931;
1932 -> 1914;
1933 -> 1928;
1933 -> 1913;
1933 -> 1905;
1934 -> 1696;
1934 -> 1933;
1934 -> 1931;
1935 -> 1933;
1936 -> 1934;
1936 -> 1935;
1937 -> 1928;
1937 -> 1934;
1937 -> 1924;
1937 -> 1921;
1938 -> 1934;
1938 -> 1905;
1939 -> 1934;
1939 -> 1905;
1940 -> 1934;
1940 -> 1914;
1941 -> 1934;
1942 -> 1934;
1942 -> 1924;
1942 -> 1921;
1943 -> 1891;
1943 -> 1912;
1943 -> 1693;
1944 -> 1693;
1945 -> 1865;
1945 -> 1944;
1945 -> 1693;
1946 -> 1865;
1946 -> 1934;
1946 -> 1945;
1947 -> 1704;
1947 -> 1946;
1948 -> 1946;
1949 -> 1947;
1949 -> 1948;
1950 -> 1948;
1951 -> 1946;
1952 -> 1949;
1953 -> 1687;
1954 -> 972;
1954 -> 1934;
1954 -> 971;
1955 -> 972;
1955 -> 1934;
1955 -> 1954;
1956 -> 973;
1956 -> 1934;
1956 -> 1955;
1957 -> 1229;
1957 -> 1955;
1958 -> 1205;
1958 -> 1955;
1959 -> 1955;
1960 -> 1957;
1960 -> 1959;
1961 -> 1958;
1961 -> 1959;
1962 -> 1958;
1962 -> 1959;
1963 -> 1960;
1963 -> 1959;
1964 -> 1962;
1964 -> 1934;
1964 -> 1949;
1964 -> 1963;
1965 -> 1964;
1965 -> 1934;
1965 -> 1963;
1966 -> 1961;
1966 -> 1963;
1966 -> 1934;
1966 -> 1949;
1967 -> 1963;
1968 -> 1966;
1968 -> 1967;
1968 -> 1963;
1969 -> 1961;
1969 -> 1963;
1969 -> 1966;
1969 -> 1968;
1970 -> 1964;
1970 -> 1934;
1970 -> 1968;
1971 -> 1969;
1971 -> 1970;
1971 -> 1968;
1972 -> 1971;
1972 -> 1963;
1973 -> 1955;
1974 -> 1228;
1974 -> 1955;
1975 -> 1125;
1975 -> 1955;
1976 -> 1205;
1976 -> 1955;
1977 -> 974;
1977 -> 1971;
1977 -> 1955;
1978 -> 1570;
1978 -> 1955;
1979 -> 1464;
1979 -> 1955;
1980 -> 1978;
1980 -> 1955;
1981 -> 1684;
1981 -> 1955;
1982 -> 1955;
1983 -> 1464;
1983 -> 1982;
1984 -> 1982;
1985 -> 1983;
1985 -> 1984;
1986 -> 1985;
1986 -> 1977;
1986 -> 1984;
1987 -> 1986;
1987 -> 1982;
1988 -> 1982;
1989 -> 1955;
1990 -> 1987;
1990 -> 1989;
1991 -> 1989;
1992 -> 1990;
1992 -> 1991;
1993 -> 1991;
1994 -> 1992;
1994 -> 1987;
1994 -> 1993;
1994 -> 1991;
1995 -> 1989;
1996 -> 1990;
1996 -> 1987;
1996 -> 1989;
1997 -> 1955;
1998 -> 1464;
1998 -> 1997;
1999 -> 1997;
2000 -> 1998;
2000 -> 1999;
2001 -> 2000;
2001 -> 1987;
2001 -> 1999;
2002 -> 1997;
2003 -> 1955;
2004 -> 2001;
2004 -> 2003;
2005 -> 2003;
2006 -> 2004;
2006 -> 2005;
2007 -> 2005;
2008 -> 2006;
2008 -> 2001;
2008 -> 2007;
2008 -> 2005;
2009 -> 2003;
2010 -> 2004;
2010 -> 2001;
2010 -> 2003;
2011 -> 973;
2011 -> 1974;
2011 -> 1975;
2011 -> 1976;
2011 -> 1977;
2011 -> 1980;
2011 -> 1981;
2011 -> 1996;
2011 -> 2010;
2011 -> 2001;
2011 -> 1987;
2011 -> 1125;
2011 -> 1971;
2011 -> 1684;
2011 -> 1228;
2011 -> 1955;
2012 -> 972;
2012 -> 2011;
2012 -> 1955;
2013 -> 973;
2013 -> 1955;
2014 -> 973;
2014 -> 972;
2014 -> 1955;
2015 -> 1464;
2015 -> 972;
2015 -> 1955;
2016 -> 971;
2017 -> 974;
2017 -> 2011;
2017 -> 2014;
2017 -> 2015;
2017 -> 971;
2018 -> 975;
2018 -> 2017;
2018 -> 971;
2019 -> 2016;
2019 -> 967;
2020 -> 969;
2020 -> 2018;
2020 -> 2019;
2020 -> 967;
2021 -> 969;
2021 -> 2018;
2021 -> 967;
2022 -> 968;
2022 -> 2021;
2022 -> 967;
2023 -> 965;
2024 -> 964;
2024 -> 2021;
2024 -> 965;
2025 -> 964;
2025 -> 2021;
2025 -> 963;
2026 -> 2025;
2026 -> 961;
2027 -> 962;
2027 -> 2021;
2027 -> 961;
2028 -> 962;
2028 -> 2027;
2028 -> 961;
2029 -> 2028;
2029 -> 959;
2030 -> 2029;
2030 -> 956;
2031 -> 956;
2032 -> 2030;
2032 -> 2031;
2033 -> 957;
2033 -> 2032;
2033 -> 954;
2033 -> 2027;
2033 -> 956;
2034 -> 956;
2035 -> 958;
2035 -> 2034;
2036 -> 2035;
2036 -> 2033;
2036 -> 2034;
2037 -> 2035;
2037 -> 2033;
2037 -> 2034;
2038 -> 2037;
2038 -> 956;
2039 -> 956;
2040 -> 2039;
2040 -> 2038;
2040 -> 2033;
2040 -> 956;
2041 -> 2039;
2041 -> 2040;
2042 -> 2038;
2042 -> 2041;
2042 -> 2039;
2043 -> 2041;
2044 -> 2042;
2044 -> 2043;
2045 -> 953;
2046 -> 952;
2046 -> 953;
2047 -> 953;
2048 -> 953;
2049 -> 2046;
2049 -> 2048;
2050 -> 2047;
2050 -> 2048;
2051 -> 0;
2051 -> 2050;
2051 -> 2048;
2052 -> 2049;
2052 -> 2050;
2052 -> 2048;
2053 -> 2047;
2053 -> 954;
2053 -> 2044;
2053 -> 953;
2054 -> 2053;
2054 -> 2047;
2055 -> 2047;
2056 -> 2054;
2056 -> 2053;
2056 -> 2055;
2056 -> 2047;
2057 -> 2056;
2058 -> 2054;
2058 -> 2056;
2059 -> 2056;
2060 -> 2054;
2060 -> 2059;
2061 -> 2059;
2062 -> 2060;
2062 -> 2053;
2062 -> 2061;
2063 -> 2062;
2063 -> 2053;
2063 -> 2061;
2064 -> 2063;
2064 -> 2059;
2065 -> 2064;
2065 -> 2056;
2066 -> 2056;
2067 -> 2065;
2067 -> 2066;
2068 -> 2066;
2069 -> 2067;
2069 -> 2068;
2070 -> 2069;
2070 -> 2066;
2071 -> 2067;
2071 -> 2066;
2072 -> 2066;
2074 -> 2073;
2076 -> 2075;
2077 -> 2057;
2077 -> 2056;
2078 -> 2056;
2079 -> 2056;
2080 -> 2058;
2080 -> 2079;
2081 -> 2058;
2081 -> 2079;
2082 -> 2070;
2082 -> 2079;
2083 -> 2077;
2083 -> 2079;
2084 -> 2078;
2084 -> 2079;
2085 -> 2079;
2086 -> 2084;
2086 -> 2079;
2087 -> 2084;
2087 -> 2079;
2088 -> 2084;
2088 -> 2079;
2089 -> 2084;
2089 -> 2079;
2090 -> 2084;
2090 -> 2079;
2091 -> 2084;
2091 -> 2079;
2094 -> 2093;
2094 -> 2092;
2096 -> 2095;
2096 -> 2092;
2097 -> 2092;
2100 -> 2099;
2100 -> 2098;
2102 -> 2101;
2102 -> 2098;
2103 -> 2098;
2105 -> 0;
2105 -> 2104;
2107 -> 0;
2107 -> 2106;
2108 -> 2107;
2108 -> 2104;
2109 -> 2104;
2111 -> 0;
2111 -> 2110;
2112 -> 0;
2112 -> 2110;
2113 -> 2110;
2114 -> 2103;
2114 -> 2084;
2114 -> 2079;
2115 -> 2079;
2116 -> 2082;
2116 -> 2115;
2116 -> 2079;
2117 -> 2080;
2117 -> 2084;
2117 -> 2079;
2118 -> 2081;
2118 -> 2084;
2118 -> 2079;
2119 -> 2082;
2119 -> 2084;
2119 -> 2079;
2120 -> 2082;
2120 -> 2070;
2120 -> 2079;
2121 -> 2120;
2121 -> 2070;
2122 -> 2083;
2122 -> 2121;
2122 -> 2057;
2122 -> 2070;
2122 -> 2120;
2123 -> 2057;
2123 -> 2122;
2123 -> 2056;
2124 -> 2057;
2124 -> 2122;
2124 -> 2056;
2125 -> 2054;
2125 -> 2124;
2125 -> 2056;
2126 -> 2078;
2126 -> 2056;
2127 -> 2056;
2128 -> 2125;
2128 -> 2126;
2128 -> 2127;
2128 -> 2084;
2128 -> 2117;
2128 -> 2118;
2128 -> 2119;
2128 -> 2089;
2128 -> 2090;
2128 -> 2091;
2128 -> 2114;
2128 -> 2124;
2128 -> 2100;
2128 -> 2102;
2128 -> 2098;
2128 -> 2056;
2129 -> 2054;
2129 -> 2128;
2129 -> 2047;
2130 -> 2053;
2130 -> 2047;
2131 -> 2130;
2131 -> 2047;
2132 -> 2131;
2132 -> 2129;
2132 -> 2047;
2133 -> 2053;
2133 -> 2047;
2134 -> 2133;
2134 -> 2132;
2134 -> 2047;
2135 -> 953;
2136 -> 2047;
2136 -> 2135;
2137 -> 2047;
2137 -> 2135;
2138 -> 2134;
2138 -> 2135;
2139 -> 2047;
2139 -> 2135;
2140 -> 2135;
2141 -> 2138;
2141 -> 2134;
2141 -> 2140;
2141 -> 2135;
2142 -> 2135;
2143 -> 2138;
2143 -> 2134;
2143 -> 2142;
2143 -> 2135;
2144 -> 2143;
2144 -> 2135;
2145 -> 2136;
2145 -> 2144;
2146 -> 2137;
2146 -> 2144;
2147 -> 2139;
2147 -> 2144;
2148 -> 2144;
2149 -> 2145;
2149 -> 2148;
2150 -> 2146;
2150 -> 2148;
2151 -> 2144;
2151 -> 2148;
2152 -> 2147;
2152 -> 2148;
2153 -> 2144;
2153 -> 2148;
2154 -> 2148;
2155 -> 2153;
2155 -> 2148;
2156 -> 2153;
2156 -> 2148;
2157 -> 2153;
2157 -> 2148;
2158 -> 2149;
2158 -> 2153;
2158 -> 2148;
2159 -> 2151;
2159 -> 2153;
2159 -> 2148;
2160 -> 2150;
2160 -> 2153;
2160 -> 2148;
2161 -> 2153;
2161 -> 2148;
2162 -> 0;
2162 -> 2148;
2163 -> 2161;
2163 -> 2153;
2163 -> 2148;
2164 -> 2152;
2164 -> 2153;
2164 -> 2148;
2165 -> 2151;
2165 -> 2148;
2166 -> 2165;
2167 -> 2165;
2167 -> 2166;
2168 -> 2167;
2168 -> 2166;
2169 -> 2168;
2169 -> 2165;
2170 -> 2165;
2171 -> 954;
2171 -> 2134;
2171 -> 953;
2172 -> 952;
2172 -> 2171;
2172 -> 953;
2173 -> 2144;
2173 -> 953;
2174 -> 953;
2175 -> 2172;
2175 -> 2173;
2175 -> 2174;
2175 -> 2153;
2175 -> 2160;
2175 -> 2164;
2175 -> 2163;
2175 -> 2158;
2175 -> 2159;
2175 -> 2171;
2175 -> 2051;
2175 -> 2052;
2175 -> 2134;
2175 -> 2161;
2175 -> 953;
2176 -> 952;
2176 -> 2175;
2176 -> 951;
2177 -> 2176;
2177 -> 1;
2178 -> 1;
2179 -> 1;
2180 -> 2178;
2180 -> 2179;
2181 -> 2177;
2181 -> 2179;
2182 -> 2181;
2182 -> 2175;
2182 -> 2180;
2182 -> 2179;
2183 -> 2179;
2184 -> 2182;
2184 -> 2183;
2185 -> 2182;
2185 -> 2183;
2186 -> 2183;
2187 -> 2183;
2188 -> 2185;
2188 -> 2182;
2188 -> 2183;
2189 -> 2184;
2189 -> 2188;
2190 -> 2188;
2191 -> 2189;
2191 -> 2190;
2192 -> 2188;
2192 -> 2190;
2193 -> 2190;
2194 -> 2193;
2194 -> 2190;
2195 -> 2190;
2196 -> 2192;
2196 -> 2195;
2197 -> 2195;
2198 -> 2196;
2198 -> 2182;
2198 -> 2197;
2198 -> 2195;
2199 -> 2198;
2200 -> 2196;
2200 -> 2182;
2200 -> 2198;
2201 -> 2199;
2201 -> 2198;
2202 -> 2198;
2203 -> 2201;
2203 -> 2202;
2204 -> 2196;
2204 -> 2202;
2205 -> 2204;
2205 -> 2182;
2205 -> 2202;
2206 -> 2202;
2207 -> 2205;
2207 -> 2206;
2208 -> 2205;
2208 -> 2206;
2209 -> 2207;
2209 -> 2206;
2210 -> 0;
2210 -> 2206;
2211 -> 2209;
2211 -> 2208;
2211 -> 2206;
2212 -> 2204;
2212 -> 2211;
2212 -> 2202;
2213 -> 2212;
2214 -> 2203;
2214 -> 2212;
2215 -> 2212;
2216 -> 2213;
2216 -> 2215;
2217 -> 2214;
2217 -> 2215;
2218 -> 2204;
2218 -> 2215;
2219 -> 2216;
2219 -> 2211;
2219 -> 2215;
2220 -> 2218;
2220 -> 2211;
2220 -> 2219;
2221 -> 2218;
2221 -> 2219;
2222 -> 2216;
2222 -> 2219;
2223 -> 2217;
2223 -> 2219;
2224 -> 2219;
2225 -> 2219;
2226 -> 2220;
2226 -> 2225;
2227 -> 2221;
2227 -> 2225;
2228 -> 2222;
2228 -> 2225;
2229 -> 2223;
2229 -> 2225;
2230 -> 2224;
2230 -> 2225;
2231 -> 2230;
2231 -> 2225;
2232 -> 2230;
2232 -> 2225;
2233 -> 2230;
2233 -> 2225;
2234 -> 2225;
2235 -> 2228;
2235 -> 2234;
2235 -> 2225;
2236 -> 2212;
2237 -> 2224;
2237 -> 2236;
2238 -> 2211;
2238 -> 2236;
2239 -> 2236;
2240 -> 2237;
2240 -> 2239;
2241 -> 2240;
2241 -> 2228;
2241 -> 2229;
2241 -> 2239;
2242 -> 2241;
2242 -> 2236;
2243 -> 2236;
2244 -> 2242;
2244 -> 2236;
2245 -> 2243;
2245 -> 2236;
2246 -> 2238;
2246 -> 2211;
2246 -> 2244;
2246 -> 2245;
2246 -> 2236;
2247 -> 2237;
2247 -> 2242;
2247 -> 2238;
2247 -> 2246;
2248 -> 2202;
2249 -> 2211;
2249 -> 2248;
2250 -> 2249;
2250 -> 2211;
2250 -> 2247;
2250 -> 2246;
2250 -> 2248;
2251 -> 0;
2251 -> 2248;
2252 -> 2249;
2252 -> 2211;
2252 -> 2247;
2252 -> 2248;
2253 -> 2252;
2253 -> 2246;
2254 -> 2252;
2255 -> 2254;
2255 -> 2252;
2256 -> 2253;
2256 -> 2252;
2257 -> 2252;
2258 -> 2256;
2258 -> 2257;
2258 -> 2252;
2259 -> 2253;
2259 -> 2258;
2260 -> 2258;
2261 -> 2259;
2261 -> 2260;
2262 -> 0;
2262 -> 2260;
2263 -> 2262;
2263 -> 2258;
2264 -> 2263;
2264 -> 2258;
2265 -> 2259;
2265 -> 2264;
2266 -> 2252;
2266 -> 2246;
2267 -> 2265;
2267 -> 2252;
2268 -> 2250;
2268 -> 2266;
2268 -> 2267;
2268 -> 2252;
2269 -> 2250;
2269 -> 2248;
2270 -> 2269;
2270 -> 2202;
2271 -> 2204;
2271 -> 2202;
2272 -> 2270;
2272 -> 2202;
2273 -> 2203;
2273 -> 2202;
2274 -> 2202;
2275 -> 2271;
2275 -> 2274;
2276 -> 2272;
2276 -> 2274;
2277 -> 2273;
2277 -> 2274;
2278 -> 2274;
2279 -> 2274;
2280 -> 2274;
2281 -> 2275;
2281 -> 2280;
2282 -> 2280;
2283 -> 2281;
2283 -> 2229;
2283 -> 2282;
2284 -> 2283;
2284 -> 2229;
2284 -> 2282;
2285 -> 2284;
2285 -> 2274;
2286 -> 2274;
2287 -> 2285;
2287 -> 2286;
2288 -> 2274;
2289 -> 2276;
2289 -> 2250;
2289 -> 2274;
2290 -> 2289;
2290 -> 2250;
2290 -> 2268;
2290 -> 2274;
2291 -> 2278;
2291 -> 2290;
2292 -> 2290;
2293 -> 2276;
2293 -> 2290;
2293 -> 2250;
2293 -> 2268;
2293 -> 2229;
2293 -> 2246;
2293 -> 2265;
2294 -> 2293;
2295 -> 2293;
2296 -> 2294;
2296 -> 2295;
2296 -> 2293;
2297 -> 2296;
2297 -> 2293;
2298 -> 2297;
2298 -> 2278;
2298 -> 2291;
2298 -> 2293;
2299 -> 2278;
2299 -> 2291;
2299 -> 2297;
2299 -> 2293;
2300 -> 2293;
2301 -> 2299;
2301 -> 2300;
2301 -> 2293;
2302 -> 2279;
2302 -> 2300;
2302 -> 2293;
2303 -> 2301;
2303 -> 2302;
2303 -> 2293;
2304 -> 2293;
2305 -> 2299;
2305 -> 2304;
2305 -> 2293;
2306 -> 2293;
2306 -> 2297;
2306 -> 2278;
2307 -> 2293;
2308 -> 2294;
2308 -> 2307;
2308 -> 2293;
2309 -> 2202;
2310 -> 2270;
2310 -> 2202;
2311 -> 2198;
2312 -> 2200;
2312 -> 2310;
2312 -> 2311;
2312 -> 2293;
2312 -> 2198;
2313 -> 2312;
2314 -> 2196;
2314 -> 2313;
2315 -> 2313;
2316 -> 2314;
2316 -> 2315;
2317 -> 2315;
2317 -> 2313;
2318 -> 2313;
2319 -> 2314;
2319 -> 2318;
2320 -> 2319;
2320 -> 2312;
2320 -> 2318;
2321 -> 2320;
2321 -> 2313;
2322 -> 2313;
2323 -> 2321;
2323 -> 2322;
2323 -> 2313;
2324 -> 2323;
2324 -> 2313;
2325 -> 2324;
2326 -> 2325;
2326 -> 2312;
2327 -> 2312;
2328 -> 2326;
2328 -> 2327;
2329 -> 2328;
2329 -> 2312;
2329 -> 2327;
2330 -> 2327;
2331 -> 2328;
2331 -> 2312;
2331 -> 2330;
2331 -> 2327;
2332 -> 2331;
2333 -> 2328;
2333 -> 2312;
2333 -> 2331;
2334 -> 2332;
2334 -> 2331;
2335 -> 2331;
2336 -> 2328;
2336 -> 2334;
2336 -> 2327;
2337 -> 2199;
2337 -> 2312;
2338 -> 2312;
2339 -> 2196;
2339 -> 2338;
2340 -> 2338;
2341 -> 2339;
2341 -> 2340;
2342 -> 2340;
2343 -> 2341;
2343 -> 2336;
2343 -> 2342;
2344 -> 2343;
2344 -> 2336;
2344 -> 2342;
2345 -> 2344;
2345 -> 2338;
2346 -> 2338;
2347 -> 2345;
2347 -> 2346;
2348 -> 2346;
2349 -> 2347;
2349 -> 2348;
2350 -> 2349;
2350 -> 2346;
2351 -> 2347;
2351 -> 2346;
2352 -> 2350;
2352 -> 2338;
2353 -> 2312;
2354 -> 2312;
2355 -> 2196;
2355 -> 2354;
2356 -> 2354;
2357 -> 2355;
2357 -> 2356;
2358 -> 2356;
2358 -> 2354;
2359 -> 2354;
2360 -> 2355;
2360 -> 2359;
2361 -> 2360;
2361 -> 2336;
2361 -> 2359;
2362 -> 2354;
2363 -> 2361;
2363 -> 2312;
2364 -> 2196;
2364 -> 2312;
2365 -> 2312;
2366 -> 2364;
2366 -> 2365;
2367 -> 2363;
2367 -> 2365;
2368 -> 2367;
2368 -> 2365;
2369 -> 2366;
2369 -> 2365;
2370 -> 2369;
2370 -> 2336;
2370 -> 2365;
2371 -> 2365;
2372 -> 2368;
2372 -> 2370;
2372 -> 2371;
2372 -> 2365;
2373 -> 2312;
2374 -> 0;
2374 -> 2312;
2375 -> 2312;
2376 -> 2374;
2376 -> 2375;
2377 -> 2196;
2377 -> 2372;
2377 -> 2375;
2378 -> 2377;
2378 -> 2372;
2378 -> 2375;
2379 -> 2376;
2379 -> 2375;
2380 -> 2378;
2380 -> 2379;
2380 -> 2375;
2381 -> 2380;
2381 -> 2312;
2382 -> 2199;
2382 -> 2372;
2382 -> 2380;
2382 -> 2198;
2383 -> 2196;
2383 -> 2382;
2383 -> 2195;
2384 -> 2383;
2384 -> 2190;
2385 -> 2191;
2385 -> 2190;
2386 -> 2193;
2386 -> 2190;
2387 -> 2384;
2387 -> 2385;
2387 -> 2386;
2387 -> 2382;
2387 -> 2194;
2387 -> 2190;
2388 -> 2387;
2388 -> 2190;
2389 -> 2388;
2390 -> 2388;
2390 -> 2389;
2391 -> 2389;
2391 -> 2388;
2392 -> 2391;
2393 -> 2392;
2393 -> 2186;
2393 -> 2391;
2394 -> 2388;
2394 -> 2391;
2395 -> 2393;
2395 -> 2394;
2395 -> 2392;
2395 -> 2388;
2395 -> 2391;
2396 -> 2395;
2397 -> 2395;
2398 -> 2395;
2399 -> 2397;
2399 -> 2398;
2400 -> 2398;
2401 -> 2399;
2401 -> 2395;
2401 -> 2400;
2401 -> 2398;
2402 -> 2401;
2403 -> 2401;
2404 -> 2399;
2404 -> 2395;
2404 -> 2403;
2405 -> 2404;
2405 -> 2395;
2405 -> 2403;
2406 -> 2405;
2406 -> 2401;
2407 -> 0;
2407 -> 2401;
2408 -> 2406;
2408 -> 2401;
2409 -> 2401;
2410 -> 2408;
2410 -> 2409;
2411 -> 2399;
2411 -> 2409;
2412 -> 2409;
2413 -> 2410;
2413 -> 2412;
2413 -> 2409;
2414 -> 2409;
2415 -> 2409;
2416 -> 2409;
2417 -> 2411;
2417 -> 2416;
2418 -> 2416;
2419 -> 2418;
2419 -> 2409;
2420 -> 2419;
2420 -> 2409;
2421 -> 2419;
2421 -> 2409;
2422 -> 2421;
2423 -> 2410;
2423 -> 2409;
2424 -> 0;
2424 -> 2409;
2425 -> 2414;
2425 -> 2409;
2426 -> 2415;
2426 -> 2409;
2427 -> 2420;
2427 -> 2422;
2427 -> 2423;
2427 -> 2424;
2427 -> 2425;
2427 -> 2426;
2427 -> 2406;
2427 -> 2409;
2428 -> 2427;
2428 -> 2409;
2429 -> 2409;
2430 -> 2428;
2430 -> 2429;
2431 -> 2411;
2431 -> 2429;
2432 -> 2429;
2433 -> 2431;
2433 -> 2427;
2433 -> 2432;
2433 -> 2429;
2434 -> 0;
2434 -> 2433;
2435 -> 2430;
2435 -> 2433;
2436 -> 2435;
2436 -> 2427;
2437 -> 2431;
2437 -> 2435;
2438 -> 2435;
2439 -> 2435;
2440 -> 2436;
2440 -> 2439;
2441 -> 2437;
2441 -> 2439;
2442 -> 2436;
2442 -> 2439;
2443 -> 2438;
2443 -> 2439;
2444 -> 2439;
2445 -> 2443;
2445 -> 2439;
2446 -> 2443;
2446 -> 2439;
2447 -> 2443;
2447 -> 2439;
2448 -> 2439;
2449 -> 2440;
2449 -> 2448;
2449 -> 2439;
2450 -> 2439;
2451 -> 2441;
2451 -> 2450;
2451 -> 2439;
2452 -> 2439;
2453 -> 2442;
2453 -> 2452;
2453 -> 2439;
2454 -> 2441;
2454 -> 2443;
2454 -> 2439;
2455 -> 2440;
2455 -> 2443;
2455 -> 2439;
2456 -> 2442;
2456 -> 2443;
2456 -> 2439;
2457 -> 2435;
2458 -> 2438;
2458 -> 2457;
2459 -> 2458;
2459 -> 2455;
2459 -> 2457;
2460 -> 2459;
2460 -> 2435;
2461 -> 2438;
2461 -> 2435;
2462 -> 2434;
2462 -> 2460;
2462 -> 2461;
2462 -> 2435;
2463 -> 2431;
2463 -> 2427;
2463 -> 2433;
2464 -> 2434;
2464 -> 2433;
2465 -> 2433;
2466 -> 2463;
2466 -> 2464;
2466 -> 2465;
2466 -> 2434;
2466 -> 2427;
2466 -> 2462;
2466 -> 2443;
2466 -> 2454;
2466 -> 2455;
2466 -> 2456;
2466 -> 2433;
2467 -> 2409;
2468 -> 2427;
2468 -> 2409;
2469 -> 2409;
2470 -> 2468;
2470 -> 2469;
2471 -> 2411;
2471 -> 2469;
2472 -> 2469;
2473 -> 2471;
2473 -> 2466;
2473 -> 2472;
2473 -> 2469;
2474 -> 2473;
2475 -> 2471;
2475 -> 2474;
2476 -> 2475;
2476 -> 2466;
2476 -> 2474;
2477 -> 2476;
2477 -> 2473;
2478 -> 2473;
2479 -> 2473;
2480 -> 2477;
2480 -> 2479;
2481 -> 2480;
2481 -> 2473;
2482 -> 2473;
2483 -> 2470;
2483 -> 2473;
2484 -> 2483;
2484 -> 2481;
2484 -> 2473;
2485 -> 2484;
2486 -> 2481;
2486 -> 2485;
2487 -> 2477;
2487 -> 2486;
2488 -> 2471;
2488 -> 2486;
2489 -> 2485;
2489 -> 2486;
2490 -> 0;
2491 -> 2490;
2492 -> 2491;
2494 -> 2493;
2495 -> 2494;
2495 -> 2493;
2496 -> 0;
2496 -> 2494;
2496 -> 2493;
2497 -> 0;
2497 -> 2494;
2497 -> 2493;
2498 -> 2494;
2498 -> 2493;
2499 -> 2494;
2499 -> 2493;
2500 -> 2494;
2500 -> 2493;
2501 -> 2494;
2501 -> 2493;
2503 -> 2502;
2504 -> 2502;
2505 -> 2504;
2506 -> 2504;
2508 -> 2507;
2510 -> 2509;
2512 -> 2511;
2514 -> 2513;
2516 -> 2514;
2516 -> 2515;
2517 -> 2516;
2519 -> 2518;
2521 -> 2520;
2523 -> 2522;
2525 -> 2524;
2535 -> 2527;
2535 -> 2526;
2536 -> 2528;
2536 -> 2526;
2537 -> 2529;
2537 -> 2526;
2538 -> 2530;
2538 -> 2526;
2539 -> 2531;
2539 -> 2526;
2540 -> 2532;
2540 -> 2526;
2541 -> 2533;
2541 -> 2526;
2542 -> 2534;
2542 -> 2526;
2543 -> 2526;
2544 -> 2506;
2544 -> 2504;
2545 -> 2544;
2545 -> 2505;
2546 -> 2505;
2548 -> 2547;
2550 -> 0;
2552 -> 2550;
2552 -> 2551;
2553 -> 2551;
2554 -> 2553;
2554 -> 2551;
2555 -> 2552;
2555 -> 2553;
2555 -> 2551;
2556 -> 2551;
2557 -> 0;
2559 -> 2557;
2559 -> 2558;
2560 -> 2558;
2561 -> 2560;
2561 -> 2558;
2562 -> 2559;
2562 -> 2560;
2562 -> 2558;
2563 -> 2558;
2564 -> 0;
2566 -> 2564;
2566 -> 2565;
2567 -> 2565;
2568 -> 2567;
2568 -> 2565;
2569 -> 2566;
2569 -> 2567;
2569 -> 2565;
2570 -> 2565;
2571 -> 0;
2573 -> 2571;
2573 -> 2572;
2574 -> 2572;
2575 -> 2574;
2575 -> 2572;
2576 -> 2573;
2576 -> 2574;
2576 -> 2572;
2577 -> 2572;
2578 -> 0;
2580 -> 2578;
2580 -> 2579;
2581 -> 2579;
2582 -> 2581;
2582 -> 2579;
2583 -> 2580;
2583 -> 2581;
2583 -> 2579;
2584 -> 2579;
2585 -> 0;
2587 -> 2585;
2587 -> 2586;
2588 -> 2586;
2589 -> 2588;
2589 -> 2586;
2590 -> 2587;
2590 -> 2588;
2590 -> 2586;
2591 -> 2586;
2592 -> 0;
2594 -> 2592;
2594 -> 2593;
2595 -> 2593;
2596 -> 2595;
2596 -> 2593;
2597 -> 2594;
2597 -> 2595;
2597 -> 2593;
2598 -> 2593;
2599 -> 0;
2601 -> 2599;
2601 -> 2600;
2602 -> 2600;
2603 -> 2602;
2603 -> 2600;
2604 -> 2601;
2604 -> 2602;
2604 -> 2600;
2605 -> 2600;
2606 -> 2605;
2608 -> 2549;
2608 -> 2606;
2608 -> 2607;
2608 -> 2602;
2608 -> 2603;
2608 -> 2604;
2609 -> 2608;
2611 -> 2610;
2612 -> 2611;
2612 -> 2610;
2613 -> 2611;
2613 -> 2610;
2614 -> 2611;
2614 -> 2610;
2615 -> 2610;
2617 -> 2616;
2618 -> 2546;
2619 -> 2618;
2620 -> 2619;
2621 -> 2620;
2621 -> 2619;
2622 -> 2618;
2622 -> 2546;
2623 -> 2618;
2623 -> 2546;
2624 -> 2546;
2624 -> 2505;
2625 -> 2546;
2625 -> 2505;
2626 -> 2546;
2626 -> 2505;
2627 -> 2545;
2627 -> 2546;
2627 -> 2505;
2628 -> 2504;
2628 -> 2502;
2629 -> 2503;
2629 -> 2504;
2629 -> 2502;
2630 -> 2502;
2631 -> 2630;
2631 -> 2494;
2631 -> 2493;
2632 -> 0;
2632 -> 2494;
2632 -> 2493;
2633 -> 2493;
2634 -> 2484;
2634 -> 2481;
2634 -> 2486;
2635 -> 2486;
2636 -> 2487;
2636 -> 2635;
2637 -> 2488;
2637 -> 2635;
2638 -> 2489;
2638 -> 2635;
2639 -> 2634;
2639 -> 2635;
2640 -> 2635;
2641 -> 2640;
2641 -> 2635;
2642 -> 2635;
2643 -> 2635;
2644 -> 2636;
2644 -> 2635;
2645 -> 2638;
2645 -> 2635;
2646 -> 2640;
2646 -> 2635;
2647 -> 2642;
2647 -> 2635;
2648 -> 2643;
2648 -> 2635;
2649 -> 2635;
2650 -> 2644;
2650 -> 2649;
2651 -> 2645;
2651 -> 2649;
2652 -> 2646;
2652 -> 2649;
2653 -> 2647;
2653 -> 2649;
2654 -> 2648;
2654 -> 2649;
2655 -> 2649;
2656 -> 2650;
2656 -> 2655;
2657 -> 2656;
2657 -> 2649;
2658 -> 2651;
2658 -> 2649;
2659 -> 2657;
2659 -> 2658;
2659 -> 2481;
2659 -> 2649;
2660 -> 2659;
2660 -> 2649;
2661 -> 2649;
2662 -> 2635;
2663 -> 2635;
2664 -> 2635;
2665 -> 2635;
2666 -> 2660;
2666 -> 2665;
2666 -> 2635;
2667 -> 2636;
2667 -> 2666;
2668 -> 2637;
2668 -> 2666;
2669 -> 2638;
2669 -> 2666;
2670 -> 2639;
2670 -> 2666;
2671 -> 2663;
2671 -> 2666;
2672 -> 2666;
2673 -> 2666;
2674 -> 2667;
2674 -> 2673;
2675 -> 2668;
2675 -> 2673;
2676 -> 2669;
2676 -> 2673;
2677 -> 2670;
2677 -> 2673;
2678 -> 2671;
2678 -> 2673;
2679 -> 2672;
2679 -> 2673;
2680 -> 2674;
2680 -> 2673;
2681 -> 2675;
2681 -> 2673;
2682 -> 2676;
2682 -> 2673;
2683 -> 2677;
2683 -> 2673;
2684 -> 2673;
2685 -> 2678;
2685 -> 2673;
2686 -> 2673;
2687 -> 2680;
2687 -> 2686;
2688 -> 2681;
2688 -> 2686;
2689 -> 2682;
2689 -> 2686;
2690 -> 2683;
2690 -> 2686;
2691 -> 2684;
2691 -> 2686;
2692 -> 2685;
2692 -> 2686;
2693 -> 2679;
2693 -> 2686;
2694 -> 2686;
2695 -> 2693;
2695 -> 2694;
2696 -> 2694;
2697 -> 2694;
2698 -> 2695;
2698 -> 2697;
2699 -> 2697;
2700 -> 2698;
2700 -> 2697;
2701 -> 2698;
2701 -> 2697;
2702 -> 2695;
2702 -> 2694;
2703 -> 2695;
2703 -> 2694;
2704 -> 2695;
2704 -> 2694;
2705 -> 2696;
2705 -> 2695;
2705 -> 2694;
2706 -> 2693;
2706 -> 2686;
2707 -> 2693;
2707 -> 2686;
2708 -> 2693;
2708 -> 2686;
2709 -> 2693;
2709 -> 2686;
2710 -> 2693;
2710 -> 2686;
2711 -> 2693;
2711 -> 2686;
2712 -> 2693;
2712 -> 2686;
2713 -> 2693;
2713 -> 2686;
2714 -> 2693;
2714 -> 2686;
2715 -> 2630;
2715 -> 2693;
2715 -> 2686;
2716 -> 2686;
2717 -> 2716;
2717 -> 2693;
2717 -> 2686;
2718 -> 2630;
2718 -> 2693;
2718 -> 2686;
2719 -> 2686;
2720 -> 2719;
2720 -> 2693;
2720 -> 2686;
2721 -> 2693;
2721 -> 2686;
2722 -> 0;
2722 -> 2693;
2722 -> 2686;
2723 -> 2693;
2723 -> 2686;
2724 -> 2693;
2724 -> 2686;
2725 -> 2689;
2725 -> 2481;
2725 -> 2686;
2726 -> 2686;
2727 -> 2688;
2727 -> 2726;
2727 -> 2686;
2728 -> 2686;
2729 -> 2691;
2729 -> 2728;
2729 -> 2686;
2730 -> 2686;
2731 -> 2686;
2732 -> 2686;
2733 -> 2687;
2733 -> 2732;
2734 -> 2733;
2734 -> 2686;
2735 -> 2689;
2735 -> 2686;
2736 -> 2734;
2736 -> 2735;
2736 -> 2659;
2736 -> 2481;
2736 -> 2686;
2737 -> 2689;
2737 -> 2693;
2737 -> 2686;
2738 -> 2688;
2738 -> 2693;
2738 -> 2686;
2739 -> 2686;
2740 -> 2687;
2740 -> 2739;
2741 -> 2740;
2741 -> 2736;
2741 -> 2739;
2742 -> 2741;
2742 -> 2686;
2743 -> 2689;
2743 -> 2686;
2744 -> 2742;
2744 -> 2693;
2744 -> 2686;
2745 -> 2686;
2746 -> 2691;
2746 -> 2745;
2746 -> 2686;
2747 -> 2736;
2747 -> 2693;
2747 -> 2746;
2748 -> 2746;
2749 -> 2686;
2750 -> 2690;
2750 -> 2749;
2750 -> 2686;
2751 -> 2686;
2752 -> 2687;
2752 -> 2751;
2753 -> 2752;
2753 -> 2742;
2753 -> 2751;
2754 -> 2753;
2754 -> 2686;
2755 -> 2686;
2756 -> 2754;
2756 -> 2755;
2757 -> 2755;
2758 -> 2756;
2758 -> 2757;
2759 -> 2758;
2759 -> 2755;
2760 -> 2756;
2760 -> 2755;
2761 -> 2756;
2761 -> 2742;
2761 -> 0;
2761 -> 2755;
2762 -> 2750;
2762 -> 2759;
2762 -> 2686;
2763 -> 2686;
2764 -> 2693;
2764 -> 2763;
2765 -> 0;
2765 -> 2763;
2766 -> 2764;
2766 -> 2744;
2766 -> 0;
2766 -> 2763;
2767 -> 0;
2767 -> 2766;
2768 -> 2767;
2768 -> 2763;
2769 -> 2768;
2769 -> 2686;
2770 -> 2762;
2770 -> 2769;
2770 -> 2686;
2771 -> 0;
2771 -> 2693;
2771 -> 2770;
2772 -> 2731;
2772 -> 2686;
2773 -> 2635;
2774 -> 2661;
2774 -> 2773;
2774 -> 2635;
2775 -> 2672;
2775 -> 2635;
2776 -> 2478;
2776 -> 2775;
2776 -> 2698;
2776 -> 2700;
2776 -> 2701;
2776 -> 2702;
2776 -> 2703;
2776 -> 2705;
2776 -> 2738;
2776 -> 2747;
2776 -> 2744;
2776 -> 2771;
2776 -> 2710;
2776 -> 2711;
2776 -> 2712;
2776 -> 2713;
2776 -> 2714;
2776 -> 2715;
2776 -> 2717;
2776 -> 2718;
2776 -> 2720;
2776 -> 2721;
2776 -> 2722;
2776 -> 2723;
2776 -> 2724;
2776 -> 2737;
2776 -> 2621;
2776 -> 2622;
2776 -> 2623;
2776 -> 2624;
2776 -> 2625;
2776 -> 2627;
2776 -> 2629;
2776 -> 2716;
2776 -> 2719;
2776 -> 0;
2776 -> 2481;
2776 -> 2742;
2776 -> 2486;
2777 -> 2473;
2778 -> 0;
2778 -> 2473;
2779 -> 2777;
2779 -> 2778;
2779 -> 2478;
2779 -> 2776;
2779 -> 2473;
2780 -> 2779;
2780 -> 2777;
2781 -> 2780;
2781 -> 2779;
2781 -> 2777;
2782 -> 2478;
2782 -> 2781;
2782 -> 2473;
2783 -> 2473;
2784 -> 2482;
2784 -> 2783;
2784 -> 2473;
2785 -> 2471;
2785 -> 2782;
2785 -> 2473;
2786 -> 2781;
2786 -> 2473;
2787 -> 2473;
2788 -> 2473;
2789 -> 2785;
2789 -> 2788;
2789 -> 2473;
2790 -> 2781;
2790 -> 2789;
2791 -> 2789;
2792 -> 2790;
2792 -> 2791;
2793 -> 2477;
2793 -> 2791;
2794 -> 2791;
2795 -> 2793;
2795 -> 2785;
2795 -> 2794;
2795 -> 2791;
2796 -> 2791;
2797 -> 2793;
2797 -> 2785;
2797 -> 2796;
2798 -> 2797;
2798 -> 2791;
2799 -> 2792;
2799 -> 2785;
2799 -> 2791;
2800 -> 2799;
2801 -> 2800;
2802 -> 2800;
2803 -> 2800;
2803 -> 2802;
2804 -> 2803;
2804 -> 2785;
2804 -> 2802;
2805 -> 2804;
2805 -> 2800;
2806 -> 2800;
2807 -> 2793;
2807 -> 2785;
2807 -> 2805;
2807 -> 2806;
2807 -> 2800;
2808 -> 2807;
2808 -> 2800;
2809 -> 2800;
2810 -> 2800;
2810 -> 2809;
2811 -> 2810;
2811 -> 2807;
2811 -> 2809;
2812 -> 2811;
2812 -> 2800;
2813 -> 2798;
2813 -> 2812;
2813 -> 2800;
2814 -> 2789;
2815 -> 2409;
2816 -> 2401;
2817 -> 2395;
2818 -> 2395;
2819 -> 2395;
2820 -> 2819;
2820 -> 2395;
2821 -> 2396;
2821 -> 2395;
2822 -> 2818;
2822 -> 2395;
2823 -> 2397;
2823 -> 2807;
2823 -> 2821;
2823 -> 2822;
2823 -> 2395;
2824 -> 2396;
2824 -> 2823;
2825 -> 2819;
2825 -> 2823;
2826 -> 2397;
2826 -> 2823;
2826 -> 2824;
2826 -> 2825;
2826 -> 2820;
2827 -> 0;
2827 -> 2395;
2828 -> 2826;
2829 -> 2826;
2830 -> 2826;
2831 -> 2826;
2832 -> 2826;
2833 -> 2826;
2834 -> 2826;
2835 -> 2826;
2836 -> 2826;
2837 -> 2826;
2838 -> 2826;
2839 -> 2838;
2839 -> 2826;
2840 -> 2826;
2841 -> 2826;
2842 -> 2838;
2842 -> 2826;
2843 -> 2840;
2843 -> 2826;
2844 -> 2841;
2844 -> 2826;
2845 -> 2826;
2846 -> 2826;
2847 -> 2826;
2848 -> 2846;
2848 -> 2826;
2849 -> 2848;
2849 -> 2826;
2850 -> 2849;
2850 -> 2846;
2851 -> 2846;
2852 -> 2846;
2853 -> 2846;
2854 -> 2846;
2855 -> 2846;
2856 -> 2846;
2856 -> 2826;
2857 -> 2846;
2858 -> 2846;
2859 -> 2846;
2860 -> 2846;
2861 -> 2846;
2862 -> 2860;
2862 -> 2846;
2863 -> 2826;
2864 -> 2845;
2864 -> 2863;
2864 -> 2826;
2865 -> 2826;
2866 -> 2837;
2866 -> 2865;
2866 -> 2826;
2867 -> 2846;
2868 -> 2846;
2869 -> 2868;
2869 -> 2846;
2870 -> 2846;
2871 -> 2846;
2872 -> 2869;
2872 -> 2846;
2873 -> 2826;
2874 -> 0;
2874 -> 2826;
2875 -> 2846;
2876 -> 2846;
2877 -> 2846;
2878 -> 2846;
2879 -> 2846;
2880 -> 2846;
2881 -> 2846;
2882 -> 2846;
2883 -> 2846;
2884 -> 2846;
2885 -> 2846;
2886 -> 2885;
2886 -> 2846;
2887 -> 2846;
2888 -> 2846;
2889 -> 2885;
2889 -> 2846;
2890 -> 2887;
2890 -> 2846;
2891 -> 2888;
2891 -> 2846;
2892 -> 2846;
2893 -> 2846;
2894 -> 2846;
2895 -> 2894;
2895 -> 2846;
2896 -> 2895;
2896 -> 2846;
2897 -> 2846;
2898 -> 2846;
2899 -> 2892;
2899 -> 2898;
2899 -> 2846;
2900 -> 2846;
2901 -> 2884;
2901 -> 2900;
2901 -> 2846;
2902 -> 2868;
2903 -> 2868;
2904 -> 2868;
2905 -> 2902;
2905 -> 2868;
2906 -> 2846;
2907 -> 0;
2907 -> 2846;
2908 -> 2868;
2909 -> 2868;
2910 -> 2868;
2911 -> 2868;
2912 -> 2868;
2913 -> 2868;
2914 -> 2868;
2915 -> 2868;
2916 -> 2868;
2917 -> 2868;
2918 -> 2868;
2919 -> 2918;
2919 -> 2868;
2920 -> 2868;
2921 -> 2868;
2922 -> 2918;
2922 -> 2868;
2923 -> 2920;
2923 -> 2868;
2924 -> 2921;
2924 -> 2868;
2925 -> 2868;
2926 -> 2868;
2927 -> 2868;
2928 -> 2927;
2928 -> 2868;
2929 -> 2928;
2929 -> 2868;
2930 -> 2868;
2931 -> 2868;
2932 -> 2868;
2933 -> 2868;
2934 -> 2868;
2935 -> 2868;
2936 -> 2868;
2937 -> 2868;
2938 -> 2868;
2939 -> 2868;
2940 -> 2868;
2941 -> 2939;
2941 -> 2868;
2942 -> 2868;
2943 -> 2925;
2943 -> 2942;
2943 -> 2868;
2944 -> 2868;
2945 -> 2917;
2945 -> 2944;
2945 -> 2868;
2946 -> 2868;
2947 -> 0;
2947 -> 2868;
2948 -> 2918;
2949 -> 2948;
2949 -> 2918;
2950 -> 2949;
2950 -> 2918;
2951 -> 2918;
2952 -> 2918;
2953 -> 2918;
2954 -> 2918;
2955 -> 2918;
2956 -> 2918;
2956 -> 2868;
2957 -> 2918;
2958 -> 2918;
2959 -> 2918;
2960 -> 2918;
2961 -> 2918;
2962 -> 2960;
2962 -> 2918;
2963 -> 2918;
2964 -> 2918;
2965 -> 2918;
2966 -> 2963;
2966 -> 2918;
2967 -> 2918;
2968 -> 2918;
2969 -> 2918;
2970 -> 2918;
2971 -> 2918;
2972 -> 2918;
2973 -> 2918;
2974 -> 2918;
2975 -> 2918;
2976 -> 2918;
2977 -> 2918;
2978 -> 2918;
2979 -> 2918;
2980 -> 2918;
2981 -> 2978;
2981 -> 2918;
2982 -> 2979;
2982 -> 2918;
2983 -> 2918;
2984 -> 2918;
2985 -> 2918;
2986 -> 2918;
2987 -> 2983;
2987 -> 2986;
2987 -> 2918;
2988 -> 2918;
2989 -> 2976;
2989 -> 2988;
2989 -> 2918;
2990 -> 2918;
2991 -> 0;
2991 -> 2918;
2992 -> 2978;
2992 -> 2918;
2993 -> 2978;
2994 -> 2993;
2994 -> 2978;
2995 -> 2994;
2995 -> 2978;
2996 -> 2978;
2997 -> 2978;
2998 -> 2978;
2999 -> 2978;
3000 -> 2978;
3001 -> 2978;
3001 -> 2918;
3002 -> 2978;
3003 -> 2978;
3004 -> 2978;
3005 -> 2978;
3006 -> 2978;
3007 -> 3005;
3007 -> 2978;
3008 -> 2978;
3009 -> 2978;
3010 -> 2978;
3011 -> 3008;
3011 -> 2978;
3012 -> 2183;
3013 -> 2393;
3013 -> 3012;
3013 -> 2183;
3014 -> 2185;
3014 -> 2978;
3014 -> 3013;
3015 -> 2185;
3015 -> 3013;
3016 -> 2393;
3016 -> 2978;
3016 -> 3013;
3017 -> 3013;
3018 -> 3013;
3019 -> 3014;
3019 -> 3018;
3020 -> 3015;
3020 -> 3018;
3021 -> 3016;
3021 -> 3018;
3022 -> 3017;
3022 -> 3018;
3023 -> 3018;
3024 -> 3021;
3024 -> 3016;
3024 -> 3023;
3024 -> 3018;
3025 -> 2187;
3025 -> 3021;
3025 -> 3013;
3026 -> 2187;
3026 -> 3025;
3026 -> 2183;
3027 -> 1;
3028 -> 1;
3029 -> 3026;
3029 -> 3028;
3030 -> 3029;
3030 -> 3026;
3030 -> 2074;
3030 -> 3028;
3031 -> 3028;
3032 -> 3030;
3033 -> 3029;
3033 -> 3032;
3034 -> 3033;
3034 -> 3026;
3034 -> 3032;
3035 -> 3034;
3035 -> 3026;
3035 -> 3032;
3036 -> 3035;
3037 -> 3036;
3038 -> 3037;
3038 -> 3036;
3039 -> 3036;
3040 -> 3036;
3041 -> 3038;
3041 -> 3040;
3042 -> 3039;
3042 -> 3040;
3043 -> 3039;
3043 -> 3040;
3044 -> 3039;
3044 -> 3040;
3045 -> 3039;
3045 -> 3040;
3047 -> 3046;
3049 -> 3048;
3051 -> 3050;
3053 -> 3052;
3055 -> 3054;
3057 -> 3056;
3058 -> 0;
3060 -> 3047;
3060 -> 3059;
3061 -> 3049;
3061 -> 3059;
3062 -> 3051;
3062 -> 3059;
3063 -> 3053;
3063 -> 3059;
3064 -> 3055;
3064 -> 3059;
3065 -> 3057;
3065 -> 3059;
3066 -> 3058;
3066 -> 3059;
3067 -> 3059;
3068 -> 3067;
3068 -> 3059;
3069 -> 3067;
3069 -> 3059;
3070 -> 3067;
3070 -> 3059;
3071 -> 3067;
3071 -> 3059;
3072 -> 3067;
3072 -> 3059;
3073 -> 3067;
3073 -> 3059;
3074 -> 3067;
3074 -> 3059;
3075 -> 3061;
3075 -> 3059;
3076 -> 3059;
3077 -> 3060;
3077 -> 3067;
3077 -> 3059;
3078 -> 3061;
3078 -> 3067;
3078 -> 3059;
3079 -> 3062;
3079 -> 3067;
3079 -> 3059;
3080 -> 3063;
3080 -> 3067;
3080 -> 3059;
3081 -> 3064;
3081 -> 3067;
3081 -> 3059;
3082 -> 3065;
3082 -> 3067;
3082 -> 3059;
3083 -> 3066;
3083 -> 3067;
3083 -> 3059;
3084 -> 3067;
3084 -> 3083;
3084 -> 0;
3084 -> 3059;
3085 -> 3059;
3086 -> 3065;
3086 -> 3059;
3087 -> 3059;
3089 -> 3088;
3091 -> 3090;
3093 -> 3092;
3095 -> 3094;
3097 -> 3096;
3099 -> 3098;
3100 -> 0;
3102 -> 3089;
3102 -> 3101;
3103 -> 3091;
3103 -> 3101;
3104 -> 3093;
3104 -> 3101;
3105 -> 3095;
3105 -> 3101;
3106 -> 3097;
3106 -> 3101;
3107 -> 3099;
3107 -> 3101;
3108 -> 3100;
3108 -> 3101;
3109 -> 3101;
3110 -> 3109;
3110 -> 3101;
3111 -> 3109;
3111 -> 3101;
3112 -> 3109;
3112 -> 3101;
3113 -> 3109;
3113 -> 3101;
3114 -> 3109;
3114 -> 3101;
3115 -> 3109;
3115 -> 3101;
3116 -> 3109;
3116 -> 3101;
3117 -> 3103;
3117 -> 3102;
3117 -> 3101;
3118 -> 3101;
3119 -> 3102;
3119 -> 3109;
3119 -> 3101;
3120 -> 3103;
3120 -> 3109;
3120 -> 3101;
3121 -> 3104;
3121 -> 3109;
3121 -> 3101;
3122 -> 3105;
3122 -> 3109;
3122 -> 3101;
3123 -> 3106;
3123 -> 3109;
3123 -> 3101;
3124 -> 3107;
3124 -> 3109;
3124 -> 3101;
3125 -> 3108;
3125 -> 3109;
3125 -> 3101;
3126 -> 3109;
3126 -> 3125;
3126 -> 0;
3126 -> 3101;
3127 -> 3101;
3128 -> 3107;
3128 -> 3101;
3129 -> 3101;
3131 -> 3130;
3133 -> 3132;
3135 -> 3134;
3137 -> 3136;
3139 -> 3138;
3141 -> 3140;
3142 -> 0;
3144 -> 3131;
3144 -> 3143;
3145 -> 3133;
3145 -> 3143;
3146 -> 3135;
3146 -> 3143;
3147 -> 3137;
3147 -> 3143;
3148 -> 3139;
3148 -> 3143;
3149 -> 3141;
3149 -> 3143;
3150 -> 3142;
3150 -> 3143;
3151 -> 3143;
3152 -> 3151;
3152 -> 3143;
3153 -> 3151;
3153 -> 3143;
3154 -> 3151;
3154 -> 3143;
3155 -> 3151;
3155 -> 3143;
3156 -> 3151;
3156 -> 3143;
3157 -> 3151;
3157 -> 3143;
3158 -> 3151;
3158 -> 3143;
3159 -> 3145;
3159 -> 3144;
3159 -> 3143;
3160 -> 3143;
3161 -> 3144;
3161 -> 3151;
3161 -> 3143;
3162 -> 3145;
3162 -> 3151;
3162 -> 3143;
3163 -> 3146;
3163 -> 3151;
3163 -> 3143;
3164 -> 3147;
3164 -> 3151;
3164 -> 3143;
3165 -> 3148;
3165 -> 3151;
3165 -> 3143;
3166 -> 3149;
3166 -> 3151;
3166 -> 3143;
3167 -> 3150;
3167 -> 3151;
3167 -> 3143;
3168 -> 3151;
3168 -> 3167;
3168 -> 0;
3168 -> 3143;
3169 -> 3143;
3170 -> 3149;
3170 -> 3143;
3171 -> 3143;
3173 -> 3172;
3175 -> 3174;
3177 -> 3176;
3179 -> 3178;
3181 -> 3180;
3183 -> 3182;
3184 -> 0;
3186 -> 3173;
3186 -> 3185;
3187 -> 3175;
3187 -> 3185;
3188 -> 3177;
3188 -> 3185;
3189 -> 3179;
3189 -> 3185;
3190 -> 3181;
3190 -> 3185;
3191 -> 3183;
3191 -> 3185;
3192 -> 3184;
3192 -> 3185;
3193 -> 3185;
3194 -> 3193;
3194 -> 3185;
3195 -> 3193;
3195 -> 3185;
3196 -> 3193;
3196 -> 3185;
3197 -> 3193;
3197 -> 3185;
3198 -> 3193;
3198 -> 3185;
3199 -> 3193;
3199 -> 3185;
3200 -> 3193;
3200 -> 3185;
3201 -> 3187;
3201 -> 3186;
3201 -> 3185;
3202 -> 3185;
3203 -> 3186;
3203 -> 3193;
3203 -> 3185;
3204 -> 3187;
3204 -> 3193;
3204 -> 3185;
3205 -> 3188;
3205 -> 3193;
3205 -> 3185;
3206 -> 3189;
3206 -> 3193;
3206 -> 3185;
3207 -> 3190;
3207 -> 3193;
3207 -> 3185;
3208 -> 3191;
3208 -> 3193;
3208 -> 3185;
3209 -> 3192;
3209 -> 3193;
3209 -> 3185;
3210 -> 3193;
3210 -> 3209;
3210 -> 0;
3210 -> 3185;
3211 -> 3185;
3212 -> 3191;
3212 -> 3185;
3213 -> 3193;
3213 -> 3209;
3213 -> 0;
3213 -> 3212;
3214 -> 3213;
3214 -> 3193;
3214 -> 3212;
3215 -> 3185;
3217 -> 3216;
3219 -> 3218;
3221 -> 3220;
3223 -> 3222;
3225 -> 3224;
3227 -> 3226;
3228 -> 0;
3230 -> 3217;
3230 -> 3229;
3231 -> 3219;
3231 -> 3229;
3232 -> 3221;
3232 -> 3229;
3233 -> 3223;
3233 -> 3229;
3234 -> 3225;
3234 -> 3229;
3235 -> 3227;
3235 -> 3229;
3236 -> 3228;
3236 -> 3229;
3237 -> 3229;
3238 -> 3237;
3238 -> 3229;
3239 -> 3237;
3239 -> 3229;
3240 -> 3237;
3240 -> 3229;
3241 -> 3237;
3241 -> 3229;
3242 -> 3237;
3242 -> 3229;
3243 -> 3237;
3243 -> 3229;
3244 -> 3237;
3244 -> 3229;
3245 -> 3231;
3245 -> 3230;
3245 -> 3229;
3246 -> 3229;
3247 -> 3230;
3247 -> 3237;
3247 -> 3229;
3248 -> 3231;
3248 -> 3237;
3248 -> 3229;
3249 -> 3232;
3249 -> 3237;
3249 -> 3229;
3250 -> 3233;
3250 -> 3237;
3250 -> 3229;
3251 -> 3234;
3251 -> 3237;
3251 -> 3229;
3252 -> 3235;
3252 -> 3237;
3252 -> 3229;
3253 -> 3236;
3253 -> 3237;
3253 -> 3229;
3254 -> 3237;
3254 -> 3253;
3254 -> 0;
3254 -> 3229;
3255 -> 3229;
3256 -> 3235;
3256 -> 3229;
3257 -> 3229;
3259 -> 3258;
3261 -> 3260;
3263 -> 3262;
3265 -> 3264;
3267 -> 3266;
3269 -> 3268;
3270 -> 0;
3272 -> 3259;
3272 -> 3271;
3273 -> 3261;
3273 -> 3271;
3274 -> 3263;
3274 -> 3271;
3275 -> 3265;
3275 -> 3271;
3276 -> 3267;
3276 -> 3271;
3277 -> 3269;
3277 -> 3271;
3278 -> 3270;
3278 -> 3271;
3279 -> 3271;
3280 -> 3279;
3280 -> 3271;
3281 -> 3279;
3281 -> 3271;
3282 -> 3279;
3282 -> 3271;
3283 -> 3279;
3283 -> 3271;
3284 -> 3279;
3284 -> 3271;
3285 -> 3279;
3285 -> 3271;
3286 -> 3279;
3286 -> 3271;
3287 -> 3273;
3287 -> 3272;
3287 -> 3271;
3288 -> 3271;
3289 -> 3272;
3289 -> 3279;
3289 -> 3271;
3290 -> 3273;
3290 -> 3279;
3290 -> 3271;
3291 -> 3274;
3291 -> 3279;
3291 -> 3271;
3292 -> 3275;
3292 -> 3279;
3292 -> 3271;
3293 -> 3276;
3293 -> 3279;
3293 -> 3271;
3294 -> 3277;
3294 -> 3279;
3294 -> 3271;
3295 -> 3278;
3295 -> 3279;
3295 -> 3271;
3296 -> 3279;
3296 -> 3295;
3296 -> 0;
3296 -> 3271;
3297 -> 3271;
3298 -> 3277;
3298 -> 3271;
3299 -> 3271;
3301 -> 3300;
3303 -> 3302;
3305 -> 3304;
3307 -> 3306;
3309 -> 3308;
3311 -> 3310;
3312 -> 0;
3314 -> 3301;
3314 -> 3313;
3315 -> 3303;
3315 -> 3313;
3316 -> 3305;
3316 -> 3313;
3317 -> 3307;
3317 -> 3313;
3318 -> 3309;
3318 -> 3313;
3319 -> 3311;
3319 -> 3313;
3320 -> 3312;
3320 -> 3313;
3321 -> 3313;
3322 -> 3321;
3322 -> 3313;
3323 -> 3321;
3323 -> 3313;
3324 -> 3321;
3324 -> 3313;
3325 -> 3321;
3325 -> 3313;
3326 -> 3321;
3326 -> 3313;
3327 -> 3321;
3327 -> 3313;
3328 -> 3321;
3328 -> 3313;
3329 -> 3315;
3329 -> 3313;
3330 -> 3313;
3331 -> 3314;
3331 -> 3321;
3331 -> 3313;
3332 -> 3315;
3332 -> 3321;
3332 -> 3313;
3333 -> 3316;
3333 -> 3321;
3333 -> 3313;
3334 -> 3317;
3334 -> 3321;
3334 -> 3313;
3335 -> 3318;
3335 -> 3321;
3335 -> 3313;
3336 -> 3319;
3336 -> 3321;
3336 -> 3313;
3337 -> 3320;
3337 -> 3321;
3337 -> 3313;
3338 -> 3321;
3338 -> 3337;
3338 -> 0;
3338 -> 3313;
3339 -> 3313;
3340 -> 3319;
3340 -> 3313;
3341 -> 3313;
3343 -> 3342;
3345 -> 3344;
3347 -> 3346;
3349 -> 3348;
3351 -> 3350;
3353 -> 3352;
3354 -> 0;
3355 -> 3354;
3357 -> 3343;
3357 -> 3356;
3358 -> 3345;
3358 -> 3356;
3359 -> 3347;
3359 -> 3356;
3360 -> 3349;
3360 -> 3356;
3361 -> 3351;
3361 -> 3356;
3362 -> 3353;
3362 -> 3356;
3363 -> 3355;
3363 -> 3356;
3364 -> 3356;
3365 -> 3364;
3365 -> 3356;
3366 -> 3364;
3366 -> 3356;
3367 -> 3364;
3367 -> 3356;
3368 -> 3364;
3368 -> 3356;
3369 -> 3364;
3369 -> 3356;
3370 -> 3364;
3370 -> 3356;
3371 -> 3364;
3371 -> 3356;
3372 -> 3358;
3372 -> 3356;
3373 -> 3356;
3374 -> 3357;
3374 -> 3364;
3374 -> 3356;
3375 -> 3358;
3375 -> 3364;
3375 -> 3356;
3376 -> 3359;
3376 -> 3364;
3376 -> 3356;
3377 -> 3360;
3377 -> 3364;
3377 -> 3356;
3378 -> 3361;
3378 -> 3364;
3378 -> 3356;
3379 -> 3362;
3379 -> 3364;
3379 -> 3356;
3380 -> 3363;
3380 -> 3364;
3380 -> 3356;
3381 -> 3364;
3381 -> 3380;
3381 -> 0;
3381 -> 3356;
3382 -> 3356;
3383 -> 3362;
3383 -> 3356;
3384 -> 3364;
3384 -> 3380;
3384 -> 0;
3384 -> 3383;
3385 -> 3384;
3385 -> 3364;
3385 -> 3383;
3386 -> 3356;
3388 -> 3387;
3390 -> 3389;
3392 -> 3391;
3394 -> 3393;
3396 -> 3395;
3398 -> 3397;
3399 -> 0;
3401 -> 3388;
3401 -> 3400;
3402 -> 3390;
3402 -> 3400;
3403 -> 3392;
3403 -> 3400;
3404 -> 3394;
3404 -> 3400;
3405 -> 3396;
3405 -> 3400;
3406 -> 3398;
3406 -> 3400;
3407 -> 3399;
3407 -> 3400;
3408 -> 3400;
3409 -> 3408;
3409 -> 3400;
3410 -> 3408;
3410 -> 3400;
3411 -> 3408;
3411 -> 3400;
3412 -> 3408;
3412 -> 3400;
3413 -> 3408;
3413 -> 3400;
3414 -> 3408;
3414 -> 3400;
3415 -> 3408;
3415 -> 3400;
3416 -> 3402;
3416 -> 3400;
3417 -> 3400;
3418 -> 3401;
3418 -> 3408;
3418 -> 3400;
3419 -> 3402;
3419 -> 3408;
3419 -> 3400;
3420 -> 3403;
3420 -> 3408;
3420 -> 3400;
3421 -> 3404;
3421 -> 3408;
3421 -> 3400;
3422 -> 3405;
3422 -> 3408;
3422 -> 3400;
3423 -> 3406;
3423 -> 3408;
3423 -> 3400;
3424 -> 3407;
3424 -> 3408;
3424 -> 3400;
3425 -> 3408;
3425 -> 3424;
3425 -> 0;
3425 -> 3400;
3426 -> 3400;
3427 -> 3406;
3427 -> 3400;
3428 -> 3408;
3428 -> 3424;
3428 -> 0;
3428 -> 3427;
3429 -> 3428;
3429 -> 3408;
3429 -> 3427;
3430 -> 3400;
3432 -> 3431;
3434 -> 3433;
3436 -> 3435;
3438 -> 3437;
3440 -> 3439;
3442 -> 3441;
3443 -> 0;
3445 -> 3432;
3445 -> 3444;
3446 -> 3434;
3446 -> 3444;
3447 -> 3436;
3447 -> 3444;
3448 -> 3438;
3448 -> 3444;
3449 -> 3440;
3449 -> 3444;
3450 -> 3442;
3450 -> 3444;
3451 -> 3443;
3451 -> 3444;
3452 -> 3444;
3453 -> 3452;
3453 -> 3444;
3454 -> 3452;
3454 -> 3444;
3455 -> 3452;
3455 -> 3444;
3456 -> 3452;
3456 -> 3444;
3457 -> 3452;
3457 -> 3444;
3458 -> 3452;
3458 -> 3444;
3459 -> 3452;
3459 -> 3444;
3460 -> 3446;
3460 -> 3444;
3461 -> 3444;
3462 -> 3445;
3462 -> 3452;
3462 -> 3444;
3463 -> 3446;
3463 -> 3452;
3463 -> 3444;
3464 -> 3447;
3464 -> 3452;
3464 -> 3444;
3465 -> 3448;
3465 -> 3452;
3465 -> 3444;
3466 -> 3449;
3466 -> 3452;
3466 -> 3444;
3467 -> 3450;
3467 -> 3452;
3467 -> 3444;
3468 -> 3451;
3468 -> 3452;
3468 -> 3444;
3469 -> 3452;
3469 -> 3468;
3469 -> 0;
3469 -> 3444;
3470 -> 3444;
3471 -> 3450;
3471 -> 3444;
3472 -> 3444;
3474 -> 3473;
3476 -> 3475;
3478 -> 3477;
3480 -> 3479;
3482 -> 3481;
3484 -> 3483;
3485 -> 0;
3486 -> 3485;
3486 -> 0;
3487 -> 3486;
3489 -> 3474;
3489 -> 3488;
3490 -> 3476;
3490 -> 3488;
3491 -> 3478;
3491 -> 3488;
3492 -> 3480;
3492 -> 3488;
3493 -> 3482;
3493 -> 3488;
3494 -> 3484;
3494 -> 3488;
3495 -> 3487;
3495 -> 3488;
3496 -> 3488;
3497 -> 3496;
3497 -> 3488;
3498 -> 3496;
3498 -> 3488;
3499 -> 3496;
3499 -> 3488;
3500 -> 3496;
3500 -> 3488;
3501 -> 3496;
3501 -> 3488;
3502 -> 3496;
3502 -> 3488;
3503 -> 3496;
3503 -> 3488;
3504 -> 3490;
3504 -> 3488;
3505 -> 3488;
3506 -> 3489;
3506 -> 3496;
3506 -> 3488;
3507 -> 3490;
3507 -> 3496;
3507 -> 3488;
3508 -> 3491;
3508 -> 3496;
3508 -> 3488;
3509 -> 3492;
3509 -> 3496;
3509 -> 3488;
3510 -> 3493;
3510 -> 3496;
3510 -> 3488;
3511 -> 3494;
3511 -> 3496;
3511 -> 3488;
3512 -> 3495;
3512 -> 3496;
3512 -> 3488;
3513 -> 3496;
3513 -> 3512;
3513 -> 0;
3513 -> 3488;
3514 -> 3488;
3515 -> 3494;
3515 -> 3488;
3516 -> 3488;
3518 -> 3517;
3520 -> 3519;
3522 -> 3521;
3524 -> 3523;
3526 -> 3525;
3528 -> 3527;
3529 -> 0;
3530 -> 3529;
3530 -> 0;
3531 -> 3530;
3533 -> 3518;
3533 -> 3532;
3534 -> 3520;
3534 -> 3532;
3535 -> 3522;
3535 -> 3532;
3536 -> 3524;
3536 -> 3532;
3537 -> 3526;
3537 -> 3532;
3538 -> 3528;
3538 -> 3532;
3539 -> 3531;
3539 -> 3532;
3540 -> 3532;
3541 -> 3540;
3541 -> 3532;
3542 -> 3540;
3542 -> 3532;
3543 -> 3540;
3543 -> 3532;
3544 -> 3540;
3544 -> 3532;
3545 -> 3540;
3545 -> 3532;
3546 -> 3540;
3546 -> 3532;
3547 -> 3540;
3547 -> 3532;
3548 -> 3534;
3548 -> 3532;
3549 -> 3532;
3550 -> 3533;
3550 -> 3540;
3550 -> 3532;
3551 -> 3534;
3551 -> 3540;
3551 -> 3532;
3552 -> 3535;
3552 -> 3540;
3552 -> 3532;
3553 -> 3536;
3553 -> 3540;
3553 -> 3532;
3554 -> 3537;
3554 -> 3540;
3554 -> 3532;
3555 -> 3538;
3555 -> 3540;
3555 -> 3532;
3556 -> 3539;
3556 -> 3540;
3556 -> 3532;
3557 -> 3540;
3557 -> 3556;
3557 -> 0;
3557 -> 3532;
3558 -> 3532;
3559 -> 3538;
3559 -> 3532;
3560 -> 3540;
3560 -> 3556;
3560 -> 0;
3560 -> 3559;
3561 -> 3560;
3561 -> 3540;
3561 -> 3559;
3562 -> 3532;
3564 -> 3563;
3566 -> 3565;
3568 -> 3567;
3570 -> 3569;
3572 -> 3571;
3574 -> 3573;
3575 -> 0;
3576 -> 3575;
3576 -> 0;
3577 -> 3576;
3579 -> 3564;
3579 -> 3578;
3580 -> 3566;
3580 -> 3578;
3581 -> 3568;
3581 -> 3578;
3582 -> 3570;
3582 -> 3578;
3583 -> 3572;
3583 -> 3578;
3584 -> 3574;
3584 -> 3578;
3585 -> 3577;
3585 -> 3578;
3586 -> 3578;
3587 -> 3586;
3587 -> 3578;
3588 -> 3586;
3588 -> 3578;
3589 -> 3586;
3589 -> 3578;
3590 -> 3586;
3590 -> 3578;
3591 -> 3586;
3591 -> 3578;
3592 -> 3586;
3592 -> 3578;
3593 -> 3586;
3593 -> 3578;
3594 -> 3580;
3594 -> 3578;
3595 -> 3578;
3596 -> 3579;
3596 -> 3586;
3596 -> 3578;
3597 -> 3580;
3597 -> 3586;
3597 -> 3578;
3598 -> 3581;
3598 -> 3586;
3598 -> 3578;
3599 -> 3582;
3599 -> 3586;
3599 -> 3578;
3600 -> 3583;
3600 -> 3586;
3600 -> 3578;
3601 -> 3584;
3601 -> 3586;
3601 -> 3578;
3602 -> 3585;
3602 -> 3586;
3602 -> 3578;
3603 -> 3586;
3603 -> 3602;
3603 -> 0;
3603 -> 3578;
3604 -> 3578;
3605 -> 3584;
3605 -> 3578;
3606 -> 3586;
3606 -> 3602;
3606 -> 0;
3606 -> 3605;
3607 -> 3606;
3607 -> 3586;
3607 -> 3605;
3608 -> 3578;
3610 -> 3609;
3612 -> 3611;
3614 -> 3613;
3616 -> 3615;
3618 -> 3617;
3620 -> 3619;
3621 -> 0;
3622 -> 3621;
3622 -> 0;
3623 -> 3622;
3625 -> 3610;
3625 -> 3624;
3626 -> 3612;
3626 -> 3624;
3627 -> 3614;
3627 -> 3624;
3628 -> 3616;
3628 -> 3624;
3629 -> 3618;
3629 -> 3624;
3630 -> 3620;
3630 -> 3624;
3631 -> 3623;
3631 -> 3624;
3632 -> 3624;
3633 -> 3632;
3633 -> 3624;
3634 -> 3632;
3634 -> 3624;
3635 -> 3632;
3635 -> 3624;
3636 -> 3632;
3636 -> 3624;
3637 -> 3632;
3637 -> 3624;
3638 -> 3632;
3638 -> 3624;
3639 -> 3632;
3639 -> 3624;
3640 -> 3626;
3640 -> 3624;
3641 -> 3624;
3642 -> 3625;
3642 -> 3632;
3642 -> 3624;
3643 -> 3626;
3643 -> 3632;
3643 -> 3624;
3644 -> 3627;
3644 -> 3632;
3644 -> 3624;
3645 -> 3628;
3645 -> 3632;
3645 -> 3624;
3646 -> 3629;
3646 -> 3632;
3646 -> 3624;
3647 -> 3630;
3647 -> 3632;
3647 -> 3624;
3648 -> 3631;
3648 -> 3632;
3648 -> 3624;
3649 -> 3632;
3649 -> 3648;
3649 -> 0;
3649 -> 3624;
3650 -> 3624;
3651 -> 3630;
3651 -> 3624;
3652 -> 3624;
3654 -> 3653;
3656 -> 3655;
3658 -> 3657;
3660 -> 3659;
3662 -> 3661;
3664 -> 3663;
3665 -> 0;
3666 -> 3665;
3666 -> 0;
3667 -> 3666;
3669 -> 3654;
3669 -> 3668;
3670 -> 3656;
3670 -> 3668;
3671 -> 3658;
3671 -> 3668;
3672 -> 3660;
3672 -> 3668;
3673 -> 3662;
3673 -> 3668;
3674 -> 3664;
3674 -> 3668;
3675 -> 3667;
3675 -> 3668;
3676 -> 3668;
3677 -> 3676;
3677 -> 3668;
3678 -> 3676;
3678 -> 3668;
3679 -> 3676;
3679 -> 3668;
3680 -> 3676;
3680 -> 3668;
3681 -> 3676;
3681 -> 3668;
3682 -> 3676;
3682 -> 3668;
3683 -> 3676;
3683 -> 3668;
3684 -> 3670;
3684 -> 3669;
3684 -> 3668;
3685 -> 3668;
3686 -> 3669;
3686 -> 3676;
3686 -> 3668;
3687 -> 3670;
3687 -> 3676;
3687 -> 3668;
3688 -> 3671;
3688 -> 3676;
3688 -> 3668;
3689 -> 3672;
3689 -> 3676;
3689 -> 3668;
3690 -> 3673;
3690 -> 3676;
3690 -> 3668;
3691 -> 3674;
3691 -> 3676;
3691 -> 3668;
3692 -> 3675;
3692 -> 3676;
3692 -> 3668;
3693 -> 3676;
3693 -> 3692;
3693 -> 0;
3693 -> 3668;
3694 -> 3668;
3695 -> 3674;
3695 -> 3668;
3696 -> 3676;
3696 -> 3692;
3696 -> 0;
3696 -> 3695;
3697 -> 3696;
3697 -> 3676;
3697 -> 3695;
3698 -> 3668;
3700 -> 3699;
3702 -> 3701;
3704 -> 3703;
3706 -> 3705;
3708 -> 3707;
3710 -> 3709;
3711 -> 0;
3712 -> 3711;
3712 -> 0;
3713 -> 3712;
3715 -> 3700;
3715 -> 3714;
3716 -> 3702;
3716 -> 3714;
3717 -> 3704;
3717 -> 3714;
3718 -> 3706;
3718 -> 3714;
3719 -> 3708;
3719 -> 3714;
3720 -> 3710;
3720 -> 3714;
3721 -> 3713;
3721 -> 3714;
3722 -> 3714;
3723 -> 3722;
3723 -> 3714;
3724 -> 3722;
3724 -> 3714;
3725 -> 3722;
3725 -> 3714;
3726 -> 3722;
3726 -> 3714;
3727 -> 3722;
3727 -> 3714;
3728 -> 3722;
3728 -> 3714;
3729 -> 3722;
3729 -> 3714;
3730 -> 3716;
3730 -> 3715;
3730 -> 3714;
3731 -> 3714;
3732 -> 3715;
3732 -> 3722;
3732 -> 3714;
3733 -> 3716;
3733 -> 3722;
3733 -> 3714;
3734 -> 3717;
3734 -> 3722;
3734 -> 3714;
3735 -> 3718;
3735 -> 3722;
3735 -> 3714;
3736 -> 3719;
3736 -> 3722;
3736 -> 3714;
3737 -> 3720;
3737 -> 3722;
3737 -> 3714;
3738 -> 3721;
3738 -> 3722;
3738 -> 3714;
3739 -> 3722;
3739 -> 3738;
3739 -> 0;
3739 -> 3714;
3740 -> 3714;
3741 -> 3720;
3741 -> 3714;
3742 -> 3714;
3744 -> 3743;
3746 -> 3745;
3748 -> 3747;
3750 -> 3749;
3752 -> 3751;
3754 -> 3753;
3755 -> 0;
3756 -> 3755;
3756 -> 0;
3757 -> 3756;
3759 -> 3744;
3759 -> 3758;
3760 -> 3746;
3760 -> 3758;
3761 -> 3748;
3761 -> 3758;
3762 -> 3750;
3762 -> 3758;
3763 -> 3752;
3763 -> 3758;
3764 -> 3754;
3764 -> 3758;
3765 -> 3757;
3765 -> 3758;
3766 -> 3758;
3767 -> 3766;
3767 -> 3758;
3768 -> 3766;
3768 -> 3758;
3769 -> 3766;
3769 -> 3758;
3770 -> 3766;
3770 -> 3758;
3771 -> 3766;
3771 -> 3758;
3772 -> 3766;
3772 -> 3758;
3773 -> 3766;
3773 -> 3758;
3774 -> 3760;
3774 -> 3758;
3775 -> 3758;
3776 -> 3759;
3776 -> 3766;
3776 -> 3758;
3777 -> 3760;
3777 -> 3766;
3777 -> 3758;
3778 -> 3761;
3778 -> 3766;
3778 -> 3758;
3779 -> 3762;
3779 -> 3766;
3779 -> 3758;
3780 -> 3763;
3780 -> 3766;
3780 -> 3758;
3781 -> 3764;
3781 -> 3766;
3781 -> 3758;
3782 -> 3765;
3782 -> 3766;
3782 -> 3758;
3783 -> 3766;
3783 -> 3782;
3783 -> 0;
3783 -> 3758;
3784 -> 3758;
3785 -> 3764;
3785 -> 3758;
3786 -> 3758;
3788 -> 3787;
3790 -> 3789;
3792 -> 3791;
3794 -> 3793;
3796 -> 3795;
3798 -> 3797;
3799 -> 0;
3800 -> 3799;
3800 -> 0;
3801 -> 3800;
3803 -> 3788;
3803 -> 3802;
3804 -> 3790;
3804 -> 3802;
3805 -> 3792;
3805 -> 3802;
3806 -> 3794;
3806 -> 3802;
3807 -> 3796;
3807 -> 3802;
3808 -> 3798;
3808 -> 3802;
3809 -> 3801;
3809 -> 3802;
3810 -> 3802;
3811 -> 3810;
3811 -> 3802;
3812 -> 3810;
3812 -> 3802;
3813 -> 3810;
3813 -> 3802;
3814 -> 3810;
3814 -> 3802;
3815 -> 3810;
3815 -> 3802;
3816 -> 3810;
3816 -> 3802;
3817 -> 3810;
3817 -> 3802;
3818 -> 3804;
3818 -> 3802;
3819 -> 3802;
3820 -> 3803;
3820 -> 3810;
3820 -> 3802;
3821 -> 3804;
3821 -> 3810;
3821 -> 3802;
3822 -> 3805;
3822 -> 3810;
3822 -> 3802;
3823 -> 3806;
3823 -> 3810;
3823 -> 3802;
3824 -> 3807;
3824 -> 3810;
3824 -> 3802;
3825 -> 3808;
3825 -> 3810;
3825 -> 3802;
3826 -> 3809;
3826 -> 3810;
3826 -> 3802;
3827 -> 3810;
3827 -> 3826;
3827 -> 0;
3827 -> 3802;
3828 -> 3802;
3829 -> 3808;
3829 -> 3802;
3830 -> 3802;
3831 -> 3257;
3832 -> 3831;
3832 -> 3247;
3832 -> 3248;
3832 -> 3249;
3832 -> 3250;
3832 -> 3251;
3832 -> 3252;
3832 -> 3253;
3833 -> 3832;
3834 -> 0;
3835 -> 3834;
3836 -> 3835;
3837 -> 0;
3838 -> 3837;
3839 -> 0;
3840 -> 3839;
3841 -> 3041;
3841 -> 3040;
3842 -> 3042;
3842 -> 3040;
3843 -> 3043;
3843 -> 3040;
3844 -> 3044;
3844 -> 3040;
3845 -> 3040;
3846 -> 3841;
3846 -> 3845;
3847 -> 3842;
3847 -> 3845;
3848 -> 3843;
3848 -> 3845;
3849 -> 3844;
3849 -> 3845;
3850 -> 3045;
3850 -> 3845;
3851 -> 3849;
3851 -> 3845;
3852 -> 3845;
3853 -> 3851;
3853 -> 3852;
3854 -> 3850;
3854 -> 3852;
3855 -> 3850;
3855 -> 3845;
3856 -> 3850;
3856 -> 3845;
3857 -> 3850;
3857 -> 3845;
3859 -> 3858;
3860 -> 3859;
3860 -> 3858;
3861 -> 3859;
3861 -> 3858;
3862 -> 3859;
3862 -> 3858;
3863 -> 3859;
3863 -> 3858;
3864 -> 3859;
3864 -> 3858;
3865 -> 3859;
3865 -> 3858;
3866 -> 3858;
3867 -> 3866;
3867 -> 3850;
3867 -> 3845;
3868 -> 3850;
3868 -> 3845;
3869 -> 3850;
3869 -> 3845;
3870 -> 3850;
3870 -> 3845;
3871 -> 3850;
3871 -> 3845;
3872 -> 3850;
3872 -> 3845;
3873 -> 2103;
3873 -> 3850;
3873 -> 3845;
3874 -> 3850;
3874 -> 3845;
3875 -> 3850;
3875 -> 3845;
3876 -> 3846;
3876 -> 3850;
3876 -> 3845;
3877 -> 3847;
3877 -> 3850;
3877 -> 3845;
3878 -> 3847;
3878 -> 3036;
3878 -> 3845;
3879 -> 3845;
3880 -> 3878;
3880 -> 3879;
3881 -> 3880;
3881 -> 3879;
3882 -> 0;
3882 -> 3881;
3883 -> 3882;
3883 -> 3845;
3884 -> 3848;
3884 -> 3845;
3885 -> 3845;
3886 -> 3883;
3886 -> 3885;
3887 -> 3884;
3887 -> 3885;
3888 -> 3850;
3888 -> 3885;
3889 -> 3885;
3890 -> 3888;
3890 -> 3889;
3891 -> 3890;
3891 -> 3876;
3891 -> 3889;
3892 -> 3891;
3892 -> 3885;
3893 -> 3885;
3894 -> 0;
3894 -> 3885;
3895 -> 3885;
3896 -> 3892;
3896 -> 3895;
3897 -> 3895;
3897 -> 3885;
3898 -> 0;
3898 -> 3897;
3899 -> 3886;
3899 -> 3885;
3900 -> 0;
3900 -> 3899;
3901 -> 3894;
3901 -> 3900;
3901 -> 3899;
3902 -> 3885;
3903 -> 3898;
3903 -> 3885;
3904 -> 3901;
3904 -> 3885;
3905 -> 3887;
3905 -> 3885;
3906 -> 3902;
3906 -> 3885;
3907 -> 3885;
3908 -> 3903;
3908 -> 3907;
3909 -> 3904;
3909 -> 3907;
3910 -> 3905;
3910 -> 3907;
3911 -> 3906;
3911 -> 3907;
3912 -> 3888;
3912 -> 3907;
3913 -> 3907;
3914 -> 0;
3914 -> 3907;
3915 -> 3912;
3915 -> 3877;
3915 -> 3036;
3915 -> 3907;
3916 -> 3907;
3917 -> 3907;
3918 -> 3917;
3918 -> 3915;
3918 -> 3907;
3919 -> 3912;
3919 -> 3877;
3919 -> 3036;
3919 -> 3917;
3919 -> 3918;
3920 -> 3919;
3920 -> 3918;
3921 -> 3918;
3922 -> 3913;
3922 -> 3918;
3923 -> 3920;
3923 -> 3922;
3924 -> 3909;
3924 -> 3922;
3925 -> 3912;
3925 -> 3877;
3925 -> 3919;
3925 -> 3917;
3925 -> 3922;
3926 -> 3910;
3926 -> 3922;
3927 -> 3922;
3928 -> 3913;
3928 -> 3922;
3929 -> 3922;
3930 -> 3923;
3930 -> 3929;
3931 -> 3924;
3931 -> 3929;
3932 -> 3925;
3932 -> 3929;
3933 -> 3926;
3933 -> 3929;
3934 -> 3927;
3934 -> 3929;
3935 -> 3928;
3935 -> 3929;
3936 -> 3929;
3937 -> 3930;
3937 -> 3931;
3937 -> 3929;
3938 -> 3930;
3938 -> 3931;
3938 -> 3929;
3939 -> 3937;
3939 -> 0;
3939 -> 3929;
3940 -> 3938;
3940 -> 0;
3940 -> 3929;
3941 -> 3929;
3942 -> 3938;
3942 -> 3929;
3943 -> 3936;
3943 -> 3922;
3944 -> 3942;
3944 -> 3943;
3945 -> 3912;
3945 -> 3943;
3946 -> 3943;
3947 -> 3943;
3948 -> 3944;
3948 -> 3947;
3949 -> 3945;
3949 -> 3947;
3950 -> 3946;
3950 -> 3947;
3951 -> 3948;
3951 -> 3947;
3952 -> 3947;
3953 -> 3951;
3953 -> 3952;
3954 -> 3953;
3954 -> 0;
3954 -> 3952;
3955 -> 3954;
3956 -> 3947;
3957 -> 3949;
3957 -> 3956;
3958 -> 0;
3958 -> 3956;
3959 -> 3958;
3959 -> 3947;
3960 -> 3950;
3960 -> 3959;
3960 -> 3947;
3961 -> 3948;
3961 -> 0;
3961 -> 3947;
3962 -> 3947;
3963 -> 3960;
3963 -> 3961;
3963 -> 3947;
3964 -> 3948;
3964 -> 0;
3964 -> 3963;
3965 -> 3947;
3966 -> 3965;
3966 -> 3943;
3967 -> 3943;
3968 -> 3966;
3968 -> 3967;
3968 -> 3943;
3969 -> 3914;
3969 -> 0;
3969 -> 3918;
3970 -> 3942;
3970 -> 3969;
3971 -> 3970;
3971 -> 0;
3971 -> 3907;
3972 -> 3907;
3973 -> 3916;
3973 -> 3907;
3974 -> 3907;
3975 -> 3912;
3975 -> 3974;
3976 -> 3975;
3976 -> 3877;
3976 -> 3925;
3976 -> 3974;
3977 -> 3976;
3977 -> 3907;
3978 -> 0;
3978 -> 3907;
3979 -> 3970;
3979 -> 3907;
3981 -> 3980;
3982 -> 3888;
3982 -> 3885;
3983 -> 3979;
3983 -> 3885;
3984 -> 3887;
3984 -> 3885;
3985 -> 3885;
3986 -> 3982;
3986 -> 3985;
3987 -> 3983;
3987 -> 3985;
3988 -> 3984;
3988 -> 3985;
3989 -> 3986;
3989 -> 3985;
3990 -> 3987;
3990 -> 3985;
3991 -> 3985;
3992 -> 3986;
3992 -> 3991;
3993 -> 3992;
3993 -> 3877;
3993 -> 3925;
3993 -> 3991;
3994 -> 3993;
3994 -> 3985;
3995 -> 3985;
3996 -> 3988;
3996 -> 3985;
3997 -> 3985;
3998 -> 3989;
3998 -> 3997;
3999 -> 3990;
3999 -> 3997;
4000 -> 3994;
4000 -> 3997;
4001 -> 3996;
4001 -> 3997;
4002 -> 3999;
4002 -> 0;
4002 -> 3997;
4003 -> 3885;
4004 -> 3979;
4004 -> 0;
4004 -> 3885;
4005 -> 3885;
4006 -> 3936;
4006 -> 4004;
4006 -> 3885;
4007 -> 0;
4007 -> 3885;
4008 -> 3979;
4008 -> 4007;
4008 -> 3885;
4009 -> 3936;
4009 -> 4008;
4009 -> 3885;
4010 -> 3886;
4010 -> 3885;
4011 -> 3979;
4011 -> 0;
4011 -> 4010;
4012 -> 4011;
4012 -> 3885;
4013 -> 3847;
4013 -> 3994;
4013 -> 3845;
4014 -> 4013;
4014 -> 3994;
4015 -> 3848;
4015 -> 4014;
4015 -> 3036;
4015 -> 3994;
4015 -> 4013;
4016 -> 4012;
4016 -> 0;
4016 -> 3845;
4017 -> 3845;
4018 -> 4016;
4018 -> 4017;
4018 -> 3845;
4019 -> 4012;
4019 -> 3850;
4019 -> 3845;
4020 -> 4016;
4020 -> 0;
4020 -> 3845;
4021 -> 4020;
4021 -> 3845;
4022 -> 4021;
4023 -> 3850;
4023 -> 4022;
4024 -> 4022;
4025 -> 4023;
4025 -> 4024;
4026 -> 4025;
4026 -> 3876;
4026 -> 4024;
4027 -> 4026;
4027 -> 4022;
4028 -> 4022;
4029 -> 4027;
4029 -> 4028;
4030 -> 4028;
4030 -> 4022;
4031 -> 4022;
4032 -> 4023;
4032 -> 4031;
4033 -> 4032;
4033 -> 3876;
4033 -> 4031;
4034 -> 4033;
4034 -> 4022;
4035 -> 4022;
4036 -> 4034;
4036 -> 4035;
4037 -> 4035;
4038 -> 4036;
4038 -> 4015;
4038 -> 4037;
4039 -> 4038;
4039 -> 4015;
4039 -> 4037;
4040 -> 4022;
4041 -> 4039;
4041 -> 4040;
4042 -> 4030;
4042 -> 4041;
4042 -> 4022;
4043 -> 0;
4043 -> 4042;
4045 -> 4044;
4047 -> 4046;
4048 -> 4045;
4048 -> 4047;
4049 -> 4048;
4051 -> 4050;
4052 -> 4049;
4052 -> 4051;
4053 -> 4052;
4055 -> 4054;
4056 -> 4053;
4056 -> 4055;
4057 -> 4056;
4059 -> 4058;
4060 -> 4057;
4060 -> 4059;
4061 -> 4060;
4063 -> 4062;
4064 -> 4061;
4064 -> 4063;
4065 -> 4064;
4067 -> 4066;
4069 -> 4068;
4069 -> 4047;
4071 -> 4069;
4071 -> 4070;
4072 -> 4071;
4074 -> 4073;
4074 -> 4051;
4076 -> 4074;
4076 -> 4075;
4077 -> 4076;
4079 -> 4078;
4079 -> 4063;
4081 -> 4079;
4081 -> 4080;
4082 -> 4081;
4084 -> 4083;
4084 -> 4067;
4086 -> 4084;
4086 -> 4085;
4087 -> 4086;
4089 -> 4088;
4089 -> 4053;
4090 -> 4089;
4092 -> 4091;
4092 -> 4057;
4093 -> 4092;
4094 -> 4072;
4095 -> 4087;
4096 -> 4043;
4096 -> 3845;
4097 -> 3882;
4097 -> 3845;
4098 -> 3845;
4099 -> 3845;
4100 -> 4096;
4100 -> 4099;
4101 -> 4097;
4101 -> 4099;
4102 -> 4098;
4102 -> 4099;
4103 -> 4100;
4103 -> 4072;
4103 -> 4099;
4104 -> 4103;
4104 -> 4045;
4104 -> 4099;
4105 -> 4101;
4105 -> 4082;
4105 -> 4099;
4106 -> 4105;
4106 -> 4061;
4106 -> 4099;
4107 -> 4104;
4107 -> 4106;
4107 -> 4099;
4108 -> 4107;
4108 -> 4102;
4108 -> 4099;
4109 -> 4098;
4109 -> 3850;
4109 -> 3845;
4110 -> 3845;
4111 -> 3850;
4111 -> 4110;
4112 -> 4111;
4112 -> 3876;
4112 -> 4110;
4113 -> 4112;
4113 -> 3845;
4114 -> 4113;
4114 -> 3845;
4115 -> 3845;
4116 -> 0;
4116 -> 3845;
4117 -> 3845;
4118 -> 4116;
4118 -> 4117;
4119 -> 3850;
4119 -> 4117;
4120 -> 4119;
4120 -> 4118;
4120 -> 4117;
4121 -> 3045;
4121 -> 3040;
4122 -> 3045;
4122 -> 3040;
4123 -> 3045;
4123 -> 3040;
4124 -> 0;
4124 -> 3045;
4124 -> 3040;
4125 -> 3045;
4125 -> 3040;
4126 -> 2630;
4126 -> 3045;
4126 -> 3040;
4127 -> 3045;
4127 -> 3040;
4128 -> 2630;
4128 -> 3045;
4128 -> 3040;
4129 -> 3042;
4129 -> 4015;
4129 -> 3040;
4130 -> 3040;
4131 -> 3041;
4131 -> 4130;
4132 -> 4130;
4132 -> 3040;
4133 -> 3039;
4133 -> 3036;
4134 -> 4133;
4134 -> 3877;
4134 -> 4015;
4134 -> 3036;
4135 -> 3036;
4135 -> 4015;
4136 -> 4135;
4136 -> 4015;
4137 -> 4015;
4138 -> 4136;
4138 -> 4015;
4139 -> 4137;
4139 -> 4015;
4140 -> 4138;
4140 -> 4015;
4141 -> 4139;
4141 -> 4015;
4142 -> 4141;
4142 -> 4015;
4143 -> 4015;
4144 -> 4015;
4145 -> 4015;
4146 -> 4015;
4147 -> 3866;
4147 -> 4015;
4148 -> 4015;
4149 -> 4015;
4150 -> 4015;
4151 -> 4015;
4152 -> 4015;
4153 -> 2103;
4153 -> 4015;
4154 -> 4015;
4155 -> 4015;
4156 -> 4140;
4156 -> 4015;
4157 -> 4015;
4158 -> 4015;
4159 -> 4157;
4159 -> 4158;
4160 -> 4159;
4160 -> 4158;
4161 -> 0;
4161 -> 4160;
4162 -> 4161;
4162 -> 4015;
4163 -> 4015;
4164 -> 4162;
4164 -> 4015;
4165 -> 4163;
4165 -> 4015;
4166 -> 4015;
4167 -> 4015;
4167 -> 4166;
4168 -> 4167;
4168 -> 4156;
4168 -> 4166;
4169 -> 4168;
4169 -> 4015;
4170 -> 4015;
4171 -> 0;
4171 -> 4015;
4172 -> 4015;
4173 -> 4169;
4173 -> 4172;
4174 -> 4172;
4174 -> 4015;
4175 -> 0;
4175 -> 4174;
4176 -> 4164;
4176 -> 4015;
4177 -> 0;
4177 -> 4176;
4178 -> 4171;
4178 -> 4177;
4178 -> 4176;
4179 -> 4176;
4180 -> 4015;
4180 -> 4179;
4181 -> 4179;
4182 -> 4180;
4182 -> 4015;
4182 -> 4181;
4182 -> 4179;
4183 -> 4182;
4183 -> 4176;
4184 -> 4178;
4184 -> 0;
4184 -> 4183;
4185 -> 4015;
4186 -> 4175;
4186 -> 4015;
4187 -> 4184;
4187 -> 4015;
4188 -> 4165;
4188 -> 4015;
4189 -> 4185;
4189 -> 4015;
4190 -> 4186;
4190 -> 4015;
4191 -> 4187;
4191 -> 4015;
4192 -> 4188;
4192 -> 4015;
4193 -> 4189;
4193 -> 4015;
4194 -> 0;
4194 -> 4015;
4195 -> 4015;
4196 -> 4182;
4197 -> 4182;
4198 -> 4192;
4198 -> 4182;
4199 -> 4182;
4200 -> 4196;
4200 -> 4199;
4201 -> 4191;
4201 -> 4199;
4202 -> 4196;
4202 -> 4199;
4203 -> 4198;
4203 -> 4199;
4204 -> 4196;
4204 -> 4199;
4205 -> 4182;
4205 -> 4199;
4206 -> 4199;
4207 -> 4200;
4207 -> 4201;
4207 -> 4199;
4208 -> 4200;
4208 -> 4201;
4208 -> 4199;
4209 -> 4207;
4209 -> 0;
4209 -> 4199;
4210 -> 4208;
4210 -> 0;
4210 -> 4199;
4211 -> 4199;
4212 -> 4208;
4212 -> 4199;
4213 -> 4206;
4213 -> 4182;
4214 -> 4212;
4214 -> 4213;
4215 -> 4015;
4215 -> 4213;
4216 -> 4213;
4217 -> 4213;
4218 -> 4214;
4218 -> 4217;
4219 -> 4215;
4219 -> 4217;
4220 -> 4216;
4220 -> 4217;
4221 -> 4218;
4221 -> 4217;
4222 -> 4217;
4223 -> 4221;
4223 -> 4222;
4224 -> 4223;
4224 -> 0;
4224 -> 4222;
4225 -> 4224;
4226 -> 4217;
4227 -> 4219;
4227 -> 4226;
4228 -> 0;
4228 -> 4226;
4229 -> 4228;
4229 -> 4217;
4230 -> 4220;
4230 -> 4229;
4230 -> 4217;
4231 -> 4218;
4231 -> 0;
4231 -> 4217;
4232 -> 4217;
4233 -> 4230;
4233 -> 4231;
4233 -> 4217;
4234 -> 4218;
4234 -> 0;
4234 -> 4233;
4235 -> 4217;
4236 -> 4235;
4236 -> 4213;
4237 -> 4213;
4238 -> 4236;
4238 -> 4237;
4238 -> 4213;
4239 -> 4194;
4239 -> 0;
4239 -> 4182;
4240 -> 4212;
4240 -> 4239;
4241 -> 4240;
4241 -> 0;
4241 -> 4015;
4242 -> 4015;
4243 -> 4195;
4243 -> 4015;
4244 -> 4015;
4245 -> 4015;
4245 -> 4244;
4246 -> 4245;
4246 -> 4015;
4246 -> 4182;
4246 -> 4244;
4247 -> 4246;
4247 -> 4015;
4248 -> 0;
4248 -> 4015;
4249 -> 4240;
4249 -> 4015;
4250 -> 4249;
4250 -> 4015;
4251 -> 4165;
4251 -> 4015;
4252 -> 4015;
4253 -> 4015;
4253 -> 4252;
4254 -> 4250;
4254 -> 4252;
4255 -> 4182;
4255 -> 4252;
4256 -> 4251;
4256 -> 4252;
4257 -> 4254;
4257 -> 0;
4257 -> 4252;
4258 -> 4249;
4258 -> 0;
4258 -> 4015;
4259 -> 4015;
4260 -> 4206;
4260 -> 4258;
4260 -> 4015;
4261 -> 0;
4261 -> 4015;
4262 -> 4249;
4262 -> 4261;
4262 -> 4015;
4263 -> 4206;
4263 -> 4262;
4263 -> 4015;
4264 -> 4164;
4264 -> 4015;
4265 -> 4249;
4265 -> 4015;
4266 -> 4265;
4266 -> 0;
4266 -> 4015;
4267 -> 4015;
4268 -> 4266;
4268 -> 4267;
4268 -> 4015;
4269 -> 4265;
4269 -> 4015;
4270 -> 4266;
4270 -> 0;
4270 -> 4015;
4271 -> 4270;
4271 -> 4015;
4272 -> 4271;
4272 -> 4015;
4273 -> 4161;
4273 -> 4015;
4274 -> 4015;
4275 -> 4015;
4276 -> 4272;
4276 -> 4275;
4277 -> 4273;
4277 -> 4275;
4278 -> 4274;
4278 -> 4275;
4279 -> 4276;
4279 -> 4072;
4279 -> 4275;
4280 -> 4279;
4280 -> 4045;
4280 -> 4275;
4281 -> 4277;
4281 -> 4082;
4281 -> 4275;
4282 -> 4281;
4282 -> 4061;
4282 -> 4275;
4283 -> 4280;
4283 -> 4282;
4283 -> 4275;
4284 -> 4283;
4284 -> 4278;
4284 -> 4275;
4285 -> 4274;
4285 -> 4015;
4286 -> 4015;
4287 -> 4015;
4287 -> 4286;
4288 -> 4287;
4288 -> 4156;
4288 -> 4286;
4289 -> 4288;
4289 -> 4015;
4290 -> 4289;
4290 -> 4015;
4291 -> 4015;
4292 -> 0;
4292 -> 4015;
4293 -> 4015;
4294 -> 4292;
4294 -> 4293;
4295 -> 4015;
4296 -> 4015;
4297 -> 4015;
4298 -> 0;
4298 -> 4015;
4299 -> 4015;
4300 -> 2630;
4300 -> 4015;
4301 -> 4015;
4302 -> 2630;
4302 -> 4015;
4303 -> 4015;
4303 -> 4182;
4304 -> 4015;
4305 -> 4136;
4305 -> 4304;
4306 -> 4304;
4306 -> 4015;
4307 -> 4015;
4308 -> 4307;
4308 -> 4015;
4308 -> 4182;
4309 -> 3036;
4309 -> 4182;
4310 -> 4309;
4310 -> 4182;
4311 -> 4182;
4312 -> 4310;
4312 -> 4182;
4313 -> 4311;
4313 -> 4182;
4314 -> 4312;
4314 -> 4182;
4315 -> 4313;
4315 -> 4182;
4316 -> 4315;
4316 -> 4182;
4317 -> 4182;
4318 -> 4182;
4319 -> 4182;
4320 -> 4182;
4321 -> 3866;
4321 -> 4182;
4322 -> 4182;
4323 -> 4182;
4324 -> 4182;
4325 -> 4182;
4326 -> 4182;
4327 -> 2103;
4327 -> 4182;
4328 -> 4182;
4329 -> 4182;
4330 -> 4314;
4330 -> 4182;
4331 -> 0;
4331 -> 4182;
4332 -> 4182;
4333 -> 4182;
4334 -> 4182;
4334 -> 4333;
4335 -> 4334;
4335 -> 4330;
4335 -> 4333;
4336 -> 4335;
4336 -> 4182;
4337 -> 4182;
4338 -> 0;
4338 -> 4182;
4339 -> 4182;
4340 -> 4336;
4340 -> 4339;
4341 -> 4339;
4341 -> 4182;
4342 -> 0;
4342 -> 4341;
4343 -> 0;
4343 -> 4331;
4344 -> 4338;
4344 -> 4343;
4344 -> 4331;
4345 -> 4182;
4346 -> 4342;
4346 -> 4182;
4347 -> 4344;
4347 -> 4182;
4348 -> 4332;
4348 -> 4182;
4349 -> 4345;
4349 -> 4182;
4350 -> 4346;
4350 -> 4182;
4351 -> 4347;
4351 -> 4182;
4352 -> 4348;
4352 -> 4182;
4353 -> 4349;
4353 -> 4182;
4354 -> 0;
4354 -> 4182;
4355 -> 4182;
4356 -> 4351;
4356 -> 4199;
4357 -> 4352;
4357 -> 4199;
4358 -> 4196;
4358 -> 4199;
4359 -> 4200;
4359 -> 4356;
4359 -> 4199;
4360 -> 4200;
4360 -> 4356;
4360 -> 4199;
4361 -> 4359;
4361 -> 0;
4361 -> 4199;
4362 -> 4360;
4362 -> 0;
4362 -> 4199;
4363 -> 4360;
4363 -> 4199;
4364 -> 4363;
4364 -> 4213;
4365 -> 4182;
4365 -> 4213;
4366 -> 4364;
4366 -> 4217;
4367 -> 4365;
4367 -> 4217;
4368 -> 4366;
4368 -> 4217;
4369 -> 4368;
4369 -> 4222;
4370 -> 4369;
4370 -> 0;
4370 -> 4222;
4371 -> 4370;
4372 -> 4367;
4372 -> 4226;
4373 -> 4366;
4373 -> 0;
4373 -> 4217;
4374 -> 4230;
4374 -> 4373;
4374 -> 4217;
4375 -> 4366;
4375 -> 0;
4375 -> 4374;
4376 -> 4354;
4376 -> 0;
4376 -> 4182;
4377 -> 4363;
4377 -> 4376;
4378 -> 4377;
4378 -> 0;
4378 -> 4182;
4379 -> 4182;
4380 -> 4355;
4380 -> 4182;
4381 -> 4182;
4382 -> 4182;
4382 -> 4381;
4383 -> 4382;
4383 -> 4182;
4383 -> 4196;
4383 -> 4381;
4384 -> 4383;
4384 -> 4182;
4385 -> 0;
4385 -> 4182;
4386 -> 4377;
4386 -> 4182;
4387 -> 4386;
4387 -> 4182;
4388 -> 4332;
4388 -> 4182;
4389 -> 4182;
4390 -> 4182;
4390 -> 4389;
4391 -> 4387;
4391 -> 4389;
4392 -> 4196;
4392 -> 4389;
4393 -> 4388;
4393 -> 4389;
4394 -> 4391;
4394 -> 0;
4394 -> 4389;
4395 -> 4386;
4395 -> 0;
4395 -> 4182;
4396 -> 4182;
4397 -> 4206;
4397 -> 4395;
4397 -> 4182;
4398 -> 0;
4398 -> 4182;
4399 -> 4386;
4399 -> 4398;
4399 -> 4182;
4400 -> 4206;
4400 -> 4399;
4400 -> 4182;
4401 -> 4331;
4401 -> 4182;
4402 -> 4386;
4402 -> 0;
4402 -> 4401;
4403 -> 4402;
4403 -> 4182;
4404 -> 4403;
4404 -> 0;
4404 -> 4182;
4405 -> 4182;
4406 -> 4404;
4406 -> 4405;
4406 -> 4182;
4407 -> 4403;
4407 -> 4182;
4408 -> 4404;
4408 -> 0;
4408 -> 4182;
4409 -> 4408;
4409 -> 4182;
4410 -> 4409;
4411 -> 4182;
4411 -> 4410;
4412 -> 4410;
4413 -> 4411;
4413 -> 4412;
4414 -> 4413;
4414 -> 4330;
4414 -> 4412;
4415 -> 4414;
4415 -> 4410;
4416 -> 4410;
4417 -> 4415;
4417 -> 4416;
4418 -> 4416;
4418 -> 4410;
4419 -> 4410;
4420 -> 4411;
4420 -> 4419;
4421 -> 4420;
4421 -> 4330;
4421 -> 4419;
4422 -> 4421;
4422 -> 4410;
4423 -> 4410;
4424 -> 4422;
4424 -> 4423;
4425 -> 4423;
4426 -> 4424;
4426 -> 4196;
4426 -> 4425;
4427 -> 4426;
4427 -> 4196;
4427 -> 4425;
4428 -> 4410;
4429 -> 4427;
4429 -> 4428;
4430 -> 4418;
4430 -> 4429;
4430 -> 4410;
4431 -> 4271;
4431 -> 4430;
4432 -> 4431;
4432 -> 4182;
4433 -> 4331;
4433 -> 4182;
4434 -> 4182;
4435 -> 4182;
4436 -> 4432;
4436 -> 4435;
4437 -> 4433;
4437 -> 4435;
4438 -> 4434;
4438 -> 4435;
4439 -> 4436;
4439 -> 4072;
4439 -> 4435;
4440 -> 4439;
4440 -> 4045;
4440 -> 4435;
4441 -> 4437;
4441 -> 4082;
4441 -> 4435;
4442 -> 4441;
4442 -> 4061;
4442 -> 4435;
4443 -> 4440;
4443 -> 4442;
4443 -> 4435;
4444 -> 4443;
4444 -> 4438;
4444 -> 4435;
4445 -> 4434;
4445 -> 4182;
4446 -> 4182;
4447 -> 4182;
4447 -> 4446;
4448 -> 4447;
4448 -> 4330;
4448 -> 4446;
4449 -> 4448;
4449 -> 4182;
4450 -> 4449;
4450 -> 4182;
4451 -> 4182;
4452 -> 0;
4452 -> 4182;
4453 -> 4182;
4454 -> 4452;
4454 -> 4453;
4455 -> 4182;
4456 -> 4182;
4457 -> 4182;
4458 -> 0;
4458 -> 4182;
4459 -> 4182;
4460 -> 2630;
4460 -> 4182;
4461 -> 4182;
4462 -> 2630;
4462 -> 4182;
4463 -> 4182;
4463 -> 4196;
4464 -> 4182;
4465 -> 4310;
4465 -> 4464;
4466 -> 4464;
4466 -> 4182;
4467 -> 4182;
4468 -> 4467;
4468 -> 4182;
4468 -> 4196;
4469 -> 4468;
4470 -> 4469;
4470 -> 4468;
4471 -> 4468;
4472 -> 0;
4472 -> 4468;
4473 -> 4472;
4474 -> 4473;
4474 -> 4472;
4475 -> 4472;
4476 -> 3036;
4477 -> 3036;
4478 -> 3036;
4479 -> 3036;
4480 -> 3036;
4481 -> 4476;
4481 -> 4480;
4482 -> 4480;
4483 -> 4481;
4483 -> 4196;
4483 -> 4482;
4484 -> 4483;
4484 -> 4196;
4484 -> 4482;
4485 -> 4484;
4485 -> 3036;
4486 -> 3036;
4487 -> 4485;
4487 -> 4486;
4488 -> 3036;
4489 -> 4478;
4489 -> 4472;
4490 -> 4472;
4491 -> 4472;
4492 -> 4472;
4493 -> 4491;
4493 -> 4492;
4493 -> 4472;
4494 -> 4493;
4494 -> 4472;
4495 -> 4494;
4496 -> 4491;
4496 -> 4495;
4497 -> 4496;
4497 -> 4472;
4497 -> 4495;
4498 -> 4497;
4498 -> 4478;
4498 -> 4489;
4498 -> 4472;
4499 -> 4478;
4499 -> 4489;
4499 -> 4497;
4499 -> 4472;
4500 -> 4472;
4501 -> 4499;
4501 -> 4500;
4501 -> 4472;
4502 -> 4479;
4502 -> 4500;
4502 -> 4472;
4503 -> 4501;
4503 -> 4502;
4503 -> 4472;
4504 -> 4472;
4505 -> 4499;
4505 -> 4504;
4505 -> 4472;
4506 -> 4472;
4506 -> 4497;
4506 -> 4478;
4507 -> 4472;
4508 -> 4491;
4508 -> 4507;
4508 -> 4472;
4509 -> 4508;
4510 -> 4491;
4510 -> 4509;
4511 -> 4510;
4511 -> 4472;
4511 -> 4509;
4512 -> 4509;
4513 -> 4511;
4513 -> 4512;
4514 -> 4513;
4514 -> 0;
4514 -> 4512;
4515 -> 0;
4515 -> 4514;
4516 -> 4515;
4516 -> 4508;
4517 -> 4516;
4517 -> 0;
4517 -> 4508;
4518 -> 4478;
4518 -> 4489;
4518 -> 4506;
4518 -> 4472;
4519 -> 4518;
4519 -> 4478;
4520 -> 4478;
4520 -> 4518;
4521 -> 4518;
4522 -> 4520;
4522 -> 4521;
4522 -> 4518;
4523 -> 4479;
4523 -> 4521;
4523 -> 4518;
4524 -> 4522;
4524 -> 4523;
4524 -> 4518;
4525 -> 4518;
4526 -> 4520;
4526 -> 4525;
4526 -> 4518;
4527 -> 4518;
4528 -> 4527;
4529 -> 4518;
4529 -> 4528;
4530 -> 4529;
4530 -> 4518;
4530 -> 4528;
4531 -> 4528;
4532 -> 4530;
4532 -> 4531;
4533 -> 4532;
4533 -> 0;
4533 -> 4531;
4534 -> 0;
4534 -> 4533;
4535 -> 4534;
4535 -> 4527;
4536 -> 4535;
4536 -> 0;
4536 -> 4527;
4537 -> 0;
4537 -> 4533;
4538 -> 4537;
4538 -> 4527;
4539 -> 4538;
4539 -> 0;
4539 -> 4527;
4540 -> 4518;
4541 -> 4518;
4541 -> 4540;
4542 -> 4540;
4542 -> 4518;
4543 -> 4518;
4544 -> 4518;
4545 -> 3036;
4545 -> 4544;
4546 -> 4544;
4547 -> 4545;
4547 -> 4546;
4548 -> 4546;
4549 -> 4547;
4549 -> 4518;
4549 -> 4548;
4550 -> 4549;
4550 -> 4518;
4550 -> 4548;
4551 -> 4550;
4551 -> 4544;
4552 -> 4544;
4553 -> 4551;
4553 -> 4552;
4554 -> 4553;
4554 -> 4544;
4555 -> 4518;
4556 -> 4518;
4557 -> 4518;
4557 -> 3035;
4558 -> 3035;
4559 -> 3033;
4559 -> 4557;
4559 -> 3035;
4560 -> 4557;
4560 -> 3035;
4561 -> 3033;
4561 -> 4559;
4561 -> 3035;
4562 -> 4561;
4562 -> 3032;
4563 -> 4562;
4563 -> 3030;
4564 -> 3030;
4565 -> 4563;
4565 -> 4562;
4565 -> 4564;
4565 -> 3030;
4566 -> 0;
4566 -> 4565;
4567 -> 4565;
4568 -> 4566;
4568 -> 4567;
4569 -> 4566;
4569 -> 4567;
4570 -> 4569;
4570 -> 4567;
4571 -> 4568;
4571 -> 4569;
4571 -> 4567;
4572 -> 4568;
4572 -> 4567;
4573 -> 4567;
4574 -> 4572;
4574 -> 4573;
4575 -> 4569;
4575 -> 4573;
4576 -> 4574;
4576 -> 4573;
4577 -> 4573;
4578 -> 4573;
4579 -> 4576;
4579 -> 4578;
4580 -> 4577;
4580 -> 4578;
4581 -> 4575;
4581 -> 4578;
4582 -> 4579;
4582 -> 4578;
4583 -> 4582;
4583 -> 4578;
4584 -> 4582;
4584 -> 4578;
4585 -> 4580;
4585 -> 4578;
4586 -> 4578;
4587 -> 4584;
4587 -> 4586;
4588 -> 4585;
4588 -> 4586;
4589 -> 4581;
4589 -> 4586;
4590 -> 4587;
4590 -> 4586;
4591 -> 4587;
4591 -> 4590;
4592 -> 4588;
4592 -> 4590;
4593 -> 4590;
4594 -> 4591;
4594 -> 4593;
4595 -> 4592;
4595 -> 4593;
4596 -> 4589;
4596 -> 4593;
4597 -> 4594;
4597 -> 4596;
4597 -> 4593;
4598 -> 4593;
4599 -> 4594;
4599 -> 4598;
4599 -> 4593;
4600 -> 4595;
4600 -> 0;
4600 -> 4593;
4601 -> 4593;
4602 -> 4594;
4602 -> 4593;
4603 -> 4593;
4604 -> 4602;
4604 -> 4603;
4604 -> 4593;
4605 -> 4593;
4606 -> 4596;
4606 -> 4605;
4607 -> 4606;
4607 -> 4605;
4608 -> 4607;
4608 -> 4593;
4609 -> 4593;
4610 -> 4602;
4610 -> 4609;
4611 -> 4610;
4611 -> 4609;
4612 -> 4611;
4612 -> 4593;
4613 -> 4596;
4613 -> 4608;
4613 -> 4593;
4614 -> 4602;
4614 -> 4612;
4614 -> 4593;
4615 -> 4613;
4615 -> 4614;
4615 -> 4593;
4616 -> 4615;
4617 -> 4566;
4617 -> 4567;
4618 -> 4567;
4619 -> 4617;
4619 -> 4616;
4619 -> 4618;
4620 -> 4619;
4620 -> 4616;
4620 -> 4618;
4621 -> 4618;
4622 -> 4620;
4622 -> 4567;
4623 -> 4622;
4624 -> 4623;
4625 -> 4623;
4625 -> 4624;
4626 -> 4624;
4626 -> 4623;
4627 -> 4623;
4628 -> 4623;
4629 -> 4627;
4629 -> 4628;
4630 -> 4629;
4630 -> 4616;
4630 -> 4628;
4631 -> 4630;
4631 -> 4623;
4632 -> 4623;
4633 -> 4631;
4633 -> 4632;
4633 -> 4623;
4634 -> 4633;
4634 -> 4623;
4635 -> 4634;
4636 -> 4635;
4636 -> 4622;
4637 -> 4622;
4638 -> 4636;
4638 -> 4637;
4639 -> 4636;
4639 -> 4637;
4640 -> 4636;
4640 -> 4637;
4641 -> 4638;
4641 -> 4636;
4641 -> 4637;
4642 -> 4638;
4642 -> 4636;
4642 -> 4637;
4643 -> 4639;
4643 -> 4637;
4644 -> 4637;
4645 -> 4641;
4645 -> 4644;
4646 -> 4642;
4646 -> 4644;
4647 -> 4643;
4647 -> 4644;
4648 -> 4640;
4648 -> 4644;
4649 -> 4644;
4650 -> 4645;
4650 -> 4649;
4650 -> 4644;
4651 -> 4645;
4651 -> 4650;
4652 -> 4650;
4653 -> 4651;
4653 -> 4652;
4654 -> 4647;
4654 -> 4652;
4655 -> 4653;
4655 -> 4652;
4656 -> 4652;
4657 -> 4655;
4657 -> 4656;
4658 -> 4654;
4658 -> 4656;
4659 -> 4656;
4660 -> 4657;
4660 -> 4659;
4660 -> 4656;
4661 -> 4658;
4661 -> 4636;
4661 -> 4656;
4662 -> 4657;
4662 -> 4656;
4663 -> 4661;
4663 -> 4662;
4663 -> 4656;
4664 -> 4654;
4664 -> 4663;
4664 -> 4652;
4665 -> 4646;
4665 -> 4644;
4666 -> 4664;
4666 -> 4644;
4667 -> 4665;
4667 -> 4644;
4668 -> 4648;
4668 -> 4644;
4669 -> 4644;
4670 -> 4667;
4670 -> 4669;
4670 -> 4644;
4671 -> 4644;
4672 -> 4666;
4672 -> 4671;
4672 -> 4644;
4673 -> 4666;
4673 -> 4668;
4673 -> 4644;
4674 -> 4667;
4674 -> 4668;
4674 -> 4644;
4675 -> 4636;
4675 -> 4664;
4675 -> 4673;
4675 -> 4674;
4675 -> 4622;
4676 -> 4622;
4677 -> 4675;
4677 -> 4676;
4678 -> 4617;
4678 -> 4675;
4678 -> 4676;
4679 -> 4676;
4680 -> 4677;
4680 -> 4679;
4681 -> 4680;
4681 -> 4676;
4682 -> 4677;
4682 -> 4675;
4682 -> 4678;
4682 -> 4676;
4683 -> 4678;
4683 -> 4675;
4683 -> 4676;
4684 -> 4677;
4684 -> 4675;
4684 -> 4680;
4684 -> 4676;
4685 -> 4683;
4685 -> 4684;
4685 -> 4676;
4686 -> 4617;
4686 -> 4675;
4686 -> 4567;
4687 -> 4566;
4687 -> 4686;
4687 -> 4675;
4687 -> 4682;
4687 -> 4685;
4687 -> 4565;
4688 -> 4687;
4689 -> 4687;
4689 -> 4688;
4690 -> 4688;
4690 -> 4687;
4691 -> 4687;
4692 -> 4687;
4693 -> 4687;
4694 -> 4567;
4695 -> 4566;
4695 -> 4694;
4696 -> 4694;
4696 -> 4567;
4697 -> 4566;
4697 -> 4567;
4698 -> 4567;
4699 -> 4697;
4699 -> 4698;
4700 -> 4567;
4701 -> 4566;
4701 -> 4567;
4702 -> 4566;
4702 -> 4567;
4703 -> 4567;
4704 -> 4567;
4705 -> 4701;
4705 -> 4704;
4706 -> 4705;
4706 -> 4687;
4706 -> 4704;
4707 -> 4706;
4707 -> 4567;
4708 -> 4567;
4709 -> 4702;
4709 -> 4708;
4710 -> 4709;
4710 -> 4687;
4710 -> 4708;
4711 -> 4710;
4711 -> 4567;
4712 -> 4707;
4712 -> 4711;
4712 -> 4567;
4713 -> 4567;
4714 -> 4701;
4714 -> 4713;
4715 -> 4714;
4715 -> 4687;
4715 -> 4713;
4716 -> 4715;
4716 -> 4567;
4717 -> 4567;
4718 -> 4702;
4718 -> 4717;
4719 -> 4718;
4719 -> 4687;
4719 -> 4717;
4720 -> 4719;
4720 -> 4567;
4721 -> 4716;
4721 -> 4720;
4721 -> 4567;
4722 -> 4705;
4722 -> 4721;
4722 -> 4704;
4723 -> 4722;
4723 -> 4567;
4724 -> 4709;
4724 -> 4721;
4724 -> 4708;
4725 -> 4724;
4725 -> 4567;
4726 -> 4723;
4726 -> 4725;
4726 -> 4567;
4727 -> 4721;
4728 -> 4721;
4728 -> 4727;
4729 -> 4727;
4729 -> 4721;
4730 -> 4721;
4731 -> 4721;
4732 -> 4721;
4733 -> 3029;
4733 -> 4721;
4733 -> 4565;
4734 -> 4721;
4734 -> 4565;
4735 -> 3029;
4735 -> 4733;
4735 -> 3030;
4736 -> 2074;
4736 -> 3030;
4737 -> 4721;
4737 -> 3030;
4738 -> 4737;
4738 -> 1;
4739 -> 1;
4740 -> 1;
4741 -> 4739;
4741 -> 4740;
4742 -> 3026;
4742 -> 4740;
4743 -> 4740;
4744 -> 4743;
4744 -> 4740;
4745 -> 4740;
4746 -> 4742;
4746 -> 4745;
4747 -> 4745;
4748 -> 4746;
4748 -> 4733;
4748 -> 4747;
4748 -> 4745;
4749 -> 4746;
4749 -> 4733;
4749 -> 4748;
4750 -> 4748;
4751 -> 4750;
4751 -> 4748;
4752 -> 4748;
4753 -> 4751;
4753 -> 4752;
4754 -> 0;
4754 -> 4752;
4755 -> 4753;
4755 -> 4752;
4756 -> 4755;
4756 -> 4733;
4756 -> 4735;
4756 -> 4752;
4757 -> 4756;
4757 -> 4733;
4758 -> 4756;
4759 -> 4756;
4760 -> 4757;
4760 -> 4756;
4761 -> 4760;
4762 -> 4760;
4762 -> 4761;
4763 -> 4761;
4763 -> 4760;
4764 -> 4763;
4765 -> 4759;
4765 -> 4763;
4766 -> 4764;
4766 -> 4756;
4767 -> 4759;
4767 -> 4766;
4768 -> 4756;
4768 -> 4733;
4768 -> 4767;
4769 -> 4757;
4769 -> 4733;
4769 -> 4735;
4769 -> 4767;
4770 -> 4754;
4770 -> 4768;
4770 -> 4769;
4770 -> 4767;
4771 -> 4769;
4772 -> 4769;
4773 -> 4769;
4774 -> 4754;
4774 -> 4752;
4775 -> 4774;
4775 -> 4748;
4776 -> 4748;
4777 -> 4749;
4777 -> 4775;
4777 -> 4776;
4777 -> 4754;
4777 -> 4769;
4777 -> 4770;
4777 -> 4748;
4778 -> 4746;
4778 -> 4777;
4778 -> 4745;
4779 -> 4778;
4779 -> 4740;
4780 -> 4741;
4780 -> 4740;
4781 -> 4743;
4781 -> 4740;
4782 -> 4779;
4782 -> 4780;
4782 -> 4781;
4782 -> 4777;
4782 -> 4744;
4782 -> 4740;
4783 -> 4782;
4783 -> 4740;
4784 -> 3026;
4784 -> 1;
4785 -> 1;
4786 -> 4783;
4786 -> 4785;
4787 -> 4786;
4787 -> 1;
4788 -> 0;
4788 -> 1;
4789 -> 1;
4790 -> 4783;
4790 -> 4789;
4791 -> 0;
4791 -> 4789;
4792 -> 4791;
4792 -> 1;
4793 -> 0;
4793 -> 1;
4794 -> 1;
4795 -> 4783;
4795 -> 4794;
4796 -> 4794;
4797 -> 4795;
4797 -> 4783;
4797 -> 4796;
4798 -> 4797;
4798 -> 4783;
4798 -> 4061;
4798 -> 4796;
4799 -> 4798;
4799 -> 4082;
4799 -> 4796;
4800 -> 4799;
4800 -> 4794;
4801 -> 4800;
4801 -> 1;
4802 -> 0;
4802 -> 1;
4803 -> 1;
4804 -> 4783;
4804 -> 4803;
4805 -> 4804;
4805 -> 4783;
4805 -> 4803;
4806 -> 4803;
4807 -> 4805;
4807 -> 4806;
4808 -> 4807;
4808 -> 0;
4808 -> 4806;
4809 -> 0;
4809 -> 4808;
4810 -> 4809;
4810 -> 1;
4811 -> 1;
4812 -> 1;
4813 -> 4783;
4813 -> 4812;
4814 -> 4813;
4814 -> 4783;
4814 -> 4812;
4815 -> 4814;
4816 -> 4813;
4816 -> 4783;
4816 -> 4814;
4817 -> 4815;
4817 -> 4814;
4818 -> 4814;
4819 -> 4817;
4819 -> 4818;
4820 -> 4819;
4820 -> 4817;
4820 -> 4818;
4821 -> 4818;
4822 -> 4817;
4822 -> 4821;
4823 -> 4821;
4823 -> 4818;
4824 -> 4817;
4824 -> 4818;
4825 -> 4817;
4825 -> 4818;
4826 -> 4817;
4826 -> 4818;
4827 -> 4817;
4827 -> 4818;
4828 -> 0;
4828 -> 4818;
4829 -> 4824;
4829 -> 4828;
4829 -> 4818;
4830 -> 4817;
4830 -> 4818;
4831 -> 4830;
4831 -> 4820;
4831 -> 4818;
4832 -> 4817;
4832 -> 4818;
4833 -> 4817;
4833 -> 4818;
4834 -> 4817;
4834 -> 4818;
4835 -> 4817;
4835 -> 4818;
4836 -> 4835;
4836 -> 4818;
4837 -> 4835;
4837 -> 4818;
4838 -> 4835;
4838 -> 4818;
4839 -> 4832;
4839 -> 4835;
4839 -> 4818;
4840 -> 4818;
4841 -> 4832;
4841 -> 4840;
4841 -> 4831;
4841 -> 4818;
4842 -> 0;
4842 -> 4818;
4843 -> 4833;
4843 -> 4835;
4843 -> 4818;
4844 -> 4834;
4844 -> 4835;
4844 -> 4818;
4845 -> 4817;
4845 -> 4841;
4845 -> 4839;
4845 -> 4843;
4845 -> 4844;
4845 -> 4814;
4846 -> 4817;
4846 -> 4818;
4847 -> 4817;
4847 -> 4818;
4848 -> 4817;
4848 -> 4818;
4849 -> 4817;
4849 -> 4818;
4850 -> 4818;
4851 -> 4849;
4851 -> 4845;
4851 -> 4850;
4851 -> 4818;
4852 -> 4849;
4852 -> 4851;
4852 -> 4818;
4853 -> 4851;
4853 -> 4818;
4854 -> 4818;
4855 -> 4853;
4855 -> 4854;
4856 -> 4855;
4856 -> 4853;
4856 -> 4854;
4857 -> 4855;
4857 -> 4854;
4858 -> 4857;
4858 -> 4853;
4859 -> 4856;
4859 -> 4858;
4859 -> 4853;
4859 -> 4857;
4860 -> 4856;
4860 -> 4859;
4860 -> 4854;
4861 -> 4846;
4861 -> 4818;
4862 -> 4847;
4862 -> 4818;
4863 -> 4862;
4863 -> 4860;
4863 -> 4818;
4864 -> 4818;
4865 -> 4862;
4865 -> 4864;
4866 -> 4865;
4866 -> 4863;
4866 -> 4864;
4867 -> 4865;
4867 -> 4864;
4868 -> 4867;
4868 -> 4863;
4868 -> 4864;
4869 -> 4868;
4869 -> 4863;
4870 -> 4866;
4870 -> 4869;
4870 -> 4863;
4870 -> 4868;
4871 -> 4866;
4871 -> 4870;
4871 -> 4864;
4872 -> 4818;
4873 -> 4818;
4874 -> 4852;
4874 -> 4873;
4875 -> 4860;
4875 -> 4873;
4876 -> 4861;
4876 -> 4873;
4877 -> 4860;
4877 -> 4873;
4878 -> 4863;
4878 -> 4873;
4879 -> 4871;
4879 -> 4873;
4880 -> 4872;
4880 -> 4873;
4881 -> 4875;
4881 -> 4873;
4882 -> 4876;
4882 -> 4873;
4883 -> 4878;
4883 -> 4873;
4884 -> 4879;
4884 -> 4873;
4885 -> 4873;
4886 -> 4881;
4886 -> 4885;
4887 -> 4882;
4887 -> 4885;
4888 -> 4883;
4888 -> 4885;
4889 -> 4884;
4889 -> 4885;
4890 -> 4880;
4890 -> 4885;
4891 -> 4885;
4892 -> 4890;
4892 -> 4891;
4893 -> 4891;
4894 -> 4892;
4894 -> 4891;
4895 -> 4890;
4895 -> 4885;
4896 -> 4890;
4896 -> 4885;
4897 -> 4890;
4897 -> 4885;
4899 -> 4898;
4900 -> 4899;
4900 -> 4898;
4901 -> 4899;
4901 -> 4898;
4902 -> 4898;
4903 -> 4902;
4903 -> 4899;
4903 -> 4898;
4904 -> 4898;
4905 -> 4904;
4905 -> 4899;
4905 -> 4898;
4906 -> 4898;
4907 -> 4906;
4907 -> 4890;
4907 -> 4885;
4908 -> 4889;
4908 -> 4871;
4908 -> 4885;
4909 -> 4886;
4909 -> 4890;
4909 -> 4885;
4910 -> 4887;
4910 -> 4890;
4910 -> 4885;
4911 -> 4888;
4911 -> 4890;
4911 -> 4885;
4912 -> 4889;
4912 -> 4890;
4912 -> 4885;
4913 -> 4880;
4913 -> 4873;
4914 -> 4880;
4914 -> 4873;
4915 -> 4874;
4915 -> 4880;
4915 -> 4873;
4916 -> 4877;
4916 -> 4880;
4916 -> 4873;
4917 -> 4818;
4918 -> 4872;
4918 -> 4917;
4919 -> 4918;
4919 -> 4909;
4919 -> 4917;
4920 -> 4919;
4920 -> 4818;
4921 -> 4818;
4922 -> 4872;
4922 -> 4921;
4923 -> 4922;
4923 -> 4915;
4923 -> 4921;
4924 -> 4923;
4924 -> 4818;
4925 -> 4818;
4926 -> 4924;
4926 -> 4925;
4927 -> 4926;
4927 -> 4870;
4927 -> 4925;
4928 -> 4920;
4928 -> 4927;
4928 -> 4818;
4929 -> 4872;
4929 -> 4818;
4930 -> 4817;
4930 -> 4929;
4930 -> 4870;
4930 -> 4892;
4930 -> 4894;
4930 -> 4909;
4930 -> 4910;
4930 -> 4897;
4930 -> 4907;
4930 -> 4911;
4930 -> 4912;
4930 -> 4915;
4930 -> 4916;
4930 -> 4903;
4930 -> 4905;
4930 -> 4863;
4930 -> 4871;
4930 -> 4814;
4931 -> 4815;
4931 -> 4930;
4932 -> 4930;
4933 -> 4931;
4933 -> 4932;
4934 -> 4813;
4934 -> 4932;
4935 -> 4932;
4936 -> 4934;
4936 -> 4935;
4937 -> 4936;
4937 -> 4932;
4938 -> 4933;
4938 -> 4930;
4938 -> 4932;
4939 -> 4930;
4940 -> 4815;
4940 -> 4930;
4940 -> 4814;
4941 -> 4813;
4941 -> 4940;
4941 -> 4812;
4942 -> 4941;
4942 -> 1;
4943 -> 1;
4944 -> 1;
4945 -> 4783;
4945 -> 4944;
4946 -> 4945;
4946 -> 4940;
4946 -> 4944;
4947 -> 4945;
4947 -> 4940;
4947 -> 4944;
4948 -> 4947;
4948 -> 1;
4949 -> 1;
4950 -> 4948;
4950 -> 4949;
4951 -> 4950;
4951 -> 4948;
4951 -> 4949;
4952 -> 1;
4953 -> 4783;
4953 -> 1;
4954 -> 1;
4955 -> 4953;
4955 -> 4954;
4956 -> 4954;
4957 -> 4955;
4957 -> 4956;
4958 -> 4956;
4959 -> 4957;
4959 -> 4958;
4960 -> 4958;
4961 -> 4959;
4961 -> 4960;
4962 -> 4961;
4962 -> 4948;
4962 -> 4960;
4963 -> 4961;
4963 -> 4948;
4963 -> 4960;
4964 -> 4963;
4964 -> 4958;
4966 -> 4965;
4967 -> 0;
4968 -> 4967;
4968 -> 0;
4969 -> 4968;
4971 -> 4970;
4972 -> 4969;
4972 -> 4970;
4973 -> 4972;
4973 -> 4971;
4974 -> 4971;
4975 -> 4974;
4976 -> 4974;
4976 -> 4971;
4977 -> 4973;
4977 -> 4974;
4977 -> 4971;
4978 -> 4969;
4978 -> 4970;
4979 -> 4970;
4980 -> 4958;
4981 -> 4964;
4981 -> 4980;
4982 -> 0;
4983 -> 0;
4984 -> 0;
4985 -> 4984;
4987 -> 4982;
4987 -> 4983;
4987 -> 4985;
4987 -> 4986;
4988 -> 4987;
4989 -> 0;
4990 -> 0;
4991 -> 0;
4992 -> 4991;
4992 -> 0;
4993 -> 4992;
4995 -> 4989;
4995 -> 4990;
4995 -> 4993;
4995 -> 4994;
4996 -> 4995;
4997 -> 4981;
4997 -> 4980;
4998 -> 4980;
4999 -> 4997;
4999 -> 4998;
5000 -> 4997;
5000 -> 4998;
5001 -> 4997;
5001 -> 4998;
5002 -> 4999;
5002 -> 4998;
5003 -> 5000;
5003 -> 0;
5003 -> 4998;
5004 -> 5000;
5004 -> 4998;
5005 -> 4999;
5005 -> 5004;
5010 -> 5006;
5010 -> 5009;
5011 -> 5007;
5011 -> 5009;
5012 -> 5008;
5012 -> 5009;
5013 -> 5009;
5014 -> 0;
5015 -> 5014;
5016 -> 0;
5017 -> 5016;
5018 -> 0;
5019 -> 5018;
5020 -> 0;
5021 -> 5020;
5022 -> 5004;
5023 -> 5005;
5023 -> 5022;
5024 -> 5022;
5025 -> 5023;
5025 -> 5024;
5026 -> 5024;
5027 -> 5025;
5027 -> 5026;
5028 -> 5026;
5029 -> 5027;
5029 -> 5028;
5030 -> 5029;
5030 -> 5028;
5031 -> 5030;
5031 -> 5026;
5032 -> 5031;
5032 -> 5024;
5033 -> 5032;
5033 -> 5022;
5034 -> 5022;
5035 -> 5033;
5035 -> 5034;
5036 -> 4271;
5036 -> 5034;
5037 -> 5036;
5037 -> 5022;
5038 -> 5037;
5038 -> 5004;
5039 -> 5005;
5039 -> 5038;
5039 -> 5004;
5040 -> 4999;
5040 -> 4998;
5041 -> 5000;
5041 -> 4998;
5042 -> 5001;
5042 -> 4998;
5043 -> 4998;
5044 -> 5040;
5044 -> 5043;
5045 -> 5041;
5045 -> 5043;
5046 -> 5042;
5046 -> 5043;
5047 -> 0;
5049 -> 5047;
5049 -> 5048;
5050 -> 5048;
5051 -> 5050;
5052 -> 5049;
5052 -> 0;
5052 -> 5048;
5053 -> 5049;
5053 -> 5050;
5053 -> 5048;
5054 -> 5048;
5055 -> 5044;
5055 -> 5043;
5056 -> 5045;
5056 -> 5043;
5057 -> 5046;
5057 -> 5043;
5058 -> 5043;
5059 -> 5057;
5059 -> 5058;
5060 -> 5059;
5060 -> 5042;
5060 -> 5058;
5061 -> 5054;
5061 -> 5060;
5062 -> 5043;
5063 -> 5043;
5064 -> 5055;
5064 -> 5063;
5065 -> 5056;
5065 -> 5063;
5066 -> 5061;
5066 -> 5063;
5067 -> 5062;
5067 -> 5063;
5068 -> 5064;
5068 -> 5063;
5069 -> 5068;
5069 -> 5063;
5070 -> 5064;
5070 -> 5069;
5071 -> 5069;
5072 -> 5070;
5072 -> 5071;
5073 -> 5071;
5074 -> 5072;
5074 -> 5073;
5075 -> 5073;
5076 -> 5074;
5076 -> 5075;
5077 -> 5075;
5078 -> 5076;
5078 -> 5077;
5079 -> 5078;
5079 -> 5077;
5080 -> 5079;
5080 -> 5075;
5081 -> 5080;
5081 -> 5073;
5082 -> 5081;
5082 -> 5071;
5083 -> 5071;
5084 -> 5082;
5084 -> 5083;
5085 -> 4271;
5085 -> 5083;
5086 -> 5085;
5086 -> 5071;
5087 -> 5086;
5087 -> 5069;
5088 -> 5065;
5088 -> 0;
5088 -> 5063;
5089 -> 5063;
5090 -> 5087;
5090 -> 5089;
5090 -> 5063;
5091 -> 5063;
5092 -> 5066;
5092 -> 5091;
5092 -> 5063;
5093 -> 5064;
5093 -> 5067;
5093 -> 5063;
5094 -> 5065;
5094 -> 5067;
5094 -> 5063;
5095 -> 5066;
5095 -> 5067;
5095 -> 5063;
5096 -> 5062;
5096 -> 4998;
5097 -> 4997;
5097 -> 5096;
5097 -> 5042;
5097 -> 5093;
5097 -> 5094;
5097 -> 5095;
5097 -> 5053;
5097 -> 0;
5097 -> 4980;
5098 -> 5097;
5098 -> 4956;
5099 -> 5098;
5099 -> 4954;
5100 -> 4954;
5101 -> 5099;
5101 -> 5100;
5102 -> 5101;
5102 -> 5097;
5102 -> 5100;
5103 -> 5101;
5103 -> 5102;
5104 -> 4966;
5104 -> 5102;
5105 -> 5102;
5106 -> 5104;
5106 -> 5105;
5107 -> 5106;
5107 -> 5104;
5107 -> 5105;
5108 -> 5105;
5109 -> 5107;
5109 -> 5108;
5110 -> 5106;
5110 -> 5104;
5110 -> 5108;
5111 -> 5109;
5111 -> 5108;
5112 -> 5111;
5112 -> 5105;
5113 -> 1;
5114 -> 1;
5115 -> 5113;
5115 -> 5114;
5116 -> 3026;
5116 -> 5114;
5117 -> 5114;
5118 -> 5117;
5118 -> 5114;
5119 -> 5114;
5120 -> 5116;
5120 -> 5119;
5121 -> 5119;
5122 -> 5120;
5122 -> 5112;
5122 -> 5121;
5122 -> 5119;
5123 -> 5120;
5123 -> 5112;
5123 -> 5119;
5124 -> 5115;
5124 -> 5114;
5125 -> 5117;
5125 -> 5114;
5126 -> 5123;
5126 -> 5124;
5126 -> 5125;
5126 -> 5112;
5126 -> 5118;
5126 -> 5114;
5127 -> 3026;
5127 -> 1;
5128 -> 1;
5129 -> 5126;
5129 -> 5128;
5130 -> 5129;
5130 -> 1;
5131 -> 0;
5131 -> 1;
5132 -> 1;
5133 -> 5126;
5133 -> 5132;
5134 -> 0;
5134 -> 5132;
5135 -> 5134;
5135 -> 1;
5136 -> 0;
5136 -> 1;
5137 -> 1;
5138 -> 5126;
5138 -> 5137;
5139 -> 5137;
5140 -> 5138;
5140 -> 5126;
5140 -> 5139;
5141 -> 5140;
5141 -> 5126;
5141 -> 4061;
5141 -> 5139;
5142 -> 5141;
5142 -> 4082;
5142 -> 5139;
5143 -> 5142;
5143 -> 5137;
5144 -> 5143;
5144 -> 1;
5145 -> 0;
5145 -> 1;
5146 -> 1;
5147 -> 5126;
5147 -> 5146;
5148 -> 5147;
5148 -> 5126;
5148 -> 5146;
5149 -> 5146;
5150 -> 5148;
5150 -> 5149;
5151 -> 5150;
5151 -> 0;
5151 -> 5149;
5152 -> 0;
5152 -> 5151;
5153 -> 5152;
5153 -> 1;
5154 -> 1;
5155 -> 1;
5156 -> 5126;
5156 -> 5155;
5157 -> 5156;
5158 -> 5156;
5158 -> 5157;
5159 -> 5157;
5159 -> 5156;
5160 -> 5156;
5161 -> 5156;
5162 -> 5156;
5163 -> 5156;
5164 -> 0;
5164 -> 5156;
5165 -> 5160;
5165 -> 5164;
5165 -> 5156;
5166 -> 5156;
5167 -> 5156;
5168 -> 5156;
5169 -> 5156;
5170 -> 5156;
5171 -> 5156;
5172 -> 5156;
5173 -> 5156;
5174 -> 5156;
5175 -> 5156;
5176 -> 5156;
5176 -> 5175;
5177 -> 5176;
5177 -> 5156;
5177 -> 5175;
5178 -> 5177;
5178 -> 5156;
5179 -> 5156;
5180 -> 5156;
5180 -> 5179;
5181 -> 5180;
5181 -> 5156;
5181 -> 5179;
5182 -> 5181;
5182 -> 5156;
5183 -> 5156;
5184 -> 5182;
5184 -> 5183;
5185 -> 5178;
5185 -> 5184;
5185 -> 5156;
5186 -> 5156;
5187 -> 5156;
5188 -> 5186;
5188 -> 5187;
5189 -> 5156;
5189 -> 5187;
5190 -> 5187;
5191 -> 5189;
5191 -> 5190;
5192 -> 5191;
5192 -> 5187;
5193 -> 5188;
5193 -> 5156;
5193 -> 5187;
5194 -> 5156;
5194 -> 1;
5195 -> 1;
5196 -> 1;
5197 -> 5126;
5197 -> 5196;
5198 -> 5197;
5198 -> 5156;
5198 -> 5196;
5199 -> 5197;
5199 -> 5156;
5199 -> 5196;
5200 -> 5199;
5200 -> 1;
5201 -> 1;
5202 -> 5200;
5202 -> 5201;
5203 -> 5202;
5203 -> 5200;
5203 -> 5201;
5204 -> 1;
5205 -> 1;
5206 -> 5126;
5206 -> 5205;
5207 -> 5206;
5207 -> 5200;
5207 -> 5205;
5208 -> 5206;
5208 -> 5200;
5208 -> 5205;
5209 -> 5208;
5209 -> 1;
5210 -> 1;
5211 -> 5209;
5211 -> 5210;
5212 -> 5211;
5212 -> 5209;
5212 -> 5210;
5213 -> 1;
5214 -> 5126;
5214 -> 1;
5215 -> 1;
5216 -> 5214;
5216 -> 5215;
5217 -> 5215;
5218 -> 5217;
5219 -> 5218;
5220 -> 5216;
5220 -> 5209;
5220 -> 5219;
5221 -> 5216;
5221 -> 5209;
5221 -> 5219;
5222 -> 5218;
5223 -> 5222;
5224 -> 5221;
5224 -> 5223;
5225 -> 5221;
5225 -> 0;
5225 -> 5223;
5226 -> 5221;
5226 -> 5223;
5227 -> 5221;
5227 -> 5226;
5228 -> 5226;
5229 -> 5227;
5229 -> 5228;
5230 -> 5228;
5231 -> 5229;
5231 -> 5230;
5232 -> 5230;
5233 -> 5231;
5233 -> 5232;
5234 -> 5232;
5235 -> 5233;
5235 -> 5234;
5236 -> 5235;
5236 -> 5234;
5237 -> 5236;
5237 -> 5232;
5238 -> 5237;
5238 -> 5230;
5239 -> 5238;
5239 -> 5228;
5240 -> 5228;
5241 -> 5239;
5241 -> 5240;
5242 -> 4271;
5242 -> 5240;
5243 -> 5242;
5243 -> 5228;
5244 -> 5243;
5244 -> 5226;
5245 -> 5223;
5246 -> 5245;
5247 -> 5245;
5248 -> 5245;
5249 -> 5247;
5249 -> 5248;
5250 -> 5221;
5250 -> 5248;
5251 -> 5250;
5251 -> 5248;
5252 -> 5221;
5252 -> 5251;
5253 -> 5251;
5254 -> 5252;
5254 -> 5253;
5255 -> 5253;
5256 -> 5254;
5256 -> 5255;
5257 -> 5255;
5258 -> 5256;
5258 -> 5257;
5259 -> 5257;
5260 -> 5258;
5260 -> 5259;
5261 -> 5260;
5261 -> 5259;
5262 -> 5261;
5262 -> 5257;
5263 -> 5262;
5263 -> 5255;
5264 -> 5263;
5264 -> 5253;
5265 -> 5253;
5266 -> 5264;
5266 -> 5265;
5267 -> 4271;
5267 -> 5265;
5268 -> 5267;
5268 -> 5253;
5269 -> 5268;
5269 -> 5251;
5270 -> 5221;
5270 -> 0;
5270 -> 5248;
5271 -> 5248;
5272 -> 5269;
5272 -> 5271;
5272 -> 5248;
5273 -> 5248;
5274 -> 5221;
5274 -> 5273;
5274 -> 5248;
5275 -> 5247;
5275 -> 5223;
5276 -> 5215;
5277 -> 5221;
5278 -> 1;
5279 -> 1;
5280 -> 5278;
5280 -> 5279;
5281 -> 3026;
5281 -> 5279;
5282 -> 5279;
5283 -> 5282;
5283 -> 5279;
5284 -> 5279;
5285 -> 5281;
5285 -> 5284;
5286 -> 5284;
5287 -> 5285;
5287 -> 5221;
5287 -> 5286;
5287 -> 5284;
5288 -> 5285;
5288 -> 5221;
5288 -> 5284;
5289 -> 5280;
5289 -> 5279;
5290 -> 5282;
5290 -> 5279;
5291 -> 5288;
5291 -> 5289;
5291 -> 5290;
5291 -> 5221;
5291 -> 5283;
5291 -> 5279;
5292 -> 3026;
5292 -> 1;
5293 -> 1;
5294 -> 5291;
5294 -> 5293;
5295 -> 5294;
5295 -> 1;
5296 -> 0;
5296 -> 1;
5297 -> 1;
5298 -> 5291;
5298 -> 5297;
5299 -> 0;
5299 -> 5297;
5300 -> 5299;
5300 -> 1;
5301 -> 0;
5301 -> 1;
5302 -> 1;
5303 -> 5291;
5303 -> 5302;
5304 -> 5302;
5305 -> 5303;
5305 -> 5291;
5305 -> 5304;
5306 -> 5305;
5306 -> 5291;
5306 -> 4061;
5306 -> 5304;
5307 -> 5306;
5307 -> 4082;
5307 -> 5304;
5308 -> 5307;
5308 -> 5302;
5309 -> 5308;
5309 -> 1;
5310 -> 0;
5310 -> 1;
5311 -> 1;
5312 -> 5291;
5312 -> 5311;
5313 -> 5312;
5313 -> 5291;
5313 -> 5311;
5314 -> 5311;
5315 -> 5313;
5315 -> 5314;
5316 -> 5315;
5316 -> 0;
5316 -> 5314;
5317 -> 0;
5317 -> 5316;
5318 -> 5317;
5318 -> 1;
5319 -> 1;
5320 -> 1;
5321 -> 5291;
5321 -> 5320;
5322 -> 5321;
5323 -> 5321;
5323 -> 5322;
5324 -> 5322;
5324 -> 5321;
5325 -> 5321;
5326 -> 5321;
5327 -> 5321;
5328 -> 5321;
5329 -> 0;
5329 -> 5321;
5330 -> 5325;
5330 -> 5329;
5330 -> 5321;
5331 -> 5321;
5332 -> 5321;
5333 -> 5321;
5334 -> 5321;
5335 -> 5321;
5336 -> 5321;
5337 -> 5321;
5338 -> 5321;
5339 -> 5321;
5340 -> 5321;
5341 -> 5321;
5341 -> 5340;
5342 -> 5341;
5342 -> 5321;
5342 -> 5340;
5343 -> 5342;
5343 -> 5321;
5344 -> 5321;
5345 -> 5321;
5345 -> 5344;
5346 -> 5345;
5346 -> 5321;
5346 -> 5344;
5347 -> 5346;
5347 -> 5321;
5348 -> 5321;
5349 -> 5347;
5349 -> 5348;
5350 -> 5343;
5350 -> 5349;
5350 -> 5321;
5351 -> 5321;
5352 -> 5321;
5353 -> 5351;
5353 -> 5352;
5354 -> 5321;
5354 -> 5352;
5355 -> 5352;
5356 -> 5354;
5356 -> 5355;
5357 -> 5356;
5357 -> 5352;
5358 -> 5353;
5358 -> 5321;
5358 -> 5352;
5359 -> 5321;
5359 -> 1;
5360 -> 1;
5361 -> 1;
5362 -> 5291;
5362 -> 5361;
5363 -> 5362;
5363 -> 5321;
5363 -> 5361;
5364 -> 5362;
5364 -> 5321;
5364 -> 5361;
5365 -> 5364;
5365 -> 1;
5366 -> 1;
5367 -> 5365;
5367 -> 5366;
5368 -> 5367;
5368 -> 5365;
5368 -> 5366;
5369 -> 1;
5370 -> 1;
5371 -> 5291;
5371 -> 5370;
5372 -> 5371;
5372 -> 5365;
5372 -> 5370;
5373 -> 5371;
5373 -> 5365;
5373 -> 5370;
5374 -> 5373;
5374 -> 1;
5375 -> 1;
5376 -> 5374;
5376 -> 5375;
5377 -> 5376;
5377 -> 5374;
5377 -> 5375;
5378 -> 1;
5379 -> 1;
5380 -> 5291;
5380 -> 5379;
5381 -> 5380;
5381 -> 5374;
5381 -> 5379;
5382 -> 5380;
5382 -> 5374;
5382 -> 5379;
5383 -> 5382;
5383 -> 1;
5384 -> 1;
5385 -> 5383;
5385 -> 5384;
5386 -> 5385;
5386 -> 5383;
5386 -> 5384;
5387 -> 1;
5388 -> 5291;
5388 -> 1;
5389 -> 1;
5390 -> 5388;
5390 -> 5389;
5391 -> 5389;
5392 -> 5391;
5393 -> 5392;
5394 -> 5390;
5394 -> 5383;
5394 -> 5393;
5395 -> 5390;
5395 -> 5383;
5395 -> 5393;
5396 -> 5392;
5397 -> 5396;
5398 -> 5395;
5398 -> 5397;
5399 -> 5395;
5399 -> 0;
5399 -> 5397;
5400 -> 5395;
5400 -> 5397;
5401 -> 5395;
5401 -> 5400;
5402 -> 5400;
5403 -> 5401;
5403 -> 5402;
5404 -> 5402;
5405 -> 5403;
5405 -> 5404;
5406 -> 5404;
5407 -> 5405;
5407 -> 5406;
5408 -> 5406;
5409 -> 5407;
5409 -> 5408;
5410 -> 5409;
5410 -> 5408;
5411 -> 5410;
5411 -> 5406;
5412 -> 5411;
5412 -> 5404;
5413 -> 5412;
5413 -> 5402;
5414 -> 5402;
5415 -> 5413;
5415 -> 5414;
5416 -> 4271;
5416 -> 5414;
5417 -> 5416;
5417 -> 5402;
5418 -> 5417;
5418 -> 5400;
5419 -> 5397;
5420 -> 5419;
5421 -> 5419;
5422 -> 5419;
5423 -> 5421;
5423 -> 5422;
5424 -> 5395;
5424 -> 5422;
5425 -> 5424;
5425 -> 5422;
5426 -> 5395;
5426 -> 5425;
5427 -> 5425;
5428 -> 5426;
5428 -> 5427;
5429 -> 5427;
5430 -> 5428;
5430 -> 5429;
5431 -> 5429;
5432 -> 5430;
5432 -> 5431;
5433 -> 5431;
5434 -> 5432;
5434 -> 5433;
5435 -> 5434;
5435 -> 5433;
5436 -> 5435;
5436 -> 5431;
5437 -> 5436;
5437 -> 5429;
5438 -> 5437;
5438 -> 5427;
5439 -> 5427;
5440 -> 5438;
5440 -> 5439;
5441 -> 4271;
5441 -> 5439;
5442 -> 5441;
5442 -> 5427;
5443 -> 5442;
5443 -> 5425;
5444 -> 5395;
5444 -> 0;
5444 -> 5422;
5445 -> 5422;
5446 -> 5443;
5446 -> 5445;
5446 -> 5422;
5447 -> 5422;
5448 -> 5395;
5448 -> 5447;
5448 -> 5422;
5449 -> 5421;
5449 -> 5397;
5450 -> 5389;
5451 -> 5395;
}