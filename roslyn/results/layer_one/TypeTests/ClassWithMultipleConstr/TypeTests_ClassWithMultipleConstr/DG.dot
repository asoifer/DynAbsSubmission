digraph G {
0 [label="EXTERNAL"];
1 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 302270"];
2 [label="Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 302271"];
3 [label="param TypeTests(this) 302272"];
4 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 302273"];
5 [label="NullableAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Event | // The type of the event is nullable, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Field | // The type of the field is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.GenericParameter | // The generic parameter is a nullable reference type\n                    AttributeTargets.Module | // Nullable reference types in this module are annotated by means of NullableAttribute applied to other targets in it\n                    AttributeTargets.Parameter | // The type of the parameter is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.ReturnValue | // The return type is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Property | // The type of the property is a nullable reference type, or has a nullable reference type as one of its constituents\n                    AttributeTargets.Class, // Base type has a nullable reference type as one of its constituents\n                   AllowMultiple = false)]\n    public class NullableAttribute : Attribute\n    {\n        public NullableAttribute(byte transformFlag) { }\n        public NullableAttribute(byte[] transformFlags)\n        {\n        }\n    }\n}\n' 302274"];
6 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 302275"];
7 [label="NullableContextAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Delegate |\n        AttributeTargets.Interface |\n        AttributeTargets.Method |\n        AttributeTargets.Struct,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NullableContextAttribute : Attribute\n    {\n        public readonly byte Flag;\n        public NullableContextAttribute(byte flag)\n        {\n            Flag = flag;\n        }\n    }\n}' 302276"];
8 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 302277"];
9 [label="NullablePublicOnlyAttributeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Module, AllowMultiple = false)]\n    public sealed class NullablePublicOnlyAttribute : Attribute\n    {\n        public readonly bool IncludesInternals;\n        public NullablePublicOnlyAttribute(bool includesInternals)\n        {\n            IncludesInternals = includesInternals;\n        }\n    }\n}' 302278"];
10 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 302279"];
11 [label="AllowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class AllowNullAttribute : Attribute\n    {\n    }\n}' 302280"];
12 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 302281"];
13 [label="DisallowNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property)]\n    public sealed class DisallowNullAttribute : Attribute\n    {\n    }\n}' 302282"];
14 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 302283"];
15 [label="MaybeNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class MaybeNullAttribute : Attribute\n    {\n    }\n}\n' 302284"];
16 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 302285"];
17 [label="MaybeNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class MaybeNullWhenAttribute : Attribute\n    {\n        public MaybeNullWhenAttribute(bool when) { }\n    }\n}\n' 302286"];
18 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 302287"];
19 [label="NotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue)]\n    public sealed class NotNullAttribute : Attribute\n    {\n    }\n}\n' 302288"];
20 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 302289"];
21 [label="NotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public sealed class NotNullWhenAttribute : Attribute\n    {\n        public NotNullWhenAttribute(bool when) { }\n    }\n}\n' 302290"];
22 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 302291"];
23 [label="MemberNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullAttribute : Attribute\n    {\n        public MemberNotNullAttribute(params string[] members) { }\n        public MemberNotNullAttribute(string member) { }\n    }\n}\n' 302292"];
24 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 302293"];
25 [label="MemberNotNullWhenAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method | AttributeTargets.Property, AllowMultiple = true)]\n    public sealed class MemberNotNullWhenAttribute : Attribute\n    {\n        public MemberNotNullWhenAttribute(bool when, params string[] members) { }\n        public MemberNotNullWhenAttribute(bool when, string member) { }\n    }\n}\n' 302294"];
26 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 302295"];
27 [label="DoesNotReturnIfAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class DoesNotReturnIfAttribute : Attribute\n    {\n        public DoesNotReturnIfAttribute(bool condition) { }\n    }\n}\n' 302296"];
28 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 302297"];
29 [label="DoesNotReturnAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\n    public class DoesNotReturnAttribute : Attribute\n    {\n        public DoesNotReturnAttribute() { }\n    }\n}\n' 302298"];
30 [label="@'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 302299"];
31 [label="NotNullIfNotNullAttributeDefinition = @'\nnamespace System.Diagnostics.CodeAnalysis\n{\n    [AttributeUsage(AttributeTargets.Parameter | AttributeTargets.Property | AttributeTargets.ReturnValue, AllowMultiple = true, Inherited = false)]\n    public sealed class NotNullIfNotNullAttribute : Attribute\n    {\n        public NotNullIfNotNullAttribute(string parameterName) { }\n    }\n}\n' 302300"];
32 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 302301"];
33 [label="IsExternalInitTypeDefinition = @'\nnamespace System.Runtime.CompilerServices\n{\n    public static class IsExternalInit\n    {\n    }\n}\n' 302302"];
34 [label="@'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 302303"];
35 [label="IAsyncDisposableDefinition = @'\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n       System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 302304"];
36 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 302305"];
37 [label="AsyncStreamsTypes = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]\n    public sealed class AsyncIteratorStateMachineAttribute : StateMachineAttribute\n    {\n        public AsyncIteratorStateMachineAttribute(Type stateMachineType) : base(stateMachineType)\n        {\n        }\n    }\n}\n\n#nullable disable\n\nnamespace System.Threading.Tasks.Sources\n{\n    using System.Diagnostics;\n    using System.Runtime.ExceptionServices;\n    using System.Runtime.InteropServices;\n\n    [StructLayout(LayoutKind.Auto)]\n    public struct ManualResetValueTaskSourceCore<TResult>\n    {\n        private Action<object> _continuation;\n        private object _continuationState;\n        private ExecutionContext _executionContext;\n        private object _capturedContext;\n        private bool _completed;\n        private TResult _result;\n        private ExceptionDispatchInfo _error;\n        private short _version;\n\n        /// <summary>Gets or sets whether to force continuations to run asynchronously.</summary>\n        /// <remarks>Continuations may run asynchronously if this is false, but they'll never run synchronously if this is true.</remarks>\n        public bool RunContinuationsAsynchronously { get; set; }\n\n        /// <summary>Resets to prepare for the next operation.</summary>\n        public void Reset()\n        {\n            // Reset/update state for the next use/await of this instance.\n            _version++;\n            _completed = false;\n            _result = default;\n            _error = null;\n            _executionContext = null;\n            _capturedContext = null;\n            _continuation = null;\n            _continuationState = null;\n        }\n\n        public void SetResult(TResult result)\n        {\n            _result = result;\n            SignalCompletion();\n        }\n\n        public void SetException(Exception error)\n        {\n            _error = ExceptionDispatchInfo.Capture(error);\n            SignalCompletion();\n        }\n\n        public short Version => _version;\n\n        public ValueTaskSourceStatus GetStatus(short token)\n        {\n            ValidateToken(token);\n            return\n                !_completed ? ValueTaskSourceStatus.Pending :\n                _error == null ? ValueTaskSourceStatus.Succeeded :\n                _error.SourceException is OperationCanceledException ? ValueTaskSourceStatus.Canceled :\n                ValueTaskSourceStatus.Faulted;\n        }\n\n        public TResult GetResult(short token)\n        {\n            ValidateToken(token);\n            if (!_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n\n            _error?.Throw();\n            return _result;\n        }\n\n        public void OnCompleted(Action<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags)\n        {\n            if (continuation == null)\n            {\n                throw new ArgumentNullException(nameof(continuation));\n            }\n            ValidateToken(token);\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.FlowExecutionContext) != 0)\n            {\n                _executionContext = ExecutionContext.Capture();\n            }\n\n            if ((flags & ValueTaskSourceOnCompletedFlags.UseSchedulingContext) != 0)\n            {\n                SynchronizationContext sc = SynchronizationContext.Current;\n                if (sc != null && sc.GetType() != typeof(SynchronizationContext))\n                {\n                    _capturedContext = sc;\n                }\n                else\n                {\n                    TaskScheduler ts = TaskScheduler.Current;\n                    if (ts != TaskScheduler.Default)\n                    {\n                        _capturedContext = ts;\n                    }\n                }\n            }\n\n            // We need to set the continuation state before we swap in the delegate, so that\n            // if there's a race between this and SetResult/Exception and SetResult/Exception\n            // sees the _continuation as non-null, it'll be able to invoke it with the state\n            // stored here.  However, this also means that if this is used incorrectly (e.g.\n            // awaited twice concurrently), _continuationState might get erroneously overwritten.\n            // To minimize the chances of that, we check preemptively whether _continuation\n            // is already set to something other than the completion sentinel.\n\n            object oldContinuation = _continuation;\n            if (oldContinuation == null)\n            {\n                _continuationState = state;\n                oldContinuation = Interlocked.CompareExchange(ref _continuation, continuation, null);\n            }\n\n            if (oldContinuation != null)\n            {\n                // Operation already completed, so we need to queue the supplied callback.\n                if (!ReferenceEquals(oldContinuation, ManualResetValueTaskSourceCoreShared.s_sentinel))\n                {\n                    ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n                }\n\n                switch (_capturedContext)\n                {\n                    case null:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                        break;\n\n                    case SynchronizationContext sc:\n                        sc.Post(s =>\n                        {\n                            var tuple = (Tuple<Action<object>, object>)s;\n                            tuple.Item1(tuple.Item2);\n                        }, Tuple.Create(continuation, state));\n                        break;\n\n                    case TaskScheduler ts:\n                        Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                        break;\n                }\n            }\n        }\n\n        private void ValidateToken(short token)\n        {\n            if (token != _version)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n        }\n\n        private void SignalCompletion()\n        {\n            if (_completed)\n            {\n                ManualResetValueTaskSourceCoreShared.ThrowInvalidOperationException();\n            }\n            _completed = true;\n\n            if (_continuation != null || Interlocked.CompareExchange(ref _continuation, ManualResetValueTaskSourceCoreShared.s_sentinel, null) != null)\n            {\n                if (_executionContext != null)\n                {\n                    ExecutionContext.Run(\n                        _executionContext,\n                        s => ((ManualResetValueTaskSourceCore<TResult>)s).InvokeContinuation(),\n                        this);\n                }\n                else\n                {\n                    InvokeContinuation();\n                }\n            }\n        }\n\n        private void InvokeContinuation()\n        {\n            switch (_capturedContext)\n            {\n                case null:\n                    if (RunContinuationsAsynchronously)\n                    {\n                        Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, TaskScheduler.Default);\n                    }\n                    else\n                    {\n                        _continuation(_continuationState);\n                    }\n                    break;\n\n                case SynchronizationContext sc:\n                    sc.Post(s =>\n                    {\n                        var state = (Tuple<Action<object>, object>)s;\n                        state.Item1(state.Item2);\n                    }, Tuple.Create(_continuation, _continuationState));\n                    break;\n\n                case TaskScheduler ts:\n                    Task.Factory.StartNew(_continuation, _continuationState, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\n                    break;\n            }\n        }\n    }\n\n    internal static class ManualResetValueTaskSourceCoreShared // separated out of generic to avoid unnecessary duplication\n    {\n        internal static void ThrowInvalidOperationException() => throw new InvalidOperationException();\n\n        internal static readonly Action<object> s_sentinel = CompletionSentinel;\n        private static void CompletionSentinel(object _) // named method to aid debugging\n        {\n            Debug.Fail(''The sentinel delegate should never be invoked.'');\n            ThrowInvalidOperationException();\n        }\n    }\n}\n\nnamespace System.Runtime.CompilerServices\n{\n    using System.Runtime.InteropServices;\n\n    /// <summary>Represents a builder for asynchronous iterators.</summary>\n    [StructLayout(LayoutKind.Auto)]\n    public struct AsyncIteratorMethodBuilder\n    {\n        // AsyncIteratorMethodBuilder is used by the language compiler as part of generating\n        // async iterators. For now, the implementation just wraps AsyncTaskMethodBuilder, as\n        // most of the logic is shared.  However, in the future this could be changed and\n        // optimized.  For example, we do need to allocate an object (once) to flow state like\n        // ExecutionContext, which AsyncTaskMethodBuilder handles, but it handles it by\n        // allocating a Task-derived object.  We could optimize this further by removing\n        // the Task from the hierarchy, but in doing so we'd also lose a variety of optimizations\n        // related to it, so we'd need to replicate all of those optimizations (e.g. storing\n        // that box object directly into a Task's continuation field).\n\n        private AsyncTaskMethodBuilder _methodBuilder; // mutable struct; do not make it readonly\n\n        public static AsyncIteratorMethodBuilder Create() =>\n            new AsyncIteratorMethodBuilder() { _methodBuilder = AsyncTaskMethodBuilder.Create() };\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        public void MoveNext<TStateMachine>(ref TStateMachine stateMachine) where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.Start(ref stateMachine);\n\n        public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : INotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitOnCompleted(ref awaiter, ref stateMachine);\n\n        public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)\n            where TAwaiter : ICriticalNotifyCompletion\n            where TStateMachine : IAsyncStateMachine =>\n            _methodBuilder.AwaitUnsafeOnCompleted(ref awaiter, ref stateMachine);\n\n        /// <summary>Marks iteration as being completed, whether successfully or otherwise.</summary>\n        public void Complete() => _methodBuilder.SetResult();\n    }\n}\n' 302306"];
38 [label="@'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 302307"];
39 [label="EnumeratorCancellationAttributeType = @'\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false)]\n    public class EnumeratorCancellationAttribute : Attribute\n    {\n        public EnumeratorCancellationAttribute() { }\n    }\n}\n' 302308"];
40 [label="@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 302309"];
41 [label="NativeIntegerAttributeDefinition =\n@'using System.Collections.Generic;\nnamespace System.Runtime.CompilerServices\n{\n    [System.AttributeUsage(\n        AttributeTargets.Class |\n        AttributeTargets.Event |\n        AttributeTargets.Field |\n        AttributeTargets.GenericParameter |\n        AttributeTargets.Parameter |\n        AttributeTargets.Property |\n        AttributeTargets.ReturnValue,\n        AllowMultiple = false,\n        Inherited = false)]\n    public sealed class NativeIntegerAttribute : Attribute\n    {\n        public NativeIntegerAttribute()\n        {\n            TransformFlags = new[] { true };\n        }\n        public NativeIntegerAttribute(bool[] flags)\n        {\n            TransformFlags = flags;\n        }\n        public readonly IList<bool> TransformFlags;\n    }\n}' 302310"];
42 [label="() => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic } 302311"];
43 [label="LazyThreadSafetyMode.PublicationOnly 302312"];
44 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 302313"];
45 [label="s_lazyDefaultVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net40.mscorlib, Net40.System, Net40.SystemCore, Net40.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 302314"];
46 [label="() => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic } 302315"];
47 [label="LazyThreadSafetyMode.PublicationOnly 302316"];
48 [label="new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 302317"];
49 [label="s_lazyLatestVbReferences = new Lazy<MetadataReference[]>(\n            () => new[] { Net451.mscorlib, Net451.System, Net451.SystemCore, Net451.MicrosoftVisualBasic },\n            LazyThreadSafetyMode.PublicationOnly) 302318"];
50 [label="RuntimeUtilities.IsCoreClrRuntime 302319"];
51 [label="'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089' 302320"];
52 [label="new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 302321"];
53 [label="RuntimeCorLibName = RuntimeUtilities.IsCoreClrRuntime\n            ? new AssemblyName('netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51')\n            : new AssemblyName('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089') 302322"];
54 [label="() =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            } 302323"];
55 [label="LazyThreadSafetyMode.PublicationOnly 302324"];
56 [label="new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 302325"];
57 [label="s_winRtRefs = new Lazy<MetadataReference[]>(\n            () =>\n            {\n                var winmd = AssemblyMetadata.CreateFromImage(TestResources.WinRt.Windows).GetReference(display: 'Windows');\n\n                var windowsruntime =\n                    AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime).GetReference(display: 'System.Runtime.WindowsRuntime.dll');\n\n                var runtime =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll');\n\n                var objectModel =\n                    AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemObjectModel).GetReference(display: 'System.ObjectModel.dll');\n\n                var uixaml = AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319_17929.System_Runtime_WindowsRuntime_UI_Xaml).\n                    GetReference(display: 'System.Runtime.WindowsRuntime.UI.Xaml.dll');\n\n                var interop = AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntimeInteropServicesWindowsRuntime).\n                    GetReference(display: 'System.Runtime.InteropServices.WindowsRuntime.dll');\n\n                //Not mentioned in the adapter doc but pointed to from System.Runtime, so we'll put it here.\n                var system = AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.dll');\n\n                var mscor = AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib');\n\n                return new MetadataReference[] { winmd, windowsruntime, runtime, objectModel, uixaml, interop, system, mscor };\n            },\n            LazyThreadSafetyMode.PublicationOnly) 302326"];
58 [label="() => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref } 302327"];
59 [label="LazyThreadSafetyMode.PublicationOnly 302328"];
60 [label="new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 302329"];
61 [label="s_portableRefsMinimal = new Lazy<MetadataReference[]>(\n            () => new MetadataReference[] { MscorlibPP7Ref, SystemRuntimePP7Ref },\n            LazyThreadSafetyMode.PublicationOnly) 302330"];
62 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll') 302331"];
63 [label="LazyThreadSafetyMode.PublicationOnly 302332"];
64 [label="new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 302333"];
65 [label="s_systemCoreRef =\n            new Lazy<MetadataReference>(\n                () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319.dll'),\n                LazyThreadSafetyMode.PublicationOnly) 302334"];
66 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll') 302335"];
67 [label="LazyThreadSafetyMode.PublicationOnly 302336"];
68 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302337"];
69 [label="s_systemCoreRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemCore).GetReference(display: 'System.Core.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302338"];
70 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll') 302339"];
71 [label="LazyThreadSafetyMode.PublicationOnly 302340"];
72 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302341"];
73 [label="s_systemCoreRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.SystemCore).GetReference(display: 'System.Core.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302342"];
74 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll') 302343"];
75 [label="LazyThreadSafetyMode.PublicationOnly 302344"];
76 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302345"];
77 [label="s_systemWindowsFormsRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemWindowsForms).GetReference(display: 'System.Windows.Forms.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302346"];
78 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll') 302347"];
79 [label="LazyThreadSafetyMode.PublicationOnly 302348"];
80 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302349"];
81 [label="s_systemDrawingRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemDrawing).GetReference(display: 'System.Drawing.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302350"];
82 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll') 302351"];
83 [label="LazyThreadSafetyMode.PublicationOnly 302352"];
84 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302353"];
85 [label="s_systemDataRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemData).GetReference(display: 'System.Data.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302354"];
86 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll') 302355"];
87 [label="LazyThreadSafetyMode.PublicationOnly 302356"];
88 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302357"];
89 [label="s_mscorlibRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302358"];
90 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll') 302359"];
91 [label="LazyThreadSafetyMode.PublicationOnly 302360"];
92 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302361"];
93 [label="s_mscorlibRefPortable = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.v4_0_30319.mscorlib_portable).GetReference(display: 'mscorlib.v4_0_30319.portable.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302362"];
94 [label="() =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            } 302363"];
95 [label="LazyThreadSafetyMode.PublicationOnly 302364"];
96 [label="new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 302365"];
97 [label="s_aacorlibRef = new Lazy<MetadataReference>(\n            () =>\n            {\n                var source = TestResources.NetFX.aacorlib_v15_0_3928.aacorlib_v15_0_3928_cs;\n                var syntaxTree = Microsoft.CodeAnalysis.CSharp.SyntaxFactory.ParseSyntaxTree(source);\n\n                var compilationOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary);\n\n                var compilation = CSharpCompilation.Create('aacorlib.v15.0.3928.dll', new[] { syntaxTree }, null, compilationOptions);\n\n                Stream dllStream = new MemoryStream();\n                var emitResult = compilation.Emit(dllStream);\n                if (!emitResult.Success)\n                {\n                    emitResult.Diagnostics.Verify();\n                }\n                dllStream.Seek(0, SeekOrigin.Begin);\n\n                return AssemblyMetadata.CreateFromStream(dllStream).GetReference(display: 'mscorlib.v4_0_30319.dll');\n            },\n            LazyThreadSafetyMode.PublicationOnly) 302366"];
98 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri') 302367"];
99 [label="LazyThreadSafetyMode.PublicationOnly 302368"];
100 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 302369"];
101 [label="s_mscorlibRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.mscorlib).GetReference(display: 'mscorlib.v4_6_1038_0.dll', filePath: @'Z:\\FxReferenceAssembliesUri'),\n            LazyThreadSafetyMode.PublicationOnly) 302370"];
102 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll') 302371"];
103 [label="LazyThreadSafetyMode.PublicationOnly 302372"];
104 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302373"];
105 [label="s_mscorlibRef_silverlight = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.silverlight_v5_0_5_0.mscorlib_v5_0_5_0_silverlight).GetReference(display: 'mscorlib.v5.0.5.0_silverlight.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302374"];
106 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll') 302375"];
107 [label="LazyThreadSafetyMode.PublicationOnly 302376"];
108 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302377"];
109 [label="s_desktopCSharpRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.MicrosoftCSharp).GetReference(display: 'Microsoft.CSharp.v4.0.30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302378"];
110 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll') 302379"];
111 [label="LazyThreadSafetyMode.PublicationOnly 302380"];
112 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302381"];
113 [label="s_std20Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNetStandard20.netstandard).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302382"];
114 [label="() => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll') 302383"];
115 [label="LazyThreadSafetyMode.PublicationOnly 302384"];
116 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302385"];
117 [label="s_46NetStandardFacade = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesBuildExtensions.NetStandardToNet461).GetReference(display: 'netstandard20.netstandard.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302386"];
118 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)') 302387"];
119 [label="LazyThreadSafetyMode.PublicationOnly 302388"];
120 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 302389"];
121 [label="s_systemDynamicRuntimeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.netstandard13.System_Dynamic_Runtime).GetReference(display: 'System.Dynamic.Runtime.dll (netstandard 1.3 ref)'),\n            LazyThreadSafetyMode.PublicationOnly) 302390"];
122 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll') 302391"];
123 [label="LazyThreadSafetyMode.PublicationOnly 302392"];
124 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302393"];
125 [label="s_systemRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302394"];
126 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll') 302395"];
127 [label="LazyThreadSafetyMode.PublicationOnly 302396"];
128 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302397"];
129 [label="s_systemRef_v46 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet461.System).GetReference(display: 'System.v4_6_1038_0.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302398"];
130 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll') 302399"];
131 [label="LazyThreadSafetyMode.PublicationOnly 302400"];
132 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302401"];
133 [label="s_systemRef_v4_0_30319_17929 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.System).GetReference(display: 'System.v4_0_30319_17929.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302402"];
134 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll') 302403"];
135 [label="LazyThreadSafetyMode.PublicationOnly 302404"];
136 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302405"];
137 [label="s_systemRef_v20 = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet20.System).GetReference(display: 'System.v2_0_50727.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302406"];
138 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll') 302407"];
139 [label="LazyThreadSafetyMode.PublicationOnly 302408"];
140 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302409"];
141 [label="s_systemXmlRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXml).GetReference(display: 'System.Xml.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302410"];
142 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll') 302411"];
143 [label="LazyThreadSafetyMode.PublicationOnly 302412"];
144 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302413"];
145 [label="s_systemXmlLinqRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemXmlLinq).GetReference(display: 'System.Xml.Linq.v4_0_30319.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302414"];
146 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll') 302415"];
147 [label="LazyThreadSafetyMode.PublicationOnly 302416"];
148 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302417"];
149 [label="s_mscorlibFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302418"];
150 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll') 302419"];
151 [label="LazyThreadSafetyMode.PublicationOnly 302420"];
152 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302421"];
153 [label="s_systemRuntimeFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemRuntime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302422"];
154 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll') 302423"];
155 [label="LazyThreadSafetyMode.PublicationOnly 302424"];
156 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302425"];
157 [label="s_systemThreadingFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreading).GetReference(display: 'System.Threading.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302426"];
158 [label="() => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll') 302427"];
159 [label="LazyThreadSafetyMode.PublicationOnly 302428"];
160 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302429"];
161 [label="s_systemThreadingTasksFacadeRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ResourcesNet451.SystemThreadingTasks).GetReference(display: 'System.Threading.Tasks.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302430"];
162 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll') 302431"];
163 [label="LazyThreadSafetyMode.PublicationOnly 302432"];
164 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302433"];
165 [label="s_mscorlibPP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.mscorlib).GetReference(display: 'mscorlib.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302434"];
166 [label="() => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll') 302435"];
167 [label="LazyThreadSafetyMode.PublicationOnly 302436"];
168 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302437"];
169 [label="s_systemRuntimePP7Ref = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(ProprietaryTestResources.ReferenceAssemblies_PortableProfile7.System_Runtime).GetReference(display: 'System.Runtime.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302438"];
170 [label="() => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll') 302439"];
171 [label="LazyThreadSafetyMode.PublicationOnly 302440"];
172 [label="new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302441"];
173 [label="s_FSharpTestLibraryRef = new Lazy<MetadataReference>(\n            () => AssemblyMetadata.CreateFromImage(TestResources.General.FSharpTestLibrary).GetReference(display: 'FSharpTestLibrary.dll'),\n            LazyThreadSafetyMode.PublicationOnly) 302442"];
174 [label="@'R:\\Invalid.dll' 302443"];
175 [label="fullPath: @'R:\\Invalid.dll' 302444"];
176 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 302445"];
177 [label="new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 302446"];
178 [label="InvalidRef = new TestMetadataReference(fullPath: @'R:\\Invalid.dll') 302447"];
179 [label="MscorlibRef_v4_0_30316_17626 302448"];
180 [label="Net451.mscorlib 302449"];
181 [label="ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 302450"];
182 [label="s_scriptRefs = ImmutableArray.Create(MscorlibRef_v4_0_30316_17626) 302451"];
183 [label="'/*<bind>*/' 302452"];
184 [label="StartString = '/*<bind>*/' 302453"];
185 [label="'/*</bind>*/' 302454"];
186 [label="EndString = '/*</bind>*/' 302455"];
187 [label="@'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 302456"];
188 [label="SpanSource = @'\nnamespace System\n    {\n        public readonly ref struct Span<T>\n        {\n            private readonly T[] arr;\n\n            public ref T this[int i] => ref arr[i];\n            public override int GetHashCode() => 1;\n            public int Length { get; }\n\n            unsafe public Span(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public Span(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly Span<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(Span<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator Span<T>(T[] array) => new Span<T>(array);\n        }\n\n        public readonly ref struct ReadOnlySpan<T>\n        {\n            private readonly T[] arr;\n\n            public ref readonly T this[int i] => ref arr[i];\n            public override int GetHashCode() => 2;\n            public int Length { get; }\n\n            unsafe public ReadOnlySpan(void* pointer, int length)\n            {\n                this.arr = Helpers.ToArray<T>(pointer, length);\n                this.Length = length;\n            }\n\n            public ReadOnlySpan(T[] arr)\n            {\n                this.arr = arr;\n                this.Length = arr.Length;\n            }\n\n            public void CopyTo(Span<T> other) { }\n\n            /// <summary>Gets an enumerator for this span.</summary>\n            public Enumerator GetEnumerator() => new Enumerator(this);\n\n            /// <summary>Enumerates the elements of a <see cref=''Span{T}''/>.</summary>\n            public ref struct Enumerator\n            {\n                /// <summary>The span being enumerated.</summary>\n                private readonly ReadOnlySpan<T> _span;\n                /// <summary>The next index to yield.</summary>\n                private int _index;\n\n                /// <summary>Initialize the enumerator.</summary>\n                /// <param name=''span''>The span to enumerate.</param>\n                internal Enumerator(ReadOnlySpan<T> span)\n                {\n                    _span = span;\n                    _index = -1;\n                }\n\n                /// <summary>Advances the enumerator to the next element of the span.</summary>\n                public bool MoveNext()\n                {\n                    int index = _index + 1;\n                    if (index < _span.Length)\n                    {\n                        _index = index;\n                        return true;\n                    }\n\n                    return false;\n                }\n\n                /// <summary>Gets the element at the current position of the enumerator.</summary>\n                public ref readonly T Current\n                {\n                    get => ref _span[_index];\n                }\n            }\n\n            public static implicit operator ReadOnlySpan<T>(T[] array) => array == null ? default : new ReadOnlySpan<T>(array);\n\n            public static implicit operator ReadOnlySpan<T>(string stringValue) => string.IsNullOrEmpty(stringValue) ? default : new ReadOnlySpan<T>((T[])(object)stringValue.ToCharArray());\n        }\n\n        public readonly ref struct SpanLike<T>\n        {\n            public readonly Span<T> field;\n        }\n\n        public enum Color: sbyte\n        {\n            Red,\n            Green,\n            Blue\n        }\n\n        public static unsafe class Helpers\n        {\n            public static T[] ToArray<T>(void* ptr, int count)\n            {\n                if (ptr == null)\n                {\n                    return null;\n                }\n\n                if (typeof(T) == typeof(int))\n                {\n                    var arr = new int[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((int*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(byte))\n                {\n                    var arr = new byte[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((byte*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(char))\n                {\n                    var arr = new char[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((char*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                if (typeof(T) == typeof(Color))\n                {\n                    var arr = new Color[count];\n                    for(int i = 0; i < count; i++)\n                    {\n                        arr[i] = ((Color*)ptr)[i];\n                    }\n\n                    return (T[])(object)arr;\n                }\n\n                throw new Exception(''add a case for: '' + typeof(T));\n            }\n        }\n    }' 302457"];
189 [label="@'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 302458"];
190 [label="s_IAsyncEnumerable = @'\nnamespace System.Collections.Generic\n{\n    public interface IAsyncEnumerable<out T>\n    {\n        IAsyncEnumerator<T> GetAsyncEnumerator(System.Threading.CancellationToken token = default);\n    }\n\n    public interface IAsyncEnumerator<out T> : System.IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask<bool> MoveNextAsync();\n        T Current { get; }\n    }\n}\nnamespace System\n{\n    public interface IAsyncDisposable\n    {\n        System.Threading.Tasks.ValueTask DisposeAsync();\n    }\n}\n' 302459"];
191 [label="param CSharpTestBase(this) 302460"];
192 [label="param CommonTestBase(this) 302461"];
193 [label="param TestBase(this) 302462"];
194 [label="_temp 302463"];
195 [label="=> Roslyn.Test.Utilities.ExecutionConditionUtil.IsMonoDesktop 302464"];
196 [label="param ClassWithMultipleConstr(this) 302465"];
197 [label="var text =\n@'public class MyClass \n{\n    public MyClass() \n    {\n    }\n\n    public MyClass(int DummyInt)\n    {\n    }\n}\n'; 302466"];
198 [label="var comp = CreateCompilation(text); 302467"];
199 [label="text 302468"];
200 [label="param operator(string source) 302469"];
201 [label="source 302470"];
202 [label="new CSharpTestSource(source) 302471"];
203 [label="param CSharpTestSource(object value) 302472"];
204 [label="param CSharpTestSource(this) 302473"];
205 [label="Value 302474"];
206 [label="var comp = CreateCompilation(text); 302475"];
207 [label="var comp = CreateCompilation(text); 302476"];
208 [label="CreateCompilation(text) 302477"];
209 [label="param CreateCompilation(CSharpTestSource source) 302478"];
210 [label="param CreateCompilation(IEnumerable<MetadataReference> references = null) 302479"];
211 [label="param CreateCompilation(CSharpCompilationOptions options = null) 302480"];
212 [label="param CreateCompilation(CSharpParseOptions parseOptions = null) 302481"];
213 [label="param CreateCompilation(TargetFramework targetFramework = TargetFramework.Standard) 302482"];
214 [label="param CreateCompilation(string assemblyName = '') 302483"];
215 [label="param CreateCompilation(string sourceFileName = '') 302484"];
216 [label="param CreateCompilation(bool skipUsesIsNullable = false) 302485"];
217 [label="source 302486"];
218 [label="targetFramework 302487"];
219 [label="references 302488"];
220 [label="TargetFrameworkUtil.GetReferences(targetFramework, references) 302489"];
221 [label="param GetReferences(TargetFramework tf) 302490"];
222 [label="param GetReferences(IEnumerable<MetadataReference> additionalReferences) 302491"];
223 [label="var references = GetReferences(tf); 302492"];
224 [label="GetReferences(tf) 302493"];
225 [label="param GetReferences(TargetFramework targetFramework) 302494"];
226 [label="targetFramework switch\n        {\n            TargetFramework.Empty => ImmutableArray<MetadataReference>.Empty,\n            TargetFramework.Mscorlib40 => Mscorlib40References,\n            TargetFramework.Mscorlib40Extended => Mscorlib40ExtendedReferences,\n            TargetFramework.Mscorlib40AndSystemCore => Mscorlib40andSystemCoreReferences,\n            TargetFramework.Mscorlib40AndVBRuntime => Mscorlib40andVBRuntimeReferences,\n            TargetFramework.Mscorlib45 => Mscorlib45References,\n            TargetFramework.Mscorlib45Extended => Mscorlib45ExtendedReferences,\n            TargetFramework.Mscorlib45AndCSharp => Mscorlib45AndCSharpReferences,\n            TargetFramework.Mscorlib45AndVBRuntime => Mscorlib45AndVBRuntimeReferences,\n            TargetFramework.Mscorlib46 => Mscorlib46References,\n            TargetFramework.Mscorlib46Extended => Mscorlib46ExtendedReferences,\n            TargetFramework.Mscorlib461 => Mscorlib46References,\n            TargetFramework.Mscorlib461Extended => Mscorlib461ExtendedReferences,\n            TargetFramework.NetStandard20 => NetStandard20References,\n            TargetFramework.NetCoreApp => NetCoreAppReferences,\n            TargetFramework.WinRT => WinRTReferences,\n            TargetFramework.Standard => StandardReferences,\n            TargetFramework.StandardLatest => StandardLatestReferences,\n            TargetFramework.StandardAndCSharp => StandardAndCSharpReferences,\n            TargetFramework.StandardAndVBRuntime => StandardAndVBRuntimeReferences,\n            TargetFramework.StandardCompat => StandardCompatReferences,\n            TargetFramework.DefaultVb => DefaultVbReferences,\n            TargetFramework.Minimal => MinimalReferences,\n            TargetFramework.MinimalAsync => MinimalAsyncReferences,\n            _ => throw new InvalidOperationException($'Unexpected target framework {targetFramework}'),\n        } 302495"];
227 [label="StandardReferences 302496"];
228 [label="RuntimeUtilities.IsCoreClrRuntime 302497"];
229 [label="Mscorlib46ExtendedReferences 302498"];
230 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 302499"];
231 [label="TestBase.ValueTupleRef 302500"];
232 [label="TestReferences.NetFx.ValueTuple.tuplelib 302501"];
233 [label="ImmutableArray.Create<MetadataReference>(Net461.mscorlib, Net461.System, TestMetadata.Net461.SystemCore, TestBase.ValueTupleRef, Net461.SystemRuntime) 302502"];
234 [label="RuntimeUtilities.IsCoreClrRuntime ? NetStandard20References : Mscorlib46ExtendedReferences 302503"];
235 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 302504"];
236 [label="if (additionalReferences == null)\n            {\n                return references;\n            } 302505"];
237 [label="return references; 302506"];
238 [label="options 302507"];
239 [label="parseOptions 302508"];
240 [label="assemblyName 302509"];
241 [label="sourceFileName 302510"];
242 [label="skipUsesIsNullable 302511"];
243 [label="CreateEmptyCompilation(source, TargetFrameworkUtil.GetReferences(targetFramework, references), options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable) 302512"];
244 [label="param CreateEmptyCompilation(CSharpTestSource source) 302513"];
245 [label="param CreateEmptyCompilation(IEnumerable<MetadataReference> references = null) 302514"];
246 [label="param CreateEmptyCompilation(CSharpCompilationOptions options = null) 302515"];
247 [label="param CreateEmptyCompilation(CSharpParseOptions parseOptions = null) 302516"];
248 [label="param CreateEmptyCompilation(string assemblyName = '') 302517"];
249 [label="param CreateEmptyCompilation(string sourceFileName = '') 302518"];
250 [label="param CreateEmptyCompilation(bool skipUsesIsNullable = false) 302519"];
251 [label="source 302520"];
252 [label="references 302521"];
253 [label="options 302522"];
254 [label="parseOptions 302523"];
255 [label="assemblyName 302524"];
256 [label="sourceFileName 302525"];
257 [label="skipUsesIsNullable 302526"];
258 [label="null 302527"];
259 [label="experimentalFeature: null 302528"];
260 [label="CreateCompilationCore(source, references, options, parseOptions, assemblyName, sourceFileName, skipUsesIsNullable, experimentalFeature: null) 302529"];
261 [label="param CreateCompilationCore(CSharpTestSource source) 302530"];
262 [label="param CreateCompilationCore(IEnumerable<MetadataReference> references) 302531"];
263 [label="param CreateCompilationCore(CSharpCompilationOptions options) 302532"];
264 [label="param CreateCompilationCore(CSharpParseOptions parseOptions) 302533"];
265 [label="param CreateCompilationCore(string assemblyName) 302534"];
266 [label="param CreateCompilationCore(string sourceFileName) 302535"];
267 [label="param CreateCompilationCore(bool skipUsesIsNullable) 302536"];
268 [label="param CreateCompilationCore(MessageID? experimentalFeature) 302537"];
269 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 302538"];
270 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 302539"];
271 [label="source.GetSyntaxTrees(parseOptions, sourceFileName) 302540"];
272 [label="param GetSyntaxTrees(CSharpParseOptions parseOptions) 302541"];
273 [label="param GetSyntaxTrees(string sourceFileName = '') 302542"];
274 [label="param GetSyntaxTrees(this) 302543"];
275 [label="switch (Value)\n            {\n                case string source:\n                    return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) };\n                case string[] sources:\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return CSharpTestBase.Parse(parseOptions, sources);\n                case SyntaxTree tree:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return new[] { tree };\n                case SyntaxTree[] trees:\n                    Debug.Assert(parseOptions == null);\n                    Debug.Assert(string.IsNullOrEmpty(sourceFileName));\n                    return trees;\n                case CSharpTestSource[] testSources:\n                    return testSources.SelectMany(s => s.GetSyntaxTrees(parseOptions, sourceFileName)).ToArray();\n                case null:\n                    return Array.Empty<SyntaxTree>();\n                default:\n                    throw new Exception($'Unexpected value: {Value}');\n            } 302544"];
276 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 302545"];
277 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 302546"];
278 [label="return new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) }; 302547"];
279 [label="CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) 302548"];
280 [label="param Parse(string text) 302549"];
281 [label="param Parse(string filename = '') 302550"];
282 [label="param Parse(CSharpParseOptions options = null) 302551"];
283 [label="param Parse(Encoding encoding = null) 302552"];
284 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 302553"];
285 [label="if ((object)options == null)\n            {\n                options = TestOptions.Regular;\n            } 302554"];
286 [label="kind: SourceCodeKind.Regular 302555"];
287 [label="documentationMode: DocumentationMode.Parse 302556"];
288 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 302557"];
289 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 302558"];
290 [label="Regular = new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.Parse) 302559"];
291 [label="SourceCodeKind.Script 302560"];
292 [label="Regular.WithKind(SourceCodeKind.Script) 302561"];
293 [label="Script = Regular.WithKind(SourceCodeKind.Script) 302562"];
294 [label="LanguageVersion.CSharp6 302563"];
295 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp6) 302564"];
296 [label="Regular6 = Regular.WithLanguageVersion(LanguageVersion.CSharp6) 302565"];
297 [label="LanguageVersion.CSharp7 302566"];
298 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7) 302567"];
299 [label="Regular7 = Regular.WithLanguageVersion(LanguageVersion.CSharp7) 302568"];
300 [label="LanguageVersion.CSharp7_1 302569"];
301 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 302570"];
302 [label="Regular7_1 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_1) 302571"];
303 [label="LanguageVersion.CSharp7_2 302572"];
304 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 302573"];
305 [label="Regular7_2 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_2) 302574"];
306 [label="LanguageVersion.CSharp7_3 302575"];
307 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 302576"];
308 [label="Regular7_3 = Regular.WithLanguageVersion(LanguageVersion.CSharp7_3) 302577"];
309 [label="LanguageVersion.Default 302578"];
310 [label="Regular.WithLanguageVersion(LanguageVersion.Default) 302579"];
311 [label="RegularDefault = Regular.WithLanguageVersion(LanguageVersion.Default) 302580"];
312 [label="LanguageVersion.Preview 302581"];
313 [label="Regular.WithLanguageVersion(LanguageVersion.Preview) 302582"];
314 [label="RegularPreview = Regular.WithLanguageVersion(LanguageVersion.Preview) 302583"];
315 [label="LanguageVersion.CSharp8 302584"];
316 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 302585"];
317 [label="Regular8 = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 302586"];
318 [label="LanguageVersion.CSharp9 302587"];
319 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp9) 302588"];
320 [label="Regular9 = Regular.WithLanguageVersion(LanguageVersion.CSharp9) 302589"];
321 [label="DocumentationMode.Diagnose 302590"];
322 [label="Regular.WithDocumentationMode(DocumentationMode.Diagnose) 302591"];
323 [label="RegularWithDocumentationComments = Regular.WithDocumentationMode(DocumentationMode.Diagnose) 302592"];
324 [label="Regular 302593"];
325 [label="'UseLegacyStrongNameProvider' 302594"];
326 [label="Regular.WithFeature('UseLegacyStrongNameProvider') 302595"];
327 [label="param WithFeature(this CSharpParseOptions options) 302596"];
328 [label="param WithFeature(string feature) 302597"];
329 [label="param WithFeature(string value = 'true') 302598"];
330 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 302599"];
331 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 302600"];
332 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 302601"];
333 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 302602"];
334 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 302603"];
335 [label="new[] { new KeyValuePair<string, string>(feature, value) } 302604"];
336 [label="return options.WithFeatures(options.Features.Concat(new[] { new KeyValuePair<string, string>(feature, value) })); 302605"];
337 [label="RegularWithLegacyStrongName = Regular.WithFeature('UseLegacyStrongNameProvider') 302606"];
338 [label="MessageID.IDS_FeatureImprovedOverloadCandidates 302607"];
339 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() 302608"];
340 [label="1 302609"];
341 [label="MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1 302610"];
342 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 302611"];
343 [label="WithoutImprovedOverloadCandidates = Regular.WithLanguageVersion(MessageID.IDS_FeatureImprovedOverloadCandidates.RequiredVersion() - 1) 302612"];
344 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides 302613"];
345 [label="MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion() 302614"];
346 [label="Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 302615"];
347 [label="WithCovariantReturns = Regular.WithLanguageVersion(MessageID.IDS_FeatureCovariantReturnsForOverrides.RequiredVersion()) 302616"];
348 [label="LanguageVersion.CSharp8 302617"];
349 [label="Regular.WithLanguageVersion(LanguageVersion.CSharp8) 302618"];
350 [label="WithoutCovariantReturns = Regular.WithLanguageVersion(LanguageVersion.CSharp8) 302619"];
351 [label="RegularWithExtendedPartialMethods = RegularPreview 302620"];
352 [label="new SmallDictionary<string, string> { } 302621"];
353 [label="s_experimentalFeatures = new SmallDictionary<string, string> { } 302622"];
354 [label="kind: SourceCodeKind.Regular 302623"];
355 [label="documentationMode: DocumentationMode.None 302624"];
356 [label="languageVersion: LanguageVersion.Preview 302625"];
357 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 302626"];
358 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview) 302627"];
359 [label="s_experimentalFeatures 302628"];
360 [label="new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 302629"];
361 [label="ExperimentalParseOptions =\n            new CSharpParseOptions(kind: SourceCodeKind.Regular, documentationMode: DocumentationMode.None, languageVersion: LanguageVersion.Preview).WithFeatures(s_experimentalFeatures) 302630"];
362 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 302631"];
363 [label="'testV7SwitchBinder' 302632"];
364 [label="'true' 302633"];
365 [label="new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } } 302634"];
366 [label="Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 302635"];
367 [label="Regular6WithV7SwitchBinder = Regular6.WithFeatures(new Dictionary<string, string>() { { 'testV7SwitchBinder', 'true' } }) 302636"];
368 [label="RegularWithoutRecursivePatterns = Regular7_3 302637"];
369 [label="RegularWithRecursivePatterns = Regular8 302638"];
370 [label="RegularWithoutPatternCombinators = Regular8 302639"];
371 [label="RegularWithPatternCombinators = RegularPreview 302640"];
372 [label="OutputKind.DynamicallyLinkedLibrary 302641"];
373 [label="OptimizationLevel.Release 302642"];
374 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 302643"];
375 [label="param CreateTestOptions(OutputKind outputKind) 302644"];
376 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 302645"];
377 [label="param CreateTestOptions(bool allowUnsafe = false) 302646"];
378 [label="outputKind 302647"];
379 [label="optimizationLevel: optimizationLevel 302648"];
380 [label="warningLevel: Diagnostic.MaxWarningLevel 302649"];
381 [label="allowUnsafe: allowUnsafe 302650"];
382 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302651"];
383 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302652"];
384 [label="ReleaseDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Release) 302653"];
385 [label="OutputKind.ConsoleApplication 302654"];
386 [label="OptimizationLevel.Release 302655"];
387 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 302656"];
388 [label="param CreateTestOptions(OutputKind outputKind) 302657"];
389 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 302658"];
390 [label="param CreateTestOptions(bool allowUnsafe = false) 302659"];
391 [label="outputKind 302660"];
392 [label="optimizationLevel: optimizationLevel 302661"];
393 [label="warningLevel: Diagnostic.MaxWarningLevel 302662"];
394 [label="allowUnsafe: allowUnsafe 302663"];
395 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302664"];
396 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302665"];
397 [label="ReleaseExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Release) 302666"];
398 [label="true 302667"];
399 [label="ReleaseDll.WithDebugPlusMode(true) 302668"];
400 [label="ReleaseDebugDll = ReleaseDll.WithDebugPlusMode(true) 302669"];
401 [label="true 302670"];
402 [label="ReleaseExe.WithDebugPlusMode(true) 302671"];
403 [label="ReleaseDebugExe = ReleaseExe.WithDebugPlusMode(true) 302672"];
404 [label="OutputKind.DynamicallyLinkedLibrary 302673"];
405 [label="OptimizationLevel.Debug 302674"];
406 [label="CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 302675"];
407 [label="param CreateTestOptions(OutputKind outputKind) 302676"];
408 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 302677"];
409 [label="param CreateTestOptions(bool allowUnsafe = false) 302678"];
410 [label="outputKind 302679"];
411 [label="optimizationLevel: optimizationLevel 302680"];
412 [label="warningLevel: Diagnostic.MaxWarningLevel 302681"];
413 [label="allowUnsafe: allowUnsafe 302682"];
414 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302683"];
415 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302684"];
416 [label="DebugDll = CreateTestOptions(OutputKind.DynamicallyLinkedLibrary, OptimizationLevel.Debug) 302685"];
417 [label="OutputKind.ConsoleApplication 302686"];
418 [label="OptimizationLevel.Debug 302687"];
419 [label="CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 302688"];
420 [label="param CreateTestOptions(OutputKind outputKind) 302689"];
421 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 302690"];
422 [label="param CreateTestOptions(bool allowUnsafe = false) 302691"];
423 [label="outputKind 302692"];
424 [label="optimizationLevel: optimizationLevel 302693"];
425 [label="warningLevel: Diagnostic.MaxWarningLevel 302694"];
426 [label="allowUnsafe: allowUnsafe 302695"];
427 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302696"];
428 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302697"];
429 [label="DebugExe = CreateTestOptions(OutputKind.ConsoleApplication, OptimizationLevel.Debug) 302698"];
430 [label="OutputKind.WindowsRuntimeMetadata 302699"];
431 [label="OptimizationLevel.Release 302700"];
432 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 302701"];
433 [label="param CreateTestOptions(OutputKind outputKind) 302702"];
434 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 302703"];
435 [label="param CreateTestOptions(bool allowUnsafe = false) 302704"];
436 [label="outputKind 302705"];
437 [label="optimizationLevel: optimizationLevel 302706"];
438 [label="warningLevel: Diagnostic.MaxWarningLevel 302707"];
439 [label="allowUnsafe: allowUnsafe 302708"];
440 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302709"];
441 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302710"];
442 [label="ReleaseWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Release) 302711"];
443 [label="OutputKind.WindowsRuntimeMetadata 302712"];
444 [label="OptimizationLevel.Debug 302713"];
445 [label="CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 302714"];
446 [label="param CreateTestOptions(OutputKind outputKind) 302715"];
447 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 302716"];
448 [label="param CreateTestOptions(bool allowUnsafe = false) 302717"];
449 [label="outputKind 302718"];
450 [label="optimizationLevel: optimizationLevel 302719"];
451 [label="warningLevel: Diagnostic.MaxWarningLevel 302720"];
452 [label="allowUnsafe: allowUnsafe 302721"];
453 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302722"];
454 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302723"];
455 [label="DebugWinMD = CreateTestOptions(OutputKind.WindowsRuntimeMetadata, OptimizationLevel.Debug) 302724"];
456 [label="OutputKind.NetModule 302725"];
457 [label="OptimizationLevel.Release 302726"];
458 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 302727"];
459 [label="param CreateTestOptions(OutputKind outputKind) 302728"];
460 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 302729"];
461 [label="param CreateTestOptions(bool allowUnsafe = false) 302730"];
462 [label="outputKind 302731"];
463 [label="optimizationLevel: optimizationLevel 302732"];
464 [label="warningLevel: Diagnostic.MaxWarningLevel 302733"];
465 [label="allowUnsafe: allowUnsafe 302734"];
466 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302735"];
467 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302736"];
468 [label="ReleaseModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Release) 302737"];
469 [label="OutputKind.NetModule 302738"];
470 [label="OptimizationLevel.Debug 302739"];
471 [label="CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 302740"];
472 [label="param CreateTestOptions(OutputKind outputKind) 302741"];
473 [label="param CreateTestOptions(OptimizationLevel optimizationLevel) 302742"];
474 [label="param CreateTestOptions(bool allowUnsafe = false) 302743"];
475 [label="outputKind 302744"];
476 [label="optimizationLevel: optimizationLevel 302745"];
477 [label="warningLevel: Diagnostic.MaxWarningLevel 302746"];
478 [label="allowUnsafe: allowUnsafe 302747"];
479 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302748"];
480 [label="new CSharpCompilationOptions(outputKind, optimizationLevel: optimizationLevel, warningLevel: Diagnostic.MaxWarningLevel, allowUnsafe: allowUnsafe) 302749"];
481 [label="DebugModule = CreateTestOptions(OutputKind.NetModule, OptimizationLevel.Debug) 302750"];
482 [label="true 302751"];
483 [label="ReleaseDll.WithAllowUnsafe(true) 302752"];
484 [label="UnsafeReleaseDll = ReleaseDll.WithAllowUnsafe(true) 302753"];
485 [label="true 302754"];
486 [label="ReleaseExe.WithAllowUnsafe(true) 302755"];
487 [label="UnsafeReleaseExe = ReleaseExe.WithAllowUnsafe(true) 302756"];
488 [label="true 302757"];
489 [label="DebugDll.WithAllowUnsafe(true) 302758"];
490 [label="UnsafeDebugDll = DebugDll.WithAllowUnsafe(true) 302759"];
491 [label="true 302760"];
492 [label="DebugExe.WithAllowUnsafe(true) 302761"];
493 [label="UnsafeDebugExe = DebugExe.WithAllowUnsafe(true) 302762"];
494 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 302763"];
495 [label="ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 302764"];
496 [label="SigningReleaseDll = ReleaseDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 302765"];
497 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 302766"];
498 [label="ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 302767"];
499 [label="SigningReleaseExe = ReleaseExe.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 302768"];
500 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 302769"];
501 [label="ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 302770"];
502 [label="SigningReleaseModule = ReleaseModule.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 302771"];
503 [label="SigningTestHelpers.DefaultDesktopStrongNameProvider 302772"];
504 [label="DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 302773"];
505 [label="SigningDebugDll = DebugDll.WithStrongNameProvider(SigningTestHelpers.DefaultDesktopStrongNameProvider) 302774"];
506 [label="DebugInformationFormat.Pdb 302775"];
507 [label="EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 302776"];
508 [label="NativePdbEmit = EmitOptions.Default.WithDebugInformationFormat(DebugInformationFormat.Pdb) 302777"];
509 [label="options = TestOptions.Regular; 302778"];
510 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 302779"];
511 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 302780"];
512 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 302781"];
513 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 302782"];
514 [label="var stringText = StringText.From(text, encoding ?? Encoding.UTF8); 302783"];
515 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 302784"];
516 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 302785"];
517 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 302786"];
518 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 302787"];
519 [label="return CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)); 302788"];
520 [label="CheckSerializable(SyntaxFactory.ParseSyntaxTree(stringText, options, filename)) 302789"];
521 [label="param CheckSerializable(SyntaxTree tree) 302790"];
522 [label="var stream = new MemoryStream(); 302791"];
523 [label="var root = tree.GetRoot(); 302792"];
524 [label="var root = tree.GetRoot(); 302793"];
525 [label="root.SerializeTo(stream); 302794"];
526 [label="root.SerializeTo(stream); 302795"];
527 [label="root.SerializeTo(stream); 302796"];
528 [label="stream.Position = 0; 302797"];
529 [label="stream.Position 302798"];
530 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 302799"];
531 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 302800"];
532 [label="var deserializedRoot = CSharpSyntaxNode.DeserializeFrom(stream); 302801"];
533 [label="return tree; 302802"];
534 [label="new[] { CSharpTestBase.Parse(source, filename: sourceFileName, parseOptions) } 302803"];
535 [label="var syntaxTrees = source.GetSyntaxTrees(parseOptions, sourceFileName); 302804"];
536 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 302805"];
537 [label="if (options == null)\n            {\n                bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any());\n\n                options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll;\n            } 302806"];
538 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 302807"];
539 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 302808"];
540 [label="bool hasTopLevelStatements = syntaxTrees.Any(s => s.GetRoot().ChildNodes().OfType<GlobalStatementSyntax>().Any()); 302809"];
541 [label="hasTopLevelStatements 302810"];
542 [label="options = hasTopLevelStatements ? TestOptions.ReleaseExe : TestOptions.ReleaseDll; 302811"];
543 [label="if (Debugger.IsAttached)\n            {\n                options = options.WithConcurrentBuild(false);\n            } 302812"];
544 [label="if (experimentalFeature.HasValue)\n            {\n                parseOptions = (parseOptions ?? TestOptions.Regular).WithExperimental(experimentalFeature.Value);\n            } 302813"];
545 [label="Func<CSharpCompilation> createCompilationLambda = () => CSharpCompilation.Create(\n                assemblyName == '' ? GetUniqueName() : assemblyName,\n                syntaxTrees,\n                references,\n                options); 302814"];
546 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 302815"];
547 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda) 302816"];
548 [label="param ValidateIOperations(Func<Compilation> createCompilation) 302817"];
549 [label="if (!EnableVerifyIOperation)\n            {\n                return;\n            } 302818"];
550 [label="return; 302819"];
551 [label="CompilationExtensions.ValidateIOperations(createCompilationLambda); 302820"];
552 [label="var compilation = createCompilationLambda(); 302821"];
553 [label="var compilation = createCompilationLambda(); 302822"];
554 [label="return Guid.NewGuid().ToString('D'); 302823"];
555 [label="var compilation = createCompilationLambda(); 302824"];
556 [label="OutputKind.ConsoleApplication 302825"];
557 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 302826"];
558 [label="new CSharpCompilationOptions(OutputKind.ConsoleApplication) 302827"];
559 [label="s_defaultOptions = new CSharpCompilationOptions(OutputKind.ConsoleApplication) 302828"];
560 [label="OutputKind.DynamicallyLinkedLibrary 302829"];
561 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 302830"];
562 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary) 302831"];
563 [label="true 302832"];
564 [label="new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 302833"];
565 [label="s_defaultSubmissionOptions = new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary).WithReferencesSupersedeLowerVersions(true) 302834"];
566 [label="param Create(string? assemblyName) 302835"];
567 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees = null) 302836"];
568 [label="param Create(IEnumerable<MetadataReference>? references = null) 302837"];
569 [label="param Create(CSharpCompilationOptions? options = null) 302838"];
570 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 302839"];
571 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 302840"];
572 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 302841"];
573 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 302842"];
574 [label="return Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false); 302843"];
575 [label="Create(\n                assemblyName,\n                options ?? s_defaultOptions,\n                syntaxTrees,\n                references,\n                previousSubmission: null,\n                returnType: null,\n                hostObjectType: null,\n                isSubmission: false) 302844"];
576 [label="param Create(string? assemblyName) 302845"];
577 [label="param Create(CSharpCompilationOptions options) 302846"];
578 [label="param Create(IEnumerable<SyntaxTree>? syntaxTrees) 302847"];
579 [label="param Create(IEnumerable<MetadataReference>? references) 302848"];
580 [label="param Create(CSharpCompilation? previousSubmission) 302849"];
581 [label="param Create(Type? returnType) 302850"];
582 [label="param Create(Type? hostObjectType) 302851"];
583 [label="param Create(bool isSubmission) 302852"];
584 [label="RoslynDebug.Assert(options != null); 302853"];
585 [label="RoslynDebug.Assert(options != null); 302854"];
586 [label="Debug.Assert(!isSubmission || options.ReferencesSupersedeLowerVersions); 302855"];
587 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 302856"];
588 [label="var validatedReferences = ValidateReferences<CSharpCompilationReference>(references); 302857"];
589 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 302858"];
590 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 302859"];
591 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 302860"];
592 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 302861"];
593 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 302862"];
594 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 302863"];
595 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 302864"];
596 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 302865"];
597 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 302866"];
598 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 302867"];
599 [label="var compilation = new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null); 302868"];
600 [label="new CSharpCompilation(\n                assemblyName,\n                options,\n                validatedReferences,\n                previousSubmission,\n                returnType,\n                hostObjectType,\n                isSubmission,\n                referenceManager: null,\n                reuseReferenceManager: false,\n                syntaxAndDeclarations: new SyntaxAndDeclarationManager(\n                    ImmutableArray<SyntaxTree>.Empty,\n                    options.ScriptClassName,\n                    options.SourceReferenceResolver,\n                    CSharp.MessageProvider.Instance,\n                    isSubmission,\n                    state: null),\n                semanticModelProvider: null) 302869"];
601 [label="param CSharpCompilation(string? assemblyName) 302870"];
602 [label="param CSharpCompilation(CSharpCompilationOptions options) 302871"];
603 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 302872"];
604 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 302873"];
605 [label="param CSharpCompilation(Type? submissionReturnType) 302874"];
606 [label="param CSharpCompilation(Type? hostObjectType) 302875"];
607 [label="param CSharpCompilation(bool isSubmission) 302876"];
608 [label="param CSharpCompilation(ReferenceManager? referenceManager) 302877"];
609 [label="param CSharpCompilation(bool reuseReferenceManager) 302878"];
610 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 302879"];
611 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 302880"];
612 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 302881"];
613 [label="param CSharpCompilation(this) 302882"];
614 [label="assemblyName 302883"];
615 [label="options 302884"];
616 [label="references 302885"];
617 [label="previousSubmission 302886"];
618 [label="submissionReturnType 302887"];
619 [label="hostObjectType 302888"];
620 [label="isSubmission 302889"];
621 [label="referenceManager 302890"];
622 [label="reuseReferenceManager 302891"];
623 [label="syntaxAndDeclarations 302892"];
624 [label="syntaxAndDeclarations.ExternalSyntaxTrees 302893"];
625 [label="SyntaxTreeCommonFeatures(syntaxAndDeclarations.ExternalSyntaxTrees) 302894"];
626 [label="semanticModelProvider 302895"];
627 [label="eventQueue 302896"];
628 [label="param CSharpCompilation(this) 302897"];
629 [label="param CSharpCompilation(string? assemblyName) 302898"];
630 [label="param CSharpCompilation(CSharpCompilationOptions options) 302899"];
631 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 302900"];
632 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 302901"];
633 [label="param CSharpCompilation(Type? submissionReturnType) 302902"];
634 [label="param CSharpCompilation(Type? hostObjectType) 302903"];
635 [label="param CSharpCompilation(bool isSubmission) 302904"];
636 [label="param CSharpCompilation(ReferenceManager? referenceManager) 302905"];
637 [label="param CSharpCompilation(bool reuseReferenceManager) 302906"];
638 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 302907"];
639 [label="param CSharpCompilation(IReadOnlyDictionary<string, string> features) 302908"];
640 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 302909"];
641 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 302910"];
642 [label="param CSharpCompilation(this) 302911"];
643 [label="assemblyName 302912"];
644 [label="references 302913"];
645 [label="features 302914"];
646 [label="isSubmission 302915"];
647 [label="semanticModelProvider 302916"];
648 [label="eventQueue 302917"];
649 [label="param CSharpCompilation(this) 302918"];
650 [label="param CSharpCompilation(this) 302919"];
651 [label="_options 302920"];
652 [label="_globalImports 302921"];
653 [label="_previousSubmissionImports 302922"];
654 [label="_globalNamespaceAlias 302923"];
655 [label="_scriptClass 302924"];
656 [label="_lazyHostObjectTypeSymbol 302925"];
657 [label="_lazyImportInfos 302926"];
658 [label="_conversions 302927"];
659 [label="_anonymousTypeManager 302928"];
660 [label="_lazyGlobalNamespace 302929"];
661 [label="builtInOperators 302930"];
662 [label="_lazyAssemblySymbol 302931"];
663 [label="_referenceManager 302932"];
664 [label="_syntaxAndDeclarations 302933"];
665 [label="_lazyEntryPoint 302934"];
666 [label="_lazyEmitNullablePublicOnly 302935"];
667 [label="_lazyCompilationUnitCompletedTrees 302936"];
668 [label="NullableAnalysisData 302937"];
669 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 302938"];
670 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 302939"];
671 [label="_externAliasTargets 302940"];
672 [label="_moduleInitializerMethods 302941"];
673 [label="_binderFactories 302942"];
674 [label="_ignoreAccessibilityBinderFactories 302943"];
675 [label="_lazyDeclarationDiagnostics 302944"];
676 [label="_declarationDiagnosticsFrozen 302945"];
677 [label="new DiagnosticBag() 302946"];
678 [label="_additionalCodegenWarnings = new DiagnosticBag() 302947"];
679 [label="WellKnownMemberSignatureComparer 302948"];
680 [label="_lazyWellKnownTypes 302949"];
681 [label="_lazyWellKnownTypeMembers 302950"];
682 [label="_usesNullableAttributes 302951"];
683 [label="_needsGeneratedAttributes 302952"];
684 [label="_needsGeneratedAttributes_IsFrozen 302953"];
685 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 302954"];
686 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 302955"];
687 [label="new WellKnownMembersSignatureComparer(this) 302956"];
688 [label="param WellKnownMembersSignatureComparer(CSharpCompilation compilation) 302957"];
689 [label="param WellKnownMembersSignatureComparer(this) 302958"];
690 [label="new SpecialMembersSignatureComparer() 302959"];
691 [label="param SpecialMembersSignatureComparer(this) 302960"];
692 [label="Instance = new SpecialMembersSignatureComparer() 302961"];
693 [label="param WellKnownMembersSignatureComparer(this) 302962"];
694 [label="param SpecialMembersSignatureComparer(this) 302963"];
695 [label="param SpecialMembersSignatureComparer(this) 302964"];
696 [label="_compilation 302965"];
697 [label="_compilation 302966"];
698 [label="WellKnownMemberSignatureComparer 302967"];
699 [label="_options 302968"];
700 [label="this.builtInOperators = new BuiltInOperators(this); 302969"];
701 [label="this.builtInOperators = new BuiltInOperators(this); 302970"];
702 [label="this.builtInOperators 302971"];
703 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 302972"];
704 [label="_scriptClass = new Lazy<ImplicitNamedTypeSymbol?>(BindScriptClass); 302973"];
705 [label="_scriptClass 302974"];
706 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 302975"];
707 [label="_globalImports = new Lazy<Imports>(BindGlobalImports); 302976"];
708 [label="_globalImports 302977"];
709 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 302978"];
710 [label="_previousSubmissionImports = new Lazy<Imports>(ExpandPreviousSubmissionImports); 302979"];
711 [label="_previousSubmissionImports 302980"];
712 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 302981"];
713 [label="_globalNamespaceAlias = new Lazy<AliasSymbol>(CreateGlobalNamespaceAlias); 302982"];
714 [label="_globalNamespaceAlias 302983"];
715 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 302984"];
716 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 302985"];
717 [label="new AnonymousTypeManager(this) 302986"];
718 [label="param AnonymousTypeManager(CSharpCompilation compilation) 302987"];
719 [label="param AnonymousTypeManager(this) 302988"];
720 [label="param AnonymousTypeManager(this) 302989"];
721 [label="public CSharpCompilation Compilation { get; } 302990"];
722 [label="_lazyAnonymousTypeTemplates 302991"];
723 [label="_lazySynthesizedDelegates 302992"];
724 [label="new ConcurrentDictionary<Location, bool>() 302993"];
725 [label="_sourceLocationsSeen = new ConcurrentDictionary<Location, bool>() 302994"];
726 [label="Debug.Assert(compilation != null); 302995"];
727 [label="Debug.Assert(compilation != null); 302996"];
728 [label="this.Compilation 302997"];
729 [label="_anonymousTypeManager 302998"];
730 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 302999"];
731 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 303000"];
732 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 303001"];
733 [label="LanguageVersion? result = null; 303002"];
734 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 303003"];
735 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 303004"];
736 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 303005"];
737 [label="return result ?? LanguageVersion.Default.MapSpecifiedToEffectiveVersion(); 303006"];
738 [label="this.LanguageVersion = CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees); 303007"];
739 [label="this.LanguageVersion 303008"];
740 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 303009"];
741 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303010"];
742 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303011"];
743 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303012"];
744 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303013"];
745 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303014"];
746 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303015"];
747 [label="if (reuseReferenceManager)\n            {\n                if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                }\n\n                referenceManager.AssertCanReuseForCompilation(this);\n                _referenceManager = referenceManager;\n            }\n            else\n            {\n                _referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata);\n            } 303016"];
748 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 303017"];
749 [label="this.Options 303018"];
750 [label="get\n            {\n                return _options;\n            } 303019"];
751 [label="return _options; 303020"];
752 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 303021"];
753 [label="_referenceManager = new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata); 303022"];
754 [label="new ReferenceManager(\n                    MakeSourceAssemblySimpleName(),\n                    this.Options.AssemblyIdentityComparer,\n                    observedMetadata: referenceManager?.ObservedMetadata) 303023"];
755 [label="param ReferenceManager(string simpleAssemblyName) 303024"];
756 [label="param ReferenceManager(AssemblyIdentityComparer identityComparer) 303025"];
757 [label="param ReferenceManager(Dictionary<MetadataReference, MetadataOrDiagnostic>? observedMetadata) 303026"];
758 [label="param ReferenceManager(this) 303027"];
759 [label="simpleAssemblyName 303028"];
760 [label="identityComparer 303029"];
761 [label="observedMetadata 303030"];
762 [label="param ReferenceManager(this) 303031"];
763 [label="param ReferenceManager(this) 303032"];
764 [label="_referenceManager 303033"];
765 [label="_syntaxAndDeclarations 303034"];
766 [label="Debug.Assert(_lazyAssemblySymbol is null); 303035"];
767 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 303036"];
768 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 303037"];
769 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 303038"];
770 [label="if (syntaxTrees != null)\n            {\n                compilation = compilation.AddSyntaxTrees(syntaxTrees);\n            } 303039"];
771 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 303040"];
772 [label="compilation.AddSyntaxTrees(syntaxTrees) 303041"];
773 [label="param AddSyntaxTrees(IEnumerable<SyntaxTree> trees) 303042"];
774 [label="param AddSyntaxTrees(this) 303043"];
775 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 303044"];
776 [label="if (trees == null)\n            {\n                throw new ArgumentNullException(nameof(trees));\n            } 303045"];
777 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 303046"];
778 [label="if (trees.IsEmpty())\n            {\n                return this;\n            } 303047"];
779 [label="var externalSyntaxTrees = PooledHashSet<SyntaxTree>.GetInstance(); 303048"];
780 [label="var syntaxAndDeclarations = _syntaxAndDeclarations; 303049"];
781 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 303050"];
782 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 303051"];
783 [label="externalSyntaxTrees.AddAll(syntaxAndDeclarations.ExternalSyntaxTrees); 303052"];
784 [label="bool reuseReferenceManager = true; 303053"];
785 [label="int i = 0; 303054"];
786 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 303055"];
787 [label="foreach (var tree in trees.Cast<CSharpSyntaxTree>())\n            {\n                if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                }\n\n                if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                }\n\n                if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                }\n\n                if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                }\n\n                externalSyntaxTrees.Add(tree);\n                reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives;\n\n                i++;\n            } 303056"];
788 [label="if (tree == null)\n                {\n                    throw new ArgumentNullException($'{nameof(trees)}[{i}]');\n                } 303057"];
789 [label="if (!tree.HasCompilationUnitRoot)\n                {\n                    throw new ArgumentException(CSharpResources.TreeMustHaveARootNodeWith, $'{nameof(trees)}[{i}]');\n                } 303058"];
790 [label="if (externalSyntaxTrees.Contains(tree))\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeAlreadyPresent, $'{nameof(trees)}[{i}]');\n                } 303059"];
791 [label="if (this.IsSubmission && tree.Options.Kind == SourceCodeKind.Regular)\n                {\n                    throw new ArgumentException(CSharpResources.SubmissionCanOnlyInclude, $'{nameof(trees)}[{i}]');\n                } 303060"];
792 [label="externalSyntaxTrees.Add(tree); 303061"];
793 [label="externalSyntaxTrees.Add(tree); 303062"];
794 [label="reuseReferenceManager &= !tree.HasReferenceOrLoadDirectives; 303063"];
795 [label="i++; 303064"];
796 [label="externalSyntaxTrees.Free(); 303065"];
797 [label="if (this.IsSubmission && i > 1)\n            {\n                throw new ArgumentException(CSharpResources.SubmissionCanHaveAtMostOne, nameof(trees));\n            } 303066"];
798 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 303067"];
799 [label="syntaxAndDeclarations = syntaxAndDeclarations.AddSyntaxTrees(trees); 303068"];
800 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 303069"];
801 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 303070"];
802 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 303071"];
803 [label="Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations) 303072"];
804 [label="param Update(ReferenceManager referenceManager) 303073"];
805 [label="param Update(bool reuseReferenceManager) 303074"];
806 [label="param Update(SyntaxAndDeclarationManager syntaxAndDeclarations) 303075"];
807 [label="param Update(this) 303076"];
808 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 303077"];
809 [label="this.PreviousSubmission 303078"];
810 [label="=> ScriptCompilationInfo?.PreviousScriptCompilation 303079"];
811 [label="ScriptCompilationInfo 303080"];
812 [label="ScriptCompilationInfo?.PreviousScriptCompilation 303081"];
813 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 303082"];
814 [label="this.SubmissionReturnType 303083"];
815 [label="=> ScriptCompilationInfo 303084"];
816 [label="ScriptCompilationInfo 303085"];
817 [label="this.HostObjectType 303086"];
818 [label="=> ScriptCompilationInfo 303087"];
819 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 303088"];
820 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 303089"];
821 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 303090"];
822 [label="return new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider); 303091"];
823 [label="new CSharpCompilation(\n                this.AssemblyName,\n                _options,\n                this.ExternalReferences,\n                this.PreviousSubmission,\n                this.SubmissionReturnType,\n                this.HostObjectType,\n                this.IsSubmission,\n                referenceManager,\n                reuseReferenceManager,\n                syntaxAndDeclarations,\n                this.SemanticModelProvider) 303092"];
824 [label="param CSharpCompilation(string? assemblyName) 303093"];
825 [label="param CSharpCompilation(CSharpCompilationOptions options) 303094"];
826 [label="param CSharpCompilation(ImmutableArray<MetadataReference> references) 303095"];
827 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 303096"];
828 [label="param CSharpCompilation(Type? submissionReturnType) 303097"];
829 [label="param CSharpCompilation(Type? hostObjectType) 303098"];
830 [label="param CSharpCompilation(bool isSubmission) 303099"];
831 [label="param CSharpCompilation(ReferenceManager? referenceManager) 303100"];
832 [label="param CSharpCompilation(bool reuseReferenceManager) 303101"];
833 [label="param CSharpCompilation(SyntaxAndDeclarationManager syntaxAndDeclarations) 303102"];
834 [label="param CSharpCompilation(SemanticModelProvider? semanticModelProvider) 303103"];
835 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 303104"];
836 [label="param CSharpCompilation(this) 303105"];
837 [label="previousSubmission 303106"];
838 [label="submissionReturnType 303107"];
839 [label="hostObjectType 303108"];
840 [label="syntaxAndDeclarations.ExternalSyntaxTrees 303109"];
841 [label="eventQueue 303110"];
842 [label="param CSharpCompilation(this) 303111"];
843 [label="param CSharpCompilation(CSharpCompilation? previousSubmission) 303112"];
844 [label="param CSharpCompilation(Type? submissionReturnType) 303113"];
845 [label="param CSharpCompilation(Type? hostObjectType) 303114"];
846 [label="param CSharpCompilation(AsyncQueue<CompilationEvent>? eventQueue = null) 303115"];
847 [label="param CSharpCompilation(this) 303116"];
848 [label="eventQueue 303117"];
849 [label="param CSharpCompilation(this) 303118"];
850 [label="_options 303119"];
851 [label="_globalImports 303120"];
852 [label="_previousSubmissionImports 303121"];
853 [label="_globalNamespaceAlias 303122"];
854 [label="_scriptClass 303123"];
855 [label="_lazyHostObjectTypeSymbol 303124"];
856 [label="_lazyImportInfos 303125"];
857 [label="_conversions 303126"];
858 [label="_anonymousTypeManager 303127"];
859 [label="_lazyGlobalNamespace 303128"];
860 [label="builtInOperators 303129"];
861 [label="_lazyAssemblySymbol 303130"];
862 [label="_referenceManager 303131"];
863 [label="_syntaxAndDeclarations 303132"];
864 [label="_lazyEntryPoint 303133"];
865 [label="_lazyEmitNullablePublicOnly 303134"];
866 [label="_lazyCompilationUnitCompletedTrees 303135"];
867 [label="NullableAnalysisData 303136"];
868 [label="public LanguageVersion LanguageVersion\n        {\n            get;\n        } 303137"];
869 [label="public new CSharpScriptCompilationInfo? ScriptCompilationInfo { get; } 303138"];
870 [label="_externAliasTargets 303139"];
871 [label="_moduleInitializerMethods 303140"];
872 [label="_binderFactories 303141"];
873 [label="_ignoreAccessibilityBinderFactories 303142"];
874 [label="_lazyDeclarationDiagnostics 303143"];
875 [label="_declarationDiagnosticsFrozen 303144"];
876 [label="new DiagnosticBag() 303145"];
877 [label="_additionalCodegenWarnings = new DiagnosticBag() 303146"];
878 [label="WellKnownMemberSignatureComparer 303147"];
879 [label="_lazyWellKnownTypes 303148"];
880 [label="_lazyWellKnownTypeMembers 303149"];
881 [label="_usesNullableAttributes 303150"];
882 [label="_needsGeneratedAttributes 303151"];
883 [label="_needsGeneratedAttributes_IsFrozen 303152"];
884 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 303153"];
885 [label="WellKnownMemberSignatureComparer = new WellKnownMembersSignatureComparer(this); 303154"];
886 [label="new WellKnownMembersSignatureComparer(this) 303155"];
887 [label="param WellKnownMembersSignatureComparer(CSharpCompilation compilation) 303156"];
888 [label="param WellKnownMembersSignatureComparer(this) 303157"];
889 [label="param WellKnownMembersSignatureComparer(this) 303158"];
890 [label="param SpecialMembersSignatureComparer(this) 303159"];
891 [label="param SpecialMembersSignatureComparer(this) 303160"];
892 [label="_compilation 303161"];
893 [label="_compilation 303162"];
894 [label="WellKnownMemberSignatureComparer 303163"];
895 [label="this.builtInOperators = new BuiltInOperators(this); 303164"];
896 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 303165"];
897 [label="_anonymousTypeManager = new AnonymousTypeManager(this); 303166"];
898 [label="new AnonymousTypeManager(this) 303167"];
899 [label="param AnonymousTypeManager(CSharpCompilation compilation) 303168"];
900 [label="param AnonymousTypeManager(this) 303169"];
901 [label="param AnonymousTypeManager(this) 303170"];
902 [label="public CSharpCompilation Compilation { get; } 303171"];
903 [label="_lazyAnonymousTypeTemplates 303172"];
904 [label="_lazySynthesizedDelegates 303173"];
905 [label="new ConcurrentDictionary<Location, bool>() 303174"];
906 [label="_sourceLocationsSeen = new ConcurrentDictionary<Location, bool>() 303175"];
907 [label="Debug.Assert(compilation != null); 303176"];
908 [label="Debug.Assert(compilation != null); 303177"];
909 [label="this.Compilation 303178"];
910 [label="_anonymousTypeManager 303179"];
911 [label="CommonLanguageVersion(syntaxAndDeclarations.ExternalSyntaxTrees) 303180"];
912 [label="param CommonLanguageVersion(ImmutableArray<SyntaxTree> syntaxTrees) 303181"];
913 [label="LanguageVersion? result = null; 303182"];
914 [label="foreach (var tree in syntaxTrees)\n            {\n                var version = ((CSharpParseOptions)tree.Options).LanguageVersion;\n                if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                }\n            } 303183"];
915 [label="var version = ((CSharpParseOptions)tree.Options).LanguageVersion; 303184"];
916 [label="if (result == null)\n                {\n                    result = version;\n                }\n                else if (result != version)\n                {\n                    throw new ArgumentException(CodeAnalysisResources.InconsistentLanguageVersions, nameof(syntaxTrees));\n                } 303185"];
917 [label="result = version; 303186"];
918 [label="if (isSubmission)\n            {\n                Debug.Assert(previousSubmission == null || previousSubmission.HostObjectType == hostObjectType);\n                this.ScriptCompilationInfo = new CSharpScriptCompilationInfo(previousSubmission, submissionReturnType, hostObjectType);\n            }\n            else\n            {\n                Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null);\n            } 303187"];
919 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303188"];
920 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303189"];
921 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303190"];
922 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303191"];
923 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303192"];
924 [label="Debug.Assert(previousSubmission == null && submissionReturnType == null && hostObjectType == null); 303193"];
925 [label="if (referenceManager is null)\n                {\n                    throw new ArgumentNullException(nameof(referenceManager));\n                } 303194"];
926 [label="referenceManager.AssertCanReuseForCompilation(this); 303195"];
927 [label="referenceManager.AssertCanReuseForCompilation(this); 303196"];
928 [label="_referenceManager 303197"];
929 [label="Debug.Assert(_lazyAssemblySymbol is null); 303198"];
930 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 303199"];
931 [label="if (EventQueue != null) EventQueue.TryEnqueue(new CompilationStartedEvent(this)); 303200"];
932 [label="return Update(_referenceManager, reuseReferenceManager, syntaxAndDeclarations); 303201"];
933 [label="compilation = compilation.AddSyntaxTrees(syntaxTrees); 303202"];
934 [label="Debug.Assert(compilation._lazyAssemblySymbol is null); 303203"];
935 [label="return compilation; 303204"];
936 [label="var compilation = createCompilationLambda(); 303205"];
937 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 303206"];
938 [label="IsNullableEnabled(compilation) 303207"];
939 [label="param IsNullableEnabled(CSharpCompilation compilation) 303208"];
940 [label="compilation.SyntaxTrees 303209"];
941 [label="get { return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; } 303210"];
942 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 303211"];
943 [label="var trees = compilation.SyntaxTrees; 303212"];
944 [label="if (trees.IsDefaultOrEmpty)\n            {\n                return false;\n            } 303213"];
945 [label="var options = (CSharpParseOptions)trees[0].Options; 303214"];
946 [label="var options = (CSharpParseOptions)trees[0].Options; 303215"];
947 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 303216"];
948 [label="return options.IsFeatureEnabled(MessageID.IDS_FeatureNullableReferenceTypes); 303217"];
949 [label="if (!skipUsesIsNullable && !IsNullableEnabled(compilation))\n            {\n                VerifyUsesOfNullability(createCompilationLambda().SourceModule.GlobalNamespace, expectedUsesOfNullable: ImmutableArray<string>.Empty);\n            } 303218"];
950 [label="return compilation; 303219"];
951 [label="comp.Assembly 303220"];
952 [label="get\n            {\n                return SourceAssembly;\n            } 303221"];
953 [label="SourceAssembly 303222"];
954 [label="get\n            {\n                GetBoundReferenceManager();\n                RoslynDebug.Assert(_lazyAssemblySymbol is object);\n                return _lazyAssemblySymbol;\n            } 303223"];
955 [label="GetBoundReferenceManager() 303224"];
956 [label="param GetBoundReferenceManager(this) 303225"];
957 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 303226"];
958 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 303227"];
959 [label="_referenceManager.CreateSourceAssemblyForCompilation(this) 303228"];
960 [label="param CreateSourceAssemblyForCompilation(CSharpCompilation compilation) 303229"];
961 [label="param CreateSourceAssemblyForCompilation(this) 303230"];
962 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 303231"];
963 [label="CreateAndSetSourceAssemblyFullBind(compilation) 303232"];
964 [label="param CreateAndSetSourceAssemblyFullBind(CSharpCompilation compilation) 303233"];
965 [label="param CreateAndSetSourceAssemblyFullBind(this) 303234"];
966 [label="var resolutionDiagnostics = DiagnosticBag.GetInstance(); 303235"];
967 [label="var assemblyReferencesBySimpleName = PooledDictionary<string, List<ReferencedAssemblyIdentity>>.GetInstance(); 303236"];
968 [label="compilation.Options 303237"];
969 [label="get\n            {\n                return _options;\n            } 303238"];
970 [label="bool supersedeLowerVersions = compilation.Options.ReferencesSupersedeLowerVersions; 303239"];
971 [label="IDictionary<(string, string), MetadataReference>? boundReferenceDirectiveMap; 303240"];
972 [label="ImmutableArray<MetadataReference> boundReferenceDirectives; 303241"];
973 [label="boundReferenceDirectives 303242"];
974 [label="ImmutableArray<AssemblyData> referencedAssemblies; 303243"];
975 [label="referencedAssemblies 303244"];
976 [label="ImmutableArray<PEModule> modules; 303245"];
977 [label="modules 303246"];
978 [label="ImmutableArray<MetadataReference> explicitReferences; 303247"];
979 [label="explicitReferences 303248"];
980 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303249"];
981 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303250"];
982 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303251"];
983 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303252"];
984 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303253"];
985 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303254"];
986 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303255"];
987 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303256"];
988 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303257"];
989 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303258"];
990 [label="get { return this.Declarations.ReferenceDirectives; } 303259"];
991 [label="this.Declarations 303260"];
992 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 303261"];
993 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 303262"];
994 [label="return this.Declarations.ReferenceDirectives; 303263"];
995 [label="SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier 303264"];
996 [label="SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 303265"];
997 [label="SymbolDisplayCompilerInternalOptions.None 303266"];
998 [label="SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .WithCompilerInternalOptions(SymbolDisplayCompilerInternalOptions.None) 303267"];
999 [label="s_debuggerDisplayFormat =\n            SymbolDisplayFormat.TestFormat\n                .AddMiscellaneousOptions(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier\n                    | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier)\n                .WithCompilerInternalOptions(SymbolDisplayCompilerInternalOptions.None) 303268"];
1000 [label="this.Declarations.ReferenceDirectives 303269"];
1001 [label="param ReportErrorIfHasConstraints(SyntaxList<TypeParameterConstraintClauseSyntax> constraintClauses) 303270"];
1002 [label="param ReportErrorIfHasConstraints(DiagnosticBag diagnostics) 303271"];
1003 [label="if (constraintClauses.Count > 0)\n            {\n                diagnostics.Add(\n                    ErrorCode.ERR_ConstraintOnlyAllowedOnGenericDecl,\n                    constraintClauses[0].WhereKeyword.GetLocation());\n            } 303272"];
1004 [label="if (constraintClauses.Count > 0)\n            {\n                diagnostics.Add(\n                    ErrorCode.ERR_ConstraintOnlyAllowedOnGenericDecl,\n                    constraintClauses[0].WhereKeyword.GetLocation());\n            } 303273"];
1005 [label="param ToDeclarationModifiers(this SyntaxTokenList modifiers) 303274"];
1006 [label="param ToDeclarationModifiers(DiagnosticBag diagnostics) 303275"];
1007 [label="var result = DeclarationModifiers.None; 303276"];
1008 [label="bool seenNoDuplicates = true; 303277"];
1009 [label="bool seenNoAccessibilityDuplicates = true; 303278"];
1010 [label="foreach (var modifier in modifiers)\n            {\n                DeclarationModifiers one = ToDeclarationModifier(modifier.ContextualKind());\n\n                ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics);\n\n                result |= one;\n            } 303279"];
1011 [label="DeclarationModifiers one = ToDeclarationModifier(modifier.ContextualKind()); 303280"];
1012 [label="ToDeclarationModifier(modifier.ContextualKind()) 303281"];
1013 [label="param ToDeclarationModifier(SyntaxKind kind) 303282"];
1014 [label="switch (kind)\n            {\n                case SyntaxKind.AbstractKeyword:\n                    return DeclarationModifiers.Abstract;\n                case SyntaxKind.AsyncKeyword:\n                    return DeclarationModifiers.Async;\n                case SyntaxKind.SealedKeyword:\n                    return DeclarationModifiers.Sealed;\n                case SyntaxKind.StaticKeyword:\n                    return DeclarationModifiers.Static;\n                case SyntaxKind.NewKeyword:\n                    return DeclarationModifiers.New;\n                case SyntaxKind.PublicKeyword:\n                    return DeclarationModifiers.Public;\n                case SyntaxKind.ProtectedKeyword:\n                    return DeclarationModifiers.Protected;\n                case SyntaxKind.InternalKeyword:\n                    return DeclarationModifiers.Internal;\n                case SyntaxKind.PrivateKeyword:\n                    return DeclarationModifiers.Private;\n                case SyntaxKind.ExternKeyword:\n                    return DeclarationModifiers.Extern;\n                case SyntaxKind.ReadOnlyKeyword:\n                    return DeclarationModifiers.ReadOnly;\n                case SyntaxKind.PartialKeyword:\n                    return DeclarationModifiers.Partial;\n                case SyntaxKind.UnsafeKeyword:\n                    return DeclarationModifiers.Unsafe;\n                case SyntaxKind.VirtualKeyword:\n                    return DeclarationModifiers.Virtual;\n                case SyntaxKind.OverrideKeyword:\n                    return DeclarationModifiers.Override;\n                case SyntaxKind.ConstKeyword:\n                    return DeclarationModifiers.Const;\n                case SyntaxKind.FixedKeyword:\n                    return DeclarationModifiers.Fixed;\n                case SyntaxKind.VolatileKeyword:\n                    return DeclarationModifiers.Volatile;\n                case SyntaxKind.RefKeyword:\n                    return DeclarationModifiers.Ref;\n                case SyntaxKind.DataKeyword:\n                    return DeclarationModifiers.Data;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 303283"];
1015 [label="return DeclarationModifiers.Public; 303284"];
1016 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 303285"];
1017 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 303286"];
1018 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 303287"];
1019 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 303288"];
1020 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 303289"];
1021 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 303290"];
1022 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics) 303291"];
1023 [label="param ReportDuplicateModifiers(SyntaxToken modifierToken) 303292"];
1024 [label="param ReportDuplicateModifiers(DeclarationModifiers modifierKind) 303293"];
1025 [label="param ReportDuplicateModifiers(DeclarationModifiers allModifiers) 303294"];
1026 [label="param ReportDuplicateModifiers(ref bool seenNoDuplicates) 303295"];
1027 [label="param ReportDuplicateModifiers(ref bool seenNoAccessibilityDuplicates) 303296"];
1028 [label="param ReportDuplicateModifiers(DiagnosticBag diagnostics) 303297"];
1029 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 303298"];
1030 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 303299"];
1031 [label="result |= one; 303300"];
1032 [label="switch (result & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.Protected | DeclarationModifiers.Internal:\n                    // the two keywords 'protected' and 'internal' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.ProtectedInternal;\n                    break;\n\n                case DeclarationModifiers.Private | DeclarationModifiers.Protected:\n                    // the two keywords 'private' and 'protected' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.PrivateProtected;\n                    break;\n            } 303301"];
1033 [label="return result; 303302"];
1034 [label="get { return _options; } 303303"];
1035 [label="return _options; 303304"];
1036 [label="get { return CSharp.MessageProvider.Instance; } 303305"];
1037 [label="return CSharp.MessageProvider.Instance; 303306"];
1038 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303307"];
1039 [label="param CreateAssemblyDataForFile(PEAssembly assembly) 303308"];
1040 [label="param CreateAssemblyDataForFile(WeakList<IAssemblySymbolInternal> cachedSymbols) 303309"];
1041 [label="param CreateAssemblyDataForFile(DocumentationProvider documentationProvider) 303310"];
1042 [label="param CreateAssemblyDataForFile(string sourceAssemblySimpleName) 303311"];
1043 [label="param CreateAssemblyDataForFile(MetadataImportOptions importOptions) 303312"];
1044 [label="param CreateAssemblyDataForFile(bool embedInteropTypes) 303313"];
1045 [label="param CreateAssemblyDataForFile(this) 303314"];
1046 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 303315"];
1047 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 303316"];
1048 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 303317"];
1049 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 303318"];
1050 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 303319"];
1051 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 303320"];
1052 [label="return new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions); 303321"];
1053 [label="new AssemblyDataForFile(\n                    assembly,\n                    cachedSymbols,\n                    embedInteropTypes,\n                    documentationProvider,\n                    sourceAssemblySimpleName,\n                    importOptions) 303322"];
1054 [label="param AssemblyDataForFile(PEAssembly assembly) 303323"];
1055 [label="param AssemblyDataForFile(WeakList<IAssemblySymbolInternal> cachedSymbols) 303324"];
1056 [label="param AssemblyDataForFile(bool embedInteropTypes) 303325"];
1057 [label="param AssemblyDataForFile(DocumentationProvider documentationProvider) 303326"];
1058 [label="param AssemblyDataForFile(string sourceAssemblySimpleName) 303327"];
1059 [label="param AssemblyDataForFile(MetadataImportOptions compilationImportOptions) 303328"];
1060 [label="param AssemblyDataForFile(this) 303329"];
1061 [label="assembly.Identity 303330"];
1062 [label="assembly.AssemblyReferences 303331"];
1063 [label="embedInteropTypes 303332"];
1064 [label="param AssemblyDataForFile(this) 303333"];
1065 [label="param AssemblyDataForMetadataOrCompilation(AssemblyIdentity identity) 303334"];
1066 [label="param AssemblyDataForMetadataOrCompilation(ImmutableArray<AssemblyIdentity> referencedAssemblies) 303335"];
1067 [label="param AssemblyDataForMetadataOrCompilation(bool embedInteropTypes) 303336"];
1068 [label="param AssemblyDataForMetadataOrCompilation(this) 303337"];
1069 [label="param AssemblyDataForMetadataOrCompilation(this) 303338"];
1070 [label="_assemblies 303339"];
1071 [label="_identity 303340"];
1072 [label="_embedInteropTypes 303341"];
1073 [label="RoslynDebug.Assert(identity != null); 303342"];
1074 [label="RoslynDebug.Assert(identity != null); 303343"];
1075 [label="Debug.Assert(!referencedAssemblies.IsDefault); 303344"];
1076 [label="_embedInteropTypes 303345"];
1077 [label="_identity 303346"];
1078 [label="_referencedAssemblies 303347"];
1079 [label="Assembly 303348"];
1080 [label="CachedSymbols 303349"];
1081 [label="DocumentationProvider 303350"];
1082 [label="_compilationImportOptions 303351"];
1083 [label="_sourceAssemblySimpleName 303352"];
1084 [label="_internalsVisibleComputed 303353"];
1085 [label="_internalsPotentiallyVisibleToCompilation 303354"];
1086 [label="RoslynDebug.Assert(documentationProvider != null); 303355"];
1087 [label="RoslynDebug.Assert(documentationProvider != null); 303356"];
1088 [label="RoslynDebug.Assert(cachedSymbols != null); 303357"];
1089 [label="RoslynDebug.Assert(cachedSymbols != null); 303358"];
1090 [label="CachedSymbols 303359"];
1091 [label="Assembly 303360"];
1092 [label="DocumentationProvider 303361"];
1093 [label="_compilationImportOptions 303362"];
1094 [label="_sourceAssemblySimpleName 303363"];
1095 [label="ImmutableArray<ResolvedReference> referenceMap = ResolveMetadataReferences(\n                        compilation,\n                        assemblyReferencesBySimpleName,\n                        out explicitReferences,\n                        out boundReferenceDirectiveMap,\n                        out boundReferenceDirectives,\n                        out referencedAssemblies,\n                        out modules,\n                        resolutionDiagnostics); 303364"];
1096 [label="RoslynDebug.Assert(identity != null); 303365"];
1097 [label="Debug.Assert(!referencedAssemblies.IsDefault); 303366"];
1098 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 303367"];
1099 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 303368"];
1100 [label="var assemblyBeingBuiltData = new AssemblyDataForAssemblyBeingBuilt(new AssemblyIdentity(name: SimpleAssemblyName, noThrow: true), referencedAssemblies, modules); 303369"];
1101 [label="get\n                    {\n                        return _identity;\n                    } 303370"];
1102 [label="return _identity; 303371"];
1103 [label="var explicitAssemblyData = referencedAssemblies.Insert(0, assemblyBeingBuiltData); 303372"];
1104 [label="var explicitAssemblyData = referencedAssemblies.Insert(0, assemblyBeingBuiltData); 303373"];
1105 [label="bool hasCircularReference; 303374"];
1106 [label="int corLibraryIndex; 303375"];
1107 [label="ImmutableArray<MetadataReference> implicitlyResolvedReferences; 303376"];
1108 [label="implicitlyResolvedReferences 303377"];
1109 [label="ImmutableArray<ResolvedReference> implicitlyResolvedReferenceMap; 303378"];
1110 [label="implicitlyResolvedReferenceMap 303379"];
1111 [label="ImmutableArray<AssemblyData> allAssemblyData; 303380"];
1112 [label="allAssemblyData 303381"];
1113 [label="var temp1 = compilation.ScriptCompilationInfo; 303382"];
1114 [label="var temp2 = temp1 != null ? temp1.PreviousScriptCompilation : null; 303383"];
1115 [label="var temp2 = temp1 != null ? temp1.PreviousScriptCompilation : null; 303384"];
1116 [label="temp1 != null 303385"];
1117 [label="var temp3 = temp2 != null ? temp2.GetBoundReferenceManager() : null; 303386"];
1118 [label="var temp3 = temp2 != null ? temp2.GetBoundReferenceManager() : null; 303387"];
1119 [label="temp2 != null 303388"];
1120 [label="var temp4 = temp3 != null ? temp3.ImplicitReferenceResolutions : null; 303389"];
1121 [label="var temp4 = temp3 != null ? temp3.ImplicitReferenceResolutions : null; 303390"];
1122 [label="temp3 != null 303391"];
1123 [label="var implicitReferenceResolutions = temp4 ?? ImmutableDictionary<AssemblyIdentity, PortableExecutableReference?>.Empty; 303392"];
1124 [label="var implicitReferenceResolutions = temp4 ?? ImmutableDictionary<AssemblyIdentity, PortableExecutableReference?>.Empty; 303393"];
1125 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303394"];
1126 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303395"];
1127 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303396"];
1128 [label="compilation.Options 303397"];
1129 [label="get\n            {\n                return _options;\n            } 303398"];
1130 [label="return _options; 303399"];
1131 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303400"];
1132 [label="compilation.Options 303401"];
1133 [label="get\n            {\n                return _options;\n            } 303402"];
1134 [label="return _options; 303403"];
1135 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303404"];
1136 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303405"];
1137 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303406"];
1138 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303407"];
1139 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303408"];
1140 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303409"];
1141 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303410"];
1142 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303411"];
1143 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303412"];
1144 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303413"];
1145 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303414"];
1146 [label="BoundInputAssembly[] bindingResult = Bind(\n                        compilation,\n                        explicitAssemblyData,\n                        modules,\n                        explicitReferences,\n                        referenceMap,\n                        compilation.Options.MetadataReferenceResolver,\n                        compilation.Options.MetadataImportOptions,\n                        supersedeLowerVersions,\n                        assemblyReferencesBySimpleName,\n                        out allAssemblyData,\n                        out implicitlyResolvedReferences,\n                        out implicitlyResolvedReferenceMap,\n                        ref implicitReferenceResolutions,\n                        resolutionDiagnostics,\n                        out hasCircularReference,\n                        out corLibraryIndex); 303415"];
1147 [label="param BindAssemblyReferences(ImmutableArray<AssemblyData> assemblies) 303416"];
1148 [label="param BindAssemblyReferences(AssemblyIdentityComparer assemblyIdentityComparer) 303417"];
1149 [label="param BindAssemblyReferences(this) 303418"];
1150 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 303419"];
1151 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 303420"];
1152 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 303421"];
1153 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 303422"];
1154 [label="return ResolveReferencedAssemblies(_referencedAssemblies, assemblies, definitionStartIndex: 0, assemblyIdentityComparer: assemblyIdentityComparer); 303423"];
1155 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 303424"];
1156 [label="return _embedInteropTypes; 303425"];
1157 [label="get\n                    {\n                        return _referencedAssemblies;\n                    } 303426"];
1158 [label="return _referencedAssemblies; 303427"];
1159 [label="get\n                    {\n                        return Assembly.ContainsNoPiaLocalTypes();\n                    } 303428"];
1160 [label="return Assembly.ContainsNoPiaLocalTypes(); 303429"];
1161 [label="get\n                    {\n                        return Assembly.DeclaresTheObjectClass;\n                    } 303430"];
1162 [label="return Assembly.DeclaresTheObjectClass; 303431"];
1163 [label="get\n                    {\n                        if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        }\n\n                        return _assemblies;\n                    } 303432"];
1164 [label="if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        } 303433"];
1165 [label="if (_assemblies == null)\n                        {\n                            _assemblies = new List<AssemblySymbol>();\n\n                            // This should be done lazy because while we creating\n                            // instances of this type, creation of new SourceAssembly symbols\n                            // might change the set of available AssemblySymbols.\n                            AddAvailableSymbols(_assemblies);\n                        } 303434"];
1166 [label="_assemblies = new List<AssemblySymbol>(); 303435"];
1167 [label="_assemblies 303436"];
1168 [label="AddAvailableSymbols(_assemblies); 303437"];
1169 [label="AddAvailableSymbols(_assemblies) 303438"];
1170 [label="param AddAvailableSymbols(List<AssemblySymbol> assemblies) 303439"];
1171 [label="param AddAvailableSymbols(this) 303440"];
1172 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 303441"];
1173 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 303442"];
1174 [label="AddAvailableSymbols(_assemblies); 303443"];
1175 [label="return _assemblies; 303444"];
1176 [label="AddAvailableSymbols(_assemblies); 303445"];
1177 [label="AddAvailableSymbols(_assemblies) 303446"];
1178 [label="param AddAvailableSymbols(List<AssemblySymbol> assemblies) 303447"];
1179 [label="param AddAvailableSymbols(this) 303448"];
1180 [label="foreach (var assembly in CachedSymbols)\n                        {\n                            var peAssembly = assembly as PEAssemblySymbol;\n                            if (IsMatchingAssembly(peAssembly))\n                            {\n                                assemblies.Add(peAssembly!);\n                            }\n                        } 303449"];
1181 [label="AddAvailableSymbols(_assemblies); 303450"];
1182 [label="Debug.Assert(bindingResult.Length == allAssemblyData.Length); 303451"];
1183 [label="var references = explicitReferences.AddRange(implicitlyResolvedReferences); 303452"];
1184 [label="referenceMap = referenceMap.AddRange(implicitlyResolvedReferenceMap); 303453"];
1185 [label="referenceMap = referenceMap.AddRange(implicitlyResolvedReferenceMap); 303454"];
1186 [label="Dictionary<MetadataReference, int> referencedAssembliesMap, referencedModulesMap; 303455"];
1187 [label="ImmutableArray<ImmutableArray<string>> aliasesOfReferencedAssemblies; 303456"];
1188 [label="aliasesOfReferencedAssemblies 303457"];
1189 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 303458"];
1190 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 303459"];
1191 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 303460"];
1192 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 303461"];
1193 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 303462"];
1194 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 303463"];
1195 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 303464"];
1196 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 303465"];
1197 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 303466"];
1198 [label="BuildReferencedAssembliesAndModulesMaps(\n                        bindingResult,\n                        references,\n                        referenceMap,\n                        modules.Length,\n                        referencedAssemblies.Length,\n                        assemblyReferencesBySimpleName,\n                        supersedeLowerVersions,\n                        out referencedAssembliesMap,\n                        out referencedModulesMap,\n                        out aliasesOfReferencedAssemblies); 303467"];
1199 [label="var newSymbols = new List<int>(); 303468"];
1200 [label="for (int i = 1; i < bindingResult.Length; i++)\n                    {\n                        ref BoundInputAssembly bound = ref bindingResult[i];\n                        if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        }\n\n                        Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked);\n                    } 303469"];
1201 [label="for (int i = 1; i < bindingResult.Length; i++)\n                    {\n                        ref BoundInputAssembly bound = ref bindingResult[i];\n                        if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        }\n\n                        Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked);\n                    } 303470"];
1202 [label="ref BoundInputAssembly bound = ref bindingResult[i]; 303471"];
1203 [label="if (bound.AssemblySymbol is null)\n                        {\n                            // symbol hasn't been found in the cache, create a new one\n                            bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol();\n                            newSymbols.Add(i);\n                        } 303472"];
1204 [label="bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol(); 303473"];
1205 [label="((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol() 303474"];
1206 [label="param CreateAssemblySymbol(this) 303475"];
1207 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 303476"];
1208 [label="this.IsLinked 303477"];
1209 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 303478"];
1210 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 303479"];
1211 [label="this.EffectiveImportOptions 303480"];
1212 [label="get\n                    {\n                        // We need to import internal members if they might be visible to the compilation being compiled:\n                        if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        }\n\n                        return _compilationImportOptions;\n                    } 303481"];
1213 [label="InternalsMayBeVisibleToCompilation 303482"];
1214 [label="get\n                    {\n                        if (!_internalsVisibleComputed)\n                        {\n                            _internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly);\n                            _internalsVisibleComputed = true;\n                        }\n\n                        return _internalsPotentiallyVisibleToCompilation;\n                    } 303483"];
1215 [label="if (!_internalsVisibleComputed)\n                        {\n                            _internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly);\n                            _internalsVisibleComputed = true;\n                        } 303484"];
1216 [label="_internalsPotentiallyVisibleToCompilation = InternalsMayBeVisibleToAssemblyBeingCompiled(_sourceAssemblySimpleName, Assembly); 303485"];
1217 [label="_internalsPotentiallyVisibleToCompilation 303486"];
1218 [label="_internalsVisibleComputed = true; 303487"];
1219 [label="_internalsVisibleComputed 303488"];
1220 [label="return _internalsPotentiallyVisibleToCompilation; 303489"];
1221 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 303490"];
1222 [label="return _compilationImportOptions; 303491"];
1223 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 303492"];
1224 [label="return new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions); 303493"];
1225 [label="new PEAssemblySymbol(Assembly, DocumentationProvider, this.IsLinked, this.EffectiveImportOptions) 303494"];
1226 [label="param PEAssemblySymbol(PEAssembly assembly) 303495"];
1227 [label="param PEAssemblySymbol(DocumentationProvider documentationProvider) 303496"];
1228 [label="param PEAssemblySymbol(bool isLinked) 303497"];
1229 [label="param PEAssemblySymbol(MetadataImportOptions importOptions) 303498"];
1230 [label="param PEAssemblySymbol(this) 303499"];
1231 [label="param PEAssemblySymbol(this) 303500"];
1232 [label="param MetadataOrSourceAssemblySymbol(this) 303501"];
1233 [label="param MetadataOrSourceAssemblySymbol(this) 303502"];
1234 [label="param NonMissingAssemblySymbol(this) 303503"];
1235 [label="new char[] { '+' } 303504"];
1236 [label="'+' 303505"];
1237 [label="new char[] { '+' } 303506"];
1238 [label="s_nestedTypeNameSeparators = new char[] { '+' } 303507"];
1239 [label="param NonMissingAssemblySymbol(this) 303508"];
1240 [label="param AssemblySymbol(this) 303509"];
1241 [label="param AssemblySymbol(this) 303510"];
1242 [label="param Symbol(this) 303511"];
1243 [label="_lazyISymbol 303512"];
1244 [label="_corLibrary 303513"];
1245 [label="new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 303514"];
1246 [label="_emittedNameToTypeMap =\n            new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 303515"];
1247 [label="_globalNamespace 303516"];
1248 [label="_lazySpecialTypes 303517"];
1249 [label="_cachedSpecialTypes 303518"];
1250 [label="_lazyNativeIntegerTypes 303519"];
1251 [label="_lazyTypeNames 303520"];
1252 [label="_lazyNamespaceNames 303521"];
1253 [label="_lazySpecialTypeMembers 303522"];
1254 [label="_assembliesToWhichInternalAccessHasBeenAnalyzed 303523"];
1255 [label="_assembly 303524"];
1256 [label="_documentationProvider 303525"];
1257 [label="_isLinked 303526"];
1258 [label="Debug.Assert(assembly != null); 303527"];
1259 [label="Debug.Assert(assembly != null); 303528"];
1260 [label="Debug.Assert(documentationProvider != null); 303529"];
1261 [label="Debug.Assert(documentationProvider != null); 303530"];
1262 [label="_assembly 303531"];
1263 [label="_documentationProvider 303532"];
1264 [label="var modules = new ModuleSymbol[assembly.Modules.Length]; 303533"];
1265 [label="for (int i = 0; i < assembly.Modules.Length; i++)\n            {\n                modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i);\n            } 303534"];
1266 [label="for (int i = 0; i < assembly.Modules.Length; i++)\n            {\n                modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i);\n            } 303535"];
1267 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 303536"];
1268 [label="31 303537"];
1269 [label="DefaultTypeMapCapacity = 31 303538"];
1270 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 303539"];
1271 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 303540"];
1272 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 303541"];
1273 [label="modules[i] = new PEModuleSymbol(this, assembly.Modules[i], importOptions, i); 303542"];
1274 [label="new PEModuleSymbol(this, assembly.Modules[i], importOptions, i) 303543"];
1275 [label="param PEModuleSymbol(PEAssemblySymbol assemblySymbol) 303544"];
1276 [label="param PEModuleSymbol(PEModule module) 303545"];
1277 [label="param PEModuleSymbol(MetadataImportOptions importOptions) 303546"];
1278 [label="param PEModuleSymbol(int ordinal) 303547"];
1279 [label="param PEModuleSymbol(this) 303548"];
1280 [label="assemblySymbol 303549"];
1281 [label="module 303550"];
1282 [label="importOptions 303551"];
1283 [label="ordinal 303552"];
1284 [label="param PEModuleSymbol(this) 303553"];
1285 [label="param PEModuleSymbol(AssemblySymbol assemblySymbol) 303554"];
1286 [label="param PEModuleSymbol(PEModule module) 303555"];
1287 [label="param PEModuleSymbol(MetadataImportOptions importOptions) 303556"];
1288 [label="param PEModuleSymbol(int ordinal) 303557"];
1289 [label="param PEModuleSymbol(this) 303558"];
1290 [label="param PEModuleSymbol(this) 303559"];
1291 [label="param NonMissingModuleSymbol(this) 303560"];
1292 [label="param NonMissingModuleSymbol(this) 303561"];
1293 [label="param ModuleSymbol(this) 303562"];
1294 [label="param ModuleSymbol(this) 303563"];
1295 [label="param Symbol(this) 303564"];
1296 [label="_lazyISymbol 303565"];
1297 [label="_moduleReferences 303566"];
1298 [label="_assemblySymbol 303567"];
1299 [label="_ordinal 303568"];
1300 [label="_module 303569"];
1301 [label="_globalNamespace 303570"];
1302 [label="_lazySystemTypeSymbol 303571"];
1303 [label="_lazyEventRegistrationTokenSymbol 303572"];
1304 [label="_lazyEventRegistrationTokenTableSymbol 303573"];
1305 [label="2 303574"];
1306 [label="concurrencyLevel: 2 303575"];
1307 [label="capacity: DefaultTypeMapCapacity 303576"];
1308 [label="new ConcurrentDictionary<TypeDefinitionHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 303577"];
1309 [label="TypeHandleToTypeMap =\n                                    new ConcurrentDictionary<TypeDefinitionHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 303578"];
1310 [label="2 303579"];
1311 [label="concurrencyLevel: 2 303580"];
1312 [label="capacity: DefaultTypeMapCapacity 303581"];
1313 [label="new ConcurrentDictionary<TypeReferenceHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 303582"];
1314 [label="TypeRefHandleToTypeMap =\n                                    new ConcurrentDictionary<TypeReferenceHandle, TypeSymbol>(concurrencyLevel: 2, capacity: DefaultTypeMapCapacity) 303583"];
1315 [label="ImportOptions 303584"];
1316 [label="_lazyTypeNames 303585"];
1317 [label="_lazyNamespaceNames 303586"];
1318 [label="_lazyNullableMemberMetadata 303587"];
1319 [label="Debug.Assert((object)assemblySymbol != null); 303588"];
1320 [label="Debug.Assert((object)assemblySymbol != null); 303589"];
1321 [label="Debug.Assert(module != null); 303590"];
1322 [label="Debug.Assert(module != null); 303591"];
1323 [label="_assemblySymbol 303592"];
1324 [label="_ordinal 303593"];
1325 [label="_module 303594"];
1326 [label="this.ImportOptions 303595"];
1327 [label="_globalNamespace = new PEGlobalNamespaceSymbol(this); 303596"];
1328 [label="_globalNamespace = new PEGlobalNamespaceSymbol(this); 303597"];
1329 [label="new PEGlobalNamespaceSymbol(this) 303598"];
1330 [label="param PEGlobalNamespaceSymbol(PEModuleSymbol moduleSymbol) 303599"];
1331 [label="param PEGlobalNamespaceSymbol(this) 303600"];
1332 [label="param PEGlobalNamespaceSymbol(this) 303601"];
1333 [label="param PENamespaceSymbol(this) 303602"];
1334 [label="param PENamespaceSymbol(this) 303603"];
1335 [label="param NamespaceSymbol(this) 303604"];
1336 [label="param NamespaceSymbol(this) 303605"];
1337 [label="param NamespaceOrTypeSymbol(this) 303606"];
1338 [label="param NamespaceOrTypeSymbol(this) 303607"];
1339 [label="param Symbol(this) 303608"];
1340 [label="_lazyISymbol 303609"];
1341 [label="_lazyAdapter 303610"];
1342 [label="_lazyQualifiedName 303611"];
1343 [label="lazyNamespaces 303612"];
1344 [label="lazyTypes 303613"];
1345 [label="_lazyNoPiaLocalTypes 303614"];
1346 [label="_moduleSymbol 303615"];
1347 [label="Debug.Assert((object)moduleSymbol != null); 303616"];
1348 [label="Debug.Assert((object)moduleSymbol != null); 303617"];
1349 [label="_moduleSymbol 303618"];
1350 [label="_globalNamespace 303619"];
1351 [label="this.MetadataLocation = ImmutableArray.Create<MetadataLocation>(new MetadataLocation(this)); 303620"];
1352 [label="this.MetadataLocation = ImmutableArray.Create<MetadataLocation>(new MetadataLocation(this)); 303621"];
1353 [label="this.MetadataLocation 303622"];
1354 [label="Debug.Assert(ordinal >= 0); 303623"];
1355 [label="Debug.Assert(ordinal >= 0); 303624"];
1356 [label="modules[i] 303625"];
1357 [label="_modules = modules.AsImmutableOrNull(); 303626"];
1358 [label="_modules = modules.AsImmutableOrNull(); 303627"];
1359 [label="_modules 303628"];
1360 [label="_isLinked 303629"];
1361 [label="bound.AssemblySymbol = ((AssemblyDataForMetadataOrCompilation)allAssemblyData[i]).CreateAssemblySymbol(); 303630"];
1362 [label="bound.AssemblySymbol 303631"];
1363 [label="newSymbols.Add(i); 303632"];
1364 [label="newSymbols.Add(i); 303633"];
1365 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 303634"];
1366 [label="allAssemblyData[i].IsLinked 303635"];
1367 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 303636"];
1368 [label="bound.AssemblySymbol.IsLinked 303637"];
1369 [label="get\n            {\n                return _isLinked;\n            } 303638"];
1370 [label="return _isLinked; 303639"];
1371 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 303640"];
1372 [label="return _internalsPotentiallyVisibleToCompilation; 303641"];
1373 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 303642"];
1374 [label="_assembly 303643"];
1375 [label="_documentationProvider 303644"];
1376 [label="Debug.Assert(assembly != null); 303645"];
1377 [label="Debug.Assert(documentationProvider != null); 303646"];
1378 [label="_assemblySymbol 303647"];
1379 [label="_ordinal 303648"];
1380 [label="_module 303649"];
1381 [label="_globalNamespace 303650"];
1382 [label="ImportOptions 303651"];
1383 [label="Debug.Assert((object)assemblySymbol != null); 303652"];
1384 [label="Debug.Assert(module != null); 303653"];
1385 [label="_moduleSymbol 303654"];
1386 [label="Debug.Assert((object)moduleSymbol != null); 303655"];
1387 [label="Debug.Assert(ordinal >= 0); 303656"];
1388 [label="bound.AssemblySymbol 303657"];
1389 [label="newSymbols.Add(i); 303658"];
1390 [label="newSymbols.Add(i); 303659"];
1391 [label="allAssemblyData[i].IsLinked 303660"];
1392 [label="bound.AssemblySymbol.IsLinked 303661"];
1393 [label="get\n            {\n                return _isLinked;\n            } 303662"];
1394 [label="return _isLinked; 303663"];
1395 [label="Debug.Assert(allAssemblyData[i].IsLinked == bound.AssemblySymbol.IsLinked); 303664"];
1396 [label="_assembly 303665"];
1397 [label="_documentationProvider 303666"];
1398 [label="_assemblySymbol 303667"];
1399 [label="_ordinal 303668"];
1400 [label="_module 303669"];
1401 [label="_globalNamespace 303670"];
1402 [label="ImportOptions 303671"];
1403 [label="Debug.Assert((object)assemblySymbol != null); 303672"];
1404 [label="Debug.Assert(module != null); 303673"];
1405 [label="_moduleSymbol 303674"];
1406 [label="Debug.Assert((object)moduleSymbol != null); 303675"];
1407 [label="Debug.Assert(ordinal >= 0); 303676"];
1408 [label="bound.AssemblySymbol 303677"];
1409 [label="newSymbols.Add(i); 303678"];
1410 [label="get\n            {\n                return _isLinked;\n            } 303679"];
1411 [label="return _isLinked; 303680"];
1412 [label="return _internalsPotentiallyVisibleToCompilation; 303681"];
1413 [label="if (InternalsMayBeVisibleToCompilation && _compilationImportOptions == MetadataImportOptions.Public)\n                        {\n                            return MetadataImportOptions.Internal;\n                        } 303682"];
1414 [label="_assembly 303683"];
1415 [label="_documentationProvider 303684"];
1416 [label="Debug.Assert(assembly != null); 303685"];
1417 [label="Debug.Assert(documentationProvider != null); 303686"];
1418 [label="Debug.Assert(ordinal >= 0); 303687"];
1419 [label="bound.AssemblySymbol 303688"];
1420 [label="newSymbols.Add(i); 303689"];
1421 [label="newSymbols.Add(i); 303690"];
1422 [label="bound.AssemblySymbol.IsLinked 303691"];
1423 [label="get\n            {\n                return _isLinked;\n            } 303692"];
1424 [label="return _isLinked; 303693"];
1425 [label="newSymbols.Add(i); 303694"];
1426 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 303695"];
1427 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 303696"];
1428 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 303697"];
1429 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 303698"];
1430 [label="t_assemblyForWhichCurrentThreadIsComputingKeys 303699"];
1431 [label="var assemblySymbol = new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules); 303700"];
1432 [label="new SourceAssemblySymbol(compilation, SimpleAssemblyName, compilation.MakeSourceModuleName(), netModules: modules) 303701"];
1433 [label="param SourceAssemblySymbol(CSharpCompilation compilation) 303702"];
1434 [label="param SourceAssemblySymbol(string assemblySimpleName) 303703"];
1435 [label="param SourceAssemblySymbol(string moduleName) 303704"];
1436 [label="param SourceAssemblySymbol(ImmutableArray<PEModule> netModules) 303705"];
1437 [label="param SourceAssemblySymbol(this) 303706"];
1438 [label="param SourceAssemblySymbol(this) 303707"];
1439 [label="param MetadataOrSourceAssemblySymbol(this) 303708"];
1440 [label="param MetadataOrSourceAssemblySymbol(this) 303709"];
1441 [label="param NonMissingAssemblySymbol(this) 303710"];
1442 [label="param NonMissingAssemblySymbol(this) 303711"];
1443 [label="param AssemblySymbol(this) 303712"];
1444 [label="param AssemblySymbol(this) 303713"];
1445 [label="param Symbol(this) 303714"];
1446 [label="_lazyISymbol 303715"];
1447 [label="_corLibrary 303716"];
1448 [label="new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 303717"];
1449 [label="_emittedNameToTypeMap =\n            new ConcurrentDictionary<MetadataTypeName.Key, NamedTypeSymbol>() 303718"];
1450 [label="_globalNamespace 303719"];
1451 [label="_lazySpecialTypes 303720"];
1452 [label="_cachedSpecialTypes 303721"];
1453 [label="_lazyNativeIntegerTypes 303722"];
1454 [label="_lazyTypeNames 303723"];
1455 [label="_lazyNamespaceNames 303724"];
1456 [label="_lazySpecialTypeMembers 303725"];
1457 [label="_assembliesToWhichInternalAccessHasBeenAnalyzed 303726"];
1458 [label="_compilation 303727"];
1459 [label="lazyAssemblyIdentity 303728"];
1460 [label="_assemblySimpleName 303729"];
1461 [label="_lazyStrongNameKeys 303730"];
1462 [label="_lazySourceAttributesBag 303731"];
1463 [label="_lazyNetModuleAttributesBag 303732"];
1464 [label="_lazyForwardedTypesFromSource 303733"];
1465 [label="_lazyOmittedAttributeIndices 303734"];
1466 [label="_lazyContainsExtensionMethods 303735"];
1467 [label="new ConcurrentDictionary<FieldSymbol, bool>() 303736"];
1468 [label="_unassignedFieldsMap = new ConcurrentDictionary<FieldSymbol, bool>() 303737"];
1469 [label="new ConcurrentSet<FieldSymbol>() 303738"];
1470 [label="_unreadFields = new ConcurrentSet<FieldSymbol>() 303739"];
1471 [label="new ConcurrentSet<TypeSymbol>() 303740"];
1472 [label="TypesReferencedInExternalMethods = new ConcurrentSet<TypeSymbol>() 303741"];
1473 [label="_optimisticallyGrantedInternalsAccess 303742"];
1474 [label="_lazyInternalsVisibleToMap 303743"];
1475 [label="Debug.Assert(compilation != null); 303744"];
1476 [label="Debug.Assert(compilation != null); 303745"];
1477 [label="Debug.Assert(assemblySimpleName != null); 303746"];
1478 [label="Debug.Assert(assemblySimpleName != null); 303747"];
1479 [label="Debug.Assert(!String.IsNullOrWhiteSpace(moduleName)); 303748"];
1480 [label="Debug.Assert(!netModules.IsDefault); 303749"];
1481 [label="_compilation 303750"];
1482 [label="_assemblySimpleName 303751"];
1483 [label="ArrayBuilder<ModuleSymbol> moduleBuilder = new ArrayBuilder<ModuleSymbol>(1 + netModules.Length); 303752"];
1484 [label="ArrayBuilder<ModuleSymbol> moduleBuilder = new ArrayBuilder<ModuleSymbol>(1 + netModules.Length); 303753"];
1485 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 303754"];
1486 [label="compilation.Declarations 303755"];
1487 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 303756"];
1488 [label="return _syntaxAndDeclarations.GetLazyState().DeclarationTable; 303757"];
1489 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 303758"];
1490 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 303759"];
1491 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 303760"];
1492 [label="new SourceModuleSymbol(this, compilation.Declarations, moduleName) 303761"];
1493 [label="param SourceModuleSymbol(SourceAssemblySymbol assemblySymbol) 303762"];
1494 [label="param SourceModuleSymbol(DeclarationTable declarations) 303763"];
1495 [label="param SourceModuleSymbol(string moduleName) 303764"];
1496 [label="param SourceModuleSymbol(this) 303765"];
1497 [label="param SourceModuleSymbol(this) 303766"];
1498 [label="param NonMissingModuleSymbol(this) 303767"];
1499 [label="param NonMissingModuleSymbol(this) 303768"];
1500 [label="param ModuleSymbol(this) 303769"];
1501 [label="param ModuleSymbol(this) 303770"];
1502 [label="param Symbol(this) 303771"];
1503 [label="_lazyISymbol 303772"];
1504 [label="_moduleReferences 303773"];
1505 [label="_assemblySymbol 303774"];
1506 [label="_lazyContainsExplicitDefinitionOfNoPiaLocalTypes = ThreeState.Unknown 303775"];
1507 [label="_sources 303776"];
1508 [label="_lazyCustomAttributesBag 303777"];
1509 [label="_globalNamespace 303778"];
1510 [label="_hasBadAttributes 303779"];
1511 [label="_name 303780"];
1512 [label="Debug.Assert((object)assemblySymbol != null); 303781"];
1513 [label="Debug.Assert((object)assemblySymbol != null); 303782"];
1514 [label="_assemblySymbol 303783"];
1515 [label="_sources 303784"];
1516 [label="_name 303785"];
1517 [label="moduleBuilder.Add(new SourceModuleSymbol(this, compilation.Declarations, moduleName)); 303786"];
1518 [label="compilation.Options 303787"];
1519 [label="get\n            {\n                return _options;\n            } 303788"];
1520 [label="return _options; 303789"];
1521 [label="var importOptions = (compilation.Options.MetadataImportOptions == MetadataImportOptions.All) ?\n                MetadataImportOptions.All : MetadataImportOptions.Internal; 303790"];
1522 [label="(compilation.Options.MetadataImportOptions == MetadataImportOptions.All) 303791"];
1523 [label="foreach (PEModule netModule in netModules)\n            {\n                moduleBuilder.Add(new PEModuleSymbol(this, netModule, importOptions, moduleBuilder.Count));\n                // SetReferences will be called later by the ReferenceManager (in CreateSourceAssemblyFullBind for \n                // a fresh manager, in CreateSourceAssemblyReuseData for a reused one).\n            } 303792"];
1524 [label="_modules = moduleBuilder.ToImmutableAndFree(); 303793"];
1525 [label="_modules 303794"];
1526 [label="compilation.Options 303795"];
1527 [label="get\n            {\n                return _options;\n            } 303796"];
1528 [label="return _options; 303797"];
1529 [label="if (!compilation.Options.CryptoPublicKey.IsEmpty)\n            {\n                // Private key is not necessary for assembly identity, only when emitting.  For this reason, the private key can remain null.\n                _lazyStrongNameKeys = StrongNameKeys.Create(compilation.Options.CryptoPublicKey, privateKey: null, hasCounterSignature: false, MessageProvider.Instance);\n            } 303798"];
1530 [label="if (!compilation.Options.CryptoPublicKey.IsEmpty)\n            {\n                // Private key is not necessary for assembly identity, only when emitting.  For this reason, the private key can remain null.\n                _lazyStrongNameKeys = StrongNameKeys.Create(compilation.Options.CryptoPublicKey, privateKey: null, hasCounterSignature: false, MessageProvider.Instance);\n            } 303799"];
1531 [label="AssemblySymbol? corLibrary; 303800"];
1532 [label="if (corLibraryIndex == 0)\n                    {\n                        corLibrary = assemblySymbol;\n                    }\n                    else if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 303801"];
1533 [label="if (corLibraryIndex == 0)\n                    {\n                        corLibrary = assemblySymbol;\n                    }\n                    else if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 303802"];
1534 [label="if (corLibraryIndex > 0)\n                    {\n                        corLibrary = bindingResult[corLibraryIndex].AssemblySymbol;\n                    }\n                    else\n                    {\n                        corLibrary = MissingCorLibrarySymbol.Instance;\n                    } 303803"];
1535 [label="corLibrary = bindingResult[corLibraryIndex].AssemblySymbol; 303804"];
1536 [label="assemblySymbol.SetCorLibrary(corLibrary); 303805"];
1537 [label="assemblySymbol.SetCorLibrary(corLibrary) 303806"];
1538 [label="param SetCorLibrary(AssemblySymbol corLibrary) 303807"];
1539 [label="param SetCorLibrary(this) 303808"];
1540 [label="Debug.Assert((object)_corLibrary == null); 303809"];
1541 [label="Debug.Assert((object)_corLibrary == null); 303810"];
1542 [label="_corLibrary 303811"];
1543 [label="assemblySymbol.SetCorLibrary(corLibrary); 303812"];
1544 [label="Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies = null; 303813"];
1545 [label="int totalReferencedAssemblyCount = allAssemblyData.Length - 1; 303814"];
1546 [label="int totalReferencedAssemblyCount = allAssemblyData.Length - 1; 303815"];
1547 [label="ImmutableArray<ModuleReferences<AssemblySymbol>> moduleReferences; 303816"];
1548 [label="moduleReferences 303817"];
1549 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 303818"];
1550 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 303819"];
1551 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 303820"];
1552 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 303821"];
1553 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 303822"];
1554 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 303823"];
1555 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences) 303824"];
1556 [label="param SetupReferencesForSourceAssembly(SourceAssemblySymbol sourceAssembly) 303825"];
1557 [label="param SetupReferencesForSourceAssembly(ImmutableArray<PEModule> modules) 303826"];
1558 [label="param SetupReferencesForSourceAssembly(int totalReferencedAssemblyCount) 303827"];
1559 [label="param SetupReferencesForSourceAssembly(BoundInputAssembly[] bindingResult) 303828"];
1560 [label="param SetupReferencesForSourceAssembly(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 303829"];
1561 [label="param SetupReferencesForSourceAssembly(out ImmutableArray<ModuleReferences<AssemblySymbol>> moduleReferences) 303830"];
1562 [label="sourceAssembly.Modules 303831"];
1563 [label="get\n            {\n                return _modules;\n            } 303832"];
1564 [label="return _modules; 303833"];
1565 [label="var moduleSymbols = sourceAssembly.Modules; 303834"];
1566 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 303835"];
1567 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 303836"];
1568 [label="Debug.Assert(moduleSymbols.Length == 1 + modules.Length); 303837"];
1569 [label="var moduleReferencesBuilder = (moduleSymbols.Length > 1) ? ArrayBuilder<ModuleReferences<AssemblySymbol>>.GetInstance() : null; 303838"];
1570 [label="var moduleReferencesBuilder = (moduleSymbols.Length > 1) ? ArrayBuilder<ModuleReferences<AssemblySymbol>>.GetInstance() : null; 303839"];
1571 [label="(moduleSymbols.Length > 1) 303840"];
1572 [label="int refsUsed = 0; 303841"];
1573 [label="for (int moduleIndex = 0; moduleIndex < moduleSymbols.Length; moduleIndex++)\n                {\n                    int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length;\n\n                    var identities = new AssemblyIdentity[refsCount];\n                    var symbols = new AssemblySymbol[refsCount];\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n\n                    for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    }\n\n                    var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty());\n\n                    if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    }\n\n                    moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly);\n\n                    refsUsed += refsCount;\n                } 303842"];
1574 [label="for (int moduleIndex = 0; moduleIndex < moduleSymbols.Length; moduleIndex++)\n                {\n                    int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length;\n\n                    var identities = new AssemblyIdentity[refsCount];\n                    var symbols = new AssemblySymbol[refsCount];\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n\n                    for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    }\n\n                    var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty());\n\n                    if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    }\n\n                    moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly);\n\n                    refsUsed += refsCount;\n                } 303843"];
1575 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 303844"];
1576 [label="(moduleIndex == 0) 303845"];
1577 [label="int refsCount = (moduleIndex == 0) ? totalReferencedAssemblyCount : modules[moduleIndex - 1].ReferencedAssemblies.Length; 303846"];
1578 [label="var identities = new AssemblyIdentity[refsCount]; 303847"];
1579 [label="var symbols = new AssemblySymbol[refsCount]; 303848"];
1580 [label="ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null; 303849"];
1581 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 303850"];
1582 [label="for (int k = 0; k < refsCount; k++)\n                    {\n                        Debug.Assert(bindingResult[0].ReferenceBinding is object);\n                        var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k];\n                        Debug.Assert(boundReference.ReferenceIdentity is object);\n\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        }\n\n                        identities[k] = boundReference.ReferenceIdentity;\n                    } 303851"];
1583 [label="Debug.Assert(bindingResult[0].ReferenceBinding is object); 303852"];
1584 [label="Debug.Assert(bindingResult[0].ReferenceBinding is object); 303853"];
1585 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 303854"];
1586 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 303855"];
1587 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 303856"];
1588 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 303857"];
1589 [label="Debug.Assert(boundReference.ReferenceIdentity is object); 303858"];
1590 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        } 303859"];
1591 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 303860"];
1592 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 303861"];
1593 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 303862"];
1594 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 303863"];
1595 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 303864"];
1596 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 303865"];
1597 [label="param GetAssemblyDefinitionSymbol(ref ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies) 303866"];
1598 [label="Debug.Assert(referenceBinding.IsBound); 303867"];
1599 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 303868"];
1600 [label="var assembly = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol; 303869"];
1601 [label="Debug.Assert(assembly is object); 303870"];
1602 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 303871"];
1603 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 303872"];
1604 [label="return assembly; 303873"];
1605 [label="symbols[k] 303874"];
1606 [label="identities[k] 303875"];
1607 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 303876"];
1608 [label="var boundReference = bindingResult[0].ReferenceBinding![refsUsed + k]; 303877"];
1609 [label="Debug.Assert(boundReference.ReferenceIdentity is object); 303878"];
1610 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(boundReference.ReferenceIdentity, ref missingAssemblies);\n                        } 303879"];
1611 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 303880"];
1612 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 303881"];
1613 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 303882"];
1614 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 303883"];
1615 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 303884"];
1616 [label="Debug.Assert(referenceBinding.IsBound); 303885"];
1617 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 303886"];
1618 [label="var assembly = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol; 303887"];
1619 [label="Debug.Assert(assembly is object); 303888"];
1620 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 303889"];
1621 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 303890"];
1622 [label="return assembly; 303891"];
1623 [label="symbols[k] 303892"];
1624 [label="identities[k] 303893"];
1625 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 303894"];
1626 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 303895"];
1627 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 303896"];
1628 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 303897"];
1629 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 303898"];
1630 [label="var references = new ModuleReferences<AssemblySymbol>(\n                        identities.AsImmutableOrNull(),\n                        symbols.AsImmutableOrNull(),\n                        unifiedAssemblies.AsImmutableOrEmpty()); 303899"];
1631 [label="if (moduleIndex > 0)\n                    {\n                        moduleReferencesBuilder!.Add(references);\n                    } 303900"];
1632 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 303901"];
1633 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 303902"];
1634 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 303903"];
1635 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly) 303904"];
1636 [label="param SetReferences(ModuleReferences<AssemblySymbol> moduleReferences) 303905"];
1637 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 303906"];
1638 [label="param SetReferences(this) 303907"];
1639 [label="Debug.Assert(moduleReferences != null); 303908"];
1640 [label="Debug.Assert(moduleReferences != null); 303909"];
1641 [label="AssertReferencesUninitialized() 303910"];
1642 [label="param AssertReferencesUninitialized(this) 303911"];
1643 [label="Debug.Assert(_moduleReferences == null); 303912"];
1644 [label="Debug.Assert(_moduleReferences == null); 303913"];
1645 [label="AssertReferencesUninitialized(); 303914"];
1646 [label="_moduleReferences 303915"];
1647 [label="moduleSymbols[moduleIndex].SetReferences(references, sourceAssembly); 303916"];
1648 [label="refsUsed += refsCount; 303917"];
1649 [label="moduleReferences = moduleReferencesBuilder.ToImmutableOrEmptyAndFree(); 303918"];
1650 [label="SetupReferencesForSourceAssembly(\n                        assemblySymbol,\n                        modules,\n                        totalReferencedAssemblyCount,\n                        bindingResult,\n                        ref missingAssemblies,\n                        out moduleReferences); 303919"];
1651 [label="if (newSymbols.Count > 0)\n                    {\n                        // Only if we detected that a referenced assembly refers to the assembly being built\n                        // we allow the references to get a hold of the assembly being built.\n                        if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        }\n\n                        InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies);\n                    } 303920"];
1652 [label="if (newSymbols.Count > 0)\n                    {\n                        // Only if we detected that a referenced assembly refers to the assembly being built\n                        // we allow the references to get a hold of the assembly being built.\n                        if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        }\n\n                        InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies);\n                    } 303921"];
1653 [label="if (hasCircularReference)\n                        {\n                            bindingResult[0].AssemblySymbol = assemblySymbol;\n                        } 303922"];
1654 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 303923"];
1655 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 303924"];
1656 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 303925"];
1657 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 303926"];
1658 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies) 303927"];
1659 [label="param InitializeNewSymbols(List<int> newSymbols) 303928"];
1660 [label="param InitializeNewSymbols(SourceAssemblySymbol sourceAssembly) 303929"];
1661 [label="param InitializeNewSymbols(ImmutableArray<AssemblyData> assemblies) 303930"];
1662 [label="param InitializeNewSymbols(BoundInputAssembly[] bindingResult) 303931"];
1663 [label="param InitializeNewSymbols(Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 303932"];
1664 [label="Debug.Assert(newSymbols.Count > 0); 303933"];
1665 [label="Debug.Assert(newSymbols.Count > 0); 303934"];
1666 [label="sourceAssembly.CorLibrary 303935"];
1667 [label="get\n            {\n                return _corLibrary;\n            } 303936"];
1668 [label="return _corLibrary; 303937"];
1669 [label="var corLibrary = sourceAssembly.CorLibrary; 303938"];
1670 [label="RoslynDebug.Assert((object)corLibrary != null); 303939"];
1671 [label="RoslynDebug.Assert((object)corLibrary != null); 303940"];
1672 [label="foreach (int i in newSymbols)\n                {\n                    var compilationData = assemblies[i] as AssemblyDataForCompilation;\n\n                    if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                } 303941"];
1673 [label="var compilationData = assemblies[i] as AssemblyDataForCompilation; 303942"];
1674 [label="if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    } 303943"];
1675 [label="if (compilationData != null)\n                    {\n                        SetupReferencesForRetargetingAssembly(bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly);\n                    } 303944"];
1676 [label="var fileData = (AssemblyDataForFile)assemblies[i]; 303945"];
1677 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 303946"];
1678 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 303947"];
1679 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 303948"];
1680 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 303949"];
1681 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 303950"];
1682 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly) 303951"];
1683 [label="param SetupReferencesForFileAssembly(AssemblyDataForFile fileData) 303952"];
1684 [label="param SetupReferencesForFileAssembly(BoundInputAssembly[] bindingResult) 303953"];
1685 [label="param SetupReferencesForFileAssembly(ref BoundInputAssembly currentBindingResult) 303954"];
1686 [label="param SetupReferencesForFileAssembly(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 303955"];
1687 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 303956"];
1688 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 303957"];
1689 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 303958"];
1690 [label="var portableExecutableAssemblySymbol = (PEAssemblySymbol)currentBindingResult.AssemblySymbol; 303959"];
1691 [label="portableExecutableAssemblySymbol.Modules 303960"];
1692 [label="get\n            {\n                return _modules;\n            } 303961"];
1693 [label="return _modules; 303962"];
1694 [label="ImmutableArray<ModuleSymbol> modules = portableExecutableAssemblySymbol.Modules; 303963"];
1695 [label="int moduleCount = modules.Length; 303964"];
1696 [label="int refsUsed = 0; 303965"];
1697 [label="for (int j = 0; j < moduleCount; j++)\n                {\n                    int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j];\n                    var identities = new AssemblyIdentity[moduleReferenceCount];\n                    var symbols = new AssemblySymbol[moduleReferenceCount];\n\n                    fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount);\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n                    for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    }\n\n                    var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty());\n                    modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly);\n\n                    refsUsed += moduleReferenceCount;\n                } 303966"];
1698 [label="for (int j = 0; j < moduleCount; j++)\n                {\n                    int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j];\n                    var identities = new AssemblyIdentity[moduleReferenceCount];\n                    var symbols = new AssemblySymbol[moduleReferenceCount];\n\n                    fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount);\n\n                    ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null;\n                    for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    }\n\n                    var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty());\n                    modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly);\n\n                    refsUsed += moduleReferenceCount;\n                } 303967"];
1699 [label="int moduleReferenceCount = fileData.Assembly.ModuleReferenceCounts[j]; 303968"];
1700 [label="var identities = new AssemblyIdentity[moduleReferenceCount]; 303969"];
1701 [label="var symbols = new AssemblySymbol[moduleReferenceCount]; 303970"];
1702 [label="fileData.AssemblyReferences 303971"];
1703 [label="get\n                    {\n                        return _referencedAssemblies;\n                    } 303972"];
1704 [label="return _referencedAssemblies; 303973"];
1705 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 303974"];
1706 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 303975"];
1707 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 303976"];
1708 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 303977"];
1709 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 303978"];
1710 [label="fileData.AssemblyReferences.CopyTo(refsUsed, identities, 0, moduleReferenceCount); 303979"];
1711 [label="ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies = null; 303980"];
1712 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 303981"];
1713 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 303982"];
1714 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 303983"];
1715 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 303984"];
1716 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 303985"];
1717 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 303986"];
1718 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 303987"];
1719 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 303988"];
1720 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 303989"];
1721 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 303990"];
1722 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly) 303991"];
1723 [label="param SetReferences(ModuleReferences<AssemblySymbol> moduleReferences) 303992"];
1724 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 303993"];
1725 [label="param SetReferences(this) 303994"];
1726 [label="Debug.Assert(moduleReferences != null); 303995"];
1727 [label="Debug.Assert(moduleReferences != null); 303996"];
1728 [label="AssertReferencesUninitialized() 303997"];
1729 [label="param AssertReferencesUninitialized(this) 303998"];
1730 [label="Debug.Assert(_moduleReferences == null); 303999"];
1731 [label="Debug.Assert(_moduleReferences == null); 304000"];
1732 [label="AssertReferencesUninitialized(); 304001"];
1733 [label="modules[j].SetReferences(moduleReferences, sourceAssemblyDebugOnly); 304002"];
1734 [label="refsUsed += moduleReferenceCount; 304003"];
1735 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 304004"];
1736 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 304005"];
1737 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 304006"];
1738 [label="param SetupReferencesForFileAssembly(BoundInputAssembly[] bindingResult) 304007"];
1739 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 304008"];
1740 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 304009"];
1741 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 304010"];
1742 [label="for (int k = 0; k < moduleReferenceCount; k++)\n                    {\n                        var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k];\n                        if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        }\n                    } 304011"];
1743 [label="var boundReference = currentBindingResult.ReferenceBinding[refsUsed + k]; 304012"];
1744 [label="if (boundReference.IsBound)\n                        {\n                            symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies);\n                        }\n                        else\n                        {\n                            symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies);\n                        } 304013"];
1745 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 304014"];
1746 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 304015"];
1747 [label="symbols[k] = GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies); 304016"];
1748 [label="GetAssemblyDefinitionSymbol(bindingResult, boundReference, ref unifiedAssemblies) 304017"];
1749 [label="param GetAssemblyDefinitionSymbol(BoundInputAssembly[] bindingResult) 304018"];
1750 [label="param GetAssemblyDefinitionSymbol(AssemblyReferenceBinding referenceBinding) 304019"];
1751 [label="param GetAssemblyDefinitionSymbol(ref ArrayBuilder<UnifiedAssembly<AssemblySymbol>>? unifiedAssemblies) 304020"];
1752 [label="Debug.Assert(referenceBinding.IsBound); 304021"];
1753 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 304022"];
1754 [label="Debug.Assert(assembly is object); 304023"];
1755 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 304024"];
1756 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 304025"];
1757 [label="symbols[k] 304026"];
1758 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 304027"];
1759 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 304028"];
1760 [label="GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies) 304029"];
1761 [label="param GetOrAddMissingAssemblySymbol(AssemblyIdentity assemblyIdentity) 304030"];
1762 [label="param GetOrAddMissingAssemblySymbol(ref Dictionary<AssemblyIdentity, MissingAssemblySymbol>? missingAssemblies) 304031"];
1763 [label="MissingAssemblySymbol? missingAssembly; 304032"];
1764 [label="if (missingAssemblies == null)\n                {\n                    missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>();\n                }\n                else if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 304033"];
1765 [label="if (missingAssemblies == null)\n                {\n                    missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>();\n                }\n                else if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 304034"];
1766 [label="missingAssemblies = new Dictionary<AssemblyIdentity, MissingAssemblySymbol>(); 304035"];
1767 [label="missingAssembly = new MissingAssemblySymbol(assemblyIdentity); 304036"];
1768 [label="missingAssembly = new MissingAssemblySymbol(assemblyIdentity); 304037"];
1769 [label="new MissingAssemblySymbol(assemblyIdentity) 304038"];
1770 [label="param MissingAssemblySymbol(AssemblyIdentity identity) 304039"];
1771 [label="param MissingAssemblySymbol(this) 304040"];
1772 [label="param MissingAssemblySymbol(this) 304041"];
1773 [label="identity 304042"];
1774 [label="moduleSymbol 304043"];
1775 [label="Debug.Assert(identity != null); 304044"];
1776 [label="Debug.Assert(identity != null); 304045"];
1777 [label="this.identity 304046"];
1778 [label="moduleSymbol = new MissingModuleSymbol(this, 0); 304047"];
1779 [label="moduleSymbol = new MissingModuleSymbol(this, 0); 304048"];
1780 [label="new MissingModuleSymbol(this, 0) 304049"];
1781 [label="param MissingModuleSymbol(AssemblySymbol assembly) 304050"];
1782 [label="param MissingModuleSymbol(int ordinal) 304051"];
1783 [label="param MissingModuleSymbol(this) 304052"];
1784 [label="param MissingModuleSymbol(this) 304053"];
1785 [label="assembly 304054"];
1786 [label="ordinal 304055"];
1787 [label="globalNamespace 304056"];
1788 [label="Debug.Assert((object)assembly != null); 304057"];
1789 [label="Debug.Assert((object)assembly != null); 304058"];
1790 [label="Debug.Assert(ordinal >= -1); 304059"];
1791 [label="Debug.Assert(ordinal >= -1); 304060"];
1792 [label="this.assembly 304061"];
1793 [label="this.ordinal 304062"];
1794 [label="globalNamespace = new MissingNamespaceSymbol(this); 304063"];
1795 [label="globalNamespace = new MissingNamespaceSymbol(this); 304064"];
1796 [label="new MissingNamespaceSymbol(this) 304065"];
1797 [label="param MissingNamespaceSymbol(MissingModuleSymbol containingModule) 304066"];
1798 [label="param MissingNamespaceSymbol(this) 304067"];
1799 [label="param MissingNamespaceSymbol(this) 304068"];
1800 [label="_name 304069"];
1801 [label="_containingSymbol 304070"];
1802 [label="Debug.Assert((object)containingModule != null); 304071"];
1803 [label="Debug.Assert((object)containingModule != null); 304072"];
1804 [label="_containingSymbol 304073"];
1805 [label="_name 304074"];
1806 [label="globalNamespace 304075"];
1807 [label="moduleSymbol 304076"];
1808 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 304077"];
1809 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 304078"];
1810 [label="missingAssemblies.Add(assemblyIdentity, missingAssembly); 304079"];
1811 [label="return missingAssembly; 304080"];
1812 [label="symbols[k] = GetOrAddMissingAssemblySymbol(identities[k], ref missingAssemblies); 304081"];
1813 [label="symbols[k] 304082"];
1814 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 304083"];
1815 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 304084"];
1816 [label="if (missingAssemblies.TryGetValue(assemblyIdentity, out missingAssembly))\n                {\n                    return missingAssembly;\n                } 304085"];
1817 [label="var moduleReferences = new ModuleReferences<AssemblySymbol>(identities.AsImmutableOrNull(), symbols.AsImmutableOrNull(), unifiedAssemblies.AsImmutableOrEmpty()); 304086"];
1818 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 304087"];
1819 [label="Debug.Assert(moduleReferences != null); 304088"];
1820 [label="Debug.Assert(moduleReferences != null); 304089"];
1821 [label="AssertReferencesUninitialized() 304090"];
1822 [label="param AssertReferencesUninitialized(this) 304091"];
1823 [label="Debug.Assert(_moduleReferences == null); 304092"];
1824 [label="Debug.Assert(_moduleReferences == null); 304093"];
1825 [label="AssertReferencesUninitialized(); 304094"];
1826 [label="refsUsed += moduleReferenceCount; 304095"];
1827 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 304096"];
1828 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 304097"];
1829 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 304098"];
1830 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 304099"];
1831 [label="Debug.Assert(referenceBinding.IsBound); 304100"];
1832 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 304101"];
1833 [label="Debug.Assert(assembly is object); 304102"];
1834 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 304103"];
1835 [label="return missingAssembly; 304104"];
1836 [label="identity 304105"];
1837 [label="moduleSymbol 304106"];
1838 [label="Debug.Assert(identity != null); 304107"];
1839 [label="Debug.Assert(identity != null); 304108"];
1840 [label="assembly 304109"];
1841 [label="ordinal 304110"];
1842 [label="globalNamespace 304111"];
1843 [label="Debug.Assert((object)assembly != null); 304112"];
1844 [label="Debug.Assert((object)assembly != null); 304113"];
1845 [label="Debug.Assert(ordinal >= -1); 304114"];
1846 [label="Debug.Assert(ordinal >= -1); 304115"];
1847 [label="_name 304116"];
1848 [label="_containingSymbol 304117"];
1849 [label="Debug.Assert((object)containingModule != null); 304118"];
1850 [label="Debug.Assert((object)containingModule != null); 304119"];
1851 [label="identity 304120"];
1852 [label="moduleSymbol 304121"];
1853 [label="Debug.Assert(identity != null); 304122"];
1854 [label="assembly 304123"];
1855 [label="ordinal 304124"];
1856 [label="globalNamespace 304125"];
1857 [label="Debug.Assert((object)assembly != null); 304126"];
1858 [label="Debug.Assert(ordinal >= -1); 304127"];
1859 [label="_name 304128"];
1860 [label="_containingSymbol 304129"];
1861 [label="Debug.Assert((object)containingModule != null); 304130"];
1862 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 304131"];
1863 [label="Debug.Assert(moduleReferences != null); 304132"];
1864 [label="Debug.Assert(moduleReferences != null); 304133"];
1865 [label="AssertReferencesUninitialized() 304134"];
1866 [label="param AssertReferencesUninitialized(this) 304135"];
1867 [label="Debug.Assert(_moduleReferences == null); 304136"];
1868 [label="Debug.Assert(_moduleReferences == null); 304137"];
1869 [label="AssertReferencesUninitialized(); 304138"];
1870 [label="refsUsed += moduleReferenceCount; 304139"];
1871 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 304140"];
1872 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 304141"];
1873 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 304142"];
1874 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 304143"];
1875 [label="Debug.Assert(referenceBinding.IsBound); 304144"];
1876 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 304145"];
1877 [label="Debug.Assert(assembly is object); 304146"];
1878 [label="if (referenceBinding.VersionDifference != 0)\n                {\n                    if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    }\n\n                    unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity));\n                } 304147"];
1879 [label="if (unifiedAssemblies == null)\n                    {\n                        unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>();\n                    } 304148"];
1880 [label="unifiedAssemblies = new ArrayBuilder<UnifiedAssembly<AssemblySymbol>>(); 304149"];
1881 [label="unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity)); 304150"];
1882 [label="unifiedAssemblies.Add(new UnifiedAssembly<AssemblySymbol>(assembly, referenceBinding.ReferenceIdentity)); 304151"];
1883 [label="identity 304152"];
1884 [label="moduleSymbol 304153"];
1885 [label="Debug.Assert(identity != null); 304154"];
1886 [label="assembly 304155"];
1887 [label="ordinal 304156"];
1888 [label="globalNamespace 304157"];
1889 [label="Debug.Assert((object)assembly != null); 304158"];
1890 [label="Debug.Assert(ordinal >= -1); 304159"];
1891 [label="_name 304160"];
1892 [label="_containingSymbol 304161"];
1893 [label="Debug.Assert((object)containingModule != null); 304162"];
1894 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 304163"];
1895 [label="Debug.Assert(moduleReferences != null); 304164"];
1896 [label="Debug.Assert(moduleReferences != null); 304165"];
1897 [label="AssertReferencesUninitialized() 304166"];
1898 [label="param AssertReferencesUninitialized(this) 304167"];
1899 [label="Debug.Assert(_moduleReferences == null); 304168"];
1900 [label="Debug.Assert(_moduleReferences == null); 304169"];
1901 [label="AssertReferencesUninitialized(); 304170"];
1902 [label="refsUsed += moduleReferenceCount; 304171"];
1903 [label="SetupReferencesForFileAssembly(fileData, bindingResult, ref bindingResult[i], ref missingAssemblies, sourceAssemblyDebugOnly: sourceAssembly); 304172"];
1904 [label="param SetupReferencesForFileAssembly(SourceAssemblySymbol sourceAssemblyDebugOnly) 304173"];
1905 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 304174"];
1906 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 304175"];
1907 [label="Debug.Assert(referenceBinding.IsBound); 304176"];
1908 [label="Debug.Assert(referenceBinding.ReferenceIdentity is object); 304177"];
1909 [label="Debug.Assert(assembly is object); 304178"];
1910 [label="param SetReferences(SourceAssemblySymbol originatingSourceAssemblyDebugOnly = null) 304179"];
1911 [label="Debug.Assert(moduleReferences != null); 304180"];
1912 [label="AssertReferencesUninitialized() 304181"];
1913 [label="param AssertReferencesUninitialized(this) 304182"];
1914 [label="Debug.Assert(_moduleReferences == null); 304183"];
1915 [label="Debug.Assert(_moduleReferences == null); 304184"];
1916 [label="AssertReferencesUninitialized(); 304185"];
1917 [label="refsUsed += moduleReferenceCount; 304186"];
1918 [label="var linkedReferencedAssembliesBuilder = ArrayBuilder<AssemblySymbol>.GetInstance(); 304187"];
1919 [label="sourceAssembly.Modules 304188"];
1920 [label="get\n            {\n                return _modules;\n            } 304189"];
1921 [label="return _modules; 304190"];
1922 [label="var noPiaResolutionAssemblies = sourceAssembly.Modules[0].GetReferencedAssemblySymbols(); 304191"];
1923 [label="var noPiaResolutionAssemblies = sourceAssembly.Modules[0].GetReferencedAssemblySymbols(); 304192"];
1924 [label="sourceAssembly.Modules[0].GetReferencedAssemblySymbols() 304193"];
1925 [label="param GetReferencedAssemblySymbols(this) 304194"];
1926 [label="AssertReferencesInitialized() 304195"];
1927 [label="param AssertReferencesInitialized(this) 304196"];
1928 [label="Debug.Assert(_moduleReferences != null); 304197"];
1929 [label="Debug.Assert(_moduleReferences != null); 304198"];
1930 [label="AssertReferencesInitialized(); 304199"];
1931 [label="return _moduleReferences.Symbols; 304200"];
1932 [label="foreach (int i in newSymbols)\n                {\n                    ref BoundInputAssembly currentBindingResult = ref bindingResult[i];\n                    Debug.Assert(currentBindingResult.AssemblySymbol is object);\n                    Debug.Assert(currentBindingResult.ReferenceBinding is object);\n\n                    if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    }\n\n                    // Setup linked referenced assemblies.\n                    linkedReferencedAssembliesBuilder.Clear();\n\n                    if (assemblies[i].IsLinked)\n                    {\n                        linkedReferencedAssembliesBuilder.Add(currentBindingResult.AssemblySymbol);\n                    }\n\n                    foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    }\n\n                    if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    }\n\n                    currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary);\n                } 304201"];
1933 [label="ref BoundInputAssembly currentBindingResult = ref bindingResult[i]; 304202"];
1934 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 304203"];
1935 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 304204"];
1936 [label="if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    } 304205"];
1937 [label="assemblies[i].ContainsNoPiaLocalTypes 304206"];
1938 [label="get\n                    {\n                        return Assembly.ContainsNoPiaLocalTypes();\n                    } 304207"];
1939 [label="linkedReferencedAssembliesBuilder.Clear(); 304208"];
1940 [label="if (assemblies[i].IsLinked)\n                    {\n                        linkedReferencedAssembliesBuilder.Add(currentBindingResult.AssemblySymbol);\n                    } 304209"];
1941 [label="assemblies[i].IsLinked 304210"];
1942 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 304211"];
1943 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 304212"];
1944 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 304213"];
1945 [label="if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    } 304214"];
1946 [label="if (linkedReferencedAssembliesBuilder.Count > 0)\n                    {\n                        linkedReferencedAssembliesBuilder.RemoveDuplicates();\n                        currentBindingResult.AssemblySymbol.SetLinkedReferencedAssemblies(linkedReferencedAssembliesBuilder.ToImmutable());\n                    } 304215"];
1947 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary); 304216"];
1948 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary) 304217"];
1949 [label="param SetCorLibrary(AssemblySymbol corLibrary) 304218"];
1950 [label="param SetCorLibrary(this) 304219"];
1951 [label="Debug.Assert((object)_corLibrary == null); 304220"];
1952 [label="Debug.Assert((object)_corLibrary == null); 304221"];
1953 [label="_corLibrary 304222"];
1954 [label="currentBindingResult.AssemblySymbol.SetCorLibrary(corLibrary); 304223"];
1955 [label="ref BoundInputAssembly currentBindingResult = ref bindingResult[i]; 304224"];
1956 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 304225"];
1957 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 304226"];
1958 [label="if (assemblies[i].ContainsNoPiaLocalTypes)\n                    {\n                        currentBindingResult.AssemblySymbol.SetNoPiaResolutionAssemblies(noPiaResolutionAssemblies);\n                    } 304227"];
1959 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 304228"];
1960 [label="foreach (var referenceBinding in currentBindingResult.ReferenceBinding)\n                    {\n                        if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        }\n                    } 304229"];
1961 [label="if (referenceBinding.IsBound &&\n                            assemblies[referenceBinding.DefinitionIndex].IsLinked)\n                        {\n                            var linkedAssemblySymbol = bindingResult[referenceBinding.DefinitionIndex].AssemblySymbol;\n                            Debug.Assert(linkedAssemblySymbol is object);\n                            linkedReferencedAssembliesBuilder.Add(linkedAssemblySymbol);\n                        } 304230"];
1962 [label="assemblies[referenceBinding.DefinitionIndex].IsLinked 304231"];
1963 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 304232"];
1964 [label="Debug.Assert((object)_corLibrary == null); 304233"];
1965 [label="Debug.Assert(currentBindingResult.AssemblySymbol is object); 304234"];
1966 [label="Debug.Assert(currentBindingResult.ReferenceBinding is object); 304235"];
1967 [label="get\n                    {\n                        return _embedInteropTypes;\n                    } 304236"];
1968 [label="assemblies[referenceBinding.DefinitionIndex].IsLinked 304237"];
1969 [label="Debug.Assert((object)_corLibrary == null); 304238"];
1970 [label="linkedReferencedAssembliesBuilder.Free(); 304239"];
1971 [label="if (missingAssemblies != null)\n                {\n                    foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    }\n                } 304240"];
1972 [label="if (missingAssemblies != null)\n                {\n                    foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    }\n                } 304241"];
1973 [label="foreach (var missingAssembly in missingAssemblies.Values)\n                    {\n                        missingAssembly.SetCorLibrary(corLibrary);\n                    } 304242"];
1974 [label="missingAssembly.SetCorLibrary(corLibrary); 304243"];
1975 [label="missingAssembly.SetCorLibrary(corLibrary) 304244"];
1976 [label="param SetCorLibrary(AssemblySymbol corLibrary) 304245"];
1977 [label="Debug.Assert((object)_corLibrary == null); 304246"];
1978 [label="missingAssembly.SetCorLibrary(corLibrary); 304247"];
1979 [label="Debug.Assert((object)_corLibrary == null); 304248"];
1980 [label="InitializeNewSymbols(newSymbols, assemblySymbol, allAssemblyData, bindingResult, missingAssemblies); 304249"];
1981 [label="if (compilation._lazyAssemblySymbol is null)\n                    {\n                        lock (SymbolCacheAndReferenceManagerStateGuard)\n                        {\n                            if (compilation._lazyAssemblySymbol is null)\n                            {\n                                if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                }\n\n                                UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult);\n\n                                InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies());\n\n                                // Make sure that the given compilation holds on this instance of reference manager.\n                                Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference);\n                                compilation._referenceManager = this;\n\n                                // Finally, publish the source symbol after all data have been written.\n                                // Once lazyAssemblySymbol is non-null other readers might start reading the data written above.\n                                compilation._lazyAssemblySymbol = assemblySymbol;\n                            }\n                        }\n                    } 304250"];
1982 [label="if (compilation._lazyAssemblySymbol is null)\n                            {\n                                if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                }\n\n                                UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult);\n\n                                InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies());\n\n                                // Make sure that the given compilation holds on this instance of reference manager.\n                                Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference);\n                                compilation._referenceManager = this;\n\n                                // Finally, publish the source symbol after all data have been written.\n                                // Once lazyAssemblySymbol is non-null other readers might start reading the data written above.\n                                compilation._lazyAssemblySymbol = assemblySymbol;\n                            } 304251"];
1983 [label="if (IsBound)\n                                {\n                                    // Another thread has finished constructing AssemblySymbol for another compilation that shares this manager.\n                                    // Drop the results and reuse the symbols that were created for the other compilation.\n                                    return false;\n                                } 304252"];
1984 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 304253"];
1985 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 304254"];
1986 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult) 304255"];
1987 [label="param UpdateSymbolCacheNoLock(List<int> newSymbols) 304256"];
1988 [label="param UpdateSymbolCacheNoLock(ImmutableArray<AssemblyData> assemblies) 304257"];
1989 [label="param UpdateSymbolCacheNoLock(BoundInputAssembly[] bindingResult) 304258"];
1990 [label="foreach (int i in newSymbols)\n                {\n                    ref BoundInputAssembly current = ref bindingResult[i];\n                    Debug.Assert(current.AssemblySymbol is object);\n\n                    var compilationData = assemblies[i] as AssemblyDataForCompilation;\n                    if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    }\n                } 304259"];
1991 [label="ref BoundInputAssembly current = ref bindingResult[i]; 304260"];
1992 [label="Debug.Assert(current.AssemblySymbol is object); 304261"];
1993 [label="var compilationData = assemblies[i] as AssemblyDataForCompilation; 304262"];
1994 [label="if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    } 304263"];
1995 [label="if (compilationData != null)\n                    {\n                        compilationData.Compilation.CacheRetargetingAssemblySymbolNoLock(current.AssemblySymbol);\n                    }\n                    else\n                    {\n                        var fileData = (AssemblyDataForFile)assemblies[i];\n                        fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol);\n                    } 304264"];
1996 [label="var fileData = (AssemblyDataForFile)assemblies[i]; 304265"];
1997 [label="fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol); 304266"];
1998 [label="fileData.CachedSymbols.Add((PEAssemblySymbol)current.AssemblySymbol); 304267"];
1999 [label="Debug.Assert(current.AssemblySymbol is object); 304268"];
2000 [label="UpdateSymbolCacheNoLock(newSymbols, allAssemblyData, bindingResult); 304269"];
2001 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 304270"];
2002 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 304271"];
2003 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 304272"];
2004 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 304273"];
2005 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 304274"];
2006 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 304275"];
2007 [label="ReferenceEquals(corLibrary, assemblySymbol) 304276"];
2008 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 304277"];
2009 [label="assemblySymbol.SourceModule 304278"];
2010 [label="get { return (SourceModuleSymbol)this.Modules[0]; } 304279"];
2011 [label="this.Modules 304280"];
2012 [label="get\n            {\n                return _modules;\n            } 304281"];
2013 [label="return _modules; 304282"];
2014 [label="return (SourceModuleSymbol)this.Modules[0]; 304283"];
2015 [label="return (SourceModuleSymbol)this.Modules[0]; 304284"];
2016 [label="assemblySymbol.SourceModule.GetReferencedAssemblySymbols() 304285"];
2017 [label="param GetReferencedAssemblySymbols(this) 304286"];
2018 [label="AssertReferencesInitialized() 304287"];
2019 [label="param AssertReferencesInitialized(this) 304288"];
2020 [label="Debug.Assert(_moduleReferences != null); 304289"];
2021 [label="Debug.Assert(_moduleReferences != null); 304290"];
2022 [label="AssertReferencesInitialized(); 304291"];
2023 [label="return _moduleReferences.Symbols; 304292"];
2024 [label="assemblySymbol.SourceModule 304293"];
2025 [label="get { return (SourceModuleSymbol)this.Modules[0]; } 304294"];
2026 [label="this.Modules 304295"];
2027 [label="get\n            {\n                return _modules;\n            } 304296"];
2028 [label="return _modules; 304297"];
2029 [label="return (SourceModuleSymbol)this.Modules[0]; 304298"];
2030 [label="assemblySymbol.SourceModule.GetUnifiedAssemblies() 304299"];
2031 [label="param GetUnifiedAssemblies(this) 304300"];
2032 [label="AssertReferencesInitialized() 304301"];
2033 [label="param AssertReferencesInitialized(this) 304302"];
2034 [label="Debug.Assert(_moduleReferences != null); 304303"];
2035 [label="Debug.Assert(_moduleReferences != null); 304304"];
2036 [label="AssertReferencesInitialized(); 304305"];
2037 [label="return _moduleReferences.UnifiedAssemblies; 304306"];
2038 [label="InitializeNoLock(\n                                    referencedAssembliesMap,\n                                    referencedModulesMap,\n                                    boundReferenceDirectiveMap,\n                                    boundReferenceDirectives,\n                                    explicitReferences,\n                                    implicitReferenceResolutions,\n                                    hasCircularReference,\n                                    resolutionDiagnostics.ToReadOnly(),\n                                    ReferenceEquals(corLibrary, assemblySymbol) ? null! : corLibrary, // https://github.com/dotnet/roslyn/issues/40751 Unnecessary suppression\n                                    modules,\n                                    moduleReferences,\n                                    assemblySymbol.SourceModule.GetReferencedAssemblySymbols(),\n                                    aliasesOfReferencedAssemblies,\n                                    assemblySymbol.SourceModule.GetUnifiedAssemblies()); 304307"];
2039 [label="Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference); 304308"];
2040 [label="Debug.Assert(ReferenceEquals(compilation._referenceManager, this) || HasCircularReference); 304309"];
2041 [label="compilation._referenceManager 304310"];
2042 [label="compilation._lazyAssemblySymbol 304311"];
2043 [label="return true; 304312"];
2044 [label="resolutionDiagnostics.Free(); 304313"];
2045 [label="assemblyReferencesBySimpleName.Free(); 304314"];
2046 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 304315"];
2047 [label="if (!IsBound && CreateAndSetSourceAssemblyFullBind(compilation))\n                {\n                    // we have successfully bound the references for the compilation\n                }\n                else if (!HasCircularReference)\n                {\n                    // Another compilation that shares the manager with the given compilation\n                    // already bound its references and produced tables that we can use to construct \n                    // source assembly symbol faster. Unless we encountered a circular reference.\n                    CreateAndSetSourceAssemblyReuseData(compilation);\n                }\n                else\n                {\n                    // We encountered a circular reference while binding the previous compilation.\n                    // This compilation can't share bound references with other compilations. Create a new manager.\n\n                    // NOTE: The CreateSourceAssemblyFullBind is going to replace compilation's reference manager with newManager.\n\n                    var newManager = new ReferenceManager(this.SimpleAssemblyName, this.IdentityComparer, this.ObservedMetadata);\n                    var successful = newManager.CreateAndSetSourceAssemblyFullBind(compilation);\n\n                    // The new manager isn't shared with any other compilation so there is no other \n                    // thread but the current one could have initialized it.\n                    Debug.Assert(successful);\n\n                    newManager.AssertBound();\n                } 304316"];
2048 [label="AssertBound(); 304317"];
2049 [label="Debug.Assert(compilation._lazyAssemblySymbol is object); 304318"];
2050 [label="_referenceManager.CreateSourceAssemblyForCompilation(this); 304319"];
2051 [label="Debug.Assert(_lazyAssemblySymbol is object); 304320"];
2052 [label="return _referenceManager; 304321"];
2053 [label="GetBoundReferenceManager(); 304322"];
2054 [label="RoslynDebug.Assert(_lazyAssemblySymbol is object); 304323"];
2055 [label="return _lazyAssemblySymbol; 304324"];
2056 [label="return SourceAssembly; 304325"];
2057 [label="var typeSym = comp.Assembly.GlobalNamespace.GetTypeMembers('MyClass').First(); 304326"];
2058 [label="comp.Assembly.GlobalNamespace 304327"];
2059 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                }\n\n                return _globalNamespace;\n            } 304328"];
2060 [label="if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                } 304329"];
2061 [label="if ((object)_globalNamespace == null)\n                {\n                    // Get the root namespace from each module, and merge them all together. If there is only one, \n                    // then MergedNamespaceSymbol.Create will just return that one.\n\n                    IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace;\n                    var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable());\n                    Interlocked.CompareExchange(ref _globalNamespace, result, null);\n                } 304330"];
2062 [label="IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace; 304331"];
2063 [label="IEnumerable<NamespaceSymbol> allGlobalNamespaces = from m in Modules select m.GlobalNamespace; 304332"];
2064 [label="var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable()); 304333"];
2065 [label="var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable()); 304334"];
2066 [label="new NamespaceExtent(this) 304335"];
2067 [label="param NamespaceExtent(AssemblySymbol assembly) 304336"];
2068 [label="param NamespaceExtent(this) 304337"];
2069 [label="_kind 304338"];
2070 [label="_symbolOrCompilation 304339"];
2071 [label="var result = MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable()); 304340"];
2072 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 304341"];
2073 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 304342"];
2074 [label="if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                } 304343"];
2075 [label="var diagnostics = DiagnosticBag.GetInstance(); 304344"];
2076 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 304345"];
2077 [label="DeclaringCompilation 304346"];
2078 [label="get\n            {\n                return _assemblySymbol.DeclaringCompilation;\n            } 304347"];
2079 [label="_assemblySymbol.DeclaringCompilation 304348"];
2080 [label="get\n            {\n                return _compilation;\n            } 304349"];
2081 [label="return _compilation; 304350"];
2082 [label="return _assemblySymbol.DeclaringCompilation; 304351"];
2083 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 304352"];
2084 [label="DeclaringCompilation.MergedRootDeclaration 304353"];
2085 [label="get\n            {\n                return Declarations.GetMergedRoot(this);\n            } 304354"];
2086 [label="Declarations 304355"];
2087 [label="get\n            {\n                return _syntaxAndDeclarations.GetLazyState().DeclarationTable;\n            } 304356"];
2088 [label="return Declarations.GetMergedRoot(this); 304357"];
2089 [label="return Declarations.GetMergedRoot(this); 304358"];
2090 [label="return Declarations.GetMergedRoot(this); 304359"];
2091 [label="0x1 304360"];
2092 [label="LazyAllMembersIsSorted = 0x1 304361"];
2093 [label="d =>\n            new NamespaceDeclarationSyntaxReference(d.SyntaxReference) 304362"];
2094 [label="s_declaringSyntaxReferencesSelector = d =>\n            new NamespaceDeclarationSyntaxReference(d.SyntaxReference) 304363"];
2095 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 304364"];
2096 [label="var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics); 304365"];
2097 [label="new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics) 304366"];
2098 [label="param SourceNamespaceSymbol(SourceModuleSymbol module) 304367"];
2099 [label="param SourceNamespaceSymbol(Symbol container) 304368"];
2100 [label="param SourceNamespaceSymbol(MergedNamespaceDeclaration mergedDeclaration) 304369"];
2101 [label="param SourceNamespaceSymbol(DiagnosticBag diagnostics) 304370"];
2102 [label="param SourceNamespaceSymbol(this) 304371"];
2103 [label="param SourceNamespaceSymbol(this) 304372"];
2104 [label="_module 304373"];
2105 [label="_container 304374"];
2106 [label="_mergedDeclaration 304375"];
2107 [label="_nameToMembersMap 304376"];
2108 [label="_nameToTypeMembersMap 304377"];
2109 [label="_flags 304378"];
2110 [label="new LexicalSortKey() { _treeOrdinal = -1, _position = 0 } 304379"];
2111 [label="1 304380"];
2112 [label="_treeOrdinal 304381"];
2113 [label="0 304382"];
2114 [label="_position 304383"];
2115 [label="NotInSource = new LexicalSortKey() { _treeOrdinal = -1, _position = 0 } 304384"];
2116 [label="new LexicalSortKey() { _treeOrdinal = -1, _position = -1 } 304385"];
2117 [label="1 304386"];
2118 [label="_treeOrdinal 304387"];
2119 [label="1 304388"];
2120 [label="_position 304389"];
2121 [label="NotInitialized = new LexicalSortKey() { _treeOrdinal = -1, _position = -1 } 304390"];
2122 [label="new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue - 1 } 304391"];
2123 [label="_treeOrdinal 304392"];
2124 [label="1 304393"];
2125 [label="int.MaxValue - 1 304394"];
2126 [label="_position 304395"];
2127 [label="SynthesizedCtor = new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue - 1 } 304396"];
2128 [label="new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue } 304397"];
2129 [label="_treeOrdinal 304398"];
2130 [label="_position 304399"];
2131 [label="SynthesizedCCtor = new LexicalSortKey() { _treeOrdinal = int.MaxValue, _position = int.MaxValue } 304400"];
2132 [label="_lazyLexicalSortKey = LexicalSortKey.NotInitialized 304401"];
2133 [label="Debug.Assert(mergedDeclaration != null); 304402"];
2134 [label="Debug.Assert(mergedDeclaration != null); 304403"];
2135 [label="_module 304404"];
2136 [label="_container 304405"];
2137 [label="_mergedDeclaration 304406"];
2138 [label="foreach (var singleDeclaration in mergedDeclaration.Declarations)\n            {\n                diagnostics.AddRange(singleDeclaration.Diagnostics);\n            } 304407"];
2139 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 304408"];
2140 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 304409"];
2141 [label="Debug.Assert(diagnostics.IsEmptyWithoutResolution); 304410"];
2142 [label="diagnostics.Free(); 304411"];
2143 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 304412"];
2144 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 304413"];
2145 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 304414"];
2146 [label="Interlocked.CompareExchange(ref _globalNamespace, globalNS, null); 304415"];
2147 [label="return _globalNamespace; 304416"];
2148 [label="MergedNamespaceSymbol.Create(new NamespaceExtent(this),\n                                                        null,\n                                                        allGlobalNamespaces.AsImmutable()) 304417"];
2149 [label="param Create(NamespaceExtent extent) 304418"];
2150 [label="param Create(NamespaceSymbol containingNamespace) 304419"];
2151 [label="param Create(ImmutableArray<NamespaceSymbol> namespacesToMerge) 304420"];
2152 [label="param Create(string nameOpt = null) 304421"];
2153 [label="Debug.Assert(namespacesToMerge.Length != 0); 304422"];
2154 [label="Debug.Assert(namespacesToMerge.Length != 0); 304423"];
2155 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 304424"];
2156 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 304425"];
2157 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 304426"];
2158 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 304427"];
2159 [label="(namespacesToMerge.Length == 1 && nameOpt == null) 304428"];
2160 [label="Interlocked.CompareExchange(ref _globalNamespace, result, null); 304429"];
2161 [label="Interlocked.CompareExchange(ref _globalNamespace, result, null); 304430"];
2162 [label="Interlocked.CompareExchange(ref _globalNamespace, result, null); 304431"];
2163 [label="return _globalNamespace; 304432"];
2164 [label="var typeSym = comp.Assembly.GlobalNamespace.GetTypeMembers('MyClass').First(); 304433"];
2165 [label="comp.Assembly.GlobalNamespace.GetTypeMembers('MyClass') 304434"];
2166 [label="param GetTypeMembers(string name) 304435"];
2167 [label="param GetTypeMembers(this) 304436"];
2168 [label="ImmutableArray<NamedTypeSymbol> members; 304437"];
2169 [label="members 304438"];
2170 [label="this.GetNameToTypeMembersMap() 304439"];
2171 [label="param GetNameToTypeMembersMap(this) 304440"];
2172 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 304441"];
2173 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 304442"];
2174 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 304443"];
2175 [label="GetNameToMembersMap() 304444"];
2176 [label="param GetNameToMembersMap(this) 304445"];
2177 [label="if (_nameToMembersMap == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                }\n\n                diagnostics.Free();\n            } 304446"];
2178 [label="if (_nameToMembersMap == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                }\n\n                diagnostics.Free();\n            } 304447"];
2179 [label="var diagnostics = DiagnosticBag.GetInstance(); 304448"];
2180 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 304449"];
2181 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 304450"];
2182 [label="MakeNameToMembersMap(diagnostics) 304451"];
2183 [label="param MakeNameToMembersMap(DiagnosticBag diagnostics) 304452"];
2184 [label="param MakeNameToMembersMap(this) 304453"];
2185 [label="var builder = new NameToSymbolMapBuilder(_mergedDeclaration.Children.Length); 304454"];
2186 [label="_mergedDeclaration.Children 304455"];
2187 [label="param NameToSymbolMapBuilder(int capacity) 304456"];
2188 [label="param NameToSymbolMapBuilder(this) 304457"];
2189 [label="_dictionary = new Dictionary<string, object>(capacity, StringOrdinalComparer.Instance); 304458"];
2190 [label="_dictionary = new Dictionary<string, object>(capacity, StringOrdinalComparer.Instance); 304459"];
2191 [label="_dictionary 304460"];
2192 [label="foreach (var declaration in _mergedDeclaration.Children)\n            {\n                builder.Add(BuildSymbol(declaration, diagnostics));\n            } 304461"];
2193 [label="builder.Add(BuildSymbol(declaration, diagnostics)); 304462"];
2194 [label="builder.Add(BuildSymbol(declaration, diagnostics)); 304463"];
2195 [label="BuildSymbol(declaration, diagnostics) 304464"];
2196 [label="param BuildSymbol(MergedNamespaceOrTypeDeclaration declaration) 304465"];
2197 [label="param BuildSymbol(DiagnosticBag diagnostics) 304466"];
2198 [label="param BuildSymbol(this) 304467"];
2199 [label="switch (declaration.Kind)\n            {\n                case DeclarationKind.Namespace:\n                    return new SourceNamespaceSymbol(_module, this, (MergedNamespaceDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.Struct:\n                case DeclarationKind.Interface:\n                case DeclarationKind.Enum:\n                case DeclarationKind.Delegate:\n                case DeclarationKind.Class:\n                case DeclarationKind.Record:\n                    return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.Script:\n                case DeclarationKind.Submission:\n                case DeclarationKind.ImplicitClass:\n                    return new ImplicitNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                case DeclarationKind.SimpleProgram:\n                    return new SimpleProgramNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(declaration.Kind);\n            } 304468"];
2200 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 304469"];
2201 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 304470"];
2202 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 304471"];
2203 [label="return new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics); 304472"];
2204 [label="new SourceNamedTypeSymbol(this, (MergedTypeDeclaration)declaration, diagnostics) 304473"];
2205 [label="param SourceNamedTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 304474"];
2206 [label="param SourceNamedTypeSymbol(MergedTypeDeclaration declaration) 304475"];
2207 [label="param SourceNamedTypeSymbol(DiagnosticBag diagnostics) 304476"];
2208 [label="param SourceNamedTypeSymbol(TupleExtraData tupleData = null) 304477"];
2209 [label="param SourceNamedTypeSymbol(this) 304478"];
2210 [label="false 304479"];
2211 [label="considerName: false 304480"];
2212 [label="false 304481"];
2213 [label="considerExplicitlyImplementedInterfaces: false 304482"];
2214 [label="true 304483"];
2215 [label="considerReturnType: true 304484"];
2216 [label="false 304485"];
2217 [label="considerTypeConstraints: false 304486"];
2218 [label="true 304487"];
2219 [label="considerRefKindDifferences: true 304488"];
2220 [label="true 304489"];
2221 [label="considerCallingConvention: true 304490"];
2222 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 304491"];
2223 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerRefKindDifferences: true,\n            considerCallingConvention: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304492"];
2224 [label="param MemberSignatureComparer(bool considerName) 304493"];
2225 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304494"];
2226 [label="param MemberSignatureComparer(bool considerReturnType) 304495"];
2227 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304496"];
2228 [label="param MemberSignatureComparer(bool considerCallingConvention) 304497"];
2229 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304498"];
2230 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304499"];
2231 [label="param MemberSignatureComparer(this) 304500"];
2232 [label="_considerName 304501"];
2233 [label="_considerExplicitlyImplementedInterfaces 304502"];
2234 [label="_considerReturnType 304503"];
2235 [label="_considerTypeConstraints 304504"];
2236 [label="_considerCallingConvention 304505"];
2237 [label="_considerRefKindDifferences 304506"];
2238 [label="_typeComparison 304507"];
2239 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304508"];
2240 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304509"];
2241 [label="_considerName 304510"];
2242 [label="_considerExplicitlyImplementedInterfaces 304511"];
2243 [label="_considerReturnType 304512"];
2244 [label="_considerTypeConstraints 304513"];
2245 [label="_considerCallingConvention 304514"];
2246 [label="_considerRefKindDifferences 304515"];
2247 [label="_typeComparison 304516"];
2248 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304517"];
2249 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304518"];
2250 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304519"];
2251 [label="ExplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerRefKindDifferences: true,\n            considerCallingConvention: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304520"];
2252 [label="true 304521"];
2253 [label="considerName: true 304522"];
2254 [label="true 304523"];
2255 [label="considerExplicitlyImplementedInterfaces: true 304524"];
2256 [label="true 304525"];
2257 [label="considerReturnType: true 304526"];
2258 [label="false 304527"];
2259 [label="considerTypeConstraints: false 304528"];
2260 [label="true 304529"];
2261 [label="considerCallingConvention: true 304530"];
2262 [label="true 304531"];
2263 [label="considerRefKindDifferences: true 304532"];
2264 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 304533"];
2265 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304534"];
2266 [label="param MemberSignatureComparer(bool considerName) 304535"];
2267 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304536"];
2268 [label="param MemberSignatureComparer(bool considerReturnType) 304537"];
2269 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304538"];
2270 [label="param MemberSignatureComparer(bool considerCallingConvention) 304539"];
2271 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304540"];
2272 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304541"];
2273 [label="param MemberSignatureComparer(this) 304542"];
2274 [label="_considerName 304543"];
2275 [label="_considerExplicitlyImplementedInterfaces 304544"];
2276 [label="_considerReturnType 304545"];
2277 [label="_considerTypeConstraints 304546"];
2278 [label="_considerCallingConvention 304547"];
2279 [label="_considerRefKindDifferences 304548"];
2280 [label="_typeComparison 304549"];
2281 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304550"];
2282 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304551"];
2283 [label="_considerName 304552"];
2284 [label="_considerExplicitlyImplementedInterfaces 304553"];
2285 [label="_considerReturnType 304554"];
2286 [label="_considerTypeConstraints 304555"];
2287 [label="_considerCallingConvention 304556"];
2288 [label="_considerRefKindDifferences 304557"];
2289 [label="_typeComparison 304558"];
2290 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304559"];
2291 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304560"];
2292 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304561"];
2293 [label="CSharpImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304562"];
2294 [label="true 304563"];
2295 [label="considerName: true 304564"];
2296 [label="true 304565"];
2297 [label="considerExplicitlyImplementedInterfaces: true 304566"];
2298 [label="false 304567"];
2299 [label="considerReturnType: false 304568"];
2300 [label="false 304569"];
2301 [label="considerTypeConstraints: false 304570"];
2302 [label="false 304571"];
2303 [label="considerCallingConvention: false 304572"];
2304 [label="true 304573"];
2305 [label="considerRefKindDifferences: true 304574"];
2306 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 304575"];
2307 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304576"];
2308 [label="param MemberSignatureComparer(bool considerName) 304577"];
2309 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304578"];
2310 [label="param MemberSignatureComparer(bool considerReturnType) 304579"];
2311 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304580"];
2312 [label="param MemberSignatureComparer(bool considerCallingConvention) 304581"];
2313 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304582"];
2314 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304583"];
2315 [label="param MemberSignatureComparer(this) 304584"];
2316 [label="_considerName 304585"];
2317 [label="_considerExplicitlyImplementedInterfaces 304586"];
2318 [label="_considerReturnType 304587"];
2319 [label="_considerTypeConstraints 304588"];
2320 [label="_considerCallingConvention 304589"];
2321 [label="_considerRefKindDifferences 304590"];
2322 [label="_typeComparison 304591"];
2323 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304592"];
2324 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304593"];
2325 [label="_considerName 304594"];
2326 [label="_considerExplicitlyImplementedInterfaces 304595"];
2327 [label="_considerReturnType 304596"];
2328 [label="_considerTypeConstraints 304597"];
2329 [label="_considerCallingConvention 304598"];
2330 [label="_considerRefKindDifferences 304599"];
2331 [label="_typeComparison 304600"];
2332 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304601"];
2333 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304602"];
2334 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304603"];
2335 [label="CSharpCloseImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304604"];
2336 [label="true 304605"];
2337 [label="considerName: true 304606"];
2338 [label="true 304607"];
2339 [label="considerExplicitlyImplementedInterfaces: true 304608"];
2340 [label="false 304609"];
2341 [label="considerReturnType: false 304610"];
2342 [label="false 304611"];
2343 [label="considerTypeConstraints: false 304612"];
2344 [label="false 304613"];
2345 [label="considerCallingConvention: false 304614"];
2346 [label="false 304615"];
2347 [label="considerRefKindDifferences: false 304616"];
2348 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 304617"];
2349 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304618"];
2350 [label="param MemberSignatureComparer(bool considerName) 304619"];
2351 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304620"];
2352 [label="param MemberSignatureComparer(bool considerReturnType) 304621"];
2353 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304622"];
2354 [label="param MemberSignatureComparer(bool considerCallingConvention) 304623"];
2355 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304624"];
2356 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304625"];
2357 [label="param MemberSignatureComparer(this) 304626"];
2358 [label="_considerName 304627"];
2359 [label="_considerExplicitlyImplementedInterfaces 304628"];
2360 [label="_considerReturnType 304629"];
2361 [label="_considerTypeConstraints 304630"];
2362 [label="_considerCallingConvention 304631"];
2363 [label="_considerRefKindDifferences 304632"];
2364 [label="_typeComparison 304633"];
2365 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304634"];
2366 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304635"];
2367 [label="_considerName 304636"];
2368 [label="_considerExplicitlyImplementedInterfaces 304637"];
2369 [label="_considerReturnType 304638"];
2370 [label="_considerTypeConstraints 304639"];
2371 [label="_considerCallingConvention 304640"];
2372 [label="_considerRefKindDifferences 304641"];
2373 [label="_typeComparison 304642"];
2374 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304643"];
2375 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304644"];
2376 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304645"];
2377 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 304646"];
2378 [label="_typeComparison 304647"];
2379 [label="DuplicateSourceComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304648"];
2380 [label="true 304649"];
2381 [label="considerName: true 304650"];
2382 [label="true 304651"];
2383 [label="considerExplicitlyImplementedInterfaces: true 304652"];
2384 [label="false 304653"];
2385 [label="considerReturnType: false 304654"];
2386 [label="false 304655"];
2387 [label="considerTypeConstraints: false 304656"];
2388 [label="false 304657"];
2389 [label="considerCallingConvention: false 304658"];
2390 [label="true 304659"];
2391 [label="considerRefKindDifferences: true 304660"];
2392 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 304661"];
2393 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304662"];
2394 [label="param MemberSignatureComparer(bool considerName) 304663"];
2395 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304664"];
2396 [label="param MemberSignatureComparer(bool considerReturnType) 304665"];
2397 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304666"];
2398 [label="param MemberSignatureComparer(bool considerCallingConvention) 304667"];
2399 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304668"];
2400 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304669"];
2401 [label="param MemberSignatureComparer(this) 304670"];
2402 [label="_considerName 304671"];
2403 [label="_considerExplicitlyImplementedInterfaces 304672"];
2404 [label="_considerReturnType 304673"];
2405 [label="_considerTypeConstraints 304674"];
2406 [label="_considerCallingConvention 304675"];
2407 [label="_considerRefKindDifferences 304676"];
2408 [label="_typeComparison 304677"];
2409 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304678"];
2410 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304679"];
2411 [label="_considerName 304680"];
2412 [label="_considerExplicitlyImplementedInterfaces 304681"];
2413 [label="_considerReturnType 304682"];
2414 [label="_considerTypeConstraints 304683"];
2415 [label="_considerCallingConvention 304684"];
2416 [label="_considerRefKindDifferences 304685"];
2417 [label="_typeComparison 304686"];
2418 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304687"];
2419 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304688"];
2420 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304689"];
2421 [label="RecordAPISignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304690"];
2422 [label="true 304691"];
2423 [label="considerName: true 304692"];
2424 [label="true 304693"];
2425 [label="considerExplicitlyImplementedInterfaces: true 304694"];
2426 [label="false 304695"];
2427 [label="considerReturnType: false 304696"];
2428 [label="false 304697"];
2429 [label="considerTypeConstraints: false 304698"];
2430 [label="false 304699"];
2431 [label="considerCallingConvention: false 304700"];
2432 [label="true 304701"];
2433 [label="considerRefKindDifferences: true 304702"];
2434 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 304703"];
2435 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304704"];
2436 [label="param MemberSignatureComparer(bool considerName) 304705"];
2437 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304706"];
2438 [label="param MemberSignatureComparer(bool considerReturnType) 304707"];
2439 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304708"];
2440 [label="param MemberSignatureComparer(bool considerCallingConvention) 304709"];
2441 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304710"];
2442 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304711"];
2443 [label="param MemberSignatureComparer(this) 304712"];
2444 [label="_considerName 304713"];
2445 [label="_considerExplicitlyImplementedInterfaces 304714"];
2446 [label="_considerReturnType 304715"];
2447 [label="_considerTypeConstraints 304716"];
2448 [label="_considerCallingConvention 304717"];
2449 [label="_considerRefKindDifferences 304718"];
2450 [label="_typeComparison 304719"];
2451 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304720"];
2452 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304721"];
2453 [label="_considerName 304722"];
2454 [label="_considerExplicitlyImplementedInterfaces 304723"];
2455 [label="_considerReturnType 304724"];
2456 [label="_considerTypeConstraints 304725"];
2457 [label="_considerCallingConvention 304726"];
2458 [label="_considerRefKindDifferences 304727"];
2459 [label="_typeComparison 304728"];
2460 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304729"];
2461 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304730"];
2462 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304731"];
2463 [label="PartialMethodsComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304732"];
2464 [label="true 304733"];
2465 [label="considerName: true 304734"];
2466 [label="false 304735"];
2467 [label="considerExplicitlyImplementedInterfaces: false 304736"];
2468 [label="false 304737"];
2469 [label="considerReturnType: false 304738"];
2470 [label="false 304739"];
2471 [label="considerTypeConstraints: false 304740"];
2472 [label="false 304741"];
2473 [label="considerCallingConvention: false 304742"];
2474 [label="true 304743"];
2475 [label="considerRefKindDifferences: true 304744"];
2476 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 304745"];
2477 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304746"];
2478 [label="param MemberSignatureComparer(bool considerName) 304747"];
2479 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304748"];
2480 [label="param MemberSignatureComparer(bool considerReturnType) 304749"];
2481 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304750"];
2482 [label="param MemberSignatureComparer(bool considerCallingConvention) 304751"];
2483 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304752"];
2484 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304753"];
2485 [label="param MemberSignatureComparer(this) 304754"];
2486 [label="_considerName 304755"];
2487 [label="_considerExplicitlyImplementedInterfaces 304756"];
2488 [label="_considerReturnType 304757"];
2489 [label="_considerTypeConstraints 304758"];
2490 [label="_considerCallingConvention 304759"];
2491 [label="_considerRefKindDifferences 304760"];
2492 [label="_typeComparison 304761"];
2493 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304762"];
2494 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304763"];
2495 [label="_considerName 304764"];
2496 [label="_considerExplicitlyImplementedInterfaces 304765"];
2497 [label="_considerReturnType 304766"];
2498 [label="_considerTypeConstraints 304767"];
2499 [label="_considerCallingConvention 304768"];
2500 [label="_considerRefKindDifferences 304769"];
2501 [label="_typeComparison 304770"];
2502 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304771"];
2503 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304772"];
2504 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304773"];
2505 [label="CSharpOverrideComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304774"];
2506 [label="true 304775"];
2507 [label="considerName: true 304776"];
2508 [label="false 304777"];
2509 [label="considerExplicitlyImplementedInterfaces: false 304778"];
2510 [label="true 304779"];
2511 [label="considerReturnType: true 304780"];
2512 [label="false 304781"];
2513 [label="considerTypeConstraints: false 304782"];
2514 [label="false 304783"];
2515 [label="considerCallingConvention: false 304784"];
2516 [label="false 304785"];
2517 [label="considerRefKindDifferences: false 304786"];
2518 [label="TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames 304787"];
2519 [label="typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames 304788"];
2520 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames) 304789"];
2521 [label="param MemberSignatureComparer(bool considerName) 304790"];
2522 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304791"];
2523 [label="param MemberSignatureComparer(bool considerReturnType) 304792"];
2524 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304793"];
2525 [label="param MemberSignatureComparer(bool considerCallingConvention) 304794"];
2526 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304795"];
2527 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304796"];
2528 [label="param MemberSignatureComparer(this) 304797"];
2529 [label="_considerName 304798"];
2530 [label="_considerExplicitlyImplementedInterfaces 304799"];
2531 [label="_considerReturnType 304800"];
2532 [label="_considerTypeConstraints 304801"];
2533 [label="_considerCallingConvention 304802"];
2534 [label="_considerRefKindDifferences 304803"];
2535 [label="_typeComparison 304804"];
2536 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304805"];
2537 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304806"];
2538 [label="_considerName 304807"];
2539 [label="_considerExplicitlyImplementedInterfaces 304808"];
2540 [label="_considerReturnType 304809"];
2541 [label="_considerTypeConstraints 304810"];
2542 [label="_considerCallingConvention 304811"];
2543 [label="_considerRefKindDifferences 304812"];
2544 [label="_typeComparison 304813"];
2545 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304814"];
2546 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304815"];
2547 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304816"];
2548 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 304817"];
2549 [label="_typeComparison 304818"];
2550 [label="CSharpWithTupleNamesComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions & ~TypeCompareKind.IgnoreTupleNames) 304819"];
2551 [label="true 304820"];
2552 [label="considerName: true 304821"];
2553 [label="false 304822"];
2554 [label="considerExplicitlyImplementedInterfaces: false 304823"];
2555 [label="true 304824"];
2556 [label="considerReturnType: true 304825"];
2557 [label="false 304826"];
2558 [label="considerTypeConstraints: false 304827"];
2559 [label="false 304828"];
2560 [label="considerCallingConvention: false 304829"];
2561 [label="false 304830"];
2562 [label="considerRefKindDifferences: false 304831"];
2563 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 304832"];
2564 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304833"];
2565 [label="param MemberSignatureComparer(bool considerName) 304834"];
2566 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304835"];
2567 [label="param MemberSignatureComparer(bool considerReturnType) 304836"];
2568 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304837"];
2569 [label="param MemberSignatureComparer(bool considerCallingConvention) 304838"];
2570 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304839"];
2571 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304840"];
2572 [label="param MemberSignatureComparer(this) 304841"];
2573 [label="_considerName 304842"];
2574 [label="_considerExplicitlyImplementedInterfaces 304843"];
2575 [label="_considerReturnType 304844"];
2576 [label="_considerTypeConstraints 304845"];
2577 [label="_considerCallingConvention 304846"];
2578 [label="_considerRefKindDifferences 304847"];
2579 [label="_typeComparison 304848"];
2580 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304849"];
2581 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304850"];
2582 [label="_considerName 304851"];
2583 [label="_considerExplicitlyImplementedInterfaces 304852"];
2584 [label="_considerReturnType 304853"];
2585 [label="_considerTypeConstraints 304854"];
2586 [label="_considerCallingConvention 304855"];
2587 [label="_considerRefKindDifferences 304856"];
2588 [label="_typeComparison 304857"];
2589 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304858"];
2590 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304859"];
2591 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304860"];
2592 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 304861"];
2593 [label="_typeComparison 304862"];
2594 [label="CSharpWithoutTupleNamesComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304863"];
2595 [label="false 304864"];
2596 [label="considerName: false 304865"];
2597 [label="false 304866"];
2598 [label="considerExplicitlyImplementedInterfaces: false 304867"];
2599 [label="false 304868"];
2600 [label="considerReturnType: false 304869"];
2601 [label="false 304870"];
2602 [label="considerTypeConstraints: false 304871"];
2603 [label="false 304872"];
2604 [label="considerCallingConvention: false 304873"];
2605 [label="true 304874"];
2606 [label="considerRefKindDifferences: true 304875"];
2607 [label="typeComparison: TypeCompareKind.AllIgnoreOptions 304876"];
2608 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false, //Bug: DevDiv #15775\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304877"];
2609 [label="param MemberSignatureComparer(bool considerName) 304878"];
2610 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304879"];
2611 [label="param MemberSignatureComparer(bool considerReturnType) 304880"];
2612 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304881"];
2613 [label="param MemberSignatureComparer(bool considerCallingConvention) 304882"];
2614 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304883"];
2615 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304884"];
2616 [label="param MemberSignatureComparer(this) 304885"];
2617 [label="_considerName 304886"];
2618 [label="_considerExplicitlyImplementedInterfaces 304887"];
2619 [label="_considerReturnType 304888"];
2620 [label="_considerTypeConstraints 304889"];
2621 [label="_considerCallingConvention 304890"];
2622 [label="_considerRefKindDifferences 304891"];
2623 [label="_typeComparison 304892"];
2624 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304893"];
2625 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304894"];
2626 [label="_considerName 304895"];
2627 [label="_considerExplicitlyImplementedInterfaces 304896"];
2628 [label="_considerReturnType 304897"];
2629 [label="_considerTypeConstraints 304898"];
2630 [label="_considerCallingConvention 304899"];
2631 [label="_considerRefKindDifferences 304900"];
2632 [label="_typeComparison 304901"];
2633 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304902"];
2634 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304903"];
2635 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304904"];
2636 [label="CSharpAccessorOverrideComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false, //Bug: DevDiv #15775\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.AllIgnoreOptions) 304905"];
2637 [label="true 304906"];
2638 [label="considerName: true 304907"];
2639 [label="false 304908"];
2640 [label="considerExplicitlyImplementedInterfaces: false 304909"];
2641 [label="true 304910"];
2642 [label="considerReturnType: true 304911"];
2643 [label="false 304912"];
2644 [label="considerTypeConstraints: false 304913"];
2645 [label="false 304914"];
2646 [label="considerCallingConvention: false 304915"];
2647 [label="true 304916"];
2648 [label="considerRefKindDifferences: true 304917"];
2649 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 304918"];
2650 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 304919"];
2651 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 304920"];
2652 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 304921"];
2653 [label="param MemberSignatureComparer(bool considerName) 304922"];
2654 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304923"];
2655 [label="param MemberSignatureComparer(bool considerReturnType) 304924"];
2656 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304925"];
2657 [label="param MemberSignatureComparer(bool considerCallingConvention) 304926"];
2658 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304927"];
2659 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304928"];
2660 [label="param MemberSignatureComparer(this) 304929"];
2661 [label="_considerName 304930"];
2662 [label="_considerExplicitlyImplementedInterfaces 304931"];
2663 [label="_considerReturnType 304932"];
2664 [label="_considerTypeConstraints 304933"];
2665 [label="_considerCallingConvention 304934"];
2666 [label="_considerRefKindDifferences 304935"];
2667 [label="_typeComparison 304936"];
2668 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304937"];
2669 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304938"];
2670 [label="_considerName 304939"];
2671 [label="_considerExplicitlyImplementedInterfaces 304940"];
2672 [label="_considerReturnType 304941"];
2673 [label="_considerTypeConstraints 304942"];
2674 [label="_considerCallingConvention 304943"];
2675 [label="_considerRefKindDifferences 304944"];
2676 [label="_typeComparison 304945"];
2677 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304946"];
2678 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304947"];
2679 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304948"];
2680 [label="CSharpCustomModifierOverrideComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 304949"];
2681 [label="false 304950"];
2682 [label="considerName: false 304951"];
2683 [label="false 304952"];
2684 [label="considerExplicitlyImplementedInterfaces: false 304953"];
2685 [label="false 304954"];
2686 [label="considerReturnType: false 304955"];
2687 [label="false 304956"];
2688 [label="considerTypeConstraints: false 304957"];
2689 [label="false 304958"];
2690 [label="considerCallingConvention: false 304959"];
2691 [label="false 304960"];
2692 [label="considerRefKindDifferences: false 304961"];
2693 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 304962"];
2694 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 304963"];
2695 [label="typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 304964"];
2696 [label="new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 304965"];
2697 [label="param MemberSignatureComparer(bool considerName) 304966"];
2698 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 304967"];
2699 [label="param MemberSignatureComparer(bool considerReturnType) 304968"];
2700 [label="param MemberSignatureComparer(bool considerTypeConstraints) 304969"];
2701 [label="param MemberSignatureComparer(bool considerCallingConvention) 304970"];
2702 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 304971"];
2703 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 304972"];
2704 [label="param MemberSignatureComparer(this) 304973"];
2705 [label="_considerName 304974"];
2706 [label="_considerExplicitlyImplementedInterfaces 304975"];
2707 [label="_considerReturnType 304976"];
2708 [label="_considerTypeConstraints 304977"];
2709 [label="_considerCallingConvention 304978"];
2710 [label="_considerRefKindDifferences 304979"];
2711 [label="_typeComparison 304980"];
2712 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304981"];
2713 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 304982"];
2714 [label="_considerName 304983"];
2715 [label="_considerExplicitlyImplementedInterfaces 304984"];
2716 [label="_considerReturnType 304985"];
2717 [label="_considerTypeConstraints 304986"];
2718 [label="_considerCallingConvention 304987"];
2719 [label="_considerRefKindDifferences 304988"];
2720 [label="_typeComparison 304989"];
2721 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304990"];
2722 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 304991"];
2723 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 304992"];
2724 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 304993"];
2725 [label="_typeComparison 304994"];
2726 [label="SloppyOverrideComparer = new MemberSignatureComparer(\n            considerName: false,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 304995"];
2727 [label="true 304996"];
2728 [label="considerName: true 304997"];
2729 [label="false 304998"];
2730 [label="considerExplicitlyImplementedInterfaces: false 304999"];
2731 [label="true 305000"];
2732 [label="considerReturnType: true 305001"];
2733 [label="false 305002"];
2734 [label="considerTypeConstraints: false 305003"];
2735 [label="true 305004"];
2736 [label="considerCallingConvention: true 305005"];
2737 [label="false 305006"];
2738 [label="considerRefKindDifferences: false 305007"];
2739 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 305008"];
2740 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 305009"];
2741 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 305010"];
2742 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 305011"];
2743 [label="param MemberSignatureComparer(bool considerName) 305012"];
2744 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 305013"];
2745 [label="param MemberSignatureComparer(bool considerReturnType) 305014"];
2746 [label="param MemberSignatureComparer(bool considerTypeConstraints) 305015"];
2747 [label="param MemberSignatureComparer(bool considerCallingConvention) 305016"];
2748 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 305017"];
2749 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 305018"];
2750 [label="param MemberSignatureComparer(this) 305019"];
2751 [label="_considerName 305020"];
2752 [label="_considerExplicitlyImplementedInterfaces 305021"];
2753 [label="_considerReturnType 305022"];
2754 [label="_considerTypeConstraints 305023"];
2755 [label="_considerCallingConvention 305024"];
2756 [label="_considerRefKindDifferences 305025"];
2757 [label="_typeComparison 305026"];
2758 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305027"];
2759 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305028"];
2760 [label="_considerName 305029"];
2761 [label="_considerExplicitlyImplementedInterfaces 305030"];
2762 [label="_considerReturnType 305031"];
2763 [label="_considerTypeConstraints 305032"];
2764 [label="_considerCallingConvention 305033"];
2765 [label="_considerRefKindDifferences 305034"];
2766 [label="_typeComparison 305035"];
2767 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305036"];
2768 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305037"];
2769 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 305038"];
2770 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 305039"];
2771 [label="_typeComparison 305040"];
2772 [label="RuntimeSignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 305041"];
2773 [label="true 305042"];
2774 [label="considerName: true 305043"];
2775 [label="false 305044"];
2776 [label="considerExplicitlyImplementedInterfaces: false 305045"];
2777 [label="true 305046"];
2778 [label="considerReturnType: true 305047"];
2779 [label="false 305048"];
2780 [label="considerTypeConstraints: false 305049"];
2781 [label="true 305050"];
2782 [label="considerCallingConvention: true 305051"];
2783 [label="true 305052"];
2784 [label="considerRefKindDifferences: true 305053"];
2785 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 305054"];
2786 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 305055"];
2787 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 305056"];
2788 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 305057"];
2789 [label="param MemberSignatureComparer(bool considerName) 305058"];
2790 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 305059"];
2791 [label="param MemberSignatureComparer(bool considerReturnType) 305060"];
2792 [label="param MemberSignatureComparer(bool considerTypeConstraints) 305061"];
2793 [label="param MemberSignatureComparer(bool considerCallingConvention) 305062"];
2794 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 305063"];
2795 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 305064"];
2796 [label="param MemberSignatureComparer(this) 305065"];
2797 [label="_considerName 305066"];
2798 [label="_considerExplicitlyImplementedInterfaces 305067"];
2799 [label="_considerReturnType 305068"];
2800 [label="_considerTypeConstraints 305069"];
2801 [label="_considerCallingConvention 305070"];
2802 [label="_considerRefKindDifferences 305071"];
2803 [label="_typeComparison 305072"];
2804 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305073"];
2805 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305074"];
2806 [label="_considerName 305075"];
2807 [label="_considerExplicitlyImplementedInterfaces 305076"];
2808 [label="_considerReturnType 305077"];
2809 [label="_considerTypeConstraints 305078"];
2810 [label="_considerCallingConvention 305079"];
2811 [label="_considerRefKindDifferences 305080"];
2812 [label="_typeComparison 305081"];
2813 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305082"];
2814 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305083"];
2815 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 305084"];
2816 [label="RuntimePlusRefOutSignatureComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 305085"];
2817 [label="true 305086"];
2818 [label="considerName: true 305087"];
2819 [label="true 305088"];
2820 [label="considerExplicitlyImplementedInterfaces: true 305089"];
2821 [label="true 305090"];
2822 [label="considerReturnType: true 305091"];
2823 [label="false 305092"];
2824 [label="considerTypeConstraints: false 305093"];
2825 [label="true 305094"];
2826 [label="considerCallingConvention: true 305095"];
2827 [label="false 305096"];
2828 [label="considerRefKindDifferences: false 305097"];
2829 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 305098"];
2830 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 305099"];
2831 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 305100"];
2832 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 305101"];
2833 [label="param MemberSignatureComparer(bool considerName) 305102"];
2834 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 305103"];
2835 [label="param MemberSignatureComparer(bool considerReturnType) 305104"];
2836 [label="param MemberSignatureComparer(bool considerTypeConstraints) 305105"];
2837 [label="param MemberSignatureComparer(bool considerCallingConvention) 305106"];
2838 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 305107"];
2839 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 305108"];
2840 [label="param MemberSignatureComparer(this) 305109"];
2841 [label="_considerName 305110"];
2842 [label="_considerExplicitlyImplementedInterfaces 305111"];
2843 [label="_considerReturnType 305112"];
2844 [label="_considerTypeConstraints 305113"];
2845 [label="_considerCallingConvention 305114"];
2846 [label="_considerRefKindDifferences 305115"];
2847 [label="_typeComparison 305116"];
2848 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305117"];
2849 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305118"];
2850 [label="_considerName 305119"];
2851 [label="_considerExplicitlyImplementedInterfaces 305120"];
2852 [label="_considerReturnType 305121"];
2853 [label="_considerTypeConstraints 305122"];
2854 [label="_considerCallingConvention 305123"];
2855 [label="_considerRefKindDifferences 305124"];
2856 [label="_typeComparison 305125"];
2857 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305126"];
2858 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305127"];
2859 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 305128"];
2860 [label="_typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly; 305129"];
2861 [label="_typeComparison 305130"];
2862 [label="RuntimeImplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: false, // constraints are checked by caller instead\n            considerCallingConvention: true,\n            considerRefKindDifferences: false,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 305131"];
2863 [label="true 305132"];
2864 [label="considerName: true 305133"];
2865 [label="true 305134"];
2866 [label="considerExplicitlyImplementedInterfaces: true 305135"];
2867 [label="true 305136"];
2868 [label="considerReturnType: true 305137"];
2869 [label="true 305138"];
2870 [label="considerTypeConstraints: true 305139"];
2871 [label="true 305140"];
2872 [label="considerCallingConvention: true 305141"];
2873 [label="true 305142"];
2874 [label="considerRefKindDifferences: true 305143"];
2875 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 305144"];
2876 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 305145"];
2877 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 305146"];
2878 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: true,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 305147"];
2879 [label="param MemberSignatureComparer(bool considerName) 305148"];
2880 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 305149"];
2881 [label="param MemberSignatureComparer(bool considerReturnType) 305150"];
2882 [label="param MemberSignatureComparer(bool considerTypeConstraints) 305151"];
2883 [label="param MemberSignatureComparer(bool considerCallingConvention) 305152"];
2884 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 305153"];
2885 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 305154"];
2886 [label="param MemberSignatureComparer(this) 305155"];
2887 [label="_considerName 305156"];
2888 [label="_considerExplicitlyImplementedInterfaces 305157"];
2889 [label="_considerReturnType 305158"];
2890 [label="_considerTypeConstraints 305159"];
2891 [label="_considerCallingConvention 305160"];
2892 [label="_considerRefKindDifferences 305161"];
2893 [label="_typeComparison 305162"];
2894 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305163"];
2895 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305164"];
2896 [label="_considerName 305165"];
2897 [label="_considerExplicitlyImplementedInterfaces 305166"];
2898 [label="_considerReturnType 305167"];
2899 [label="_considerTypeConstraints 305168"];
2900 [label="_considerCallingConvention 305169"];
2901 [label="_considerRefKindDifferences 305170"];
2902 [label="_typeComparison 305171"];
2903 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305172"];
2904 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305173"];
2905 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 305174"];
2906 [label="CSharpSignatureAndConstraintsAndReturnTypeComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: true,\n            considerReturnType: true,\n            considerTypeConstraints: true,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 305175"];
2907 [label="true 305176"];
2908 [label="considerName: true 305177"];
2909 [label="false 305178"];
2910 [label="considerExplicitlyImplementedInterfaces: false 305179"];
2911 [label="true 305180"];
2912 [label="considerReturnType: true 305181"];
2913 [label="false 305182"];
2914 [label="considerTypeConstraints: false 305183"];
2915 [label="true 305184"];
2916 [label="considerCallingConvention: true 305185"];
2917 [label="true 305186"];
2918 [label="considerRefKindDifferences: true 305187"];
2919 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 305188"];
2920 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 305189"];
2921 [label="typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers 305190"];
2922 [label="new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false, //we'll be comparing interface members anyway\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 305191"];
2923 [label="param MemberSignatureComparer(bool considerName) 305192"];
2924 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 305193"];
2925 [label="param MemberSignatureComparer(bool considerReturnType) 305194"];
2926 [label="param MemberSignatureComparer(bool considerTypeConstraints) 305195"];
2927 [label="param MemberSignatureComparer(bool considerCallingConvention) 305196"];
2928 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 305197"];
2929 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 305198"];
2930 [label="param MemberSignatureComparer(this) 305199"];
2931 [label="_considerName 305200"];
2932 [label="_considerExplicitlyImplementedInterfaces 305201"];
2933 [label="_considerReturnType 305202"];
2934 [label="_considerTypeConstraints 305203"];
2935 [label="_considerCallingConvention 305204"];
2936 [label="_considerRefKindDifferences 305205"];
2937 [label="_typeComparison 305206"];
2938 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305207"];
2939 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305208"];
2940 [label="_considerName 305209"];
2941 [label="_considerExplicitlyImplementedInterfaces 305210"];
2942 [label="_considerReturnType 305211"];
2943 [label="_considerTypeConstraints 305212"];
2944 [label="_considerCallingConvention 305213"];
2945 [label="_considerRefKindDifferences 305214"];
2946 [label="_typeComparison 305215"];
2947 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305216"];
2948 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305217"];
2949 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 305218"];
2950 [label="RetargetedExplicitImplementationComparer = new MemberSignatureComparer(\n            considerName: true,\n            considerExplicitlyImplementedInterfaces: false, //we'll be comparing interface members anyway\n            considerReturnType: true,\n            considerTypeConstraints: false,\n            considerCallingConvention: true,\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreNativeIntegers) 305219"];
2951 [label="false 305220"];
2952 [label="considerName: false 305221"];
2953 [label="false 305222"];
2954 [label="considerExplicitlyImplementedInterfaces: false 305223"];
2955 [label="false 305224"];
2956 [label="considerReturnType: false 305225"];
2957 [label="false 305226"];
2958 [label="considerTypeConstraints: false 305227"];
2959 [label="false 305228"];
2960 [label="considerCallingConvention: false 305229"];
2961 [label="true 305230"];
2962 [label="considerRefKindDifferences: true 305231"];
2963 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 305232"];
2964 [label="TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 305233"];
2965 [label="typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames 305234"];
2966 [label="new MemberSignatureComparer(\n            considerName: false, //handled by lookup\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 305235"];
2967 [label="param MemberSignatureComparer(bool considerName) 305236"];
2968 [label="param MemberSignatureComparer(bool considerExplicitlyImplementedInterfaces) 305237"];
2969 [label="param MemberSignatureComparer(bool considerReturnType) 305238"];
2970 [label="param MemberSignatureComparer(bool considerTypeConstraints) 305239"];
2971 [label="param MemberSignatureComparer(bool considerCallingConvention) 305240"];
2972 [label="param MemberSignatureComparer(bool considerRefKindDifferences) 305241"];
2973 [label="param MemberSignatureComparer(TypeCompareKind typeComparison = TypeCompareKind.IgnoreDynamic | TypeCompareKind.IgnoreNativeIntegers) 305242"];
2974 [label="param MemberSignatureComparer(this) 305243"];
2975 [label="_considerName 305244"];
2976 [label="_considerExplicitlyImplementedInterfaces 305245"];
2977 [label="_considerReturnType 305246"];
2978 [label="_considerTypeConstraints 305247"];
2979 [label="_considerCallingConvention 305248"];
2980 [label="_considerRefKindDifferences 305249"];
2981 [label="_typeComparison 305250"];
2982 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305251"];
2983 [label="Debug.Assert(!considerExplicitlyImplementedInterfaces || considerName, 'Doesn't make sense to consider interfaces separately from name.'); 305252"];
2984 [label="_considerName 305253"];
2985 [label="_considerExplicitlyImplementedInterfaces 305254"];
2986 [label="_considerReturnType 305255"];
2987 [label="_considerTypeConstraints 305256"];
2988 [label="_considerCallingConvention 305257"];
2989 [label="_considerRefKindDifferences 305258"];
2990 [label="_typeComparison 305259"];
2991 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305260"];
2992 [label="Debug.Assert((_typeComparison & TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly) == 0,\n                         $'Rely on the {nameof(considerRefKindDifferences)} flag to set this to ensure all cases are handled.'); 305261"];
2993 [label="if (!considerRefKindDifferences)\n            {\n                _typeComparison |= TypeCompareKind.FunctionPointerRefMatchesOutInRefReadonly;\n            } 305262"];
2994 [label="CrefComparer = new MemberSignatureComparer(\n            considerName: false, //handled by lookup\n            considerExplicitlyImplementedInterfaces: false,\n            considerReturnType: false,\n            considerTypeConstraints: false,\n            considerCallingConvention: false, //ignore static-ness\n            considerRefKindDifferences: true,\n            typeComparison: TypeCompareKind.IgnoreCustomModifiersAndArraySizesAndLowerBounds | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes | TypeCompareKind.IgnoreDynamicAndTupleNames) 305263"];
2995 [label="MemberSignatureComparer.RecordAPISignatureComparer 305264"];
2996 [label="PooledDictionary<Symbol, Symbol>.CreatePool(MemberSignatureComparer.RecordAPISignatureComparer) 305265"];
2997 [label="s_duplicateRecordMemberSignatureDictionary =\n            PooledDictionary<Symbol, Symbol>.CreatePool(MemberSignatureComparer.RecordAPISignatureComparer) 305266"];
2998 [label="EmptyComparer.Instance 305267"];
2999 [label="new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(EmptyComparer.Instance) 305268"];
3000 [label="s_emptyTypeMembers = new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(EmptyComparer.Instance) 305269"];
3001 [label="(DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, bool topLevel, Location location)\n            => diagnostics.Add(topLevel ?\n                ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride :\n                ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride,\n                location) 305270"];
3002 [label="ReportBadReturn =\n            (DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, bool topLevel, Location location)\n            => diagnostics.Add(topLevel ?\n                ErrorCode.WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride :\n                ErrorCode.WRN_NullabilityMismatchInReturnTypeOnOverride,\n                location) 305271"];
3003 [label="(DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, ParameterSymbol overridingParameter, bool topLevel, Location location)\n            => diagnostics.Add(\n                topLevel ? ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride : ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride,\n                location,\n                new FormattedSymbol(overridingParameter, SymbolDisplayFormat.ShortFormat)) 305272"];
3004 [label="ReportBadParameter =\n            (DiagnosticBag diagnostics, MethodSymbol overriddenMethod, MethodSymbol overridingMethod, ParameterSymbol overridingParameter, bool topLevel, Location location)\n            => diagnostics.Add(\n                topLevel ? ErrorCode.WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride : ErrorCode.WRN_NullabilityMismatchInParameterTypeOnOverride,\n                location,\n                new FormattedSymbol(overridingParameter, SymbolDisplayFormat.ShortFormat)) 305273"];
3005 [label="containingSymbol 305274"];
3006 [label="declaration 305275"];
3007 [label="diagnostics 305276"];
3008 [label="tupleData 305277"];
3009 [label="param SourceNamedTypeSymbol(this) 305278"];
3010 [label="param SourceMemberContainerTypeSymbol(NamespaceOrTypeSymbol containingSymbol) 305279"];
3011 [label="param SourceMemberContainerTypeSymbol(MergedTypeDeclaration declaration) 305280"];
3012 [label="param SourceMemberContainerTypeSymbol(DiagnosticBag diagnostics) 305281"];
3013 [label="param SourceMemberContainerTypeSymbol(TupleExtraData? tupleData = null) 305282"];
3014 [label="param SourceMemberContainerTypeSymbol(this) 305283"];
3015 [label="symbol =>\n        {\n            if (!symbol.IsStatic)\n            {\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Field:\n                    case SymbolKind.Event:\n                        return true;\n                }\n            }\n            return false;\n        } 305284"];
3016 [label="IsInstanceFieldOrEvent = symbol =>\n        {\n            if (!symbol.IsStatic)\n            {\n                switch (symbol.Kind)\n                {\n                    case SymbolKind.Field:\n                    case SymbolKind.Event:\n                        return true;\n                }\n            }\n            return false;\n        } 305285"];
3017 [label="type => !type.HasType 305286"];
3018 [label="TypeWithAnnotationsIsNullFunction = type => !type.HasType 305287"];
3019 [label="type => type.HasType && type.Type.IsErrorType() 305288"];
3020 [label="TypeWithAnnotationsIsErrorType = type => type.HasType && type.Type.IsErrorType() 305289"];
3021 [label="8 305290"];
3022 [label="ValueTupleRestPosition = 8 305291"];
3023 [label="1 305292"];
3024 [label="ValueTupleRestPosition - 1 305293"];
3025 [label="ValueTupleRestIndex = ValueTupleRestPosition - 1 305294"];
3026 [label="'ValueTuple' 305295"];
3027 [label="ValueTupleTypeName = 'ValueTuple' 305296"];
3028 [label="'Rest' 305297"];
3029 [label="ValueTupleRestFieldName = 'Rest' 305298"];
3030 [label="{\n                                                            WellKnownType.System_ValueTuple_T1,\n                                                            WellKnownType.System_ValueTuple_T2,\n                                                            WellKnownType.System_ValueTuple_T3,\n                                                            WellKnownType.System_ValueTuple_T4,\n                                                            WellKnownType.System_ValueTuple_T5,\n                                                            WellKnownType.System_ValueTuple_T6,\n                                                            WellKnownType.System_ValueTuple_T7,\n                                                            WellKnownType.System_ValueTuple_TRest } 305299"];
3031 [label="tupleTypes = {\n                                                            WellKnownType.System_ValueTuple_T1,\n                                                            WellKnownType.System_ValueTuple_T2,\n                                                            WellKnownType.System_ValueTuple_T3,\n                                                            WellKnownType.System_ValueTuple_T4,\n                                                            WellKnownType.System_ValueTuple_T5,\n                                                            WellKnownType.System_ValueTuple_T6,\n                                                            WellKnownType.System_ValueTuple_T7,\n                                                            WellKnownType.System_ValueTuple_TRest } 305300"];
3032 [label="{\n                                                            WellKnownMember.System_ValueTuple_T1__ctor,\n                                                            WellKnownMember.System_ValueTuple_T2__ctor,\n                                                            WellKnownMember.System_ValueTuple_T3__ctor,\n                                                            WellKnownMember.System_ValueTuple_T4__ctor,\n                                                            WellKnownMember.System_ValueTuple_T5__ctor,\n                                                            WellKnownMember.System_ValueTuple_T6__ctor,\n                                                            WellKnownMember.System_ValueTuple_T7__ctor,\n                                                            WellKnownMember.System_ValueTuple_TRest__ctor } 305301"];
3033 [label="tupleCtors = {\n                                                            WellKnownMember.System_ValueTuple_T1__ctor,\n                                                            WellKnownMember.System_ValueTuple_T2__ctor,\n                                                            WellKnownMember.System_ValueTuple_T3__ctor,\n                                                            WellKnownMember.System_ValueTuple_T4__ctor,\n                                                            WellKnownMember.System_ValueTuple_T5__ctor,\n                                                            WellKnownMember.System_ValueTuple_T6__ctor,\n                                                            WellKnownMember.System_ValueTuple_T7__ctor,\n                                                            WellKnownMember.System_ValueTuple_TRest__ctor } 305302"];
3034 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 305303"];
3035 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 } 305304"];
3036 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 } 305305"];
3037 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 } 305306"];
3038 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 } 305307"];
3039 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 } 305308"];
3040 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 } 305309"];
3041 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 } 305310"];
3042 [label="new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest } 305311"];
3043 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 305312"];
3044 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 305313"];
3045 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 305314"];
3046 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 305315"];
3047 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 305316"];
3048 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 305317"];
3049 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 305318"];
3050 [label="new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 305319"];
3051 [label="tupleMembers = new[]{\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T1__Item1 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T2__Item1,\n                                                            WellKnownMember.System_ValueTuple_T2__Item2 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T3__Item1,\n                                                            WellKnownMember.System_ValueTuple_T3__Item2,\n                                                            WellKnownMember.System_ValueTuple_T3__Item3 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T4__Item1,\n                                                            WellKnownMember.System_ValueTuple_T4__Item2,\n                                                            WellKnownMember.System_ValueTuple_T4__Item3,\n                                                            WellKnownMember.System_ValueTuple_T4__Item4 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T5__Item1,\n                                                            WellKnownMember.System_ValueTuple_T5__Item2,\n                                                            WellKnownMember.System_ValueTuple_T5__Item3,\n                                                            WellKnownMember.System_ValueTuple_T5__Item4,\n                                                            WellKnownMember.System_ValueTuple_T5__Item5 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T6__Item1,\n                                                            WellKnownMember.System_ValueTuple_T6__Item2,\n                                                            WellKnownMember.System_ValueTuple_T6__Item3,\n                                                            WellKnownMember.System_ValueTuple_T6__Item4,\n                                                            WellKnownMember.System_ValueTuple_T6__Item5,\n                                                            WellKnownMember.System_ValueTuple_T6__Item6 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_T7__Item1,\n                                                            WellKnownMember.System_ValueTuple_T7__Item2,\n                                                            WellKnownMember.System_ValueTuple_T7__Item3,\n                                                            WellKnownMember.System_ValueTuple_T7__Item4,\n                                                            WellKnownMember.System_ValueTuple_T7__Item5,\n                                                            WellKnownMember.System_ValueTuple_T7__Item6,\n                                                            WellKnownMember.System_ValueTuple_T7__Item7 },\n\n                                                        new[]{\n                                                            WellKnownMember.System_ValueTuple_TRest__Item1,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item2,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item3,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item4,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item5,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item6,\n                                                            WellKnownMember.System_ValueTuple_TRest__Item7,\n                                                            WellKnownMember.System_ValueTuple_TRest__Rest }\n        } 305320"];
3052 [label="tupleData 305321"];
3053 [label="param SourceMemberContainerTypeSymbol(this) 305322"];
3054 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 305323"];
3055 [label="param NamedTypeSymbol(this) 305324"];
3056 [label="'<invalid-global-code>' 305325"];
3057 [label="ImplicitTypeName = '<invalid-global-code>' 305326"];
3058 [label="0 305327"];
3059 [label="TypeCompareKind.ConsiderEverything 305328"];
3060 [label="new SymbolEqualityComparer(TypeCompareKind.ConsiderEverything) 305329"];
3061 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 305330"];
3062 [label="param SymbolEqualityComparer(this) 305331"];
3063 [label="_comparison 305332"];
3064 [label="_comparison 305333"];
3065 [label="ConsiderEverything = new SymbolEqualityComparer(TypeCompareKind.ConsiderEverything) 305334"];
3066 [label="TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 305335"];
3067 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 305336"];
3068 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 305337"];
3069 [label="param SymbolEqualityComparer(this) 305338"];
3070 [label="_comparison 305339"];
3071 [label="_comparison 305340"];
3072 [label="IgnoringTupleNamesAndNullability = new SymbolEqualityComparer(TypeCompareKind.IgnoreTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 305341"];
3073 [label="TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 305342"];
3074 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 305343"];
3075 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 305344"];
3076 [label="param SymbolEqualityComparer(this) 305345"];
3077 [label="_comparison 305346"];
3078 [label="_comparison 305347"];
3079 [label="IgnoringDynamicTupleNamesAndNullability = new SymbolEqualityComparer(TypeCompareKind.IgnoreDynamicAndTupleNames | TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 305348"];
3080 [label="TypeCompareKind.IgnoreNullableModifiersForReferenceTypes 305349"];
3081 [label="new SymbolEqualityComparer(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 305350"];
3082 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 305351"];
3083 [label="param SymbolEqualityComparer(this) 305352"];
3084 [label="_comparison 305353"];
3085 [label="_comparison 305354"];
3086 [label="IgnoringNullable = new SymbolEqualityComparer(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 305355"];
3087 [label="TypeCompareKind.ObliviousNullableModifierMatchesAny 305356"];
3088 [label="new SymbolEqualityComparer(TypeCompareKind.ObliviousNullableModifierMatchesAny) 305357"];
3089 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 305358"];
3090 [label="param SymbolEqualityComparer(this) 305359"];
3091 [label="_comparison 305360"];
3092 [label="_comparison 305361"];
3093 [label="ObliviousNullableModifierMatchesAny = new SymbolEqualityComparer(TypeCompareKind.ObliviousNullableModifierMatchesAny) 305362"];
3094 [label="TypeCompareKind.AllIgnoreOptions 305363"];
3095 [label="new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions) 305364"];
3096 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 305365"];
3097 [label="param SymbolEqualityComparer(this) 305366"];
3098 [label="_comparison 305367"];
3099 [label="_comparison 305368"];
3100 [label="AllIgnoreOptions = new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions) 305369"];
3101 [label="TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes) 305370"];
3102 [label="new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes)) 305371"];
3103 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 305372"];
3104 [label="param SymbolEqualityComparer(this) 305373"];
3105 [label="_comparison 305374"];
3106 [label="_comparison 305375"];
3107 [label="AllIgnoreOptionsPlusNullableWithUnknownMatchesAny =\n                                                                  new SymbolEqualityComparer(TypeCompareKind.AllIgnoreOptions & ~(TypeCompareKind.IgnoreNullableModifiersForReferenceTypes)) 305376"];
3108 [label="TypeCompareKind.CLRSignatureCompareOptions 305377"];
3109 [label="new SymbolEqualityComparer(TypeCompareKind.CLRSignatureCompareOptions) 305378"];
3110 [label="param SymbolEqualityComparer(TypeCompareKind comparison) 305379"];
3111 [label="param SymbolEqualityComparer(this) 305380"];
3112 [label="_comparison 305381"];
3113 [label="_comparison 305382"];
3114 [label="CLRSignature = new SymbolEqualityComparer(TypeCompareKind.CLRSignatureCompareOptions) 305383"];
3115 [label="SymbolEqualityComparer.CLRSignature 305384"];
3116 [label="new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 305385"];
3117 [label="new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 305386"];
3118 [label="EmptyInterfacesAndTheirBaseInterfaces =\n                                                new MultiDictionary<NamedTypeSymbol, NamedTypeSymbol>(0, SymbolEqualityComparer.CLRSignature) 305387"];
3119 [label="new InterfaceInfo() 305388"];
3120 [label="param InterfaceInfo(this) 305389"];
3121 [label="interfacesAndTheirBaseInterfaces 305390"];
3122 [label="_implementationForInterfaceMemberMap 305391"];
3123 [label="explicitInterfaceImplementationMap 305392"];
3124 [label="s_noInterfaces = new InterfaceInfo() 305393"];
3125 [label="(type) => type.SetUnknownNullabilityForReferenceTypes() 305394"];
3126 [label="s_setUnknownNullability =\n            (type) => type.SetUnknownNullabilityForReferenceTypes() 305395"];
3127 [label="param NamedTypeSymbol(this) 305396"];
3128 [label="param TypeSymbol(this) 305397"];
3129 [label="param TypeSymbol(this) 305398"];
3130 [label="_lazyAbstractMembers 305399"];
3131 [label="_lazyInterfaceInfo 305400"];
3132 [label="_lazyAdapter 305401"];
3133 [label="_hasNoBaseCycles 305402"];
3134 [label="_lazyTupleData 305403"];
3135 [label="_lazyTupleData 305404"];
3136 [label="_declModifiers 305405"];
3137 [label="_containingSymbol 305406"];
3138 [label="declaration 305407"];
3139 [label="new DeclaredMembersAndInitializers() 305408"];
3140 [label="param DeclaredMembersAndInitializers(this) 305409"];
3141 [label="HaveIndexers 305410"];
3142 [label="RecordDeclarationWithParameters 305411"];
3143 [label="RecordPrimaryConstructor 305412"];
3144 [label="InstanceInitializersIndexForRecordDeclarationWithParameters 305413"];
3145 [label="IsNullableEnabledForInstanceConstructorsAndFields 305414"];
3146 [label="IsNullableEnabledForStaticConstructorsAndFields 305415"];
3147 [label="UninitializedSentinel = new DeclaredMembersAndInitializers() 305416"];
3148 [label="_lazyDeclaredMembersAndInitializers = DeclaredMembersAndInitializers.UninitializedSentinel 305417"];
3149 [label="_lazyMembersAndInitializers 305418"];
3150 [label="_lazyMembersDictionary 305419"];
3151 [label="_lazyEarlyAttributeDecodingMembersDictionary 305420"];
3152 [label="_lazyTypeMembers 305421"];
3153 [label="_lazyKnownCircularStruct 305422"];
3154 [label="_lazyLexicalSortKey = LexicalSortKey.NotInitialized 305423"];
3155 [label="_lazyContainsExtensionMethods 305424"];
3156 [label="_lazyAnyMemberHasAttributes 305425"];
3157 [label="_containingSymbol 305426"];
3158 [label="this.declaration 305427"];
3159 [label="TypeKind typeKind = declaration.Kind.ToTypeKind(); 305428"];
3160 [label="declaration.Kind.ToTypeKind() 305429"];
3161 [label="param ToTypeKind(this DeclarationKind kind) 305430"];
3162 [label="switch (kind)\n            {\n                case DeclarationKind.Class:\n                case DeclarationKind.Script:\n                case DeclarationKind.ImplicitClass:\n                case DeclarationKind.SimpleProgram:\n                case DeclarationKind.Record:\n                    return TypeKind.Class;\n\n                case DeclarationKind.Submission:\n                    return TypeKind.Submission;\n\n                case DeclarationKind.Delegate:\n                    return TypeKind.Delegate;\n\n                case DeclarationKind.Enum:\n                    return TypeKind.Enum;\n\n                case DeclarationKind.Interface:\n                    return TypeKind.Interface;\n\n                case DeclarationKind.Struct:\n                    return TypeKind.Struct;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 305431"];
3163 [label="return TypeKind.Class; 305432"];
3164 [label="var modifiers = MakeModifiers(typeKind, diagnostics); 305433"];
3165 [label="var modifiers = MakeModifiers(typeKind, diagnostics); 305434"];
3166 [label="MakeModifiers(typeKind, diagnostics) 305435"];
3167 [label="param MakeModifiers(TypeKind typeKind) 305436"];
3168 [label="param MakeModifiers(DiagnosticBag diagnostics) 305437"];
3169 [label="param MakeModifiers(this) 305438"];
3170 [label="this.ContainingSymbol 305439"];
3171 [label="get\n            {\n                return _containingSymbol;\n            } 305440"];
3172 [label="return _containingSymbol; 305441"];
3173 [label="Symbol containingSymbol = this.ContainingSymbol; 305442"];
3174 [label="DeclarationModifiers defaultAccess; 305443"];
3175 [label="var allowedModifiers = DeclarationModifiers.AccessibilityMask; 305444"];
3176 [label="containingSymbol.Kind 305445"];
3177 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 305446"];
3178 [label="return SymbolKind.Namespace; 305447"];
3179 [label="if (containingSymbol.Kind == SymbolKind.Namespace)\n            {\n                defaultAccess = DeclarationModifiers.Internal;\n            }\n            else\n            {\n                allowedModifiers |= DeclarationModifiers.New;\n\n                if (((NamedTypeSymbol)containingSymbol).IsInterface)\n                {\n                    defaultAccess = DeclarationModifiers.Public;\n                }\n                else\n                {\n                    defaultAccess = DeclarationModifiers.Private;\n                }\n            } 305448"];
3180 [label="defaultAccess = DeclarationModifiers.Internal; 305449"];
3181 [label="switch (typeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Submission:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Sealed | DeclarationModifiers.Abstract\n                        | DeclarationModifiers.Unsafe;\n\n                    if (!this.IsRecord)\n                    {\n                        allowedModifiers |= DeclarationModifiers.Static;\n                    }\n\n                    break;\n                case TypeKind.Struct:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Ref | DeclarationModifiers.ReadOnly | DeclarationModifiers.Unsafe;\n                    break;\n                case TypeKind.Interface:\n                    allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Unsafe;\n                    break;\n                case TypeKind.Delegate:\n                    allowedModifiers |= DeclarationModifiers.Unsafe;\n                    break;\n            } 305450"];
3182 [label="allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Sealed | DeclarationModifiers.Abstract\n                        | DeclarationModifiers.Unsafe; 305451"];
3183 [label="allowedModifiers |= DeclarationModifiers.Partial | DeclarationModifiers.Sealed | DeclarationModifiers.Abstract\n                        | DeclarationModifiers.Unsafe; 305452"];
3184 [label="this.IsRecord 305453"];
3185 [label="get\n            {\n                return this.declaration.Declarations[0].Kind == DeclarationKind.Record;\n            } 305454"];
3186 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.Record; 305455"];
3187 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.Record; 305456"];
3188 [label="if (!this.IsRecord)\n                    {\n                        allowedModifiers |= DeclarationModifiers.Static;\n                    } 305457"];
3189 [label="allowedModifiers |= DeclarationModifiers.Static; 305458"];
3190 [label="bool modifierErrors; 305459"];
3191 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 305460"];
3192 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 305461"];
3193 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 305462"];
3194 [label="var mods = MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors); 305463"];
3195 [label="MakeAndCheckTypeModifiers(\n                defaultAccess,\n                allowedModifiers,\n                diagnostics,\n                out modifierErrors) 305464"];
3196 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers defaultAccess) 305465"];
3197 [label="param MakeAndCheckTypeModifiers(DeclarationModifiers allowedModifiers) 305466"];
3198 [label="param MakeAndCheckTypeModifiers(DiagnosticBag diagnostics) 305467"];
3199 [label="param MakeAndCheckTypeModifiers(out bool modifierErrors) 305468"];
3200 [label="param MakeAndCheckTypeModifiers(this) 305469"];
3201 [label="modifierErrors = false; 305470"];
3202 [label="var result = DeclarationModifiers.Unset; 305471"];
3203 [label="var partCount = declaration.Declarations.Length; 305472"];
3204 [label="var missingPartial = false; 305473"];
3205 [label="for (var i = 0; i < partCount; i++)\n            {\n                var decl = declaration.Declarations[i];\n                var mods = decl.Modifiers;\n\n                if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                }\n\n                if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n\n                if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                }\n\n            } 305474"];
3206 [label="for (var i = 0; i < partCount; i++)\n            {\n                var decl = declaration.Declarations[i];\n                var mods = decl.Modifiers;\n\n                if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                }\n\n                if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n\n                if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                }\n\n            } 305475"];
3207 [label="var decl = declaration.Declarations[i]; 305476"];
3208 [label="var mods = decl.Modifiers; 305477"];
3209 [label="if (partCount > 1 && (mods & DeclarationModifiers.Partial) == 0)\n                {\n                    missingPartial = true;\n                } 305478"];
3210 [label="if (!modifierErrors)\n                {\n                    mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors);\n\n                    // It is an error for the same modifier to appear multiple times.\n                    if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    }\n                } 305479"];
3211 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 305480"];
3212 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 305481"];
3213 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 305482"];
3214 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 305483"];
3215 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 305484"];
3216 [label="mods = ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors); 305485"];
3217 [label="ModifierUtils.CheckModifiers(\n                        mods, allowedModifiers, declaration.Declarations[i].NameLocation, diagnostics,\n                        modifierTokens: null, modifierErrors: out modifierErrors) 305486"];
3218 [label="param CheckModifiers(DeclarationModifiers modifiers) 305487"];
3219 [label="param CheckModifiers(DeclarationModifiers allowedModifiers) 305488"];
3220 [label="param CheckModifiers(Location errorLocation) 305489"];
3221 [label="param CheckModifiers(DiagnosticBag diagnostics) 305490"];
3222 [label="param CheckModifiers(SyntaxTokenList? modifierTokens) 305491"];
3223 [label="param CheckModifiers(out bool modifierErrors) 305492"];
3224 [label="modifierErrors = false; 305493"];
3225 [label="DeclarationModifiers errorModifiers = modifiers & ~allowedModifiers; 305494"];
3226 [label="DeclarationModifiers result = modifiers & allowedModifiers; 305495"];
3227 [label="while (errorModifiers != DeclarationModifiers.None)\n            {\n                DeclarationModifiers oneError = errorModifiers & ~(errorModifiers - 1);\n                Debug.Assert(oneError != DeclarationModifiers.None);\n                errorModifiers = errorModifiers & ~oneError;\n\n                switch (oneError)\n                {\n                    case DeclarationModifiers.Partial:\n                        // Provide a specialized error message in the case of partial.\n                        ReportPartialError(errorLocation, diagnostics, modifierTokens);\n                        break;\n\n                    default:\n                        diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, ConvertSingleModifierToSyntaxText(oneError));\n                        break;\n                }\n\n                modifierErrors = true;\n            } 305496"];
3228 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 305497"];
3229 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 305498"];
3230 [label="return result; 305499"];
3231 [label="if (!modifierErrors)\n                    {\n                        var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false);\n                        if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        }\n                    } 305500"];
3232 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 305501"];
3233 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 305502"];
3234 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 305503"];
3235 [label="ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false) 305504"];
3236 [label="param CheckAccessibility(DeclarationModifiers modifiers) 305505"];
3237 [label="param CheckAccessibility(Symbol symbol) 305506"];
3238 [label="param CheckAccessibility(bool isExplicitInterfaceImplementation) 305507"];
3239 [label="if (!IsValidAccessibility(modifiers))\n            {\n                // error CS0107: More than one protection modifier\n                return new CSDiagnosticInfo(ErrorCode.ERR_BadMemberProtection);\n            } 305508"];
3240 [label="IsValidAccessibility(modifiers) 305509"];
3241 [label="param IsValidAccessibility(DeclarationModifiers modifiers) 305510"];
3242 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                case DeclarationModifiers.Private:\n                case DeclarationModifiers.Protected:\n                case DeclarationModifiers.Internal:\n                case DeclarationModifiers.Public:\n                case DeclarationModifiers.ProtectedInternal:\n                case DeclarationModifiers.PrivateProtected:\n                    return true;\n\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return false;\n            } 305511"];
3243 [label="return true; 305512"];
3244 [label="symbol.Kind 305513"];
3245 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 305514"];
3246 [label="return SymbolKind.NamedType; 305515"];
3247 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 305516"];
3248 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 305517"];
3249 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 305518"];
3250 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 305519"];
3251 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 305520"];
3252 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                } 305521"];
3253 [label="return null; 305522"];
3254 [label="var info = ModifierUtils.CheckAccessibility(mods, this, isExplicitInterfaceImplementation: false); 305523"];
3255 [label="if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        } 305524"];
3256 [label="if (info != null)\n                        {\n                            diagnostics.Add(info, this.Locations[0]);\n                            modifierErrors = true;\n                        } 305525"];
3257 [label="if (result == DeclarationModifiers.Unset)\n                {\n                    result = mods;\n                }\n                else\n                {\n                    result |= mods;\n                } 305526"];
3258 [label="result = mods; 305527"];
3259 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 305528"];
3260 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 305529"];
3261 [label="if (missingPartial)\n            {\n                if ((result & DeclarationModifiers.Partial) == 0)\n                {\n                    // duplicate definitions\n                    switch (this.ContainingSymbol.Kind)\n                    {\n                        case SymbolKind.Namespace:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, declaration.Declarations[i].NameLocation, this.Name, this.ContainingSymbol);\n                                modifierErrors = true;\n                            }\n                            break;\n\n                        case SymbolKind.NamedType:\n                            for (var i = 1; i < partCount; i++)\n                            {\n                                if (ContainingType!.Locations.Length == 1 || ContainingType.IsPartial())\n                                    diagnostics.Add(ErrorCode.ERR_DuplicateNameInClass, declaration.Declarations[i].NameLocation, this.ContainingSymbol, this.Name);\n                                modifierErrors = true;\n                            }\n                            break;\n                    }\n                }\n                else\n                {\n                    for (var i = 0; i < partCount; i++)\n                    {\n                        var singleDeclaration = declaration.Declarations[i];\n                        var mods = singleDeclaration.Modifiers;\n                        if ((mods & DeclarationModifiers.Partial) == 0)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_MissingPartial, singleDeclaration.NameLocation, this.Name);\n                            modifierErrors = true;\n                        }\n                    }\n                }\n            } 305530"];
3262 [label="this.Name 305531"];
3263 [label="get\n            {\n                return declaration.Name;\n            } 305532"];
3264 [label="return declaration.Name; 305533"];
3265 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 305534"];
3266 [label="if (this.Name == SyntaxFacts.GetText(SyntaxKind.RecordKeyword))\n            {\n                foreach (var syntaxRef in SyntaxReferences)\n                {\n                    SyntaxToken? identifier = syntaxRef.GetSyntax() switch\n                    {\n                        BaseTypeDeclarationSyntax typeDecl => typeDecl.Identifier,\n                        DelegateDeclarationSyntax delegateDecl => delegateDecl.Identifier,\n                        _ => null\n                    };\n\n                    // Lafhis\n                    ReportTypeNamedRecord(identifier != null ? identifier.Value.Text : null, this.DeclaringCompilation, diagnostics, (identifier != null ? identifier.Value.GetLocation() : null) ?? Location.None);\n                }\n            } 305535"];
3267 [label="return result; 305536"];
3268 [label="(type, containingSymbol, unused) => HasInvalidTypeParameter(type, containingSymbol) 305537"];
3269 [label="s_hasInvalidTypeParameterFunc =\n            (type, containingSymbol, unused) => HasInvalidTypeParameter(type, containingSymbol) 305538"];
3270 [label="this.CheckUnsafeModifier(mods, diagnostics); 305539"];
3271 [label="this.CheckUnsafeModifier(mods, diagnostics); 305540"];
3272 [label="this.CheckUnsafeModifier(mods, diagnostics); 305541"];
3273 [label="this.CheckUnsafeModifier(mods, diagnostics) 305542"];
3274 [label="param CheckUnsafeModifier(this Symbol symbol) 305543"];
3275 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 305544"];
3276 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 305545"];
3277 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 305546"];
3278 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 305547"];
3279 [label="symbol.Locations 305548"];
3280 [label="get\n            {\n                return declaration.NameLocations.Cast<SourceLocation, Location>();\n            } 305549"];
3281 [label="return declaration.NameLocations.Cast<SourceLocation, Location>(); 305550"];
3282 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 305551"];
3283 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 305552"];
3284 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 305553"];
3285 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics) 305554"];
3286 [label="param CheckUnsafeModifier(this Symbol symbol) 305555"];
3287 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 305556"];
3288 [label="param CheckUnsafeModifier(Location errorLocation) 305557"];
3289 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 305558"];
3290 [label="if (((modifiers & DeclarationModifiers.Unsafe) == DeclarationModifiers.Unsafe) && !symbol.CompilationAllowsUnsafe())\n            {\n                Debug.Assert(errorLocation != null);\n                diagnostics.Add(ErrorCode.ERR_IllegalUnsafe, errorLocation);\n            } 305559"];
3291 [label="this.CheckUnsafeModifier(mods, diagnostics); 305560"];
3292 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 305561"];
3293 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 305562"];
3294 [label="if (!modifierErrors &&\n                (mods & DeclarationModifiers.Abstract) != 0 &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) != 0)\n            {\n                diagnostics.Add(ErrorCode.ERR_AbstractSealedStatic, Locations[0], this);\n            } 305563"];
3295 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 305564"];
3296 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 305565"];
3297 [label="if (!modifierErrors &&\n                (mods & (DeclarationModifiers.Sealed | DeclarationModifiers.Static)) == (DeclarationModifiers.Sealed | DeclarationModifiers.Static))\n            {\n                diagnostics.Add(ErrorCode.ERR_SealedStaticClass, Locations[0], this);\n            } 305566"];
3298 [label="switch (typeKind)\n            {\n                case TypeKind.Interface:\n                    mods |= DeclarationModifiers.Abstract;\n                    break;\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n                case TypeKind.Delegate:\n                    mods |= DeclarationModifiers.Sealed;\n                    break;\n            } 305567"];
3299 [label="return mods; 305568"];
3300 [label="foreach (var singleDeclaration in declaration.Declarations)\n            {\n                diagnostics.AddRange(singleDeclaration.Diagnostics);\n            } 305569"];
3301 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 305570"];
3302 [label="diagnostics.AddRange(singleDeclaration.Diagnostics); 305571"];
3303 [label="int access = (int)(modifiers & DeclarationModifiers.AccessibilityMask); 305572"];
3304 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 305573"];
3305 [label="if ((access & (access - 1)) != 0)\n            {   // more than one access modifier\n                if ((modifiers & DeclarationModifiers.Partial) != 0)\n                    diagnostics.Add(ErrorCode.ERR_PartialModifierConflict, Locations[0], this);\n                access = access & ~(access - 1); // narrow down to one access modifier\n                modifiers &= ~DeclarationModifiers.AccessibilityMask; // remove them all\n                modifiers |= (DeclarationModifiers)access; // except the one\n            } 305574"];
3306 [label="_declModifiers 305575"];
3307 [label="var specialType = access == (int)DeclarationModifiers.Public\n                ? MakeSpecialType()\n                : SpecialType.None; 305576"];
3308 [label="access == (int)DeclarationModifiers.Public 305577"];
3309 [label="MakeSpecialType() 305578"];
3310 [label="param MakeSpecialType(this) 305579"];
3311 [label="ContainingSymbol 305580"];
3312 [label="get\n            {\n                return _containingSymbol;\n            } 305581"];
3313 [label="return _containingSymbol; 305582"];
3314 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 305583"];
3315 [label="ContainingSymbol.Kind 305584"];
3316 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 305585"];
3317 [label="return SymbolKind.Namespace; 305586"];
3318 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 305587"];
3319 [label="ContainingSymbol 305588"];
3320 [label="get\n            {\n                return _containingSymbol;\n            } 305589"];
3321 [label="return _containingSymbol; 305590"];
3322 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 305591"];
3323 [label="ContainingSymbol.ContainingAssembly 305592"];
3324 [label="=> _module.ContainingAssembly 305593"];
3325 [label="_module.ContainingAssembly 305594"];
3326 [label="get\n            {\n                return _assemblySymbol;\n            } 305595"];
3327 [label="return _assemblySymbol; 305596"];
3328 [label="ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes 305597"];
3329 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 305598"];
3330 [label="this.CorLibrary 305599"];
3331 [label="get\n            {\n                return _corLibrary;\n            } 305600"];
3332 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 305601"];
3333 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 305602"];
3334 [label="if (ContainingSymbol.Kind == SymbolKind.Namespace &&\n                ContainingSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                //for a namespace, the emitted name is a dot-separated list of containing namespaces\n                var emittedName = ContainingSymbol.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat);\n                emittedName = MetadataHelpers.BuildQualifiedName(emittedName, MetadataName);\n\n                return SpecialTypes.GetTypeFromMetadataName(emittedName);\n            }\n            else\n            {\n                return SpecialType.None;\n            } 305603"];
3335 [label="return SpecialType.None; 305604"];
3336 [label="0 305605"];
3337 [label="SpecialTypeOffset = 0 305606"];
3338 [label="6 305607"];
3339 [label="SpecialTypeSize = 6 305608"];
3340 [label="SpecialTypeOffset + SpecialTypeSize 305609"];
3341 [label="ManagedKindOffset = SpecialTypeOffset + SpecialTypeSize 305610"];
3342 [label="2 305611"];
3343 [label="ManagedKindSize = 2 305612"];
3344 [label="ManagedKindOffset + ManagedKindSize 305613"];
3345 [label="FieldDefinitionsNotedOffset = ManagedKindOffset + ManagedKindSize 305614"];
3346 [label="1 305615"];
3347 [label="FieldDefinitionsNotedSize = 1 305616"];
3348 [label="FieldDefinitionsNotedOffset + FieldDefinitionsNotedSize 305617"];
3349 [label="FlattenedMembersIsSortedOffset = FieldDefinitionsNotedOffset + FieldDefinitionsNotedSize 305618"];
3350 [label="1 305619"];
3351 [label="FlattenedMembersIsSortedSize = 1 305620"];
3352 [label="FlattenedMembersIsSortedOffset + FlattenedMembersIsSortedSize 305621"];
3353 [label="TypeKindOffset = FlattenedMembersIsSortedOffset + FlattenedMembersIsSortedSize 305622"];
3354 [label="4 305623"];
3355 [label="TypeKindSize = 4 305624"];
3356 [label="TypeKindOffset + TypeKindSize 305625"];
3357 [label="NullableContextOffset = TypeKindOffset + TypeKindSize 305626"];
3358 [label="3 305627"];
3359 [label="NullableContextSize = 3 305628"];
3360 [label="1 305629"];
3361 [label="1 << SpecialTypeSize 305630"];
3362 [label="1 305631"];
3363 [label="(1 << SpecialTypeSize) - 1 305632"];
3364 [label="SpecialTypeMask = (1 << SpecialTypeSize) - 1 305633"];
3365 [label="1 305634"];
3366 [label="1 << ManagedKindSize 305635"];
3367 [label="1 305636"];
3368 [label="(1 << ManagedKindSize) - 1 305637"];
3369 [label="ManagedKindMask = (1 << ManagedKindSize) - 1 305638"];
3370 [label="1 305639"];
3371 [label="1 << TypeKindSize 305640"];
3372 [label="1 305641"];
3373 [label="(1 << TypeKindSize) - 1 305642"];
3374 [label="TypeKindMask = (1 << TypeKindSize) - 1 305643"];
3375 [label="1 305644"];
3376 [label="1 << NullableContextSize 305645"];
3377 [label="1 305646"];
3378 [label="(1 << NullableContextSize) - 1 305647"];
3379 [label="NullableContextMask = (1 << NullableContextSize) - 1 305648"];
3380 [label="1 305649"];
3381 [label="1 << FieldDefinitionsNotedOffset 305650"];
3382 [label="FieldDefinitionsNotedBit = 1 << FieldDefinitionsNotedOffset 305651"];
3383 [label="1 305652"];
3384 [label="1 << FlattenedMembersIsSortedOffset 305653"];
3385 [label="FlattenedMembersIsSortedBit = 1 << FlattenedMembersIsSortedOffset 305654"];
3386 [label="Debug.Assert(EnumUtilities.ContainsAllValues<SpecialType>(SpecialTypeMask)); 305655"];
3387 [label="Debug.Assert(EnumUtilities.ContainsAllValues<NullableContextKind>(NullableContextMask)); 305656"];
3388 [label="_flags = new Flags(specialType, typeKind); 305657"];
3389 [label="_flags = new Flags(specialType, typeKind); 305658"];
3390 [label="_flags = new Flags(specialType, typeKind); 305659"];
3391 [label="new Flags(specialType, typeKind) 305660"];
3392 [label="param Flags(SpecialType specialType) 305661"];
3393 [label="param Flags(TypeKind typeKind) 305662"];
3394 [label="param Flags(this) 305663"];
3395 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 305664"];
3396 [label="int specialTypeInt = ((int)specialType & SpecialTypeMask) << SpecialTypeOffset; 305665"];
3397 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 305666"];
3398 [label="int typeKindInt = ((int)typeKind & TypeKindMask) << TypeKindOffset; 305667"];
3399 [label="_flags = specialTypeInt | typeKindInt; 305668"];
3400 [label="_flags 305669"];
3401 [label="_flags 305670"];
3402 [label="this.ContainingType 305671"];
3403 [label="get\n            {\n                return _containingSymbol as NamedTypeSymbol;\n            } 305672"];
3404 [label="return _containingSymbol as NamedTypeSymbol; 305673"];
3405 [label="var containingType = this.ContainingType; 305674"];
3406 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 305675"];
3407 [label="if (containingType?.IsSealed == true && this.DeclaredAccessibility.HasProtected())\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), Locations[0], this);\n            } 305676"];
3408 [label="state.NotePartComplete(CompletionPart.TypeArguments); 305677"];
3409 [label="state.NotePartComplete(CompletionPart.TypeArguments) 305678"];
3410 [label="param NotePartComplete(CompletionPart part) 305679"];
3411 [label="param NotePartComplete(this) 305680"];
3412 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 305681"];
3413 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 305682"];
3414 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 305683"];
3415 [label="_lazyCustomAttributesBag 305684"];
3416 [label="_lazyDocComment 305685"];
3417 [label="_lazyExpandedDocComment 305686"];
3418 [label="_lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.Unknown 305687"];
3419 [label="_lazyDeclaredBases 305688"];
3420 [label="new UnsupportedMetadataTypeSymbol() 305689"];
3421 [label="param UnsupportedMetadataTypeSymbol(BadImageFormatException? mrEx = null) 305690"];
3422 [label="param UnsupportedMetadataTypeSymbol(this) 305691"];
3423 [label="param ErrorTypeSymbol(this) 305692"];
3424 [label="param ErrorTypeSymbol(TupleExtraData? tupleData = null) 305693"];
3425 [label="tupleData 305694"];
3426 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 305695"];
3427 [label="param NamedTypeSymbol(this) 305696"];
3428 [label="param TypeSymbol(this) 305697"];
3429 [label="param NamespaceOrTypeSymbol(this) 305698"];
3430 [label="param Symbol(this) 305699"];
3431 [label="_lazyISymbol 305700"];
3432 [label="_lazyAbstractMembers 305701"];
3433 [label="_lazyInterfaceInfo 305702"];
3434 [label="_lazyAdapter 305703"];
3435 [label="_hasNoBaseCycles 305704"];
3436 [label="_lazyTupleData 305705"];
3437 [label="_lazyTupleData 305706"];
3438 [label="_mrEx 305707"];
3439 [label="_mrEx 305708"];
3440 [label="UnknownResultType = new UnsupportedMetadataTypeSymbol() 305709"];
3441 [label="_lazyBaseType = ErrorTypeSymbol.UnknownResultType 305710"];
3442 [label="_lazyEnumValueField 305711"];
3443 [label="_lazyEnumUnderlyingType = ErrorTypeSymbol.UnknownResultType 305712"];
3444 [label="switch (declaration.Kind)\n            {\n                case DeclarationKind.Struct:\n                case DeclarationKind.Interface:\n                case DeclarationKind.Enum:\n                case DeclarationKind.Delegate:\n                case DeclarationKind.Class:\n                case DeclarationKind.Record:\n                    break;\n                default:\n                    Debug.Assert(false, 'bad declaration kind');\n                    break;\n            } 305713"];
3445 [label="containingSymbol.Kind 305714"];
3446 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 305715"];
3447 [label="return SymbolKind.Namespace; 305716"];
3448 [label="if (containingSymbol.Kind == SymbolKind.NamedType)\n            {\n                // Nested types are never unified.\n                _lazyIsExplicitDefinitionOfNoPiaLocalType = ThreeState.False;\n            } 305717"];
3449 [label="builder.Add(BuildSymbol(declaration, diagnostics)) 305718"];
3450 [label="param Add(NamespaceOrTypeSymbol symbol) 305719"];
3451 [label="param Add(this) 305720"];
3452 [label="symbol.Name 305721"];
3453 [label="get\n            {\n                return declaration.Name;\n            } 305722"];
3454 [label="return declaration.Name; 305723"];
3455 [label="string name = symbol.Name; 305724"];
3456 [label="object item; 305725"];
3457 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 305726"];
3458 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 305727"];
3459 [label="if (_dictionary.TryGetValue(name, out item))\n                {\n                    var builder = item as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder == null)\n                    {\n                        builder = ArrayBuilder<NamespaceOrTypeSymbol>.GetInstance();\n                        builder.Add((NamespaceOrTypeSymbol)item);\n                        _dictionary[name] = builder;\n                    }\n                    builder.Add(symbol);\n                }\n                else\n                {\n                    _dictionary[name] = symbol;\n                } 305728"];
3460 [label="_dictionary 305729"];
3461 [label="builder.CreateMap() 305730"];
3462 [label="param CreateMap(this) 305731"];
3463 [label="var result = new Dictionary<String, ImmutableArray<NamespaceOrTypeSymbol>>(_dictionary.Count, StringOrdinalComparer.Instance); 305732"];
3464 [label="var result = new Dictionary<String, ImmutableArray<NamespaceOrTypeSymbol>>(_dictionary.Count, StringOrdinalComparer.Instance); 305733"];
3465 [label="foreach (var kvp in _dictionary)\n                {\n                    object value = kvp.Value;\n                    ImmutableArray<NamespaceOrTypeSymbol> members;\n\n                    var builder = value as ArrayBuilder<NamespaceOrTypeSymbol>;\n                    if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    }\n\n                    result.Add(kvp.Key, members);\n                } 305734"];
3466 [label="object value = kvp.Value; 305735"];
3467 [label="ImmutableArray<NamespaceOrTypeSymbol> members; 305736"];
3468 [label="members 305737"];
3469 [label="var builder = value as ArrayBuilder<NamespaceOrTypeSymbol>; 305738"];
3470 [label="if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    } 305739"];
3471 [label="if (builder != null)\n                    {\n                        Debug.Assert(builder.Count > 1);\n                        bool hasNamespaces = false;\n                        for (int i = 0; (i < builder.Count) && !hasNamespaces; i++)\n                        {\n                            hasNamespaces |= (builder[i].Kind == SymbolKind.Namespace);\n                        }\n\n                        members = hasNamespaces\n                            ? builder.ToImmutable()\n                            : StaticCast<NamespaceOrTypeSymbol>.From(builder.ToDowncastedImmutable<NamedTypeSymbol>());\n\n                        builder.Free();\n                    }\n                    else\n                    {\n                        NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value;\n                        members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol));\n                    } 305740"];
3472 [label="NamespaceOrTypeSymbol symbol = (NamespaceOrTypeSymbol)value; 305741"];
3473 [label="symbol.Kind 305742"];
3474 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 305743"];
3475 [label="return SymbolKind.NamedType; 305744"];
3476 [label="members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol)); 305745"];
3477 [label="symbol.Kind == SymbolKind.Namespace 305746"];
3478 [label="members = symbol.Kind == SymbolKind.Namespace\n                            ? ImmutableArray.Create<NamespaceOrTypeSymbol>(symbol)\n                            : StaticCast<NamespaceOrTypeSymbol>.From(ImmutableArray.Create<NamedTypeSymbol>((NamedTypeSymbol)symbol)); 305747"];
3479 [label="result.Add(kvp.Key, members); 305748"];
3480 [label="result.Add(kvp.Key, members); 305749"];
3481 [label="result.Add(kvp.Key, members); 305750"];
3482 [label="return result; 305751"];
3483 [label="var result = builder.CreateMap(); 305752"];
3484 [label="CheckMembers(this, result, diagnostics); 305753"];
3485 [label="CheckMembers(this, result, diagnostics); 305754"];
3486 [label="CheckMembers(this, result, diagnostics); 305755"];
3487 [label="CheckMembers(this, result, diagnostics) 305756"];
3488 [label="param CheckMembers(NamespaceSymbol @namespace) 305757"];
3489 [label="param CheckMembers(Dictionary<string, ImmutableArray<NamespaceOrTypeSymbol>> result) 305758"];
3490 [label="param CheckMembers(DiagnosticBag diagnostics) 305759"];
3491 [label="var memberOfArity = new Symbol[10]; 305760"];
3492 [label="MergedNamespaceSymbol mergedAssemblyNamespace = null; 305761"];
3493 [label="@namespace.ContainingAssembly 305762"];
3494 [label="=> _module.ContainingAssembly 305763"];
3495 [label="_module.ContainingAssembly 305764"];
3496 [label="get\n            {\n                return _assemblySymbol;\n            } 305765"];
3497 [label="return _assemblySymbol; 305766"];
3498 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 305767"];
3499 [label="@namespace.ContainingAssembly.Modules 305768"];
3500 [label="get\n            {\n                return _modules;\n            } 305769"];
3501 [label="if (@namespace.ContainingAssembly.Modules.Length > 1)\n            {\n                mergedAssemblyNamespace = @namespace.ContainingAssembly.GetAssemblyNamespace(@namespace) as MergedNamespaceSymbol;\n            } 305770"];
3502 [label="foreach (var name in result.Keys)\n            {\n                Array.Clear(memberOfArity, 0, memberOfArity.Length);\n                foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                }\n            } 305771"];
3503 [label="foreach (var name in result.Keys)\n            {\n                Array.Clear(memberOfArity, 0, memberOfArity.Length);\n                foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                }\n            } 305772"];
3504 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 305773"];
3505 [label="Array.Clear(memberOfArity, 0, memberOfArity.Length); 305774"];
3506 [label="foreach (var symbol in result[name])\n                {\n                    var nts = symbol as NamedTypeSymbol;\n                    var arity = ((object)nts != null) ? nts.Arity : 0;\n                    if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    }\n\n                    var other = memberOfArity[arity];\n\n                    if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    }\n\n                    memberOfArity[arity] = symbol;\n\n                    if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    }\n                } 305775"];
3507 [label="var nts = symbol as NamedTypeSymbol; 305776"];
3508 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 305777"];
3509 [label="var arity = ((object)nts != null) ? nts.Arity : 0; 305778"];
3510 [label="((object)nts != null) 305779"];
3511 [label="nts.Arity 305780"];
3512 [label="get\n            {\n                return declaration.Arity;\n            } 305781"];
3513 [label="return declaration.Arity; 305782"];
3514 [label="if (arity >= memberOfArity.Length)\n                    {\n                        Array.Resize(ref memberOfArity, arity + 1);\n                    } 305783"];
3515 [label="var other = memberOfArity[arity]; 305784"];
3516 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 305785"];
3517 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 305786"];
3518 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 305787"];
3519 [label="if ((object)other == null && (object)mergedAssemblyNamespace != null)\n                    {\n                        // Check for collision with declarations from added modules.\n                        foreach (NamespaceSymbol constituent in mergedAssemblyNamespace.ConstituentNamespaces)\n                        {\n                            if ((object)constituent != (object)@namespace)\n                            {\n                                // For whatever reason native compiler only detects conflicts against types.\n                                // It doesn't complain when source declares a type with the same name as \n                                // a namespace in added module, but complains when source declares a namespace \n                                // with the same name as a type in added module.\n                                var types = constituent.GetTypeMembers(symbol.Name, arity);\n\n                                if (types.Length > 0)\n                                {\n                                    other = types[0];\n                                    // Since the error doesn't specify what added module this type belongs to, we can stop searching\n                                    // at the first match.\n                                    break;\n                                }\n                            }\n                        }\n                    } 305788"];
3520 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 305789"];
3521 [label="if ((object)other != null)\n                    {\n                        // Lafhis\n                        if (nts is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)nts).IsPartial == true &&\n                            other is SourceNamedTypeSymbol && ((SourceNamedTypeSymbol)other).IsPartial == true)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, symbol.Locations.FirstOrNone(), symbol);\n                        }\n                        else\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DuplicateNameInNS, symbol.Locations.FirstOrNone(), name, @namespace);\n                        }\n                    } 305790"];
3522 [label="memberOfArity[arity] 305791"];
3523 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 305792"];
3524 [label="if ((object)nts != null)\n                    {\n                        //types declared at the namespace level may only have declared accessibility of public or internal (Section 3.5.1)\n                        Accessibility declaredAccessibility = nts.DeclaredAccessibility;\n                        if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        }\n                    } 305793"];
3525 [label="nts.DeclaredAccessibility 305794"];
3526 [label="get\n            {\n                return ModifierUtils.EffectiveAccessibility(_declModifiers);\n            } 305795"];
3527 [label="return ModifierUtils.EffectiveAccessibility(_declModifiers); 305796"];
3528 [label="ModifierUtils.EffectiveAccessibility(_declModifiers) 305797"];
3529 [label="param EffectiveAccessibility(DeclarationModifiers modifiers) 305798"];
3530 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                    return Accessibility.NotApplicable; // for explicit interface implementation\n                case DeclarationModifiers.Private:\n                    return Accessibility.Private;\n                case DeclarationModifiers.Protected:\n                    return Accessibility.Protected;\n                case DeclarationModifiers.Internal:\n                    return Accessibility.Internal;\n                case DeclarationModifiers.Public:\n                    return Accessibility.Public;\n                case DeclarationModifiers.ProtectedInternal:\n                    return Accessibility.ProtectedOrInternal;\n                case DeclarationModifiers.PrivateProtected:\n                    return Accessibility.ProtectedAndInternal;\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return Accessibility.Public;\n            } 305799"];
3531 [label="return Accessibility.Public; 305800"];
3532 [label="Accessibility declaredAccessibility = nts.DeclaredAccessibility; 305801"];
3533 [label="if (declaredAccessibility != Accessibility.Public && declaredAccessibility != Accessibility.Internal)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_NoNamespacePrivate, symbol.Locations.FirstOrNone());\n                        } 305802"];
3534 [label="CheckMembers(this, result, diagnostics); 305803"];
3535 [label="return result; 305804"];
3536 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 305805"];
3537 [label="if (Interlocked.CompareExchange(ref _nameToMembersMap, MakeNameToMembersMap(diagnostics), null) == null)\n                {\n                    // NOTE: the following is not cancellable.  Once we've set the\n                    // members, we *must* do the following to make sure we're in a consistent state.\n                    this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics);\n                    RegisterDeclaredCorTypes();\n\n                    // We may produce a SymbolDeclaredEvent for the enclosing namespace before events for its contained members\n                    DeclaringCompilation.SymbolDeclaredEvent(this);\n                    var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap);\n                    Debug.Assert(wasSetThisThread);\n                } 305806"];
3538 [label="this.DeclaringCompilation 305807"];
3539 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 305808"];
3540 [label="this.Kind 305809"];
3541 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 305810"];
3542 [label="return SymbolKind.Namespace; 305811"];
3543 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 305812"];
3544 [label="this.ContainingModule 305813"];
3545 [label="get\n            {\n                return _module;\n            } 305814"];
3546 [label="return _module; 305815"];
3547 [label="var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol; 305816"];
3548 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 305817"];
3549 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 305818"];
3550 [label="(object)sourceModuleSymbol == null 305819"];
3551 [label="sourceModuleSymbol.DeclaringCompilation 305820"];
3552 [label="this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics); 305821"];
3553 [label="this.DeclaringCompilation.DeclarationDiagnostics 305822"];
3554 [label="get\n            {\n                // We should only be placing diagnostics in this bag until\n                // we are done gathering declaration diagnostics. Assert that is\n                // the case. But since we have bugs (see https://github.com/dotnet/roslyn/issues/846)\n                // we disable the assertion until they are fixed.\n                Debug.Assert(!_declarationDiagnosticsFrozen || true);\n                if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                }\n\n                return _lazyDeclarationDiagnostics;\n            } 305823"];
3555 [label="Debug.Assert(!_declarationDiagnosticsFrozen || true); 305824"];
3556 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 305825"];
3557 [label="if (_lazyDeclarationDiagnostics == null)\n                {\n                    var diagnostics = new DiagnosticBag();\n                    Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null);\n                } 305826"];
3558 [label="var diagnostics = new DiagnosticBag(); 305827"];
3559 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 305828"];
3560 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 305829"];
3561 [label="Interlocked.CompareExchange(ref _lazyDeclarationDiagnostics, diagnostics, null); 305830"];
3562 [label="return _lazyDeclarationDiagnostics; 305831"];
3563 [label="this.DeclaringCompilation.DeclarationDiagnostics.AddRange(diagnostics); 305832"];
3564 [label="RegisterDeclaredCorTypes() 305833"];
3565 [label="param RegisterDeclaredCorTypes(this) 305834"];
3566 [label="ContainingAssembly 305835"];
3567 [label="=> _module.ContainingAssembly 305836"];
3568 [label="_module.ContainingAssembly 305837"];
3569 [label="get\n            {\n                return _assemblySymbol;\n            } 305838"];
3570 [label="return _assemblySymbol; 305839"];
3571 [label="AssemblySymbol containingAssembly = ContainingAssembly; 305840"];
3572 [label="containingAssembly.KeepLookingForDeclaredSpecialTypes 305841"];
3573 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 305842"];
3574 [label="this.CorLibrary 305843"];
3575 [label="get\n            {\n                return _corLibrary;\n            } 305844"];
3576 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 305845"];
3577 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 305846"];
3578 [label="if (containingAssembly.KeepLookingForDeclaredSpecialTypes)\n            {\n                // Register newly declared COR types\n                foreach (var array in _nameToMembersMap.Values)\n                {\n                    foreach (var member in array)\n                    {\n                        var type = member as NamedTypeSymbol;\n\n                        if ((object)type != null && type.SpecialType != SpecialType.None)\n                        {\n                            containingAssembly.RegisterDeclaredSpecialType(type);\n\n                            if (!containingAssembly.KeepLookingForDeclaredSpecialTypes)\n                            {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } 305847"];
3579 [label="RegisterDeclaredCorTypes(); 305848"];
3580 [label="DeclaringCompilation 305849"];
3581 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 305850"];
3582 [label="this.Kind 305851"];
3583 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 305852"];
3584 [label="return SymbolKind.Namespace; 305853"];
3585 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 305854"];
3586 [label="this.ContainingModule 305855"];
3587 [label="get\n            {\n                return _module;\n            } 305856"];
3588 [label="return _module; 305857"];
3589 [label="return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation; 305858"];
3590 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 305859"];
3591 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 305860"];
3592 [label="DeclaringCompilation.SymbolDeclaredEvent(this) 305861"];
3593 [label="param SymbolDeclaredEvent(Symbol symbol) 305862"];
3594 [label="param SymbolDeclaredEvent(this) 305863"];
3595 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 305864"];
3596 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 305865"];
3597 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 305866"];
3598 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 305867"];
3599 [label="EventQueue?.TryEnqueue(new SymbolDeclaredCompilationEvent(this, symbol.GetPublicSymbol())); 305868"];
3600 [label="DeclaringCompilation.SymbolDeclaredEvent(this); 305869"];
3601 [label="var wasSetThisThread = _state.NotePartComplete(CompletionPart.NameToMembersMap); 305870"];
3602 [label="_state.NotePartComplete(CompletionPart.NameToMembersMap) 305871"];
3603 [label="param NotePartComplete(CompletionPart part) 305872"];
3604 [label="param NotePartComplete(this) 305873"];
3605 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 305874"];
3606 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 305875"];
3607 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 305876"];
3608 [label="Debug.Assert(wasSetThisThread); 305877"];
3609 [label="diagnostics.Free(); 305878"];
3610 [label="return _nameToMembersMap; 305879"];
3611 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 305880"];
3612 [label="GetTypesFromMemberMap(GetNameToMembersMap()) 305881"];
3613 [label="param GetTypesFromMemberMap(Dictionary<string, ImmutableArray<NamespaceOrTypeSymbol>> map) 305882"];
3614 [label="var dictionary = new Dictionary<string, ImmutableArray<NamedTypeSymbol>>(StringOrdinalComparer.Instance); 305883"];
3615 [label="foreach (var kvp in map)\n            {\n                ImmutableArray<NamespaceOrTypeSymbol> members = kvp.Value;\n\n                bool hasType = false;\n                bool hasNamespace = false;\n\n                foreach (var symbol in members)\n                {\n                    if (symbol.Kind == SymbolKind.NamedType)\n                    {\n                        hasType = true;\n                        if (hasNamespace)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(symbol.Kind == SymbolKind.Namespace);\n                        hasNamespace = true;\n                        if (hasType)\n                        {\n                            break;\n                        }\n                    }\n                }\n\n                if (hasType)\n                {\n                    if (hasNamespace)\n                    {\n                        dictionary.Add(kvp.Key, members.OfType<NamedTypeSymbol>().AsImmutable());\n                    }\n                    else\n                    {\n                        dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>());\n                    }\n                }\n            } 305884"];
3616 [label="ImmutableArray<NamespaceOrTypeSymbol> members = kvp.Value; 305885"];
3617 [label="bool hasType = false; 305886"];
3618 [label="bool hasNamespace = false; 305887"];
3619 [label="foreach (var symbol in members)\n                {\n                    if (symbol.Kind == SymbolKind.NamedType)\n                    {\n                        hasType = true;\n                        if (hasNamespace)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(symbol.Kind == SymbolKind.Namespace);\n                        hasNamespace = true;\n                        if (hasType)\n                        {\n                            break;\n                        }\n                    }\n                } 305888"];
3620 [label="symbol.Kind 305889"];
3621 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 305890"];
3622 [label="if (symbol.Kind == SymbolKind.NamedType)\n                    {\n                        hasType = true;\n                        if (hasNamespace)\n                        {\n                            break;\n                        }\n                    }\n                    else\n                    {\n                        Debug.Assert(symbol.Kind == SymbolKind.Namespace);\n                        hasNamespace = true;\n                        if (hasType)\n                        {\n                            break;\n                        }\n                    } 305891"];
3623 [label="hasType = true; 305892"];
3624 [label="if (hasNamespace)\n                        {\n                            break;\n                        } 305893"];
3625 [label="if (hasType)\n                {\n                    if (hasNamespace)\n                    {\n                        dictionary.Add(kvp.Key, members.OfType<NamedTypeSymbol>().AsImmutable());\n                    }\n                    else\n                    {\n                        dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>());\n                    }\n                } 305894"];
3626 [label="if (hasNamespace)\n                    {\n                        dictionary.Add(kvp.Key, members.OfType<NamedTypeSymbol>().AsImmutable());\n                    }\n                    else\n                    {\n                        dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>());\n                    } 305895"];
3627 [label="dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>()); 305896"];
3628 [label="dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>()); 305897"];
3629 [label="dictionary.Add(kvp.Key, members.As<NamedTypeSymbol>()); 305898"];
3630 [label="return dictionary; 305899"];
3631 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 305900"];
3632 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 305901"];
3633 [label="Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null); 305902"];
3634 [label="return _nameToTypeMembersMap; 305903"];
3635 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 305904"];
3636 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 305905"];
3637 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 305906"];
3638 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 305907"];
3639 [label="this.GetNameToTypeMembersMap().TryGetValue(name, out members) 305908"];
3640 [label="var actual = string.Join(', ', typeSym.GetMembers().Select(symbol => symbol.ToTestDisplayString()).OrderBy(name => name)); 305909"];
3641 [label="typeSym.GetMembers() 305910"];
3642 [label="param GetMembers(this) 305911"];
3643 [label="_flags.FlattenedMembersIsSorted 305912"];
3644 [label="get { return (_flags & FlattenedMembersIsSortedBit) != 0; } 305913"];
3645 [label="return (_flags & FlattenedMembersIsSortedBit) != 0; 305914"];
3646 [label="return (_flags & FlattenedMembersIsSortedBit) != 0; 305915"];
3647 [label="if (_flags.FlattenedMembersIsSorted)\n            {\n                return _lazyMembersFlattened;\n            }\n            else\n            {\n                var allMembers = this.GetMembersUnordered();\n\n                if (allMembers.Length > 1)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyMembersFlattened, allMembers);\n                }\n\n                _flags.SetFlattenedMembersIsSorted();\n                return allMembers;\n            } 305916"];
3648 [label="this.GetMembersUnordered() 305917"];
3649 [label="param GetMembersUnordered(this) 305918"];
3650 [label="var result = _lazyMembersFlattened; 305919"];
3651 [label="if (result.IsDefault)\n            {\n                result = GetMembersByName().Flatten(null);  // do not sort.\n                ImmutableInterlocked.InterlockedInitialize(ref _lazyMembersFlattened, result);\n                result = _lazyMembersFlattened;\n            } 305920"];
3652 [label="GetMembersByName() 305921"];
3653 [label="param GetMembersByName(this) 305922"];
3654 [label="if (this.state.HasComplete(CompletionPart.Members))\n            {\n                return _lazyMembersDictionary!;\n            } 305923"];
3655 [label="this.state.HasComplete(CompletionPart.Members) 305924"];
3656 [label="param HasComplete(CompletionPart part) 305925"];
3657 [label="param HasComplete(this) 305926"];
3658 [label="return (_completeParts & (int)part) == (int)part; 305927"];
3659 [label="GetMembersByNameSlow() 305928"];
3660 [label="param GetMembersByNameSlow(this) 305929"];
3661 [label="if (_lazyMembersDictionary == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                var membersDictionary = MakeAllMembers(diagnostics);\n\n                if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                }\n\n                diagnostics.Free();\n            } 305930"];
3662 [label="if (_lazyMembersDictionary == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                var membersDictionary = MakeAllMembers(diagnostics);\n\n                if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                }\n\n                diagnostics.Free();\n            } 305931"];
3663 [label="var diagnostics = DiagnosticBag.GetInstance(); 305932"];
3664 [label="var membersDictionary = MakeAllMembers(diagnostics); 305933"];
3665 [label="MakeAllMembers(diagnostics) 305934"];
3666 [label="param MakeAllMembers(DiagnosticBag diagnostics) 305935"];
3667 [label="param MakeAllMembers(this) 305936"];
3668 [label="Dictionary<string, ImmutableArray<Symbol>> membersByName; 305937"];
3669 [label="GetMembersAndInitializers() 305938"];
3670 [label="param GetMembersAndInitializers(this) 305939"];
3671 [label="var membersAndInitializers = _lazyMembersAndInitializers; 305940"];
3672 [label="if (membersAndInitializers != null)\n            {\n                return membersAndInitializers;\n            } 305941"];
3673 [label="if (membersAndInitializers != null)\n            {\n                return membersAndInitializers;\n            } 305942"];
3674 [label="var diagnostics = DiagnosticBag.GetInstance(); 305943"];
3675 [label="membersAndInitializers = BuildMembersAndInitializers(diagnostics); 305944"];
3676 [label="BuildMembersAndInitializers(diagnostics) 305945"];
3677 [label="param BuildMembersAndInitializers(DiagnosticBag diagnostics) 305946"];
3678 [label="param BuildMembersAndInitializers(this) 305947"];
3679 [label="getDeclaredMembersAndInitializers() 305948"];
3680 [label="DeclaredMembersAndInitializers? getDeclaredMembersAndInitializers()\n            {\n                var declaredMembersAndInitializers = _lazyDeclaredMembersAndInitializers;\n                if (declaredMembersAndInitializers != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    return declaredMembersAndInitializers;\n                }\n\n                if (Volatile.Read(ref _lazyMembersAndInitializers) is not null)\n                {\n                    // We're previously computed declared members and already cleared them out\n                    // No need to compute them again\n                    return null;\n                }\n\n                var diagnostics = DiagnosticBag.GetInstance();\n                declaredMembersAndInitializers = buildDeclaredMembersAndInitializers(diagnostics);\n\n                var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel);\n                if (alreadyKnown != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    diagnostics.Free();\n                    return alreadyKnown;\n                }\n\n                AddDeclarationDiagnostics(diagnostics);\n                diagnostics.Free();\n\n                return declaredMembersAndInitializers!;\n            } 305949"];
3681 [label="var declaredMembersAndInitializers = _lazyDeclaredMembersAndInitializers; 305950"];
3682 [label="if (declaredMembersAndInitializers != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    return declaredMembersAndInitializers;\n                } 305951"];
3683 [label="if (Volatile.Read(ref _lazyMembersAndInitializers) is not null)\n                {\n                    // We're previously computed declared members and already cleared them out\n                    // No need to compute them again\n                    return null;\n                } 305952"];
3684 [label="var diagnostics = DiagnosticBag.GetInstance(); 305953"];
3685 [label="declaredMembersAndInitializers = buildDeclaredMembersAndInitializers(diagnostics); 305954"];
3686 [label="buildDeclaredMembersAndInitializers(diagnostics) 305955"];
3687 [label="DeclaredMembersAndInitializers? buildDeclaredMembersAndInitializers(DiagnosticBag diagnostics)\n            {\n                var builder = new DeclaredMembersAndInitializersBuilder();\n                AddDeclaredNontypeMembers(builder, diagnostics);\n\n                switch (TypeKind)\n                {\n                    case TypeKind.Struct:\n                        CheckForStructBadInitializers(builder, diagnostics);\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: false, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Enum:\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Class:\n                    case TypeKind.Interface:\n                    case TypeKind.Submission:\n                        // No additional checking required.\n                        break;\n\n                    default:\n                        break;\n                }\n\n                if (IsTupleType)\n                {\n                    builder.AddOrWrapTupleMembers(this);\n                }\n\n                if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                }\n\n                return builder.ToReadOnlyAndFree();\n            } 305956"];
3688 [label="DeclaredMembersAndInitializers? buildDeclaredMembersAndInitializers(DiagnosticBag diagnostics)\n            {\n                var builder = new DeclaredMembersAndInitializersBuilder();\n                AddDeclaredNontypeMembers(builder, diagnostics);\n\n                switch (TypeKind)\n                {\n                    case TypeKind.Struct:\n                        CheckForStructBadInitializers(builder, diagnostics);\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: false, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Enum:\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Class:\n                    case TypeKind.Interface:\n                    case TypeKind.Submission:\n                        // No additional checking required.\n                        break;\n\n                    default:\n                        break;\n                }\n\n                if (IsTupleType)\n                {\n                    builder.AddOrWrapTupleMembers(this);\n                }\n\n                if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                }\n\n                return builder.ToReadOnlyAndFree();\n            } 305957"];
3689 [label="var builder = new DeclaredMembersAndInitializersBuilder(); 305958"];
3690 [label="new DeclaredMembersAndInitializersBuilder() 305959"];
3691 [label="param DeclaredMembersAndInitializersBuilder(this) 305960"];
3692 [label="ArrayBuilder<Symbol>.GetInstance() 305961"];
3693 [label="NonTypeMembers = ArrayBuilder<Symbol>.GetInstance() 305962"];
3694 [label="ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 305963"];
3695 [label="StaticInitializers = ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 305964"];
3696 [label="ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 305965"];
3697 [label="InstanceInitializers = ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>>.GetInstance() 305966"];
3698 [label="HaveIndexers 305967"];
3699 [label="RecordDeclarationWithParameters 305968"];
3700 [label="RecordPrimaryConstructor 305969"];
3701 [label="1 305970"];
3702 [label="InstanceInitializersIndexForRecordDeclarationWithParameters = -1 305971"];
3703 [label="IsNullableEnabledForInstanceConstructorsAndFields 305972"];
3704 [label="IsNullableEnabledForStaticConstructorsAndFields 305973"];
3705 [label="AddDeclaredNontypeMembers(builder, diagnostics); 305974"];
3706 [label="AddDeclaredNontypeMembers(builder, diagnostics); 305975"];
3707 [label="AddDeclaredNontypeMembers(builder, diagnostics) 305976"];
3708 [label="param AddDeclaredNontypeMembers(DeclaredMembersAndInitializersBuilder builder) 305977"];
3709 [label="param AddDeclaredNontypeMembers(DiagnosticBag diagnostics) 305978"];
3710 [label="param AddDeclaredNontypeMembers(this) 305979"];
3711 [label="foreach (var decl in this.declaration.Declarations)\n            {\n                if (!decl.HasAnyNontypeMembers)\n                {\n                    continue;\n                }\n\n                if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                }\n\n                var syntax = decl.SyntaxReference.GetSyntax();\n\n                switch (syntax.Kind())\n                {\n                    case SyntaxKind.EnumDeclaration:\n                        AddEnumMembers(builder, (EnumDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.DelegateDeclaration:\n                        SourceDelegateMethodSymbol.AddDelegateMembers(this, builder.NonTypeMembers, (DelegateDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.NamespaceDeclaration:\n                        // The members of a global anonymous type is in a syntax tree of a namespace declaration or a compilation unit.\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((NamespaceDeclarationSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.CompilationUnit:\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((CompilationUnitSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.ClassDeclaration:\n                    case SyntaxKind.InterfaceDeclaration:\n                    case SyntaxKind.StructDeclaration:\n                        var typeDecl = (TypeDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.RecordDeclaration:\n                        var recordDecl = (RecordDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder,\n                            instanceInitializers: noteRecordParameters(recordDecl, builder, diagnostics),\n                            recordDecl.Members,\n                            diagnostics);\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(syntax.Kind());\n                }\n            } 305980"];
3712 [label="if (!decl.HasAnyNontypeMembers)\n                {\n                    continue;\n                } 305981"];
3713 [label="if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                } 305982"];
3714 [label="var syntax = decl.SyntaxReference.GetSyntax(); 305983"];
3715 [label="switch (syntax.Kind())\n                {\n                    case SyntaxKind.EnumDeclaration:\n                        AddEnumMembers(builder, (EnumDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.DelegateDeclaration:\n                        SourceDelegateMethodSymbol.AddDelegateMembers(this, builder.NonTypeMembers, (DelegateDeclarationSyntax)syntax, diagnostics);\n                        break;\n\n                    case SyntaxKind.NamespaceDeclaration:\n                        // The members of a global anonymous type is in a syntax tree of a namespace declaration or a compilation unit.\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((NamespaceDeclarationSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.CompilationUnit:\n                        AddNonTypeMembers(builder, instanceInitializers: null, ((CompilationUnitSyntax)syntax).Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.ClassDeclaration:\n                    case SyntaxKind.InterfaceDeclaration:\n                    case SyntaxKind.StructDeclaration:\n                        var typeDecl = (TypeDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics);\n                        break;\n\n                    case SyntaxKind.RecordDeclaration:\n                        var recordDecl = (RecordDeclarationSyntax)syntax;\n                        AddNonTypeMembers(builder,\n                            instanceInitializers: noteRecordParameters(recordDecl, builder, diagnostics),\n                            recordDecl.Members,\n                            diagnostics);\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(syntax.Kind());\n                } 305984"];
3716 [label="var typeDecl = (TypeDeclarationSyntax)syntax; 305985"];
3717 [label="AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics); 305986"];
3718 [label="AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics); 305987"];
3719 [label="AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics); 305988"];
3720 [label="AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics); 305989"];
3721 [label="AddNonTypeMembers(builder, instanceInitializers: null, typeDecl.Members, diagnostics) 305990"];
3722 [label="param AddNonTypeMembers(DeclaredMembersAndInitializersBuilder builder) 305991"];
3723 [label="param AddNonTypeMembers(ArrayBuilder<FieldOrPropertyInitializer>? instanceInitializers) 305992"];
3724 [label="param AddNonTypeMembers(SyntaxList<MemberDeclarationSyntax> members) 305993"];
3725 [label="param AddNonTypeMembers(DiagnosticBag diagnostics) 305994"];
3726 [label="param AddNonTypeMembers(this) 305995"];
3727 [label="if (members.Count == 0)\n            {\n                AddInitializers(builder.InstanceInitializers, instanceInitializers);\n                return;\n            } 305996"];
3728 [label="if (members.Count == 0)\n            {\n                AddInitializers(builder.InstanceInitializers, instanceInitializers);\n                return;\n            } 305997"];
3729 [label="var firstMember = members[0]; 305998"];
3730 [label="var firstMember = members[0]; 305999"];
3731 [label="var bodyBinder = this.GetBinder(firstMember); 306000"];
3732 [label="this.GetBinder(firstMember) 306001"];
3733 [label="param GetBinder(CSharpSyntaxNode syntaxNode) 306002"];
3734 [label="param GetBinder(this) 306003"];
3735 [label="this.DeclaringCompilation 306004"];
3736 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 306005"];
3737 [label="this.Kind 306006"];
3738 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 306007"];
3739 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 306008"];
3740 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 306009"];
3741 [label="this.ContainingSymbol 306010"];
3742 [label="get\n            {\n                return _containingSymbol;\n            } 306011"];
3743 [label="return _containingSymbol; 306012"];
3744 [label="var container = this.ContainingSymbol; 306013"];
3745 [label="return (object)container != null ? container.ContainingModule : null; 306014"];
3746 [label="return (object)container != null ? container.ContainingModule : null; 306015"];
3747 [label="(object)container != null 306016"];
3748 [label="container.ContainingModule 306017"];
3749 [label="return this.DeclaringCompilation.GetBinder(syntaxNode); 306018"];
3750 [label="return this.DeclaringCompilation.GetBinder(syntaxNode); 306019"];
3751 [label="this.DeclaringCompilation.GetBinder(syntaxNode) 306020"];
3752 [label="param GetBinder(CSharpSyntaxNode syntax) 306021"];
3753 [label="param GetBinder(this) 306022"];
3754 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 306023"];
3755 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 306024"];
3756 [label="GetBinderFactory(syntax.SyntaxTree) 306025"];
3757 [label="param GetBinderFactory(SyntaxTree syntaxTree) 306026"];
3758 [label="param GetBinderFactory(bool ignoreAccessibility = false) 306027"];
3759 [label="param GetBinderFactory(this) 306028"];
3760 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 306029"];
3761 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 306030"];
3762 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 306031"];
3763 [label="return GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories); 306032"];
3764 [label="GetBinderFactory(syntaxTree, ignoreAccessibility: false, ref _binderFactories) 306033"];
3765 [label="param GetBinderFactory(SyntaxTree syntaxTree) 306034"];
3766 [label="param GetBinderFactory(bool ignoreAccessibility) 306035"];
3767 [label="param GetBinderFactory(ref WeakReference<BinderFactory>[]? cachedBinderFactories) 306036"];
3768 [label="param GetBinderFactory(this) 306037"];
3769 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 306038"];
3770 [label="ignoreAccessibility 306039"];
3771 [label="_binderFactories 306040"];
3772 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 306041"];
3773 [label="Debug.Assert(System.Runtime.CompilerServices.Unsafe.AreSame(ref cachedBinderFactories, ref ignoreAccessibility ? ref _ignoreAccessibilityBinderFactories : ref _binderFactories)); 306042"];
3774 [label="var treeNum = GetSyntaxTreeOrdinal(syntaxTree); 306043"];
3775 [label="GetSyntaxTreeOrdinal(syntaxTree) 306044"];
3776 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 306045"];
3777 [label="param GetSyntaxTreeOrdinal(this) 306046"];
3778 [label="Debug.Assert(this.ContainsSyntaxTree(tree)); 306047"];
3779 [label="this.ContainsSyntaxTree(tree) 306048"];
3780 [label="param ContainsSyntaxTree(SyntaxTree? syntaxTree) 306049"];
3781 [label="param ContainsSyntaxTree(this) 306050"];
3782 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 306051"];
3783 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 306052"];
3784 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 306053"];
3785 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 306054"];
3786 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 306055"];
3787 [label="return _syntaxAndDeclarations.GetLazyState().OrdinalMap[tree]; 306056"];
3788 [label="WeakReference<BinderFactory>[]? binderFactories = cachedBinderFactories; 306057"];
3789 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 306058"];
3790 [label="if (binderFactories == null)\n            {\n                binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length];\n                binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories;\n            } 306059"];
3791 [label="this.SyntaxTrees 306060"];
3792 [label="return _syntaxAndDeclarations.GetLazyState().SyntaxTrees; 306061"];
3793 [label="binderFactories = new WeakReference<BinderFactory>[this.SyntaxTrees.Length]; 306062"];
3794 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 306063"];
3795 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 306064"];
3796 [label="binderFactories = Interlocked.CompareExchange(ref cachedBinderFactories, binderFactories, null) ?? binderFactories; 306065"];
3797 [label="BinderFactory? previousFactory; 306066"];
3798 [label="var previousWeakReference = binderFactories[treeNum]; 306067"];
3799 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 306068"];
3800 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 306069"];
3801 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 306070"];
3802 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 306071"];
3803 [label="return AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]); 306072"];
3804 [label="AddNewFactory(syntaxTree, ignoreAccessibility, ref binderFactories[treeNum]) 306073"];
3805 [label="param AddNewFactory(SyntaxTree syntaxTree) 306074"];
3806 [label="param AddNewFactory(bool ignoreAccessibility) 306075"];
3807 [label="param AddNewFactory([NotNull] ref WeakReference<BinderFactory>? slot) 306076"];
3808 [label="param AddNewFactory(this) 306077"];
3809 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 306078"];
3810 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 306079"];
3811 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 306080"];
3812 [label="var newFactory = new BinderFactory(this, syntaxTree, ignoreAccessibility); 306081"];
3813 [label="new BinderFactory(this, syntaxTree, ignoreAccessibility) 306082"];
3814 [label="param BinderFactory(CSharpCompilation compilation) 306083"];
3815 [label="param BinderFactory(SyntaxTree syntaxTree) 306084"];
3816 [label="param BinderFactory(bool ignoreAccessibility) 306085"];
3817 [label="param BinderFactory(this) 306086"];
3818 [label="_binderCache 306087"];
3819 [label="_compilation 306088"];
3820 [label="_syntaxTree 306089"];
3821 [label="_buckStopsHereBinder 306090"];
3822 [label="_ignoreAccessibility 306091"];
3823 [label="_binderFactoryVisitorPool 306092"];
3824 [label="_compilation 306093"];
3825 [label="_syntaxTree 306094"];
3826 [label="_ignoreAccessibility 306095"];
3827 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 306096"];
3828 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 306097"];
3829 [label="_binderFactoryVisitorPool = new ObjectPool<BinderFactoryVisitor>(() => new BinderFactoryVisitor(this), 64); 306098"];
3830 [label="_binderFactoryVisitorPool 306099"];
3831 [label="_binderCache = new ConcurrentCache<BinderCacheKey, Binder>(50); 306100"];
3832 [label="_binderCache 306101"];
3833 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 306102"];
3834 [label="_buckStopsHereBinder = new BuckStopsHereBinder(compilation); 306103"];
3835 [label="new BuckStopsHereBinder(compilation) 306104"];
3836 [label="param BuckStopsHereBinder(CSharpCompilation compilation) 306105"];
3837 [label="param BuckStopsHereBinder(this) 306106"];
3838 [label="0 306107"];
3839 [label="ExternalScope = 0 306108"];
3840 [label="1 306109"];
3841 [label="TopLevelScope = 1 306110"];
3842 [label="2 306111"];
3843 [label="ValueKindInsignificantBits = 2 306112"];
3844 [label="ValueKindSignificantBitsMask = unchecked((BindValueKind)~((1 << ValueKindInsignificantBits) - 1)) 306113"];
3845 [label="property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 306114"];
3846 [label="s_isIndexedPropertyWithNonOptionalArguments = property =>\n            {\n                if (property.IsIndexer || !property.IsIndexedProperty)\n                {\n                    return false;\n                }\n\n                Debug.Assert(property.ParameterCount > 0);\n                var parameter = property.Parameters[0];\n                return !parameter.IsOptional && !parameter.IsParams;\n            } 306115"];
3847 [label="globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted 306116"];
3848 [label="memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType 306117"];
3849 [label="SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 306118"];
3850 [label="miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes 306119"];
3851 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 306120"];
3852 [label="new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 306121"];
3853 [label="s_propertyGroupFormat =\n            new SymbolDisplayFormat(\n                globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Omitted,\n                memberOptions:\n                    SymbolDisplayMemberOptions.IncludeContainingType,\n                miscellaneousOptions:\n                    SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers |\n                    SymbolDisplayMiscellaneousOptions.UseSpecialTypes) 306122"];
3854 [label="10 306123"];
3855 [label="MaxParameterListsForErrorRecovery = 10 306124"];
3856 [label="'<>h__TransparentIdentifier' 306125"];
3857 [label="transparentIdentifierPrefix = '<>h__TransparentIdentifier' 306126"];
3858 [label="s => (MethodSymbol)s 306127"];
3859 [label="s_toMethodSymbolFunc = s => (MethodSymbol)s 306128"];
3860 [label="s => (PropertySymbol)s 306129"];
3861 [label="s_toPropertySymbolFunc = s => (PropertySymbol)s 306130"];
3862 [label="compilation 306131"];
3863 [label="param BuckStopsHereBinder(this) 306132"];
3864 [label="param Binder(CSharpCompilation compilation) 306133"];
3865 [label="param Binder(this) 306134"];
3866 [label="internal CSharpCompilation Compilation { get; } 306135"];
3867 [label="Flags 306136"];
3868 [label="protected internal Binder? Next { get; } 306137"];
3869 [label="_lazyConversions 306138"];
3870 [label="_lazyOverloadResolution 306139"];
3871 [label="RoslynDebug.Assert(compilation != null); 306140"];
3872 [label="RoslynDebug.Assert(compilation != null); 306141"];
3873 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 306142"];
3874 [label="RoslynDebug.Assert(this is BuckStopsHereBinder); 306143"];
3875 [label="compilation.Options 306144"];
3876 [label="get\n            {\n                return _options;\n            } 306145"];
3877 [label="return _options; 306146"];
3878 [label="this.Flags = compilation.Options.TopLevelBinderFlags; 306147"];
3879 [label="this.Flags 306148"];
3880 [label="this.Compilation 306149"];
3881 [label="_buckStopsHereBinder 306150"];
3882 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 306151"];
3883 [label="var newWeakReference = new WeakReference<BinderFactory>(newFactory); 306152"];
3884 [label="while (true)\n            {\n                BinderFactory? previousFactory;\n                WeakReference<BinderFactory>? previousWeakReference = slot;\n                if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                }\n\n                if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                }\n            } 306153"];
3885 [label="BinderFactory? previousFactory; 306154"];
3886 [label="WeakReference<BinderFactory>? previousWeakReference = slot; 306155"];
3887 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 306156"];
3888 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n                {\n                    Debug.Assert(slot is object);\n                    return previousFactory;\n                } 306157"];
3889 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 306158"];
3890 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 306159"];
3891 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 306160"];
3892 [label="if (Interlocked.CompareExchange(ref slot!, newWeakReference, previousWeakReference) == previousWeakReference)\n                {\n                    return newFactory;\n                } 306161"];
3893 [label="return newFactory; 306162"];
3894 [label="return GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax); 306163"];
3895 [label="GetBinderFactory(syntax.SyntaxTree).GetBinder(syntax) 306164"];
3896 [label="param GetBinder(SyntaxNode node) 306165"];
3897 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 306166"];
3898 [label="param GetBinder(Symbol memberOpt = null) 306167"];
3899 [label="param GetBinder(this) 306168"];
3900 [label="int position = node.SpanStart; 306169"];
3901 [label="InScript 306170"];
3902 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 306171"];
3903 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 306172"];
3904 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 306173"];
3905 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 306174"];
3906 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 306175"];
3907 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 306176"];
3908 [label="node = node.Parent; 306177"];
3909 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 306178"];
3910 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 306179"];
3911 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 306180"];
3912 [label="return GetBinder(node, position, memberDeclarationOpt, memberOpt); 306181"];
3913 [label="GetBinder(node, position, memberDeclarationOpt, memberOpt) 306182"];
3914 [label="param GetBinder(SyntaxNode node) 306183"];
3915 [label="param GetBinder(int position) 306184"];
3916 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 306185"];
3917 [label="param GetBinder(Symbol memberOpt = null) 306186"];
3918 [label="param GetBinder(this) 306187"];
3919 [label="Debug.Assert(node != null); 306188"];
3920 [label="Debug.Assert(node != null); 306189"];
3921 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 306190"];
3922 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 306191"];
3923 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 306192"];
3924 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 306193"];
3925 [label="param BinderFactoryVisitor(BinderFactory factory) 306194"];
3926 [label="param BinderFactoryVisitor(this) 306195"];
3927 [label="param BinderFactoryVisitor(this) 306196"];
3928 [label="_position 306197"];
3929 [label="_memberDeclarationOpt 306198"];
3930 [label="_memberOpt 306199"];
3931 [label="_factory 306200"];
3932 [label="_factory 306201"];
3933 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 306202"];
3934 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 306203"];
3935 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 306204"];
3936 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 306205"];
3937 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt) 306206"];
3938 [label="param Initialize(int position) 306207"];
3939 [label="param Initialize(CSharpSyntaxNode memberDeclarationOpt) 306208"];
3940 [label="param Initialize(Symbol memberOpt) 306209"];
3941 [label="param Initialize(this) 306210"];
3942 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 306211"];
3943 [label="memberDeclarationOpt == null 306212"];
3944 [label="param ==(Symbol left) 306213"];
3945 [label="param ==(Symbol right) 306214"];
3946 [label="if (right is null)\n            {\n                return left is null;\n            } 306215"];
3947 [label="return left is null; 306216"];
3948 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 306217"];
3949 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 306218"];
3950 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 306219"];
3951 [label="_position 306220"];
3952 [label="_memberDeclarationOpt 306221"];
3953 [label="_memberOpt 306222"];
3954 [label="visitor.Initialize(position, memberDeclarationOpt, memberOpt); 306223"];
3955 [label="Binder result = visitor.Visit(node); 306224"];
3956 [label="visitor.Visit(node) 306225"];
3957 [label="param Visit(SyntaxNode node) 306226"];
3958 [label="param Visit(this) 306227"];
3959 [label="return VisitCore(node); 306228"];
3960 [label="VisitCore(node) 306229"];
3961 [label="param VisitCore(SyntaxNode node) 306230"];
3962 [label="param VisitCore(this) 306231"];
3963 [label="return ((CSharpSyntaxNode)node).Accept(this); 306232"];
3964 [label="return ((CSharpSyntaxNode)node).Accept(this); 306233"];
3965 [label="return ((CSharpSyntaxNode)node).Accept(this); 306234"];
3966 [label="param VisitClassDeclaration(ClassDeclarationSyntax node) 306235"];
3967 [label="param VisitClassDeclaration(this) 306236"];
3968 [label="return VisitTypeDeclarationCore(node); 306237"];
3969 [label="VisitTypeDeclarationCore(node) 306238"];
3970 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 306239"];
3971 [label="param VisitTypeDeclarationCore(this) 306240"];
3972 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 306241"];
3973 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 306242"];
3974 [label="if (!LookupPosition.IsInTypeDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 306243"];
3975 [label="NodeUsage extraInfo = NodeUsage.Normal; 306244"];
3976 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 306245"];
3977 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 306246"];
3978 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 306247"];
3979 [label="if (parent.OpenBraceToken != default &&\n                    parent.CloseBraceToken != default &&\n                    (LookupPosition.IsBetweenTokens(_position, parent.OpenBraceToken, parent.CloseBraceToken) ||\n                     LookupPosition.IsInAttributeSpecification(_position, parent.AttributeLists)))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsInTypeParameterList(_position, parent))\n                {\n                    extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters;\n                }\n                else if (LookupPosition.IsBetweenTokens(_position, parent.Keyword, parent.OpenBraceToken))\n                {\n                    extraInfo = NodeUsage.NamedTypeBaseListOrParameterList;\n                } 306248"];
3980 [label="extraInfo = NodeUsage.NamedTypeBodyOrTypeParameters; 306249"];
3981 [label="return VisitTypeDeclarationCore(parent, extraInfo); 306250"];
3982 [label="return VisitTypeDeclarationCore(parent, extraInfo); 306251"];
3983 [label="VisitTypeDeclarationCore(parent, extraInfo) 306252"];
3984 [label="param VisitTypeDeclarationCore(TypeDeclarationSyntax parent) 306253"];
3985 [label="param VisitTypeDeclarationCore(NodeUsage extraInfo) 306254"];
3986 [label="param VisitTypeDeclarationCore(this) 306255"];
3987 [label="var key = CreateBinderCacheKey(parent, extraInfo); 306256"];
3988 [label="var key = CreateBinderCacheKey(parent, extraInfo); 306257"];
3989 [label="CreateBinderCacheKey(parent, extraInfo) 306258"];
3990 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 306259"];
3991 [label="param CreateBinderCacheKey(NodeUsage usage) 306260"];
3992 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 306261"];
3993 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 306262"];
3994 [label="return new BinderCacheKey(node, usage); 306263"];
3995 [label="return new BinderCacheKey(node, usage); 306264"];
3996 [label="return new BinderCacheKey(node, usage); 306265"];
3997 [label="new BinderCacheKey(node, usage) 306266"];
3998 [label="param BinderCacheKey(CSharpSyntaxNode syntaxNode) 306267"];
3999 [label="param BinderCacheKey(NodeUsage usage) 306268"];
4000 [label="param BinderCacheKey(this) 306269"];
4001 [label="this.syntaxNode 306270"];
4002 [label="this.usage 306271"];
4003 [label="var key = CreateBinderCacheKey(parent, extraInfo); 306272"];
4004 [label="Binder resultBinder; 306273"];
4005 [label="binderCache 306274"];
4006 [label="get\n                {\n                    return _factory._binderCache;\n                } 306275"];
4007 [label="return _factory._binderCache; 306276"];
4008 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 306277"];
4009 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 306278"];
4010 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 306279"];
4011 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 306280"];
4012 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    // if node is in the optional type parameter list, then members and type parameters are in scope \n                    //     (needed when binding attributes applied to type parameters).\n                    // if node is in the base clause, type parameters are in scope.\n                    // if node is in the body, then members and type parameters are in scope.\n\n                    // a binder for the body of the type enclosing this type\n                    resultBinder = VisitCore(parent.Parent);\n\n                    if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 306281"];
4013 [label="param GetHashCode(this) 306282"];
4014 [label="return Hash.Combine(syntaxNode.GetHashCode(), (int)usage); 306283"];
4015 [label="resultBinder = VisitCore(parent.Parent); 306284"];
4016 [label="VisitCore(parent.Parent) 306285"];
4017 [label="param VisitCore(SyntaxNode node) 306286"];
4018 [label="param VisitCompilationUnit(CompilationUnitSyntax parent) 306287"];
4019 [label="param VisitCompilationUnit(this) 306288"];
4020 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 306289"];
4021 [label="IsInUsing(parent) 306290"];
4022 [label="param IsInUsing(CSharpSyntaxNode containingNode) 306291"];
4023 [label="param IsInUsing(this) 306292"];
4024 [label="TextSpan containingSpan = containingNode.Span; 306293"];
4025 [label="SyntaxToken token; 306294"];
4026 [label="token 306295"];
4027 [label="if (containingNode.Kind() != SyntaxKind.CompilationUnit && _position == containingSpan.End)\n                {\n                    // This occurs at EOF\n                    token = containingNode.GetLastToken();\n                    Debug.Assert(token == this.syntaxTree.GetRoot().GetLastToken());\n                }\n                else if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 306296"];
4028 [label="if (_position < containingSpan.Start || _position > containingSpan.End) //NB: > not >=\n                {\n                    return false;\n                }\n                else\n                {\n                    token = containingNode.FindToken(_position);\n                } 306297"];
4029 [label="token = containingNode.FindToken(_position); 306298"];
4030 [label="token = containingNode.FindToken(_position); 306299"];
4031 [label="var node = token.Parent; 306300"];
4032 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 306301"];
4033 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 306302"];
4034 [label="while (node != null && node != containingNode)\n                {\n                    // ACASEY: the restriction that we're only interested in children\n                    // of containingNode (vs descendants) seems to be required for cases like\n                    // GetSemanticInfoTests.BindAliasQualifier, which binds an alias name\n                    // within a using directive.\n                    if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    }\n\n                    node = node.Parent;\n                } 306303"];
4035 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 306304"];
4036 [label="if (node.IsKind(SyntaxKind.UsingDirective) && node.Parent == containingNode)\n                    {\n                        return true;\n                    } 306305"];
4037 [label="node = node.Parent; 306306"];
4038 [label="return false; 306307"];
4039 [label="return VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript); 306308"];
4040 [label="InScript 306309"];
4041 [label="get\n                {\n                    return _factory.InScript;\n                } 306310"];
4042 [label="_factory.InScript 306311"];
4043 [label="get\n            {\n                return _syntaxTree.Options.Kind == SourceCodeKind.Script;\n            } 306312"];
4044 [label="return _factory.InScript; 306313"];
4045 [label="VisitCompilationUnit(\n                    parent,\n                    inUsing: IsInUsing(parent),\n                    inScript: InScript) 306314"];
4046 [label="param VisitCompilationUnit(CompilationUnitSyntax compilationUnit) 306315"];
4047 [label="param VisitCompilationUnit(bool inUsing) 306316"];
4048 [label="param VisitCompilationUnit(bool inScript) 306317"];
4049 [label="param VisitCompilationUnit(this) 306318"];
4050 [label="syntaxTree 306319"];
4051 [label="get\n                {\n                    return _factory._syntaxTree;\n                } 306320"];
4052 [label="return _factory._syntaxTree; 306321"];
4053 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 306322"];
4054 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 306323"];
4055 [label="if (compilationUnit != syntaxTree.GetRoot())\n                {\n                    throw new ArgumentOutOfRangeException(nameof(compilationUnit), 'node not part of tree');\n                } 306324"];
4056 [label="inUsing 306325"];
4057 [label="inScript 306326"];
4058 [label="var extraInfo = inUsing\n                    ? (inScript ? NodeUsage.CompilationUnitScriptUsings : NodeUsage.CompilationUnitUsings)\n                    : (inScript ? NodeUsage.CompilationUnitScript : NodeUsage.Normal); 306327"];
4059 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 306328"];
4060 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 306329"];
4061 [label="CreateBinderCacheKey(compilationUnit, extraInfo) 306330"];
4062 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 306331"];
4063 [label="param CreateBinderCacheKey(NodeUsage usage) 306332"];
4064 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 306333"];
4065 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 306334"];
4066 [label="var key = CreateBinderCacheKey(compilationUnit, extraInfo); 306335"];
4067 [label="Binder result; 306336"];
4068 [label="binderCache 306337"];
4069 [label="get\n                {\n                    return _factory._binderCache;\n                } 306338"];
4070 [label="return _factory._binderCache; 306339"];
4071 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 306340"];
4072 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 306341"];
4073 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 306342"];
4074 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 306343"];
4075 [label="if (!binderCache.TryGetValue(key, out result))\n                {\n                    result = this.buckStopsHereBinder;\n\n                    if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    }\n\n                    binderCache.TryAdd(key, result);\n                } 306344"];
4076 [label="this.buckStopsHereBinder 306345"];
4077 [label="get\n                {\n                    return _factory._buckStopsHereBinder;\n                } 306346"];
4078 [label="return _factory._buckStopsHereBinder; 306347"];
4079 [label="result = this.buckStopsHereBinder; 306348"];
4080 [label="if (inScript)\n                    {\n                        Debug.Assert((object)compilation.ScriptClass != null);\n\n                        //\n                        // Binder chain in script/interactive code:\n                        //\n                        // + global imports\n                        //   + current and previous submission imports (except using aliases)\n                        //     + global namespace\n                        //       + host object members\n                        //         + previous submissions and corresponding using aliases\n                        //           + script class members and using aliases\n                        //\n\n                        bool isSubmissionTree = compilation.IsSubmissionSyntaxTree(compilationUnit.SyntaxTree);\n                        if (!isSubmissionTree)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InLoadedSyntaxTree);\n                        }\n\n                        // This is declared here so it can be captured.  It's initialized below.\n                        InContainerBinder scriptClassBinder = null;\n\n                        if (inUsing)\n                        {\n                            result = result.WithAdditionalFlags(BinderFlags.InScriptUsing);\n                        }\n                        else\n                        {\n                            result = new InContainerBinder(container: null, next: result, imports: compilation.GlobalImports);\n\n                            // NB: This binder has a full Imports object, but only the non-alias imports are\n                            // ever consumed.  Aliases are actually checked in scriptClassBinder (below).\n                            // Note: #loaded trees don't consume previous submission imports.\n                            result = compilation.PreviousSubmission == null || !isSubmissionTree\n                                ? new InContainerBinder(result, basesBeingResolved => scriptClassBinder.GetImports(basesBeingResolved))\n                                : new InContainerBinder(result, basesBeingResolved =>\n                                    compilation.GetPreviousSubmissionImports().Concat(scriptClassBinder.GetImports(basesBeingResolved)));\n                        }\n\n                        result = new InContainerBinder(compilation.GlobalNamespace, result);\n\n                        if (compilation.HostObjectType != null)\n                        {\n                            result = new HostObjectModelBinder(result);\n                        }\n\n                        scriptClassBinder = new InContainerBinder(compilation.ScriptClass, result, compilationUnit, inUsing: inUsing);\n                        result = scriptClassBinder;\n                    }\n                    else\n                    {\n                        //\n                        // Binder chain in regular code:\n                        //\n                        // + global namespace with top-level imports\n                        // \n                        result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing);\n\n                        if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        }\n                    } 306349"];
4081 [label="compilation 306350"];
4082 [label="get\n                {\n                    return _factory._compilation;\n                } 306351"];
4083 [label="return _factory._compilation; 306352"];
4084 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 306353"];
4085 [label="compilation.GlobalNamespace 306354"];
4086 [label="get\n            {\n                if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                }\n\n                return _lazyGlobalNamespace;\n            } 306355"];
4087 [label="if (_lazyGlobalNamespace is null)\n                {\n                    // Get the root namespace from each module, and merge them all together\n                    // Get all modules in this compilation, ones referenced directly by the compilation\n                    // as well as those referenced by all referenced assemblies.\n\n                    var modules = ArrayBuilder<ModuleSymbol>.GetInstance();\n                    GetAllUnaliasedModules(modules);\n\n                    var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace));\n\n                    modules.Free();\n\n                    Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null);\n                } 306356"];
4088 [label="var modules = ArrayBuilder<ModuleSymbol>.GetInstance(); 306357"];
4089 [label="GetAllUnaliasedModules(modules); 306358"];
4090 [label="GetAllUnaliasedModules(modules) 306359"];
4091 [label="param GetAllUnaliasedModules(ArrayBuilder<ModuleSymbol> modules) 306360"];
4092 [label="param GetAllUnaliasedModules(this) 306361"];
4093 [label="Assembly 306362"];
4094 [label="get\n            {\n                return SourceAssembly;\n            } 306363"];
4095 [label="return _referenceManager; 306364"];
4096 [label="GetBoundReferenceManager(); 306365"];
4097 [label="modules.AddRange(Assembly.Modules); 306366"];
4098 [label="Assembly.Modules 306367"];
4099 [label="get\n            {\n                return _modules;\n            } 306368"];
4100 [label="modules.AddRange(Assembly.Modules); 306369"];
4101 [label="GetBoundReferenceManager() 306370"];
4102 [label="param GetBoundReferenceManager(this) 306371"];
4103 [label="if (_lazyAssemblySymbol is null)\n            {\n                _referenceManager.CreateSourceAssemblyForCompilation(this);\n                Debug.Assert(_lazyAssemblySymbol is object);\n            } 306372"];
4104 [label="return _referenceManager; 306373"];
4105 [label="var referenceManager = GetBoundReferenceManager(); 306374"];
4106 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 306375"];
4107 [label="for (int i = 0; i < referenceManager.ReferencedAssemblies.Length; i++)\n            {\n                if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                }\n            } 306376"];
4108 [label="if (referenceManager.DeclarationsAccessibleWithoutAlias(i))\n                {\n                    modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules);\n                } 306377"];
4109 [label="modules.AddRange(referenceManager.ReferencedAssemblies[i].Modules); 306378"];
4110 [label="referenceManager.ReferencedAssemblies[i].Modules 306379"];
4111 [label="get\n            {\n                return _modules;\n            } 306380"];
4112 [label="GetAllUnaliasedModules(modules); 306381"];
4113 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 306382"];
4114 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 306383"];
4115 [label="new NamespaceExtent(this) 306384"];
4116 [label="param NamespaceExtent(CSharpCompilation compilation) 306385"];
4117 [label="param NamespaceExtent(this) 306386"];
4118 [label="_kind 306387"];
4119 [label="_symbolOrCompilation 306388"];
4120 [label="var result = MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)); 306389"];
4121 [label="param GetHashCode(this) 306390"];
4122 [label="return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this); 306391"];
4123 [label="get { return _globalNamespace; } 306392"];
4124 [label="return _globalNamespace; 306393"];
4125 [label="MergedNamespaceSymbol.Create(\n                        new NamespaceExtent(this),\n                        null,\n                        modules.SelectDistinct(m => m.GlobalNamespace)) 306394"];
4126 [label="param Create(NamespaceExtent extent) 306395"];
4127 [label="param Create(NamespaceSymbol containingNamespace) 306396"];
4128 [label="param Create(ImmutableArray<NamespaceSymbol> namespacesToMerge) 306397"];
4129 [label="param Create(string nameOpt = null) 306398"];
4130 [label="Debug.Assert(namespacesToMerge.Length != 0); 306399"];
4131 [label="Debug.Assert(namespacesToMerge.Length != 0); 306400"];
4132 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 306401"];
4133 [label="return (namespacesToMerge.Length == 1 && nameOpt == null)\n                ? namespacesToMerge[0]\n                : new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt); 306402"];
4134 [label="new MergedNamespaceSymbol(extent, containingNamespace, namespacesToMerge, nameOpt) 306403"];
4135 [label="param MergedNamespaceSymbol(NamespaceExtent extent) 306404"];
4136 [label="param MergedNamespaceSymbol(NamespaceSymbol containingNamespace) 306405"];
4137 [label="param MergedNamespaceSymbol(ImmutableArray<NamespaceSymbol> namespacesToMerge) 306406"];
4138 [label="param MergedNamespaceSymbol(string nameOpt) 306407"];
4139 [label="param MergedNamespaceSymbol(this) 306408"];
4140 [label="param MergedNamespaceSymbol(this) 306409"];
4141 [label="_containingNamespace 306410"];
4142 [label="_nameOpt 306411"];
4143 [label="_cachedLookup 306412"];
4144 [label="_extent 306413"];
4145 [label="_namespacesToMerge 306414"];
4146 [label="_containingNamespace 306415"];
4147 [label="_cachedLookup = new CachingDictionary<string, Symbol>(SlowGetChildrenOfName, SlowGetChildNames, EqualityComparer<string>.Default); 306416"];
4148 [label="_cachedLookup = new CachingDictionary<string, Symbol>(SlowGetChildrenOfName, SlowGetChildNames, EqualityComparer<string>.Default); 306417"];
4149 [label="_cachedLookup 306418"];
4150 [label="_nameOpt 306419"];
4151 [label="foreach (NamespaceSymbol ns in namespacesToMerge)\n            {\n                Debug.Assert(ns.ConstituentNamespaces.Length == 1);\n            } 306420"];
4152 [label="ns.ConstituentNamespaces 306421"];
4153 [label="get\n            {\n                return ImmutableArray.Create(this);\n            } 306422"];
4154 [label="return ImmutableArray.Create(this); 306423"];
4155 [label="Debug.Assert(ns.ConstituentNamespaces.Length == 1); 306424"];
4156 [label="Debug.Assert(ns.ConstituentNamespaces.Length == 1); 306425"];
4157 [label="modules.Free(); 306426"];
4158 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 306427"];
4159 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 306428"];
4160 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 306429"];
4161 [label="Interlocked.CompareExchange(ref _lazyGlobalNamespace, result, null); 306430"];
4162 [label="return _lazyGlobalNamespace; 306431"];
4163 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 306432"];
4164 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 306433"];
4165 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 306434"];
4166 [label="result = new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing); 306435"];
4167 [label="new InContainerBinder(compilation.GlobalNamespace, result, compilationUnit, inUsing: inUsing) 306436"];
4168 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 306437"];
4169 [label="param InContainerBinder(Binder next) 306438"];
4170 [label="param InContainerBinder(CSharpSyntaxNode declarationSyntax) 306439"];
4171 [label="param InContainerBinder(bool inUsing) 306440"];
4172 [label="param InContainerBinder(this) 306441"];
4173 [label="next 306442"];
4174 [label="param InContainerBinder(this) 306443"];
4175 [label="param Binder(Binder next) 306444"];
4176 [label="param Binder(this) 306445"];
4177 [label="param Binder(Conversions? conversions = null) 306446"];
4178 [label="RoslynDebug.Assert(next != null); 306447"];
4179 [label="RoslynDebug.Assert(next != null); 306448"];
4180 [label="Next 306449"];
4181 [label="this.Flags 306450"];
4182 [label="this.Compilation 306451"];
4183 [label="_lazyConversions 306452"];
4184 [label="_container 306453"];
4185 [label="_computeImports 306454"];
4186 [label="_lazyImports 306455"];
4187 [label="_lazyImportChain 306456"];
4188 [label="_lazyQuickAttributeChecker 306457"];
4189 [label="Debug.Assert((object)container != null); 306458"];
4190 [label="Debug.Assert((object)container != null); 306459"];
4191 [label="Debug.Assert(declarationSyntax != null); 306460"];
4192 [label="Debug.Assert(declarationSyntax != null); 306461"];
4193 [label="_container 306462"];
4194 [label="_computeImports = basesBeingResolved => Imports.FromSyntax(declarationSyntax, this, basesBeingResolved, inUsing); 306463"];
4195 [label="_computeImports 306464"];
4196 [label="if (!inUsing)\n            {\n                if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                }\n            } 306465"];
4197 [label="if (declarationSyntax.Kind() == SyntaxKind.CompilationUnit)\n                {\n                    var compilationUnit = (CompilationUnitSyntax)declarationSyntax;\n                    _usingsSyntax = compilationUnit.Usings;\n                }\n                else if (declarationSyntax.Kind() == SyntaxKind.NamespaceDeclaration)\n                {\n                    var namespaceDecl = (NamespaceDeclarationSyntax)declarationSyntax;\n                    _usingsSyntax = namespaceDecl.Usings;\n                } 306466"];
4198 [label="var compilationUnit = (CompilationUnitSyntax)declarationSyntax; 306467"];
4199 [label="_usingsSyntax 306468"];
4200 [label="compilation 306469"];
4201 [label="get\n                {\n                    return _factory._compilation;\n                } 306470"];
4202 [label="return _factory._compilation; 306471"];
4203 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 306472"];
4204 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 306473"];
4205 [label="if (!inUsing &&\n                            SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) is SynthesizedSimpleProgramEntryPointSymbol simpleProgram)\n                        {\n                            ExecutableCodeBinder bodyBinder = simpleProgram.GetBodyBinder(_factory._ignoreAccessibility);\n                            result = new SimpleProgramUnitBinder(result, (SimpleProgramBinder)bodyBinder.GetBinder(simpleProgram.SyntaxNode));\n                        } 306474"];
4206 [label="SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(compilation, compilationUnit, fallbackToMainEntryPoint: true) 306475"];
4207 [label="param GetSimpleProgramEntryPoint(CSharpCompilation compilation) 306476"];
4208 [label="param GetSimpleProgramEntryPoint(CompilationUnitSyntax compilationUnit) 306477"];
4209 [label="param GetSimpleProgramEntryPoint(bool fallbackToMainEntryPoint) 306478"];
4210 [label="var type = GetSimpleProgramNamedTypeSymbol(compilation); 306479"];
4211 [label="GetSimpleProgramNamedTypeSymbol(compilation) 306480"];
4212 [label="param GetSimpleProgramNamedTypeSymbol(CSharpCompilation compilation) 306481"];
4213 [label="compilation.SourceModule 306482"];
4214 [label="get\n            {\n                return Assembly.Modules[0];\n            } 306483"];
4215 [label="Assembly 306484"];
4216 [label="get\n            {\n                return SourceAssembly;\n            } 306485"];
4217 [label="GetBoundReferenceManager(); 306486"];
4218 [label="return Assembly.Modules[0]; 306487"];
4219 [label="Assembly.Modules 306488"];
4220 [label="get\n            {\n                return _modules;\n            } 306489"];
4221 [label="return Assembly.Modules[0]; 306490"];
4222 [label="return compilation.SourceModule.GlobalNamespace.GetTypeMembers(WellKnownMemberNames.TopLevelStatementsEntryPointTypeName).OfType<SimpleProgramNamedTypeSymbol>().SingleOrDefault(); 306491"];
4223 [label="compilation.SourceModule.GlobalNamespace 306492"];
4224 [label="get\n            {\n                if ((object)_globalNamespace == null)\n                {\n                    var diagnostics = DiagnosticBag.GetInstance();\n                    var globalNS = new SourceNamespaceSymbol(\n                        this, this, DeclaringCompilation.MergedRootDeclaration, diagnostics);\n                    Debug.Assert(diagnostics.IsEmptyWithoutResolution);\n                    diagnostics.Free();\n                    Interlocked.CompareExchange(ref _globalNamespace, globalNS, null);\n                }\n\n                return _globalNamespace;\n            } 306493"];
4225 [label="return compilation.SourceModule.GlobalNamespace.GetTypeMembers(WellKnownMemberNames.TopLevelStatementsEntryPointTypeName).OfType<SimpleProgramNamedTypeSymbol>().SingleOrDefault(); 306494"];
4226 [label="compilation.SourceModule.GlobalNamespace.GetTypeMembers(WellKnownMemberNames.TopLevelStatementsEntryPointTypeName) 306495"];
4227 [label="param GetTypeMembers(string name) 306496"];
4228 [label="param GetTypeMembers(this) 306497"];
4229 [label="if (type is null)\n            {\n                return null;\n            } 306498"];
4230 [label="return null; 306499"];
4231 [label="binderCache 306500"];
4232 [label="return _factory._binderCache; 306501"];
4233 [label="binderCache.TryAdd(key, result); 306502"];
4234 [label="binderCache.TryAdd(key, result); 306503"];
4235 [label="binderCache.TryAdd(key, result); 306504"];
4236 [label="binderCache.TryAdd(key, result); 306505"];
4237 [label="binderCache.TryAdd(key, result); 306506"];
4238 [label="return result; 306507"];
4239 [label="return ((CSharpSyntaxNode)node).Accept(this); 306508"];
4240 [label="if (extraInfo != NodeUsage.Normal)\n                    {\n                        var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent);\n\n                        if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        }\n                    } 306509"];
4241 [label="resultBinder.ContainingMemberOrLambda 306510"];
4242 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 306511"];
4243 [label="var merged = _container as MergedNamespaceSymbol; 306512"];
4244 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 306513"];
4245 [label="return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container; 306514"];
4246 [label="((object)merged != null) 306515"];
4247 [label="merged.GetConstituentForCompilation(this.Compilation) 306516"];
4248 [label="param GetConstituentForCompilation(CSharpCompilation compilation) 306517"];
4249 [label="param GetConstituentForCompilation(this) 306518"];
4250 [label="foreach (var n in _namespacesToMerge)\n            {\n                if (n.IsFromCompilation(compilation))\n                    return n;\n            } 306519"];
4251 [label="if (n.IsFromCompilation(compilation))\n                    return n; 306520"];
4252 [label="n.IsFromCompilation(compilation) 306521"];
4253 [label="param IsFromCompilation(CSharpCompilation compilation) 306522"];
4254 [label="param IsFromCompilation(this) 306523"];
4255 [label="Debug.Assert(compilation != null); 306524"];
4256 [label="Debug.Assert(compilation != null); 306525"];
4257 [label="this.DeclaringCompilation 306526"];
4258 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 306527"];
4259 [label="this.Kind 306528"];
4260 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 306529"];
4261 [label="return SymbolKind.Namespace; 306530"];
4262 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 306531"];
4263 [label="return compilation == this.DeclaringCompilation; 306532"];
4264 [label="return compilation == this.DeclaringCompilation; 306533"];
4265 [label="return n; 306534"];
4266 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 306535"];
4267 [label="var typeSymbol = ((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent); 306536"];
4268 [label="((NamespaceOrTypeSymbol)resultBinder.ContainingMemberOrLambda).GetSourceTypeMember(parent) 306537"];
4269 [label="param GetSourceTypeMember(TypeDeclarationSyntax syntax) 306538"];
4270 [label="param GetSourceTypeMember(this) 306539"];
4271 [label="return GetSourceTypeMember(syntax.Identifier.ValueText, syntax.Arity, syntax.Kind(), syntax); 306540"];
4272 [label="return GetSourceTypeMember(syntax.Identifier.ValueText, syntax.Arity, syntax.Kind(), syntax); 306541"];
4273 [label="GetSourceTypeMember(syntax.Identifier.ValueText, syntax.Arity, syntax.Kind(), syntax) 306542"];
4274 [label="param GetSourceTypeMember(string name) 306543"];
4275 [label="param GetSourceTypeMember(int arity) 306544"];
4276 [label="param GetSourceTypeMember(SyntaxKind kind) 306545"];
4277 [label="param GetSourceTypeMember(CSharpSyntaxNode syntax) 306546"];
4278 [label="param GetSourceTypeMember(this) 306547"];
4279 [label="TypeKind typeKind = kind.ToDeclarationKind().ToTypeKind(); 306548"];
4280 [label="kind.ToDeclarationKind().ToTypeKind() 306549"];
4281 [label="param ToTypeKind(this DeclarationKind kind) 306550"];
4282 [label="foreach (var member in GetTypeMembers(name, arity))\n            {\n                var memberT = member as SourceNamedTypeSymbol;\n                if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                }\n            } 306551"];
4283 [label="foreach (var member in GetTypeMembers(name, arity))\n            {\n                var memberT = member as SourceNamedTypeSymbol;\n                if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                }\n            } 306552"];
4284 [label="GetTypeMembers(name, arity) 306553"];
4285 [label="param GetTypeMembers(string name) 306554"];
4286 [label="param GetTypeMembers(int arity) 306555"];
4287 [label="param GetTypeMembers(this) 306556"];
4288 [label="return GetTypeMembers(name).WhereAsArray((s, arity) => s.Arity == arity, arity); 306557"];
4289 [label="GetTypeMembers(name) 306558"];
4290 [label="param GetTypeMembers(string name) 306559"];
4291 [label="param GetTypeMembers(this) 306560"];
4292 [label="if (_nameToTypeMembersMap == null)\n            {\n                // NOTE: This method depends on MakeNameToMembersMap() on creating a proper \n                // NOTE: type of the array, see comments in MakeNameToMembersMap() for details\n                Interlocked.CompareExchange(ref _nameToTypeMembersMap, GetTypesFromMemberMap(GetNameToMembersMap()), null);\n            } 306561"];
4293 [label="return _nameToTypeMembersMap; 306562"];
4294 [label="return this.GetNameToTypeMembersMap().TryGetValue(name, out members)\n                ? members\n                : ImmutableArray<NamedTypeSymbol>.Empty; 306563"];
4295 [label="return GetTypeMembers(name).WhereAsArray((s, arity) => s.Arity == arity, arity); 306564"];
4296 [label="return GetTypeMembers(name).WhereAsArray((s, arity) => s.Arity == arity, arity); 306565"];
4297 [label="return GetTypeMembers(name).WhereAsArray((s, arity) => s.Arity == arity, arity); 306566"];
4298 [label="get\n            {\n                return declaration.Arity;\n            } 306567"];
4299 [label="return declaration.Arity; 306568"];
4300 [label="var memberT = member as SourceNamedTypeSymbol; 306569"];
4301 [label="if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                } 306570"];
4302 [label="if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                } 306571"];
4303 [label="memberT.TypeKind 306572"];
4304 [label="get\n            {\n                return _flags.TypeKind;\n            } 306573"];
4305 [label="_flags.TypeKind 306574"];
4306 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 306575"];
4307 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 306576"];
4308 [label="return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); 306577"];
4309 [label="return _flags.TypeKind; 306578"];
4310 [label="if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                } 306579"];
4311 [label="if ((object?)memberT != null && memberT.TypeKind == typeKind)\n                {\n                    if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    }\n                } 306580"];
4312 [label="if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    } 306581"];
4313 [label="if (syntax != null)\n                    {\n                        foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        }\n                    }\n                    else\n                    {\n                        return memberT;\n                    } 306582"];
4314 [label="memberT.Locations 306583"];
4315 [label="foreach (var loc in memberT.Locations)\n                        {\n                            if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            }\n                        } 306584"];
4316 [label="if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            } 306585"];
4317 [label="if (loc.IsInSource && loc.SourceTree == syntax.SyntaxTree && syntax.Span.Contains(loc.SourceSpan))\n                            {\n                                return memberT;\n                            } 306586"];
4318 [label="return memberT; 306587"];
4319 [label="if (extraInfo == NodeUsage.NamedTypeBaseListOrParameterList)\n                        {\n                            // even though there could be no type parameter, we need this binder \n                            // for its 'IsAccessible'\n                            resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                        }\n                        else\n                        {\n                            resultBinder = new InContainerBinder(typeSymbol, resultBinder);\n\n                            if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            }\n                        } 306588"];
4320 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 306589"];
4321 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 306590"];
4322 [label="resultBinder = new InContainerBinder(typeSymbol, resultBinder); 306591"];
4323 [label="new InContainerBinder(typeSymbol, resultBinder) 306592"];
4324 [label="param InContainerBinder(NamespaceOrTypeSymbol container) 306593"];
4325 [label="param InContainerBinder(Binder next) 306594"];
4326 [label="param InContainerBinder(Imports imports = null) 306595"];
4327 [label="param InContainerBinder(this) 306596"];
4328 [label="next 306597"];
4329 [label="param InContainerBinder(this) 306598"];
4330 [label="param Binder(Binder next) 306599"];
4331 [label="param Binder(this) 306600"];
4332 [label="param Binder(Conversions? conversions = null) 306601"];
4333 [label="RoslynDebug.Assert(next != null); 306602"];
4334 [label="RoslynDebug.Assert(next != null); 306603"];
4335 [label="this.Flags 306604"];
4336 [label="this.Compilation 306605"];
4337 [label="_lazyConversions 306606"];
4338 [label="_container 306607"];
4339 [label="_computeImports 306608"];
4340 [label="_lazyImports 306609"];
4341 [label="_lazyImportChain 306610"];
4342 [label="_lazyQuickAttributeChecker 306611"];
4343 [label="Debug.Assert((object)container != null || imports != null); 306612"];
4344 [label="Debug.Assert((object)container != null || imports != null); 306613"];
4345 [label="_container 306614"];
4346 [label="null 306615"];
4347 [label="ImmutableDictionary<string, AliasAndUsingDirective>.Empty 306616"];
4348 [label="ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty 306617"];
4349 [label="ImmutableArray<AliasAndExternAliasDirective>.Empty 306618"];
4350 [label="null 306619"];
4351 [label="new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 306620"];
4352 [label="param Imports(CSharpCompilation compilation) 306621"];
4353 [label="param Imports(ImmutableDictionary<string, AliasAndUsingDirective> usingAliases) 306622"];
4354 [label="param Imports(ImmutableArray<NamespaceOrTypeAndUsingDirective> usings) 306623"];
4355 [label="param Imports(ImmutableArray<AliasAndExternAliasDirective> externs) 306624"];
4356 [label="param Imports(DiagnosticBag diagnostics) 306625"];
4357 [label="param Imports(this) 306626"];
4358 [label="_compilation 306627"];
4359 [label="_diagnostics 306628"];
4360 [label="UsingAliases 306629"];
4361 [label="Debug.Assert(usingAliases != null); 306630"];
4362 [label="Debug.Assert(usingAliases != null); 306631"];
4363 [label="Debug.Assert(!usings.IsDefault); 306632"];
4364 [label="Debug.Assert(!externs.IsDefault); 306633"];
4365 [label="_compilation 306634"];
4366 [label="this.UsingAliases 306635"];
4367 [label="this.Usings 306636"];
4368 [label="_diagnostics 306637"];
4369 [label="this.ExternAliases 306638"];
4370 [label="Empty = new Imports(\n            null,\n            ImmutableDictionary<string, AliasAndUsingDirective>.Empty,\n            ImmutableArray<NamespaceOrTypeAndUsingDirective>.Empty,\n            ImmutableArray<AliasAndExternAliasDirective>.Empty,\n            null) 306639"];
4371 [label="_lazyImports = imports ?? Imports.Empty; 306640"];
4372 [label="_lazyImports = imports ?? Imports.Empty; 306641"];
4373 [label="_lazyImports 306642"];
4374 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 306643"];
4375 [label="if (parent.TypeParameterList != null)\n                            {\n                                resultBinder = new WithClassTypeParametersBinder(typeSymbol, resultBinder);\n                            } 306644"];
4376 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 306645"];
4377 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 306646"];
4378 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 306647"];
4379 [label="param WithUnsafeRegionIfNecessary(this) 306648"];
4380 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 306649"];
4381 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 306650"];
4382 [label="this.Flags.Includes(BinderFlags.UnsafeRegion) 306651"];
4383 [label="param Includes(this BinderFlags self) 306652"];
4384 [label="param Includes(BinderFlags other) 306653"];
4385 [label="return (self & other) == other; 306654"];
4386 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 306655"];
4387 [label="return (this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword))\n                ? this\n                : new Binder(this, this.Flags | BinderFlags.UnsafeRegion); 306656"];
4388 [label="(this.Flags.Includes(BinderFlags.UnsafeRegion) || !modifiers.Any(SyntaxKind.UnsafeKeyword)) 306657"];
4389 [label="binderCache 306658"];
4390 [label="return _factory._binderCache; 306659"];
4391 [label="binderCache.TryAdd(key, resultBinder); 306660"];
4392 [label="binderCache.TryAdd(key, resultBinder); 306661"];
4393 [label="binderCache.TryAdd(key, resultBinder); 306662"];
4394 [label="binderCache.TryAdd(key, resultBinder); 306663"];
4395 [label="binderCache.TryAdd(key, resultBinder); 306664"];
4396 [label="return resultBinder; 306665"];
4397 [label="return ((CSharpSyntaxNode)node).Accept(this); 306666"];
4398 [label="_binderFactoryVisitorPool.Free(visitor); 306667"];
4399 [label="_binderFactoryVisitorPool.Free(visitor); 306668"];
4400 [label="return result; 306669"];
4401 [label="ArrayBuilder<FieldOrPropertyInitializer>? staticInitializers = null; 306670"];
4402 [label="DeclaringCompilation 306671"];
4403 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 306672"];
4404 [label="this.Kind 306673"];
4405 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 306674"];
4406 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 306675"];
4407 [label="get\n            {\n                // Default implementation gets the containers module.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingModule : null;\n            } 306676"];
4408 [label="this.ContainingSymbol 306677"];
4409 [label="get\n            {\n                return _containingSymbol;\n            } 306678"];
4410 [label="return _containingSymbol; 306679"];
4411 [label="return (object)container != null ? container.ContainingModule : null; 306680"];
4412 [label="var compilation = DeclaringCompilation; 306681"];
4413 [label="foreach (var m in members)\n            {\n                if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                }\n\n                bool reportMisplacedGlobalCode = !m.HasErrors;\n\n                switch (m.Kind())\n                {\n                    case SyntaxKind.FieldDeclaration:\n                        {\n                            var fieldSyntax = (FieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(fieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            bool modifierErrors;\n                            var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors);\n                            foreach (var variable in fieldSyntax.Declaration.Variables)\n                            {\n                                var fieldSymbol = (modifiers & DeclarationModifiers.Fixed) == 0\n                                    ? new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics)\n                                    : new SourceFixedFieldSymbol(this, variable, modifiers, modifierErrors, diagnostics);\n                                builder.NonTypeMembers.Add(fieldSymbol);\n                                // All fields are included in the nullable context for constructors and initializers, even fields without\n                                // initializers, to ensure warnings are reported for uninitialized non-nullable fields in NullableWalker.\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: fieldSymbol.IsStatic, compilation, variable);\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, variable, this,\n                                                            DeclarationModifiers.Private | (modifiers & DeclarationModifiers.Static),\n                                                            fieldSymbol);\n                                }\n\n                                if (variable.Initializer != null)\n                                {\n                                    if (fieldSymbol.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.MethodDeclaration:\n                        {\n                            var methodSyntax = (MethodDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(methodSyntax.Identifier));\n                            }\n\n                            var method = SourceOrdinaryMethodSymbol.CreateMethodSymbol(this, bodyBinder, methodSyntax, compilation.IsNullableAnalysisEnabledIn(methodSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.ConstructorDeclaration:\n                        {\n                            var constructorSyntax = (ConstructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(constructorSyntax.Identifier));\n                            }\n\n                            bool isNullableEnabled = compilation.IsNullableAnalysisEnabledIn(constructorSyntax);\n                            var constructor = SourceConstructorSymbol.CreateConstructorSymbol(this, constructorSyntax, isNullableEnabled, diagnostics);\n                            builder.NonTypeMembers.Add(constructor);\n                            if (constructorSyntax.Initializer?.Kind() != SyntaxKind.ThisConstructorInitializer)\n                            {\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.DestructorDeclaration:\n                        {\n                            var destructorSyntax = (DestructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(destructorSyntax.Identifier));\n                            }\n\n                            // CONSIDER: if this doesn't (directly or indirectly) override object.Finalize, the\n                            // runtime won't consider it a finalizer and it will not be marked as a destructor\n                            // when it is loaded from metadata.  Perhaps we should just treat it as an Ordinary\n                            // method in such cases?\n                            var destructor = new SourceDestructorSymbol(this, destructorSyntax, compilation.IsNullableAnalysisEnabledIn(destructorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(destructor);\n                        }\n                        break;\n\n                    case SyntaxKind.PropertyDeclaration:\n                        {\n                            var propertySyntax = (PropertyDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(propertySyntax.Identifier));\n                            }\n\n                            var property = SourcePropertySymbol.Create(this, bodyBinder, propertySyntax, diagnostics);\n                            builder.NonTypeMembers.Add(property);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.SetMethod);\n                            FieldSymbol backingField = property.BackingField;\n\n                            // TODO: can we leave this out of the member list?\n                            // From the 10/12/11 design notes:\n                            //   In addition, we will change autoproperties to behavior in\n                            //   a similar manner and make the autoproperty fields private.\n                            if ((object)backingField != null)\n                            {\n                                builder.NonTypeMembers.Add(backingField);\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: backingField.IsStatic, compilation, propertySyntax);\n\n                                var initializer = propertySyntax.Initializer;\n                                if (initializer != null)\n                                {\n                                    if (IsScriptClass)\n                                    {\n                                        // also gather expression-declared variables from the initializer\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                                                      initializer,\n                                                                                      this,\n                                                                                      DeclarationModifiers.Private | (property.IsStatic ? DeclarationModifiers.Static : 0),\n                                                                                      backingField);\n                                    }\n\n                                    if (property.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, backingField, initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, backingField, initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventFieldDeclaration:\n                        {\n                            var eventFieldSyntax = (EventFieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(\n                                    ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventFieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            foreach (VariableDeclaratorSyntax declarator in eventFieldSyntax.Declaration.Variables)\n                            {\n                                SourceFieldLikeEventSymbol @event = new SourceFieldLikeEventSymbol(this, bodyBinder, eventFieldSyntax.Modifiers, declarator, diagnostics);\n                                builder.NonTypeMembers.Add(@event);\n\n                                FieldSymbol? associatedField = @event.AssociatedField;\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, declarator, this,\n                                                            DeclarationModifiers.Private | (@event.IsStatic ? DeclarationModifiers.Static : 0),\n                                                            associatedField);\n                                }\n\n                                if ((object?)associatedField != null)\n                                {\n                                    // NOTE: specifically don't add the associated field to the members list\n                                    // (regard it as an implementation detail).\n\n                                    builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: associatedField.IsStatic, compilation, declarator);\n\n                                    if (declarator.Initializer != null)\n                                    {\n                                        if (associatedField.IsStatic)\n                                        {\n                                            AddInitializer(ref staticInitializers, associatedField, declarator.Initializer);\n                                        }\n                                        else\n                                        {\n                                            AddInitializer(ref instanceInitializers, associatedField, declarator.Initializer);\n                                        }\n                                    }\n                                }\n\n                                Debug.Assert((object)@event.AddMethod != null);\n                                Debug.Assert((object)@event.RemoveMethod != null);\n\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventDeclaration:\n                        {\n                            var eventSyntax = (EventDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventSyntax.Identifier));\n                            }\n\n                            var @event = new SourceCustomEventSymbol(this, bodyBinder, eventSyntax, diagnostics);\n\n                            builder.NonTypeMembers.Add(@event);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n\n                            Debug.Assert(@event.AssociatedField is null);\n                        }\n                        break;\n\n                    case SyntaxKind.IndexerDeclaration:\n                        {\n                            var indexerSyntax = (IndexerDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(indexerSyntax.ThisKeyword));\n                            }\n\n                            var indexer = SourcePropertySymbol.Create(this, bodyBinder, indexerSyntax, diagnostics);\n                            builder.HaveIndexers = true;\n                            builder.NonTypeMembers.Add(indexer);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.SetMethod);\n                        }\n                        break;\n\n                    case SyntaxKind.ConversionOperatorDeclaration:\n                        {\n                            var conversionOperatorSyntax = (ConversionOperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(conversionOperatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedConversionSymbol.CreateUserDefinedConversionSymbol(\n                                this, conversionOperatorSyntax, compilation.IsNullableAnalysisEnabledIn(conversionOperatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.OperatorDeclaration:\n                        {\n                            var operatorSyntax = (OperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(operatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedOperatorSymbol.CreateUserDefinedOperatorSymbol(\n                                this, operatorSyntax, compilation.IsNullableAnalysisEnabledIn(operatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.GlobalStatement:\n                        {\n                            var globalStatement = ((GlobalStatementSyntax)m).Statement;\n\n                            if (IsScriptClass)\n                            {\n                                var innerStatement = globalStatement;\n\n                                // drill into any LabeledStatements\n                                while (innerStatement.Kind() == SyntaxKind.LabeledStatement)\n                                {\n                                    innerStatement = ((LabeledStatementSyntax)innerStatement).Statement;\n                                }\n\n                                switch (innerStatement.Kind())\n                                {\n                                    case SyntaxKind.LocalDeclarationStatement:\n                                        // We shouldn't reach this place, but field declarations preceded with a label end up here.\n                                        // This is tracked by https://github.com/dotnet/roslyn/issues/13712. Let's do our best for now.\n                                        var decl = (LocalDeclarationStatementSyntax)innerStatement;\n                                        foreach (var vdecl in decl.Declaration.Variables)\n                                        {\n                                            // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                            ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, vdecl, this, DeclarationModifiers.Private,\n                                                                                          containingFieldOpt: null);\n                                        }\n                                        break;\n\n                                    case SyntaxKind.ExpressionStatement:\n                                    case SyntaxKind.IfStatement:\n                                    case SyntaxKind.YieldReturnStatement:\n                                    case SyntaxKind.ReturnStatement:\n                                    case SyntaxKind.ThrowStatement:\n                                    case SyntaxKind.SwitchStatement:\n                                    case SyntaxKind.LockStatement:\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                  innerStatement,\n                                                  this,\n                                                  DeclarationModifiers.Private,\n                                                  containingFieldOpt: null);\n                                        break;\n\n                                    default:\n                                        // no other statement introduces variables into the enclosing scope\n                                        break;\n                                }\n\n                                AddInitializer(ref instanceInitializers, null, globalStatement);\n                            }\n                            else if (reportMisplacedGlobalCode && !SyntaxFacts.IsSimpleProgramTopLevelStatement((GlobalStatementSyntax)m))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_GlobalStatement, new SourceLocation(globalStatement));\n                            }\n                        }\n                        break;\n\n                    default:\n                        Debug.Assert(\n                            SyntaxFacts.IsTypeDeclaration(m.Kind()) ||\n                            m.Kind() == SyntaxKind.NamespaceDeclaration ||\n                            m.Kind() == SyntaxKind.IncompleteMember);\n                        break;\n                }\n            } 306682"];
4414 [label="foreach (var m in members)\n            {\n                if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                }\n\n                bool reportMisplacedGlobalCode = !m.HasErrors;\n\n                switch (m.Kind())\n                {\n                    case SyntaxKind.FieldDeclaration:\n                        {\n                            var fieldSyntax = (FieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(fieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            bool modifierErrors;\n                            var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors);\n                            foreach (var variable in fieldSyntax.Declaration.Variables)\n                            {\n                                var fieldSymbol = (modifiers & DeclarationModifiers.Fixed) == 0\n                                    ? new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics)\n                                    : new SourceFixedFieldSymbol(this, variable, modifiers, modifierErrors, diagnostics);\n                                builder.NonTypeMembers.Add(fieldSymbol);\n                                // All fields are included in the nullable context for constructors and initializers, even fields without\n                                // initializers, to ensure warnings are reported for uninitialized non-nullable fields in NullableWalker.\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: fieldSymbol.IsStatic, compilation, variable);\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, variable, this,\n                                                            DeclarationModifiers.Private | (modifiers & DeclarationModifiers.Static),\n                                                            fieldSymbol);\n                                }\n\n                                if (variable.Initializer != null)\n                                {\n                                    if (fieldSymbol.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.MethodDeclaration:\n                        {\n                            var methodSyntax = (MethodDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(methodSyntax.Identifier));\n                            }\n\n                            var method = SourceOrdinaryMethodSymbol.CreateMethodSymbol(this, bodyBinder, methodSyntax, compilation.IsNullableAnalysisEnabledIn(methodSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.ConstructorDeclaration:\n                        {\n                            var constructorSyntax = (ConstructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(constructorSyntax.Identifier));\n                            }\n\n                            bool isNullableEnabled = compilation.IsNullableAnalysisEnabledIn(constructorSyntax);\n                            var constructor = SourceConstructorSymbol.CreateConstructorSymbol(this, constructorSyntax, isNullableEnabled, diagnostics);\n                            builder.NonTypeMembers.Add(constructor);\n                            if (constructorSyntax.Initializer?.Kind() != SyntaxKind.ThisConstructorInitializer)\n                            {\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.DestructorDeclaration:\n                        {\n                            var destructorSyntax = (DestructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(destructorSyntax.Identifier));\n                            }\n\n                            // CONSIDER: if this doesn't (directly or indirectly) override object.Finalize, the\n                            // runtime won't consider it a finalizer and it will not be marked as a destructor\n                            // when it is loaded from metadata.  Perhaps we should just treat it as an Ordinary\n                            // method in such cases?\n                            var destructor = new SourceDestructorSymbol(this, destructorSyntax, compilation.IsNullableAnalysisEnabledIn(destructorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(destructor);\n                        }\n                        break;\n\n                    case SyntaxKind.PropertyDeclaration:\n                        {\n                            var propertySyntax = (PropertyDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(propertySyntax.Identifier));\n                            }\n\n                            var property = SourcePropertySymbol.Create(this, bodyBinder, propertySyntax, diagnostics);\n                            builder.NonTypeMembers.Add(property);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.SetMethod);\n                            FieldSymbol backingField = property.BackingField;\n\n                            // TODO: can we leave this out of the member list?\n                            // From the 10/12/11 design notes:\n                            //   In addition, we will change autoproperties to behavior in\n                            //   a similar manner and make the autoproperty fields private.\n                            if ((object)backingField != null)\n                            {\n                                builder.NonTypeMembers.Add(backingField);\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: backingField.IsStatic, compilation, propertySyntax);\n\n                                var initializer = propertySyntax.Initializer;\n                                if (initializer != null)\n                                {\n                                    if (IsScriptClass)\n                                    {\n                                        // also gather expression-declared variables from the initializer\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                                                      initializer,\n                                                                                      this,\n                                                                                      DeclarationModifiers.Private | (property.IsStatic ? DeclarationModifiers.Static : 0),\n                                                                                      backingField);\n                                    }\n\n                                    if (property.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, backingField, initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, backingField, initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventFieldDeclaration:\n                        {\n                            var eventFieldSyntax = (EventFieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(\n                                    ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventFieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            foreach (VariableDeclaratorSyntax declarator in eventFieldSyntax.Declaration.Variables)\n                            {\n                                SourceFieldLikeEventSymbol @event = new SourceFieldLikeEventSymbol(this, bodyBinder, eventFieldSyntax.Modifiers, declarator, diagnostics);\n                                builder.NonTypeMembers.Add(@event);\n\n                                FieldSymbol? associatedField = @event.AssociatedField;\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, declarator, this,\n                                                            DeclarationModifiers.Private | (@event.IsStatic ? DeclarationModifiers.Static : 0),\n                                                            associatedField);\n                                }\n\n                                if ((object?)associatedField != null)\n                                {\n                                    // NOTE: specifically don't add the associated field to the members list\n                                    // (regard it as an implementation detail).\n\n                                    builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: associatedField.IsStatic, compilation, declarator);\n\n                                    if (declarator.Initializer != null)\n                                    {\n                                        if (associatedField.IsStatic)\n                                        {\n                                            AddInitializer(ref staticInitializers, associatedField, declarator.Initializer);\n                                        }\n                                        else\n                                        {\n                                            AddInitializer(ref instanceInitializers, associatedField, declarator.Initializer);\n                                        }\n                                    }\n                                }\n\n                                Debug.Assert((object)@event.AddMethod != null);\n                                Debug.Assert((object)@event.RemoveMethod != null);\n\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventDeclaration:\n                        {\n                            var eventSyntax = (EventDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventSyntax.Identifier));\n                            }\n\n                            var @event = new SourceCustomEventSymbol(this, bodyBinder, eventSyntax, diagnostics);\n\n                            builder.NonTypeMembers.Add(@event);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n\n                            Debug.Assert(@event.AssociatedField is null);\n                        }\n                        break;\n\n                    case SyntaxKind.IndexerDeclaration:\n                        {\n                            var indexerSyntax = (IndexerDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(indexerSyntax.ThisKeyword));\n                            }\n\n                            var indexer = SourcePropertySymbol.Create(this, bodyBinder, indexerSyntax, diagnostics);\n                            builder.HaveIndexers = true;\n                            builder.NonTypeMembers.Add(indexer);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.SetMethod);\n                        }\n                        break;\n\n                    case SyntaxKind.ConversionOperatorDeclaration:\n                        {\n                            var conversionOperatorSyntax = (ConversionOperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(conversionOperatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedConversionSymbol.CreateUserDefinedConversionSymbol(\n                                this, conversionOperatorSyntax, compilation.IsNullableAnalysisEnabledIn(conversionOperatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.OperatorDeclaration:\n                        {\n                            var operatorSyntax = (OperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(operatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedOperatorSymbol.CreateUserDefinedOperatorSymbol(\n                                this, operatorSyntax, compilation.IsNullableAnalysisEnabledIn(operatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.GlobalStatement:\n                        {\n                            var globalStatement = ((GlobalStatementSyntax)m).Statement;\n\n                            if (IsScriptClass)\n                            {\n                                var innerStatement = globalStatement;\n\n                                // drill into any LabeledStatements\n                                while (innerStatement.Kind() == SyntaxKind.LabeledStatement)\n                                {\n                                    innerStatement = ((LabeledStatementSyntax)innerStatement).Statement;\n                                }\n\n                                switch (innerStatement.Kind())\n                                {\n                                    case SyntaxKind.LocalDeclarationStatement:\n                                        // We shouldn't reach this place, but field declarations preceded with a label end up here.\n                                        // This is tracked by https://github.com/dotnet/roslyn/issues/13712. Let's do our best for now.\n                                        var decl = (LocalDeclarationStatementSyntax)innerStatement;\n                                        foreach (var vdecl in decl.Declaration.Variables)\n                                        {\n                                            // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                            ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, vdecl, this, DeclarationModifiers.Private,\n                                                                                          containingFieldOpt: null);\n                                        }\n                                        break;\n\n                                    case SyntaxKind.ExpressionStatement:\n                                    case SyntaxKind.IfStatement:\n                                    case SyntaxKind.YieldReturnStatement:\n                                    case SyntaxKind.ReturnStatement:\n                                    case SyntaxKind.ThrowStatement:\n                                    case SyntaxKind.SwitchStatement:\n                                    case SyntaxKind.LockStatement:\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                  innerStatement,\n                                                  this,\n                                                  DeclarationModifiers.Private,\n                                                  containingFieldOpt: null);\n                                        break;\n\n                                    default:\n                                        // no other statement introduces variables into the enclosing scope\n                                        break;\n                                }\n\n                                AddInitializer(ref instanceInitializers, null, globalStatement);\n                            }\n                            else if (reportMisplacedGlobalCode && !SyntaxFacts.IsSimpleProgramTopLevelStatement((GlobalStatementSyntax)m))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_GlobalStatement, new SourceLocation(globalStatement));\n                            }\n                        }\n                        break;\n\n                    default:\n                        Debug.Assert(\n                            SyntaxFacts.IsTypeDeclaration(m.Kind()) ||\n                            m.Kind() == SyntaxKind.NamespaceDeclaration ||\n                            m.Kind() == SyntaxKind.IncompleteMember);\n                        break;\n                }\n            } 306683"];
4415 [label="if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                } 306684"];
4416 [label="bool reportMisplacedGlobalCode = !m.HasErrors; 306685"];
4417 [label="switch (m.Kind())\n                {\n                    case SyntaxKind.FieldDeclaration:\n                        {\n                            var fieldSyntax = (FieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(fieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            bool modifierErrors;\n                            var modifiers = SourceMemberFieldSymbol.MakeModifiers(this, fieldSyntax.Declaration.Variables[0].Identifier, fieldSyntax.Modifiers, diagnostics, out modifierErrors);\n                            foreach (var variable in fieldSyntax.Declaration.Variables)\n                            {\n                                var fieldSymbol = (modifiers & DeclarationModifiers.Fixed) == 0\n                                    ? new SourceMemberFieldSymbolFromDeclarator(this, variable, modifiers, modifierErrors, diagnostics)\n                                    : new SourceFixedFieldSymbol(this, variable, modifiers, modifierErrors, diagnostics);\n                                builder.NonTypeMembers.Add(fieldSymbol);\n                                // All fields are included in the nullable context for constructors and initializers, even fields without\n                                // initializers, to ensure warnings are reported for uninitialized non-nullable fields in NullableWalker.\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: fieldSymbol.IsStatic, compilation, variable);\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, variable, this,\n                                                            DeclarationModifiers.Private | (modifiers & DeclarationModifiers.Static),\n                                                            fieldSymbol);\n                                }\n\n                                if (variable.Initializer != null)\n                                {\n                                    if (fieldSymbol.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, fieldSymbol, variable.Initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.MethodDeclaration:\n                        {\n                            var methodSyntax = (MethodDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(methodSyntax.Identifier));\n                            }\n\n                            var method = SourceOrdinaryMethodSymbol.CreateMethodSymbol(this, bodyBinder, methodSyntax, compilation.IsNullableAnalysisEnabledIn(methodSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.ConstructorDeclaration:\n                        {\n                            var constructorSyntax = (ConstructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(constructorSyntax.Identifier));\n                            }\n\n                            bool isNullableEnabled = compilation.IsNullableAnalysisEnabledIn(constructorSyntax);\n                            var constructor = SourceConstructorSymbol.CreateConstructorSymbol(this, constructorSyntax, isNullableEnabled, diagnostics);\n                            builder.NonTypeMembers.Add(constructor);\n                            if (constructorSyntax.Initializer?.Kind() != SyntaxKind.ThisConstructorInitializer)\n                            {\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.DestructorDeclaration:\n                        {\n                            var destructorSyntax = (DestructorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(destructorSyntax.Identifier));\n                            }\n\n                            // CONSIDER: if this doesn't (directly or indirectly) override object.Finalize, the\n                            // runtime won't consider it a finalizer and it will not be marked as a destructor\n                            // when it is loaded from metadata.  Perhaps we should just treat it as an Ordinary\n                            // method in such cases?\n                            var destructor = new SourceDestructorSymbol(this, destructorSyntax, compilation.IsNullableAnalysisEnabledIn(destructorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(destructor);\n                        }\n                        break;\n\n                    case SyntaxKind.PropertyDeclaration:\n                        {\n                            var propertySyntax = (PropertyDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(propertySyntax.Identifier));\n                            }\n\n                            var property = SourcePropertySymbol.Create(this, bodyBinder, propertySyntax, diagnostics);\n                            builder.NonTypeMembers.Add(property);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, property.SetMethod);\n                            FieldSymbol backingField = property.BackingField;\n\n                            // TODO: can we leave this out of the member list?\n                            // From the 10/12/11 design notes:\n                            //   In addition, we will change autoproperties to behavior in\n                            //   a similar manner and make the autoproperty fields private.\n                            if ((object)backingField != null)\n                            {\n                                builder.NonTypeMembers.Add(backingField);\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: backingField.IsStatic, compilation, propertySyntax);\n\n                                var initializer = propertySyntax.Initializer;\n                                if (initializer != null)\n                                {\n                                    if (IsScriptClass)\n                                    {\n                                        // also gather expression-declared variables from the initializer\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                                                      initializer,\n                                                                                      this,\n                                                                                      DeclarationModifiers.Private | (property.IsStatic ? DeclarationModifiers.Static : 0),\n                                                                                      backingField);\n                                    }\n\n                                    if (property.IsStatic)\n                                    {\n                                        AddInitializer(ref staticInitializers, backingField, initializer);\n                                    }\n                                    else\n                                    {\n                                        AddInitializer(ref instanceInitializers, backingField, initializer);\n                                    }\n                                }\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventFieldDeclaration:\n                        {\n                            var eventFieldSyntax = (EventFieldDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(\n                                    ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventFieldSyntax.Declaration.Variables.First().Identifier));\n                            }\n\n                            foreach (VariableDeclaratorSyntax declarator in eventFieldSyntax.Declaration.Variables)\n                            {\n                                SourceFieldLikeEventSymbol @event = new SourceFieldLikeEventSymbol(this, bodyBinder, eventFieldSyntax.Modifiers, declarator, diagnostics);\n                                builder.NonTypeMembers.Add(@event);\n\n                                FieldSymbol? associatedField = @event.AssociatedField;\n\n                                if (IsScriptClass)\n                                {\n                                    // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                    ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, declarator, this,\n                                                            DeclarationModifiers.Private | (@event.IsStatic ? DeclarationModifiers.Static : 0),\n                                                            associatedField);\n                                }\n\n                                if ((object?)associatedField != null)\n                                {\n                                    // NOTE: specifically don't add the associated field to the members list\n                                    // (regard it as an implementation detail).\n\n                                    builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: associatedField.IsStatic, compilation, declarator);\n\n                                    if (declarator.Initializer != null)\n                                    {\n                                        if (associatedField.IsStatic)\n                                        {\n                                            AddInitializer(ref staticInitializers, associatedField, declarator.Initializer);\n                                        }\n                                        else\n                                        {\n                                            AddInitializer(ref instanceInitializers, associatedField, declarator.Initializer);\n                                        }\n                                    }\n                                }\n\n                                Debug.Assert((object)@event.AddMethod != null);\n                                Debug.Assert((object)@event.RemoveMethod != null);\n\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                                AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n                            }\n                        }\n                        break;\n\n                    case SyntaxKind.EventDeclaration:\n                        {\n                            var eventSyntax = (EventDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(eventSyntax.Identifier));\n                            }\n\n                            var @event = new SourceCustomEventSymbol(this, bodyBinder, eventSyntax, diagnostics);\n\n                            builder.NonTypeMembers.Add(@event);\n\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.AddMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, @event.RemoveMethod);\n\n                            Debug.Assert(@event.AssociatedField is null);\n                        }\n                        break;\n\n                    case SyntaxKind.IndexerDeclaration:\n                        {\n                            var indexerSyntax = (IndexerDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(indexerSyntax.ThisKeyword));\n                            }\n\n                            var indexer = SourcePropertySymbol.Create(this, bodyBinder, indexerSyntax, diagnostics);\n                            builder.HaveIndexers = true;\n                            builder.NonTypeMembers.Add(indexer);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.GetMethod);\n                            AddAccessorIfAvailable(builder.NonTypeMembers, indexer.SetMethod);\n                        }\n                        break;\n\n                    case SyntaxKind.ConversionOperatorDeclaration:\n                        {\n                            var conversionOperatorSyntax = (ConversionOperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(conversionOperatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedConversionSymbol.CreateUserDefinedConversionSymbol(\n                                this, conversionOperatorSyntax, compilation.IsNullableAnalysisEnabledIn(conversionOperatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.OperatorDeclaration:\n                        {\n                            var operatorSyntax = (OperatorDeclarationSyntax)m;\n                            if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(operatorSyntax.OperatorKeyword));\n                            }\n\n                            var method = SourceUserDefinedOperatorSymbol.CreateUserDefinedOperatorSymbol(\n                                this, operatorSyntax, compilation.IsNullableAnalysisEnabledIn(operatorSyntax), diagnostics);\n                            builder.NonTypeMembers.Add(method);\n                        }\n                        break;\n\n                    case SyntaxKind.GlobalStatement:\n                        {\n                            var globalStatement = ((GlobalStatementSyntax)m).Statement;\n\n                            if (IsScriptClass)\n                            {\n                                var innerStatement = globalStatement;\n\n                                // drill into any LabeledStatements\n                                while (innerStatement.Kind() == SyntaxKind.LabeledStatement)\n                                {\n                                    innerStatement = ((LabeledStatementSyntax)innerStatement).Statement;\n                                }\n\n                                switch (innerStatement.Kind())\n                                {\n                                    case SyntaxKind.LocalDeclarationStatement:\n                                        // We shouldn't reach this place, but field declarations preceded with a label end up here.\n                                        // This is tracked by https://github.com/dotnet/roslyn/issues/13712. Let's do our best for now.\n                                        var decl = (LocalDeclarationStatementSyntax)innerStatement;\n                                        foreach (var vdecl in decl.Declaration.Variables)\n                                        {\n                                            // also gather expression-declared variables from the bracketed argument lists and the initializers\n                                            ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers, vdecl, this, DeclarationModifiers.Private,\n                                                                                          containingFieldOpt: null);\n                                        }\n                                        break;\n\n                                    case SyntaxKind.ExpressionStatement:\n                                    case SyntaxKind.IfStatement:\n                                    case SyntaxKind.YieldReturnStatement:\n                                    case SyntaxKind.ReturnStatement:\n                                    case SyntaxKind.ThrowStatement:\n                                    case SyntaxKind.SwitchStatement:\n                                    case SyntaxKind.LockStatement:\n                                        ExpressionFieldFinder.FindExpressionVariables(builder.NonTypeMembers,\n                                                  innerStatement,\n                                                  this,\n                                                  DeclarationModifiers.Private,\n                                                  containingFieldOpt: null);\n                                        break;\n\n                                    default:\n                                        // no other statement introduces variables into the enclosing scope\n                                        break;\n                                }\n\n                                AddInitializer(ref instanceInitializers, null, globalStatement);\n                            }\n                            else if (reportMisplacedGlobalCode && !SyntaxFacts.IsSimpleProgramTopLevelStatement((GlobalStatementSyntax)m))\n                            {\n                                diagnostics.Add(ErrorCode.ERR_GlobalStatement, new SourceLocation(globalStatement));\n                            }\n                        }\n                        break;\n\n                    default:\n                        Debug.Assert(\n                            SyntaxFacts.IsTypeDeclaration(m.Kind()) ||\n                            m.Kind() == SyntaxKind.NamespaceDeclaration ||\n                            m.Kind() == SyntaxKind.IncompleteMember);\n                        break;\n                } 306686"];
4418 [label="var constructorSyntax = (ConstructorDeclarationSyntax)m; 306687"];
4419 [label="IsImplicitClass 306688"];
4420 [label="get\n            {\n                return this.declaration.Declarations[0].Kind == DeclarationKind.ImplicitClass;\n            } 306689"];
4421 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.ImplicitClass; 306690"];
4422 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.ImplicitClass; 306691"];
4423 [label="if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(constructorSyntax.Identifier));\n                            } 306692"];
4424 [label="bool isNullableEnabled = compilation.IsNullableAnalysisEnabledIn(constructorSyntax); 306693"];
4425 [label="compilation.IsNullableAnalysisEnabledIn(constructorSyntax) 306694"];
4426 [label="param IsNullableAnalysisEnabledIn(SyntaxNode syntax) 306695"];
4427 [label="param IsNullableAnalysisEnabledIn(this) 306696"];
4428 [label="return IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span); 306697"];
4429 [label="IsNullableAnalysisEnabledIn((CSharpSyntaxTree)syntax.SyntaxTree, syntax.Span) 306698"];
4430 [label="param IsNullableAnalysisEnabledIn(CSharpSyntaxTree tree) 306699"];
4431 [label="param IsNullableAnalysisEnabledIn(TextSpan span) 306700"];
4432 [label="param IsNullableAnalysisEnabledIn(this) 306701"];
4433 [label="GetNullableAnalysisValue() 306702"];
4434 [label="param GetNullableAnalysisValue(this) 306703"];
4435 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 306704"];
4436 [label="return Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            }; 306705"];
4437 [label="Feature('run-nullable-analysis') switch\n            {\n                'always' => true,\n                'never' => false,\n                _ => null,\n            } 306706"];
4438 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 306707"];
4439 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 306708"];
4440 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 306709"];
4441 [label="Options 306710"];
4442 [label="get\n            {\n                return _options;\n            } 306711"];
4443 [label="return _options; 306712"];
4444 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 306713"];
4445 [label="return GetNullableAnalysisValue() ??\n                tree.IsNullableAnalysisEnabled(span) ??\n                (Options.NullableContextOptions & NullableContextOptions.Warnings) != 0; 306714"];
4446 [label="var constructor = SourceConstructorSymbol.CreateConstructorSymbol(this, constructorSyntax, isNullableEnabled, diagnostics); 306715"];
4447 [label="var constructor = SourceConstructorSymbol.CreateConstructorSymbol(this, constructorSyntax, isNullableEnabled, diagnostics); 306716"];
4448 [label="var constructor = SourceConstructorSymbol.CreateConstructorSymbol(this, constructorSyntax, isNullableEnabled, diagnostics); 306717"];
4449 [label="var constructor = SourceConstructorSymbol.CreateConstructorSymbol(this, constructorSyntax, isNullableEnabled, diagnostics); 306718"];
4450 [label="SourceConstructorSymbol.CreateConstructorSymbol(this, constructorSyntax, isNullableEnabled, diagnostics) 306719"];
4451 [label="param CreateConstructorSymbol(SourceMemberContainerTypeSymbol containingType) 306720"];
4452 [label="param CreateConstructorSymbol(ConstructorDeclarationSyntax syntax) 306721"];
4453 [label="param CreateConstructorSymbol(bool isNullableAnalysisEnabled) 306722"];
4454 [label="param CreateConstructorSymbol(DiagnosticBag diagnostics) 306723"];
4455 [label="var methodKind = syntax.Modifiers.Any(SyntaxKind.StaticKeyword) ? MethodKind.StaticConstructor : MethodKind.Constructor; 306724"];
4456 [label="var methodKind = syntax.Modifiers.Any(SyntaxKind.StaticKeyword) ? MethodKind.StaticConstructor : MethodKind.Constructor; 306725"];
4457 [label="syntax.Modifiers.Any(SyntaxKind.StaticKeyword) 306726"];
4458 [label="return new SourceConstructorSymbol(containingType, syntax.Identifier.GetLocation(), syntax, methodKind, isNullableAnalysisEnabled, diagnostics); 306727"];
4459 [label="return new SourceConstructorSymbol(containingType, syntax.Identifier.GetLocation(), syntax, methodKind, isNullableAnalysisEnabled, diagnostics); 306728"];
4460 [label="syntax.Identifier 306729"];
4461 [label="param SourceConstructorSymbol(SourceMemberContainerTypeSymbol containingType) 306730"];
4462 [label="param SourceConstructorSymbol(Location location) 306731"];
4463 [label="param SourceConstructorSymbol(ConstructorDeclarationSyntax syntax) 306732"];
4464 [label="param SourceConstructorSymbol(MethodKind methodKind) 306733"];
4465 [label="param SourceConstructorSymbol(bool isNullableAnalysisEnabled) 306734"];
4466 [label="param SourceConstructorSymbol(DiagnosticBag diagnostics) 306735"];
4467 [label="param SourceConstructorSymbol(this) 306736"];
4468 [label="containingType 306737"];
4469 [label="location 306738"];
4470 [label="syntax 306739"];
4471 [label="syntax 306740"];
4472 [label="SyntaxFacts.HasYieldOperations(syntax) 306741"];
4473 [label="param SourceConstructorSymbol(this) 306742"];
4474 [label="param SourceConstructorSymbolBase(SourceMemberContainerTypeSymbol containingType) 306743"];
4475 [label="param SourceConstructorSymbolBase(Location location) 306744"];
4476 [label="param SourceConstructorSymbolBase(CSharpSyntaxNode syntax) 306745"];
4477 [label="param SourceConstructorSymbolBase(bool isIterator) 306746"];
4478 [label="param SourceConstructorSymbolBase(this) 306747"];
4479 [label="containingType 306748"];
4480 [label="syntax.GetReference() 306749"];
4481 [label="location 306750"];
4482 [label="ImmutableArray.Create(location) 306751"];
4483 [label="isIterator 306752"];
4484 [label="param SourceConstructorSymbolBase(this) 306753"];
4485 [label="param SourceMemberMethodSymbol(NamedTypeSymbol containingType) 306754"];
4486 [label="param SourceMemberMethodSymbol(SyntaxReference syntaxReferenceOpt) 306755"];
4487 [label="param SourceMemberMethodSymbol(ImmutableArray<Location> locations) 306756"];
4488 [label="param SourceMemberMethodSymbol(bool isIterator) 306757"];
4489 [label="param SourceMemberMethodSymbol(this) 306758"];
4490 [label="syntaxReferenceOpt 306759"];
4491 [label="param SourceMemberMethodSymbol(this) 306760"];
4492 [label="param SourceMethodSymbolWithAttributes(SyntaxReference syntaxReferenceOpt) 306761"];
4493 [label="param SourceMethodSymbolWithAttributes(this) 306762"];
4494 [label="param SourceMethodSymbolWithAttributes(this) 306763"];
4495 [label="param SourceMethodSymbol(this) 306764"];
4496 [label="null 306765"];
4497 [label="None = null 306766"];
4498 [label="param SourceMethodSymbol(this) 306767"];
4499 [label="param MethodSymbol(this) 306768"];
4500 [label="param MethodSymbol(this) 306769"];
4501 [label="_lazyAdapter 306770"];
4502 [label="_lazyParameterSignature 306771"];
4503 [label="_lazyCustomAttributesBag 306772"];
4504 [label="_lazyReturnTypeCustomAttributesBag 306773"];
4505 [label="syntaxReferenceOpt 306774"];
4506 [label="this.syntaxReferenceOpt 306775"];
4507 [label="DeclarationModifiers 306776"];
4508 [label="_containingType 306777"];
4509 [label="_lazyThisParameter 306778"];
4510 [label="_lazyIteratorElementType 306779"];
4511 [label="_lazyOverriddenOrHiddenMembers 306780"];
4512 [label="lazyDocComment 306781"];
4513 [label="lazyExpandedDocComment 306782"];
4514 [label="Debug.Assert((object)containingType != null); 306783"];
4515 [label="Debug.Assert((object)containingType != null); 306784"];
4516 [label="Debug.Assert(!locations.IsEmpty); 306785"];
4517 [label="_containingType 306786"];
4518 [label="this.locations 306787"];
4519 [label="if (isIterator)\n            {\n                _lazyIteratorElementType = TypeWithAnnotations.Boxed.Sentinel;\n            } 306788"];
4520 [label="_lazyIsVararg 306789"];
4521 [label="Debug.Assert(\n                syntax.IsKind(SyntaxKind.ConstructorDeclaration) ||\n                syntax.IsKind(SyntaxKind.RecordDeclaration)); 306790"];
4522 [label="Debug.Assert(\n                syntax.IsKind(SyntaxKind.ConstructorDeclaration) ||\n                syntax.IsKind(SyntaxKind.RecordDeclaration)); 306791"];
4523 [label="Debug.Assert(\n                syntax.IsKind(SyntaxKind.ConstructorDeclaration) ||\n                syntax.IsKind(SyntaxKind.RecordDeclaration)); 306792"];
4524 [label="_isExpressionBodied 306793"];
4525 [label="_hasThisInitializer 306794"];
4526 [label="bool hasBlockBody = syntax.Body != null; 306795"];
4527 [label="bool hasBlockBody = syntax.Body != null; 306796"];
4528 [label="_isExpressionBodied = !hasBlockBody && syntax.ExpressionBody != null; 306797"];
4529 [label="_isExpressionBodied 306798"];
4530 [label="bool hasBody = hasBlockBody || _isExpressionBodied; 306799"];
4531 [label="_hasThisInitializer = syntax.Initializer?.Kind() == SyntaxKind.ThisConstructorInitializer; 306800"];
4532 [label="_hasThisInitializer 306801"];
4533 [label="bool modifierErrors; 306802"];
4534 [label="var declarationModifiers = this.MakeModifiers(syntax.Modifiers, methodKind, hasBody, location, diagnostics, out modifierErrors); 306803"];
4535 [label="var declarationModifiers = this.MakeModifiers(syntax.Modifiers, methodKind, hasBody, location, diagnostics, out modifierErrors); 306804"];
4536 [label="var declarationModifiers = this.MakeModifiers(syntax.Modifiers, methodKind, hasBody, location, diagnostics, out modifierErrors); 306805"];
4537 [label="var declarationModifiers = this.MakeModifiers(syntax.Modifiers, methodKind, hasBody, location, diagnostics, out modifierErrors); 306806"];
4538 [label="var declarationModifiers = this.MakeModifiers(syntax.Modifiers, methodKind, hasBody, location, diagnostics, out modifierErrors); 306807"];
4539 [label="var declarationModifiers = this.MakeModifiers(syntax.Modifiers, methodKind, hasBody, location, diagnostics, out modifierErrors); 306808"];
4540 [label="this.MakeModifiers(syntax.Modifiers, methodKind, hasBody, location, diagnostics, out modifierErrors) 306809"];
4541 [label="param MakeModifiers(SyntaxTokenList modifiers) 306810"];
4542 [label="param MakeModifiers(MethodKind methodKind) 306811"];
4543 [label="param MakeModifiers(bool hasBody) 306812"];
4544 [label="param MakeModifiers(Location location) 306813"];
4545 [label="param MakeModifiers(DiagnosticBag diagnostics) 306814"];
4546 [label="param MakeModifiers(out bool modifierErrors) 306815"];
4547 [label="param MakeModifiers(this) 306816"];
4548 [label="var defaultAccess = (methodKind == MethodKind.StaticConstructor) ? DeclarationModifiers.None : DeclarationModifiers.Private; 306817"];
4549 [label="(methodKind == MethodKind.StaticConstructor) 306818"];
4550 [label="const DeclarationModifiers allowedModifiers =\n                DeclarationModifiers.AccessibilityMask |\n                DeclarationModifiers.Static |\n                DeclarationModifiers.Extern |\n                DeclarationModifiers.Unsafe; 306819"];
4551 [label="var mods = ModifierUtils.MakeAndCheckNontypeMemberModifiers(modifiers, defaultAccess, allowedModifiers, location, diagnostics, out modifierErrors); 306820"];
4552 [label="var mods = ModifierUtils.MakeAndCheckNontypeMemberModifiers(modifiers, defaultAccess, allowedModifiers, location, diagnostics, out modifierErrors); 306821"];
4553 [label="var mods = ModifierUtils.MakeAndCheckNontypeMemberModifiers(modifiers, defaultAccess, allowedModifiers, location, diagnostics, out modifierErrors); 306822"];
4554 [label="var mods = ModifierUtils.MakeAndCheckNontypeMemberModifiers(modifiers, defaultAccess, allowedModifiers, location, diagnostics, out modifierErrors); 306823"];
4555 [label="var mods = ModifierUtils.MakeAndCheckNontypeMemberModifiers(modifiers, defaultAccess, allowedModifiers, location, diagnostics, out modifierErrors); 306824"];
4556 [label="var mods = ModifierUtils.MakeAndCheckNontypeMemberModifiers(modifiers, defaultAccess, allowedModifiers, location, diagnostics, out modifierErrors); 306825"];
4557 [label="ModifierUtils.MakeAndCheckNontypeMemberModifiers(modifiers, defaultAccess, allowedModifiers, location, diagnostics, out modifierErrors) 306826"];
4558 [label="param MakeAndCheckNontypeMemberModifiers(SyntaxTokenList modifiers) 306827"];
4559 [label="param MakeAndCheckNontypeMemberModifiers(DeclarationModifiers defaultAccess) 306828"];
4560 [label="param MakeAndCheckNontypeMemberModifiers(DeclarationModifiers allowedModifiers) 306829"];
4561 [label="param MakeAndCheckNontypeMemberModifiers(Location errorLocation) 306830"];
4562 [label="param MakeAndCheckNontypeMemberModifiers(DiagnosticBag diagnostics) 306831"];
4563 [label="param MakeAndCheckNontypeMemberModifiers(out bool modifierErrors) 306832"];
4564 [label="var result = modifiers.ToDeclarationModifiers(diagnostics); 306833"];
4565 [label="var result = modifiers.ToDeclarationModifiers(diagnostics); 306834"];
4566 [label="modifiers.ToDeclarationModifiers(diagnostics) 306835"];
4567 [label="param ToDeclarationModifiers(this SyntaxTokenList modifiers) 306836"];
4568 [label="param ToDeclarationModifiers(DiagnosticBag diagnostics) 306837"];
4569 [label="bool seenNoDuplicates = true; 306838"];
4570 [label="bool seenNoAccessibilityDuplicates = true; 306839"];
4571 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 306840"];
4572 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 306841"];
4573 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 306842"];
4574 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 306843"];
4575 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 306844"];
4576 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics) 306845"];
4577 [label="param ReportDuplicateModifiers(SyntaxToken modifierToken) 306846"];
4578 [label="param ReportDuplicateModifiers(DeclarationModifiers modifierKind) 306847"];
4579 [label="param ReportDuplicateModifiers(DeclarationModifiers allModifiers) 306848"];
4580 [label="param ReportDuplicateModifiers(ref bool seenNoDuplicates) 306849"];
4581 [label="param ReportDuplicateModifiers(ref bool seenNoAccessibilityDuplicates) 306850"];
4582 [label="param ReportDuplicateModifiers(DiagnosticBag diagnostics) 306851"];
4583 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 306852"];
4584 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 306853"];
4585 [label="switch (result & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.Protected | DeclarationModifiers.Internal:\n                    // the two keywords 'protected' and 'internal' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.ProtectedInternal;\n                    break;\n\n                case DeclarationModifiers.Private | DeclarationModifiers.Protected:\n                    // the two keywords 'private' and 'protected' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.PrivateProtected;\n                    break;\n            } 306854"];
4586 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 306855"];
4587 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 306856"];
4588 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 306857"];
4589 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 306858"];
4590 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 306859"];
4591 [label="result = CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors); 306860"];
4592 [label="CheckModifiers(result, allowedModifiers, errorLocation, diagnostics, modifiers, out modifierErrors) 306861"];
4593 [label="param CheckModifiers(DeclarationModifiers modifiers) 306862"];
4594 [label="param CheckModifiers(DeclarationModifiers allowedModifiers) 306863"];
4595 [label="param CheckModifiers(Location errorLocation) 306864"];
4596 [label="param CheckModifiers(DiagnosticBag diagnostics) 306865"];
4597 [label="param CheckModifiers(SyntaxTokenList? modifierTokens) 306866"];
4598 [label="param CheckModifiers(out bool modifierErrors) 306867"];
4599 [label="modifierErrors = false; 306868"];
4600 [label="DeclarationModifiers errorModifiers = modifiers & ~allowedModifiers; 306869"];
4601 [label="DeclarationModifiers result = modifiers & allowedModifiers; 306870"];
4602 [label="while (errorModifiers != DeclarationModifiers.None)\n            {\n                DeclarationModifiers oneError = errorModifiers & ~(errorModifiers - 1);\n                Debug.Assert(oneError != DeclarationModifiers.None);\n                errorModifiers = errorModifiers & ~oneError;\n\n                switch (oneError)\n                {\n                    case DeclarationModifiers.Partial:\n                        // Provide a specialized error message in the case of partial.\n                        ReportPartialError(errorLocation, diagnostics, modifierTokens);\n                        break;\n\n                    default:\n                        diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, ConvertSingleModifierToSyntaxText(oneError));\n                        break;\n                }\n\n                modifierErrors = true;\n            } 306871"];
4603 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 306872"];
4604 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 306873"];
4605 [label="return result; 306874"];
4606 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 306875"];
4607 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 306876"];
4608 [label="return result; 306877"];
4609 [label="this.CheckUnsafeModifier(mods, diagnostics); 306878"];
4610 [label="this.CheckUnsafeModifier(mods, diagnostics); 306879"];
4611 [label="this.CheckUnsafeModifier(mods, diagnostics); 306880"];
4612 [label="this.CheckUnsafeModifier(mods, diagnostics) 306881"];
4613 [label="param CheckUnsafeModifier(this Symbol symbol) 306882"];
4614 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 306883"];
4615 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 306884"];
4616 [label="get\n            {\n                return this.locations;\n            } 306885"];
4617 [label="return this.locations; 306886"];
4618 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics); 306887"];
4619 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics) 306888"];
4620 [label="param CheckUnsafeModifier(this Symbol symbol) 306889"];
4621 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 306890"];
4622 [label="param CheckUnsafeModifier(Location errorLocation) 306891"];
4623 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 306892"];
4624 [label="if (((modifiers & DeclarationModifiers.Unsafe) == DeclarationModifiers.Unsafe) && !symbol.CompilationAllowsUnsafe())\n            {\n                Debug.Assert(errorLocation != null);\n                diagnostics.Add(ErrorCode.ERR_IllegalUnsafe, errorLocation);\n            } 306893"];
4625 [label="this.CheckUnsafeModifier(mods, diagnostics); 306894"];
4626 [label="if (methodKind == MethodKind.StaticConstructor)\n            {\n                if ((mods & DeclarationModifiers.AccessibilityMask) != 0)\n                {\n                    diagnostics.Add(ErrorCode.ERR_StaticConstructorWithAccessModifiers, location, this);\n                    mods = mods & ~DeclarationModifiers.AccessibilityMask;\n                    modifierErrors = true;\n                }\n\n                mods |= DeclarationModifiers.Private; // we mark static constructors private in the symbol table\n\n                if (this.ContainingType.IsInterface)\n                {\n                    ModifierUtils.ReportDefaultInterfaceImplementationModifiers(hasBody, mods,\n                                                                                DeclarationModifiers.Extern,\n                                                                                location, diagnostics);\n                }\n            } 306895"];
4627 [label="return mods; 306896"];
4628 [label="this.MakeFlags(methodKind, declarationModifiers, returnsVoid: true, isExtensionMethod: false, isNullableAnalysisEnabled: isNullableAnalysisEnabled); 306897"];
4629 [label="this.MakeFlags(methodKind, declarationModifiers, returnsVoid: true, isExtensionMethod: false, isNullableAnalysisEnabled: isNullableAnalysisEnabled); 306898"];
4630 [label="this.MakeFlags(methodKind, declarationModifiers, returnsVoid: true, isExtensionMethod: false, isNullableAnalysisEnabled: isNullableAnalysisEnabled); 306899"];
4631 [label="this.MakeFlags(methodKind, declarationModifiers, returnsVoid: true, isExtensionMethod: false, isNullableAnalysisEnabled: isNullableAnalysisEnabled); 306900"];
4632 [label="this.MakeFlags(methodKind, declarationModifiers, returnsVoid: true, isExtensionMethod: false, isNullableAnalysisEnabled: isNullableAnalysisEnabled) 306901"];
4633 [label="param MakeFlags(MethodKind methodKind) 306902"];
4634 [label="param MakeFlags(DeclarationModifiers declarationModifiers) 306903"];
4635 [label="param MakeFlags(bool returnsVoid) 306904"];
4636 [label="param MakeFlags(bool isExtensionMethod) 306905"];
4637 [label="param MakeFlags(bool isNullableAnalysisEnabled) 306906"];
4638 [label="param MakeFlags(bool isMetadataVirtualIgnoringModifiers = false) 306907"];
4639 [label="param MakeFlags(this) 306908"];
4640 [label="DeclarationModifiers 306909"];
4641 [label="0 306910"];
4642 [label="MethodKindOffset = 0 306911"];
4643 [label="5 306912"];
4644 [label="MethodKindSize = 5 306913"];
4645 [label="MethodKindOffset + MethodKindSize 306914"];
4646 [label="IsExtensionMethodOffset = MethodKindOffset + MethodKindSize 306915"];
4647 [label="1 306916"];
4648 [label="IsExtensionMethodSize = 1 306917"];
4649 [label="IsExtensionMethodOffset + IsExtensionMethodSize 306918"];
4650 [label="IsMetadataVirtualIgnoringInterfaceChangesOffset = IsExtensionMethodOffset + IsExtensionMethodSize 306919"];
4651 [label="1 306920"];
4652 [label="IsMetadataVirtualIgnoringInterfaceChangesSize = 1 306921"];
4653 [label="IsMetadataVirtualIgnoringInterfaceChangesOffset + IsMetadataVirtualIgnoringInterfaceChangesSize 306922"];
4654 [label="IsMetadataVirtualOffset = IsMetadataVirtualIgnoringInterfaceChangesOffset + IsMetadataVirtualIgnoringInterfaceChangesSize 306923"];
4655 [label="1 306924"];
4656 [label="IsMetadataVirtualSize = 1 306925"];
4657 [label="IsMetadataVirtualOffset + IsMetadataVirtualSize 306926"];
4658 [label="IsMetadataVirtualLockedOffset = IsMetadataVirtualOffset + IsMetadataVirtualSize 306927"];
4659 [label="1 306928"];
4660 [label="IsMetadataVirtualLockedSize = 1 306929"];
4661 [label="IsMetadataVirtualLockedOffset + IsMetadataVirtualLockedSize 306930"];
4662 [label="ReturnsVoidOffset = IsMetadataVirtualLockedOffset + IsMetadataVirtualLockedSize 306931"];
4663 [label="2 306932"];
4664 [label="ReturnsVoidSize = 2 306933"];
4665 [label="ReturnsVoidOffset + ReturnsVoidSize 306934"];
4666 [label="NullableContextOffset = ReturnsVoidOffset + ReturnsVoidSize 306935"];
4667 [label="3 306936"];
4668 [label="NullableContextSize = 3 306937"];
4669 [label="NullableContextOffset + NullableContextSize 306938"];
4670 [label="IsNullableAnalysisEnabledOffset = NullableContextOffset + NullableContextSize 306939"];
4671 [label="1 306940"];
4672 [label="IsNullableAnalysisEnabledSize = 1 306941"];
4673 [label="1 306942"];
4674 [label="1 << MethodKindSize 306943"];
4675 [label="1 306944"];
4676 [label="(1 << MethodKindSize) - 1 306945"];
4677 [label="MethodKindMask = (1 << MethodKindSize) - 1 306946"];
4678 [label="1 306947"];
4679 [label="1 << IsExtensionMethodOffset 306948"];
4680 [label="IsExtensionMethodBit = 1 << IsExtensionMethodOffset 306949"];
4681 [label="1 306950"];
4682 [label="1 << IsMetadataVirtualIgnoringInterfaceChangesOffset 306951"];
4683 [label="IsMetadataVirtualIgnoringInterfaceChangesBit = 1 << IsMetadataVirtualIgnoringInterfaceChangesOffset 306952"];
4684 [label="1 306953"];
4685 [label="1 << IsMetadataVirtualIgnoringInterfaceChangesOffset 306954"];
4686 [label="IsMetadataVirtualBit = 1 << IsMetadataVirtualIgnoringInterfaceChangesOffset 306955"];
4687 [label="1 306956"];
4688 [label="1 << IsMetadataVirtualLockedOffset 306957"];
4689 [label="IsMetadataVirtualLockedBit = 1 << IsMetadataVirtualLockedOffset 306958"];
4690 [label="1 306959"];
4691 [label="1 << ReturnsVoidOffset 306960"];
4692 [label="ReturnsVoidBit = 1 << ReturnsVoidOffset 306961"];
4693 [label="1 306962"];
4694 [label="1 306963"];
4695 [label="ReturnsVoidOffset + 1 306964"];
4696 [label="1 << ReturnsVoidOffset + 1 306965"];
4697 [label="ReturnsVoidIsSetBit = 1 << ReturnsVoidOffset + 1 306966"];
4698 [label="1 306967"];
4699 [label="1 << NullableContextSize 306968"];
4700 [label="1 306969"];
4701 [label="(1 << NullableContextSize) - 1 306970"];
4702 [label="NullableContextMask = (1 << NullableContextSize) - 1 306971"];
4703 [label="1 306972"];
4704 [label="1 << IsNullableAnalysisEnabledOffset 306973"];
4705 [label="IsNullableAnalysisEnabledBit = 1 << IsNullableAnalysisEnabledOffset 306974"];
4706 [label="Debug.Assert(EnumUtilities.ContainsAllValues<MethodKind>(MethodKindMask)); 306975"];
4707 [label="Debug.Assert(EnumUtilities.ContainsAllValues<NullableContextKind>(NullableContextMask)); 306976"];
4708 [label="this.flags = new Flags(methodKind, declarationModifiers, returnsVoid, isExtensionMethod, isNullableAnalysisEnabled, isMetadataVirtualIgnoringModifiers); 306977"];
4709 [label="this.flags = new Flags(methodKind, declarationModifiers, returnsVoid, isExtensionMethod, isNullableAnalysisEnabled, isMetadataVirtualIgnoringModifiers); 306978"];
4710 [label="this.flags = new Flags(methodKind, declarationModifiers, returnsVoid, isExtensionMethod, isNullableAnalysisEnabled, isMetadataVirtualIgnoringModifiers); 306979"];
4711 [label="this.flags = new Flags(methodKind, declarationModifiers, returnsVoid, isExtensionMethod, isNullableAnalysisEnabled, isMetadataVirtualIgnoringModifiers); 306980"];
4712 [label="this.flags = new Flags(methodKind, declarationModifiers, returnsVoid, isExtensionMethod, isNullableAnalysisEnabled, isMetadataVirtualIgnoringModifiers); 306981"];
4713 [label="this.flags = new Flags(methodKind, declarationModifiers, returnsVoid, isExtensionMethod, isNullableAnalysisEnabled, isMetadataVirtualIgnoringModifiers); 306982"];
4714 [label="this.flags = new Flags(methodKind, declarationModifiers, returnsVoid, isExtensionMethod, isNullableAnalysisEnabled, isMetadataVirtualIgnoringModifiers); 306983"];
4715 [label="new Flags(methodKind, declarationModifiers, returnsVoid, isExtensionMethod, isNullableAnalysisEnabled, isMetadataVirtualIgnoringModifiers) 306984"];
4716 [label="param Flags(MethodKind methodKind) 306985"];
4717 [label="param Flags(DeclarationModifiers declarationModifiers) 306986"];
4718 [label="param Flags(bool returnsVoid) 306987"];
4719 [label="param Flags(bool isExtensionMethod) 306988"];
4720 [label="param Flags(bool isNullableAnalysisEnabled) 306989"];
4721 [label="param Flags(bool isMetadataVirtualIgnoringModifiers = false) 306990"];
4722 [label="param Flags(this) 306991"];
4723 [label="bool isMetadataVirtual = isMetadataVirtualIgnoringModifiers || ModifiersRequireMetadataVirtual(declarationModifiers); 306992"];
4724 [label="ModifiersRequireMetadataVirtual(declarationModifiers) 306993"];
4725 [label="param ModifiersRequireMetadataVirtual(DeclarationModifiers modifiers) 306994"];
4726 [label="return (modifiers & (DeclarationModifiers.Abstract | DeclarationModifiers.Virtual | DeclarationModifiers.Override)) != 0; 306995"];
4727 [label="return (modifiers & (DeclarationModifiers.Abstract | DeclarationModifiers.Virtual | DeclarationModifiers.Override)) != 0; 306996"];
4728 [label="return (modifiers & (DeclarationModifiers.Abstract | DeclarationModifiers.Virtual | DeclarationModifiers.Override)) != 0; 306997"];
4729 [label="bool isMetadataVirtual = isMetadataVirtualIgnoringModifiers || ModifiersRequireMetadataVirtual(declarationModifiers); 306998"];
4730 [label="int methodKindInt = ((int)methodKind & MethodKindMask) << MethodKindOffset; 306999"];
4731 [label="int methodKindInt = ((int)methodKind & MethodKindMask) << MethodKindOffset; 307000"];
4732 [label="isExtensionMethod 307001"];
4733 [label="int isExtensionMethodInt = isExtensionMethod ? IsExtensionMethodBit : 0; 307002"];
4734 [label="isNullableAnalysisEnabled 307003"];
4735 [label="int isNullableAnalysisEnabledInt = isNullableAnalysisEnabled ? IsNullableAnalysisEnabledBit : 0; 307004"];
4736 [label="isMetadataVirtual 307005"];
4737 [label="int isMetadataVirtualIgnoringInterfaceImplementationChangesInt = isMetadataVirtual ? IsMetadataVirtualIgnoringInterfaceChangesBit : 0; 307006"];
4738 [label="isMetadataVirtual 307007"];
4739 [label="int isMetadataVirtualInt = isMetadataVirtual ? IsMetadataVirtualBit : 0; 307008"];
4740 [label="_flags = methodKindInt\n                    | isExtensionMethodInt\n                    | isNullableAnalysisEnabledInt\n                    | isMetadataVirtualIgnoringInterfaceImplementationChangesInt\n                    | isMetadataVirtualInt\n                    | (returnsVoid ? ReturnsVoidBit : 0)\n                    | ReturnsVoidIsSetBit; 307009"];
4741 [label="_flags = methodKindInt\n                    | isExtensionMethodInt\n                    | isNullableAnalysisEnabledInt\n                    | isMetadataVirtualIgnoringInterfaceImplementationChangesInt\n                    | isMetadataVirtualInt\n                    | (returnsVoid ? ReturnsVoidBit : 0)\n                    | ReturnsVoidIsSetBit; 307010"];
4742 [label="_flags = methodKindInt\n                    | isExtensionMethodInt\n                    | isNullableAnalysisEnabledInt\n                    | isMetadataVirtualIgnoringInterfaceImplementationChangesInt\n                    | isMetadataVirtualInt\n                    | (returnsVoid ? ReturnsVoidBit : 0)\n                    | ReturnsVoidIsSetBit; 307011"];
4743 [label="_flags = methodKindInt\n                    | isExtensionMethodInt\n                    | isNullableAnalysisEnabledInt\n                    | isMetadataVirtualIgnoringInterfaceImplementationChangesInt\n                    | isMetadataVirtualInt\n                    | (returnsVoid ? ReturnsVoidBit : 0)\n                    | ReturnsVoidIsSetBit; 307012"];
4744 [label="returnsVoid 307013"];
4745 [label="_flags = methodKindInt\n                    | isExtensionMethodInt\n                    | isNullableAnalysisEnabledInt\n                    | isMetadataVirtualIgnoringInterfaceImplementationChangesInt\n                    | isMetadataVirtualInt\n                    | (returnsVoid ? ReturnsVoidBit : 0)\n                    | ReturnsVoidIsSetBit; 307014"];
4746 [label="_flags = methodKindInt\n                    | isExtensionMethodInt\n                    | isNullableAnalysisEnabledInt\n                    | isMetadataVirtualIgnoringInterfaceImplementationChangesInt\n                    | isMetadataVirtualInt\n                    | (returnsVoid ? ReturnsVoidBit : 0)\n                    | ReturnsVoidIsSetBit; 307015"];
4747 [label="_flags = methodKindInt\n                    | isExtensionMethodInt\n                    | isNullableAnalysisEnabledInt\n                    | isMetadataVirtualIgnoringInterfaceImplementationChangesInt\n                    | isMetadataVirtualInt\n                    | (returnsVoid ? ReturnsVoidBit : 0)\n                    | ReturnsVoidIsSetBit; 307016"];
4748 [label="_flags 307017"];
4749 [label="this.flags 307018"];
4750 [label="if (syntax.Identifier.ValueText != containingType.Name)\n            {\n                // This is probably a method declaration with the type missing.\n                diagnostics.Add(ErrorCode.ERR_MemberNeedsType, location);\n            } 307019"];
4751 [label="syntax.Identifier 307020"];
4752 [label="get\n            {\n                return declaration.Name;\n            } 307021"];
4753 [label="if (syntax.Identifier.ValueText != containingType.Name)\n            {\n                // This is probably a method declaration with the type missing.\n                diagnostics.Add(ErrorCode.ERR_MemberNeedsType, location);\n            } 307022"];
4754 [label="IsExtern 307023"];
4755 [label="get\n            {\n                return HasExternModifier;\n            } 307024"];
4756 [label="HasExternModifier 307025"];
4757 [label="get\n            {\n                return (this.DeclarationModifiers & DeclarationModifiers.Extern) != 0;\n            } 307026"];
4758 [label="return (this.DeclarationModifiers & DeclarationModifiers.Extern) != 0; 307027"];
4759 [label="return (this.DeclarationModifiers & DeclarationModifiers.Extern) != 0; 307028"];
4760 [label="return HasExternModifier; 307029"];
4761 [label="if (IsExtern)\n            {\n                if (methodKind == MethodKind.Constructor && syntax.Initializer != null)\n                {\n                    diagnostics.Add(ErrorCode.ERR_ExternHasConstructorInitializer, location, this);\n                }\n\n                if (hasBody)\n                {\n                    diagnostics.Add(ErrorCode.ERR_ExternHasBody, location, this);\n                }\n            } 307030"];
4762 [label="if (methodKind == MethodKind.StaticConstructor)\n            {\n                CheckFeatureAvailabilityAndRuntimeSupport(syntax, location, hasBody, diagnostics);\n            } 307031"];
4763 [label="var info = ModifierUtils.CheckAccessibility(this.DeclarationModifiers, this, isExplicitInterfaceImplementation: false); 307032"];
4764 [label="var info = ModifierUtils.CheckAccessibility(this.DeclarationModifiers, this, isExplicitInterfaceImplementation: false); 307033"];
4765 [label="var info = ModifierUtils.CheckAccessibility(this.DeclarationModifiers, this, isExplicitInterfaceImplementation: false); 307034"];
4766 [label="ModifierUtils.CheckAccessibility(this.DeclarationModifiers, this, isExplicitInterfaceImplementation: false) 307035"];
4767 [label="param CheckAccessibility(DeclarationModifiers modifiers) 307036"];
4768 [label="param CheckAccessibility(Symbol symbol) 307037"];
4769 [label="param CheckAccessibility(bool isExplicitInterfaceImplementation) 307038"];
4770 [label="if (!IsValidAccessibility(modifiers))\n            {\n                // error CS0107: More than one protection modifier\n                return new CSDiagnosticInfo(ErrorCode.ERR_BadMemberProtection);\n            } 307039"];
4771 [label="IsValidAccessibility(modifiers) 307040"];
4772 [label="param IsValidAccessibility(DeclarationModifiers modifiers) 307041"];
4773 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                case DeclarationModifiers.Private:\n                case DeclarationModifiers.Protected:\n                case DeclarationModifiers.Internal:\n                case DeclarationModifiers.Public:\n                case DeclarationModifiers.ProtectedInternal:\n                case DeclarationModifiers.PrivateProtected:\n                    return true;\n\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return false;\n            } 307042"];
4774 [label="return true; 307043"];
4775 [label="symbol.Kind 307044"];
4776 [label="get\n            {\n                return SymbolKind.Method;\n            } 307045"];
4777 [label="return SymbolKind.Method; 307046"];
4778 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 307047"];
4779 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 307048"];
4780 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 307049"];
4781 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 307050"];
4782 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 307051"];
4783 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                } 307052"];
4784 [label="return null; 307053"];
4785 [label="var info = ModifierUtils.CheckAccessibility(this.DeclarationModifiers, this, isExplicitInterfaceImplementation: false); 307054"];
4786 [label="if (info != null)\n            {\n                diagnostics.Add(info, location);\n            } 307055"];
4787 [label="if (info != null)\n            {\n                diagnostics.Add(info, location);\n            } 307056"];
4788 [label="if (!modifierErrors)\n            {\n                this.CheckModifiers(methodKind, hasBody, location, diagnostics);\n            } 307057"];
4789 [label="this.CheckModifiers(methodKind, hasBody, location, diagnostics); 307058"];
4790 [label="this.CheckModifiers(methodKind, hasBody, location, diagnostics); 307059"];
4791 [label="this.CheckModifiers(methodKind, hasBody, location, diagnostics); 307060"];
4792 [label="this.CheckModifiers(methodKind, hasBody, location, diagnostics); 307061"];
4793 [label="this.CheckModifiers(methodKind, hasBody, location, diagnostics) 307062"];
4794 [label="param CheckModifiers(MethodKind methodKind) 307063"];
4795 [label="param CheckModifiers(bool hasBody) 307064"];
4796 [label="param CheckModifiers(Location location) 307065"];
4797 [label="param CheckModifiers(DiagnosticBag diagnostics) 307066"];
4798 [label="param CheckModifiers(this) 307067"];
4799 [label="if (!hasBody && !IsExtern)\n            {\n                diagnostics.Add(ErrorCode.ERR_ConcreteMissingBody, location, this);\n            }\n            else if (ContainingType.IsSealed && this.DeclaredAccessibility.HasProtected() && !this.IsOverride)\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), location, this);\n            }\n            else if (ContainingType.IsStatic && methodKind == MethodKind.Constructor)\n            {\n                diagnostics.Add(ErrorCode.ERR_ConstructorInStaticClass, location);\n            } 307068"];
4800 [label="ContainingType 307069"];
4801 [label="get\n            {\n                return _containingType;\n            } 307070"];
4802 [label="return _containingType; 307071"];
4803 [label="if (ContainingType.IsSealed && this.DeclaredAccessibility.HasProtected() && !this.IsOverride)\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), location, this);\n            }\n            else if (ContainingType.IsStatic && methodKind == MethodKind.Constructor)\n            {\n                diagnostics.Add(ErrorCode.ERR_ConstructorInStaticClass, location);\n            } 307072"];
4804 [label="ContainingType.IsSealed 307073"];
4805 [label="=> HasFlag(DeclarationModifiers.Sealed) 307074"];
4806 [label="DeclarationModifiers.Sealed 307075"];
4807 [label="HasFlag(DeclarationModifiers.Sealed) 307076"];
4808 [label="param HasFlag(DeclarationModifiers flag) 307077"];
4809 [label="=> (_declModifiers & flag) != 0 307078"];
4810 [label="_declModifiers & flag 307079"];
4811 [label="0 307080"];
4812 [label="(_declModifiers & flag) != 0 307081"];
4813 [label="ContainingType 307082"];
4814 [label="if (ContainingType.IsStatic && methodKind == MethodKind.Constructor)\n            {\n                diagnostics.Add(ErrorCode.ERR_ConstructorInStaticClass, location);\n            } 307083"];
4815 [label="ContainingType.IsStatic 307084"];
4816 [label="=> HasFlag(DeclarationModifiers.Static) 307085"];
4817 [label="DeclarationModifiers.Static 307086"];
4818 [label="HasFlag(DeclarationModifiers.Static) 307087"];
4819 [label="param HasFlag(DeclarationModifiers flag) 307088"];
4820 [label="=> (_declModifiers & flag) != 0 307089"];
4821 [label="_declModifiers & flag 307090"];
4822 [label="this.CheckModifiers(methodKind, hasBody, location, diagnostics); 307091"];
4823 [label="CheckForBlockAndExpressionBody(\n                syntax.Body, syntax.ExpressionBody, syntax, diagnostics); 307092"];
4824 [label="CheckForBlockAndExpressionBody(\n                syntax.Body, syntax.ExpressionBody, syntax, diagnostics); 307093"];
4825 [label="CheckForBlockAndExpressionBody(\n                syntax.Body, syntax.ExpressionBody, syntax, diagnostics); 307094"];
4826 [label="CheckForBlockAndExpressionBody(\n                syntax.Body, syntax.ExpressionBody, syntax, diagnostics) 307095"];
4827 [label="param CheckForBlockAndExpressionBody(CSharpSyntaxNode block) 307096"];
4828 [label="param CheckForBlockAndExpressionBody(CSharpSyntaxNode expression) 307097"];
4829 [label="param CheckForBlockAndExpressionBody(CSharpSyntaxNode syntax) 307098"];
4830 [label="param CheckForBlockAndExpressionBody(DiagnosticBag diagnostics) 307099"];
4831 [label="if (block != null && expression != null)\n            {\n                diagnostics.Add(ErrorCode.ERR_BlockBodyAndExpressionBody, syntax.GetLocation());\n            } 307100"];
4832 [label="if (block != null && expression != null)\n            {\n                diagnostics.Add(ErrorCode.ERR_BlockBodyAndExpressionBody, syntax.GetLocation());\n            } 307101"];
4833 [label="if (block != null && expression != null)\n            {\n                diagnostics.Add(ErrorCode.ERR_BlockBodyAndExpressionBody, syntax.GetLocation());\n            } 307102"];
4834 [label="if (block != null && expression != null)\n            {\n                diagnostics.Add(ErrorCode.ERR_BlockBodyAndExpressionBody, syntax.GetLocation());\n            } 307103"];
4835 [label="CheckForBlockAndExpressionBody(\n                syntax.Body, syntax.ExpressionBody, syntax, diagnostics); 307104"];
4836 [label="return new SourceConstructorSymbol(containingType, syntax.Identifier.GetLocation(), syntax, methodKind, isNullableAnalysisEnabled, diagnostics); 307105"];
4837 [label="return new SourceConstructorSymbol(containingType, syntax.Identifier.GetLocation(), syntax, methodKind, isNullableAnalysisEnabled, diagnostics); 307106"];
4838 [label="return new SourceConstructorSymbol(containingType, syntax.Identifier.GetLocation(), syntax, methodKind, isNullableAnalysisEnabled, diagnostics); 307107"];
4839 [label="return new SourceConstructorSymbol(containingType, syntax.Identifier.GetLocation(), syntax, methodKind, isNullableAnalysisEnabled, diagnostics); 307108"];
4840 [label="return new SourceConstructorSymbol(containingType, syntax.Identifier.GetLocation(), syntax, methodKind, isNullableAnalysisEnabled, diagnostics); 307109"];
4841 [label="return new SourceConstructorSymbol(containingType, syntax.Identifier.GetLocation(), syntax, methodKind, isNullableAnalysisEnabled, diagnostics); 307110"];
4842 [label="builder.NonTypeMembers.Add(constructor); 307111"];
4843 [label="builder.NonTypeMembers.Add(constructor); 307112"];
4844 [label="if (constructorSyntax.Initializer?.Kind() != SyntaxKind.ThisConstructorInitializer)\n                            {\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled);\n                            } 307113"];
4845 [label="constructor.IsStatic 307114"];
4846 [label="get\n            {\n                return (this.DeclarationModifiers & DeclarationModifiers.Static) != 0;\n            } 307115"];
4847 [label="return (this.DeclarationModifiers & DeclarationModifiers.Static) != 0; 307116"];
4848 [label="return (this.DeclarationModifiers & DeclarationModifiers.Static) != 0; 307117"];
4849 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled); 307118"];
4850 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled); 307119"];
4851 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled) 307120"];
4852 [label="param UpdateIsNullableEnabledForConstructorsAndFields(bool useStatic) 307121"];
4853 [label="param UpdateIsNullableEnabledForConstructorsAndFields(bool value) 307122"];
4854 [label="param UpdateIsNullableEnabledForConstructorsAndFields(this) 307123"];
4855 [label="ref bool isNullableEnabled = ref GetIsNullableEnabledForConstructorsAndFields(useStatic); 307124"];
4856 [label="GetIsNullableEnabledForConstructorsAndFields(useStatic) 307125"];
4857 [label="param GetIsNullableEnabledForConstructorsAndFields(bool useStatic) 307126"];
4858 [label="param GetIsNullableEnabledForConstructorsAndFields(this) 307127"];
4859 [label="useStatic 307128"];
4860 [label="IsNullableEnabledForInstanceConstructorsAndFields 307129"];
4861 [label="return ref useStatic ? ref IsNullableEnabledForStaticConstructorsAndFields : ref IsNullableEnabledForInstanceConstructorsAndFields; 307130"];
4862 [label="isNullableEnabled = isNullableEnabled || value; 307131"];
4863 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled); 307132"];
4864 [label="if (_lazyMembersAndInitializers != null)\n                {\n                    // membersAndInitializers is already computed. no point to continue.\n                    return;\n                } 307133"];
4865 [label="bool reportMisplacedGlobalCode = !m.HasErrors; 307134"];
4866 [label="if (IsImplicitClass && reportMisplacedGlobalCode)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_NamespaceUnexpected,\n                                    new SourceLocation(constructorSyntax.Identifier));\n                            } 307135"];
4867 [label="param SourceConstructorSymbol(DiagnosticBag diagnostics) 307136"];
4868 [label="param SourceConstructorSymbolBase(bool isIterator) 307137"];
4869 [label="isIterator 307138"];
4870 [label="param SourceMemberMethodSymbol(bool isIterator) 307139"];
4871 [label="syntaxReferenceOpt 307140"];
4872 [label="DeclarationModifiers 307141"];
4873 [label="_containingType 307142"];
4874 [label="Debug.Assert((object)containingType != null); 307143"];
4875 [label="Debug.Assert(!locations.IsEmpty); 307144"];
4876 [label="if (isIterator)\n            {\n                _lazyIteratorElementType = TypeWithAnnotations.Boxed.Sentinel;\n            } 307145"];
4877 [label="_isExpressionBodied 307146"];
4878 [label="_hasThisInitializer 307147"];
4879 [label="bool hasBody = hasBlockBody || _isExpressionBodied; 307148"];
4880 [label="bool modifierErrors; 307149"];
4881 [label="param MakeModifiers(MethodKind methodKind) 307150"];
4882 [label="param MakeModifiers(bool hasBody) 307151"];
4883 [label="param MakeModifiers(Location location) 307152"];
4884 [label="param MakeModifiers(DiagnosticBag diagnostics) 307153"];
4885 [label="param MakeModifiers(out bool modifierErrors) 307154"];
4886 [label="var defaultAccess = (methodKind == MethodKind.StaticConstructor) ? DeclarationModifiers.None : DeclarationModifiers.Private; 307155"];
4887 [label="(methodKind == MethodKind.StaticConstructor) 307156"];
4888 [label="param MakeAndCheckNontypeMemberModifiers(DeclarationModifiers defaultAccess) 307157"];
4889 [label="param MakeAndCheckNontypeMemberModifiers(Location errorLocation) 307158"];
4890 [label="param MakeAndCheckNontypeMemberModifiers(DiagnosticBag diagnostics) 307159"];
4891 [label="param MakeAndCheckNontypeMemberModifiers(out bool modifierErrors) 307160"];
4892 [label="param ToDeclarationModifiers(DiagnosticBag diagnostics) 307161"];
4893 [label="bool seenNoDuplicates = true; 307162"];
4894 [label="bool seenNoAccessibilityDuplicates = true; 307163"];
4895 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 307164"];
4896 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 307165"];
4897 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 307166"];
4898 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics); 307167"];
4899 [label="ReportDuplicateModifiers(\n                    modifier, one, result,\n                    ref seenNoDuplicates, ref seenNoAccessibilityDuplicates,\n                    diagnostics) 307168"];
4900 [label="param ReportDuplicateModifiers(SyntaxToken modifierToken) 307169"];
4901 [label="param ReportDuplicateModifiers(DeclarationModifiers modifierKind) 307170"];
4902 [label="param ReportDuplicateModifiers(DeclarationModifiers allModifiers) 307171"];
4903 [label="param ReportDuplicateModifiers(ref bool seenNoDuplicates) 307172"];
4904 [label="param ReportDuplicateModifiers(ref bool seenNoAccessibilityDuplicates) 307173"];
4905 [label="param ReportDuplicateModifiers(DiagnosticBag diagnostics) 307174"];
4906 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 307175"];
4907 [label="if ((allModifiers & modifierKind) != 0)\n            {\n                if (seenNoDuplicates)\n                {\n                    diagnostics.Add(\n                        ErrorCode.ERR_DuplicateModifier,\n                        modifierToken.GetLocation(),\n                        SyntaxFacts.GetText(modifierToken.Kind()));\n                    seenNoDuplicates = false;\n                }\n            } 307176"];
4908 [label="switch (result & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.Protected | DeclarationModifiers.Internal:\n                    // the two keywords 'protected' and 'internal' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.ProtectedInternal;\n                    break;\n\n                case DeclarationModifiers.Private | DeclarationModifiers.Protected:\n                    // the two keywords 'private' and 'protected' together are treated as one modifier.\n                    result &= ~DeclarationModifiers.AccessibilityMask;\n                    result |= DeclarationModifiers.PrivateProtected;\n                    break;\n            } 307177"];
4909 [label="param CheckModifiers(Location errorLocation) 307178"];
4910 [label="param CheckModifiers(DiagnosticBag diagnostics) 307179"];
4911 [label="param CheckModifiers(SyntaxTokenList? modifierTokens) 307180"];
4912 [label="param CheckModifiers(out bool modifierErrors) 307181"];
4913 [label="modifierErrors = false; 307182"];
4914 [label="DeclarationModifiers errorModifiers = modifiers & ~allowedModifiers; 307183"];
4915 [label="while (errorModifiers != DeclarationModifiers.None)\n            {\n                DeclarationModifiers oneError = errorModifiers & ~(errorModifiers - 1);\n                Debug.Assert(oneError != DeclarationModifiers.None);\n                errorModifiers = errorModifiers & ~oneError;\n\n                switch (oneError)\n                {\n                    case DeclarationModifiers.Partial:\n                        // Provide a specialized error message in the case of partial.\n                        ReportPartialError(errorLocation, diagnostics, modifierTokens);\n                        break;\n\n                    default:\n                        diagnostics.Add(ErrorCode.ERR_BadMemberFlag, errorLocation, ConvertSingleModifierToSyntaxText(oneError));\n                        break;\n                }\n\n                modifierErrors = true;\n            } 307184"];
4916 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 307185"];
4917 [label="if ((result & DeclarationModifiers.PrivateProtected) != 0)\n            {\n                modifierErrors |= !Binder.CheckFeatureAvailability(errorLocation.SourceTree, MessageID.IDS_FeaturePrivateProtected, diagnostics, errorLocation);\n            } 307186"];
4918 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 307187"];
4919 [label="if ((result & DeclarationModifiers.AccessibilityMask) == 0)\n            {\n                result |= defaultAccess;\n            } 307188"];
4920 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 307189"];
4921 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 307190"];
4922 [label="symbol.CheckUnsafeModifier(modifiers, symbol.Locations[0], diagnostics) 307191"];
4923 [label="param CheckUnsafeModifier(this Symbol symbol) 307192"];
4924 [label="param CheckUnsafeModifier(DeclarationModifiers modifiers) 307193"];
4925 [label="param CheckUnsafeModifier(Location errorLocation) 307194"];
4926 [label="param CheckUnsafeModifier(DiagnosticBag diagnostics) 307195"];
4927 [label="if (((modifiers & DeclarationModifiers.Unsafe) == DeclarationModifiers.Unsafe) && !symbol.CompilationAllowsUnsafe())\n            {\n                Debug.Assert(errorLocation != null);\n                diagnostics.Add(ErrorCode.ERR_IllegalUnsafe, errorLocation);\n            } 307196"];
4928 [label="if (methodKind == MethodKind.StaticConstructor)\n            {\n                if ((mods & DeclarationModifiers.AccessibilityMask) != 0)\n                {\n                    diagnostics.Add(ErrorCode.ERR_StaticConstructorWithAccessModifiers, location, this);\n                    mods = mods & ~DeclarationModifiers.AccessibilityMask;\n                    modifierErrors = true;\n                }\n\n                mods |= DeclarationModifiers.Private; // we mark static constructors private in the symbol table\n\n                if (this.ContainingType.IsInterface)\n                {\n                    ModifierUtils.ReportDefaultInterfaceImplementationModifiers(hasBody, mods,\n                                                                                DeclarationModifiers.Extern,\n                                                                                location, diagnostics);\n                }\n            } 307197"];
4929 [label="IsExtern 307198"];
4930 [label="get\n            {\n                return HasExternModifier;\n            } 307199"];
4931 [label="HasExternModifier 307200"];
4932 [label="get\n            {\n                return (this.DeclarationModifiers & DeclarationModifiers.Extern) != 0;\n            } 307201"];
4933 [label="return (this.DeclarationModifiers & DeclarationModifiers.Extern) != 0; 307202"];
4934 [label="return (this.DeclarationModifiers & DeclarationModifiers.Extern) != 0; 307203"];
4935 [label="return HasExternModifier; 307204"];
4936 [label="if (IsExtern)\n            {\n                if (methodKind == MethodKind.Constructor && syntax.Initializer != null)\n                {\n                    diagnostics.Add(ErrorCode.ERR_ExternHasConstructorInitializer, location, this);\n                }\n\n                if (hasBody)\n                {\n                    diagnostics.Add(ErrorCode.ERR_ExternHasBody, location, this);\n                }\n            } 307205"];
4937 [label="if (methodKind == MethodKind.StaticConstructor)\n            {\n                CheckFeatureAvailabilityAndRuntimeSupport(syntax, location, hasBody, diagnostics);\n            } 307206"];
4938 [label="var info = ModifierUtils.CheckAccessibility(this.DeclarationModifiers, this, isExplicitInterfaceImplementation: false); 307207"];
4939 [label="var info = ModifierUtils.CheckAccessibility(this.DeclarationModifiers, this, isExplicitInterfaceImplementation: false); 307208"];
4940 [label="ModifierUtils.CheckAccessibility(this.DeclarationModifiers, this, isExplicitInterfaceImplementation: false) 307209"];
4941 [label="param CheckAccessibility(DeclarationModifiers modifiers) 307210"];
4942 [label="param CheckAccessibility(Symbol symbol) 307211"];
4943 [label="param CheckAccessibility(bool isExplicitInterfaceImplementation) 307212"];
4944 [label="if (!IsValidAccessibility(modifiers))\n            {\n                // error CS0107: More than one protection modifier\n                return new CSDiagnosticInfo(ErrorCode.ERR_BadMemberProtection);\n            } 307213"];
4945 [label="IsValidAccessibility(modifiers) 307214"];
4946 [label="param IsValidAccessibility(DeclarationModifiers modifiers) 307215"];
4947 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                case DeclarationModifiers.Private:\n                case DeclarationModifiers.Protected:\n                case DeclarationModifiers.Internal:\n                case DeclarationModifiers.Public:\n                case DeclarationModifiers.ProtectedInternal:\n                case DeclarationModifiers.PrivateProtected:\n                    return true;\n\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return false;\n            } 307216"];
4948 [label="return true; 307217"];
4949 [label="symbol.Kind 307218"];
4950 [label="get\n            {\n                return SymbolKind.Method;\n            } 307219"];
4951 [label="return SymbolKind.Method; 307220"];
4952 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 307221"];
4953 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 307222"];
4954 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 307223"];
4955 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 307224"];
4956 [label="if (!isExplicitInterfaceImplementation &&\n                (symbol.Kind != SymbolKind.Method || (modifiers & DeclarationModifiers.Partial) == 0) &&\n                (modifiers & DeclarationModifiers.Static) == 0)\n            {\n                switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                }\n            } 307225"];
4957 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n                {\n                    case DeclarationModifiers.Protected:\n                    case DeclarationModifiers.ProtectedInternal:\n                    case DeclarationModifiers.PrivateProtected:\n\n                        if (symbol.ContainingType?.IsInterface == true && !symbol.ContainingAssembly.RuntimeSupportsDefaultInterfaceImplementation)\n                        {\n                            return new CSDiagnosticInfo(ErrorCode.ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember);\n                        }\n                        break;\n                } 307226"];
4958 [label="return null; 307227"];
4959 [label="var info = ModifierUtils.CheckAccessibility(this.DeclarationModifiers, this, isExplicitInterfaceImplementation: false); 307228"];
4960 [label="if (info != null)\n            {\n                diagnostics.Add(info, location);\n            } 307229"];
4961 [label="if (info != null)\n            {\n                diagnostics.Add(info, location);\n            } 307230"];
4962 [label="if (!modifierErrors)\n            {\n                this.CheckModifiers(methodKind, hasBody, location, diagnostics);\n            } 307231"];
4963 [label="this.CheckModifiers(methodKind, hasBody, location, diagnostics); 307232"];
4964 [label="this.CheckModifiers(methodKind, hasBody, location, diagnostics); 307233"];
4965 [label="this.CheckModifiers(methodKind, hasBody, location, diagnostics); 307234"];
4966 [label="this.CheckModifiers(methodKind, hasBody, location, diagnostics) 307235"];
4967 [label="param CheckModifiers(MethodKind methodKind) 307236"];
4968 [label="param CheckModifiers(bool hasBody) 307237"];
4969 [label="param CheckModifiers(Location location) 307238"];
4970 [label="param CheckModifiers(DiagnosticBag diagnostics) 307239"];
4971 [label="param CheckModifiers(this) 307240"];
4972 [label="if (!hasBody && !IsExtern)\n            {\n                diagnostics.Add(ErrorCode.ERR_ConcreteMissingBody, location, this);\n            }\n            else if (ContainingType.IsSealed && this.DeclaredAccessibility.HasProtected() && !this.IsOverride)\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), location, this);\n            }\n            else if (ContainingType.IsStatic && methodKind == MethodKind.Constructor)\n            {\n                diagnostics.Add(ErrorCode.ERR_ConstructorInStaticClass, location);\n            } 307241"];
4973 [label="ContainingType 307242"];
4974 [label="get\n            {\n                return _containingType;\n            } 307243"];
4975 [label="return _containingType; 307244"];
4976 [label="if (ContainingType.IsSealed && this.DeclaredAccessibility.HasProtected() && !this.IsOverride)\n            {\n                diagnostics.Add(AccessCheck.GetProtectedMemberInSealedTypeError(ContainingType), location, this);\n            }\n            else if (ContainingType.IsStatic && methodKind == MethodKind.Constructor)\n            {\n                diagnostics.Add(ErrorCode.ERR_ConstructorInStaticClass, location);\n            } 307245"];
4977 [label="ContainingType.IsSealed 307246"];
4978 [label="=> HasFlag(DeclarationModifiers.Sealed) 307247"];
4979 [label="DeclarationModifiers.Sealed 307248"];
4980 [label="HasFlag(DeclarationModifiers.Sealed) 307249"];
4981 [label="param HasFlag(DeclarationModifiers flag) 307250"];
4982 [label="=> (_declModifiers & flag) != 0 307251"];
4983 [label="_declModifiers & flag 307252"];
4984 [label="0 307253"];
4985 [label="(_declModifiers & flag) != 0 307254"];
4986 [label="ContainingType 307255"];
4987 [label="if (ContainingType.IsStatic && methodKind == MethodKind.Constructor)\n            {\n                diagnostics.Add(ErrorCode.ERR_ConstructorInStaticClass, location);\n            } 307256"];
4988 [label="ContainingType.IsStatic 307257"];
4989 [label="=> HasFlag(DeclarationModifiers.Static) 307258"];
4990 [label="DeclarationModifiers.Static 307259"];
4991 [label="HasFlag(DeclarationModifiers.Static) 307260"];
4992 [label="param HasFlag(DeclarationModifiers flag) 307261"];
4993 [label="=> (_declModifiers & flag) != 0 307262"];
4994 [label="_declModifiers & flag 307263"];
4995 [label="this.CheckModifiers(methodKind, hasBody, location, diagnostics); 307264"];
4996 [label="CheckForBlockAndExpressionBody(\n                syntax.Body, syntax.ExpressionBody, syntax, diagnostics); 307265"];
4997 [label="CheckForBlockAndExpressionBody(\n                syntax.Body, syntax.ExpressionBody, syntax, diagnostics); 307266"];
4998 [label="CheckForBlockAndExpressionBody(\n                syntax.Body, syntax.ExpressionBody, syntax, diagnostics); 307267"];
4999 [label="CheckForBlockAndExpressionBody(\n                syntax.Body, syntax.ExpressionBody, syntax, diagnostics) 307268"];
5000 [label="param CheckForBlockAndExpressionBody(CSharpSyntaxNode block) 307269"];
5001 [label="param CheckForBlockAndExpressionBody(CSharpSyntaxNode expression) 307270"];
5002 [label="param CheckForBlockAndExpressionBody(CSharpSyntaxNode syntax) 307271"];
5003 [label="param CheckForBlockAndExpressionBody(DiagnosticBag diagnostics) 307272"];
5004 [label="if (block != null && expression != null)\n            {\n                diagnostics.Add(ErrorCode.ERR_BlockBodyAndExpressionBody, syntax.GetLocation());\n            } 307273"];
5005 [label="if (block != null && expression != null)\n            {\n                diagnostics.Add(ErrorCode.ERR_BlockBodyAndExpressionBody, syntax.GetLocation());\n            } 307274"];
5006 [label="if (block != null && expression != null)\n            {\n                diagnostics.Add(ErrorCode.ERR_BlockBodyAndExpressionBody, syntax.GetLocation());\n            } 307275"];
5007 [label="if (block != null && expression != null)\n            {\n                diagnostics.Add(ErrorCode.ERR_BlockBodyAndExpressionBody, syntax.GetLocation());\n            } 307276"];
5008 [label="return new SourceConstructorSymbol(containingType, syntax.Identifier.GetLocation(), syntax, methodKind, isNullableAnalysisEnabled, diagnostics); 307277"];
5009 [label="if (constructorSyntax.Initializer?.Kind() != SyntaxKind.ThisConstructorInitializer)\n                            {\n                                builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled);\n                            } 307278"];
5010 [label="constructor.IsStatic 307279"];
5011 [label="get\n            {\n                return (this.DeclarationModifiers & DeclarationModifiers.Static) != 0;\n            } 307280"];
5012 [label="return (this.DeclarationModifiers & DeclarationModifiers.Static) != 0; 307281"];
5013 [label="return (this.DeclarationModifiers & DeclarationModifiers.Static) != 0; 307282"];
5014 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled); 307283"];
5015 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled); 307284"];
5016 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled) 307285"];
5017 [label="param UpdateIsNullableEnabledForConstructorsAndFields(bool useStatic) 307286"];
5018 [label="param UpdateIsNullableEnabledForConstructorsAndFields(bool value) 307287"];
5019 [label="param UpdateIsNullableEnabledForConstructorsAndFields(this) 307288"];
5020 [label="ref bool isNullableEnabled = ref GetIsNullableEnabledForConstructorsAndFields(useStatic); 307289"];
5021 [label="GetIsNullableEnabledForConstructorsAndFields(useStatic) 307290"];
5022 [label="param GetIsNullableEnabledForConstructorsAndFields(bool useStatic) 307291"];
5023 [label="param GetIsNullableEnabledForConstructorsAndFields(this) 307292"];
5024 [label="useStatic 307293"];
5025 [label="IsNullableEnabledForInstanceConstructorsAndFields 307294"];
5026 [label="return ref useStatic ? ref IsNullableEnabledForStaticConstructorsAndFields : ref IsNullableEnabledForInstanceConstructorsAndFields; 307295"];
5027 [label="isNullableEnabled = isNullableEnabled || value; 307296"];
5028 [label="builder.UpdateIsNullableEnabledForConstructorsAndFields(useStatic: constructor.IsStatic, isNullableEnabled); 307297"];
5029 [label="AddInitializers(builder.InstanceInitializers, instanceInitializers); 307298"];
5030 [label="AddInitializers(builder.InstanceInitializers, instanceInitializers); 307299"];
5031 [label="AddInitializers(builder.InstanceInitializers, instanceInitializers) 307300"];
5032 [label="param AddInitializers(ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>> allInitializers) 307301"];
5033 [label="param AddInitializers(ArrayBuilder<FieldOrPropertyInitializer>? siblingsOpt) 307302"];
5034 [label="if (siblingsOpt != null)\n            {\n                allInitializers.Add(siblingsOpt);\n            } 307303"];
5035 [label="if (siblingsOpt != null)\n            {\n                allInitializers.Add(siblingsOpt);\n            } 307304"];
5036 [label="AddInitializers(builder.InstanceInitializers, instanceInitializers); 307305"];
5037 [label="AddInitializers(builder.StaticInitializers, staticInitializers); 307306"];
5038 [label="AddInitializers(builder.StaticInitializers, staticInitializers); 307307"];
5039 [label="AddInitializers(builder.StaticInitializers, staticInitializers) 307308"];
5040 [label="param AddInitializers(ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>> allInitializers) 307309"];
5041 [label="param AddInitializers(ArrayBuilder<FieldOrPropertyInitializer>? siblingsOpt) 307310"];
5042 [label="if (siblingsOpt != null)\n            {\n                allInitializers.Add(siblingsOpt);\n            } 307311"];
5043 [label="if (siblingsOpt != null)\n            {\n                allInitializers.Add(siblingsOpt);\n            } 307312"];
5044 [label="AddInitializers(builder.StaticInitializers, staticInitializers); 307313"];
5045 [label="AddDeclaredNontypeMembers(builder, diagnostics); 307314"];
5046 [label="TypeKind 307315"];
5047 [label="get\n            {\n                return _flags.TypeKind;\n            } 307316"];
5048 [label="_flags.TypeKind 307317"];
5049 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 307318"];
5050 [label="switch (TypeKind)\n                {\n                    case TypeKind.Struct:\n                        CheckForStructBadInitializers(builder, diagnostics);\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: false, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Enum:\n                        CheckForStructDefaultConstructors(builder.NonTypeMembers, isEnum: true, diagnostics: diagnostics);\n                        break;\n\n                    case TypeKind.Class:\n                    case TypeKind.Interface:\n                    case TypeKind.Submission:\n                        // No additional checking required.\n                        break;\n\n                    default:\n                        break;\n                } 307319"];
5051 [label="IsTupleType 307320"];
5052 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 307321"];
5053 [label="_ 307322"];
5054 [label="tupleCardinality: out _ 307323"];
5055 [label="IsTupleTypeOfCardinality(tupleCardinality: out _) 307324"];
5056 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 307325"];
5057 [label="param IsTupleTypeOfCardinality(this) 307326"];
5058 [label="IsUnboundGenericType 307327"];
5059 [label="get\n            {\n                return false;\n            } 307328"];
5060 [label="return false; 307329"];
5061 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307330"];
5062 [label="ContainingSymbol 307331"];
5063 [label="get\n            {\n                return _containingSymbol;\n            } 307332"];
5064 [label="return _containingSymbol; 307333"];
5065 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307334"];
5066 [label=".Kind 307335"];
5067 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 307336"];
5068 [label="return SymbolKind.Namespace; 307337"];
5069 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307338"];
5070 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307339"];
5071 [label="ContainingNamespace 307340"];
5072 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 307341"];
5073 [label="this.ContainingSymbol 307342"];
5074 [label="get\n            {\n                return _containingSymbol;\n            } 307343"];
5075 [label="return _containingSymbol; 307344"];
5076 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 307345"];
5077 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 307346"];
5078 [label="var ns = container as NamespaceSymbol; 307347"];
5079 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 307348"];
5080 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 307349"];
5081 [label="return ns; 307350"];
5082 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307351"];
5083 [label="ContainingNamespace.ContainingNamespace 307352"];
5084 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 307353"];
5085 [label="this.ContainingSymbol 307354"];
5086 [label="=> _container 307355"];
5087 [label="_container 307356"];
5088 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 307357"];
5089 [label="container.ContainingSymbol 307358"];
5090 [label="get\n            {\n                return _assemblySymbol;\n            } 307359"];
5091 [label="return _assemblySymbol; 307360"];
5092 [label="get\n            {\n                return null;\n            } 307361"];
5093 [label="return null; 307362"];
5094 [label="return null; 307363"];
5095 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307364"];
5096 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307365"];
5097 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307366"];
5098 [label="tupleCardinality = 0; 307367"];
5099 [label="return false; 307368"];
5100 [label="if (IsTupleType)\n                {\n                    builder.AddOrWrapTupleMembers(this);\n                } 307369"];
5101 [label="if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                } 307370"];
5102 [label="if (Volatile.Read(ref _lazyDeclaredMembersAndInitializers) != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    // _lazyDeclaredMembersAndInitializers is already computed. no point to continue.\n                    builder.Free();\n                    return null;\n                } 307371"];
5103 [label="builder.ToReadOnlyAndFree() 307372"];
5104 [label="param ToReadOnlyAndFree(this) 307373"];
5105 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307374"];
5106 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307375"];
5107 [label="MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers) 307376"];
5108 [label="param ToReadOnlyAndFree(ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>> initializers) 307377"];
5109 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 307378"];
5110 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 307379"];
5111 [label="initializers.Free(); 307380"];
5112 [label="return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty; 307381"];
5113 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307382"];
5114 [label="MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers) 307383"];
5115 [label="param ToReadOnlyAndFree(ArrayBuilder<ArrayBuilder<FieldOrPropertyInitializer>> initializers) 307384"];
5116 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 307385"];
5117 [label="if (initializers.Count == 0)\n                {\n                    initializers.Free();\n                    return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty;\n                } 307386"];
5118 [label="initializers.Free(); 307387"];
5119 [label="return ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>>.Empty; 307388"];
5120 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307389"];
5121 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307390"];
5122 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307391"];
5123 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307392"];
5124 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307393"];
5125 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307394"];
5126 [label="return new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307395"];
5127 [label="new DeclaredMembersAndInitializers(\n                    NonTypeMembers.ToImmutableAndFree(),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(StaticInitializers),\n                    MembersAndInitializersBuilder.ToReadOnlyAndFree(InstanceInitializers),\n                    HaveIndexers,\n                    RecordDeclarationWithParameters,\n                    RecordPrimaryConstructor,\n                    InstanceInitializersIndexForRecordDeclarationWithParameters,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields) 307396"];
5128 [label="param DeclaredMembersAndInitializers(ImmutableArray<Symbol> nonTypeMembers) 307397"];
5129 [label="param DeclaredMembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> staticInitializers) 307398"];
5130 [label="param DeclaredMembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> instanceInitializers) 307399"];
5131 [label="param DeclaredMembersAndInitializers(bool haveIndexers) 307400"];
5132 [label="param DeclaredMembersAndInitializers(RecordDeclarationSyntax? recordDeclarationWithParameters) 307401"];
5133 [label="param DeclaredMembersAndInitializers(SynthesizedRecordConstructor? recordPrimaryConstructor) 307402"];
5134 [label="param DeclaredMembersAndInitializers(int instanceInitializersIndexForRecordDeclarationWithParameters) 307403"];
5135 [label="param DeclaredMembersAndInitializers(bool isNullableEnabledForInstanceConstructorsAndFields) 307404"];
5136 [label="param DeclaredMembersAndInitializers(bool isNullableEnabledForStaticConstructorsAndFields) 307405"];
5137 [label="param DeclaredMembersAndInitializers(this) 307406"];
5138 [label="HaveIndexers 307407"];
5139 [label="RecordDeclarationWithParameters 307408"];
5140 [label="RecordPrimaryConstructor 307409"];
5141 [label="InstanceInitializersIndexForRecordDeclarationWithParameters 307410"];
5142 [label="IsNullableEnabledForInstanceConstructorsAndFields 307411"];
5143 [label="IsNullableEnabledForStaticConstructorsAndFields 307412"];
5144 [label="Debug.Assert(!nonTypeMembers.IsDefault); 307413"];
5145 [label="Debug.Assert(!staticInitializers.IsDefault); 307414"];
5146 [label="Debug.Assert(!instanceInitializers.IsDefault); 307415"];
5147 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 307416"];
5148 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 307417"];
5149 [label="Debug.Assert(recordDeclarationWithParameters is object == recordPrimaryConstructor is object); 307418"];
5150 [label="this.NonTypeMembers 307419"];
5151 [label="this.StaticInitializers 307420"];
5152 [label="this.InstanceInitializers 307421"];
5153 [label="this.HaveIndexers 307422"];
5154 [label="this.RecordDeclarationWithParameters 307423"];
5155 [label="this.RecordPrimaryConstructor 307424"];
5156 [label="this.InstanceInitializersIndexForRecordDeclarationWithParameters 307425"];
5157 [label="this.IsNullableEnabledForInstanceConstructorsAndFields 307426"];
5158 [label="this.IsNullableEnabledForStaticConstructorsAndFields 307427"];
5159 [label="return builder.ToReadOnlyAndFree(); 307428"];
5160 [label="declaredMembersAndInitializers = buildDeclaredMembersAndInitializers(diagnostics); 307429"];
5161 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 307430"];
5162 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 307431"];
5163 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 307432"];
5164 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyDeclaredMembersAndInitializers, declaredMembersAndInitializers, DeclaredMembersAndInitializers.UninitializedSentinel); 307433"];
5165 [label="if (alreadyKnown != DeclaredMembersAndInitializers.UninitializedSentinel)\n                {\n                    diagnostics.Free();\n                    return alreadyKnown;\n                } 307434"];
5166 [label="AddDeclarationDiagnostics(diagnostics); 307435"];
5167 [label="AddDeclarationDiagnostics(diagnostics) 307436"];
5168 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 307437"];
5169 [label="param AddDeclarationDiagnostics(this) 307438"];
5170 [label="ContainingSymbol 307439"];
5171 [label="get\n            {\n                return _containingSymbol;\n            } 307440"];
5172 [label="return _containingSymbol; 307441"];
5173 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 307442"];
5174 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 307443"];
5175 [label="AddDeclarationDiagnostics(diagnostics); 307444"];
5176 [label="diagnostics.Free(); 307445"];
5177 [label="return declaredMembersAndInitializers!; 307446"];
5178 [label="var declaredMembersAndInitializers = getDeclaredMembersAndInitializers(); 307447"];
5179 [label="if (declaredMembersAndInitializers is null)\n            {\n                // Another thread completed the work before this one\n                return null;\n            } 307448"];
5180 [label="var membersAndInitializersBuilder = new MembersAndInitializersBuilder(declaredMembersAndInitializers); 307449"];
5181 [label="var membersAndInitializersBuilder = new MembersAndInitializersBuilder(declaredMembersAndInitializers); 307450"];
5182 [label="new MembersAndInitializersBuilder(declaredMembersAndInitializers) 307451"];
5183 [label="param MembersAndInitializersBuilder(DeclaredMembersAndInitializers declaredMembersAndInitializers) 307452"];
5184 [label="param MembersAndInitializersBuilder(this) 307453"];
5185 [label="NonTypeMembers 307454"];
5186 [label="InstanceInitializersForPositionalMembers 307455"];
5187 [label="IsNullableEnabledForInstanceConstructorsAndFields 307456"];
5188 [label="IsNullableEnabledForStaticConstructorsAndFields 307457"];
5189 [label="Debug.Assert(declaredMembersAndInitializers != DeclaredMembersAndInitializers.UninitializedSentinel); 307458"];
5190 [label="this.IsNullableEnabledForInstanceConstructorsAndFields 307459"];
5191 [label="this.IsNullableEnabledForStaticConstructorsAndFields 307460"];
5192 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 307461"];
5193 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 307462"];
5194 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 307463"];
5195 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics) 307464"];
5196 [label="param AddSynthesizedMembers(MembersAndInitializersBuilder builder) 307465"];
5197 [label="param AddSynthesizedMembers(DeclaredMembersAndInitializers declaredMembersAndInitializers) 307466"];
5198 [label="param AddSynthesizedMembers(DiagnosticBag diagnostics) 307467"];
5199 [label="param AddSynthesizedMembers(this) 307468"];
5200 [label="TypeKind 307469"];
5201 [label="get\n            {\n                return _flags.TypeKind;\n            } 307470"];
5202 [label="_flags.TypeKind 307471"];
5203 [label="get { return (TypeKind)((_flags >> TypeKindOffset) & TypeKindMask); } 307472"];
5204 [label="switch (TypeKind)\n            {\n                case TypeKind.Struct:\n                case TypeKind.Enum:\n                case TypeKind.Class:\n                case TypeKind.Interface:\n                case TypeKind.Submission:\n                    AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics);\n                    AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics);\n                    break;\n\n                default:\n                    break;\n            } 307473"];
5205 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 307474"];
5206 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 307475"];
5207 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 307476"];
5208 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics) 307477"];
5209 [label="param AddSynthesizedRecordMembersIfNecessary(MembersAndInitializersBuilder builder) 307478"];
5210 [label="param AddSynthesizedRecordMembersIfNecessary(DeclaredMembersAndInitializers declaredMembersAndInitializers) 307479"];
5211 [label="param AddSynthesizedRecordMembersIfNecessary(DiagnosticBag diagnostics) 307480"];
5212 [label="param AddSynthesizedRecordMembersIfNecessary(this) 307481"];
5213 [label="if (declaration.Kind != DeclarationKind.Record)\n            {\n                return;\n            } 307482"];
5214 [label="return; 307483"];
5215 [label="AddSynthesizedRecordMembersIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 307484"];
5216 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 307485"];
5217 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 307486"];
5218 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 307487"];
5219 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics) 307488"];
5220 [label="param AddSynthesizedConstructorsIfNecessary(MembersAndInitializersBuilder builder) 307489"];
5221 [label="param AddSynthesizedConstructorsIfNecessary(DeclaredMembersAndInitializers declaredMembersAndInitializers) 307490"];
5222 [label="param AddSynthesizedConstructorsIfNecessary(DiagnosticBag diagnostics) 307491"];
5223 [label="param AddSynthesizedConstructorsIfNecessary(this) 307492"];
5224 [label="var hasInstanceConstructor = false; 307493"];
5225 [label="var hasParameterlessInstanceConstructor = false; 307494"];
5226 [label="var hasStaticConstructor = false; 307495"];
5227 [label="var membersSoFar = builder.GetNonTypeMembers(declaredMembersAndInitializers); 307496"];
5228 [label="builder.GetNonTypeMembers(declaredMembersAndInitializers) 307497"];
5229 [label="param GetNonTypeMembers(DeclaredMembersAndInitializers declaredMembers) 307498"];
5230 [label="param GetNonTypeMembers(this) 307499"];
5231 [label="return NonTypeMembers ?? (IReadOnlyCollection<Symbol>)declaredMembers.NonTypeMembers; 307500"];
5232 [label="return NonTypeMembers ?? (IReadOnlyCollection<Symbol>)declaredMembers.NonTypeMembers; 307501"];
5233 [label="foreach (var member in membersSoFar)\n            {\n                if (member.Kind == SymbolKind.Method)\n                {\n                    var method = (MethodSymbol)member;\n                    switch (method.MethodKind)\n                    {\n                        case MethodKind.Constructor:\n                            // Ignore the record copy constructor\n                            if (!IsRecord ||\n                                !(SynthesizedRecordCopyCtor.HasCopyConstructorSignature(method) && method is not SynthesizedRecordConstructor))\n                            {\n                                hasInstanceConstructor = true;\n                                hasParameterlessInstanceConstructor = hasParameterlessInstanceConstructor || method.ParameterCount == 0;\n                            }\n                            break;\n\n                        case MethodKind.StaticConstructor:\n                            hasStaticConstructor = true;\n                            break;\n                    }\n                }\n\n                //kick out early if we've seen everything we're looking for\n                if (hasInstanceConstructor && hasStaticConstructor)\n                {\n                    break;\n                }\n            } 307502"];
5234 [label="member.Kind 307503"];
5235 [label="get\n            {\n                return SymbolKind.Method;\n            } 307504"];
5236 [label="return SymbolKind.Method; 307505"];
5237 [label="if (member.Kind == SymbolKind.Method)\n                {\n                    var method = (MethodSymbol)member;\n                    switch (method.MethodKind)\n                    {\n                        case MethodKind.Constructor:\n                            // Ignore the record copy constructor\n                            if (!IsRecord ||\n                                !(SynthesizedRecordCopyCtor.HasCopyConstructorSignature(method) && method is not SynthesizedRecordConstructor))\n                            {\n                                hasInstanceConstructor = true;\n                                hasParameterlessInstanceConstructor = hasParameterlessInstanceConstructor || method.ParameterCount == 0;\n                            }\n                            break;\n\n                        case MethodKind.StaticConstructor:\n                            hasStaticConstructor = true;\n                            break;\n                    }\n                } 307506"];
5238 [label="var method = (MethodSymbol)member; 307507"];
5239 [label="method.MethodKind 307508"];
5240 [label="get\n            {\n                return this.flags.MethodKind;\n            } 307509"];
5241 [label="this.flags.MethodKind 307510"];
5242 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 307511"];
5243 [label="return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); 307512"];
5244 [label="return this.flags.MethodKind; 307513"];
5245 [label="switch (method.MethodKind)\n                    {\n                        case MethodKind.Constructor:\n                            // Ignore the record copy constructor\n                            if (!IsRecord ||\n                                !(SynthesizedRecordCopyCtor.HasCopyConstructorSignature(method) && method is not SynthesizedRecordConstructor))\n                            {\n                                hasInstanceConstructor = true;\n                                hasParameterlessInstanceConstructor = hasParameterlessInstanceConstructor || method.ParameterCount == 0;\n                            }\n                            break;\n\n                        case MethodKind.StaticConstructor:\n                            hasStaticConstructor = true;\n                            break;\n                    } 307514"];
5246 [label="IsRecord 307515"];
5247 [label="get\n            {\n                return this.declaration.Declarations[0].Kind == DeclarationKind.Record;\n            } 307516"];
5248 [label="if (!IsRecord ||\n                                !(SynthesizedRecordCopyCtor.HasCopyConstructorSignature(method) && method is not SynthesizedRecordConstructor))\n                            {\n                                hasInstanceConstructor = true;\n                                hasParameterlessInstanceConstructor = hasParameterlessInstanceConstructor || method.ParameterCount == 0;\n                            } 307517"];
5249 [label="hasInstanceConstructor = true; 307518"];
5250 [label="method.ParameterCount 307519"];
5251 [label="get\n            {\n                if (!_lazyParameters.IsDefault)\n                {\n                    return _lazyParameters.Length;\n                }\n\n                return GetParameterList().ParameterCount;\n            } 307520"];
5252 [label="if (!_lazyParameters.IsDefault)\n                {\n                    return _lazyParameters.Length;\n                } 307521"];
5253 [label="GetParameterList() 307522"];
5254 [label="param GetParameterList(this) 307523"];
5255 [label="GetSyntax() 307524"];
5256 [label="param GetSyntax(this) 307525"];
5257 [label="Debug.Assert(syntaxReferenceOpt != null); 307526"];
5258 [label="Debug.Assert(syntaxReferenceOpt != null); 307527"];
5259 [label="return (ConstructorDeclarationSyntax)syntaxReferenceOpt.GetSyntax(); 307528"];
5260 [label="return (ConstructorDeclarationSyntax)syntaxReferenceOpt.GetSyntax(); 307529"];
5261 [label="return GetSyntax().ParameterList; 307530"];
5262 [label="return GetParameterList().ParameterCount; 307531"];
5263 [label="hasParameterlessInstanceConstructor = hasParameterlessInstanceConstructor || method.ParameterCount == 0; 307532"];
5264 [label="hasParameterlessInstanceConstructor = hasParameterlessInstanceConstructor || method.ParameterCount == 0; 307533"];
5265 [label="hasParameterlessInstanceConstructor = hasParameterlessInstanceConstructor || method.ParameterCount == 0; 307534"];
5266 [label="if (hasInstanceConstructor && hasStaticConstructor)\n                {\n                    break;\n                } 307535"];
5267 [label="get\n            {\n                return SymbolKind.Method;\n            } 307536"];
5268 [label="hasInstanceConstructor = true; 307537"];
5269 [label="if (hasInstanceConstructor && hasStaticConstructor)\n                {\n                    break;\n                } 307538"];
5270 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 307539"];
5271 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 307540"];
5272 [label="if ((!hasParameterlessInstanceConstructor && this.IsStructType()) ||\n                (!hasInstanceConstructor && !this.IsStatic && !this.IsInterface))\n            {\n                builder.AddNonTypeMember((this.TypeKind == TypeKind.Submission) ?\n                    new SynthesizedSubmissionConstructor(this, diagnostics) :\n                    new SynthesizedInstanceConstructor(this),\n                    declaredMembersAndInitializers);\n            } 307541"];
5273 [label="if (!hasStaticConstructor && hasNonConstantInitializer(declaredMembersAndInitializers.StaticInitializers))\n            {\n                // Note: we don't have to put anything in the method - the binder will\n                // do that when processing field initializers.\n                builder.AddNonTypeMember(new SynthesizedStaticConstructor(this), declaredMembersAndInitializers);\n            } 307542"];
5274 [label="hasNonConstantInitializer(declaredMembersAndInitializers.StaticInitializers) 307543"];
5275 [label="static bool hasNonConstantInitializer(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> initializers)\n            {\n                return initializers.Any(siblings => siblings.Any(initializer => !initializer.FieldOpt.IsConst));\n            } 307544"];
5276 [label="return initializers.Any(siblings => siblings.Any(initializer => !initializer.FieldOpt.IsConst)); 307545"];
5277 [label="return initializers.Any(siblings => siblings.Any(initializer => !initializer.FieldOpt.IsConst)); 307546"];
5278 [label="if (!hasStaticConstructor && hasNonConstantInitializer(declaredMembersAndInitializers.StaticInitializers))\n            {\n                // Note: we don't have to put anything in the method - the binder will\n                // do that when processing field initializers.\n                builder.AddNonTypeMember(new SynthesizedStaticConstructor(this), declaredMembersAndInitializers);\n            } 307547"];
5279 [label="this.IsScriptClass 307548"];
5280 [label="get\n            {\n                var kind = this.declaration.Declarations[0].Kind;\n                return kind == DeclarationKind.Script || kind == DeclarationKind.Submission;\n            } 307549"];
5281 [label="var kind = this.declaration.Declarations[0].Kind; 307550"];
5282 [label="var kind = this.declaration.Declarations[0].Kind; 307551"];
5283 [label="return kind == DeclarationKind.Script || kind == DeclarationKind.Submission; 307552"];
5284 [label="if (this.IsScriptClass)\n            {\n                var scriptInitializer = new SynthesizedInteractiveInitializerMethod(this, diagnostics);\n                builder.AddNonTypeMember(scriptInitializer, declaredMembersAndInitializers);\n                var scriptEntryPoint = SynthesizedEntryPointSymbol.Create(scriptInitializer, diagnostics);\n                builder.AddNonTypeMember(scriptEntryPoint, declaredMembersAndInitializers);\n            } 307553"];
5285 [label="AddSynthesizedConstructorsIfNecessary(builder, declaredMembersAndInitializers, diagnostics); 307554"];
5286 [label="AddSynthesizedMembers(membersAndInitializersBuilder, declaredMembersAndInitializers, diagnostics); 307555"];
5287 [label="if (Volatile.Read(ref _lazyMembersAndInitializers) != null)\n            {\n                // Another thread completed the work before this one\n                membersAndInitializersBuilder.Free();\n                return null;\n            } 307556"];
5288 [label="if (Volatile.Read(ref _lazyMembersAndInitializers) != null)\n            {\n                // Another thread completed the work before this one\n                membersAndInitializersBuilder.Free();\n                return null;\n            } 307557"];
5289 [label="return membersAndInitializersBuilder.ToReadOnlyAndFree(declaredMembersAndInitializers); 307558"];
5290 [label="membersAndInitializersBuilder.ToReadOnlyAndFree(declaredMembersAndInitializers) 307559"];
5291 [label="param ToReadOnlyAndFree(DeclaredMembersAndInitializers declaredMembers) 307560"];
5292 [label="param ToReadOnlyAndFree(this) 307561"];
5293 [label="var nonTypeMembers = NonTypeMembers?.ToImmutableAndFree() ?? declaredMembers.NonTypeMembers; 307562"];
5294 [label="var nonTypeMembers = NonTypeMembers?.ToImmutableAndFree() ?? declaredMembers.NonTypeMembers; 307563"];
5295 [label="var nonTypeMembers = NonTypeMembers?.ToImmutableAndFree() ?? declaredMembers.NonTypeMembers; 307564"];
5296 [label="var instanceInitializers = InstanceInitializersForPositionalMembers is null\n                    ? declaredMembers.InstanceInitializers\n                    : mergeInitializers(); 307565"];
5297 [label="InstanceInitializersForPositionalMembers is null 307566"];
5298 [label="declaredMembers.InstanceInitializers 307567"];
5299 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307568"];
5300 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307569"];
5301 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307570"];
5302 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307571"];
5303 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307572"];
5304 [label="return new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields); 307573"];
5305 [label="new MembersAndInitializers(\n                    nonTypeMembers,\n                    declaredMembers.StaticInitializers,\n                    instanceInitializers,\n                    declaredMembers.HaveIndexers,\n                    isNullableEnabledForInstanceConstructorsAndFields: IsNullableEnabledForInstanceConstructorsAndFields,\n                    isNullableEnabledForStaticConstructorsAndFields: IsNullableEnabledForStaticConstructorsAndFields) 307574"];
5306 [label="param MembersAndInitializers(ImmutableArray<Symbol> nonTypeMembers) 307575"];
5307 [label="param MembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> staticInitializers) 307576"];
5308 [label="param MembersAndInitializers(ImmutableArray<ImmutableArray<FieldOrPropertyInitializer>> instanceInitializers) 307577"];
5309 [label="param MembersAndInitializers(bool haveIndexers) 307578"];
5310 [label="param MembersAndInitializers(bool isNullableEnabledForInstanceConstructorsAndFields) 307579"];
5311 [label="param MembersAndInitializers(bool isNullableEnabledForStaticConstructorsAndFields) 307580"];
5312 [label="param MembersAndInitializers(this) 307581"];
5313 [label="HaveIndexers 307582"];
5314 [label="IsNullableEnabledForInstanceConstructorsAndFields 307583"];
5315 [label="IsNullableEnabledForStaticConstructorsAndFields 307584"];
5316 [label="Debug.Assert(!nonTypeMembers.IsDefault); 307585"];
5317 [label="Debug.Assert(!staticInitializers.IsDefault); 307586"];
5318 [label="Debug.Assert(staticInitializers.All(g => !g.IsDefault)); 307587"];
5319 [label="Debug.Assert(staticInitializers.All(g => !g.IsDefault)); 307588"];
5320 [label="Debug.Assert(staticInitializers.All(g => !g.IsDefault)); 307589"];
5321 [label="Debug.Assert(!instanceInitializers.IsDefault); 307590"];
5322 [label="Debug.Assert(instanceInitializers.All(g => !g.IsDefault)); 307591"];
5323 [label="Debug.Assert(instanceInitializers.All(g => !g.IsDefault)); 307592"];
5324 [label="Debug.Assert(instanceInitializers.All(g => !g.IsDefault)); 307593"];
5325 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 307594"];
5326 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 307595"];
5327 [label="Debug.Assert(!nonTypeMembers.Any(s => s is TypeSymbol)); 307596"];
5328 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 307597"];
5329 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 307598"];
5330 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 307599"];
5331 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 307600"];
5332 [label="param IsIndexer(this Symbol symbol) 307601"];
5333 [label="symbol.Kind 307602"];
5334 [label="get\n            {\n                return SymbolKind.Method;\n            } 307603"];
5335 [label="return SymbolKind.Method; 307604"];
5336 [label="return symbol.Kind == SymbolKind.Property && ((PropertySymbol)symbol).IsIndexer; 307605"];
5337 [label="Debug.Assert(haveIndexers == nonTypeMembers.Any(s => s.IsIndexer())); 307606"];
5338 [label="this.NonTypeMembers 307607"];
5339 [label="this.StaticInitializers 307608"];
5340 [label="this.InstanceInitializers 307609"];
5341 [label="this.HaveIndexers 307610"];
5342 [label="this.IsNullableEnabledForInstanceConstructorsAndFields 307611"];
5343 [label="this.IsNullableEnabledForStaticConstructorsAndFields 307612"];
5344 [label="return membersAndInitializersBuilder.ToReadOnlyAndFree(declaredMembersAndInitializers); 307613"];
5345 [label="membersAndInitializers = BuildMembersAndInitializers(diagnostics); 307614"];
5346 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 307615"];
5347 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 307616"];
5348 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 307617"];
5349 [label="var alreadyKnown = Interlocked.CompareExchange(ref _lazyMembersAndInitializers, membersAndInitializers, null); 307618"];
5350 [label="if (alreadyKnown != null)\n            {\n                diagnostics.Free();\n                return alreadyKnown;\n            } 307619"];
5351 [label="if (alreadyKnown != null)\n            {\n                diagnostics.Free();\n                return alreadyKnown;\n            } 307620"];
5352 [label="AddDeclarationDiagnostics(diagnostics); 307621"];
5353 [label="AddDeclarationDiagnostics(diagnostics) 307622"];
5354 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 307623"];
5355 [label="param AddDeclarationDiagnostics(this) 307624"];
5356 [label="ContainingSymbol 307625"];
5357 [label="get\n            {\n                return _containingSymbol;\n            } 307626"];
5358 [label="return _containingSymbol; 307627"];
5359 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 307628"];
5360 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 307629"];
5361 [label="AddDeclarationDiagnostics(diagnostics); 307630"];
5362 [label="diagnostics.Free(); 307631"];
5363 [label="_lazyDeclaredMembersAndInitializers = null; 307632"];
5364 [label="_lazyDeclaredMembersAndInitializers 307633"];
5365 [label="return membersAndInitializers!; 307634"];
5366 [label="var membersAndInitializers = GetMembersAndInitializers(); 307635"];
5367 [label="this.IsTupleType 307636"];
5368 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 307637"];
5369 [label="_ 307638"];
5370 [label="tupleCardinality: out _ 307639"];
5371 [label="IsTupleTypeOfCardinality(tupleCardinality: out _) 307640"];
5372 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 307641"];
5373 [label="param IsTupleTypeOfCardinality(this) 307642"];
5374 [label="IsUnboundGenericType 307643"];
5375 [label="get\n            {\n                return false;\n            } 307644"];
5376 [label="return false; 307645"];
5377 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307646"];
5378 [label="ContainingSymbol 307647"];
5379 [label="get\n            {\n                return _containingSymbol;\n            } 307648"];
5380 [label="return _containingSymbol; 307649"];
5381 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307650"];
5382 [label=".Kind 307651"];
5383 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 307652"];
5384 [label="return SymbolKind.Namespace; 307653"];
5385 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307654"];
5386 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307655"];
5387 [label="ContainingNamespace 307656"];
5388 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 307657"];
5389 [label="this.ContainingSymbol 307658"];
5390 [label="get\n            {\n                return _containingSymbol;\n            } 307659"];
5391 [label="return _containingSymbol; 307660"];
5392 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 307661"];
5393 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 307662"];
5394 [label="var ns = container as NamespaceSymbol; 307663"];
5395 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 307664"];
5396 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 307665"];
5397 [label="return ns; 307666"];
5398 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307667"];
5399 [label="ContainingNamespace.ContainingNamespace 307668"];
5400 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 307669"];
5401 [label="this.ContainingSymbol 307670"];
5402 [label="=> _container 307671"];
5403 [label="_container 307672"];
5404 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 307673"];
5405 [label="container.ContainingSymbol 307674"];
5406 [label="get\n            {\n                return _assemblySymbol;\n            } 307675"];
5407 [label="return _assemblySymbol; 307676"];
5408 [label="get\n            {\n                return null;\n            } 307677"];
5409 [label="return null; 307678"];
5410 [label="return null; 307679"];
5411 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307680"];
5412 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307681"];
5413 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 307682"];
5414 [label="tupleCardinality = 0; 307683"];
5415 [label="return false; 307684"];
5416 [label="if (!membersAndInitializers.HaveIndexers && !this.IsTupleType && _lazyEarlyAttributeDecodingMembersDictionary is object)\n            {\n                membersByName = _lazyEarlyAttributeDecodingMembersDictionary;\n            }\n            else\n            {\n                membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance);\n\n                // Merge types into the member dictionary\n                AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary());\n            } 307685"];
5417 [label="if (!membersAndInitializers.HaveIndexers && !this.IsTupleType && _lazyEarlyAttributeDecodingMembersDictionary is object)\n            {\n                membersByName = _lazyEarlyAttributeDecodingMembersDictionary;\n            }\n            else\n            {\n                membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance);\n\n                // Merge types into the member dictionary\n                AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary());\n            } 307686"];
5418 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 307687"];
5419 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 307688"];
5420 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 307689"];
5421 [label="membersByName = membersAndInitializers.NonTypeMembers.ToDictionary(s => s.Name, StringOrdinalComparer.Instance); 307690"];
5422 [label="get { return this.IsStatic ? WellKnownMemberNames.StaticConstructorName : WellKnownMemberNames.InstanceConstructorName; } 307691"];
5423 [label="this.IsStatic 307692"];
5424 [label="get\n            {\n                return (this.DeclarationModifiers & DeclarationModifiers.Static) != 0;\n            } 307693"];
5425 [label="return this.IsStatic ? WellKnownMemberNames.StaticConstructorName : WellKnownMemberNames.InstanceConstructorName; 307694"];
5426 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()); 307695"];
5427 [label="GetTypeMembersDictionary() 307696"];
5428 [label="param GetTypeMembersDictionary(this) 307697"];
5429 [label="if (_lazyTypeMembers == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                }\n\n                diagnostics.Free();\n            } 307698"];
5430 [label="if (_lazyTypeMembers == null)\n            {\n                var diagnostics = DiagnosticBag.GetInstance();\n                if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                }\n\n                diagnostics.Free();\n            } 307699"];
5431 [label="var diagnostics = DiagnosticBag.GetInstance(); 307700"];
5432 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 307701"];
5433 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 307702"];
5434 [label="MakeTypeMembers(diagnostics) 307703"];
5435 [label="param MakeTypeMembers(DiagnosticBag diagnostics) 307704"];
5436 [label="param MakeTypeMembers(this) 307705"];
5437 [label="var symbols = ArrayBuilder<NamedTypeSymbol>.GetInstance(); 307706"];
5438 [label="var conflictDict = new Dictionary<(string, int), SourceNamedTypeSymbol>(); 307707"];
5439 [label="foreach (var childDeclaration in declaration.Children)\n                {\n                    var t = new SourceNamedTypeSymbol(this, childDeclaration, diagnostics);\n                    this.CheckMemberNameDistinctFromType(t, diagnostics);\n\n                    var key = (t.Name, t.Arity);\n                    SourceNamedTypeSymbol? other;\n                    if (conflictDict.TryGetValue(key, out other))\n                    {\n                        if (Locations.Length == 1 || IsPartial)\n                        {\n                            if (t.IsPartial && other.IsPartial)\n                            {\n                                diagnostics.Add(ErrorCode.ERR_PartialTypeKindConflict, t.Locations[0], t);\n                            }\n                            else\n                            {\n                                diagnostics.Add(ErrorCode.ERR_DuplicateNameInClass, t.Locations[0], this, t.Name);\n                            }\n                        }\n                    }\n                    else\n                    {\n                        conflictDict.Add(key, t);\n                    }\n\n                    symbols.Add(t);\n                } 307708"];
5440 [label="IsInterface 307709"];
5441 [label="get\n            {\n                // TypeKind is computed eagerly, so this is cheap.\n                return this.TypeKind == TypeKind.Interface;\n            } 307710"];
5442 [label="this.TypeKind 307711"];
5443 [label="get\n            {\n                return _flags.TypeKind;\n            } 307712"];
5444 [label="return this.TypeKind == TypeKind.Interface; 307713"];
5445 [label="if (IsInterface)\n                {\n                    foreach (var t in symbols)\n                    {\n                        Binder.CheckFeatureAvailability(t.DeclaringSyntaxReferences[0].GetSyntax(), MessageID.IDS_DefaultInterfaceImplementation, diagnostics, t.Locations[0]);\n                    }\n                } 307714"];
5446 [label="Debug.Assert(s_emptyTypeMembers.Count == 0); 307715"];
5447 [label="Debug.Assert(s_emptyTypeMembers.Count == 0); 307716"];
5448 [label="return symbols.Count > 0 ?\n                    symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance) :\n                    s_emptyTypeMembers; 307717"];
5449 [label="return symbols.Count > 0 ?\n                    symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance) :\n                    s_emptyTypeMembers; 307718"];
5450 [label="symbols.Count > 0 307719"];
5451 [label="return symbols.Count > 0 ?\n                    symbols.ToDictionary(s => s.Name, StringOrdinalComparer.Instance) :\n                    s_emptyTypeMembers; 307720"];
5452 [label="symbols.Free(); 307721"];
5453 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 307722"];
5454 [label="if (Interlocked.CompareExchange(ref _lazyTypeMembers, MakeTypeMembers(diagnostics), null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n\n                    state.NotePartComplete(CompletionPart.TypeMembers);\n                } 307723"];
5455 [label="AddDeclarationDiagnostics(diagnostics); 307724"];
5456 [label="AddDeclarationDiagnostics(diagnostics) 307725"];
5457 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 307726"];
5458 [label="param AddDeclarationDiagnostics(this) 307727"];
5459 [label="ContainingSymbol 307728"];
5460 [label="get\n            {\n                return _containingSymbol;\n            } 307729"];
5461 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 307730"];
5462 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 307731"];
5463 [label="AddDeclarationDiagnostics(diagnostics); 307732"];
5464 [label="state.NotePartComplete(CompletionPart.TypeMembers); 307733"];
5465 [label="state.NotePartComplete(CompletionPart.TypeMembers) 307734"];
5466 [label="param NotePartComplete(CompletionPart part) 307735"];
5467 [label="diagnostics.Free(); 307736"];
5468 [label="return _lazyTypeMembers; 307737"];
5469 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()); 307738"];
5470 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()) 307739"];
5471 [label="param AddNestedTypesToDictionary(Dictionary<string, ImmutableArray<Symbol>> membersByName) 307740"];
5472 [label="param AddNestedTypesToDictionary(Dictionary<string, ImmutableArray<NamedTypeSymbol>> typesByName) 307741"];
5473 [label="foreach (var pair in typesByName)\n            {\n                string name = pair.Key;\n                ImmutableArray<NamedTypeSymbol> types = pair.Value;\n                ImmutableArray<Symbol> typesAsSymbols = StaticCast<Symbol>.From(types);\n\n                ImmutableArray<Symbol> membersForName;\n                if (membersByName.TryGetValue(name, out membersForName))\n                {\n                    membersByName[name] = membersForName.Concat(typesAsSymbols);\n                }\n                else\n                {\n                    membersByName.Add(name, typesAsSymbols);\n                }\n            } 307742"];
5474 [label="foreach (var pair in typesByName)\n            {\n                string name = pair.Key;\n                ImmutableArray<NamedTypeSymbol> types = pair.Value;\n                ImmutableArray<Symbol> typesAsSymbols = StaticCast<Symbol>.From(types);\n\n                ImmutableArray<Symbol> membersForName;\n                if (membersByName.TryGetValue(name, out membersForName))\n                {\n                    membersByName[name] = membersForName.Concat(typesAsSymbols);\n                }\n                else\n                {\n                    membersByName.Add(name, typesAsSymbols);\n                }\n            } 307743"];
5475 [label="AddNestedTypesToDictionary(membersByName, GetTypeMembersDictionary()); 307744"];
5476 [label="MergePartialMembers(ref membersByName, diagnostics); 307745"];
5477 [label="MergePartialMembers(ref membersByName, diagnostics); 307746"];
5478 [label="MergePartialMembers(ref membersByName, diagnostics) 307747"];
5479 [label="param MergePartialMembers(ref Dictionary<string, ImmutableArray<Symbol>> membersByName) 307748"];
5480 [label="param MergePartialMembers(DiagnosticBag diagnostics) 307749"];
5481 [label="param MergePartialMembers(this) 307750"];
5482 [label="var memberNames = ArrayBuilder<string>.GetInstance(membersByName.Count); 307751"];
5483 [label="memberNames.AddRange(membersByName.Keys); 307752"];
5484 [label="memberNames.AddRange(membersByName.Keys); 307753"];
5485 [label="var methodsBySignature = new Dictionary<MethodSymbol, SourceMemberMethodSymbol>(MemberSignatureComparer.PartialMethodsComparer); 307754"];
5486 [label="foreach (var name in memberNames)\n            {\n                methodsBySignature.Clear();\n                foreach (var symbol in membersByName[name])\n                {\n                    var method = symbol as SourceMemberMethodSymbol;\n                    if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    }\n\n                    if (methodsBySignature.TryGetValue(method, out var prev))\n                    {\n                        var prevPart = (SourceOrdinaryMethodSymbol)prev;\n                        var methodPart = (SourceOrdinaryMethodSymbol)method;\n\n                        if (methodPart.IsPartialImplementation &&\n                            (prevPart.IsPartialImplementation || (prevPart.OtherPartOfPartial is MethodSymbol otherImplementation && (object)otherImplementation != methodPart)))\n                        {\n                            // A partial method may not have multiple implementing declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneActual, methodPart.Locations[0]);\n                        }\n                        else if (methodPart.IsPartialDefinition &&\n                                 (prevPart.IsPartialDefinition || (prevPart.OtherPartOfPartial is MethodSymbol otherDefinition && (object)otherDefinition != methodPart)))\n                        {\n                            // A partial method may not have multiple defining declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneLatent, methodPart.Locations[0]);\n                        }\n                        else\n                        {\n                            if ((object)membersByName == _lazyEarlyAttributeDecodingMembersDictionary)\n                            {\n                                // Avoid mutating the cached dictionary and especially avoid doing this possibly on multiple threads in parallel.\n                                membersByName = new Dictionary<string, ImmutableArray<Symbol>>(membersByName);\n                            }\n\n                            membersByName[name] = FixPartialMember(membersByName[name], prevPart, methodPart);\n                        }\n                    }\n                    else\n                    {\n                        methodsBySignature.Add(method, method);\n                    }\n                }\n\n                foreach (SourceOrdinaryMethodSymbol method in methodsBySignature.Values)\n                {\n                    // partial implementations not paired with a definition\n                    if (method.IsPartialImplementation && method.OtherPartOfPartial is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodMustHaveLatent, method.Locations[0], method);\n                    }\n                    else if (method.OtherPartOfPartial is MethodSymbol otherPart && MemberSignatureComparer.ConsideringTupleNamesCreatesDifference(method, otherPart))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodInconsistentTupleNames, method.Locations[0], method, method.OtherPartOfPartial);\n                    }\n                    else if (method is { IsPartialDefinition: true, OtherPartOfPartial: null, HasExplicitAccessModifier: true })\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodWithAccessibilityModsMustHaveImplementation, method.Locations[0], method);\n                    }\n                }\n            } 307755"];
5487 [label="foreach (var name in memberNames)\n            {\n                methodsBySignature.Clear();\n                foreach (var symbol in membersByName[name])\n                {\n                    var method = symbol as SourceMemberMethodSymbol;\n                    if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    }\n\n                    if (methodsBySignature.TryGetValue(method, out var prev))\n                    {\n                        var prevPart = (SourceOrdinaryMethodSymbol)prev;\n                        var methodPart = (SourceOrdinaryMethodSymbol)method;\n\n                        if (methodPart.IsPartialImplementation &&\n                            (prevPart.IsPartialImplementation || (prevPart.OtherPartOfPartial is MethodSymbol otherImplementation && (object)otherImplementation != methodPart)))\n                        {\n                            // A partial method may not have multiple implementing declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneActual, methodPart.Locations[0]);\n                        }\n                        else if (methodPart.IsPartialDefinition &&\n                                 (prevPart.IsPartialDefinition || (prevPart.OtherPartOfPartial is MethodSymbol otherDefinition && (object)otherDefinition != methodPart)))\n                        {\n                            // A partial method may not have multiple defining declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneLatent, methodPart.Locations[0]);\n                        }\n                        else\n                        {\n                            if ((object)membersByName == _lazyEarlyAttributeDecodingMembersDictionary)\n                            {\n                                // Avoid mutating the cached dictionary and especially avoid doing this possibly on multiple threads in parallel.\n                                membersByName = new Dictionary<string, ImmutableArray<Symbol>>(membersByName);\n                            }\n\n                            membersByName[name] = FixPartialMember(membersByName[name], prevPart, methodPart);\n                        }\n                    }\n                    else\n                    {\n                        methodsBySignature.Add(method, method);\n                    }\n                }\n\n                foreach (SourceOrdinaryMethodSymbol method in methodsBySignature.Values)\n                {\n                    // partial implementations not paired with a definition\n                    if (method.IsPartialImplementation && method.OtherPartOfPartial is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodMustHaveLatent, method.Locations[0], method);\n                    }\n                    else if (method.OtherPartOfPartial is MethodSymbol otherPart && MemberSignatureComparer.ConsideringTupleNamesCreatesDifference(method, otherPart))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodInconsistentTupleNames, method.Locations[0], method, method.OtherPartOfPartial);\n                    }\n                    else if (method is { IsPartialDefinition: true, OtherPartOfPartial: null, HasExplicitAccessModifier: true })\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodWithAccessibilityModsMustHaveImplementation, method.Locations[0], method);\n                    }\n                }\n            } 307756"];
5488 [label="methodsBySignature.Clear(); 307757"];
5489 [label="foreach (var symbol in membersByName[name])\n                {\n                    var method = symbol as SourceMemberMethodSymbol;\n                    if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    }\n\n                    if (methodsBySignature.TryGetValue(method, out var prev))\n                    {\n                        var prevPart = (SourceOrdinaryMethodSymbol)prev;\n                        var methodPart = (SourceOrdinaryMethodSymbol)method;\n\n                        if (methodPart.IsPartialImplementation &&\n                            (prevPart.IsPartialImplementation || (prevPart.OtherPartOfPartial is MethodSymbol otherImplementation && (object)otherImplementation != methodPart)))\n                        {\n                            // A partial method may not have multiple implementing declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneActual, methodPart.Locations[0]);\n                        }\n                        else if (methodPart.IsPartialDefinition &&\n                                 (prevPart.IsPartialDefinition || (prevPart.OtherPartOfPartial is MethodSymbol otherDefinition && (object)otherDefinition != methodPart)))\n                        {\n                            // A partial method may not have multiple defining declarations\n                            diagnostics.Add(ErrorCode.ERR_PartialMethodOnlyOneLatent, methodPart.Locations[0]);\n                        }\n                        else\n                        {\n                            if ((object)membersByName == _lazyEarlyAttributeDecodingMembersDictionary)\n                            {\n                                // Avoid mutating the cached dictionary and especially avoid doing this possibly on multiple threads in parallel.\n                                membersByName = new Dictionary<string, ImmutableArray<Symbol>>(membersByName);\n                            }\n\n                            membersByName[name] = FixPartialMember(membersByName[name], prevPart, methodPart);\n                        }\n                    }\n                    else\n                    {\n                        methodsBySignature.Add(method, method);\n                    }\n                } 307758"];
5490 [label="var method = symbol as SourceMemberMethodSymbol; 307759"];
5491 [label="if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    } 307760"];
5492 [label="method.IsPartial 307761"];
5493 [label="get\n            {\n                return (this.DeclarationModifiers & DeclarationModifiers.Partial) != 0;\n            } 307762"];
5494 [label="return (this.DeclarationModifiers & DeclarationModifiers.Partial) != 0; 307763"];
5495 [label="return (this.DeclarationModifiers & DeclarationModifiers.Partial) != 0; 307764"];
5496 [label="if (method is null || !method.IsPartial)\n                    {\n                        continue; // only partial methods need to be merged\n                    } 307765"];
5497 [label="foreach (SourceOrdinaryMethodSymbol method in methodsBySignature.Values)\n                {\n                    // partial implementations not paired with a definition\n                    if (method.IsPartialImplementation && method.OtherPartOfPartial is null)\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodMustHaveLatent, method.Locations[0], method);\n                    }\n                    else if (method.OtherPartOfPartial is MethodSymbol otherPart && MemberSignatureComparer.ConsideringTupleNamesCreatesDifference(method, otherPart))\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodInconsistentTupleNames, method.Locations[0], method, method.OtherPartOfPartial);\n                    }\n                    else if (method is { IsPartialDefinition: true, OtherPartOfPartial: null, HasExplicitAccessModifier: true })\n                    {\n                        diagnostics.Add(ErrorCode.ERR_PartialMethodWithAccessibilityModsMustHaveImplementation, method.Locations[0], method);\n                    }\n                } 307766"];
5498 [label="memberNames.Free(); 307767"];
5499 [label="MergePartialMembers(ref membersByName, diagnostics); 307768"];
5500 [label="return membersByName; 307769"];
5501 [label="var membersDictionary = MakeAllMembers(diagnostics); 307770"];
5502 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 307771"];
5503 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 307772"];
5504 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 307773"];
5505 [label="if (Interlocked.CompareExchange(ref _lazyMembersDictionary, membersDictionary, null) == null)\n                {\n                    AddDeclarationDiagnostics(diagnostics);\n                    state.NotePartComplete(CompletionPart.Members);\n                } 307774"];
5506 [label="AddDeclarationDiagnostics(diagnostics); 307775"];
5507 [label="AddDeclarationDiagnostics(diagnostics) 307776"];
5508 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 307777"];
5509 [label="param AddDeclarationDiagnostics(this) 307778"];
5510 [label="ContainingSymbol 307779"];
5511 [label="get\n            {\n                return _containingSymbol;\n            } 307780"];
5512 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 307781"];
5513 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 307782"];
5514 [label="AddDeclarationDiagnostics(diagnostics); 307783"];
5515 [label="state.NotePartComplete(CompletionPart.Members); 307784"];
5516 [label="state.NotePartComplete(CompletionPart.Members) 307785"];
5517 [label="param NotePartComplete(CompletionPart part) 307786"];
5518 [label="diagnostics.Free(); 307787"];
5519 [label="state.SpinWaitComplete(CompletionPart.Members, default(CancellationToken)); 307788"];
5520 [label="state.SpinWaitComplete(CompletionPart.Members, default(CancellationToken)); 307789"];
5521 [label="state.SpinWaitComplete(CompletionPart.Members, default(CancellationToken)) 307790"];
5522 [label="param SpinWaitComplete(CompletionPart part) 307791"];
5523 [label="param SpinWaitComplete(CancellationToken cancellationToken) 307792"];
5524 [label="param SpinWaitComplete(this) 307793"];
5525 [label="if (HasComplete(part))\n            {\n                return;\n            } 307794"];
5526 [label="HasComplete(part) 307795"];
5527 [label="param HasComplete(CompletionPart part) 307796"];
5528 [label="param HasComplete(this) 307797"];
5529 [label="return (_completeParts & (int)part) == (int)part; 307798"];
5530 [label="return; 307799"];
5531 [label="return _lazyMembersDictionary; 307800"];
5532 [label="return GetMembersByNameSlow(); 307801"];
5533 [label="result = GetMembersByName().Flatten(null); 307802"];
5534 [label="result = GetMembersByName().Flatten(null); 307803"];
5535 [label="result = GetMembersByName().Flatten(null); 307804"];
5536 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyMembersFlattened, result); 307805"];
5537 [label="ImmutableInterlocked.InterlockedInitialize(ref _lazyMembersFlattened, result); 307806"];
5538 [label="result = _lazyMembersFlattened; 307807"];
5539 [label="return result.ConditionallyDeOrder(); 307808"];
5540 [label="var allMembers = this.GetMembersUnordered(); 307809"];
5541 [label="if (allMembers.Length > 1)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyMembersFlattened, allMembers);\n                } 307810"];
5542 [label="if (allMembers.Length > 1)\n                {\n                    // The array isn't sorted. Sort it and remember that we sorted it.\n                    allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance);\n                    ImmutableInterlocked.InterlockedExchange(ref _lazyMembersFlattened, allMembers);\n                } 307811"];
5543 [label="allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance); 307812"];
5544 [label="allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance); 307813"];
5545 [label="param ==(Symbol left) 307814"];
5546 [label="param ==(Symbol right) 307815"];
5547 [label="if (right is null)\n            {\n                return left is null;\n            } 307816"];
5548 [label="return (object)left == (object)right || right.Equals(left); 307817"];
5549 [label="return (object)left == (object)right || right.Equals(left); 307818"];
5550 [label="right.Equals(left) 307819"];
5551 [label="param Equals(object obj) 307820"];
5552 [label="param Equals(this) 307821"];
5553 [label="return this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind); 307822"];
5554 [label="return this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind); 307823"];
5555 [label="this.Equals(obj as Symbol, SymbolEqualityComparer.Default.CompareKind) 307824"];
5556 [label="param Equals(Symbol other) 307825"];
5557 [label="param Equals(TypeCompareKind compareKind) 307826"];
5558 [label="param Equals(this) 307827"];
5559 [label="if (other is SubstitutedMethodSymbol sms)\n            {\n                return sms.Equals(this, compareKind);\n            } 307828"];
5560 [label="if (other is NativeIntegerMethodSymbol nms)\n            {\n                return nms.Equals(this, compareKind);\n            } 307829"];
5561 [label="return base.Equals(other, compareKind); 307830"];
5562 [label="return base.Equals(other, compareKind); 307831"];
5563 [label="base.Equals(other, compareKind) 307832"];
5564 [label="param Equals(Symbol other) 307833"];
5565 [label="param Equals(TypeCompareKind compareKind) 307834"];
5566 [label="param Equals(this) 307835"];
5567 [label="return (object)this == other; 307836"];
5568 [label="param GetLexicalSortKey(this) 307837"];
5569 [label="this.Locations 307838"];
5570 [label="get\n            {\n                return this.locations;\n            } 307839"];
5571 [label="return this.locations; 307840"];
5572 [label="var locations = this.Locations; 307841"];
5573 [label="this.DeclaringCompilation 307842"];
5574 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 307843"];
5575 [label="this.Kind 307844"];
5576 [label="get\n            {\n                return SymbolKind.Method;\n            } 307845"];
5577 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 307846"];
5578 [label="get\n            {\n                return _containingType;\n            } 307847"];
5579 [label="return _containingType; 307848"];
5580 [label="var declaringCompilation = this.DeclaringCompilation; 307849"];
5581 [label="Debug.Assert(declaringCompilation != null); 307850"];
5582 [label="Debug.Assert(declaringCompilation != null); 307851"];
5583 [label="return (locations.Length > 0) ? new LexicalSortKey(locations[0], declaringCompilation) : LexicalSortKey.NotInSource; 307852"];
5584 [label="return (locations.Length > 0) ? new LexicalSortKey(locations[0], declaringCompilation) : LexicalSortKey.NotInSource; 307853"];
5585 [label="(locations.Length > 0) 307854"];
5586 [label="return (locations.Length > 0) ? new LexicalSortKey(locations[0], declaringCompilation) : LexicalSortKey.NotInSource; 307855"];
5587 [label="new LexicalSortKey(locations[0], declaringCompilation) 307856"];
5588 [label="param LexicalSortKey(Location location) 307857"];
5589 [label="param LexicalSortKey(CSharpCompilation compilation) 307858"];
5590 [label="param LexicalSortKey(this) 307859"];
5591 [label="location.SourceTree 307860"];
5592 [label="location.SourceSpan.Start 307861"];
5593 [label="compilation 307862"];
5594 [label="param LexicalSortKey(this) 307863"];
5595 [label="param LexicalSortKey(SyntaxTree tree) 307864"];
5596 [label="param LexicalSortKey(int position) 307865"];
5597 [label="param LexicalSortKey(CSharpCompilation compilation) 307866"];
5598 [label="param LexicalSortKey(this) 307867"];
5599 [label="null 307868"];
5600 [label="tree == null 307869"];
5601 [label="tree 307870"];
5602 [label="compilation.GetSyntaxTreeOrdinal(tree) 307871"];
5603 [label="param GetSyntaxTreeOrdinal(SyntaxTree tree) 307872"];
5604 [label="param GetSyntaxTreeOrdinal(this) 307873"];
5605 [label="return syntaxTree != null && _syntaxAndDeclarations.GetLazyState().RootNamespaces.ContainsKey(syntaxTree); 307874"];
5606 [label="position 307875"];
5607 [label="param LexicalSortKey(int treeOrdinal) 307876"];
5608 [label="param LexicalSortKey(int position) 307877"];
5609 [label="param LexicalSortKey(this) 307878"];
5610 [label="Debug.Assert(position >= 0); 307879"];
5611 [label="Debug.Assert(position >= 0); 307880"];
5612 [label="Debug.Assert(treeOrdinal >= 0); 307881"];
5613 [label="Debug.Assert(treeOrdinal >= 0); 307882"];
5614 [label="_treeOrdinal 307883"];
5615 [label="_position 307884"];
5616 [label="allMembers = allMembers.Sort(LexicalOrderSymbolComparer.Instance); 307885"];
5617 [label="Debug.Assert(declaringCompilation != null); 307886"];
5618 [label="Debug.Assert(position >= 0); 307887"];
5619 [label="Debug.Assert(treeOrdinal >= 0); 307888"];
5620 [label="this.Kind 307889"];
5621 [label="get\n            {\n                return SymbolKind.Method;\n            } 307890"];
5622 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 307891"];
5623 [label="get\n            {\n                return _containingType;\n            } 307892"];
5624 [label="param Compare(LexicalSortKey xSortKey) 307893"];
5625 [label="param Compare(LexicalSortKey ySortKey) 307894"];
5626 [label="int comparison; 307895"];
5627 [label="xSortKey.TreeOrdinal 307896"];
5628 [label="get { return _treeOrdinal; } 307897"];
5629 [label="return _treeOrdinal; 307898"];
5630 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 307899"];
5631 [label="ySortKey.TreeOrdinal 307900"];
5632 [label="get { return _treeOrdinal; } 307901"];
5633 [label="return _treeOrdinal; 307902"];
5634 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 307903"];
5635 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 307904"];
5636 [label="xSortKey.Position 307905"];
5637 [label="get { return _position; } 307906"];
5638 [label="return _position; 307907"];
5639 [label="return xSortKey.Position - ySortKey.Position; 307908"];
5640 [label="ySortKey.Position 307909"];
5641 [label="get { return _position; } 307910"];
5642 [label="return _position; 307911"];
5643 [label="return xSortKey.Position - ySortKey.Position; 307912"];
5644 [label="return xSortKey.Position - ySortKey.Position; 307913"];
5645 [label="Debug.Assert(declaringCompilation != null); 307914"];
5646 [label="Debug.Assert(position >= 0); 307915"];
5647 [label="Debug.Assert(treeOrdinal >= 0); 307916"];
5648 [label="return _treeOrdinal; 307917"];
5649 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 307918"];
5650 [label="return _treeOrdinal; 307919"];
5651 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 307920"];
5652 [label="if (xSortKey.TreeOrdinal != ySortKey.TreeOrdinal)\n            {\n                if (xSortKey.TreeOrdinal < 0)\n                {\n                    return 1;\n                }\n                else if (ySortKey.TreeOrdinal < 0)\n                {\n                    return -1;\n                }\n\n                comparison = xSortKey.TreeOrdinal - ySortKey.TreeOrdinal;\n                Debug.Assert(comparison != 0);\n                return comparison;\n            } 307921"];
5653 [label="ImmutableInterlocked.InterlockedExchange(ref _lazyMembersFlattened, allMembers); 307922"];
5654 [label="ImmutableInterlocked.InterlockedExchange(ref _lazyMembersFlattened, allMembers); 307923"];
5655 [label="_flags.SetFlattenedMembersIsSorted() 307924"];
5656 [label="param SetFlattenedMembersIsSorted(this) 307925"];
5657 [label="ThreadSafeFlagOperations.Set(ref _flags, (FlattenedMembersIsSortedBit)); 307926"];
5658 [label="ThreadSafeFlagOperations.Set(ref _flags, (FlattenedMembersIsSortedBit)); 307927"];
5659 [label="_flags.SetFlattenedMembersIsSorted(); 307928"];
5660 [label="return allMembers; 307929"];
5661 [label="var actual = string.Join(', ', typeSym.GetMembers().Select(symbol => symbol.ToTestDisplayString()).OrderBy(name => name)); 307930"];
5662 [label="var actual = string.Join(', ', typeSym.GetMembers().Select(symbol => symbol.ToTestDisplayString()).OrderBy(name => name)); 307931"];
5663 [label="param ToTestDisplayString(this Symbol symbol) 307932"];
5664 [label="return symbol.ToDisplayString(SymbolDisplayFormat.TestFormat); 307933"];
5665 [label="symbol.ToDisplayString(SymbolDisplayFormat.TestFormat) 307934"];
5666 [label="param ToDisplayString(SymbolDisplayFormat format = null) 307935"];
5667 [label="param ToDisplayString(this) 307936"];
5668 [label="ISymbol 307937"];
5669 [label="get\n            {\n                if (_lazyISymbol is null)\n                {\n                    Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null);\n                }\n\n                return _lazyISymbol;\n            } 307938"];
5670 [label="if (_lazyISymbol is null)\n                {\n                    Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null);\n                } 307939"];
5671 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 307940"];
5672 [label="CreateISymbol() 307941"];
5673 [label="param CreateISymbol(this) 307942"];
5674 [label="return new PublicModel.MethodSymbol(this); 307943"];
5675 [label="return new PublicModel.MethodSymbol(this); 307944"];
5676 [label="new PublicModel.MethodSymbol(this) 307945"];
5677 [label="param MethodSymbol(Symbols.MethodSymbol underlying) 307946"];
5678 [label="param MethodSymbol(this) 307947"];
5679 [label="param MethodSymbol(this) 307948"];
5680 [label="param Symbol(this) 307949"];
5681 [label="_underlying 307950"];
5682 [label="_lazyReturnType 307951"];
5683 [label="_lazyReceiverType 307952"];
5684 [label="Debug.Assert(underlying is object); 307953"];
5685 [label="_underlying 307954"];
5686 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 307955"];
5687 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 307956"];
5688 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 307957"];
5689 [label="return _lazyISymbol; 307958"];
5690 [label="return SymbolDisplay.ToDisplayString(ISymbol, format); 307959"];
5691 [label="return SymbolDisplay.ToDisplayString(ISymbol, format); 307960"];
5692 [label="SymbolDisplay.ToDisplayString(ISymbol, format) 307961"];
5693 [label="param ToDisplayString(ISymbol symbol) 307962"];
5694 [label="param ToDisplayString(SymbolDisplayFormat? format = null) 307963"];
5695 [label="return ToDisplayParts(symbol, format).ToDisplayString(); 307964"];
5696 [label="return ToDisplayParts(symbol, format).ToDisplayString(); 307965"];
5697 [label="ToDisplayParts(symbol, format) 307966"];
5698 [label="param ToDisplayParts(ISymbol symbol) 307967"];
5699 [label="param ToDisplayParts(SymbolDisplayFormat? format = null) 307968"];
5700 [label="format = format ?? SymbolDisplayFormat.CSharpErrorMessageFormat; 307969"];
5701 [label="return ToDisplayParts(\n                symbol, semanticModelOpt: null, positionOpt: -1, format: format, minimal: false); 307970"];
5702 [label="return ToDisplayParts(\n                symbol, semanticModelOpt: null, positionOpt: -1, format: format, minimal: false); 307971"];
5703 [label="return ToDisplayParts(\n                symbol, semanticModelOpt: null, positionOpt: -1, format: format, minimal: false); 307972"];
5704 [label="ToDisplayParts(\n                symbol, semanticModelOpt: null, positionOpt: -1, format: format, minimal: false) 307973"];
5705 [label="param ToDisplayParts(ISymbol symbol) 307974"];
5706 [label="param ToDisplayParts(SemanticModel? semanticModelOpt) 307975"];
5707 [label="param ToDisplayParts(int positionOpt) 307976"];
5708 [label="param ToDisplayParts(SymbolDisplayFormat format) 307977"];
5709 [label="param ToDisplayParts(bool minimal) 307978"];
5710 [label="if (symbol == null)\n            {\n                throw new ArgumentNullException(nameof(symbol));\n            } 307979"];
5711 [label="if (symbol == null)\n            {\n                throw new ArgumentNullException(nameof(symbol));\n            } 307980"];
5712 [label="if (minimal)\n            {\n                if (semanticModelOpt == null)\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeSemanticModelMust);\n                }\n                else if (positionOpt < 0 || positionOpt > semanticModelOpt.SyntaxTree.Length) // Note: not >= since EOF is allowed.\n                {\n                    throw new ArgumentOutOfRangeException(CSharpResources.PositionNotWithinTree);\n                }\n            }\n            else\n            {\n                Debug.Assert(semanticModelOpt == null);\n                Debug.Assert(positionOpt < 0);\n            } 307981"];
5713 [label="Debug.Assert(semanticModelOpt == null); 307982"];
5714 [label="Debug.Assert(semanticModelOpt == null); 307983"];
5715 [label="Debug.Assert(positionOpt < 0); 307984"];
5716 [label="Debug.Assert(positionOpt < 0); 307985"];
5717 [label="((Symbols.PublicModel.MethodSymbol)symbol).UnderlyingMethodSymbol 307986"];
5718 [label="=> _underlying 307987"];
5719 [label="_underlying 307988"];
5720 [label="if (symbol is Symbols.PublicModel.MethodSymbol && \n                ((Symbols.PublicModel.MethodSymbol)symbol).UnderlyingMethodSymbol is SynthesizedSimpleProgramEntryPointSymbol)\n            {\n                return ImmutableArray.Create<SymbolDisplayPart>(new SymbolDisplayPart(SymbolDisplayPartKind.MethodName, symbol, '<top-level-statements-entry-point>'));\n            } 307989"];
5721 [label="var builder = ArrayBuilder<SymbolDisplayPart>.GetInstance(); 307990"];
5722 [label="'modopt' 307991"];
5723 [label="IL_KEYWORD_MODOPT = 'modopt' 307992"];
5724 [label="'modreq' 307993"];
5725 [label="IL_KEYWORD_MODREQ = 'modreq' 307994"];
5726 [label="var visitor = new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt); 307995"];
5727 [label="var visitor = new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt); 307996"];
5728 [label="var visitor = new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt); 307997"];
5729 [label="var visitor = new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt); 307998"];
5730 [label="var visitor = new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt); 307999"];
5731 [label="new SymbolDisplayVisitor(builder, format, semanticModelOpt, positionOpt) 308000"];
5732 [label="param SymbolDisplayVisitor(ArrayBuilder<SymbolDisplayPart> builder) 308001"];
5733 [label="param SymbolDisplayVisitor(SymbolDisplayFormat format) 308002"];
5734 [label="param SymbolDisplayVisitor(SemanticModel semanticModelOpt) 308003"];
5735 [label="param SymbolDisplayVisitor(int positionOpt) 308004"];
5736 [label="param SymbolDisplayVisitor(this) 308005"];
5737 [label="builder 308006"];
5738 [label="format 308007"];
5739 [label="true 308008"];
5740 [label="semanticModelOpt 308009"];
5741 [label="positionOpt 308010"];
5742 [label="param SymbolDisplayVisitor(this) 308011"];
5743 [label="param SymbolDisplayVisitor(this) 308012"];
5744 [label="_escapeKeywordIdentifiers 308013"];
5745 [label="_lazyAliasMap 308014"];
5746 [label="_escapeKeywordIdentifiers = format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers); 308015"];
5747 [label="_escapeKeywordIdentifiers = format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.EscapeKeywordIdentifiers); 308016"];
5748 [label="_escapeKeywordIdentifiers 308017"];
5749 [label="symbol.Accept(visitor); 308018"];
5750 [label="symbol.Accept(visitor) 308019"];
5751 [label="param Accept(SymbolVisitor visitor) 308020"];
5752 [label="param Accept(this) 308021"];
5753 [label="Accept(visitor); 308022"];
5754 [label="Accept(visitor) 308023"];
5755 [label="param Accept(SymbolVisitor visitor) 308024"];
5756 [label="param Accept(this) 308025"];
5757 [label="visitor.VisitMethod(this); 308026"];
5758 [label="visitor.VisitMethod(this); 308027"];
5759 [label="visitor.VisitMethod(this); 308028"];
5760 [label="get\n            {\n                switch (_underlying.MethodKind)\n                {\n                    case MethodKind.AnonymousFunction:\n                        return MethodKind.AnonymousFunction;\n                    case MethodKind.Constructor:\n                        return MethodKind.Constructor;\n                    case MethodKind.Conversion:\n                        return MethodKind.Conversion;\n                    case MethodKind.DelegateInvoke:\n                        return MethodKind.DelegateInvoke;\n                    case MethodKind.Destructor:\n                        return MethodKind.Destructor;\n                    case MethodKind.EventAdd:\n                        return MethodKind.EventAdd;\n                    case MethodKind.EventRemove:\n                        return MethodKind.EventRemove;\n                    case MethodKind.ExplicitInterfaceImplementation:\n                        return MethodKind.ExplicitInterfaceImplementation;\n                    case MethodKind.UserDefinedOperator:\n                        return MethodKind.UserDefinedOperator;\n                    case MethodKind.BuiltinOperator:\n                        return MethodKind.BuiltinOperator;\n                    case MethodKind.Ordinary:\n                        return MethodKind.Ordinary;\n                    case MethodKind.PropertyGet:\n                        return MethodKind.PropertyGet;\n                    case MethodKind.PropertySet:\n                        return MethodKind.PropertySet;\n                    case MethodKind.ReducedExtension:\n                        return MethodKind.ReducedExtension;\n                    case MethodKind.StaticConstructor:\n                        return MethodKind.StaticConstructor;\n                    case MethodKind.LocalFunction:\n                        return MethodKind.LocalFunction;\n                    case MethodKind.FunctionPointerSignature:\n                        return MethodKind.FunctionPointerSignature;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_underlying.MethodKind);\n                }\n            } 308029"];
5761 [label="_underlying.MethodKind 308030"];
5762 [label="get\n            {\n                return this.flags.MethodKind;\n            } 308031"];
5763 [label="this.flags.MethodKind 308032"];
5764 [label="switch (_underlying.MethodKind)\n                {\n                    case MethodKind.AnonymousFunction:\n                        return MethodKind.AnonymousFunction;\n                    case MethodKind.Constructor:\n                        return MethodKind.Constructor;\n                    case MethodKind.Conversion:\n                        return MethodKind.Conversion;\n                    case MethodKind.DelegateInvoke:\n                        return MethodKind.DelegateInvoke;\n                    case MethodKind.Destructor:\n                        return MethodKind.Destructor;\n                    case MethodKind.EventAdd:\n                        return MethodKind.EventAdd;\n                    case MethodKind.EventRemove:\n                        return MethodKind.EventRemove;\n                    case MethodKind.ExplicitInterfaceImplementation:\n                        return MethodKind.ExplicitInterfaceImplementation;\n                    case MethodKind.UserDefinedOperator:\n                        return MethodKind.UserDefinedOperator;\n                    case MethodKind.BuiltinOperator:\n                        return MethodKind.BuiltinOperator;\n                    case MethodKind.Ordinary:\n                        return MethodKind.Ordinary;\n                    case MethodKind.PropertyGet:\n                        return MethodKind.PropertyGet;\n                    case MethodKind.PropertySet:\n                        return MethodKind.PropertySet;\n                    case MethodKind.ReducedExtension:\n                        return MethodKind.ReducedExtension;\n                    case MethodKind.StaticConstructor:\n                        return MethodKind.StaticConstructor;\n                    case MethodKind.LocalFunction:\n                        return MethodKind.LocalFunction;\n                    case MethodKind.FunctionPointerSignature:\n                        return MethodKind.FunctionPointerSignature;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_underlying.MethodKind);\n                } 308033"];
5765 [label="return MethodKind.Constructor; 308034"];
5766 [label="=> _underlying 308035"];
5767 [label="_underlying 308036"];
5768 [label="=> _underlying.IsExtensionMethod 308037"];
5769 [label="_underlying.IsExtensionMethod 308038"];
5770 [label="get\n            {\n                return this.flags.IsExtensionMethod;\n            } 308039"];
5771 [label="this.flags.IsExtensionMethod 308040"];
5772 [label="get { return (_flags & IsExtensionMethodBit) != 0; } 308041"];
5773 [label="return (_flags & IsExtensionMethodBit) != 0; 308042"];
5774 [label="return (_flags & IsExtensionMethodBit) != 0; 308043"];
5775 [label="return this.flags.IsExtensionMethod; 308044"];
5776 [label="get\n            {\n                return UnderlyingSymbol.ContainingType.GetPublicSymbol();\n            } 308045"];
5777 [label="UnderlyingSymbol 308046"];
5778 [label="=> _underlying 308047"];
5779 [label="_underlying 308048"];
5780 [label="return UnderlyingSymbol.ContainingType.GetPublicSymbol(); 308049"];
5781 [label="UnderlyingSymbol.ContainingType 308050"];
5782 [label="get\n            {\n                return _containingType;\n            } 308051"];
5783 [label="return _containingType; 308052"];
5784 [label="UnderlyingSymbol.ContainingType.GetPublicSymbol() 308053"];
5785 [label="param GetPublicSymbol(this NamedTypeSymbol? symbol) 308054"];
5786 [label="return symbol.GetPublicSymbol<INamedTypeSymbol>(); 308055"];
5787 [label="symbol.GetPublicSymbol<INamedTypeSymbol>() 308056"];
5788 [label="param GetPublicSymbol(this Symbol? symbol) 308057"];
5789 [label=".ISymbol 308058"];
5790 [label="get\n            {\n                if (_lazyISymbol is null)\n                {\n                    Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null);\n                }\n\n                return _lazyISymbol;\n            } 308059"];
5791 [label="param CreateISymbol(this) 308060"];
5792 [label="return new PublicModel.NonErrorNamedTypeSymbol(this, DefaultNullableAnnotation); 308061"];
5793 [label="DefaultNullableAnnotation 308062"];
5794 [label="=> NullableAnnotationExtensions.ToPublicAnnotation(this, NullableAnnotation.Oblivious) 308063"];
5795 [label="1 308064"];
5796 [label="NotAnnotatedAttributeValue = 1 308065"];
5797 [label="2 308066"];
5798 [label="AnnotatedAttributeValue = 2 308067"];
5799 [label="0 308068"];
5800 [label="ObliviousAttributeValue = 0 308069"];
5801 [label="this 308070"];
5802 [label="NullableAnnotation.Oblivious 308071"];
5803 [label="NullableAnnotationExtensions.ToPublicAnnotation(this, NullableAnnotation.Oblivious) 308072"];
5804 [label="param ToPublicAnnotation(TypeSymbol? type) 308073"];
5805 [label="param ToPublicAnnotation(NullableAnnotation annotation) 308074"];
5806 [label="Debug.Assert(annotation != NullableAnnotation.Ignored); 308075"];
5807 [label="annotation switch\n            {\n                NullableAnnotation.Annotated => CodeAnalysis.NullableAnnotation.Annotated,\n                NullableAnnotation.NotAnnotated => CodeAnalysis.NullableAnnotation.NotAnnotated,\n\n                // A value type may be oblivious or not annotated depending on whether the type reference\n                // is from source or metadata. (Binding using the #nullable context only when setting the annotation\n                // to avoid checking IsValueType early.) The annotation is normalized here in the public API.\n                NullableAnnotation.Oblivious when type?.IsValueType == true => CodeAnalysis.NullableAnnotation.NotAnnotated,\n                NullableAnnotation.Oblivious => CodeAnalysis.NullableAnnotation.None,\n\n                NullableAnnotation.Ignored => CodeAnalysis.NullableAnnotation.None,\n\n                _ => throw ExceptionUtilities.UnexpectedValue(annotation)\n            } 308076"];
5808 [label=".IsValueType 308077"];
5809 [label="get\n            {\n                var kind = TypeKind;\n                return kind == TypeKind.Struct || kind == TypeKind.Enum;\n            } 308078"];
5810 [label="TypeKind 308079"];
5811 [label="get\n            {\n                return _flags.TypeKind;\n            } 308080"];
5812 [label="var kind = TypeKind; 308081"];
5813 [label="return kind == TypeKind.Struct || kind == TypeKind.Enum; 308082"];
5814 [label="return annotation switch\n            {\n                NullableAnnotation.Annotated => CodeAnalysis.NullableAnnotation.Annotated,\n                NullableAnnotation.NotAnnotated => CodeAnalysis.NullableAnnotation.NotAnnotated,\n\n                // A value type may be oblivious or not annotated depending on whether the type reference\n                // is from source or metadata. (Binding using the #nullable context only when setting the annotation\n                // to avoid checking IsValueType early.) The annotation is normalized here in the public API.\n                NullableAnnotation.Oblivious when type?.IsValueType == true => CodeAnalysis.NullableAnnotation.NotAnnotated,\n                NullableAnnotation.Oblivious => CodeAnalysis.NullableAnnotation.None,\n\n                NullableAnnotation.Ignored => CodeAnalysis.NullableAnnotation.None,\n\n                _ => throw ExceptionUtilities.UnexpectedValue(annotation)\n            }; 308083"];
5815 [label="return annotation switch\n            {\n                NullableAnnotation.Annotated => CodeAnalysis.NullableAnnotation.Annotated,\n                NullableAnnotation.NotAnnotated => CodeAnalysis.NullableAnnotation.NotAnnotated,\n\n                // A value type may be oblivious or not annotated depending on whether the type reference\n                // is from source or metadata. (Binding using the #nullable context only when setting the annotation\n                // to avoid checking IsValueType early.) The annotation is normalized here in the public API.\n                NullableAnnotation.Oblivious when type?.IsValueType == true => CodeAnalysis.NullableAnnotation.NotAnnotated,\n                NullableAnnotation.Oblivious => CodeAnalysis.NullableAnnotation.None,\n\n                NullableAnnotation.Ignored => CodeAnalysis.NullableAnnotation.None,\n\n                _ => throw ExceptionUtilities.UnexpectedValue(annotation)\n            }; 308084"];
5816 [label="return annotation switch\n            {\n                NullableAnnotation.Annotated => CodeAnalysis.NullableAnnotation.Annotated,\n                NullableAnnotation.NotAnnotated => CodeAnalysis.NullableAnnotation.NotAnnotated,\n\n                // A value type may be oblivious or not annotated depending on whether the type reference\n                // is from source or metadata. (Binding using the #nullable context only when setting the annotation\n                // to avoid checking IsValueType early.) The annotation is normalized here in the public API.\n                NullableAnnotation.Oblivious when type?.IsValueType == true => CodeAnalysis.NullableAnnotation.NotAnnotated,\n                NullableAnnotation.Oblivious => CodeAnalysis.NullableAnnotation.None,\n\n                NullableAnnotation.Ignored => CodeAnalysis.NullableAnnotation.None,\n\n                _ => throw ExceptionUtilities.UnexpectedValue(annotation)\n            }; 308085"];
5817 [label="return new PublicModel.NonErrorNamedTypeSymbol(this, DefaultNullableAnnotation); 308086"];
5818 [label="return new PublicModel.NonErrorNamedTypeSymbol(this, DefaultNullableAnnotation); 308087"];
5819 [label="new PublicModel.NonErrorNamedTypeSymbol(this, DefaultNullableAnnotation) 308088"];
5820 [label="param NonErrorNamedTypeSymbol(Symbols.NamedTypeSymbol underlying) 308089"];
5821 [label="param NonErrorNamedTypeSymbol(CodeAnalysis.NullableAnnotation nullableAnnotation) 308090"];
5822 [label="param NonErrorNamedTypeSymbol(this) 308091"];
5823 [label="nullableAnnotation 308092"];
5824 [label="param NonErrorNamedTypeSymbol(this) 308093"];
5825 [label="param NamedTypeSymbol(CodeAnalysis.NullableAnnotation nullableAnnotation = CodeAnalysis.NullableAnnotation.None) 308094"];
5826 [label="param NamedTypeSymbol(this) 308095"];
5827 [label="nullableAnnotation 308096"];
5828 [label="param NamedTypeSymbol(this) 308097"];
5829 [label="param TypeSymbol(CodeAnalysis.NullableAnnotation nullableAnnotation) 308098"];
5830 [label="param TypeSymbol(this) 308099"];
5831 [label="param TypeSymbol(this) 308100"];
5832 [label="param NamespaceOrTypeSymbol(this) 308101"];
5833 [label="param NamespaceOrTypeSymbol(this) 308102"];
5834 [label="param Symbol(this) 308103"];
5835 [label="protected CodeAnalysis.NullableAnnotation NullableAnnotation { get; } 308104"];
5836 [label="NullableAnnotation 308105"];
5837 [label="_underlying 308106"];
5838 [label="Debug.Assert(underlying is object); 308107"];
5839 [label="'Expressions' 308108"];
5840 [label="'Linq' 308109"];
5841 [label="'' 308110"];
5842 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 308111"];
5843 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 308112"];
5844 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 308113"];
5845 [label="{ 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 308114"];
5846 [label="s_expressionsNamespaceName = { 'Expressions', 'Linq', MetadataHelpers.SystemString, '' } 308115"];
5847 [label="(type, parameter, unused) => type.TypeKind == TypeKind.TypeParameter && (parameter is null || TypeSymbol.Equals(type, parameter, TypeCompareKind.ConsiderEverything2)) 308116"];
5848 [label="s_containsTypeParameterPredicate =\n            (type, parameter, unused) => type.TypeKind == TypeKind.TypeParameter && (parameter is null || TypeSymbol.Equals(type, parameter, TypeCompareKind.ConsiderEverything2)) 308117"];
5849 [label="(type, parameterContainer, unused) => type.TypeKind == TypeKind.TypeParameter && (object)type.ContainingSymbol == (object)parameterContainer 308118"];
5850 [label="s_isTypeParameterWithSpecificContainerPredicate =\n             (type, parameterContainer, unused) => type.TypeKind == TypeKind.TypeParameter && (object)type.ContainingSymbol == (object)parameterContainer 308119"];
5851 [label="(type, parameters, unused) => type.TypeKind == TypeKind.TypeParameter && parameters.Contains((TypeParameterSymbol)type) 308120"];
5852 [label="s_containsTypeParametersPredicate =\n            (type, parameters, unused) => type.TypeKind == TypeKind.TypeParameter && parameters.Contains((TypeParameterSymbol)type) 308121"];
5853 [label="(type, unused1, unused2) => type.TypeKind == TypeKind.Dynamic 308122"];
5854 [label="s_containsDynamicPredicate = (type, unused1, unused2) => type.TypeKind == TypeKind.Dynamic 308123"];
5855 [label="Debug.Assert(!underlying.IsErrorType()); 308124"];
5856 [label="underlying.IsErrorType() 308125"];
5857 [label="param IsErrorType(this TypeSymbol type) 308126"];
5858 [label="RoslynDebug.Assert((object)type != null); 308127"];
5859 [label="RoslynDebug.Assert((object)type != null); 308128"];
5860 [label="type.Kind 308129"];
5861 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 308130"];
5862 [label="return type.Kind == SymbolKind.ErrorType; 308131"];
5863 [label="Debug.Assert(!underlying.IsErrorType()); 308132"];
5864 [label="_underlying 308133"];
5865 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 308134"];
5866 [label="return (TISymbol?)symbol?.ISymbol; 308135"];
5867 [label="param AddAccessibilityIfRequired(ISymbol symbol) 308136"];
5868 [label="param AddAccessibilityIfRequired(this) 308137"];
5869 [label="symbol.ContainingType 308138"];
5870 [label="get\n            {\n                return UnderlyingSymbol.ContainingType.GetPublicSymbol();\n            } 308139"];
5871 [label="UnderlyingSymbol 308140"];
5872 [label="=> _underlying 308141"];
5873 [label="_underlying 308142"];
5874 [label="UnderlyingSymbol.ContainingType 308143"];
5875 [label="UnderlyingSymbol.ContainingType.GetPublicSymbol() 308144"];
5876 [label="symbol.GetPublicSymbol<INamedTypeSymbol>() 308145"];
5877 [label=".ISymbol 308146"];
5878 [label="INamedTypeSymbol containingType = symbol.ContainingType; 308147"];
5879 [label="Debug.Assert((object)containingType != null || (symbol.ContainingSymbol is ITypeSymbol)); 308148"];
5880 [label="Debug.Assert((object)containingType != null || (symbol.ContainingSymbol is ITypeSymbol)); 308149"];
5881 [label="if (format.MemberOptions.IncludesOption(SymbolDisplayMemberOptions.IncludeAccessibility) &&\n                (containingType == null ||\n                 (containingType.TypeKind != TypeKind.Interface && !IsEnumMember(symbol) & !IsLocalFunction(symbol))))\n            {\n                AddAccessibility(symbol);\n            } 308150"];
5882 [label="if (format.MemberOptions.IncludesOption(SymbolDisplayMemberOptions.IncludeAccessibility) &&\n                (containingType == null ||\n                 (containingType.TypeKind != TypeKind.Interface && !IsEnumMember(symbol) & !IsLocalFunction(symbol))))\n            {\n                AddAccessibility(symbol);\n            } 308151"];
5883 [label="param AddMemberModifiersIfRequired(ISymbol symbol) 308152"];
5884 [label="param AddMemberModifiersIfRequired(this) 308153"];
5885 [label="symbol.ContainingType 308154"];
5886 [label="get\n            {\n                return UnderlyingSymbol.ContainingType.GetPublicSymbol();\n            } 308155"];
5887 [label="UnderlyingSymbol 308156"];
5888 [label="=> _underlying 308157"];
5889 [label="_underlying 308158"];
5890 [label="UnderlyingSymbol.ContainingType 308159"];
5891 [label="UnderlyingSymbol.ContainingType.GetPublicSymbol() 308160"];
5892 [label="symbol.GetPublicSymbol<INamedTypeSymbol>() 308161"];
5893 [label=".ISymbol 308162"];
5894 [label="INamedTypeSymbol containingType = symbol.ContainingType; 308163"];
5895 [label="Debug.Assert(containingType != null || (symbol.ContainingSymbol is ITypeSymbol)); 308164"];
5896 [label="Debug.Assert(containingType != null || (symbol.ContainingSymbol is ITypeSymbol)); 308165"];
5897 [label="if (format.MemberOptions.IncludesOption(SymbolDisplayMemberOptions.IncludeModifiers) &&\n                (containingType == null ||\n                 (containingType.TypeKind != TypeKind.Interface && !IsEnumMember(symbol) && !IsLocalFunction(symbol))))\n            {\n                var isConst = symbol is IFieldSymbol && ((IFieldSymbol)symbol).IsConst;\n                if (symbol.IsStatic && !isConst)\n                {\n                    AddKeyword(SyntaxKind.StaticKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsOverride)\n                {\n                    AddKeyword(SyntaxKind.OverrideKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsAbstract)\n                {\n                    AddKeyword(SyntaxKind.AbstractKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsSealed)\n                {\n                    AddKeyword(SyntaxKind.SealedKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsExtern)\n                {\n                    AddKeyword(SyntaxKind.ExternKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsVirtual)\n                {\n                    AddKeyword(SyntaxKind.VirtualKeyword);\n                    AddSpace();\n                }\n            } 308166"];
5898 [label="if (format.MemberOptions.IncludesOption(SymbolDisplayMemberOptions.IncludeModifiers) &&\n                (containingType == null ||\n                 (containingType.TypeKind != TypeKind.Interface && !IsEnumMember(symbol) && !IsLocalFunction(symbol))))\n            {\n                var isConst = symbol is IFieldSymbol && ((IFieldSymbol)symbol).IsConst;\n                if (symbol.IsStatic && !isConst)\n                {\n                    AddKeyword(SyntaxKind.StaticKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsOverride)\n                {\n                    AddKeyword(SyntaxKind.OverrideKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsAbstract)\n                {\n                    AddKeyword(SyntaxKind.AbstractKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsSealed)\n                {\n                    AddKeyword(SyntaxKind.SealedKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsExtern)\n                {\n                    AddKeyword(SyntaxKind.ExternKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsVirtual)\n                {\n                    AddKeyword(SyntaxKind.VirtualKeyword);\n                    AddSpace();\n                }\n            } 308167"];
5899 [label="param ShouldMethodDisplayReadOnly(IMethodSymbol method) 308168"];
5900 [label="param ShouldMethodDisplayReadOnly(IPropertySymbol propertyOpt = null) 308169"];
5901 [label="method.ContainingType 308170"];
5902 [label="get\n            {\n                return UnderlyingSymbol.ContainingType.GetPublicSymbol();\n            } 308171"];
5903 [label="UnderlyingSymbol 308172"];
5904 [label="=> _underlying 308173"];
5905 [label="_underlying 308174"];
5906 [label="UnderlyingSymbol.ContainingType 308175"];
5907 [label="UnderlyingSymbol.ContainingType.GetPublicSymbol() 308176"];
5908 [label="symbol.GetPublicSymbol<INamedTypeSymbol>() 308177"];
5909 [label=".ISymbol 308178"];
5910 [label="if (method.ContainingType?.IsReadOnly == true)\n            {\n                return false;\n            } 308179"];
5911 [label=".IsReadOnly 308180"];
5912 [label="=> UnderlyingTypeSymbol.IsReadOnly 308181"];
5913 [label="UnderlyingTypeSymbol 308182"];
5914 [label="=> _underlying 308183"];
5915 [label="_underlying 308184"];
5916 [label="UnderlyingTypeSymbol.IsReadOnly 308185"];
5917 [label="=> HasFlag(DeclarationModifiers.ReadOnly) 308186"];
5918 [label="DeclarationModifiers.ReadOnly 308187"];
5919 [label="HasFlag(DeclarationModifiers.ReadOnly) 308188"];
5920 [label="param HasFlag(DeclarationModifiers flag) 308189"];
5921 [label="=> (_declModifiers & flag) != 0 308190"];
5922 [label="_declModifiers & flag 308191"];
5923 [label="0 308192"];
5924 [label="(_declModifiers & flag) != 0 308193"];
5925 [label="if (method.ContainingType?.IsReadOnly == true)\n            {\n                return false;\n            } 308194"];
5926 [label="var a1 = method as Symbols.PublicModel.MethodSymbol; 308195"];
5927 [label="var a2 = a1 != null ? a1.UnderlyingMethodSymbol as SourcePropertyAccessorSymbol : null; 308196"];
5928 [label="var a2 = a1 != null ? a1.UnderlyingMethodSymbol as SourcePropertyAccessorSymbol : null; 308197"];
5929 [label="a1 != null 308198"];
5930 [label="a1.UnderlyingMethodSymbol 308199"];
5931 [label="=> _underlying 308200"];
5932 [label="_underlying 308201"];
5933 [label="var a3 = propertyOpt as Symbols.PublicModel.PropertySymbol; 308202"];
5934 [label="var a4 = a3 != null ? a3.UnderlyingSymbol as SourcePropertySymbolBase : null; 308203"];
5935 [label="var a4 = a3 != null ? a3.UnderlyingSymbol as SourcePropertySymbolBase : null; 308204"];
5936 [label="a3 != null 308205"];
5937 [label="if (a2 is not null && a4 is not null)\n            {\n                // only display if the accessor is explicitly readonly\n                return a2.LocalDeclaredReadOnly || a4.HasReadOnlyModifier;\n            }\n            else if (method is Symbols.PublicModel.MethodSymbol m)\n            {\n                return m.UnderlyingMethodSymbol.IsDeclaredReadOnly;\n            } 308206"];
5938 [label="if (method is Symbols.PublicModel.MethodSymbol m)\n            {\n                return m.UnderlyingMethodSymbol.IsDeclaredReadOnly;\n            } 308207"];
5939 [label="m.UnderlyingMethodSymbol 308208"];
5940 [label="return m.UnderlyingMethodSymbol.IsDeclaredReadOnly; 308209"];
5941 [label="m.UnderlyingMethodSymbol.IsDeclaredReadOnly 308210"];
5942 [label="get\n            {\n                return (this.DeclarationModifiers & DeclarationModifiers.ReadOnly) != 0;\n            } 308211"];
5943 [label="return (this.DeclarationModifiers & DeclarationModifiers.ReadOnly) != 0; 308212"];
5944 [label="return (this.DeclarationModifiers & DeclarationModifiers.ReadOnly) != 0; 308213"];
5945 [label="param IncludeNamedType(INamedTypeSymbol namedType) 308214"];
5946 [label="param IncludeNamedType(this) 308215"];
5947 [label="if (namedType is null)\n            {\n                return false;\n            } 308216"];
5948 [label="namedType.IsScriptClass 308217"];
5949 [label="=> UnderlyingNamedTypeSymbol.IsScriptClass 308218"];
5950 [label="UnderlyingNamedTypeSymbol 308219"];
5951 [label="=> _underlying 308220"];
5952 [label="_underlying 308221"];
5953 [label="UnderlyingNamedTypeSymbol.IsScriptClass 308222"];
5954 [label="get\n            {\n                var kind = this.declaration.Declarations[0].Kind;\n                return kind == DeclarationKind.Script || kind == DeclarationKind.Submission;\n            } 308223"];
5955 [label="var kind = this.declaration.Declarations[0].Kind; 308224"];
5956 [label="return kind == DeclarationKind.Script || kind == DeclarationKind.Submission; 308225"];
5957 [label="if (namedType.IsScriptClass && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.IncludeScriptType))\n            {\n                return false;\n            } 308226"];
5958 [label="if (semanticModelOpt is not null && namedType == semanticModelOpt.Compilation.ScriptGlobalsType)\n            {\n                return false;\n            } 308227"];
5959 [label="return true; 308228"];
5960 [label="visitor.VisitMethod(this); 308229"];
5961 [label="param MakeNotFirstVisitor(bool inNamespaceOrType = false) 308230"];
5962 [label="param MakeNotFirstVisitor(this) 308231"];
5963 [label="return new SymbolDisplayVisitor(\n                this.builder,\n                this.format,\n                this.semanticModelOpt,\n                this.positionOpt,\n                _escapeKeywordIdentifiers,\n                _lazyAliasMap,\n                isFirstSymbolVisited: false,\n                inNamespaceOrType: inNamespaceOrType); 308232"];
5964 [label="return new SymbolDisplayVisitor(\n                this.builder,\n                this.format,\n                this.semanticModelOpt,\n                this.positionOpt,\n                _escapeKeywordIdentifiers,\n                _lazyAliasMap,\n                isFirstSymbolVisited: false,\n                inNamespaceOrType: inNamespaceOrType); 308233"];
5965 [label="return new SymbolDisplayVisitor(\n                this.builder,\n                this.format,\n                this.semanticModelOpt,\n                this.positionOpt,\n                _escapeKeywordIdentifiers,\n                _lazyAliasMap,\n                isFirstSymbolVisited: false,\n                inNamespaceOrType: inNamespaceOrType); 308234"];
5966 [label="new SymbolDisplayVisitor(\n                this.builder,\n                this.format,\n                this.semanticModelOpt,\n                this.positionOpt,\n                _escapeKeywordIdentifiers,\n                _lazyAliasMap,\n                isFirstSymbolVisited: false,\n                inNamespaceOrType: inNamespaceOrType) 308235"];
5967 [label="param SymbolDisplayVisitor(ArrayBuilder<SymbolDisplayPart> builder) 308236"];
5968 [label="param SymbolDisplayVisitor(SymbolDisplayFormat format) 308237"];
5969 [label="param SymbolDisplayVisitor(SemanticModel semanticModelOpt) 308238"];
5970 [label="param SymbolDisplayVisitor(int positionOpt) 308239"];
5971 [label="param SymbolDisplayVisitor(bool escapeKeywordIdentifiers) 308240"];
5972 [label="param SymbolDisplayVisitor(IDictionary<INamespaceOrTypeSymbol, IAliasSymbol> aliasMap) 308241"];
5973 [label="param SymbolDisplayVisitor(bool isFirstSymbolVisited) 308242"];
5974 [label="param SymbolDisplayVisitor(bool inNamespaceOrType = false) 308243"];
5975 [label="param SymbolDisplayVisitor(this) 308244"];
5976 [label="builder 308245"];
5977 [label="format 308246"];
5978 [label="isFirstSymbolVisited 308247"];
5979 [label="semanticModelOpt 308248"];
5980 [label="positionOpt 308249"];
5981 [label="inNamespaceOrType 308250"];
5982 [label="param SymbolDisplayVisitor(this) 308251"];
5983 [label="param SymbolDisplayVisitor(this) 308252"];
5984 [label="_escapeKeywordIdentifiers 308253"];
5985 [label="_lazyAliasMap 308254"];
5986 [label="_escapeKeywordIdentifiers 308255"];
5987 [label="_lazyAliasMap 308256"];
5988 [label="visitor.VisitMethod(this); 308257"];
5989 [label="param Accept(SymbolVisitor visitor) 308258"];
5990 [label="param Accept(this) 308259"];
5991 [label="visitor.VisitNamedType(this); 308260"];
5992 [label="visitor.VisitNamedType(this) 308261"];
5993 [label="param VisitNamedType(INamedTypeSymbol symbol) 308262"];
5994 [label="param VisitNamedType(this) 308263"];
5995 [label="VisitNamedTypeWithoutNullability(symbol); 308264"];
5996 [label="VisitNamedTypeWithoutNullability(symbol) 308265"];
5997 [label="param VisitNamedTypeWithoutNullability(INamedTypeSymbol symbol) 308266"];
5998 [label="param VisitNamedTypeWithoutNullability(this) 308267"];
5999 [label="if (this.IsMinimizing && TryAddAlias(symbol, builder))\n            {\n                return;\n            } 308268"];
6000 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseSpecialTypes) ||\n                (symbol.IsNativeIntegerType && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseNativeIntegerUnderlyingType)))\n            {\n                if (AddSpecialTypeKeyword(symbol))\n                {\n                    //if we're using special type keywords and this is a special type, then no other work is required\n                    return;\n                }\n            } 308269"];
6001 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseSpecialTypes) ||\n                (symbol.IsNativeIntegerType && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseNativeIntegerUnderlyingType)))\n            {\n                if (AddSpecialTypeKeyword(symbol))\n                {\n                    //if we're using special type keywords and this is a special type, then no other work is required\n                    return;\n                }\n            } 308270"];
6002 [label="symbol.IsNativeIntegerType 308271"];
6003 [label="=> UnderlyingTypeSymbol.IsNativeIntegerType 308272"];
6004 [label="UnderlyingTypeSymbol 308273"];
6005 [label="=> _underlying 308274"];
6006 [label="_underlying 308275"];
6007 [label="UnderlyingTypeSymbol.IsNativeIntegerType 308276"];
6008 [label="=> false 308277"];
6009 [label="false 308278"];
6010 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseSpecialTypes) ||\n                (symbol.IsNativeIntegerType && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseNativeIntegerUnderlyingType)))\n            {\n                if (AddSpecialTypeKeyword(symbol))\n                {\n                    //if we're using special type keywords and this is a special type, then no other work is required\n                    return;\n                }\n            } 308279"];
6011 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseSpecialTypes) ||\n                (symbol.IsNativeIntegerType && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseNativeIntegerUnderlyingType)))\n            {\n                if (AddSpecialTypeKeyword(symbol))\n                {\n                    //if we're using special type keywords and this is a special type, then no other work is required\n                    return;\n                }\n            } 308280"];
6012 [label="if (!format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.ExpandNullable))\n            {\n                //if we're expanding nullable, we just visit nullable types normally\n                if (ITypeSymbolHelpers.IsNullableType(symbol) && !symbol.IsDefinition)\n                {\n                    // Can't have a type called 'int*?'.\n                    var typeArg = symbol.TypeArguments[0];\n                    if (typeArg.TypeKind != TypeKind.Pointer)\n                    {\n                        typeArg.Accept(this.NotFirstVisitor);\n                        AddCustomModifiersIfRequired(symbol.GetTypeArgumentCustomModifiers(0), leadingSpace: true, trailingSpace: false);\n\n                        AddPunctuation(SyntaxKind.QuestionToken);\n\n                        //visiting the underlying type did all of the work for us\n                        return;\n                    }\n                }\n            } 308281"];
6013 [label="if (!format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.ExpandNullable))\n            {\n                //if we're expanding nullable, we just visit nullable types normally\n                if (ITypeSymbolHelpers.IsNullableType(symbol) && !symbol.IsDefinition)\n                {\n                    // Can't have a type called 'int*?'.\n                    var typeArg = symbol.TypeArguments[0];\n                    if (typeArg.TypeKind != TypeKind.Pointer)\n                    {\n                        typeArg.Accept(this.NotFirstVisitor);\n                        AddCustomModifiersIfRequired(symbol.GetTypeArgumentCustomModifiers(0), leadingSpace: true, trailingSpace: false);\n\n                        AddPunctuation(SyntaxKind.QuestionToken);\n\n                        //visiting the underlying type did all of the work for us\n                        return;\n                    }\n                }\n            } 308282"];
6014 [label="if (ITypeSymbolHelpers.IsNullableType(symbol) && !symbol.IsDefinition)\n                {\n                    // Can't have a type called 'int*?'.\n                    var typeArg = symbol.TypeArguments[0];\n                    if (typeArg.TypeKind != TypeKind.Pointer)\n                    {\n                        typeArg.Accept(this.NotFirstVisitor);\n                        AddCustomModifiersIfRequired(symbol.GetTypeArgumentCustomModifiers(0), leadingSpace: true, trailingSpace: false);\n\n                        AddPunctuation(SyntaxKind.QuestionToken);\n\n                        //visiting the underlying type did all of the work for us\n                        return;\n                    }\n                } 308283"];
6015 [label="if (ITypeSymbolHelpers.IsNullableType(symbol) && !symbol.IsDefinition)\n                {\n                    // Can't have a type called 'int*?'.\n                    var typeArg = symbol.TypeArguments[0];\n                    if (typeArg.TypeKind != TypeKind.Pointer)\n                    {\n                        typeArg.Accept(this.NotFirstVisitor);\n                        AddCustomModifiersIfRequired(symbol.GetTypeArgumentCustomModifiers(0), leadingSpace: true, trailingSpace: false);\n\n                        AddPunctuation(SyntaxKind.QuestionToken);\n\n                        //visiting the underlying type did all of the work for us\n                        return;\n                    }\n                } 308284"];
6016 [label="get\n            {\n                return UnderlyingTypeSymbol.OriginalDefinition.GetPublicSymbol();\n            } 308285"];
6017 [label="UnderlyingTypeSymbol 308286"];
6018 [label="=> _underlying 308287"];
6019 [label="_underlying 308288"];
6020 [label="return UnderlyingTypeSymbol.OriginalDefinition.GetPublicSymbol(); 308289"];
6021 [label="UnderlyingTypeSymbol.OriginalDefinition 308290"];
6022 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 308291"];
6023 [label="OriginalTypeSymbolDefinition 308292"];
6024 [label="get\n            {\n                return this.OriginalDefinition;\n            } 308293"];
6025 [label="this.OriginalDefinition 308294"];
6026 [label="get\n            {\n                return this;\n            } 308295"];
6027 [label="return this; 308296"];
6028 [label="return this.OriginalDefinition; 308297"];
6029 [label="return OriginalTypeSymbolDefinition; 308298"];
6030 [label="UnderlyingTypeSymbol.OriginalDefinition.GetPublicSymbol() 308299"];
6031 [label="param GetPublicSymbol(this TypeSymbol? symbol) 308300"];
6032 [label="return symbol.GetPublicSymbol<ITypeSymbol>(); 308301"];
6033 [label="symbol.GetPublicSymbol<ITypeSymbol>() 308302"];
6034 [label="param GetPublicSymbol(this Symbol? symbol) 308303"];
6035 [label="=> UnderlyingTypeSymbol.SpecialType 308304"];
6036 [label="UnderlyingTypeSymbol 308305"];
6037 [label="=> _underlying 308306"];
6038 [label="_underlying 308307"];
6039 [label="UnderlyingTypeSymbol.SpecialType 308308"];
6040 [label="get\n            {\n                return _flags.SpecialType;\n            } 308309"];
6041 [label="_flags.SpecialType 308310"];
6042 [label="get { return (SpecialType)((_flags >> SpecialTypeOffset) & SpecialTypeMask); } 308311"];
6043 [label="return (SpecialType)((_flags >> SpecialTypeOffset) & SpecialTypeMask); 308312"];
6044 [label="return (SpecialType)((_flags >> SpecialTypeOffset) & SpecialTypeMask); 308313"];
6045 [label="return _flags.SpecialType; 308314"];
6046 [label="symbol.IsTupleType 308315"];
6047 [label="=> UnderlyingTypeSymbol.IsTupleType 308316"];
6048 [label="UnderlyingTypeSymbol 308317"];
6049 [label="=> _underlying 308318"];
6050 [label="_underlying 308319"];
6051 [label="UnderlyingTypeSymbol.IsTupleType 308320"];
6052 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 308321"];
6053 [label="_ 308322"];
6054 [label="tupleCardinality: out _ 308323"];
6055 [label="IsTupleTypeOfCardinality(tupleCardinality: out _) 308324"];
6056 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 308325"];
6057 [label="param IsTupleTypeOfCardinality(this) 308326"];
6058 [label="IsUnboundGenericType 308327"];
6059 [label="get\n            {\n                return false;\n            } 308328"];
6060 [label="return false; 308329"];
6061 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308330"];
6062 [label="ContainingSymbol 308331"];
6063 [label="get\n            {\n                return _containingSymbol;\n            } 308332"];
6064 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308333"];
6065 [label=".Kind 308334"];
6066 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 308335"];
6067 [label="return SymbolKind.Namespace; 308336"];
6068 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308337"];
6069 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308338"];
6070 [label="ContainingNamespace 308339"];
6071 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 308340"];
6072 [label="this.ContainingSymbol 308341"];
6073 [label="get\n            {\n                return _containingSymbol;\n            } 308342"];
6074 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 308343"];
6075 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 308344"];
6076 [label="var ns = container as NamespaceSymbol; 308345"];
6077 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 308346"];
6078 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 308347"];
6079 [label="return ns; 308348"];
6080 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308349"];
6081 [label="ContainingNamespace.ContainingNamespace 308350"];
6082 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 308351"];
6083 [label="this.ContainingSymbol 308352"];
6084 [label="=> _container 308353"];
6085 [label="_container 308354"];
6086 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 308355"];
6087 [label="container.ContainingSymbol 308356"];
6088 [label="get\n            {\n                return _assemblySymbol;\n            } 308357"];
6089 [label="return _assemblySymbol; 308358"];
6090 [label="get\n            {\n                return null;\n            } 308359"];
6091 [label="return null; 308360"];
6092 [label="return null; 308361"];
6093 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308362"];
6094 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308363"];
6095 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308364"];
6096 [label="tupleCardinality = 0; 308365"];
6097 [label="return false; 308366"];
6098 [label="if (this.IsMinimizing || (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol)))\n            {\n                MinimallyQualify(symbol);\n                return;\n            } 308367"];
6099 [label="if (this.IsMinimizing || (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol)))\n            {\n                MinimallyQualify(symbol);\n                return;\n            } 308368"];
6100 [label="AddTypeKind(symbol); 308369"];
6101 [label="AddTypeKind(symbol) 308370"];
6102 [label="param AddTypeKind(INamedTypeSymbol symbol) 308371"];
6103 [label="param AddTypeKind(this) 308372"];
6104 [label="if (isFirstSymbolVisited && format.KindOptions.IncludesOption(SymbolDisplayKindOptions.IncludeTypeKeyword))\n            {\n                if (symbol.IsAnonymousType)\n                {\n                    builder.Add(new SymbolDisplayPart(SymbolDisplayPartKind.AnonymousTypeIndicator, null, 'AnonymousType'));\n                    AddSpace();\n                }\n                else if (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol))\n                {\n                    builder.Add(new SymbolDisplayPart(SymbolDisplayPartKind.AnonymousTypeIndicator, null, 'Tuple'));\n                    AddSpace();\n                }\n                else\n                {\n                    switch (symbol.TypeKind)\n                    {\n                        case TypeKind.Class when symbol.IsRecord:\n                            AddKeyword(SyntaxKind.RecordKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Module:\n                        case TypeKind.Class:\n                            AddKeyword(SyntaxKind.ClassKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Enum:\n                            AddKeyword(SyntaxKind.EnumKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Delegate:\n                            AddKeyword(SyntaxKind.DelegateKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Interface:\n                            AddKeyword(SyntaxKind.InterfaceKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Struct:\n                            if (symbol.IsReadOnly)\n                            {\n                                AddKeyword(SyntaxKind.ReadOnlyKeyword);\n                                AddSpace();\n                            }\n\n                            if (symbol.IsRefLikeType)\n                            {\n                                AddKeyword(SyntaxKind.RefKeyword);\n                                AddSpace();\n                            }\n\n                            AddKeyword(SyntaxKind.StructKeyword);\n                            AddSpace();\n                            break;\n                    }\n                }\n            } 308373"];
6105 [label="AddTypeKind(symbol); 308374"];
6106 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var invokeMethod = symbol.DelegateInvokeMethod;\n                    if (invokeMethod.ReturnsByRef)\n                    {\n                        AddRefIfRequired();\n                    }\n                    else if (invokeMethod.ReturnsByRefReadonly)\n                    {\n                        AddRefReadonlyIfRequired();\n                    }\n\n                    if (invokeMethod.ReturnsVoid)\n                    {\n                        AddKeyword(SyntaxKind.VoidKeyword);\n                    }\n                    else\n                    {\n                        AddReturnType(symbol.DelegateInvokeMethod);\n                    }\n\n                    AddSpace();\n                }\n            } 308375"];
6107 [label="CanShowDelegateSignature(symbol) 308376"];
6108 [label="param CanShowDelegateSignature(INamedTypeSymbol symbol) 308377"];
6109 [label="param CanShowDelegateSignature(this) 308378"];
6110 [label="return\n                isFirstSymbolVisited &&\n                symbol.TypeKind == TypeKind.Delegate &&\n                format.DelegateStyle != SymbolDisplayDelegateStyle.NameOnly &&\n                symbol.DelegateInvokeMethod != null; 308379"];
6111 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var invokeMethod = symbol.DelegateInvokeMethod;\n                    if (invokeMethod.ReturnsByRef)\n                    {\n                        AddRefIfRequired();\n                    }\n                    else if (invokeMethod.ReturnsByRefReadonly)\n                    {\n                        AddRefReadonlyIfRequired();\n                    }\n\n                    if (invokeMethod.ReturnsVoid)\n                    {\n                        AddKeyword(SyntaxKind.VoidKeyword);\n                    }\n                    else\n                    {\n                        AddReturnType(symbol.DelegateInvokeMethod);\n                    }\n\n                    AddSpace();\n                }\n            } 308380"];
6112 [label="symbol.ContainingSymbol 308381"];
6113 [label="get\n            {\n                return UnderlyingSymbol.ContainingSymbol.GetPublicSymbol();\n            } 308382"];
6114 [label="UnderlyingSymbol 308383"];
6115 [label="=> _underlying 308384"];
6116 [label="_underlying 308385"];
6117 [label="return UnderlyingSymbol.ContainingSymbol.GetPublicSymbol(); 308386"];
6118 [label="UnderlyingSymbol.ContainingSymbol 308387"];
6119 [label="get\n            {\n                return _containingSymbol;\n            } 308388"];
6120 [label="UnderlyingSymbol.ContainingSymbol.GetPublicSymbol() 308389"];
6121 [label="param GetPublicSymbol(this Symbol? symbol) 308390"];
6122 [label="return symbol.GetPublicSymbol<ISymbol>(); 308391"];
6123 [label="symbol.GetPublicSymbol<ISymbol>() 308392"];
6124 [label="param GetPublicSymbol(this Symbol? symbol) 308393"];
6125 [label=".ISymbol 308394"];
6126 [label="param CreateISymbol(this) 308395"];
6127 [label="return new PublicModel.NamespaceSymbol(this); 308396"];
6128 [label="return new PublicModel.NamespaceSymbol(this); 308397"];
6129 [label="new PublicModel.NamespaceSymbol(this) 308398"];
6130 [label="param NamespaceSymbol(Symbols.NamespaceSymbol underlying) 308399"];
6131 [label="param NamespaceSymbol(this) 308400"];
6132 [label="param NamespaceSymbol(this) 308401"];
6133 [label="param NamespaceOrTypeSymbol(this) 308402"];
6134 [label="param NamespaceOrTypeSymbol(this) 308403"];
6135 [label="param Symbol(this) 308404"];
6136 [label="_underlying 308405"];
6137 [label="Debug.Assert(underlying is object); 308406"];
6138 [label="_underlying 308407"];
6139 [label="var containingSymbol = symbol.ContainingSymbol; 308408"];
6140 [label="if (ShouldVisitNamespace(containingSymbol))\n            {\n                var namespaceSymbol = (INamespaceSymbol)containingSymbol;\n                var shouldSkip = namespaceSymbol.IsGlobalNamespace && symbol.TypeKind == TypeKind.Error;\n\n                if (!shouldSkip)\n                {\n                    namespaceSymbol.Accept(this.NotFirstVisitor);\n                    AddPunctuation(namespaceSymbol.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                }\n            } 308409"];
6141 [label="ShouldVisitNamespace(containingSymbol) 308410"];
6142 [label="param ShouldVisitNamespace(ISymbol containingSymbol) 308411"];
6143 [label="param ShouldVisitNamespace(this) 308412"];
6144 [label="var namespaceSymbol = containingSymbol as INamespaceSymbol; 308413"];
6145 [label="if (namespaceSymbol == null)\n            {\n                return false;\n            } 308414"];
6146 [label="if (namespaceSymbol == null)\n            {\n                return false;\n            } 308415"];
6147 [label="if (format.TypeQualificationStyle != SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces)\n            {\n                return false;\n            } 308416"];
6148 [label="namespaceSymbol.IsGlobalNamespace 308417"];
6149 [label="=> _underlying.IsGlobalNamespace 308418"];
6150 [label="_underlying.IsGlobalNamespace 308419"];
6151 [label="get\n            {\n                return (object)ContainingNamespace == null;\n            } 308420"];
6152 [label="ContainingNamespace 308421"];
6153 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 308422"];
6154 [label="this.ContainingSymbol 308423"];
6155 [label="=> _container 308424"];
6156 [label="_container 308425"];
6157 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 308426"];
6158 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 308427"];
6159 [label="var ns = container as NamespaceSymbol; 308428"];
6160 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 308429"];
6161 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 308430"];
6162 [label="container.ContainingSymbol 308431"];
6163 [label="get\n            {\n                return _assemblySymbol;\n            } 308432"];
6164 [label="return _assemblySymbol; 308433"];
6165 [label="var ns = container as NamespaceSymbol; 308434"];
6166 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 308435"];
6167 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 308436"];
6168 [label="get\n            {\n                return null;\n            } 308437"];
6169 [label="return null; 308438"];
6170 [label="return null; 308439"];
6171 [label="return (object)ContainingNamespace == null; 308440"];
6172 [label="return (object)ContainingNamespace == null; 308441"];
6173 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 308442"];
6174 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 308443"];
6175 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 308444"];
6176 [label="if (ShouldVisitNamespace(containingSymbol))\n            {\n                var namespaceSymbol = (INamespaceSymbol)containingSymbol;\n                var shouldSkip = namespaceSymbol.IsGlobalNamespace && symbol.TypeKind == TypeKind.Error;\n\n                if (!shouldSkip)\n                {\n                    namespaceSymbol.Accept(this.NotFirstVisitor);\n                    AddPunctuation(namespaceSymbol.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                }\n            } 308445"];
6177 [label="if (format.TypeQualificationStyle == SymbolDisplayTypeQualificationStyle.NameAndContainingTypes ||\n                format.TypeQualificationStyle == SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces)\n            {\n                if (IncludeNamedType(symbol.ContainingType))\n                {\n                    symbol.ContainingType.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.DotToken);\n                }\n            } 308446"];
6178 [label="symbol.ContainingType 308447"];
6179 [label="get\n            {\n                return _containingSymbol as NamedTypeSymbol;\n            } 308448"];
6180 [label="return _containingSymbol as NamedTypeSymbol; 308449"];
6181 [label="if (IncludeNamedType(symbol.ContainingType))\n                {\n                    symbol.ContainingType.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.DotToken);\n                } 308450"];
6182 [label="IncludeNamedType(symbol.ContainingType) 308451"];
6183 [label="param IncludeNamedType(INamedTypeSymbol namedType) 308452"];
6184 [label="param IncludeNamedType(this) 308453"];
6185 [label="if (namedType is null)\n            {\n                return false;\n            } 308454"];
6186 [label="return false; 308455"];
6187 [label="AddNameAndTypeArgumentsOrParameters(symbol); 308456"];
6188 [label="AddNameAndTypeArgumentsOrParameters(symbol) 308457"];
6189 [label="param AddNameAndTypeArgumentsOrParameters(INamedTypeSymbol symbol) 308458"];
6190 [label="param AddNameAndTypeArgumentsOrParameters(this) 308459"];
6191 [label="symbol.IsAnonymousType 308460"];
6192 [label="=> UnderlyingTypeSymbol.IsAnonymousType 308461"];
6193 [label="UnderlyingTypeSymbol 308462"];
6194 [label="=> _underlying 308463"];
6195 [label="_underlying 308464"];
6196 [label="UnderlyingTypeSymbol.IsAnonymousType 308465"];
6197 [label="get\n            {\n                return false;\n            } 308466"];
6198 [label="return false; 308467"];
6199 [label="if (symbol.IsAnonymousType)\n            {\n                AddAnonymousTypeName(symbol);\n                return;\n            }\n            else if (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol))\n            {\n                AddTupleTypeName(symbol);\n                return;\n            } 308468"];
6200 [label="symbol.IsTupleType 308469"];
6201 [label="=> UnderlyingTypeSymbol.IsTupleType 308470"];
6202 [label="UnderlyingTypeSymbol 308471"];
6203 [label="=> _underlying 308472"];
6204 [label="_underlying 308473"];
6205 [label="UnderlyingTypeSymbol.IsTupleType 308474"];
6206 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 308475"];
6207 [label="_ 308476"];
6208 [label="tupleCardinality: out _ 308477"];
6209 [label="IsTupleTypeOfCardinality(tupleCardinality: out _) 308478"];
6210 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 308479"];
6211 [label="param IsTupleTypeOfCardinality(this) 308480"];
6212 [label="IsUnboundGenericType 308481"];
6213 [label="get\n            {\n                return false;\n            } 308482"];
6214 [label="return false; 308483"];
6215 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308484"];
6216 [label="ContainingSymbol 308485"];
6217 [label="get\n            {\n                return _containingSymbol;\n            } 308486"];
6218 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308487"];
6219 [label=".Kind 308488"];
6220 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 308489"];
6221 [label="return SymbolKind.Namespace; 308490"];
6222 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308491"];
6223 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308492"];
6224 [label="ContainingNamespace 308493"];
6225 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 308494"];
6226 [label="this.ContainingSymbol 308495"];
6227 [label="get\n            {\n                return _containingSymbol;\n            } 308496"];
6228 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 308497"];
6229 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 308498"];
6230 [label="var ns = container as NamespaceSymbol; 308499"];
6231 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 308500"];
6232 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 308501"];
6233 [label="return ns; 308502"];
6234 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308503"];
6235 [label="ContainingNamespace.ContainingNamespace 308504"];
6236 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 308505"];
6237 [label="this.ContainingSymbol 308506"];
6238 [label="=> _container 308507"];
6239 [label="_container 308508"];
6240 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 308509"];
6241 [label="container.ContainingSymbol 308510"];
6242 [label="get\n            {\n                return _assemblySymbol;\n            } 308511"];
6243 [label="return _assemblySymbol; 308512"];
6244 [label="get\n            {\n                return null;\n            } 308513"];
6245 [label="return null; 308514"];
6246 [label="return null; 308515"];
6247 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308516"];
6248 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308517"];
6249 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 308518"];
6250 [label="tupleCardinality = 0; 308519"];
6251 [label="return false; 308520"];
6252 [label="if (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol))\n            {\n                AddTupleTypeName(symbol);\n                return;\n            } 308521"];
6253 [label="string symbolName = null; 308522"];
6254 [label="(symbol is Symbols.PublicModel.NamedTypeSymbol) 308523"];
6255 [label="((Symbols.PublicModel.NamedTypeSymbol)symbol).UnderlyingNamedTypeSymbol 308524"];
6256 [label="=> _underlying 308525"];
6257 [label="_underlying 308526"];
6258 [label="NamedTypeSymbol underlyingTypeSymbol = (symbol is Symbols.PublicModel.NamedTypeSymbol) ? ((Symbols.PublicModel.NamedTypeSymbol)symbol).UnderlyingNamedTypeSymbol : null; 308527"];
6259 [label="var illegalGenericInstantiationSymbol = underlyingTypeSymbol as NoPiaIllegalGenericInstantiationSymbol; 308528"];
6260 [label="if ((object)illegalGenericInstantiationSymbol != null)\n            {\n                symbol = illegalGenericInstantiationSymbol.UnderlyingSymbol.GetPublicSymbol();\n            }\n            else\n            {\n                var ambiguousCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaAmbiguousCanonicalTypeSymbol;\n\n                if ((object)ambiguousCanonicalTypeSymbol != null)\n                {\n                    symbol = ambiguousCanonicalTypeSymbol.FirstCandidate.GetPublicSymbol();\n                }\n                else\n                {\n                    var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol;\n\n                    if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    }\n                }\n            } 308529"];
6261 [label="if ((object)illegalGenericInstantiationSymbol != null)\n            {\n                symbol = illegalGenericInstantiationSymbol.UnderlyingSymbol.GetPublicSymbol();\n            }\n            else\n            {\n                var ambiguousCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaAmbiguousCanonicalTypeSymbol;\n\n                if ((object)ambiguousCanonicalTypeSymbol != null)\n                {\n                    symbol = ambiguousCanonicalTypeSymbol.FirstCandidate.GetPublicSymbol();\n                }\n                else\n                {\n                    var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol;\n\n                    if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    }\n                }\n            } 308530"];
6262 [label="var ambiguousCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaAmbiguousCanonicalTypeSymbol; 308531"];
6263 [label="if ((object)ambiguousCanonicalTypeSymbol != null)\n                {\n                    symbol = ambiguousCanonicalTypeSymbol.FirstCandidate.GetPublicSymbol();\n                }\n                else\n                {\n                    var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol;\n\n                    if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    }\n                } 308532"];
6264 [label="if ((object)ambiguousCanonicalTypeSymbol != null)\n                {\n                    symbol = ambiguousCanonicalTypeSymbol.FirstCandidate.GetPublicSymbol();\n                }\n                else\n                {\n                    var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol;\n\n                    if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    }\n                } 308533"];
6265 [label="var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol; 308534"];
6266 [label="if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    } 308535"];
6267 [label="if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    } 308536"];
6268 [label="var partKind = GetPartKind(symbol); 308537"];
6269 [label="GetPartKind(symbol) 308538"];
6270 [label="param GetPartKind(INamedTypeSymbol symbol) 308539"];
6271 [label="symbol.TypeKind 308540"];
6272 [label="get\n            {\n                return UnderlyingTypeSymbol.TypeKind;\n            } 308541"];
6273 [label="UnderlyingTypeSymbol 308542"];
6274 [label="=> _underlying 308543"];
6275 [label="_underlying 308544"];
6276 [label="return UnderlyingTypeSymbol.TypeKind; 308545"];
6277 [label="UnderlyingTypeSymbol.TypeKind 308546"];
6278 [label="get\n            {\n                return _flags.TypeKind;\n            } 308547"];
6279 [label="_flags.TypeKind 308548"];
6280 [label="switch (symbol.TypeKind)\n            {\n                case TypeKind.Class when symbol.IsRecord:\n                    return SymbolDisplayPartKind.RecordClassName;\n                case TypeKind.Submission:\n                case TypeKind.Module:\n                case TypeKind.Class:\n                    return SymbolDisplayPartKind.ClassName;\n                case TypeKind.Delegate:\n                    return SymbolDisplayPartKind.DelegateName;\n                case TypeKind.Enum:\n                    return SymbolDisplayPartKind.EnumName;\n                case TypeKind.Error:\n                    return SymbolDisplayPartKind.ErrorTypeName;\n                case TypeKind.Interface:\n                    return SymbolDisplayPartKind.InterfaceName;\n                case TypeKind.Struct:\n                    return SymbolDisplayPartKind.StructName;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.TypeKind);\n            } 308549"];
6281 [label="symbol.IsRecord 308550"];
6282 [label="=> UnderlyingTypeSymbol.IsRecord 308551"];
6283 [label="UnderlyingTypeSymbol 308552"];
6284 [label="=> _underlying 308553"];
6285 [label="_underlying 308554"];
6286 [label="UnderlyingTypeSymbol.IsRecord 308555"];
6287 [label="get\n            {\n                return this.declaration.Declarations[0].Kind == DeclarationKind.Record;\n            } 308556"];
6288 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.Record; 308557"];
6289 [label="switch (symbol.TypeKind)\n            {\n                case TypeKind.Class when symbol.IsRecord:\n                    return SymbolDisplayPartKind.RecordClassName;\n                case TypeKind.Submission:\n                case TypeKind.Module:\n                case TypeKind.Class:\n                    return SymbolDisplayPartKind.ClassName;\n                case TypeKind.Delegate:\n                    return SymbolDisplayPartKind.DelegateName;\n                case TypeKind.Enum:\n                    return SymbolDisplayPartKind.EnumName;\n                case TypeKind.Error:\n                    return SymbolDisplayPartKind.ErrorTypeName;\n                case TypeKind.Interface:\n                    return SymbolDisplayPartKind.InterfaceName;\n                case TypeKind.Struct:\n                    return SymbolDisplayPartKind.StructName;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.TypeKind);\n            } 308558"];
6290 [label="return SymbolDisplayPartKind.ClassName; 308559"];
6291 [label="if (symbolName == null)\n            {\n                symbolName = symbol.Name;\n            } 308560"];
6292 [label="if (symbolName == null)\n            {\n                symbolName = symbol.Name;\n            } 308561"];
6293 [label="symbol.Name 308562"];
6294 [label="=> UnderlyingSymbol.Name 308563"];
6295 [label="UnderlyingSymbol 308564"];
6296 [label="=> _underlying 308565"];
6297 [label="_underlying 308566"];
6298 [label="UnderlyingSymbol.Name 308567"];
6299 [label="get\n            {\n                return declaration.Name;\n            } 308568"];
6300 [label="symbolName = symbol.Name; 308569"];
6301 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseErrorTypeSymbolName) &&\n                partKind == SymbolDisplayPartKind.ErrorTypeName &&\n                string.IsNullOrEmpty(symbolName))\n            {\n                builder.Add(CreatePart(partKind, symbol, '?'));\n            }\n            else\n            {\n                symbolName = RemoveAttributeSufficeIfNecessary(symbol, symbolName);\n                builder.Add(CreatePart(partKind, symbol, symbolName));\n            } 308570"];
6302 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseErrorTypeSymbolName) &&\n                partKind == SymbolDisplayPartKind.ErrorTypeName &&\n                string.IsNullOrEmpty(symbolName))\n            {\n                builder.Add(CreatePart(partKind, symbol, '?'));\n            }\n            else\n            {\n                symbolName = RemoveAttributeSufficeIfNecessary(symbol, symbolName);\n                builder.Add(CreatePart(partKind, symbol, symbolName));\n            } 308571"];
6303 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseErrorTypeSymbolName) &&\n                partKind == SymbolDisplayPartKind.ErrorTypeName &&\n                string.IsNullOrEmpty(symbolName))\n            {\n                builder.Add(CreatePart(partKind, symbol, '?'));\n            }\n            else\n            {\n                symbolName = RemoveAttributeSufficeIfNecessary(symbol, symbolName);\n                builder.Add(CreatePart(partKind, symbol, symbolName));\n            } 308572"];
6304 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseErrorTypeSymbolName) &&\n                partKind == SymbolDisplayPartKind.ErrorTypeName &&\n                string.IsNullOrEmpty(symbolName))\n            {\n                builder.Add(CreatePart(partKind, symbol, '?'));\n            }\n            else\n            {\n                symbolName = RemoveAttributeSufficeIfNecessary(symbol, symbolName);\n                builder.Add(CreatePart(partKind, symbol, symbolName));\n            } 308573"];
6305 [label="symbolName = RemoveAttributeSufficeIfNecessary(symbol, symbolName); 308574"];
6306 [label="symbolName = RemoveAttributeSufficeIfNecessary(symbol, symbolName); 308575"];
6307 [label="RemoveAttributeSufficeIfNecessary(symbol, symbolName) 308576"];
6308 [label="param RemoveAttributeSufficeIfNecessary(INamedTypeSymbol symbol) 308577"];
6309 [label="param RemoveAttributeSufficeIfNecessary(string symbolName) 308578"];
6310 [label="param RemoveAttributeSufficeIfNecessary(this) 308579"];
6311 [label="if (this.IsMinimizing &&\n                format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.RemoveAttributeSuffix) &&\n                semanticModelOpt.Compilation.IsAttributeType(symbol))\n            {\n                string nameWithoutAttributeSuffix;\n                if (symbolName.TryGetWithoutAttributeSuffix(out nameWithoutAttributeSuffix))\n                {\n                    var token = SyntaxFactory.ParseToken(nameWithoutAttributeSuffix);\n                    if (token.IsKind(SyntaxKind.IdentifierToken))\n                    {\n                        symbolName = nameWithoutAttributeSuffix;\n                    }\n                }\n            } 308580"];
6312 [label="return symbolName; 308581"];
6313 [label="builder.Add(CreatePart(partKind, symbol, symbolName)); 308582"];
6314 [label="builder.Add(CreatePart(partKind, symbol, symbolName)); 308583"];
6315 [label="builder.Add(CreatePart(partKind, symbol, symbolName)); 308584"];
6316 [label="CreatePart(partKind, symbol, symbolName) 308585"];
6317 [label="param CreatePart(SymbolDisplayPartKind kind) 308586"];
6318 [label="param CreatePart(ISymbol symbol) 308587"];
6319 [label="param CreatePart(string text) 308588"];
6320 [label="param CreatePart(this) 308589"];
6321 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 308590"];
6322 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 308591"];
6323 [label="(text == null) 308592"];
6324 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 308593"];
6325 [label="IsEscapable(kind) 308594"];
6326 [label="param IsEscapable(SymbolDisplayPartKind kind) 308595"];
6327 [label="switch (kind)\n            {\n                case SymbolDisplayPartKind.AliasName:\n                case SymbolDisplayPartKind.ClassName:\n                case SymbolDisplayPartKind.RecordClassName:\n                case SymbolDisplayPartKind.StructName:\n                case SymbolDisplayPartKind.InterfaceName:\n                case SymbolDisplayPartKind.EnumName:\n                case SymbolDisplayPartKind.DelegateName:\n                case SymbolDisplayPartKind.TypeParameterName:\n                case SymbolDisplayPartKind.MethodName:\n                case SymbolDisplayPartKind.PropertyName:\n                case SymbolDisplayPartKind.FieldName:\n                case SymbolDisplayPartKind.LocalName:\n                case SymbolDisplayPartKind.NamespaceName:\n                case SymbolDisplayPartKind.ParameterName:\n                    return true;\n                default:\n                    return false;\n            } 308596"];
6328 [label="return true; 308597"];
6329 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 308598"];
6330 [label="(_escapeKeywordIdentifiers && IsEscapable(kind)) 308599"];
6331 [label="EscapeIdentifier(text) 308600"];
6332 [label="param EscapeIdentifier(string identifier) 308601"];
6333 [label="var kind = SyntaxFacts.GetKeywordKind(identifier); 308602"];
6334 [label="return kind == SyntaxKind.None\n                ? identifier\n                : $'@{identifier}'; 308603"];
6335 [label="kind == SyntaxKind.None 308604"];
6336 [label="return new SymbolDisplayPart(kind, symbol, text); 308605"];
6337 [label="return new SymbolDisplayPart(kind, symbol, text); 308606"];
6338 [label="return new SymbolDisplayPart(kind, symbol, text); 308607"];
6339 [label="return new SymbolDisplayPart(kind, symbol, text); 308608"];
6340 [label="if (format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseArityForGenericTypes))\n            {\n                // Only the compiler can set the internal option and the compiler doesn't use other implementations of INamedTypeSymbol.\n                if (underlyingTypeSymbol?.MangleName == true)\n                {\n                    Debug.Assert(symbol.Arity > 0);\n                    builder.Add(CreatePart(InternalSymbolDisplayPartKind.Arity, null,\n                        MetadataHelpers.GetAritySuffix(symbol.Arity)));\n                }\n            }\n            else if (symbol.Arity > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                // It would be nice to handle VB symbols too, but it's not worth the effort.\n                if (underlyingTypeSymbol is UnsupportedMetadataTypeSymbol || underlyingTypeSymbol is MissingMetadataTypeSymbol || symbol.IsUnboundGenericType)\n                {\n                    AddPunctuation(SyntaxKind.LessThanToken);\n                    for (int i = 0; i < symbol.Arity - 1; i++)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                    }\n\n                    AddPunctuation(SyntaxKind.GreaterThanToken);\n                }\n                else\n                {\n                    ImmutableArray<ImmutableArray<CustomModifier>> modifiers = GetTypeArgumentsModifiers(underlyingTypeSymbol);\n                    AddTypeArguments(symbol, modifiers);\n\n                    AddDelegateParameters(symbol);\n\n                    // TODO: do we want to skip these if we're being visited as a containing type?\n                    AddTypeParameterConstraints(symbol.TypeArguments);\n                }\n            }\n            else\n            {\n                AddDelegateParameters(symbol);\n            } 308609"];
6341 [label="if (format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseArityForGenericTypes))\n            {\n                // Only the compiler can set the internal option and the compiler doesn't use other implementations of INamedTypeSymbol.\n                if (underlyingTypeSymbol?.MangleName == true)\n                {\n                    Debug.Assert(symbol.Arity > 0);\n                    builder.Add(CreatePart(InternalSymbolDisplayPartKind.Arity, null,\n                        MetadataHelpers.GetAritySuffix(symbol.Arity)));\n                }\n            }\n            else if (symbol.Arity > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                // It would be nice to handle VB symbols too, but it's not worth the effort.\n                if (underlyingTypeSymbol is UnsupportedMetadataTypeSymbol || underlyingTypeSymbol is MissingMetadataTypeSymbol || symbol.IsUnboundGenericType)\n                {\n                    AddPunctuation(SyntaxKind.LessThanToken);\n                    for (int i = 0; i < symbol.Arity - 1; i++)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                    }\n\n                    AddPunctuation(SyntaxKind.GreaterThanToken);\n                }\n                else\n                {\n                    ImmutableArray<ImmutableArray<CustomModifier>> modifiers = GetTypeArgumentsModifiers(underlyingTypeSymbol);\n                    AddTypeArguments(symbol, modifiers);\n\n                    AddDelegateParameters(symbol);\n\n                    // TODO: do we want to skip these if we're being visited as a containing type?\n                    AddTypeParameterConstraints(symbol.TypeArguments);\n                }\n            }\n            else\n            {\n                AddDelegateParameters(symbol);\n            } 308610"];
6342 [label="symbol.Arity 308611"];
6343 [label="get\n            {\n                return UnderlyingNamedTypeSymbol.Arity;\n            } 308612"];
6344 [label="UnderlyingNamedTypeSymbol 308613"];
6345 [label="=> _underlying 308614"];
6346 [label="return UnderlyingNamedTypeSymbol.Arity; 308615"];
6347 [label="UnderlyingNamedTypeSymbol.Arity 308616"];
6348 [label="get\n            {\n                return declaration.Arity;\n            } 308617"];
6349 [label="if (symbol.Arity > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                // It would be nice to handle VB symbols too, but it's not worth the effort.\n                if (underlyingTypeSymbol is UnsupportedMetadataTypeSymbol || underlyingTypeSymbol is MissingMetadataTypeSymbol || symbol.IsUnboundGenericType)\n                {\n                    AddPunctuation(SyntaxKind.LessThanToken);\n                    for (int i = 0; i < symbol.Arity - 1; i++)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                    }\n\n                    AddPunctuation(SyntaxKind.GreaterThanToken);\n                }\n                else\n                {\n                    ImmutableArray<ImmutableArray<CustomModifier>> modifiers = GetTypeArgumentsModifiers(underlyingTypeSymbol);\n                    AddTypeArguments(symbol, modifiers);\n\n                    AddDelegateParameters(symbol);\n\n                    // TODO: do we want to skip these if we're being visited as a containing type?\n                    AddTypeParameterConstraints(symbol.TypeArguments);\n                }\n            }\n            else\n            {\n                AddDelegateParameters(symbol);\n            } 308618"];
6350 [label="if (symbol.Arity > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                // It would be nice to handle VB symbols too, but it's not worth the effort.\n                if (underlyingTypeSymbol is UnsupportedMetadataTypeSymbol || underlyingTypeSymbol is MissingMetadataTypeSymbol || symbol.IsUnboundGenericType)\n                {\n                    AddPunctuation(SyntaxKind.LessThanToken);\n                    for (int i = 0; i < symbol.Arity - 1; i++)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                    }\n\n                    AddPunctuation(SyntaxKind.GreaterThanToken);\n                }\n                else\n                {\n                    ImmutableArray<ImmutableArray<CustomModifier>> modifiers = GetTypeArgumentsModifiers(underlyingTypeSymbol);\n                    AddTypeArguments(symbol, modifiers);\n\n                    AddDelegateParameters(symbol);\n\n                    // TODO: do we want to skip these if we're being visited as a containing type?\n                    AddTypeParameterConstraints(symbol.TypeArguments);\n                }\n            }\n            else\n            {\n                AddDelegateParameters(symbol);\n            } 308619"];
6351 [label="AddDelegateParameters(symbol); 308620"];
6352 [label="AddDelegateParameters(symbol) 308621"];
6353 [label="param AddDelegateParameters(INamedTypeSymbol symbol) 308622"];
6354 [label="param AddDelegateParameters(this) 308623"];
6355 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndParameters ||\n                    format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var method = symbol.DelegateInvokeMethod;\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    AddParametersIfRequired(hasThisParameter: false, isVarargs: method.IsVararg, parameters: method.Parameters);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n            } 308624"];
6356 [label="CanShowDelegateSignature(symbol) 308625"];
6357 [label="param CanShowDelegateSignature(INamedTypeSymbol symbol) 308626"];
6358 [label="param CanShowDelegateSignature(this) 308627"];
6359 [label="return\n                isFirstSymbolVisited &&\n                symbol.TypeKind == TypeKind.Delegate &&\n                format.DelegateStyle != SymbolDisplayDelegateStyle.NameOnly &&\n                symbol.DelegateInvokeMethod != null; 308628"];
6360 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndParameters ||\n                    format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var method = symbol.DelegateInvokeMethod;\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    AddParametersIfRequired(hasThisParameter: false, isVarargs: method.IsVararg, parameters: method.Parameters);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n            } 308629"];
6361 [label="AddDelegateParameters(symbol); 308630"];
6362 [label=".OriginalDefinition 308631"];
6363 [label="get\n            {\n                return this;\n            } 308632"];
6364 [label="if (underlyingTypeSymbol?.OriginalDefinition is MissingMetadataTypeSymbol &&\n                format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.FlagMissingMetadataTypes))\n            {\n                //add it as punctuation - it's just for testing\n                AddPunctuation(SyntaxKind.OpenBracketToken);\n                builder.Add(CreatePart(InternalSymbolDisplayPartKind.Other, symbol, 'missing'));\n                AddPunctuation(SyntaxKind.CloseBracketToken);\n            } 308633"];
6365 [label="AddNameAndTypeArgumentsOrParameters(symbol); 308634"];
6366 [label="VisitNamedTypeWithoutNullability(symbol); 308635"];
6367 [label="AddNullableAnnotations(symbol); 308636"];
6368 [label="AddNullableAnnotations(symbol) 308637"];
6369 [label="param AddNullableAnnotations(ITypeSymbol type) 308638"];
6370 [label="param AddNullableAnnotations(this) 308639"];
6371 [label="if (ShouldAddNullableAnnotation(type))\n            {\n                AddPunctuation(type.NullableAnnotation == CodeAnalysis.NullableAnnotation.Annotated ? SyntaxKind.QuestionToken : SyntaxKind.ExclamationToken);\n            } 308640"];
6372 [label="ShouldAddNullableAnnotation(type) 308641"];
6373 [label="param ShouldAddNullableAnnotation(ITypeSymbol type) 308642"];
6374 [label="param ShouldAddNullableAnnotation(this) 308643"];
6375 [label="type.NullableAnnotation 308644"];
6376 [label="=> NullableAnnotation 308645"];
6377 [label="NullableAnnotation 308646"];
6378 [label="switch (type.NullableAnnotation)\n            {\n                case CodeAnalysis.NullableAnnotation.Annotated:\n                    if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) &&\n                        !ITypeSymbolHelpers.IsNullableType(type) && !type.IsValueType)\n                    {\n                        return true;\n                    }\n                    break;\n\n                // LAFHIS\n                case CodeAnalysis.NullableAnnotation.NotAnnotated:\n                    if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) &&\n                        !type.IsValueType &&\n                        ((type is not Symbols.PublicModel.TypeSymbol) ||\n                        ((Symbols.PublicModel.TypeSymbol)type).UnderlyingTypeSymbol.IsTypeParameterDisallowingAnnotationInCSharp8() != true))\n                    {\n                        return true;\n                    }\n                    break;\n            } 308647"];
6379 [label="return false; 308648"];
6380 [label="if (ShouldAddNullableAnnotation(type))\n            {\n                AddPunctuation(type.NullableAnnotation == CodeAnalysis.NullableAnnotation.Annotated ? SyntaxKind.QuestionToken : SyntaxKind.ExclamationToken);\n            } 308649"];
6381 [label="AddNullableAnnotations(symbol); 308650"];
6382 [label="visitor.VisitNamedType(this); 308651"];
6383 [label="Accept(visitor); 308652"];
6384 [label="param AddPunctuation(SyntaxKind punctuationKind) 308653"];
6385 [label="param AddPunctuation(this) 308654"];
6386 [label="builder.Add(CreatePart(SymbolDisplayPartKind.Punctuation, null, SyntaxFacts.GetText(punctuationKind))); 308655"];
6387 [label="builder.Add(CreatePart(SymbolDisplayPartKind.Punctuation, null, SyntaxFacts.GetText(punctuationKind))); 308656"];
6388 [label="builder.Add(CreatePart(SymbolDisplayPartKind.Punctuation, null, SyntaxFacts.GetText(punctuationKind))); 308657"];
6389 [label="CreatePart(SymbolDisplayPartKind.Punctuation, null, SyntaxFacts.GetText(punctuationKind)) 308658"];
6390 [label="param CreatePart(SymbolDisplayPartKind kind) 308659"];
6391 [label="param CreatePart(ISymbol symbol) 308660"];
6392 [label="param CreatePart(string text) 308661"];
6393 [label="param CreatePart(this) 308662"];
6394 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 308663"];
6395 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 308664"];
6396 [label="(text == null) 308665"];
6397 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 308666"];
6398 [label="IsEscapable(kind) 308667"];
6399 [label="param IsEscapable(SymbolDisplayPartKind kind) 308668"];
6400 [label="switch (kind)\n            {\n                case SymbolDisplayPartKind.AliasName:\n                case SymbolDisplayPartKind.ClassName:\n                case SymbolDisplayPartKind.RecordClassName:\n                case SymbolDisplayPartKind.StructName:\n                case SymbolDisplayPartKind.InterfaceName:\n                case SymbolDisplayPartKind.EnumName:\n                case SymbolDisplayPartKind.DelegateName:\n                case SymbolDisplayPartKind.TypeParameterName:\n                case SymbolDisplayPartKind.MethodName:\n                case SymbolDisplayPartKind.PropertyName:\n                case SymbolDisplayPartKind.FieldName:\n                case SymbolDisplayPartKind.LocalName:\n                case SymbolDisplayPartKind.NamespaceName:\n                case SymbolDisplayPartKind.ParameterName:\n                    return true;\n                default:\n                    return false;\n            } 308669"];
6401 [label="return false; 308670"];
6402 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 308671"];
6403 [label="return new SymbolDisplayPart(kind, symbol, text); 308672"];
6404 [label="return new SymbolDisplayPart(kind, symbol, text); 308673"];
6405 [label="=> UnderlyingSymbol.Name 308674"];
6406 [label="UnderlyingSymbol 308675"];
6407 [label="=> _underlying 308676"];
6408 [label="UnderlyingSymbol.Name 308677"];
6409 [label="this.IsStatic 308678"];
6410 [label="return (this.DeclarationModifiers & DeclarationModifiers.Static) != 0; 308679"];
6411 [label="param GetPartKindForConstructorOrDestructor(IMethodSymbol symbol) 308680"];
6412 [label="symbol.ContainingType 308681"];
6413 [label="get\n            {\n                return UnderlyingSymbol.ContainingType.GetPublicSymbol();\n            } 308682"];
6414 [label="UnderlyingSymbol 308683"];
6415 [label="=> _underlying 308684"];
6416 [label="_underlying 308685"];
6417 [label="UnderlyingSymbol.ContainingType 308686"];
6418 [label="UnderlyingSymbol.ContainingType.GetPublicSymbol() 308687"];
6419 [label="symbol.GetPublicSymbol<INamedTypeSymbol>() 308688"];
6420 [label=".ISymbol 308689"];
6421 [label="if (symbol.ContainingType is null)\n            {\n                return SymbolDisplayPartKind.MethodName;\n            } 308690"];
6422 [label="symbol.ContainingType 308691"];
6423 [label="get\n            {\n                return UnderlyingSymbol.ContainingType.GetPublicSymbol();\n            } 308692"];
6424 [label="UnderlyingSymbol 308693"];
6425 [label="=> _underlying 308694"];
6426 [label="_underlying 308695"];
6427 [label="UnderlyingSymbol.ContainingType 308696"];
6428 [label="UnderlyingSymbol.ContainingType.GetPublicSymbol() 308697"];
6429 [label="symbol.GetPublicSymbol<INamedTypeSymbol>() 308698"];
6430 [label=".ISymbol 308699"];
6431 [label="return GetPartKind(symbol.ContainingType); 308700"];
6432 [label="GetPartKind(symbol.ContainingType) 308701"];
6433 [label="param GetPartKind(INamedTypeSymbol symbol) 308702"];
6434 [label="symbol.TypeKind 308703"];
6435 [label="get\n            {\n                return UnderlyingTypeSymbol.TypeKind;\n            } 308704"];
6436 [label="UnderlyingTypeSymbol 308705"];
6437 [label="=> _underlying 308706"];
6438 [label="return UnderlyingTypeSymbol.TypeKind; 308707"];
6439 [label="UnderlyingTypeSymbol.TypeKind 308708"];
6440 [label="get\n            {\n                return _flags.TypeKind;\n            } 308709"];
6441 [label="_flags.TypeKind 308710"];
6442 [label="symbol.IsRecord 308711"];
6443 [label="UnderlyingTypeSymbol 308712"];
6444 [label="UnderlyingTypeSymbol.IsRecord 308713"];
6445 [label="return this.declaration.Declarations[0].Kind == DeclarationKind.Record; 308714"];
6446 [label="param CreatePart(SymbolDisplayPartKind kind) 308715"];
6447 [label="param CreatePart(ISymbol symbol) 308716"];
6448 [label="param CreatePart(string text) 308717"];
6449 [label="param CreatePart(this) 308718"];
6450 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 308719"];
6451 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 308720"];
6452 [label="(text == null) 308721"];
6453 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 308722"];
6454 [label="IsEscapable(kind) 308723"];
6455 [label="param IsEscapable(SymbolDisplayPartKind kind) 308724"];
6456 [label="switch (kind)\n            {\n                case SymbolDisplayPartKind.AliasName:\n                case SymbolDisplayPartKind.ClassName:\n                case SymbolDisplayPartKind.RecordClassName:\n                case SymbolDisplayPartKind.StructName:\n                case SymbolDisplayPartKind.InterfaceName:\n                case SymbolDisplayPartKind.EnumName:\n                case SymbolDisplayPartKind.DelegateName:\n                case SymbolDisplayPartKind.TypeParameterName:\n                case SymbolDisplayPartKind.MethodName:\n                case SymbolDisplayPartKind.PropertyName:\n                case SymbolDisplayPartKind.FieldName:\n                case SymbolDisplayPartKind.LocalName:\n                case SymbolDisplayPartKind.NamespaceName:\n                case SymbolDisplayPartKind.ParameterName:\n                    return true;\n                default:\n                    return false;\n            } 308725"];
6457 [label="return true; 308726"];
6458 [label="return new SymbolDisplayPart(kind, symbol, text); 308727"];
6459 [label="return new SymbolDisplayPart(kind, symbol, text); 308728"];
6460 [label="param AddTypeArguments(ISymbol owner) 308729"];
6461 [label="param AddTypeArguments(ImmutableArray<ImmutableArray<CustomModifier>> modifiers) 308730"];
6462 [label="param AddTypeArguments(this) 308731"];
6463 [label="ImmutableArray<ITypeSymbol> typeArguments; 308732"];
6464 [label="typeArguments 308733"];
6465 [label="owner.Kind 308734"];
6466 [label="=> UnderlyingSymbol.Kind 308735"];
6467 [label="UnderlyingSymbol 308736"];
6468 [label="=> _underlying 308737"];
6469 [label="_underlying 308738"];
6470 [label="UnderlyingSymbol.Kind 308739"];
6471 [label="get\n            {\n                return SymbolKind.Method;\n            } 308740"];
6472 [label="return SymbolKind.Method; 308741"];
6473 [label="if (owner.Kind == SymbolKind.Method)\n            {\n                typeArguments = ((IMethodSymbol)owner).TypeArguments;\n            }\n            else\n            {\n                typeArguments = ((INamedTypeSymbol)owner).TypeArguments;\n            } 308742"];
6474 [label="((IMethodSymbol)owner).TypeArguments 308743"];
6475 [label="get\n            {\n                if (_lazyTypeArguments.IsDefault)\n                {\n\n                    ImmutableInterlocked.InterlockedCompareExchange(ref _lazyTypeArguments, _underlying.TypeArgumentsWithAnnotations.GetPublicSymbols(), default);\n                }\n\n                return _lazyTypeArguments;\n            } 308744"];
6476 [label="if (_lazyTypeArguments.IsDefault)\n                {\n\n                    ImmutableInterlocked.InterlockedCompareExchange(ref _lazyTypeArguments, _underlying.TypeArgumentsWithAnnotations.GetPublicSymbols(), default);\n                } 308745"];
6477 [label="ImmutableInterlocked.InterlockedCompareExchange(ref _lazyTypeArguments, _underlying.TypeArgumentsWithAnnotations.GetPublicSymbols(), default); 308746"];
6478 [label="_underlying.TypeArgumentsWithAnnotations 308747"];
6479 [label="get\n            {\n                return GetTypeParametersAsTypeArguments();\n            } 308748"];
6480 [label="GetTypeParametersAsTypeArguments() 308749"];
6481 [label="param GetTypeParametersAsTypeArguments(this) 308750"];
6482 [label="TypeParameters 308751"];
6483 [label="get { return ImmutableArray<TypeParameterSymbol>.Empty; } 308752"];
6484 [label="return ImmutableArray<TypeParameterSymbol>.Empty; 308753"];
6485 [label="return TypeMap.TypeParametersAsTypeSymbolsWithAnnotations(TypeParameters); 308754"];
6486 [label="t => t.Type 308755"];
6487 [label="AsTypeSymbol = t => t.Type 308756"];
6488 [label="ReferenceEqualityComparer.Instance 308757"];
6489 [label="new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(ReferenceEqualityComparer.Instance) 308758"];
6490 [label="s_emptyDictionary =\n            new SmallDictionary<TypeParameterSymbol, TypeWithAnnotations>(ReferenceEqualityComparer.Instance) 308759"];
6491 [label="new TypeMap() 308760"];
6492 [label="param TypeMap(this) 308761"];
6493 [label="s_emptyDictionary 308762"];
6494 [label="param AbstractTypeParameterMap(SmallDictionary<TypeParameterSymbol, TypeWithAnnotations> mapping) 308763"];
6495 [label="param AbstractTypeParameterMap(this) 308764"];
6496 [label="param AbstractTypeMap(this) 308765"];
6497 [label="Mapping 308766"];
6498 [label="this.Mapping 308767"];
6499 [label="Debug.Assert(s_emptyDictionary.IsEmpty()); 308768"];
6500 [label="s_emptyTypeMap = new TypeMap() 308769"];
6501 [label="TypeMap.TypeParametersAsTypeSymbolsWithAnnotations(TypeParameters) 308770"];
6502 [label="param TypeParametersAsTypeSymbolsWithAnnotations(ImmutableArray<TypeParameterSymbol> typeParameters) 308771"];
6503 [label="return typeParameters.SelectAsArray(static (tp) => TypeWithAnnotations.Create(tp)); 308772"];
6504 [label="return typeParameters.SelectAsArray(static (tp) => TypeWithAnnotations.Create(tp)); 308773"];
6505 [label="return GetTypeParametersAsTypeArguments(); 308774"];
6506 [label="ImmutableInterlocked.InterlockedCompareExchange(ref _lazyTypeArguments, _underlying.TypeArgumentsWithAnnotations.GetPublicSymbols(), default); 308775"];
6507 [label="_underlying.TypeArgumentsWithAnnotations.GetPublicSymbols() 308776"];
6508 [label="param GetPublicSymbols(this ImmutableArray<TypeWithAnnotations> types) 308777"];
6509 [label="return types.SelectAsArray(t => t.GetPublicSymbol()); 308778"];
6510 [label="return types.SelectAsArray(t => t.GetPublicSymbol()); 308779"];
6511 [label="ImmutableInterlocked.InterlockedCompareExchange(ref _lazyTypeArguments, _underlying.TypeArgumentsWithAnnotations.GetPublicSymbols(), default); 308780"];
6512 [label="return _lazyTypeArguments; 308781"];
6513 [label="typeArguments = ((IMethodSymbol)owner).TypeArguments; 308782"];
6514 [label="if (typeArguments.Length > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                AddPunctuation(SyntaxKind.LessThanToken);\n\n                var first = true;\n                for (int i = 0; i < typeArguments.Length; i++)\n                {\n                    var typeArg = typeArguments[i];\n\n                    if (!first)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                        AddSpace();\n                    }\n                    first = false;\n\n                    AbstractSymbolDisplayVisitor visitor;\n\n                    if (typeArg.Kind == SymbolKind.TypeParameter)\n                    {\n                        var typeParam = (ITypeParameterSymbol)typeArg;\n\n                        AddTypeParameterVarianceIfRequired(typeParam);\n\n                        visitor = this.NotFirstVisitor;\n                    }\n                    else\n                    {\n                        visitor = this.NotFirstVisitorNamespaceOrType;\n                    }\n\n                    typeArg.Accept(visitor);\n\n                    if (!modifiers.IsDefault)\n                    {\n                        AddCustomModifiersIfRequired(modifiers[i], leadingSpace: true, trailingSpace: false);\n                    }\n                }\n\n                AddPunctuation(SyntaxKind.GreaterThanToken);\n            } 308783"];
6515 [label="if (typeArguments.Length > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                AddPunctuation(SyntaxKind.LessThanToken);\n\n                var first = true;\n                for (int i = 0; i < typeArguments.Length; i++)\n                {\n                    var typeArg = typeArguments[i];\n\n                    if (!first)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                        AddSpace();\n                    }\n                    first = false;\n\n                    AbstractSymbolDisplayVisitor visitor;\n\n                    if (typeArg.Kind == SymbolKind.TypeParameter)\n                    {\n                        var typeParam = (ITypeParameterSymbol)typeArg;\n\n                        AddTypeParameterVarianceIfRequired(typeParam);\n\n                        visitor = this.NotFirstVisitor;\n                    }\n                    else\n                    {\n                        visitor = this.NotFirstVisitorNamespaceOrType;\n                    }\n\n                    typeArg.Accept(visitor);\n\n                    if (!modifiers.IsDefault)\n                    {\n                        AddCustomModifiersIfRequired(modifiers[i], leadingSpace: true, trailingSpace: false);\n                    }\n                }\n\n                AddPunctuation(SyntaxKind.GreaterThanToken);\n            } 308784"];
6516 [label="param AddParameters(IMethodSymbol symbol) 308785"];
6517 [label="param AddParameters(this) 308786"];
6518 [label="if (format.MemberOptions.IncludesOption(SymbolDisplayMemberOptions.IncludeParameters))\n            {\n                AddPunctuation(SyntaxKind.OpenParenToken);\n                AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters);\n                AddPunctuation(SyntaxKind.CloseParenToken);\n            } 308787"];
6519 [label="if (format.MemberOptions.IncludesOption(SymbolDisplayMemberOptions.IncludeParameters))\n            {\n                AddPunctuation(SyntaxKind.OpenParenToken);\n                AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters);\n                AddPunctuation(SyntaxKind.CloseParenToken);\n            } 308788"];
6520 [label="AddPunctuation(SyntaxKind.OpenParenToken); 308789"];
6521 [label="AddPunctuation(SyntaxKind.OpenParenToken) 308790"];
6522 [label="param AddPunctuation(SyntaxKind punctuationKind) 308791"];
6523 [label="AddPunctuation(SyntaxKind.OpenParenToken); 308792"];
6524 [label="symbol.IsExtensionMethod 308793"];
6525 [label="=> _underlying.IsExtensionMethod 308794"];
6526 [label="get\n            {\n                return this.flags.IsExtensionMethod;\n            } 308795"];
6527 [label="AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters); 308796"];
6528 [label="symbol.IsVararg 308797"];
6529 [label="=> _underlying.IsVararg 308798"];
6530 [label="_underlying.IsVararg 308799"];
6531 [label="get\n            {\n                LazyMethodChecks();\n                return _lazyIsVararg;\n            } 308800"];
6532 [label="LazyMethodChecks() 308801"];
6533 [label="param LazyMethodChecks(this) 308802"];
6534 [label="if (!state.HasComplete(CompletionPart.FinishMethodChecks))\n            {\n                // TODO: if this lock ever encloses a potential call to Debugger.NotifyOfCrossThreadDependency,\n                // then we should call DebuggerUtilities.CallBeforeAcquiringLock() (see method comment for more\n                // details).\n\n                object lockObject = MethodChecksLockObject;\n                Debug.Assert(lockObject != null);\n                lock (lockObject)\n                {\n                    if (state.NotePartComplete(CompletionPart.StartMethodChecks))\n                    {\n                        // By setting StartMethodChecks, we've committed to doing the checks and setting\n                        // FinishMethodChecks.  So there is no cancellation supported between one and the other.\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        try\n                        {\n                            MethodChecks(diagnostics);\n                            AddDeclarationDiagnostics(diagnostics);\n                        }\n                        finally\n                        {\n                            state.NotePartComplete(CompletionPart.FinishMethodChecks);\n                            diagnostics.Free();\n                        }\n                    }\n                    else\n                    {\n                        // Either (1) this thread is in the process of completing the method,\n                        // or (2) some other thread has beat us to the punch and completed the method.\n                        // We can distinguish the two cases here by checking for the FinishMethodChecks\n                        // part to be complete, which would only occur if another thread completed this\n                        // method.\n                        //\n                        // The other case, in which this thread is in the process of completing the method,\n                        // requires that we return here even though the checks are not complete.  That's because\n                        // methods are processed by first populating the return type and parameters by binding\n                        // the syntax from source.  Those values are visible to the same thread for the purpose\n                        // of computing which methods are implemented and overridden.  But then those values\n                        // may be rewritten (by the same thread) to copy down custom modifiers.  In order to\n                        // allow the same thread to see the return type and parameters from the syntax (though\n                        // they do not yet take on their final values), we return here.\n\n                        // Due to the fact that LazyMethodChecks is potentially reentrant, we must use a \n                        // reentrant lock to avoid deadlock and cannot assert that at this point method checks\n                        // have completed (state.HasComplete(CompletionPart.FinishMethodChecks)).\n                    }\n                }\n            } 308803"];
6535 [label="state.HasComplete(CompletionPart.FinishMethodChecks) 308804"];
6536 [label="param HasComplete(CompletionPart part) 308805"];
6537 [label="param HasComplete(this) 308806"];
6538 [label="return (_completeParts & (int)part) == (int)part; 308807"];
6539 [label="MethodChecksLockObject 308808"];
6540 [label="get { return this.syntaxReferenceOpt; } 308809"];
6541 [label="return this.syntaxReferenceOpt; 308810"];
6542 [label="object lockObject = MethodChecksLockObject; 308811"];
6543 [label="Debug.Assert(lockObject != null); 308812"];
6544 [label="Debug.Assert(lockObject != null); 308813"];
6545 [label="if (state.NotePartComplete(CompletionPart.StartMethodChecks))\n                    {\n                        // By setting StartMethodChecks, we've committed to doing the checks and setting\n                        // FinishMethodChecks.  So there is no cancellation supported between one and the other.\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        try\n                        {\n                            MethodChecks(diagnostics);\n                            AddDeclarationDiagnostics(diagnostics);\n                        }\n                        finally\n                        {\n                            state.NotePartComplete(CompletionPart.FinishMethodChecks);\n                            diagnostics.Free();\n                        }\n                    }\n                    else\n                    {\n                        // Either (1) this thread is in the process of completing the method,\n                        // or (2) some other thread has beat us to the punch and completed the method.\n                        // We can distinguish the two cases here by checking for the FinishMethodChecks\n                        // part to be complete, which would only occur if another thread completed this\n                        // method.\n                        //\n                        // The other case, in which this thread is in the process of completing the method,\n                        // requires that we return here even though the checks are not complete.  That's because\n                        // methods are processed by first populating the return type and parameters by binding\n                        // the syntax from source.  Those values are visible to the same thread for the purpose\n                        // of computing which methods are implemented and overridden.  But then those values\n                        // may be rewritten (by the same thread) to copy down custom modifiers.  In order to\n                        // allow the same thread to see the return type and parameters from the syntax (though\n                        // they do not yet take on their final values), we return here.\n\n                        // Due to the fact that LazyMethodChecks is potentially reentrant, we must use a \n                        // reentrant lock to avoid deadlock and cannot assert that at this point method checks\n                        // have completed (state.HasComplete(CompletionPart.FinishMethodChecks)).\n                    } 308814"];
6546 [label="state.NotePartComplete(CompletionPart.StartMethodChecks) 308815"];
6547 [label="param NotePartComplete(CompletionPart part) 308816"];
6548 [label="var diagnostics = DiagnosticBag.GetInstance(); 308817"];
6549 [label="MethodChecks(diagnostics); 308818"];
6550 [label="MethodChecks(diagnostics) 308819"];
6551 [label="param MethodChecks(DiagnosticBag diagnostics) 308820"];
6552 [label="param MethodChecks(this) 308821"];
6553 [label="var syntax = (CSharpSyntaxNode)syntaxReferenceOpt.GetSyntax(); 308822"];
6554 [label="var syntax = (CSharpSyntaxNode)syntaxReferenceOpt.GetSyntax(); 308823"];
6555 [label="this.DeclaringCompilation 308824"];
6556 [label="get\n            {\n                switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                }\n\n                var sourceModuleSymbol = this.ContainingModule as SourceModuleSymbol;\n                return (object)sourceModuleSymbol == null ? null : sourceModuleSymbol.DeclaringCompilation;\n            } 308825"];
6557 [label="this.Kind 308826"];
6558 [label="get\n            {\n                return SymbolKind.Method;\n            } 308827"];
6559 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 308828"];
6560 [label="return _containingType; 308829"];
6561 [label="var binderFactory = this.DeclaringCompilation.GetBinderFactory(syntax.SyntaxTree); 308830"];
6562 [label="var binderFactory = this.DeclaringCompilation.GetBinderFactory(syntax.SyntaxTree); 308831"];
6563 [label="var binderFactory = this.DeclaringCompilation.GetBinderFactory(syntax.SyntaxTree); 308832"];
6564 [label="this.DeclaringCompilation.GetBinderFactory(syntax.SyntaxTree) 308833"];
6565 [label="param GetBinderFactory(SyntaxTree syntaxTree) 308834"];
6566 [label="param GetBinderFactory(bool ignoreAccessibility = false) 308835"];
6567 [label="param GetBinderFactory(this) 308836"];
6568 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 308837"];
6569 [label="BinderFactory? previousFactory; 308838"];
6570 [label="var previousWeakReference = binderFactories[treeNum]; 308839"];
6571 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 308840"];
6572 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 308841"];
6573 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 308842"];
6574 [label="if (previousWeakReference != null && previousWeakReference.TryGetTarget(out previousFactory))\n            {\n                return previousFactory;\n            } 308843"];
6575 [label="return previousFactory; 308844"];
6576 [label="GetParameterList() 308845"];
6577 [label="param GetParameterList(this) 308846"];
6578 [label="Debug.Assert(syntaxReferenceOpt != null); 308847"];
6579 [label="Debug.Assert(syntaxReferenceOpt != null); 308848"];
6580 [label="return (ConstructorDeclarationSyntax)syntaxReferenceOpt.GetSyntax(); 308849"];
6581 [label="return GetSyntax().ParameterList; 308850"];
6582 [label="ParameterListSyntax parameterList = GetParameterList(); 308851"];
6583 [label="var bodyBinder = binderFactory.GetBinder(parameterList, syntax, this).WithContainingMemberOrLambda(this); 308852"];
6584 [label="var bodyBinder = binderFactory.GetBinder(parameterList, syntax, this).WithContainingMemberOrLambda(this); 308853"];
6585 [label="var bodyBinder = binderFactory.GetBinder(parameterList, syntax, this).WithContainingMemberOrLambda(this); 308854"];
6586 [label="binderFactory.GetBinder(parameterList, syntax, this) 308855"];
6587 [label="param GetBinder(SyntaxNode node) 308856"];
6588 [label="param GetBinder(CSharpSyntaxNode memberDeclarationOpt = null) 308857"];
6589 [label="param GetBinder(Symbol memberOpt = null) 308858"];
6590 [label="param GetBinder(this) 308859"];
6591 [label="return _syntaxTree.Options.Kind == SourceCodeKind.Script; 308860"];
6592 [label="if ((!InScript || node.Kind() != SyntaxKind.CompilationUnit) && node.Parent != null)\n            {\n                node = node.Parent;\n            } 308861"];
6593 [label="Debug.Assert(node != null); 308862"];
6594 [label="Debug.Assert(node != null); 308863"];
6595 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 308864"];
6596 [label="ContainingSymbol 308865"];
6597 [label="get\n            {\n                return _containingType;\n            } 308866"];
6598 [label="return _containingType; 308867"];
6599 [label="if (memberOpt is { ContainingSymbol: SourceMemberContainerTypeSymbol container })\n            {\n                container.AssertMemberExposure(memberOpt);\n            } 308868"];
6600 [label="container.AssertMemberExposure(memberOpt); 308869"];
6601 [label="container.AssertMemberExposure(memberOpt); 308870"];
6602 [label="container.AssertMemberExposure(memberOpt) 308871"];
6603 [label="param AssertMemberExposure(Symbol member) 308872"];
6604 [label="param AssertMemberExposure(bool forDiagnostics = false) 308873"];
6605 [label="param AssertMemberExposure(this) 308874"];
6606 [label="if (member is NamedTypeSymbol type)\n            {\n                Debug.Assert(forDiagnostics);\n                // Lafhis\n                var temp = Volatile.Read(ref _lazyTypeMembers);\n                Debug.Assert(temp != null ? temp.Values.Any(types => types.Contains(t => t == (object)type)) == true : false);\n                return;\n            }\n            else if (member is TypeParameterSymbol || member is SynthesizedMethodBaseSymbol)\n            {\n                Debug.Assert(forDiagnostics);\n                return;\n            }\n            else if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 308875"];
6607 [label="if (member is TypeParameterSymbol || member is SynthesizedMethodBaseSymbol)\n            {\n                Debug.Assert(forDiagnostics);\n                return;\n            }\n            else if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 308876"];
6608 [label="if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 308877"];
6609 [label="var declared = Volatile.Read(ref _lazyDeclaredMembersAndInitializers); 308878"];
6610 [label="var temp2 = Volatile.Read(ref _lazyMembersAndInitializers); 308879"];
6611 [label="Debug.Assert(declared != DeclaredMembersAndInitializers.UninitializedSentinel); 308880"];
6612 [label="if ((declared is object && (declared.NonTypeMembers.Contains(m => m == (object)member) || declared.RecordPrimaryConstructor == (object)member)) ||\n                (temp2 != null ? temp2.NonTypeMembers.Contains(m => m == (object)member) == true : false))\n            {\n                return;\n            } 308881"];
6613 [label="if ((declared is object && (declared.NonTypeMembers.Contains(m => m == (object)member) || declared.RecordPrimaryConstructor == (object)member)) ||\n                (temp2 != null ? temp2.NonTypeMembers.Contains(m => m == (object)member) == true : false))\n            {\n                return;\n            } 308882"];
6614 [label="if ((declared is object && (declared.NonTypeMembers.Contains(m => m == (object)member) || declared.RecordPrimaryConstructor == (object)member)) ||\n                (temp2 != null ? temp2.NonTypeMembers.Contains(m => m == (object)member) == true : false))\n            {\n                return;\n            } 308883"];
6615 [label="temp2 != null 308884"];
6616 [label="if ((declared is object && (declared.NonTypeMembers.Contains(m => m == (object)member) || declared.RecordPrimaryConstructor == (object)member)) ||\n                (temp2 != null ? temp2.NonTypeMembers.Contains(m => m == (object)member) == true : false))\n            {\n                return;\n            } 308885"];
6617 [label="return; 308886"];
6618 [label="BinderFactoryVisitor visitor = _binderFactoryVisitorPool.Allocate(); 308887"];
6619 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 308888"];
6620 [label="memberDeclarationOpt == null 308889"];
6621 [label="param ==(Symbol left) 308890"];
6622 [label="param ==(Symbol right) 308891"];
6623 [label="if (right is null)\n            {\n                return left is null;\n            } 308892"];
6624 [label="return left is null; 308893"];
6625 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 308894"];
6626 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 308895"];
6627 [label="_position 308896"];
6628 [label="param VisitConstructorDeclaration(ConstructorDeclarationSyntax parent) 308897"];
6629 [label="param VisitConstructorDeclaration(this) 308898"];
6630 [label="if (!LookupPosition.IsInMethodDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 308899"];
6631 [label="if (!LookupPosition.IsInMethodDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 308900"];
6632 [label="if (!LookupPosition.IsInMethodDeclaration(_position, parent))\n                {\n                    return VisitCore(parent.Parent);\n                } 308901"];
6633 [label="bool inBodyOrInitializer = LookupPosition.IsInConstructorParameterScope(_position, parent); 308902"];
6634 [label="bool inBodyOrInitializer = LookupPosition.IsInConstructorParameterScope(_position, parent); 308903"];
6635 [label="inBodyOrInitializer 308904"];
6636 [label="var extraInfo = inBodyOrInitializer ? NodeUsage.ConstructorBodyOrInitializer : NodeUsage.Normal; 308905"];
6637 [label="var key = CreateBinderCacheKey(parent, extraInfo); 308906"];
6638 [label="var key = CreateBinderCacheKey(parent, extraInfo); 308907"];
6639 [label="CreateBinderCacheKey(parent, extraInfo) 308908"];
6640 [label="param CreateBinderCacheKey(CSharpSyntaxNode node) 308909"];
6641 [label="param CreateBinderCacheKey(NodeUsage usage) 308910"];
6642 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 308911"];
6643 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 308912"];
6644 [label="var key = CreateBinderCacheKey(parent, extraInfo); 308913"];
6645 [label="Binder resultBinder; 308914"];
6646 [label="binderCache 308915"];
6647 [label="get\n                {\n                    return _factory._binderCache;\n                } 308916"];
6648 [label="return _factory._binderCache; 308917"];
6649 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    resultBinder = VisitCore(parent.Parent);\n\n                    // NOTE: Don't get the method symbol unless we're sure we need it.\n                    if (inBodyOrInitializer)\n                    {\n                        var method = GetMethodSymbol(parent, resultBinder);\n                        if ((object)method != null)\n                        {\n                            // Ctors cannot be generic\n                            //TODO: the error should be given in a different place, but should we ignore or consider the type args?\n                            Debug.Assert(method.Arity == 0, 'Generic Ctor, What to do?');\n\n                            resultBinder = new InMethodBinder(method, resultBinder);\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 308918"];
6650 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    resultBinder = VisitCore(parent.Parent);\n\n                    // NOTE: Don't get the method symbol unless we're sure we need it.\n                    if (inBodyOrInitializer)\n                    {\n                        var method = GetMethodSymbol(parent, resultBinder);\n                        if ((object)method != null)\n                        {\n                            // Ctors cannot be generic\n                            //TODO: the error should be given in a different place, but should we ignore or consider the type args?\n                            Debug.Assert(method.Arity == 0, 'Generic Ctor, What to do?');\n\n                            resultBinder = new InMethodBinder(method, resultBinder);\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 308919"];
6651 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    resultBinder = VisitCore(parent.Parent);\n\n                    // NOTE: Don't get the method symbol unless we're sure we need it.\n                    if (inBodyOrInitializer)\n                    {\n                        var method = GetMethodSymbol(parent, resultBinder);\n                        if ((object)method != null)\n                        {\n                            // Ctors cannot be generic\n                            //TODO: the error should be given in a different place, but should we ignore or consider the type args?\n                            Debug.Assert(method.Arity == 0, 'Generic Ctor, What to do?');\n\n                            resultBinder = new InMethodBinder(method, resultBinder);\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 308920"];
6652 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    resultBinder = VisitCore(parent.Parent);\n\n                    // NOTE: Don't get the method symbol unless we're sure we need it.\n                    if (inBodyOrInitializer)\n                    {\n                        var method = GetMethodSymbol(parent, resultBinder);\n                        if ((object)method != null)\n                        {\n                            // Ctors cannot be generic\n                            //TODO: the error should be given in a different place, but should we ignore or consider the type args?\n                            Debug.Assert(method.Arity == 0, 'Generic Ctor, What to do?');\n\n                            resultBinder = new InMethodBinder(method, resultBinder);\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 308921"];
6653 [label="if (!binderCache.TryGetValue(key, out resultBinder))\n                {\n                    resultBinder = VisitCore(parent.Parent);\n\n                    // NOTE: Don't get the method symbol unless we're sure we need it.\n                    if (inBodyOrInitializer)\n                    {\n                        var method = GetMethodSymbol(parent, resultBinder);\n                        if ((object)method != null)\n                        {\n                            // Ctors cannot be generic\n                            //TODO: the error should be given in a different place, but should we ignore or consider the type args?\n                            Debug.Assert(method.Arity == 0, 'Generic Ctor, What to do?');\n\n                            resultBinder = new InMethodBinder(method, resultBinder);\n                        }\n                    }\n\n                    resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers);\n\n                    binderCache.TryAdd(key, resultBinder);\n                } 308922"];
6654 [label="resultBinder = VisitCore(parent.Parent); 308923"];
6655 [label="VisitCore(parent.Parent) 308924"];
6656 [label="param VisitCore(SyntaxNode node) 308925"];
6657 [label="NodeUsage extraInfo = NodeUsage.Normal; 308926"];
6658 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 308927"];
6659 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 308928"];
6660 [label="param Equals(BinderCacheKey other) 308929"];
6661 [label="param Equals(this) 308930"];
6662 [label="return syntaxNode == other.syntaxNode && this.usage == other.usage; 308931"];
6663 [label="if (inBodyOrInitializer)\n                    {\n                        var method = GetMethodSymbol(parent, resultBinder);\n                        if ((object)method != null)\n                        {\n                            // Ctors cannot be generic\n                            //TODO: the error should be given in a different place, but should we ignore or consider the type args?\n                            Debug.Assert(method.Arity == 0, 'Generic Ctor, What to do?');\n\n                            resultBinder = new InMethodBinder(method, resultBinder);\n                        }\n                    } 308932"];
6664 [label="resultBinder = resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers); 308933"];
6665 [label="resultBinder.WithUnsafeRegionIfNecessary(parent.Modifiers) 308934"];
6666 [label="param WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) 308935"];
6667 [label="param WithUnsafeRegionIfNecessary(this) 308936"];
6668 [label="binderCache 308937"];
6669 [label="return _factory._binderCache; 308938"];
6670 [label="binderCache.TryAdd(key, resultBinder); 308939"];
6671 [label="binderCache.TryAdd(key, resultBinder); 308940"];
6672 [label="binderCache.TryAdd(key, resultBinder); 308941"];
6673 [label="binderCache.TryAdd(key, resultBinder); 308942"];
6674 [label="return resultBinder; 308943"];
6675 [label="return ((CSharpSyntaxNode)node).Accept(this); 308944"];
6676 [label="return result; 308945"];
6677 [label="binderFactory.GetBinder(parameterList, syntax, this).WithContainingMemberOrLambda(this) 308946"];
6678 [label="param WithContainingMemberOrLambda(Symbol containing) 308947"];
6679 [label="param WithContainingMemberOrLambda(this) 308948"];
6680 [label="Debug.Assert((object)containing != null); 308949"];
6681 [label="Debug.Assert((object)containing != null); 308950"];
6682 [label="return new BinderWithContainingMemberOrLambda(this, containing); 308951"];
6683 [label="return new BinderWithContainingMemberOrLambda(this, containing); 308952"];
6684 [label="return new BinderWithContainingMemberOrLambda(this, containing); 308953"];
6685 [label="new BinderWithContainingMemberOrLambda(this, containing) 308954"];
6686 [label="param BinderWithContainingMemberOrLambda(Binder next) 308955"];
6687 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 308956"];
6688 [label="param BinderWithContainingMemberOrLambda(this) 308957"];
6689 [label="next 308958"];
6690 [label="param BinderWithContainingMemberOrLambda(this) 308959"];
6691 [label="param Binder(Binder next) 308960"];
6692 [label="RoslynDebug.Assert(next != null); 308961"];
6693 [label="RoslynDebug.Assert(next != null); 308962"];
6694 [label="_containingMemberOrLambda 308963"];
6695 [label="Debug.Assert(containingMemberOrLambda != null); 308964"];
6696 [label="containingMemberOrLambda != null 308965"];
6697 [label="param !=(Symbol left) 308966"];
6698 [label="param !=(Symbol right) 308967"];
6699 [label="if (right is null)\n            {\n                return left is object;\n            } 308968"];
6700 [label="return left is object; 308969"];
6701 [label="Debug.Assert(containingMemberOrLambda != null); 308970"];
6702 [label="_containingMemberOrLambda 308971"];
6703 [label="var bodyBinder = binderFactory.GetBinder(parameterList, syntax, this).WithContainingMemberOrLambda(this); 308972"];
6704 [label="var signatureBinder = bodyBinder.WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags.SuppressConstraintChecks, this); 308973"];
6705 [label="var signatureBinder = bodyBinder.WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags.SuppressConstraintChecks, this); 308974"];
6706 [label="bodyBinder.WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags.SuppressConstraintChecks, this) 308975"];
6707 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags flags) 308976"];
6708 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(Symbol containing) 308977"];
6709 [label="param WithAdditionalFlagsAndContainingMemberOrLambda(this) 308978"];
6710 [label="Debug.Assert((object)containing != null); 308979"];
6711 [label="Debug.Assert((object)containing != null); 308980"];
6712 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 308981"];
6713 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 308982"];
6714 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 308983"];
6715 [label="return new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing); 308984"];
6716 [label="new BinderWithContainingMemberOrLambda(this, this.Flags | flags, containing) 308985"];
6717 [label="param BinderWithContainingMemberOrLambda(Binder next) 308986"];
6718 [label="param BinderWithContainingMemberOrLambda(BinderFlags flags) 308987"];
6719 [label="param BinderWithContainingMemberOrLambda(Symbol containingMemberOrLambda) 308988"];
6720 [label="param BinderWithContainingMemberOrLambda(this) 308989"];
6721 [label="next 308990"];
6722 [label="flags 308991"];
6723 [label="param BinderWithContainingMemberOrLambda(this) 308992"];
6724 [label="param Binder(Binder next) 308993"];
6725 [label="param Binder(BinderFlags flags) 308994"];
6726 [label="param Binder(this) 308995"];
6727 [label="RoslynDebug.Assert(next != null); 308996"];
6728 [label="RoslynDebug.Assert(next != null); 308997"];
6729 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 308998"];
6730 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 308999"];
6731 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 309000"];
6732 [label="param Includes(this BinderFlags self) 309001"];
6733 [label="param Includes(BinderFlags other) 309002"];
6734 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 309003"];
6735 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 309004"];
6736 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 309005"];
6737 [label="param Includes(this BinderFlags self) 309006"];
6738 [label="param Includes(BinderFlags other) 309007"];
6739 [label="Next 309008"];
6740 [label="this.Flags 309009"];
6741 [label="this.Compilation 309010"];
6742 [label="_containingMemberOrLambda 309011"];
6743 [label="Debug.Assert(containingMemberOrLambda != null); 309012"];
6744 [label="containingMemberOrLambda != null 309013"];
6745 [label="param !=(Symbol left) 309014"];
6746 [label="param !=(Symbol right) 309015"];
6747 [label="if (right is null)\n            {\n                return left is object;\n            } 309016"];
6748 [label="return left is object; 309017"];
6749 [label="Debug.Assert(containingMemberOrLambda != null); 309018"];
6750 [label="_containingMemberOrLambda 309019"];
6751 [label="var signatureBinder = bodyBinder.WithAdditionalFlagsAndContainingMemberOrLambda(BinderFlags.SuppressConstraintChecks, this); 309020"];
6752 [label="SyntaxToken arglistToken; 309021"];
6753 [label="arglistToken 309022"];
6754 [label="_lazyParameters = ParameterHelpers.MakeParameters(\n                signatureBinder, this, parameterList, out arglistToken,\n                allowRefOrOut: AllowRefOrOut,\n                allowThis: false,\n                addRefReadOnlyModifier: false,\n                diagnostics: diagnostics); 309023"];
6755 [label="_lazyParameters = ParameterHelpers.MakeParameters(\n                signatureBinder, this, parameterList, out arglistToken,\n                allowRefOrOut: AllowRefOrOut,\n                allowThis: false,\n                addRefReadOnlyModifier: false,\n                diagnostics: diagnostics); 309024"];
6756 [label="_lazyParameters = ParameterHelpers.MakeParameters(\n                signatureBinder, this, parameterList, out arglistToken,\n                allowRefOrOut: AllowRefOrOut,\n                allowThis: false,\n                addRefReadOnlyModifier: false,\n                diagnostics: diagnostics); 309025"];
6757 [label="_lazyParameters = ParameterHelpers.MakeParameters(\n                signatureBinder, this, parameterList, out arglistToken,\n                allowRefOrOut: AllowRefOrOut,\n                allowThis: false,\n                addRefReadOnlyModifier: false,\n                diagnostics: diagnostics); 309026"];
6758 [label="AllowRefOrOut 309027"];
6759 [label="get\n            {\n                return true;\n            } 309028"];
6760 [label="return true; 309029"];
6761 [label="_lazyParameters = ParameterHelpers.MakeParameters(\n                signatureBinder, this, parameterList, out arglistToken,\n                allowRefOrOut: AllowRefOrOut,\n                allowThis: false,\n                addRefReadOnlyModifier: false,\n                diagnostics: diagnostics); 309030"];
6762 [label="_lazyParameters = ParameterHelpers.MakeParameters(\n                signatureBinder, this, parameterList, out arglistToken,\n                allowRefOrOut: AllowRefOrOut,\n                allowThis: false,\n                addRefReadOnlyModifier: false,\n                diagnostics: diagnostics); 309031"];
6763 [label="_lazyParameters = ParameterHelpers.MakeParameters(\n                signatureBinder, this, parameterList, out arglistToken,\n                allowRefOrOut: AllowRefOrOut,\n                allowThis: false,\n                addRefReadOnlyModifier: false,\n                diagnostics: diagnostics); 309032"];
6764 [label="ParameterHelpers.MakeParameters(\n                signatureBinder, this, parameterList, out arglistToken,\n                allowRefOrOut: AllowRefOrOut,\n                allowThis: false,\n                addRefReadOnlyModifier: false,\n                diagnostics: diagnostics) 309033"];
6765 [label="param MakeParameters(Binder binder) 309034"];
6766 [label="param MakeParameters(Symbol owner) 309035"];
6767 [label="param MakeParameters(BaseParameterListSyntax syntax) 309036"];
6768 [label="param MakeParameters(out SyntaxToken arglistToken) 309037"];
6769 [label="param MakeParameters(DiagnosticBag diagnostics) 309038"];
6770 [label="param MakeParameters(bool allowRefOrOut) 309039"];
6771 [label="param MakeParameters(bool allowThis) 309040"];
6772 [label="param MakeParameters(bool addRefReadOnlyModifier) 309041"];
6773 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309042"];
6774 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309043"];
6775 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309044"];
6776 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309045"];
6777 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309046"];
6778 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309047"];
6779 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309048"];
6780 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309049"];
6781 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309050"];
6782 [label="syntax.Parameters 309051"];
6783 [label="param MakeParameters(Binder binder) 309052"];
6784 [label="param MakeParameters(TOwningSymbol owner) 309053"];
6785 [label="param MakeParameters(SeparatedSyntaxList<TParameterSyntax> parametersList) 309054"];
6786 [label="param MakeParameters(out SyntaxToken arglistToken) 309055"];
6787 [label="param MakeParameters(DiagnosticBag diagnostics) 309056"];
6788 [label="param MakeParameters(bool allowRefOrOut) 309057"];
6789 [label="param MakeParameters(bool allowThis) 309058"];
6790 [label="param MakeParameters(bool addRefReadOnlyModifier) 309059"];
6791 [label="param MakeParameters(bool suppressUseSiteDiagnostics) 309060"];
6792 [label="param MakeParameters(int lastIndex) 309061"];
6793 [label="param MakeParameters(Func<Binder, TOwningSymbol, TypeWithAnnotations, TParameterSyntax, RefKind, int, SyntaxToken, SyntaxToken, bool, DiagnosticBag, TParameterSymbol> parameterCreationFunc) 309062"];
6794 [label="param MakeParameters(bool parsingFunctionPointer = false) 309063"];
6795 [label="Debug.Assert(!parsingFunctionPointer || owner is FunctionPointerMethodSymbol); 309064"];
6796 [label="arglistToken = default(SyntaxToken); 309065"];
6797 [label="int parameterIndex = 0; 309066"];
6798 [label="int firstDefault = -1; 309067"];
6799 [label="var builder = ArrayBuilder<TParameterSymbol>.GetInstance(); 309068"];
6800 [label="var mustBeLastParameter = (ParameterSyntax)null; 309069"];
6801 [label="foreach (var parameterSyntax in parametersList)\n            {\n                if (parameterIndex > lastIndex) break;\n\n                CheckParameterModifiers(parameterSyntax, diagnostics, parsingFunctionPointer);\n\n                var refKind = GetModifiers(parameterSyntax.Modifiers, out SyntaxToken refnessKeyword, out SyntaxToken paramsKeyword, out SyntaxToken thisKeyword);\n                if (thisKeyword.Kind() != SyntaxKind.None && !allowThis)\n                {\n                    diagnostics.Add(ErrorCode.ERR_ThisInBadContext, thisKeyword.GetLocation());\n                }\n\n                if (parameterSyntax is ParameterSyntax concreteParam)\n                {\n                    if (mustBeLastParameter == null &&\n                        (concreteParam.Modifiers.Any(SyntaxKind.ParamsKeyword) ||\n                         concreteParam.Identifier.Kind() == SyntaxKind.ArgListKeyword))\n                    {\n                        mustBeLastParameter = concreteParam;\n                    }\n\n                    if (concreteParam.IsArgList)\n                    {\n                        arglistToken = concreteParam.Identifier;\n                        // The native compiler produces 'Expected type' here, in the parser. Roslyn produces\n                        // the somewhat more informative 'arglist not valid' error.\n                        if (paramsKeyword.Kind() != SyntaxKind.None\n                            || refnessKeyword.Kind() != SyntaxKind.None\n                            || thisKeyword.Kind() != SyntaxKind.None)\n                        {\n                            // CS1669: __arglist is not valid in this context\n                            diagnostics.Add(ErrorCode.ERR_IllegalVarArgs, arglistToken.GetLocation());\n                        }\n\n                        continue;\n                    }\n\n                    if (concreteParam.Default != null && firstDefault == -1)\n                    {\n                        firstDefault = parameterIndex;\n                    }\n                }\n\n                Debug.Assert(parameterSyntax.Type != null);\n                var parameterType = binder.BindType(parameterSyntax.Type, diagnostics, suppressUseSiteDiagnostics: suppressUseSiteDiagnostics);\n\n                if (!allowRefOrOut && (refKind == RefKind.Ref || refKind == RefKind.Out))\n                {\n                    Debug.Assert(refnessKeyword.Kind() != SyntaxKind.None);\n\n                    // error CS0631: ref and out are not valid in this context\n                    diagnostics.Add(ErrorCode.ERR_IllegalRefParam, refnessKeyword.GetLocation());\n                }\n\n                TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics);\n\n                ReportParameterErrors(owner, parameterSyntax, parameter, thisKeyword, paramsKeyword, firstDefault, diagnostics);\n\n                builder.Add(parameter);\n                ++parameterIndex;\n            } 309070"];
6802 [label="if (mustBeLastParameter != null && mustBeLastParameter != parametersList[lastIndex])\n            {\n                diagnostics.Add(\n                    mustBeLastParameter.Identifier.Kind() == SyntaxKind.ArgListKeyword\n                        ? ErrorCode.ERR_VarargsLast\n                        : ErrorCode.ERR_ParamsLast,\n                    mustBeLastParameter.GetLocation());\n            } 309071"];
6803 [label="if (mustBeLastParameter != null && mustBeLastParameter != parametersList[lastIndex])\n            {\n                diagnostics.Add(\n                    mustBeLastParameter.Identifier.Kind() == SyntaxKind.ArgListKeyword\n                        ? ErrorCode.ERR_VarargsLast\n                        : ErrorCode.ERR_ParamsLast,\n                    mustBeLastParameter.GetLocation());\n            } 309072"];
6804 [label="ImmutableArray<TParameterSymbol> parameters = builder.ToImmutableAndFree(); 309073"];
6805 [label="if (!parsingFunctionPointer)\n            {\n                var methodOwner = owner as MethodSymbol;\n                var typeParameters = (object)methodOwner != null ?\n                    methodOwner.TypeParameters :\n                    default(ImmutableArray<TypeParameterSymbol>);\n\n                Debug.Assert(methodOwner?.MethodKind != MethodKind.LambdaMethod);\n                bool allowShadowingNames = binder.Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions) &&\n                    methodOwner?.MethodKind == MethodKind.LocalFunction;\n\n                binder.ValidateParameterNameConflicts(typeParameters, parameters.Cast<TParameterSymbol, ParameterSymbol>(), allowShadowingNames, diagnostics);\n            } 309074"];
6806 [label="var methodOwner = owner as MethodSymbol; 309075"];
6807 [label="var typeParameters = (object)methodOwner != null ?\n                    methodOwner.TypeParameters :\n                    default(ImmutableArray<TypeParameterSymbol>); 309076"];
6808 [label="var typeParameters = (object)methodOwner != null ?\n                    methodOwner.TypeParameters :\n                    default(ImmutableArray<TypeParameterSymbol>); 309077"];
6809 [label="(object)methodOwner != null 309078"];
6810 [label="methodOwner.TypeParameters 309079"];
6811 [label="get { return ImmutableArray<TypeParameterSymbol>.Empty; } 309080"];
6812 [label=".MethodKind 309081"];
6813 [label="get\n            {\n                return this.flags.MethodKind;\n            } 309082"];
6814 [label="Debug.Assert(methodOwner?.MethodKind != MethodKind.LambdaMethod); 309083"];
6815 [label="bool allowShadowingNames = binder.Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions) &&\n                    methodOwner?.MethodKind == MethodKind.LocalFunction; 309084"];
6816 [label="bool allowShadowingNames = binder.Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions) &&\n                    methodOwner?.MethodKind == MethodKind.LocalFunction; 309085"];
6817 [label="bool allowShadowingNames = binder.Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions) &&\n                    methodOwner?.MethodKind == MethodKind.LocalFunction; 309086"];
6818 [label=".MethodKind 309087"];
6819 [label="get\n            {\n                return this.flags.MethodKind;\n            } 309088"];
6820 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 309089"];
6821 [label="binder.ValidateParameterNameConflicts(typeParameters, parameters.Cast<TParameterSymbol, ParameterSymbol>(), allowShadowingNames, diagnostics); 309090"];
6822 [label="binder.ValidateParameterNameConflicts(typeParameters, parameters.Cast<TParameterSymbol, ParameterSymbol>(), allowShadowingNames, diagnostics); 309091"];
6823 [label="binder.ValidateParameterNameConflicts(typeParameters, parameters.Cast<TParameterSymbol, ParameterSymbol>(), allowShadowingNames, diagnostics); 309092"];
6824 [label="binder.ValidateParameterNameConflicts(typeParameters, parameters.Cast<TParameterSymbol, ParameterSymbol>(), allowShadowingNames, diagnostics); 309093"];
6825 [label="binder.ValidateParameterNameConflicts(typeParameters, parameters.Cast<TParameterSymbol, ParameterSymbol>(), allowShadowingNames, diagnostics) 309094"];
6826 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 309095"];
6827 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 309096"];
6828 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 309097"];
6829 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 309098"];
6830 [label="param ValidateParameterNameConflicts(this) 309099"];
6831 [label="PooledHashSet<string>? tpNames = null; 309100"];
6832 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 309101"];
6833 [label="PooledHashSet<string>? pNames = null; 309102"];
6834 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 309103"];
6835 [label="tpNames?.Free(); 309104"];
6836 [label="pNames?.Free(); 309105"];
6837 [label="binder.ValidateParameterNameConflicts(typeParameters, parameters.Cast<TParameterSymbol, ParameterSymbol>(), allowShadowingNames, diagnostics); 309106"];
6838 [label="return parameters; 309107"];
6839 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309108"];
6840 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309109"];
6841 [label="syntax.Parameters 309110"];
6842 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309111"];
6843 [label="return MakeParameters<ParameterSyntax, ParameterSymbol, Symbol>(\n                binder,\n                owner,\n                syntax.Parameters,\n                out arglistToken,\n                diagnostics,\n                allowRefOrOut,\n                allowThis,\n                addRefReadOnlyModifier,\n                suppressUseSiteDiagnostics: false,\n                lastIndex: syntax.Parameters.Count - 1,\n                parameterCreationFunc: (Binder context, Symbol owner, TypeWithAnnotations parameterType,\n                                        ParameterSyntax syntax, RefKind refKind, int ordinal,\n                                        SyntaxToken paramsKeyword, SyntaxToken thisKeyword, bool addRefReadOnlyModifier,\n                                        DiagnosticBag declarationDiagnostics) =>\n                {\n                    return SourceParameterSymbol.Create(\n                        context,\n                        owner,\n                        parameterType,\n                        syntax,\n                        refKind,\n                        syntax.Identifier,\n                        ordinal,\n                        isParams: paramsKeyword.Kind() != SyntaxKind.None,\n                        isExtensionMethodThis: ordinal == 0 && thisKeyword.Kind() != SyntaxKind.None,\n                        addRefReadOnlyModifier,\n                        declarationDiagnostics);\n                }\n); 309112"];
6844 [label="_lazyParameters 309113"];
6845 [label="_lazyIsVararg = (arglistToken.Kind() == SyntaxKind.ArgListKeyword); 309114"];
6846 [label="_lazyIsVararg = (arglistToken.Kind() == SyntaxKind.ArgListKeyword); 309115"];
6847 [label="_lazyIsVararg 309116"];
6848 [label="_lazyReturnType = TypeWithAnnotations.Create(bodyBinder.GetSpecialType(SpecialType.System_Void, diagnostics, syntax)); 309117"];
6849 [label="_lazyReturnType = TypeWithAnnotations.Create(bodyBinder.GetSpecialType(SpecialType.System_Void, diagnostics, syntax)); 309118"];
6850 [label="_lazyReturnType = TypeWithAnnotations.Create(bodyBinder.GetSpecialType(SpecialType.System_Void, diagnostics, syntax)); 309119"];
6851 [label="bodyBinder.GetSpecialType(SpecialType.System_Void, diagnostics, syntax) 309120"];
6852 [label="param GetSpecialType(SpecialType typeId) 309121"];
6853 [label="param GetSpecialType(DiagnosticBag diagnostics) 309122"];
6854 [label="param GetSpecialType(SyntaxNode node) 309123"];
6855 [label="param GetSpecialType(this) 309124"];
6856 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 309125"];
6857 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 309126"];
6858 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 309127"];
6859 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 309128"];
6860 [label="GetSpecialType(this.Compilation, typeId, node, diagnostics) 309129"];
6861 [label="param GetSpecialType(CSharpCompilation compilation) 309130"];
6862 [label="param GetSpecialType(SpecialType typeId) 309131"];
6863 [label="param GetSpecialType(SyntaxNode node) 309132"];
6864 [label="param GetSpecialType(DiagnosticBag diagnostics) 309133"];
6865 [label="NamedTypeSymbol typeSymbol = compilation.GetSpecialType(typeId); 309134"];
6866 [label="compilation.GetSpecialType(typeId) 309135"];
6867 [label="param GetSpecialType(SpecialType specialType) 309136"];
6868 [label="param GetSpecialType(this) 309137"];
6869 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 309138"];
6870 [label="NamedTypeSymbol result; 309139"];
6871 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 309140"];
6872 [label="if (IsTypeMissing(specialType))\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(specialType.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                result = new MissingMetadataTypeSymbol.TopLevel(Assembly.CorLibrary.Modules[0], ref emittedName, specialType);\n            }\n            else\n            {\n                result = Assembly.GetSpecialType(specialType);\n            } 309141"];
6873 [label="Assembly 309142"];
6874 [label="GetBoundReferenceManager(); 309143"];
6875 [label="result = Assembly.GetSpecialType(specialType); 309144"];
6876 [label="result = Assembly.GetSpecialType(specialType); 309145"];
6877 [label="Assembly.GetSpecialType(specialType) 309146"];
6878 [label="param GetSpecialType(SpecialType type) 309147"];
6879 [label="param GetSpecialType(this) 309148"];
6880 [label="CorLibrary 309149"];
6881 [label="get\n            {\n                return _corLibrary;\n            } 309150"];
6882 [label="return CorLibrary.GetDeclaredSpecialType(type); 309151"];
6883 [label="return CorLibrary.GetDeclaredSpecialType(type); 309152"];
6884 [label="CorLibrary.GetDeclaredSpecialType(type) 309153"];
6885 [label="param GetDeclaredSpecialType(SpecialType type) 309154"];
6886 [label="param GetDeclaredSpecialType(this) 309155"];
6887 [label="this.Modules 309156"];
6888 [label="get\n            {\n                return _modules;\n            } 309157"];
6889 [label="foreach (var module in this.Modules)\n            {\n                Debug.Assert(module.GetReferencedAssemblies().Length == 0);\n            } 309158"];
6890 [label="module.GetReferencedAssemblies() 309159"];
6891 [label="param GetReferencedAssemblies(this) 309160"];
6892 [label="AssertReferencesInitialized() 309161"];
6893 [label="param AssertReferencesInitialized(this) 309162"];
6894 [label="Debug.Assert(_moduleReferences != null); 309163"];
6895 [label="Debug.Assert(_moduleReferences != null); 309164"];
6896 [label="AssertReferencesInitialized(); 309165"];
6897 [label="return _moduleReferences.Identities; 309166"];
6898 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 309167"];
6899 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 309168"];
6900 [label="if (_lazySpecialTypes == null || (object)_lazySpecialTypes[(int)type] == null)\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(type.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                ModuleSymbol module = this.Modules[0];\n                NamedTypeSymbol result = module.LookupTopLevelMetadataType(ref emittedName);\n                if (result.Kind != SymbolKind.ErrorType && result.DeclaredAccessibility != Accessibility.Public)\n                {\n                    result = new MissingMetadataTypeSymbol.TopLevel(module, ref emittedName, type);\n                }\n                RegisterDeclaredSpecialType(result);\n            } 309169"];
6901 [label="if (_lazySpecialTypes == null || (object)_lazySpecialTypes[(int)type] == null)\n            {\n                MetadataTypeName emittedName = MetadataTypeName.FromFullName(type.GetMetadataName(), useCLSCompliantNameArityEncoding: true);\n                ModuleSymbol module = this.Modules[0];\n                NamedTypeSymbol result = module.LookupTopLevelMetadataType(ref emittedName);\n                if (result.Kind != SymbolKind.ErrorType && result.DeclaredAccessibility != Accessibility.Public)\n                {\n                    result = new MissingMetadataTypeSymbol.TopLevel(module, ref emittedName, type);\n                }\n                RegisterDeclaredSpecialType(result);\n            } 309170"];
6902 [label="MetadataTypeName emittedName = MetadataTypeName.FromFullName(type.GetMetadataName(), useCLSCompliantNameArityEncoding: true); 309171"];
6903 [label="MetadataTypeName emittedName = MetadataTypeName.FromFullName(type.GetMetadataName(), useCLSCompliantNameArityEncoding: true); 309172"];
6904 [label="this.Modules 309173"];
6905 [label="ModuleSymbol module = this.Modules[0]; 309174"];
6906 [label="ModuleSymbol module = this.Modules[0]; 309175"];
6907 [label="NamedTypeSymbol result = module.LookupTopLevelMetadataType(ref emittedName); 309176"];
6908 [label="module.LookupTopLevelMetadataType(ref emittedName) 309177"];
6909 [label="param LookupTopLevelMetadataType(ref MetadataTypeName emittedName) 309178"];
6910 [label="param LookupTopLevelMetadataType(this) 309179"];
6911 [label="NamedTypeSymbol result; 309180"];
6912 [label="this.GlobalNamespace 309181"];
6913 [label="get { return _globalNamespace; } 309182"];
6914 [label="NamespaceSymbol scope = this.GlobalNamespace.LookupNestedNamespace(emittedName.NamespaceSegments); 309183"];
6915 [label="NamespaceSymbol scope = this.GlobalNamespace.LookupNestedNamespace(emittedName.NamespaceSegments); 309184"];
6916 [label="this.GlobalNamespace.LookupNestedNamespace(emittedName.NamespaceSegments) 309185"];
6917 [label="param LookupNestedNamespace(ImmutableArray<string> names) 309186"];
6918 [label="param LookupNestedNamespace(this) 309187"];
6919 [label="NamespaceSymbol scope = this; 309188"];
6920 [label="foreach (string name in names)\n            {\n                NamespaceSymbol nextScope = null;\n\n                foreach (NamespaceOrTypeSymbol symbol in scope.GetMembers(name))\n                {\n                    var ns = symbol as NamespaceSymbol;\n\n                    if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    }\n                }\n\n                scope = nextScope;\n\n                if ((object)scope == null)\n                {\n                    break;\n                }\n            } 309189"];
6921 [label="NamespaceSymbol nextScope = null; 309190"];
6922 [label="foreach (NamespaceOrTypeSymbol symbol in scope.GetMembers(name))\n                {\n                    var ns = symbol as NamespaceSymbol;\n\n                    if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    }\n                } 309191"];
6923 [label="scope.GetMembers(name) 309192"];
6924 [label="param GetMembers(string name) 309193"];
6925 [label="param GetMembers(this) 309194"];
6926 [label="EnsureAllMembersLoaded() 309195"];
6927 [label="param EnsureAllMembersLoaded(this) 309196"];
6928 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups;\n\n                try\n                {\n                    groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal);\n                }\n                catch (BadImageFormatException)\n                {\n                    groups = SpecializedCollections.EmptyEnumerable<IGrouping<string, TypeDefinitionHandle>>();\n                }\n\n                LoadAllMembers(groups);\n            } 309197"];
6929 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups;\n\n                try\n                {\n                    groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal);\n                }\n                catch (BadImageFormatException)\n                {\n                    groups = SpecializedCollections.EmptyEnumerable<IGrouping<string, TypeDefinitionHandle>>();\n                }\n\n                LoadAllMembers(groups);\n            } 309198"];
6930 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> groups; 309199"];
6931 [label="_moduleSymbol.Module 309200"];
6932 [label="get\n            {\n                return _module;\n            } 309201"];
6933 [label="return _module; 309202"];
6934 [label="groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal); 309203"];
6935 [label="groups = _moduleSymbol.Module.GroupTypesByNamespaceOrThrow(System.StringComparer.Ordinal); 309204"];
6936 [label="LoadAllMembers(groups); 309205"];
6937 [label="LoadAllMembers(groups) 309206"];
6938 [label="param LoadAllMembers(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 309207"];
6939 [label="param LoadAllMembers(this) 309208"];
6940 [label="Debug.Assert(typesByNS != null); 309209"];
6941 [label="Debug.Assert(typesByNS != null); 309210"];
6942 [label="IEnumerable<IGrouping<string, TypeDefinitionHandle>> nestedTypes = null; 309211"];
6943 [label="IEnumerable<KeyValuePair<string, IEnumerable<IGrouping<string, TypeDefinitionHandle>>>> nestedNamespaces = null; 309212"];
6944 [label="this.IsGlobalNamespace 309213"];
6945 [label="get\n            {\n                return true;\n            } 309214"];
6946 [label="return true; 309215"];
6947 [label="bool isGlobalNamespace = this.IsGlobalNamespace; 309216"];
6948 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 309217"];
6949 [label="isGlobalNamespace 309218"];
6950 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 309219"];
6951 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 309220"];
6952 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 309221"];
6953 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 309222"];
6954 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 309223"];
6955 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 309224"];
6956 [label="LazyInitializeNamespaces(nestedNamespaces); 309225"];
6957 [label="LazyInitializeNamespaces(nestedNamespaces) 309226"];
6958 [label="param LazyInitializeNamespaces(IEnumerable<KeyValuePair<string, IEnumerable<IGrouping<string, TypeDefinitionHandle>>>> childNamespaces) 309227"];
6959 [label="param LazyInitializeNamespaces(this) 309228"];
6960 [label="if (this.lazyNamespaces == null)\n            {\n                var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance);\n\n                foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                }\n\n                Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null);\n            } 309229"];
6961 [label="if (this.lazyNamespaces == null)\n            {\n                var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance);\n\n                foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                }\n\n                Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null);\n            } 309230"];
6962 [label="var namespaces = new Dictionary<string, PENestedNamespaceSymbol>(StringOrdinalComparer.Instance); 309231"];
6963 [label="foreach (var child in childNamespaces)\n                {\n                    var c = new PENestedNamespaceSymbol(child.Key, this, child.Value);\n                    namespaces.Add(c.Name, c);\n                } 309232"];
6964 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 309233"];
6965 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 309234"];
6966 [label="var c = new PENestedNamespaceSymbol(child.Key, this, child.Value); 309235"];
6967 [label="new PENestedNamespaceSymbol(child.Key, this, child.Value) 309236"];
6968 [label="param PENestedNamespaceSymbol(string name) 309237"];
6969 [label="param PENestedNamespaceSymbol(PENamespaceSymbol containingNamespace) 309238"];
6970 [label="param PENestedNamespaceSymbol(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 309239"];
6971 [label="param PENestedNamespaceSymbol(this) 309240"];
6972 [label="param PENestedNamespaceSymbol(this) 309241"];
6973 [label="_containingNamespaceSymbol 309242"];
6974 [label="_name 309243"];
6975 [label="_typesByNS 309244"];
6976 [label="Debug.Assert(name != null); 309245"];
6977 [label="Debug.Assert(name != null); 309246"];
6978 [label="Debug.Assert((object)containingNamespace != null); 309247"];
6979 [label="Debug.Assert((object)containingNamespace != null); 309248"];
6980 [label="Debug.Assert(typesByNS != null); 309249"];
6981 [label="Debug.Assert(typesByNS != null); 309250"];
6982 [label="_containingNamespaceSymbol 309251"];
6983 [label="_name 309252"];
6984 [label="_typesByNS 309253"];
6985 [label="c.Name 309254"];
6986 [label="get\n            {\n                return _name;\n            } 309255"];
6987 [label="return _name; 309256"];
6988 [label="namespaces.Add(c.Name, c); 309257"];
6989 [label="namespaces.Add(c.Name, c); 309258"];
6990 [label="namespaces.Add(c.Name, c); 309259"];
6991 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 309260"];
6992 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 309261"];
6993 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 309262"];
6994 [label="Interlocked.CompareExchange(ref this.lazyNamespaces, namespaces, null); 309263"];
6995 [label="LazyInitializeNamespaces(nestedNamespaces); 309264"];
6996 [label="LazyInitializeTypes(nestedTypes); 309265"];
6997 [label="LazyInitializeTypes(nestedTypes) 309266"];
6998 [label="param LazyInitializeTypes(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typeGroups) 309267"];
6999 [label="param LazyInitializeTypes(this) 309268"];
7000 [label="if (this.lazyTypes == null)\n            {\n                var moduleSymbol = ContainingPEModule;\n\n                var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes();\n                Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null;\n\n                foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance);\n                children.Free();\n\n                if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                }\n\n                var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null);\n\n                // Build cache of TypeDef Tokens\n                // Potentially this can be done in the background.\n                if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n            } 309269"];
7001 [label="if (this.lazyTypes == null)\n            {\n                var moduleSymbol = ContainingPEModule;\n\n                var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance();\n                var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes();\n                Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null;\n\n                foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                }\n\n                var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance);\n                children.Free();\n\n                if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                }\n\n                var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null);\n\n                // Build cache of TypeDef Tokens\n                // Potentially this can be done in the background.\n                if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                }\n            } 309270"];
7002 [label="ContainingPEModule 309271"];
7003 [label="get\n            {\n                return _moduleSymbol;\n            } 309272"];
7004 [label="return _moduleSymbol; 309273"];
7005 [label="var moduleSymbol = ContainingPEModule; 309274"];
7006 [label="var children = ArrayBuilder<PENamedTypeSymbol>.GetInstance(); 309275"];
7007 [label="moduleSymbol.Module 309276"];
7008 [label="get\n            {\n                return _module;\n            } 309277"];
7009 [label="var skipCheckForPiaType = !moduleSymbol.Module.ContainsNoPiaLocalTypes(); 309278"];
7010 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 309279"];
7011 [label="foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                } 309280"];
7012 [label="foreach (var g in typeGroups)\n                {\n                    foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    }\n                } 309281"];
7013 [label="foreach (var t in g)\n                    {\n                        if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        }\n                    } 309282"];
7014 [label="if (skipCheckForPiaType || !moduleSymbol.Module.IsNoPiaLocalType(t))\n                        {\n                            children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key));\n                        }\n                        else\n                        {\n                            try\n                            {\n                                string typeDefName = moduleSymbol.Module.GetTypeDefNameOrThrow(t);\n\n                                if (noPiaLocalTypes == null)\n                                {\n                                    noPiaLocalTypes = new Dictionary<string, TypeDefinitionHandle>(StringOrdinalComparer.Instance);\n                                }\n\n                                noPiaLocalTypes[typeDefName] = t;\n                            }\n                            catch (BadImageFormatException)\n                            { }\n                        } 309283"];
7015 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 309284"];
7016 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 309285"];
7017 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 309286"];
7018 [label="EmptyComparer.Instance 309287"];
7019 [label="new Dictionary<string, ImmutableArray<PENamedTypeSymbol>>(EmptyComparer.Instance) 309288"];
7020 [label="s_emptyNestedTypes = new Dictionary<string, ImmutableArray<PENamedTypeSymbol>>(EmptyComparer.Instance) 309289"];
7021 [label="new UncommonProperties() 309290"];
7022 [label="param UncommonProperties(this) 309291"];
7023 [label="lazyEnumUnderlyingType 309292"];
7024 [label="lazyObsoleteAttributeData = ObsoleteAttributeData.Uninitialized 309293"];
7025 [label="lazyAttributeUsageInfo = AttributeUsageInfo.Null 309294"];
7026 [label="lazyContainsExtensionMethods 309295"];
7027 [label="lazyIsByRefLike 309296"];
7028 [label="lazyIsReadOnly 309297"];
7029 [label="lazyDefaultMemberName 309298"];
7030 [label="lazyComImportCoClassType = ErrorTypeSymbol.UnknownResultType 309299"];
7031 [label="lazyHasEmbeddedAttribute = ThreeState.Unknown 309300"];
7032 [label="s_noUncommonProperties = new UncommonProperties() 309301"];
7033 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 309302"];
7034 [label="PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key) 309303"];
7035 [label="param Create(PEModuleSymbol moduleSymbol) 309304"];
7036 [label="param Create(PENamespaceSymbol containingNamespace) 309305"];
7037 [label="param Create(TypeDefinitionHandle handle) 309306"];
7038 [label="param Create(string emittedNamespaceName) 309307"];
7039 [label="GenericParameterHandleCollection genericParameterHandles; 309308"];
7040 [label="genericParameterHandles 309309"];
7041 [label="ushort arity; 309310"];
7042 [label="BadImageFormatException mrEx = null; 309311"];
7043 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 309312"];
7044 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 309313"];
7045 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 309314"];
7046 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 309315"];
7047 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 309316"];
7048 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx) 309317"];
7049 [label="param GetGenericInfo(PEModuleSymbol moduleSymbol) 309318"];
7050 [label="param GetGenericInfo(TypeDefinitionHandle handle) 309319"];
7051 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 309320"];
7052 [label="param GetGenericInfo(out ushort arity) 309321"];
7053 [label="param GetGenericInfo(out BadImageFormatException mrEx) 309322"];
7054 [label="moduleSymbol.Module 309323"];
7055 [label="get\n            {\n                return _module;\n            } 309324"];
7056 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 309325"];
7057 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 309326"];
7058 [label="genericParameterHandles = moduleSymbol.Module.GetTypeDefGenericParamsOrThrow(handle); 309327"];
7059 [label="arity = (ushort)genericParameterHandles.Count; 309328"];
7060 [label="mrEx = null; 309329"];
7061 [label="GetGenericInfo(moduleSymbol, handle, out genericParameterHandles, out arity, out mrEx); 309330"];
7062 [label="bool mangleName; 309331"];
7063 [label="PENamedTypeSymbol result; 309332"];
7064 [label="if (arity == 0)\n            {\n                result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName);\n            }\n            else\n            {\n                result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName);\n            } 309333"];
7065 [label="if (arity == 0)\n            {\n                result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName);\n            }\n            else\n            {\n                result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName);\n            } 309334"];
7066 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 309335"];
7067 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 309336"];
7068 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 309337"];
7069 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 309338"];
7070 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 309339"];
7071 [label="result = new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName); 309340"];
7072 [label="new PENamedTypeSymbolNonGeneric(moduleSymbol, containingNamespace, handle, emittedNamespaceName, out mangleName) 309341"];
7073 [label="param PENamedTypeSymbolNonGeneric(PEModuleSymbol moduleSymbol) 309342"];
7074 [label="param PENamedTypeSymbolNonGeneric(NamespaceOrTypeSymbol container) 309343"];
7075 [label="param PENamedTypeSymbolNonGeneric(TypeDefinitionHandle handle) 309344"];
7076 [label="param PENamedTypeSymbolNonGeneric(string emittedNamespaceName) 309345"];
7077 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 309346"];
7078 [label="param PENamedTypeSymbolNonGeneric(this) 309347"];
7079 [label="moduleSymbol 309348"];
7080 [label="container 309349"];
7081 [label="handle 309350"];
7082 [label="emittedNamespaceName 309351"];
7083 [label="0 309352"];
7084 [label="mangleName 309353"];
7085 [label="param PENamedTypeSymbolNonGeneric(this) 309354"];
7086 [label="param PENamedTypeSymbol(PEModuleSymbol moduleSymbol) 309355"];
7087 [label="param PENamedTypeSymbol(NamespaceOrTypeSymbol container) 309356"];
7088 [label="param PENamedTypeSymbol(TypeDefinitionHandle handle) 309357"];
7089 [label="param PENamedTypeSymbol(string emittedNamespaceName) 309358"];
7090 [label="param PENamedTypeSymbol(ushort arity) 309359"];
7091 [label="param PENamedTypeSymbol(out bool mangleName) 309360"];
7092 [label="param PENamedTypeSymbol(this) 309361"];
7093 [label="param PENamedTypeSymbol(this) 309362"];
7094 [label="param NamedTypeSymbol(this) 309363"];
7095 [label="param NamedTypeSymbol(TupleExtraData tupleData = null) 309364"];
7096 [label="param NamedTypeSymbol(this) 309365"];
7097 [label="param TypeSymbol(this) 309366"];
7098 [label="param TypeSymbol(this) 309367"];
7099 [label="_lazyAbstractMembers 309368"];
7100 [label="_lazyInterfaceInfo 309369"];
7101 [label="_lazyAdapter 309370"];
7102 [label="_hasNoBaseCycles 309371"];
7103 [label="_lazyTupleData 309372"];
7104 [label="_lazyTupleData 309373"];
7105 [label="_container 309374"];
7106 [label="_name 309375"];
7107 [label="_flags 309376"];
7108 [label="_corTypeId 309377"];
7109 [label="_lazyMemberNames 309378"];
7110 [label="_lazyMembersByName 309379"];
7111 [label="_lazyNestedTypes 309380"];
7112 [label="_lazyKind 309381"];
7113 [label="_lazyNullableContextValue 309382"];
7114 [label="_lazyBaseType = ErrorTypeSymbol.UnknownResultType 309383"];
7115 [label="default(ImmutableArray<NamedTypeSymbol>) 309384"];
7116 [label="_lazyInterfaces = default(ImmutableArray<NamedTypeSymbol>) 309385"];
7117 [label="_lazyDeclaredBaseType = ErrorTypeSymbol.UnknownResultType 309386"];
7118 [label="default(ImmutableArray<NamedTypeSymbol>) 309387"];
7119 [label="_lazyDeclaredInterfaces = default(ImmutableArray<NamedTypeSymbol>) 309388"];
7120 [label="_lazyDocComment 309389"];
7121 [label="_lazyUseSiteDiagnostic = CSDiagnosticInfo.EmptyErrorInfo 309390"];
7122 [label="_lazyUncommonProperties 309391"];
7123 [label="public IEnumerable<object> fieldDefs { get; set; } 309392"];
7124 [label="Debug.Assert(!handle.IsNil); 309393"];
7125 [label="Debug.Assert((object)container != null); 309394"];
7126 [label="Debug.Assert((object)container != null); 309395"];
7127 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 309396"];
7128 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 309397"];
7129 [label="string metadataName; 309398"];
7130 [label="bool makeBad = false; 309399"];
7131 [label="moduleSymbol.Module 309400"];
7132 [label="get\n            {\n                return _module;\n            } 309401"];
7133 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 309402"];
7134 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 309403"];
7135 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 309404"];
7136 [label="_handle 309405"];
7137 [label="_container 309406"];
7138 [label="moduleSymbol.Module 309407"];
7139 [label="get\n            {\n                return _module;\n            } 309408"];
7140 [label="return _module; 309409"];
7141 [label="_flags = moduleSymbol.Module.GetTypeDefFlagsOrThrow(handle); 309410"];
7142 [label="_flags = moduleSymbol.Module.GetTypeDefFlagsOrThrow(handle); 309411"];
7143 [label="_flags 309412"];
7144 [label="if (arity == 0)\n            {\n                _name = metadataName;\n                mangleName = false;\n            }\n            else\n            {\n                // Unmangle name for a generic type.\n                _name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity);\n                Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName));\n                mangleName = !ReferenceEquals(_name, metadataName);\n            } 309413"];
7145 [label="if (arity == 0)\n            {\n                _name = metadataName;\n                mangleName = false;\n            }\n            else\n            {\n                // Unmangle name for a generic type.\n                _name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity);\n                Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName));\n                mangleName = !ReferenceEquals(_name, metadataName);\n            } 309414"];
7146 [label="_name 309415"];
7147 [label="mangleName = false; 309416"];
7148 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 309417"];
7149 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 309418"];
7150 [label="moduleSymbol.ContainingAssembly 309419"];
7151 [label="get\n            {\n                return _assemblySymbol;\n            } 309420"];
7152 [label="return _assemblySymbol; 309421"];
7153 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 309422"];
7154 [label="moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes 309423"];
7155 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 309424"];
7156 [label="this.CorLibrary 309425"];
7157 [label="get\n            {\n                return _corLibrary;\n            } 309426"];
7158 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 309427"];
7159 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 309428"];
7160 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 309429"];
7161 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 309430"];
7162 [label="this.DeclaredAccessibility 309431"];
7163 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 309432"];
7164 [label="Accessibility access = Accessibility.Private; 309433"];
7165 [label="switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                } 309434"];
7166 [label="access = Accessibility.Internal; 309435"];
7167 [label="return access; 309436"];
7168 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 309437"];
7169 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 309438"];
7170 [label="_corTypeId 309439"];
7171 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 309440"];
7172 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309441"];
7173 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309442"];
7174 [label="return result; 309443"];
7175 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 309444"];
7176 [label="GenericParameterHandleCollection genericParameterHandles; 309445"];
7177 [label="genericParameterHandles 309446"];
7178 [label="ushort arity; 309447"];
7179 [label="BadImageFormatException mrEx = null; 309448"];
7180 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 309449"];
7181 [label="param GetGenericInfo(out ushort arity) 309450"];
7182 [label="param GetGenericInfo(out BadImageFormatException mrEx) 309451"];
7183 [label="mrEx = null; 309452"];
7184 [label="bool mangleName; 309453"];
7185 [label="PENamedTypeSymbol result; 309454"];
7186 [label="result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName); 309455"];
7187 [label="result = new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName); 309456"];
7188 [label="new PENamedTypeSymbolGeneric(\n                    moduleSymbol,\n                    containingNamespace,\n                    handle,\n                    emittedNamespaceName,\n                    genericParameterHandles,\n                    arity,\n                    out mangleName) 309457"];
7189 [label="param PENamedTypeSymbolGeneric(PEModuleSymbol moduleSymbol) 309458"];
7190 [label="param PENamedTypeSymbolGeneric(NamespaceOrTypeSymbol container) 309459"];
7191 [label="param PENamedTypeSymbolGeneric(TypeDefinitionHandle handle) 309460"];
7192 [label="param PENamedTypeSymbolGeneric(string emittedNamespaceName) 309461"];
7193 [label="param PENamedTypeSymbolGeneric(GenericParameterHandleCollection genericParameterHandles) 309462"];
7194 [label="param PENamedTypeSymbolGeneric(ushort arity) 309463"];
7195 [label="param PENamedTypeSymbolGeneric(out bool mangleName) 309464"];
7196 [label="param PENamedTypeSymbolGeneric(this) 309465"];
7197 [label="moduleSymbol 309466"];
7198 [label="container 309467"];
7199 [label="handle 309468"];
7200 [label="emittedNamespaceName 309469"];
7201 [label="arity 309470"];
7202 [label="mangleName 309471"];
7203 [label="param PENamedTypeSymbolGeneric(this) 309472"];
7204 [label="param PENamedTypeSymbol(PEModuleSymbol moduleSymbol) 309473"];
7205 [label="param PENamedTypeSymbol(NamespaceOrTypeSymbol container) 309474"];
7206 [label="param PENamedTypeSymbol(TypeDefinitionHandle handle) 309475"];
7207 [label="param PENamedTypeSymbol(string emittedNamespaceName) 309476"];
7208 [label="param PENamedTypeSymbol(ushort arity) 309477"];
7209 [label="param PENamedTypeSymbol(out bool mangleName) 309478"];
7210 [label="_lazyTupleData 309479"];
7211 [label="_container 309480"];
7212 [label="_name 309481"];
7213 [label="_flags 309482"];
7214 [label="_corTypeId 309483"];
7215 [label="Debug.Assert(!handle.IsNil); 309484"];
7216 [label="Debug.Assert((object)container != null); 309485"];
7217 [label="Debug.Assert((object)container != null); 309486"];
7218 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 309487"];
7219 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 309488"];
7220 [label="string metadataName; 309489"];
7221 [label="bool makeBad = false; 309490"];
7222 [label="metadataName = moduleSymbol.Module.GetTypeDefNameOrThrow(handle); 309491"];
7223 [label="_name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity); 309492"];
7224 [label="_name = MetadataHelpers.UnmangleMetadataNameForArity(metadataName, arity); 309493"];
7225 [label="_name 309494"];
7226 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 309495"];
7227 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 309496"];
7228 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 309497"];
7229 [label="mangleName = !ReferenceEquals(_name, metadataName); 309498"];
7230 [label="mangleName = !ReferenceEquals(_name, metadataName); 309499"];
7231 [label="if (emittedNamespaceName != null &&\n                moduleSymbol.ContainingAssembly.KeepLookingForDeclaredSpecialTypes &&\n                this.DeclaredAccessibility == Accessibility.Public) // NB: this.flags was set above.\n            {\n                _corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName));\n            }\n            else\n            {\n                _corTypeId = SpecialType.None;\n            } 309500"];
7232 [label="Accessibility access = Accessibility.Private; 309501"];
7233 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 309502"];
7234 [label="_arity 309503"];
7235 [label="_mangleName 309504"];
7236 [label="Debug.Assert(genericParameterHandles.Count > 0); 309505"];
7237 [label="Debug.Assert(genericParameterHandles.Count > 0); 309506"];
7238 [label="_arity 309507"];
7239 [label="_genericParameterHandles 309508"];
7240 [label="_mangleName 309509"];
7241 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309510"];
7242 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309511"];
7243 [label="children.Add(PENamedTypeSymbol.Create(moduleSymbol, this, t, g.Key)); 309512"];
7244 [label="GenericParameterHandleCollection genericParameterHandles; 309513"];
7245 [label="genericParameterHandles 309514"];
7246 [label="ushort arity; 309515"];
7247 [label="BadImageFormatException mrEx = null; 309516"];
7248 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 309517"];
7249 [label="param GetGenericInfo(out ushort arity) 309518"];
7250 [label="param GetGenericInfo(out BadImageFormatException mrEx) 309519"];
7251 [label="mrEx = null; 309520"];
7252 [label="bool mangleName; 309521"];
7253 [label="PENamedTypeSymbol result; 309522"];
7254 [label="param PENamedTypeSymbolGeneric(out bool mangleName) 309523"];
7255 [label="mangleName 309524"];
7256 [label="param PENamedTypeSymbol(out bool mangleName) 309525"];
7257 [label="_lazyTupleData 309526"];
7258 [label="_container 309527"];
7259 [label="_name 309528"];
7260 [label="_flags 309529"];
7261 [label="_corTypeId 309530"];
7262 [label="Debug.Assert(!handle.IsNil); 309531"];
7263 [label="Debug.Assert((object)container != null); 309532"];
7264 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 309533"];
7265 [label="string metadataName; 309534"];
7266 [label="bool makeBad = false; 309535"];
7267 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 309536"];
7268 [label="Accessibility access = Accessibility.Private; 309537"];
7269 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 309538"];
7270 [label="_arity 309539"];
7271 [label="_mangleName 309540"];
7272 [label="Debug.Assert(genericParameterHandles.Count > 0); 309541"];
7273 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309542"];
7274 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309543"];
7275 [label="GenericParameterHandleCollection genericParameterHandles; 309544"];
7276 [label="genericParameterHandles 309545"];
7277 [label="ushort arity; 309546"];
7278 [label="BadImageFormatException mrEx = null; 309547"];
7279 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 309548"];
7280 [label="param GetGenericInfo(out ushort arity) 309549"];
7281 [label="param GetGenericInfo(out BadImageFormatException mrEx) 309550"];
7282 [label="mrEx = null; 309551"];
7283 [label="PENamedTypeSymbol result; 309552"];
7284 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 309553"];
7285 [label="mangleName 309554"];
7286 [label="param PENamedTypeSymbol(out bool mangleName) 309555"];
7287 [label="Debug.Assert(!handle.IsNil); 309556"];
7288 [label="mangleName = false; 309557"];
7289 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309558"];
7290 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309559"];
7291 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 309560"];
7292 [label="mangleName 309561"];
7293 [label="param PENamedTypeSymbol(out bool mangleName) 309562"];
7294 [label="_lazyTupleData 309563"];
7295 [label="_container 309564"];
7296 [label="_name 309565"];
7297 [label="_flags 309566"];
7298 [label="_corTypeId 309567"];
7299 [label="Debug.Assert(!handle.IsNil); 309568"];
7300 [label="Debug.Assert((object)container != null); 309569"];
7301 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 309570"];
7302 [label="string metadataName; 309571"];
7303 [label="bool makeBad = false; 309572"];
7304 [label="mangleName = false; 309573"];
7305 [label="Accessibility access = Accessibility.Private; 309574"];
7306 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 309575"];
7307 [label="genericParameterHandles 309576"];
7308 [label="ushort arity; 309577"];
7309 [label="BadImageFormatException mrEx = null; 309578"];
7310 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 309579"];
7311 [label="param GetGenericInfo(out ushort arity) 309580"];
7312 [label="param GetGenericInfo(out BadImageFormatException mrEx) 309581"];
7313 [label="mrEx = null; 309582"];
7314 [label="PENamedTypeSymbol result; 309583"];
7315 [label="Debug.Assert(!handle.IsNil); 309584"];
7316 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309585"];
7317 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309586"];
7318 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 309587"];
7319 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 309588"];
7320 [label="mangleName 309589"];
7321 [label="param PENamedTypeSymbol(out bool mangleName) 309590"];
7322 [label="_lazyTupleData 309591"];
7323 [label="_container 309592"];
7324 [label="_name 309593"];
7325 [label="_flags 309594"];
7326 [label="_corTypeId 309595"];
7327 [label="Debug.Assert(!handle.IsNil); 309596"];
7328 [label="Debug.Assert((object)container != null); 309597"];
7329 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 309598"];
7330 [label="string metadataName; 309599"];
7331 [label="bool makeBad = false; 309600"];
7332 [label="mangleName = false; 309601"];
7333 [label="Accessibility access = Accessibility.Private; 309602"];
7334 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 309603"];
7335 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 309604"];
7336 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 309605"];
7337 [label="var typesDict = children.ToDictionary(c => c.Name, StringOrdinalComparer.Instance); 309606"];
7338 [label="get\n            {\n                return _name;\n            } 309607"];
7339 [label="return _name; 309608"];
7340 [label="children.Free(); 309609"];
7341 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 309610"];
7342 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 309611"];
7343 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 309612"];
7344 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 309613"];
7345 [label="var original = Interlocked.CompareExchange(ref this.lazyTypes, typesDict, null); 309614"];
7346 [label="if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 309615"];
7347 [label="if (original == null)\n                {\n                    moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict);\n                } 309616"];
7348 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 309617"];
7349 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict) 309618"];
7350 [label="param OnNewTypeDeclarationsLoaded(Dictionary<string, ImmutableArray<PENamedTypeSymbol>> typesDict) 309619"];
7351 [label="param OnNewTypeDeclarationsLoaded(this) 309620"];
7352 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 309621"];
7353 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 309622"];
7354 [label="_assemblySymbol.KeepLookingForDeclaredSpecialTypes 309623"];
7355 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 309624"];
7356 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 309625"];
7357 [label="foreach (var types in typesDict.Values)\n            {\n                foreach (var type in types)\n                {\n                    bool added;\n                    added = TypeHandleToTypeMap.TryAdd(type.Handle, type);\n                    Debug.Assert(added);\n\n                    // Register newly loaded COR types\n                    if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    }\n                }\n            } 309626"];
7358 [label="foreach (var type in types)\n                {\n                    bool added;\n                    added = TypeHandleToTypeMap.TryAdd(type.Handle, type);\n                    Debug.Assert(added);\n\n                    // Register newly loaded COR types\n                    if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    }\n                } 309627"];
7359 [label="bool added; 309628"];
7360 [label="type.Handle 309629"];
7361 [label="get\n            {\n                return _handle;\n            } 309630"];
7362 [label="return _handle; 309631"];
7363 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 309632"];
7364 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 309633"];
7365 [label="added = TypeHandleToTypeMap.TryAdd(type.Handle, type); 309634"];
7366 [label="Debug.Assert(added); 309635"];
7367 [label="type.SpecialType 309636"];
7368 [label="get\n            {\n                return _corTypeId;\n            } 309637"];
7369 [label="return _corTypeId; 309638"];
7370 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 309639"];
7371 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 309640"];
7372 [label="bool added; 309641"];
7373 [label="Debug.Assert(added); 309642"];
7374 [label="type.SpecialType 309643"];
7375 [label="get\n            {\n                return _corTypeId;\n            } 309644"];
7376 [label="return _corTypeId; 309645"];
7377 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 309646"];
7378 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 309647"];
7379 [label="moduleSymbol.OnNewTypeDeclarationsLoaded(typesDict); 309648"];
7380 [label="LazyInitializeTypes(nestedTypes); 309649"];
7381 [label="LoadAllMembers(groups); 309650"];
7382 [label="EnsureAllMembersLoaded(); 309651"];
7383 [label="PENestedNamespaceSymbol ns = null; 309652"];
7384 [label="ImmutableArray<PENamedTypeSymbol> t; 309653"];
7385 [label="t 309654"];
7386 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 309655"];
7387 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 309656"];
7388 [label="if (lazyNamespaces.TryGetValue(name, out ns))\n            {\n                if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                }\n            }\n            else if (lazyTypes.TryGetValue(name, out t))\n            {\n                return StaticCast<Symbol>.From(t);\n            } 309657"];
7389 [label="if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                } 309658"];
7390 [label="if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                } 309659"];
7391 [label="if (lazyTypes.TryGetValue(name, out t))\n                {\n                    // TODO - Eliminate the copy by storing all members and type members instead of non-type and type members?\n                    return StaticCast<Symbol>.From(t).Add(ns);\n                }\n                else\n                {\n                    return ImmutableArray.Create<Symbol>(ns);\n                } 309660"];
7392 [label="return ImmutableArray.Create<Symbol>(ns); 309661"];
7393 [label="var ns = symbol as NamespaceSymbol; 309662"];
7394 [label="if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    } 309663"];
7395 [label="if ((object)ns != null)\n                    {\n                        if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        }\n\n                        nextScope = ns;\n                    } 309664"];
7396 [label="if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        } 309665"];
7397 [label="if ((object)nextScope != null)\n                        {\n                            Debug.Assert((object)nextScope == null, 'Why did we run into an unmerged namespace?');\n                            nextScope = null;\n                            break;\n                        } 309666"];
7398 [label="nextScope = ns; 309667"];
7399 [label="scope = nextScope; 309668"];
7400 [label="if ((object)scope == null)\n                {\n                    break;\n                } 309669"];
7401 [label="if ((object)scope == null)\n                {\n                    break;\n                } 309670"];
7402 [label="return scope; 309671"];
7403 [label="if ((object)scope == null)\n            {\n                // We failed to locate the namespace\n                result = new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName);\n            }\n            else\n            {\n                result = scope.LookupMetadataType(ref emittedName);\n            } 309672"];
7404 [label="if ((object)scope == null)\n            {\n                // We failed to locate the namespace\n                result = new MissingMetadataTypeSymbol.TopLevel(this, ref emittedName);\n            }\n            else\n            {\n                result = scope.LookupMetadataType(ref emittedName);\n            } 309673"];
7405 [label="result = scope.LookupMetadataType(ref emittedName); 309674"];
7406 [label="scope.LookupMetadataType(ref emittedName) 309675"];
7407 [label="param LookupMetadataType(ref MetadataTypeName emittedTypeName) 309676"];
7408 [label="param LookupMetadataType(this) 309677"];
7409 [label="Debug.Assert(!emittedTypeName.IsNull); 309678"];
7410 [label="NamespaceOrTypeSymbol scope = this; 309679"];
7411 [label="scope.Kind 309680"];
7412 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 309681"];
7413 [label="return SymbolKind.Namespace; 309682"];
7414 [label="if (scope.Kind == SymbolKind.ErrorType)\n            {\n                return new MissingMetadataTypeSymbol.Nested((NamedTypeSymbol)scope, ref emittedTypeName);\n            } 309683"];
7415 [label="NamedTypeSymbol? namedType = null; 309684"];
7416 [label="ImmutableArray<NamedTypeSymbol> namespaceOrTypeMembers; 309685"];
7417 [label="namespaceOrTypeMembers 309686"];
7418 [label="scope.IsNamespace 309687"];
7419 [label="get\n            {\n                return Kind == SymbolKind.Namespace;\n            } 309688"];
7420 [label="Kind 309689"];
7421 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 309690"];
7422 [label="return SymbolKind.Namespace; 309691"];
7423 [label="return Kind == SymbolKind.Namespace; 309692"];
7424 [label="bool isTopLevel = scope.IsNamespace; 309693"];
7425 [label="Debug.Assert(!isTopLevel || scope.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat) == emittedTypeName.NamespaceName); 309694"];
7426 [label="scope.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat) 309695"];
7427 [label="param ToDisplayString(SymbolDisplayFormat format = null) 309696"];
7428 [label="param ToDisplayString(this) 309697"];
7429 [label="param NamespaceOrTypeSymbol(this) 309698"];
7430 [label="param Symbol(this) 309699"];
7431 [label="_underlying 309700"];
7432 [label="Debug.Assert(underlying is object); 309701"];
7433 [label="param ToDisplayParts(bool minimal) 309702"];
7434 [label="if (symbol == null)\n            {\n                throw new ArgumentNullException(nameof(symbol));\n            } 309703"];
7435 [label="if (symbol == null)\n            {\n                throw new ArgumentNullException(nameof(symbol));\n            } 309704"];
7436 [label="if (minimal)\n            {\n                if (semanticModelOpt == null)\n                {\n                    throw new ArgumentException(CSharpResources.SyntaxTreeSemanticModelMust);\n                }\n                else if (positionOpt < 0 || positionOpt > semanticModelOpt.SyntaxTree.Length) // Note: not >= since EOF is allowed.\n                {\n                    throw new ArgumentOutOfRangeException(CSharpResources.PositionNotWithinTree);\n                }\n            }\n            else\n            {\n                Debug.Assert(semanticModelOpt == null);\n                Debug.Assert(positionOpt < 0);\n            } 309705"];
7437 [label="Debug.Assert(semanticModelOpt == null); 309706"];
7438 [label="Debug.Assert(positionOpt < 0); 309707"];
7439 [label="if (symbol is Symbols.PublicModel.MethodSymbol && \n                ((Symbols.PublicModel.MethodSymbol)symbol).UnderlyingMethodSymbol is SynthesizedSimpleProgramEntryPointSymbol)\n            {\n                return ImmutableArray.Create<SymbolDisplayPart>(new SymbolDisplayPart(SymbolDisplayPartKind.MethodName, symbol, '<top-level-statements-entry-point>'));\n            } 309708"];
7440 [label="param Accept(SymbolVisitor visitor) 309709"];
7441 [label="param Accept(this) 309710"];
7442 [label="visitor.VisitNamespace(this); 309711"];
7443 [label="visitor.VisitNamespace(this) 309712"];
7444 [label="param VisitNamespace(INamespaceSymbol symbol) 309713"];
7445 [label="param VisitNamespace(this) 309714"];
7446 [label="if (this.IsMinimizing)\n            {\n                if (TryAddAlias(symbol, builder))\n                {\n                    return;\n                }\n\n                MinimallyQualify(symbol);\n                return;\n            } 309715"];
7447 [label="if (isFirstSymbolVisited && format.KindOptions.IncludesOption(SymbolDisplayKindOptions.IncludeNamespaceKeyword))\n            {\n                AddKeyword(SyntaxKind.NamespaceKeyword);\n                AddSpace();\n            } 309716"];
7448 [label="if (isFirstSymbolVisited && format.KindOptions.IncludesOption(SymbolDisplayKindOptions.IncludeNamespaceKeyword))\n            {\n                AddKeyword(SyntaxKind.NamespaceKeyword);\n                AddSpace();\n            } 309717"];
7449 [label="if (format.TypeQualificationStyle == SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces)\n            {\n                var containingNamespace = symbol.ContainingNamespace;\n                if (ShouldVisitNamespace(containingNamespace))\n                {\n                    containingNamespace.Accept(this.NotFirstVisitor);\n                    AddPunctuation(containingNamespace.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                }\n            } 309718"];
7450 [label="symbol.ContainingNamespace 309719"];
7451 [label="=> UnderlyingSymbol.ContainingNamespace.GetPublicSymbol() 309720"];
7452 [label="UnderlyingSymbol 309721"];
7453 [label="=> _underlying 309722"];
7454 [label="_underlying 309723"];
7455 [label="UnderlyingSymbol.ContainingNamespace 309724"];
7456 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 309725"];
7457 [label="this.ContainingSymbol 309726"];
7458 [label="get { return _containingNamespaceSymbol; } 309727"];
7459 [label="return _containingNamespaceSymbol; 309728"];
7460 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 309729"];
7461 [label="for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                } 309730"];
7462 [label="var ns = container as NamespaceSymbol; 309731"];
7463 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 309732"];
7464 [label="if ((object)ns != null)\n                    {\n                        return ns;\n                    } 309733"];
7465 [label="return ns; 309734"];
7466 [label="UnderlyingSymbol.ContainingNamespace.GetPublicSymbol() 309735"];
7467 [label="param GetPublicSymbol(this NamespaceSymbol? symbol) 309736"];
7468 [label="return symbol.GetPublicSymbol<INamespaceSymbol>(); 309737"];
7469 [label="symbol.GetPublicSymbol<INamespaceSymbol>() 309738"];
7470 [label="param GetPublicSymbol(this Symbol? symbol) 309739"];
7471 [label="param NamespaceOrTypeSymbol(this) 309740"];
7472 [label="param Symbol(this) 309741"];
7473 [label="_underlying 309742"];
7474 [label="Debug.Assert(underlying is object); 309743"];
7475 [label="var containingNamespace = symbol.ContainingNamespace; 309744"];
7476 [label="if (ShouldVisitNamespace(containingNamespace))\n                {\n                    containingNamespace.Accept(this.NotFirstVisitor);\n                    AddPunctuation(containingNamespace.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                } 309745"];
7477 [label="ShouldVisitNamespace(containingNamespace) 309746"];
7478 [label="param ShouldVisitNamespace(ISymbol containingSymbol) 309747"];
7479 [label="param ShouldVisitNamespace(this) 309748"];
7480 [label="var namespaceSymbol = containingSymbol as INamespaceSymbol; 309749"];
7481 [label="if (namespaceSymbol == null)\n            {\n                return false;\n            } 309750"];
7482 [label="if (namespaceSymbol == null)\n            {\n                return false;\n            } 309751"];
7483 [label="if (format.TypeQualificationStyle != SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces)\n            {\n                return false;\n            } 309752"];
7484 [label="namespaceSymbol.IsGlobalNamespace 309753"];
7485 [label="=> _underlying.IsGlobalNamespace 309754"];
7486 [label="_underlying.IsGlobalNamespace 309755"];
7487 [label="get\n            {\n                return true;\n            } 309756"];
7488 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 309757"];
7489 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 309758"];
7490 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 309759"];
7491 [label="if (ShouldVisitNamespace(containingNamespace))\n                {\n                    containingNamespace.Accept(this.NotFirstVisitor);\n                    AddPunctuation(containingNamespace.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                } 309760"];
7492 [label="symbol.IsGlobalNamespace 309761"];
7493 [label="=> _underlying.IsGlobalNamespace 309762"];
7494 [label="_underlying.IsGlobalNamespace 309763"];
7495 [label="get\n            {\n                return false;\n            } 309764"];
7496 [label="return false; 309765"];
7497 [label="if (symbol.IsGlobalNamespace)\n            {\n                AddGlobalNamespace(symbol);\n            }\n            else\n            {\n                builder.Add(CreatePart(SymbolDisplayPartKind.NamespaceName, symbol, symbol.Name));\n            } 309766"];
7498 [label="builder.Add(CreatePart(SymbolDisplayPartKind.NamespaceName, symbol, symbol.Name)); 309767"];
7499 [label="builder.Add(CreatePart(SymbolDisplayPartKind.NamespaceName, symbol, symbol.Name)); 309768"];
7500 [label="symbol.Name 309769"];
7501 [label="=> UnderlyingSymbol.Name 309770"];
7502 [label="=> _underlying 309771"];
7503 [label="_underlying 309772"];
7504 [label="builder.Add(CreatePart(SymbolDisplayPartKind.NamespaceName, symbol, symbol.Name)); 309773"];
7505 [label="CreatePart(SymbolDisplayPartKind.NamespaceName, symbol, symbol.Name) 309774"];
7506 [label="param CreatePart(SymbolDisplayPartKind kind) 309775"];
7507 [label="param CreatePart(ISymbol symbol) 309776"];
7508 [label="param CreatePart(string text) 309777"];
7509 [label="param CreatePart(this) 309778"];
7510 [label="visitor.VisitNamespace(this); 309779"];
7511 [label="return builder.ToImmutableAndFree(); 309780"];
7512 [label="Debug.Assert(!isTopLevel || scope.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat) == emittedTypeName.NamespaceName); 309781"];
7513 [label="Debug.Assert(!isTopLevel || scope.ToDisplayString(SymbolDisplayFormat.QualifiedNameOnlyFormat) == emittedTypeName.NamespaceName); 309782"];
7514 [label="if (emittedTypeName.IsMangled)\n            {\n                Debug.Assert(!emittedTypeName.UnmangledTypeName.Equals(emittedTypeName.TypeName) && emittedTypeName.InferredArity > 0);\n\n                if (emittedTypeName.ForcedArity == -1 || emittedTypeName.ForcedArity == emittedTypeName.InferredArity)\n                {\n                    // Let's handle mangling case first.\n                    namespaceOrTypeMembers = scope.GetTypeMembers(emittedTypeName.UnmangledTypeName);\n\n                    foreach (var named in namespaceOrTypeMembers)\n                    {\n                        if (emittedTypeName.InferredArity == named.Arity && named.MangleName)\n                        {\n                            if ((object?)namedType != null)\n                            {\n                                namedType = null;\n                                break;\n                            }\n\n                            namedType = named;\n                        }\n                    }\n                }\n            }\n            else\n            {\n                Debug.Assert(ReferenceEquals(emittedTypeName.UnmangledTypeName, emittedTypeName.TypeName) && emittedTypeName.InferredArity == 0);\n            } 309783"];
7515 [label="Debug.Assert(ReferenceEquals(emittedTypeName.UnmangledTypeName, emittedTypeName.TypeName) && emittedTypeName.InferredArity == 0); 309784"];
7516 [label="Debug.Assert(ReferenceEquals(emittedTypeName.UnmangledTypeName, emittedTypeName.TypeName) && emittedTypeName.InferredArity == 0); 309785"];
7517 [label="int forcedArity = emittedTypeName.ForcedArity; 309786"];
7518 [label="if (emittedTypeName.UseCLSCompliantNameArityEncoding)\n            {\n                // Only types with arity 0 are acceptable, we already examined types with mangled names.\n                if (emittedTypeName.InferredArity > 0)\n                {\n                    goto Done;\n                }\n                else if (forcedArity == -1)\n                {\n                    forcedArity = 0;\n                }\n                else if (forcedArity != 0)\n                {\n                    goto Done;\n                }\n                else\n                {\n                    Debug.Assert(forcedArity == emittedTypeName.InferredArity);\n                }\n            } 309787"];
7519 [label="if (emittedTypeName.InferredArity > 0)\n                {\n                    goto Done;\n                }\n                else if (forcedArity == -1)\n                {\n                    forcedArity = 0;\n                }\n                else if (forcedArity != 0)\n                {\n                    goto Done;\n                }\n                else\n                {\n                    Debug.Assert(forcedArity == emittedTypeName.InferredArity);\n                } 309788"];
7520 [label="if (forcedArity == -1)\n                {\n                    forcedArity = 0;\n                }\n                else if (forcedArity != 0)\n                {\n                    goto Done;\n                }\n                else\n                {\n                    Debug.Assert(forcedArity == emittedTypeName.InferredArity);\n                } 309789"];
7521 [label="if (forcedArity == -1)\n                {\n                    forcedArity = 0;\n                }\n                else if (forcedArity != 0)\n                {\n                    goto Done;\n                }\n                else\n                {\n                    Debug.Assert(forcedArity == emittedTypeName.InferredArity);\n                } 309790"];
7522 [label="forcedArity = 0; 309791"];
7523 [label="namespaceOrTypeMembers = scope.GetTypeMembers(emittedTypeName.TypeName); 309792"];
7524 [label="scope.GetTypeMembers(emittedTypeName.TypeName) 309793"];
7525 [label="param GetTypeMembers(string name) 309794"];
7526 [label="param GetTypeMembers(this) 309795"];
7527 [label="EnsureAllMembersLoaded() 309796"];
7528 [label="param EnsureAllMembersLoaded(this) 309797"];
7529 [label="var typesByNS = _typesByNS; 309798"];
7530 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                System.Diagnostics.Debug.Assert(typesByNS != null);\n                LoadAllMembers(typesByNS);\n                Interlocked.Exchange(ref _typesByNS, null);\n            } 309799"];
7531 [label="if (lazyTypes == null || lazyNamespaces == null)\n            {\n                System.Diagnostics.Debug.Assert(typesByNS != null);\n                LoadAllMembers(typesByNS);\n                Interlocked.Exchange(ref _typesByNS, null);\n            } 309800"];
7532 [label="System.Diagnostics.Debug.Assert(typesByNS != null); 309801"];
7533 [label="System.Diagnostics.Debug.Assert(typesByNS != null); 309802"];
7534 [label="LoadAllMembers(typesByNS); 309803"];
7535 [label="LoadAllMembers(typesByNS) 309804"];
7536 [label="param LoadAllMembers(IEnumerable<IGrouping<string, TypeDefinitionHandle>> typesByNS) 309805"];
7537 [label="Debug.Assert(typesByNS != null); 309806"];
7538 [label="Debug.Assert(typesByNS != null); 309807"];
7539 [label="get\n            {\n                return false;\n            } 309808"];
7540 [label="GetQualifiedNameLength() 309809"];
7541 [label="param GetQualifiedNameLength(this) 309810"];
7542 [label="this.Name 309811"];
7543 [label="get\n            {\n                return _name;\n            } 309812"];
7544 [label="int length = this.Name.Length; 309813"];
7545 [label="ContainingNamespace 309814"];
7546 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 309815"];
7547 [label="var parent = ContainingNamespace; 309816"];
7548 [label=".IsGlobalNamespace 309817"];
7549 [label="get\n            {\n                return true;\n            } 309818"];
7550 [label="while (parent?.IsGlobalNamespace == false)\n            {\n                // add name of the parent + '.'\n                length += parent.Name.Length + 1;\n                parent = parent.ContainingNamespace;\n            } 309819"];
7551 [label="while (parent?.IsGlobalNamespace == false)\n            {\n                // add name of the parent + '.'\n                length += parent.Name.Length + 1;\n                parent = parent.ContainingNamespace;\n            } 309820"];
7552 [label="return length; 309821"];
7553 [label="MetadataHelpers.GetInfoForImmediateNamespaceMembers(\n                isGlobalNamespace,\n                isGlobalNamespace ? 0 : GetQualifiedNameLength(),\n                typesByNS,\n                StringComparer.Ordinal,\n                out nestedTypes, out nestedNamespaces); 309822"];
7554 [label="_containingNamespaceSymbol 309823"];
7555 [label="_name 309824"];
7556 [label="_typesByNS 309825"];
7557 [label="Debug.Assert(name != null); 309826"];
7558 [label="Debug.Assert((object)containingNamespace != null); 309827"];
7559 [label="Debug.Assert(typesByNS != null); 309828"];
7560 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 309829"];
7561 [label="_containingNamespaceSymbol.ContainingPEModule 309830"];
7562 [label="get\n            {\n                return _moduleSymbol;\n            } 309831"];
7563 [label="return _containingNamespaceSymbol.ContainingPEModule; 309832"];
7564 [label="Dictionary<string, TypeDefinitionHandle> noPiaLocalTypes = null; 309833"];
7565 [label="genericParameterHandles 309834"];
7566 [label="BadImageFormatException mrEx = null; 309835"];
7567 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 309836"];
7568 [label="param GetGenericInfo(out ushort arity) 309837"];
7569 [label="param GetGenericInfo(out BadImageFormatException mrEx) 309838"];
7570 [label="mrEx = null; 309839"];
7571 [label="PENamedTypeSymbol result; 309840"];
7572 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 309841"];
7573 [label="mangleName 309842"];
7574 [label="param PENamedTypeSymbol(out bool mangleName) 309843"];
7575 [label="_lazyTupleData 309844"];
7576 [label="_container 309845"];
7577 [label="_name 309846"];
7578 [label="_flags 309847"];
7579 [label="_corTypeId 309848"];
7580 [label="Debug.Assert(!handle.IsNil); 309849"];
7581 [label="Debug.Assert((object)container != null); 309850"];
7582 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 309851"];
7583 [label="string metadataName; 309852"];
7584 [label="bool makeBad = false; 309853"];
7585 [label="mangleName = false; 309854"];
7586 [label="Accessibility access = Accessibility.Private; 309855"];
7587 [label="access = Accessibility.Public; 309856"];
7588 [label="_corTypeId = SpecialTypes.GetTypeFromMetadataName(MetadataHelpers.BuildQualifiedName(emittedNamespaceName, metadataName)); 309857"];
7589 [label="_corTypeId 309858"];
7590 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 309859"];
7591 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309860"];
7592 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309861"];
7593 [label="genericParameterHandles 309862"];
7594 [label="BadImageFormatException mrEx = null; 309863"];
7595 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 309864"];
7596 [label="param GetGenericInfo(out ushort arity) 309865"];
7597 [label="param GetGenericInfo(out BadImageFormatException mrEx) 309866"];
7598 [label="mrEx = null; 309867"];
7599 [label="PENamedTypeSymbol result; 309868"];
7600 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 309869"];
7601 [label="mangleName 309870"];
7602 [label="param PENamedTypeSymbol(out bool mangleName) 309871"];
7603 [label="_lazyTupleData 309872"];
7604 [label="_container 309873"];
7605 [label="_name 309874"];
7606 [label="_flags 309875"];
7607 [label="_corTypeId 309876"];
7608 [label="Debug.Assert(!handle.IsNil); 309877"];
7609 [label="Debug.Assert((object)container != null); 309878"];
7610 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 309879"];
7611 [label="string metadataName; 309880"];
7612 [label="bool makeBad = false; 309881"];
7613 [label="mangleName = false; 309882"];
7614 [label="Accessibility access = Accessibility.Private; 309883"];
7615 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 309884"];
7616 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309885"];
7617 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309886"];
7618 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 309887"];
7619 [label="param GetGenericInfo(out ushort arity) 309888"];
7620 [label="param PENamedTypeSymbolNonGeneric(out bool mangleName) 309889"];
7621 [label="mangleName 309890"];
7622 [label="param PENamedTypeSymbol(out bool mangleName) 309891"];
7623 [label="_lazyTupleData 309892"];
7624 [label="_container 309893"];
7625 [label="_name 309894"];
7626 [label="_flags 309895"];
7627 [label="_corTypeId 309896"];
7628 [label="Debug.Assert(!handle.IsNil); 309897"];
7629 [label="Debug.Assert((object)container != null); 309898"];
7630 [label="Debug.Assert(arity == 0 || this is PENamedTypeSymbolGeneric); 309899"];
7631 [label="string metadataName; 309900"];
7632 [label="bool makeBad = false; 309901"];
7633 [label="mangleName = false; 309902"];
7634 [label="Accessibility access = Accessibility.Private; 309903"];
7635 [label="if (makeBad)\n            {\n                _lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n            } 309904"];
7636 [label="genericParameterHandles 309905"];
7637 [label="param GetGenericInfo(out GenericParameterHandleCollection genericParameterHandles) 309906"];
7638 [label="param GetGenericInfo(out ushort arity) 309907"];
7639 [label="param GetGenericInfo(out BadImageFormatException mrEx) 309908"];
7640 [label="mrEx = null; 309909"];
7641 [label="PENamedTypeSymbol result; 309910"];
7642 [label="Debug.Assert(!handle.IsNil); 309911"];
7643 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309912"];
7644 [label="if (mrEx != null)\n            {\n                result._lazyUseSiteDiagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, result);\n            } 309913"];
7645 [label="param PENamedTypeSymbolGeneric(out bool mangleName) 309914"];
7646 [label="mangleName 309915"];
7647 [label="param PENamedTypeSymbol(out bool mangleName) 309916"];
7648 [label="Debug.Assert(ReferenceEquals(_name, metadataName) == (_name == metadataName)); 309917"];
7649 [label="_arity 309918"];
7650 [label="_mangleName 309919"];
7651 [label="Debug.Assert(genericParameterHandles.Count > 0); 309920"];
7652 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 309921"];
7653 [label="if (noPiaLocalTypes != null)\n                {\n                    Interlocked.CompareExchange(ref _lazyNoPiaLocalTypes, noPiaLocalTypes, null);\n                } 309922"];
7654 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 309923"];
7655 [label="_assemblySymbol.KeepLookingForDeclaredSpecialTypes 309924"];
7656 [label="bool keepLookingForDeclaredCorTypes = (_ordinal == 0 && _assemblySymbol.KeepLookingForDeclaredSpecialTypes); 309925"];
7657 [label="bool added; 309926"];
7658 [label="Debug.Assert(added); 309927"];
7659 [label="type.SpecialType 309928"];
7660 [label="get\n            {\n                return _corTypeId;\n            } 309929"];
7661 [label="return _corTypeId; 309930"];
7662 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 309931"];
7663 [label="if (keepLookingForDeclaredCorTypes && type.SpecialType != SpecialType.None)\n                    {\n                        _assemblySymbol.RegisterDeclaredSpecialType(type);\n                        keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes;\n                    } 309932"];
7664 [label="_assemblySymbol.RegisterDeclaredSpecialType(type); 309933"];
7665 [label="_assemblySymbol.RegisterDeclaredSpecialType(type) 309934"];
7666 [label="param RegisterDeclaredSpecialType(NamedTypeSymbol corType) 309935"];
7667 [label="param RegisterDeclaredSpecialType(this) 309936"];
7668 [label="corType.SpecialType 309937"];
7669 [label="get\n            {\n                return _corTypeId;\n            } 309938"];
7670 [label="SpecialType typeId = corType.SpecialType; 309939"];
7671 [label="Debug.Assert(typeId != SpecialType.None); 309940"];
7672 [label="corType.ContainingAssembly 309941"];
7673 [label="get\n            {\n                // Default implementation gets the containers assembly.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingAssembly : null;\n            } 309942"];
7674 [label="this.ContainingSymbol 309943"];
7675 [label="get\n            {\n                return _container;\n            } 309944"];
7676 [label="return _container; 309945"];
7677 [label="var container = this.ContainingSymbol; 309946"];
7678 [label="return (object)container != null ? container.ContainingAssembly : null; 309947"];
7679 [label="return (object)container != null ? container.ContainingAssembly : null; 309948"];
7680 [label="(object)container != null 309949"];
7681 [label="container.ContainingAssembly 309950"];
7682 [label="get\n            {\n                return ContainingPEModule.ContainingAssembly;\n            } 309951"];
7683 [label="ContainingPEModule 309952"];
7684 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 309953"];
7685 [label="return ContainingPEModule.ContainingAssembly; 309954"];
7686 [label="ContainingPEModule.ContainingAssembly 309955"];
7687 [label="get\n            {\n                return _assemblySymbol;\n            } 309956"];
7688 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 309957"];
7689 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 309958"];
7690 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 309959"];
7691 [label="corType.ContainingModule 309960"];
7692 [label="get\n            {\n                return ContainingPEModule;\n            } 309961"];
7693 [label="ContainingPEModule 309962"];
7694 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 309963"];
7695 [label="Symbol s = _container; 309964"];
7696 [label="s.Kind 309965"];
7697 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 309966"];
7698 [label="return SymbolKind.Namespace; 309967"];
7699 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 309968"];
7700 [label="((PENamespaceSymbol)s).ContainingPEModule 309969"];
7701 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 309970"];
7702 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 309971"];
7703 [label="return ContainingPEModule; 309972"];
7704 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 309973"];
7705 [label="corType.ContainingModule.Ordinal 309974"];
7706 [label="get\n            {\n                return _ordinal;\n            } 309975"];
7707 [label="return _ordinal; 309976"];
7708 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 309977"];
7709 [label="this.CorLibrary 309978"];
7710 [label="get\n            {\n                return _corLibrary;\n            } 309979"];
7711 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 309980"];
7712 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 309981"];
7713 [label="if (_lazySpecialTypes == null)\n            {\n                Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null);\n            } 309982"];
7714 [label="if (_lazySpecialTypes == null)\n            {\n                Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null);\n            } 309983"];
7715 [label="Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null); 309984"];
7716 [label="Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null); 309985"];
7717 [label="if ((object)Interlocked.CompareExchange(ref _lazySpecialTypes[(int)typeId], corType, null) != null)\n            {\n                Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType));\n            }\n            else\n            {\n                Interlocked.Increment(ref _cachedSpecialTypes);\n                Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count);\n            } 309986"];
7718 [label="if ((object)Interlocked.CompareExchange(ref _lazySpecialTypes[(int)typeId], corType, null) != null)\n            {\n                Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType));\n            }\n            else\n            {\n                Interlocked.Increment(ref _cachedSpecialTypes);\n                Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count);\n            } 309987"];
7719 [label="if ((object)Interlocked.CompareExchange(ref _lazySpecialTypes[(int)typeId], corType, null) != null)\n            {\n                Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType));\n            }\n            else\n            {\n                Interlocked.Increment(ref _cachedSpecialTypes);\n                Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count);\n            } 309988"];
7720 [label="Interlocked.Increment(ref _cachedSpecialTypes); 309989"];
7721 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 309990"];
7722 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 309991"];
7723 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 309992"];
7724 [label="_assemblySymbol.RegisterDeclaredSpecialType(type); 309993"];
7725 [label="_assemblySymbol.KeepLookingForDeclaredSpecialTypes 309994"];
7726 [label="get\n            {\n                return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count;\n            } 309995"];
7727 [label="return ReferenceEquals(this.CorLibrary, this) && _cachedSpecialTypes < (int)SpecialType.Count; 309996"];
7728 [label="keepLookingForDeclaredCorTypes = _assemblySymbol.KeepLookingForDeclaredSpecialTypes; 309997"];
7729 [label="bool added; 309998"];
7730 [label="Debug.Assert(added); 309999"];
7731 [label="Debug.Assert(typeId != SpecialType.None); 310000"];
7732 [label="corType.ContainingAssembly 310001"];
7733 [label="get\n            {\n                // Default implementation gets the containers assembly.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingAssembly : null;\n            } 310002"];
7734 [label="this.ContainingSymbol 310003"];
7735 [label="get\n            {\n                return _container;\n            } 310004"];
7736 [label="return _container; 310005"];
7737 [label="var container = this.ContainingSymbol; 310006"];
7738 [label="return (object)container != null ? container.ContainingAssembly : null; 310007"];
7739 [label="return (object)container != null ? container.ContainingAssembly : null; 310008"];
7740 [label="(object)container != null 310009"];
7741 [label="container.ContainingAssembly 310010"];
7742 [label="get\n            {\n                return ContainingPEModule.ContainingAssembly;\n            } 310011"];
7743 [label="ContainingPEModule 310012"];
7744 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 310013"];
7745 [label="return ContainingPEModule.ContainingAssembly; 310014"];
7746 [label="ContainingPEModule.ContainingAssembly 310015"];
7747 [label="get\n            {\n                return _assemblySymbol;\n            } 310016"];
7748 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 310017"];
7749 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 310018"];
7750 [label="corType.ContainingModule 310019"];
7751 [label="get\n            {\n                return ContainingPEModule;\n            } 310020"];
7752 [label="ContainingPEModule 310021"];
7753 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 310022"];
7754 [label="Symbol s = _container; 310023"];
7755 [label="s.Kind 310024"];
7756 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310025"];
7757 [label="return SymbolKind.Namespace; 310026"];
7758 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 310027"];
7759 [label="((PENamespaceSymbol)s).ContainingPEModule 310028"];
7760 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 310029"];
7761 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 310030"];
7762 [label="return ContainingPEModule; 310031"];
7763 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 310032"];
7764 [label="corType.ContainingModule.Ordinal 310033"];
7765 [label="get\n            {\n                return _ordinal;\n            } 310034"];
7766 [label="return _ordinal; 310035"];
7767 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 310036"];
7768 [label="this.CorLibrary 310037"];
7769 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 310038"];
7770 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 310039"];
7771 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 310040"];
7772 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 310041"];
7773 [label="bool added; 310042"];
7774 [label="Debug.Assert(added); 310043"];
7775 [label="Debug.Assert(typeId != SpecialType.None); 310044"];
7776 [label="corType.ContainingAssembly 310045"];
7777 [label="get\n            {\n                // Default implementation gets the containers assembly.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingAssembly : null;\n            } 310046"];
7778 [label="this.ContainingSymbol 310047"];
7779 [label="get\n            {\n                return _container;\n            } 310048"];
7780 [label="return _container; 310049"];
7781 [label="var container = this.ContainingSymbol; 310050"];
7782 [label="return (object)container != null ? container.ContainingAssembly : null; 310051"];
7783 [label="return (object)container != null ? container.ContainingAssembly : null; 310052"];
7784 [label="(object)container != null 310053"];
7785 [label="container.ContainingAssembly 310054"];
7786 [label="get\n            {\n                return ContainingPEModule.ContainingAssembly;\n            } 310055"];
7787 [label="ContainingPEModule 310056"];
7788 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 310057"];
7789 [label="return ContainingPEModule.ContainingAssembly; 310058"];
7790 [label="ContainingPEModule.ContainingAssembly 310059"];
7791 [label="get\n            {\n                return _assemblySymbol;\n            } 310060"];
7792 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 310061"];
7793 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 310062"];
7794 [label="corType.ContainingModule 310063"];
7795 [label="get\n            {\n                return ContainingPEModule;\n            } 310064"];
7796 [label="ContainingPEModule 310065"];
7797 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 310066"];
7798 [label="Symbol s = _container; 310067"];
7799 [label="s.Kind 310068"];
7800 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310069"];
7801 [label="return SymbolKind.Namespace; 310070"];
7802 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 310071"];
7803 [label="((PENamespaceSymbol)s).ContainingPEModule 310072"];
7804 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 310073"];
7805 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 310074"];
7806 [label="return ContainingPEModule; 310075"];
7807 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 310076"];
7808 [label="corType.ContainingModule.Ordinal 310077"];
7809 [label="get\n            {\n                return _ordinal;\n            } 310078"];
7810 [label="return _ordinal; 310079"];
7811 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 310080"];
7812 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 310081"];
7813 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 310082"];
7814 [label="Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count); 310083"];
7815 [label="bool added; 310084"];
7816 [label="Debug.Assert(added); 310085"];
7817 [label="return _container; 310086"];
7818 [label="var container = this.ContainingSymbol; 310087"];
7819 [label="return (object)container != null ? container.ContainingAssembly : null; 310088"];
7820 [label="(object)container != null 310089"];
7821 [label="container.ContainingAssembly 310090"];
7822 [label="get\n            {\n                return ContainingPEModule.ContainingAssembly;\n            } 310091"];
7823 [label="ContainingPEModule 310092"];
7824 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 310093"];
7825 [label="return ContainingPEModule.ContainingAssembly; 310094"];
7826 [label="ContainingPEModule.ContainingAssembly 310095"];
7827 [label="get\n            {\n                return _assemblySymbol;\n            } 310096"];
7828 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 310097"];
7829 [label="Symbol s = _container; 310098"];
7830 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310099"];
7831 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 310100"];
7832 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 310101"];
7833 [label="return ContainingPEModule; 310102"];
7834 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 310103"];
7835 [label="get\n            {\n                return _ordinal;\n            } 310104"];
7836 [label="return _ordinal; 310105"];
7837 [label="LoadAllMembers(typesByNS); 310106"];
7838 [label="Interlocked.Exchange(ref _typesByNS, null); 310107"];
7839 [label="Interlocked.Exchange(ref _typesByNS, null); 310108"];
7840 [label="EnsureAllMembersLoaded(); 310109"];
7841 [label="ImmutableArray<PENamedTypeSymbol> t; 310110"];
7842 [label="t 310111"];
7843 [label="return lazyTypes.TryGetValue(name, out t)\n                ? StaticCast<NamedTypeSymbol>.From(t)\n                : ImmutableArray<NamedTypeSymbol>.Empty; 310112"];
7844 [label="return lazyTypes.TryGetValue(name, out t)\n                ? StaticCast<NamedTypeSymbol>.From(t)\n                : ImmutableArray<NamedTypeSymbol>.Empty; 310113"];
7845 [label="return lazyTypes.TryGetValue(name, out t)\n                ? StaticCast<NamedTypeSymbol>.From(t)\n                : ImmutableArray<NamedTypeSymbol>.Empty; 310114"];
7846 [label="lazyTypes.TryGetValue(name, out t) 310115"];
7847 [label="foreach (var named in namespaceOrTypeMembers)\n            {\n                if (!named.MangleName && (forcedArity == -1 || forcedArity == named.Arity))\n                {\n                    if ((object?)namedType != null)\n                    {\n                        namedType = null;\n                        break;\n                    }\n\n                    namedType = named;\n                }\n            } 310116"];
7848 [label="named.MangleName 310117"];
7849 [label="get\n                {\n                    return false;\n                } 310118"];
7850 [label="return false; 310119"];
7851 [label="if (!named.MangleName && (forcedArity == -1 || forcedArity == named.Arity))\n                {\n                    if ((object?)namedType != null)\n                    {\n                        namedType = null;\n                        break;\n                    }\n\n                    namedType = named;\n                } 310120"];
7852 [label="if (!named.MangleName && (forcedArity == -1 || forcedArity == named.Arity))\n                {\n                    if ((object?)namedType != null)\n                    {\n                        namedType = null;\n                        break;\n                    }\n\n                    namedType = named;\n                } 310121"];
7853 [label="if (!named.MangleName && (forcedArity == -1 || forcedArity == named.Arity))\n                {\n                    if ((object?)namedType != null)\n                    {\n                        namedType = null;\n                        break;\n                    }\n\n                    namedType = named;\n                } 310122"];
7854 [label="named.Arity 310123"];
7855 [label="get\n                {\n                    return 0;\n                } 310124"];
7856 [label="return 0; 310125"];
7857 [label="if (!named.MangleName && (forcedArity == -1 || forcedArity == named.Arity))\n                {\n                    if ((object?)namedType != null)\n                    {\n                        namedType = null;\n                        break;\n                    }\n\n                    namedType = named;\n                } 310126"];
7858 [label="if (!named.MangleName && (forcedArity == -1 || forcedArity == named.Arity))\n                {\n                    if ((object?)namedType != null)\n                    {\n                        namedType = null;\n                        break;\n                    }\n\n                    namedType = named;\n                } 310127"];
7859 [label="if (!named.MangleName && (forcedArity == -1 || forcedArity == named.Arity))\n                {\n                    if ((object?)namedType != null)\n                    {\n                        namedType = null;\n                        break;\n                    }\n\n                    namedType = named;\n                } 310128"];
7860 [label="if ((object?)namedType != null)\n                    {\n                        namedType = null;\n                        break;\n                    } 310129"];
7861 [label="if ((object?)namedType != null)\n                    {\n                        namedType = null;\n                        break;\n                    } 310130"];
7862 [label="namedType = named; 310131"];
7863 [label="if ((object?)namedType == null)\n            {\n                if (isTopLevel)\n                {\n                    return new MissingMetadataTypeSymbol.TopLevel(scope.ContainingModule, ref emittedTypeName);\n                }\n                else\n                {\n                    return new MissingMetadataTypeSymbol.Nested((NamedTypeSymbol)scope, ref emittedTypeName);\n                }\n            } 310132"];
7864 [label="if ((object?)namedType == null)\n            {\n                if (isTopLevel)\n                {\n                    return new MissingMetadataTypeSymbol.TopLevel(scope.ContainingModule, ref emittedTypeName);\n                }\n                else\n                {\n                    return new MissingMetadataTypeSymbol.Nested((NamedTypeSymbol)scope, ref emittedTypeName);\n                }\n            } 310133"];
7865 [label="return namedType; 310134"];
7866 [label="Debug.Assert((object)result != null); 310135"];
7867 [label="Debug.Assert((object)result != null); 310136"];
7868 [label="return result; 310137"];
7869 [label="result.Kind 310138"];
7870 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 310139"];
7871 [label="if (result.Kind != SymbolKind.ErrorType && result.DeclaredAccessibility != Accessibility.Public)\n                {\n                    result = new MissingMetadataTypeSymbol.TopLevel(module, ref emittedName, type);\n                } 310140"];
7872 [label="result.DeclaredAccessibility 310141"];
7873 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 310142"];
7874 [label="Accessibility access = Accessibility.Private; 310143"];
7875 [label="if (result.Kind != SymbolKind.ErrorType && result.DeclaredAccessibility != Accessibility.Public)\n                {\n                    result = new MissingMetadataTypeSymbol.TopLevel(module, ref emittedName, type);\n                } 310144"];
7876 [label="if (result.Kind != SymbolKind.ErrorType && result.DeclaredAccessibility != Accessibility.Public)\n                {\n                    result = new MissingMetadataTypeSymbol.TopLevel(module, ref emittedName, type);\n                } 310145"];
7877 [label="RegisterDeclaredSpecialType(result); 310146"];
7878 [label="RegisterDeclaredSpecialType(result) 310147"];
7879 [label="param RegisterDeclaredSpecialType(NamedTypeSymbol corType) 310148"];
7880 [label="param RegisterDeclaredSpecialType(this) 310149"];
7881 [label="corType.SpecialType 310150"];
7882 [label="Debug.Assert(typeId != SpecialType.None); 310151"];
7883 [label="corType.ContainingAssembly 310152"];
7884 [label="get\n            {\n                // Default implementation gets the containers assembly.\n\n                var container = this.ContainingSymbol;\n                return (object)container != null ? container.ContainingAssembly : null;\n            } 310153"];
7885 [label="this.ContainingSymbol 310154"];
7886 [label="get\n            {\n                return _container;\n            } 310155"];
7887 [label="return _container; 310156"];
7888 [label="var container = this.ContainingSymbol; 310157"];
7889 [label="return (object)container != null ? container.ContainingAssembly : null; 310158"];
7890 [label="return (object)container != null ? container.ContainingAssembly : null; 310159"];
7891 [label="(object)container != null 310160"];
7892 [label="container.ContainingAssembly 310161"];
7893 [label="get\n            {\n                return ContainingPEModule.ContainingAssembly;\n            } 310162"];
7894 [label="ContainingPEModule 310163"];
7895 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 310164"];
7896 [label="return ContainingPEModule.ContainingAssembly; 310165"];
7897 [label="ContainingPEModule.ContainingAssembly 310166"];
7898 [label="get\n            {\n                return _assemblySymbol;\n            } 310167"];
7899 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 310168"];
7900 [label="Debug.Assert(ReferenceEquals(corType.ContainingAssembly, this)); 310169"];
7901 [label="corType.ContainingModule 310170"];
7902 [label="get\n            {\n                return ContainingPEModule;\n            } 310171"];
7903 [label="ContainingPEModule 310172"];
7904 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 310173"];
7905 [label="Symbol s = _container; 310174"];
7906 [label="s.Kind 310175"];
7907 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310176"];
7908 [label="return SymbolKind.Namespace; 310177"];
7909 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 310178"];
7910 [label="((PENamespaceSymbol)s).ContainingPEModule 310179"];
7911 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 310180"];
7912 [label="_containingNamespaceSymbol.ContainingPEModule 310181"];
7913 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 310182"];
7914 [label="return ContainingPEModule; 310183"];
7915 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 310184"];
7916 [label="corType.ContainingModule.Ordinal 310185"];
7917 [label="get\n            {\n                return _ordinal;\n            } 310186"];
7918 [label="return _ordinal; 310187"];
7919 [label="Debug.Assert(corType.ContainingModule.Ordinal == 0); 310188"];
7920 [label="this.CorLibrary 310189"];
7921 [label="get\n            {\n                return _corLibrary;\n            } 310190"];
7922 [label="return _corLibrary; 310191"];
7923 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 310192"];
7924 [label="Debug.Assert(ReferenceEquals(this.CorLibrary, this)); 310193"];
7925 [label="if (_lazySpecialTypes == null)\n            {\n                Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null);\n            } 310194"];
7926 [label="if (_lazySpecialTypes == null)\n            {\n                Interlocked.CompareExchange(ref _lazySpecialTypes,\n                    new NamedTypeSymbol[(int)SpecialType.Count + 1], null);\n            } 310195"];
7927 [label="if ((object)Interlocked.CompareExchange(ref _lazySpecialTypes[(int)typeId], corType, null) != null)\n            {\n                Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType));\n            }\n            else\n            {\n                Interlocked.Increment(ref _cachedSpecialTypes);\n                Debug.Assert(_cachedSpecialTypes > 0 && _cachedSpecialTypes <= (int)SpecialType.Count);\n            } 310196"];
7928 [label="Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType)); 310197"];
7929 [label="Debug.Assert(ReferenceEquals(corType, _lazySpecialTypes[(int)typeId]) ||\n                                        (corType.Kind == SymbolKind.ErrorType &&\n                                        _lazySpecialTypes[(int)typeId].Kind == SymbolKind.ErrorType)); 310198"];
7930 [label="RegisterDeclaredSpecialType(result); 310199"];
7931 [label="return _lazySpecialTypes[(int)type]; 310200"];
7932 [label="result.SpecialType 310201"];
7933 [label="get\n            {\n                return _corTypeId;\n            } 310202"];
7934 [label="Debug.Assert(result.SpecialType == specialType); 310203"];
7935 [label="return result; 310204"];
7936 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 310205"];
7937 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 310206"];
7938 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 310207"];
7939 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 310208"];
7940 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node); 310209"];
7941 [label="ReportUseSiteDiagnostics(typeSymbol, diagnostics, node) 310210"];
7942 [label="param ReportUseSiteDiagnostics(Symbol symbol) 310211"];
7943 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 310212"];
7944 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 310213"];
7945 [label="symbol.GetUseSiteDiagnostic() 310214"];
7946 [label="param GetUseSiteDiagnostic(this) 310215"];
7947 [label="if (ReferenceEquals(_lazyUseSiteDiagnostic, CSDiagnosticInfo.EmptyErrorInfo))\n            {\n                _lazyUseSiteDiagnostic = GetUseSiteDiagnosticImpl();\n            } 310216"];
7948 [label="if (ReferenceEquals(_lazyUseSiteDiagnostic, CSDiagnosticInfo.EmptyErrorInfo))\n            {\n                _lazyUseSiteDiagnostic = GetUseSiteDiagnosticImpl();\n            } 310217"];
7949 [label="GetUseSiteDiagnosticImpl() 310218"];
7950 [label="param GetUseSiteDiagnosticImpl(this) 310219"];
7951 [label="DiagnosticInfo diagnostic = null; 310220"];
7952 [label="if (!MergeUseSiteDiagnostics(ref diagnostic, CalculateUseSiteDiagnostic()))\n            {\n                // Check if this type is marked by RequiredAttribute attribute.\n                // If so mark the type as bad, because it relies upon semantics that are not understood by the C# compiler.\n                if (this.ContainingPEModule.Module.HasRequiredAttributeAttribute(_handle))\n                {\n                    diagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n                }\n                else if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                }\n            } 310221"];
7953 [label="CalculateUseSiteDiagnostic() 310222"];
7954 [label="param CalculateUseSiteDiagnostic(this) 310223"];
7955 [label="DiagnosticInfo result = null; 310224"];
7956 [label="if (MergeUseSiteDiagnostics(ref result, DeriveUseSiteDiagnosticFromBase()))\n            {\n                return result;\n            } 310225"];
7957 [label="DeriveUseSiteDiagnosticFromBase() 310226"];
7958 [label="param DeriveUseSiteDiagnosticFromBase(this) 310227"];
7959 [label="this.BaseTypeNoUseSiteDiagnostics 310228"];
7960 [label="get\n            {\n                if (ReferenceEquals(_lazyBaseType, ErrorTypeSymbol.UnknownResultType))\n                {\n                    Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType);\n                }\n\n                return _lazyBaseType;\n            } 310229"];
7961 [label="if (ReferenceEquals(_lazyBaseType, ErrorTypeSymbol.UnknownResultType))\n                {\n                    Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType);\n                } 310230"];
7962 [label="if (ReferenceEquals(_lazyBaseType, ErrorTypeSymbol.UnknownResultType))\n                {\n                    Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType);\n                } 310231"];
7963 [label="Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType); 310232"];
7964 [label="MakeAcyclicBaseType() 310233"];
7965 [label="param MakeAcyclicBaseType(this) 310234"];
7966 [label="NamedTypeSymbol declaredBase = GetDeclaredBaseType(null); 310235"];
7967 [label="GetDeclaredBaseType(null) 310236"];
7968 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 310237"];
7969 [label="param GetDeclaredBaseType(this) 310238"];
7970 [label="return GetDeclaredBaseType(skipTransformsIfNecessary: false); 310239"];
7971 [label="GetDeclaredBaseType(skipTransformsIfNecessary: false) 310240"];
7972 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 310241"];
7973 [label="param GetDeclaredBaseType(this) 310242"];
7974 [label="if (ReferenceEquals(_lazyDeclaredBaseType, ErrorTypeSymbol.UnknownResultType))\n            {\n                var baseType = MakeDeclaredBaseType();\n                if (baseType is object)\n                {\n                    if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    }\n\n                    var moduleSymbol = ContainingPEModule;\n                    TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol);\n                    decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol);\n                    decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol);\n                    baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type;\n                }\n\n                Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType);\n            } 310243"];
7975 [label="if (ReferenceEquals(_lazyDeclaredBaseType, ErrorTypeSymbol.UnknownResultType))\n            {\n                var baseType = MakeDeclaredBaseType();\n                if (baseType is object)\n                {\n                    if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    }\n\n                    var moduleSymbol = ContainingPEModule;\n                    TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol);\n                    decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol);\n                    decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol);\n                    baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type;\n                }\n\n                Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType);\n            } 310244"];
7976 [label="MakeDeclaredBaseType() 310245"];
7977 [label="param MakeDeclaredBaseType(this) 310246"];
7978 [label="if (!_flags.IsInterface())\n            {\n                try\n                {\n                    var moduleSymbol = ContainingPEModule;\n                    EntityHandle token = moduleSymbol.Module.GetBaseTypeOfTypeOrThrow(_handle);\n                    if (!token.IsNil)\n                    {\n                        return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token);\n                    }\n                }\n                catch (BadImageFormatException mrEx)\n                {\n                    return new UnsupportedMetadataTypeSymbol(mrEx);\n                }\n            } 310247"];
7979 [label="ContainingPEModule 310248"];
7980 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 310249"];
7981 [label="Symbol s = _container; 310250"];
7982 [label="s.Kind 310251"];
7983 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310252"];
7984 [label="return SymbolKind.Namespace; 310253"];
7985 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 310254"];
7986 [label="((PENamespaceSymbol)s).ContainingPEModule 310255"];
7987 [label="get { return _containingNamespaceSymbol.ContainingPEModule; } 310256"];
7988 [label="return ((PENamespaceSymbol)s).ContainingPEModule; 310257"];
7989 [label="var moduleSymbol = ContainingPEModule; 310258"];
7990 [label="moduleSymbol.Module 310259"];
7991 [label="get\n            {\n                return _module;\n            } 310260"];
7992 [label="EntityHandle token = moduleSymbol.Module.GetBaseTypeOfTypeOrThrow(_handle); 310261"];
7993 [label="EntityHandle token = moduleSymbol.Module.GetBaseTypeOfTypeOrThrow(_handle); 310262"];
7994 [label="if (!token.IsNil)\n                    {\n                        return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token);\n                    } 310263"];
7995 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 310264"];
7996 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 310265"];
7997 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 310266"];
7998 [label="new MetadataDecoder(moduleSymbol, this) 310267"];
7999 [label="param MetadataDecoder(PEModuleSymbol moduleSymbol) 310268"];
8000 [label="param MetadataDecoder(PENamedTypeSymbol context) 310269"];
8001 [label="param MetadataDecoder(this) 310270"];
8002 [label="moduleSymbol 310271"];
8003 [label="context 310272"];
8004 [label="null 310273"];
8005 [label="param MetadataDecoder(this) 310274"];
8006 [label="param MetadataDecoder(PEModuleSymbol moduleSymbol) 310275"];
8007 [label="param MetadataDecoder(PENamedTypeSymbol typeContextOpt) 310276"];
8008 [label="param MetadataDecoder(PEMethodSymbol methodContextOpt) 310277"];
8009 [label="param MetadataDecoder(this) 310278"];
8010 [label="moduleSymbol.Module 310279"];
8011 [label="get\n            {\n                return _module;\n            } 310280"];
8012 [label="moduleSymbol.ContainingAssembly 310281"];
8013 [label="get\n            {\n                return _assemblySymbol;\n            } 310282"];
8014 [label="(moduleSymbol.ContainingAssembly is PEAssemblySymbol) 310283"];
8015 [label="moduleSymbol.ContainingAssembly 310284"];
8016 [label="moduleSymbol.ContainingAssembly.Identity 310285"];
8017 [label="get\n            {\n                return _assembly.Identity;\n            } 310286"];
8018 [label="return _assembly.Identity; 310287"];
8019 [label="new SymbolFactory() 310288"];
8020 [label="param SymbolFactory(this) 310289"];
8021 [label="Instance = new SymbolFactory() 310290"];
8022 [label="SymbolFactory.Instance 310291"];
8023 [label="moduleSymbol 310292"];
8024 [label="param MetadataDecoder(this) 310293"];
8025 [label="param MetadataDecoder(this) 310294"];
8026 [label="_typeContextOpt 310295"];
8027 [label="_methodContextOpt 310296"];
8028 [label="Debug.Assert((object)moduleSymbol != null); 310297"];
8029 [label="Debug.Assert((object)moduleSymbol != null); 310298"];
8030 [label="_typeContextOpt 310299"];
8031 [label="_methodContextOpt 310300"];
8032 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 310301"];
8033 [label="return (NamedTypeSymbol)new MetadataDecoder(moduleSymbol, this).GetTypeOfToken(token); 310302"];
8034 [label="param GetTypeHandleToTypeMap(this) 310303"];
8035 [label="return moduleSymbol.TypeHandleToTypeMap; 310304"];
8036 [label="var baseType = MakeDeclaredBaseType(); 310305"];
8037 [label="if (baseType is object)\n                {\n                    if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    }\n\n                    var moduleSymbol = ContainingPEModule;\n                    TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol);\n                    decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol);\n                    decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol);\n                    baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type;\n                } 310306"];
8038 [label="if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    } 310307"];
8039 [label="ContainingPEModule 310308"];
8040 [label="s.Kind 310309"];
8041 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310310"];
8042 [label="return SymbolKind.Namespace; 310311"];
8043 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 310312"];
8044 [label="var moduleSymbol = ContainingPEModule; 310313"];
8045 [label="TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol); 310314"];
8046 [label="TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol); 310315"];
8047 [label="TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol); 310316"];
8048 [label="TypeSymbol decodedType = DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol); 310317"];
8049 [label="DynamicTypeDecoder.TransformType(baseType, 0, _handle, moduleSymbol) 310318"];
8050 [label="param TransformType(TypeSymbol metadataType) 310319"];
8051 [label="param TransformType(int targetSymbolCustomModifierCount) 310320"];
8052 [label="param TransformType(EntityHandle targetSymbolToken) 310321"];
8053 [label="param TransformType(PEModuleSymbol containingModule) 310322"];
8054 [label="param TransformType(RefKind targetSymbolRefKind = RefKind.None) 310323"];
8055 [label="Debug.Assert((object)metadataType != null); 310324"];
8056 [label="Debug.Assert((object)metadataType != null); 310325"];
8057 [label="ImmutableArray<bool> dynamicTransformFlags; 310326"];
8058 [label="dynamicTransformFlags 310327"];
8059 [label="containingModule.Module 310328"];
8060 [label="get\n            {\n                return _module;\n            } 310329"];
8061 [label="if (containingModule.Module.HasDynamicAttribute(targetSymbolToken, out dynamicTransformFlags))\n            {\n                return TransformTypeInternal(metadataType, containingModule.ContainingAssembly,\n                    targetSymbolCustomModifierCount, targetSymbolRefKind, dynamicTransformFlags,\n                    haveCustomModifierFlags: true,\n                    checkLength: true);\n            } 310330"];
8062 [label="if (containingModule.Module.HasDynamicAttribute(targetSymbolToken, out dynamicTransformFlags))\n            {\n                return TransformTypeInternal(metadataType, containingModule.ContainingAssembly,\n                    targetSymbolCustomModifierCount, targetSymbolRefKind, dynamicTransformFlags,\n                    haveCustomModifierFlags: true,\n                    checkLength: true);\n            } 310331"];
8063 [label="if (containingModule.Module.HasDynamicAttribute(targetSymbolToken, out dynamicTransformFlags))\n            {\n                return TransformTypeInternal(metadataType, containingModule.ContainingAssembly,\n                    targetSymbolCustomModifierCount, targetSymbolRefKind, dynamicTransformFlags,\n                    haveCustomModifierFlags: true,\n                    checkLength: true);\n            } 310332"];
8064 [label="if (containingModule.Module.HasDynamicAttribute(targetSymbolToken, out dynamicTransformFlags))\n            {\n                return TransformTypeInternal(metadataType, containingModule.ContainingAssembly,\n                    targetSymbolCustomModifierCount, targetSymbolRefKind, dynamicTransformFlags,\n                    haveCustomModifierFlags: true,\n                    checkLength: true);\n            } 310333"];
8065 [label="return metadataType; 310334"];
8066 [label="decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol); 310335"];
8067 [label="decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol); 310336"];
8068 [label="decodedType = NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol); 310337"];
8069 [label="NativeIntegerTypeDecoder.TransformType(decodedType, _handle, moduleSymbol) 310338"];
8070 [label="param TransformType(TypeSymbol type) 310339"];
8071 [label="param TransformType(EntityHandle handle) 310340"];
8072 [label="param TransformType(PEModuleSymbol containingModule) 310341"];
8073 [label="containingModule.Module 310342"];
8074 [label="get\n            {\n                return _module;\n            } 310343"];
8075 [label="return _module; 310344"];
8076 [label="return containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) ?\n                TransformType(type, transformFlags) :\n                type; 310345"];
8077 [label="return containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) ?\n                TransformType(type, transformFlags) :\n                type; 310346"];
8078 [label="return containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) ?\n                TransformType(type, transformFlags) :\n                type; 310347"];
8079 [label="return containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) ?\n                TransformType(type, transformFlags) :\n                type; 310348"];
8080 [label="containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) 310349"];
8081 [label="return containingModule.Module.HasNativeIntegerAttribute(handle, out var transformFlags) ?\n                TransformType(type, transformFlags) :\n                type; 310350"];
8082 [label="decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol); 310351"];
8083 [label="decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol); 310352"];
8084 [label="decodedType = TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol); 310353"];
8085 [label="TupleTypeDecoder.DecodeTupleTypesIfApplicable(decodedType, _handle, moduleSymbol) 310354"];
8086 [label="param DecodeTupleTypesIfApplicable(TypeSymbol metadataType) 310355"];
8087 [label="param DecodeTupleTypesIfApplicable(EntityHandle targetHandle) 310356"];
8088 [label="param DecodeTupleTypesIfApplicable(PEModuleSymbol containingModule) 310357"];
8089 [label="ImmutableArray<string?> elementNames; 310358"];
8090 [label="elementNames 310359"];
8091 [label="containingModule\n                .Module 310360"];
8092 [label="get\n            {\n                return _module;\n            } 310361"];
8093 [label="return _module; 310362"];
8094 [label="var hasTupleElementNamesAttribute = containingModule\n                .Module\n                .HasTupleElementNamesAttribute(targetHandle, out elementNames); 310363"];
8095 [label="var hasTupleElementNamesAttribute = containingModule\n                .Module\n                .HasTupleElementNamesAttribute(targetHandle, out elementNames); 310364"];
8096 [label="var hasTupleElementNamesAttribute = containingModule\n                .Module\n                .HasTupleElementNamesAttribute(targetHandle, out elementNames); 310365"];
8097 [label="var hasTupleElementNamesAttribute = containingModule\n                .Module\n                .HasTupleElementNamesAttribute(targetHandle, out elementNames); 310366"];
8098 [label="if (hasTupleElementNamesAttribute && elementNames.IsDefaultOrEmpty)\n            {\n                return new UnsupportedMetadataTypeSymbol();\n            } 310367"];
8099 [label="return DecodeTupleTypesInternal(metadataType, elementNames, hasTupleElementNamesAttribute); 310368"];
8100 [label="return DecodeTupleTypesInternal(metadataType, elementNames, hasTupleElementNamesAttribute); 310369"];
8101 [label="DecodeTupleTypesInternal(metadataType, elementNames, hasTupleElementNamesAttribute) 310370"];
8102 [label="param DecodeTupleTypesInternal(TypeSymbol metadataType) 310371"];
8103 [label="param DecodeTupleTypesInternal(ImmutableArray<string?> elementNames) 310372"];
8104 [label="param DecodeTupleTypesInternal(bool hasTupleElementNamesAttribute) 310373"];
8105 [label="RoslynDebug.AssertNotNull(metadataType); 310374"];
8106 [label="RoslynDebug.AssertNotNull(metadataType); 310375"];
8107 [label="var decoder = new TupleTypeDecoder(elementNames); 310376"];
8108 [label="var decoder = new TupleTypeDecoder(elementNames); 310377"];
8109 [label="new TupleTypeDecoder(elementNames) 310378"];
8110 [label="param TupleTypeDecoder(ImmutableArray<string?> elementNames) 310379"];
8111 [label="param TupleTypeDecoder(this) 310380"];
8112 [label="_elementNames 310381"];
8113 [label="elementNames.IsDefault 310382"];
8114 [label="_namesIndex = elementNames.IsDefault ? 0 : elementNames.Length; 310383"];
8115 [label="_namesIndex 310384"];
8116 [label="_decodingFailed = false; 310385"];
8117 [label="_decodingFailed 310386"];
8118 [label="_foundUsableErrorType = false; 310387"];
8119 [label="_foundUsableErrorType 310388"];
8120 [label="var decoded = decoder.DecodeType(metadataType); 310389"];
8121 [label="decoder.DecodeType(metadataType) 310390"];
8122 [label="param DecodeType(TypeSymbol type) 310391"];
8123 [label="param DecodeType(this) 310392"];
8124 [label="type.Kind 310393"];
8125 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 310394"];
8126 [label="switch (type.Kind)\n            {\n                case SymbolKind.ErrorType:\n                    _foundUsableErrorType = true;\n                    return type;\n\n                case SymbolKind.DynamicType:\n                case SymbolKind.TypeParameter:\n                    return type;\n\n                case SymbolKind.FunctionPointerType:\n                    return DecodeFunctionPointerType((FunctionPointerTypeSymbol)type);\n\n                case SymbolKind.PointerType:\n                    return DecodePointerType((PointerTypeSymbol)type);\n\n                case SymbolKind.NamedType:\n                    // We may have a tuple type from a substituted type symbol,\n                    // but it will be missing names from metadata, so we'll\n                    // need to re-create the type.\n                    //\n                    // Consider the declaration\n                    //\n                    //      class C : BaseType<(int x, int y)>\n                    //\n                    // The process for decoding tuples in C looks at the BaseType, calls\n                    // DecodeOrThrow, then passes the decoded type to the TupleTypeDecoder.\n                    // However, DecodeOrThrow uses the AbstractTypeMap to construct a\n                    // SubstitutedTypeSymbol, which eagerly converts tuple-compatible\n                    // types to TupleTypeSymbols. Thus, by the time we get to the Decoder\n                    // all metadata instances of System.ValueTuple will have been\n                    //  replaced with TupleTypeSymbols without names.\n                    // \n                    // Rather than fixing up after-the-fact it's possible that we could\n                    // flow up a SubstituteWith/Without tuple unification to the top level\n                    // of the type map and change DecodeOrThrow to call into the substitution\n                    // without unification instead.\n                    return DecodeNamedType((NamedTypeSymbol)type);\n\n                case SymbolKind.ArrayType:\n                    return DecodeArrayType((ArrayTypeSymbol)type);\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(type.TypeKind);\n            } 310395"];
8127 [label="return DecodeNamedType((NamedTypeSymbol)type); 310396"];
8128 [label="DecodeNamedType((NamedTypeSymbol)type) 310397"];
8129 [label="param DecodeNamedType(NamedTypeSymbol type) 310398"];
8130 [label="param DecodeNamedType(this) 310399"];
8131 [label="type.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 310400"];
8132 [label="get\n            {\n                return ImmutableArray<TypeWithAnnotations>.Empty;\n            } 310401"];
8133 [label="return ImmutableArray<TypeWithAnnotations>.Empty; 310402"];
8134 [label="var typeArgs = type.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics; 310403"];
8135 [label="var decodedArgs = DecodeTypeArguments(typeArgs); 310404"];
8136 [label="DecodeTypeArguments(typeArgs) 310405"];
8137 [label="param DecodeTypeArguments(ImmutableArray<TypeWithAnnotations> typeArgs) 310406"];
8138 [label="param DecodeTypeArguments(this) 310407"];
8139 [label="if (typeArgs.IsEmpty)\n            {\n                return typeArgs;\n            } 310408"];
8140 [label="return typeArgs; 310409"];
8141 [label="NamedTypeSymbol decodedType = type; 310410"];
8142 [label="type.ContainingType 310411"];
8143 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 310412"];
8144 [label="return _container as NamedTypeSymbol; 310413"];
8145 [label="NamedTypeSymbol containingType = type.ContainingType; 310414"];
8146 [label="NamedTypeSymbol? decodedContainingType; 310415"];
8147 [label="if (containingType is object && containingType.IsGenericType)\n            {\n                decodedContainingType = DecodeNamedType(containingType);\n                Debug.Assert(decodedContainingType.IsGenericType);\n            }\n            else\n            {\n                decodedContainingType = containingType;\n            } 310416"];
8148 [label="decodedContainingType = containingType; 310417"];
8149 [label="var containerChanged = !ReferenceEquals(decodedContainingType, containingType); 310418"];
8150 [label="var containerChanged = !ReferenceEquals(decodedContainingType, containingType); 310419"];
8151 [label="var typeArgsChanged = typeArgs != decodedArgs; 310420"];
8152 [label="if (typeArgsChanged || containerChanged)\n            {\n                if (containerChanged)\n                {\n                    decodedType = decodedType.OriginalDefinition.AsMember(decodedContainingType);\n                    // If the type is nested, e.g. Outer<T>.Inner<V>, then Inner is definitely\n                    // not a tuple, since we know all tuple-compatible types (System.ValueTuple)\n                    // are not nested types. Thus, it is safe to return without checking if\n                    // Inner is a tuple.\n                    return decodedType.ConstructIfGeneric(decodedArgs);\n                }\n\n                decodedType = type.ConstructedFrom.Construct(decodedArgs, unbound: false);\n            } 310421"];
8153 [label="decodedType.IsTupleType 310422"];
8154 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 310423"];
8155 [label="_ 310424"];
8156 [label="tupleCardinality: out _ 310425"];
8157 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 310426"];
8158 [label="param IsTupleTypeOfCardinality(this) 310427"];
8159 [label="IsUnboundGenericType 310428"];
8160 [label="get\n            {\n                return false;\n            } 310429"];
8161 [label="return false; 310430"];
8162 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310431"];
8163 [label="ContainingSymbol 310432"];
8164 [label="get\n            {\n                return _container;\n            } 310433"];
8165 [label="return _container; 310434"];
8166 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310435"];
8167 [label=".Kind 310436"];
8168 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310437"];
8169 [label="return SymbolKind.Namespace; 310438"];
8170 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310439"];
8171 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310440"];
8172 [label="ContainingNamespace 310441"];
8173 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 310442"];
8174 [label="get\n            {\n                return _container;\n            } 310443"];
8175 [label="return _container; 310444"];
8176 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310445"];
8177 [label="ContainingNamespace.ContainingNamespace 310446"];
8178 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 310447"];
8179 [label=".IsGlobalNamespace 310448"];
8180 [label="get\n            {\n                return true;\n            } 310449"];
8181 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310450"];
8182 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310451"];
8183 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310452"];
8184 [label="Name 310453"];
8185 [label="get\n            {\n                return _name;\n            } 310454"];
8186 [label="return _name; 310455"];
8187 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310456"];
8188 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310457"];
8189 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310458"];
8190 [label="tupleCardinality = 0; 310459"];
8191 [label="if (decodedType.IsTupleType)\n            {\n                int tupleCardinality = decodedType.TupleElementTypesWithAnnotations.Length;\n                if (tupleCardinality > 0)\n                {\n                    var elementNames = EatElementNamesIfAvailable(tupleCardinality);\n\n                    Debug.Assert(elementNames.IsDefault || elementNames.Length == tupleCardinality);\n\n                    decodedType = NamedTypeSymbol.CreateTuple(decodedType, elementNames);\n                }\n            } 310460"];
8192 [label="return decodedType; 310461"];
8193 [label="if (!decoder._decodingFailed)\n            {\n                if (!hasTupleElementNamesAttribute || decoder._namesIndex == 0)\n                {\n                    return decoded;\n                }\n            } 310462"];
8194 [label="if (!hasTupleElementNamesAttribute || decoder._namesIndex == 0)\n                {\n                    return decoded;\n                } 310463"];
8195 [label="return decoded; 310464"];
8196 [label="typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces 310465"];
8197 [label="genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters 310466"];
8198 [label="SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier 310467"];
8199 [label="miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier 310468"];
8200 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) 310469"];
8201 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) 310470"];
8202 [label="DebuggerDisplayFormat = new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) 310471"];
8203 [label="typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces 310472"];
8204 [label="genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters 310473"];
8205 [label="SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier 310474"];
8206 [label="SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier 310475"];
8207 [label="miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier 310476"];
8208 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 310477"];
8209 [label="new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 310478"];
8210 [label="TestDisplayFormat = new SymbolDisplayFormat(\n            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,\n            genericsOptions: SymbolDisplayGenericsOptions.IncludeTypeParameters,\n            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes | SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier | SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) 310479"];
8211 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 310480"];
8212 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 310481"];
8213 [label="TypeWithAnnotations.Create(decodedType) 310482"];
8214 [label="param Create(TypeSymbol typeSymbol) 310483"];
8215 [label="param Create(NullableAnnotation nullableAnnotation = NullableAnnotation.Oblivious) 310484"];
8216 [label="param Create(ImmutableArray<CustomModifier> customModifiers = default) 310485"];
8217 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 310486"];
8218 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 310487"];
8219 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 310488"];
8220 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 310489"];
8221 [label="typeSymbol.IsNullableType() 310490"];
8222 [label="param IsNullableType(this TypeSymbol type) 310491"];
8223 [label="type.OriginalDefinition 310492"];
8224 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 310493"];
8225 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 310494"];
8226 [label="type.OriginalDefinition.SpecialType 310495"];
8227 [label="get\n            {\n                return _corTypeId;\n            } 310496"];
8228 [label="return _corTypeId; 310497"];
8229 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 310498"];
8230 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 310499"];
8231 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 310500"];
8232 [label="CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()) 310501"];
8233 [label="param CreateNonLazyType(TypeSymbol typeSymbol) 310502"];
8234 [label="param CreateNonLazyType(NullableAnnotation nullableAnnotation) 310503"];
8235 [label="param CreateNonLazyType(ImmutableArray<CustomModifier> customModifiers) 310504"];
8236 [label="customModifiers: ImmutableArray<CustomModifier>.Empty 310505"];
8237 [label="new NonLazyType(customModifiers: ImmutableArray<CustomModifier>.Empty) 310506"];
8238 [label="param NonLazyType(ImmutableArray<CustomModifier> customModifiers) 310507"];
8239 [label="param NonLazyType(this) 310508"];
8240 [label="param Extensions(this) 310509"];
8241 [label="Debug.Assert(!customModifiers.IsDefault); 310510"];
8242 [label="_customModifiers 310511"];
8243 [label="Default = new NonLazyType(customModifiers: ImmutableArray<CustomModifier>.Empty) 310512"];
8244 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 310513"];
8245 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 310514"];
8246 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 310515"];
8247 [label="Extensions.Create(customModifiers) 310516"];
8248 [label="param Create(ImmutableArray<CustomModifier> customModifiers) 310517"];
8249 [label="if (customModifiers.IsEmpty)\n                {\n                    return Default;\n                } 310518"];
8250 [label="return Default; 310519"];
8251 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 310520"];
8252 [label="new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)) 310521"];
8253 [label="param TypeWithAnnotations(TypeSymbol defaultType) 310522"];
8254 [label="param TypeWithAnnotations(NullableAnnotation nullableAnnotation) 310523"];
8255 [label="param TypeWithAnnotations(Extensions extensions) 310524"];
8256 [label="param TypeWithAnnotations(this) 310525"];
8257 [label="var a1 = defaultType is null; 310526"];
8258 [label="!a1 310527"];
8259 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 310528"];
8260 [label="defaultType.IsNullableType() 310529"];
8261 [label="param IsNullableType(this TypeSymbol type) 310530"];
8262 [label="type.OriginalDefinition 310531"];
8263 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 310532"];
8264 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 310533"];
8265 [label="type.OriginalDefinition.SpecialType 310534"];
8266 [label="get\n            {\n                return _corTypeId;\n            } 310535"];
8267 [label="return _corTypeId; 310536"];
8268 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 310537"];
8269 [label="Debug.Assert(a1 || a2 != true || a3); 310538"];
8270 [label="Debug.Assert(a1 || a2 != true || a3); 310539"];
8271 [label="Debug.Assert(extensions != null); 310540"];
8272 [label="Debug.Assert(extensions != null); 310541"];
8273 [label="DefaultType 310542"];
8274 [label="NullableAnnotation 310543"];
8275 [label="_extensions 310544"];
8276 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 310545"];
8277 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 310546"];
8278 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 310547"];
8279 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 310548"];
8280 [label="baseType = (NamedTypeSymbol)NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type; 310549"];
8281 [label="NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this) 310550"];
8282 [label="param TransformType(TypeWithAnnotations metadataType) 310551"];
8283 [label="param TransformType(EntityHandle targetSymbolToken) 310552"];
8284 [label="param TransformType(PEModuleSymbol containingModule) 310553"];
8285 [label="param TransformType(Symbol accessSymbol) 310554"];
8286 [label="param TransformType(Symbol nullableContext) 310555"];
8287 [label="metadataType.HasType 310556"];
8288 [label="=> !(DefaultType is null) 310557"];
8289 [label="DefaultType is null 310558"];
8290 [label="!(DefaultType is null) 310559"];
8291 [label="Debug.Assert(metadataType.HasType); 310560"];
8292 [label="accessSymbol.IsDefinition 310561"];
8293 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 310562"];
8294 [label="OriginalDefinition 310563"];
8295 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 310564"];
8296 [label="OriginalSymbolDefinition 310565"];
8297 [label="get\n            {\n                return this.OriginalTypeSymbolDefinition;\n            } 310566"];
8298 [label="this.OriginalTypeSymbolDefinition 310567"];
8299 [label="get\n            {\n                return this.OriginalDefinition;\n            } 310568"];
8300 [label="return this.OriginalTypeSymbolDefinition; 310569"];
8301 [label="return OriginalSymbolDefinition; 310570"];
8302 [label="return (object)this == (object)OriginalDefinition; 310571"];
8303 [label="Debug.Assert(accessSymbol.IsDefinition); 310572"];
8304 [label="accessSymbol.ContainingModule 310573"];
8305 [label="get\n            {\n                return ContainingPEModule;\n            } 310574"];
8306 [label="ContainingPEModule 310575"];
8307 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 310576"];
8308 [label="Symbol s = _container; 310577"];
8309 [label="s.Kind 310578"];
8310 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310579"];
8311 [label="return SymbolKind.Namespace; 310580"];
8312 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 310581"];
8313 [label="return ContainingPEModule; 310582"];
8314 [label="Debug.Assert((object)accessSymbol.ContainingModule == containingModule); 310583"];
8315 [label="Debug.Assert((object)accessSymbol.ContainingModule == containingModule); 310584"];
8316 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 310585"];
8317 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 310586"];
8318 [label="AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _) 310587"];
8319 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 310588"];
8320 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 310589"];
8321 [label="Debug.Assert(symbol is object); 310590"];
8322 [label="symbol.Kind 310591"];
8323 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 310592"];
8324 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 310593"];
8325 [label="isInternal = false; 310594"];
8326 [label="symbol.DeclaredAccessibility 310595"];
8327 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 310596"];
8328 [label="Accessibility access = Accessibility.Private; 310597"];
8329 [label="switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                } 310598"];
8330 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 310599"];
8331 [label="symbol.ContainingType 310600"];
8332 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 310601"];
8333 [label="return _container as NamedTypeSymbol; 310602"];
8334 [label="symbol = symbol.ContainingType; 310603"];
8335 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 310604"];
8336 [label="return true; 310605"];
8337 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 310606"];
8338 [label="byte defaultTransformFlag; 310607"];
8339 [label="ImmutableArray<byte> nullableTransformFlags; 310608"];
8340 [label="nullableTransformFlags 310609"];
8341 [label="containingModule.Module 310610"];
8342 [label="get\n            {\n                return _module;\n            } 310611"];
8343 [label="return _module; 310612"];
8344 [label="if (!containingModule.Module.HasNullableAttribute(targetSymbolToken, out defaultTransformFlag, out nullableTransformFlags))\n            {\n                byte? value = nullableContext.GetNullableContextValue();\n                if (value == null)\n                {\n                    return metadataType;\n                }\n                defaultTransformFlag = value.GetValueOrDefault();\n            } 310613"];
8345 [label="if (!containingModule.Module.HasNullableAttribute(targetSymbolToken, out defaultTransformFlag, out nullableTransformFlags))\n            {\n                byte? value = nullableContext.GetNullableContextValue();\n                if (value == null)\n                {\n                    return metadataType;\n                }\n                defaultTransformFlag = value.GetValueOrDefault();\n            } 310614"];
8346 [label="if (!containingModule.Module.HasNullableAttribute(targetSymbolToken, out defaultTransformFlag, out nullableTransformFlags))\n            {\n                byte? value = nullableContext.GetNullableContextValue();\n                if (value == null)\n                {\n                    return metadataType;\n                }\n                defaultTransformFlag = value.GetValueOrDefault();\n            } 310615"];
8347 [label="if (!containingModule.Module.HasNullableAttribute(targetSymbolToken, out defaultTransformFlag, out nullableTransformFlags))\n            {\n                byte? value = nullableContext.GetNullableContextValue();\n                if (value == null)\n                {\n                    return metadataType;\n                }\n                defaultTransformFlag = value.GetValueOrDefault();\n            } 310616"];
8348 [label="if (!containingModule.Module.HasNullableAttribute(targetSymbolToken, out defaultTransformFlag, out nullableTransformFlags))\n            {\n                byte? value = nullableContext.GetNullableContextValue();\n                if (value == null)\n                {\n                    return metadataType;\n                }\n                defaultTransformFlag = value.GetValueOrDefault();\n            } 310617"];
8349 [label="nullableContext.GetNullableContextValue() 310618"];
8350 [label="param GetNullableContextValue(this) 310619"];
8351 [label="byte? value; 310620"];
8352 [label="if (!_lazyNullableContextValue.TryGetByte(out value))\n            {\n                value = ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) ?\n                    arg :\n                    _container.GetNullableContextValue();\n                _lazyNullableContextValue = value.ToNullableContextFlags();\n            } 310621"];
8353 [label="if (!_lazyNullableContextValue.TryGetByte(out value))\n            {\n                value = ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) ?\n                    arg :\n                    _container.GetNullableContextValue();\n                _lazyNullableContextValue = value.ToNullableContextFlags();\n            } 310622"];
8354 [label="_lazyNullableContextValue.TryGetByte(out value) 310623"];
8355 [label="param TryGetByte(this NullableContextKind kind) 310624"];
8356 [label="param TryGetByte(out byte? value) 310625"];
8357 [label="switch (kind)\n            {\n                case NullableContextKind.Unknown:\n                    value = null;\n                    return false;\n                case NullableContextKind.None:\n                    value = null;\n                    return true;\n                case NullableContextKind.Oblivious:\n                    value = NullableAnnotationExtensions.ObliviousAttributeValue;\n                    return true;\n                case NullableContextKind.NotAnnotated:\n                    value = NullableAnnotationExtensions.NotAnnotatedAttributeValue;\n                    return true;\n                case NullableContextKind.Annotated:\n                    value = NullableAnnotationExtensions.AnnotatedAttributeValue;\n                    return true;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(kind);\n            } 310626"];
8358 [label="value = null; 310627"];
8359 [label="return false; 310628"];
8360 [label="ContainingPEModule 310629"];
8361 [label="s.Kind 310630"];
8362 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310631"];
8363 [label="return SymbolKind.Namespace; 310632"];
8364 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 310633"];
8365 [label="value = ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) ?\n                    arg :\n                    _container.GetNullableContextValue(); 310634"];
8366 [label="ContainingPEModule.Module 310635"];
8367 [label="get\n            {\n                return _module;\n            } 310636"];
8368 [label="value = ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) ?\n                    arg :\n                    _container.GetNullableContextValue(); 310637"];
8369 [label="value = ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) ?\n                    arg :\n                    _container.GetNullableContextValue(); 310638"];
8370 [label="ContainingPEModule.Module.HasNullableContextAttribute(_handle, out byte arg) 310639"];
8371 [label="_container.GetNullableContextValue() 310640"];
8372 [label="param GetNullableContextValue(this) 310641"];
8373 [label="GetLocalNullableContextValue() 310642"];
8374 [label="param GetLocalNullableContextValue(this) 310643"];
8375 [label="return null; 310644"];
8376 [label="return GetLocalNullableContextValue() ?? ContainingSymbol?.GetNullableContextValue(); 310645"];
8377 [label="ContainingSymbol 310646"];
8378 [label="get { return _containingNamespaceSymbol; } 310647"];
8379 [label="return GetLocalNullableContextValue() ?? ContainingSymbol?.GetNullableContextValue(); 310648"];
8380 [label=".GetNullableContextValue() 310649"];
8381 [label="param GetNullableContextValue(this) 310650"];
8382 [label="GetLocalNullableContextValue() 310651"];
8383 [label="param GetLocalNullableContextValue(this) 310652"];
8384 [label="return null; 310653"];
8385 [label="return GetLocalNullableContextValue() ?? ContainingSymbol?.GetNullableContextValue(); 310654"];
8386 [label="ContainingSymbol 310655"];
8387 [label="get\n            {\n                return _moduleSymbol;\n            } 310656"];
8388 [label="return _moduleSymbol; 310657"];
8389 [label="param GetLocalNullableContextValue(this) 310658"];
8390 [label="get\n            {\n                return _assemblySymbol;\n            } 310659"];
8391 [label="return _assemblySymbol; 310660"];
8392 [label="param GetLocalNullableContextValue(this) 310661"];
8393 [label="get\n            {\n                return null;\n            } 310662"];
8394 [label="return null; 310663"];
8395 [label="return GetLocalNullableContextValue() ?? ContainingSymbol?.GetNullableContextValue(); 310664"];
8396 [label="return GetLocalNullableContextValue() ?? ContainingSymbol?.GetNullableContextValue(); 310665"];
8397 [label="_lazyNullableContextValue = value.ToNullableContextFlags(); 310666"];
8398 [label="value.ToNullableContextFlags() 310667"];
8399 [label="param ToNullableContextFlags(this byte? value) 310668"];
8400 [label="switch (value)\n            {\n                case null:\n                    return NullableContextKind.None;\n                case NullableAnnotationExtensions.ObliviousAttributeValue:\n                    return NullableContextKind.Oblivious;\n                case NullableAnnotationExtensions.NotAnnotatedAttributeValue:\n                    return NullableContextKind.NotAnnotated;\n                case NullableAnnotationExtensions.AnnotatedAttributeValue:\n                    return NullableContextKind.Annotated;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(value);\n            } 310669"];
8401 [label="return NullableContextKind.None; 310670"];
8402 [label="_lazyNullableContextValue 310671"];
8403 [label="return value; 310672"];
8404 [label="byte? value = nullableContext.GetNullableContextValue(); 310673"];
8405 [label="if (value == null)\n                {\n                    return metadataType;\n                } 310674"];
8406 [label="if (value == null)\n                {\n                    return metadataType;\n                } 310675"];
8407 [label="return metadataType; 310676"];
8408 [label="NullableTypeDecoder.TransformType(TypeWithAnnotations.Create(decodedType), _handle, moduleSymbol, accessSymbol: this, nullableContext: this).Type 310677"];
8409 [label="=> _extensions?.GetResolvedType(DefaultType) 310678"];
8410 [label="DefaultType 310679"];
8411 [label=".GetResolvedType(DefaultType) 310680"];
8412 [label="param GetResolvedType(TypeSymbol defaultType) 310681"];
8413 [label="=> defaultType 310682"];
8414 [label="defaultType 310683"];
8415 [label="_extensions?.GetResolvedType(DefaultType) 310684"];
8416 [label="Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType); 310685"];
8417 [label="Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType); 310686"];
8418 [label="Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType); 310687"];
8419 [label="Interlocked.CompareExchange(ref _lazyDeclaredBaseType, baseType, ErrorTypeSymbol.UnknownResultType); 310688"];
8420 [label="return _lazyDeclaredBaseType; 310689"];
8421 [label="return GetDeclaredBaseType(skipTransformsIfNecessary: false); 310690"];
8422 [label="NamedTypeSymbol declaredBase = GetDeclaredBaseType(null); 310691"];
8423 [label="if ((object)declaredBase == null)\n            {\n                return null;\n            } 310692"];
8424 [label="if ((object)declaredBase == null)\n            {\n                return null;\n            } 310693"];
8425 [label="if (BaseTypeAnalysis.TypeDependsOn(declaredBase, this))\n            {\n                return CyclicInheritanceError(this, declaredBase);\n            } 310694"];
8426 [label="if (BaseTypeAnalysis.TypeDependsOn(declaredBase, this))\n            {\n                return CyclicInheritanceError(this, declaredBase);\n            } 310695"];
8427 [label="BaseTypeAnalysis.TypeDependsOn(declaredBase, this) 310696"];
8428 [label="param TypeDependsOn(NamedTypeSymbol depends) 310697"];
8429 [label="param TypeDependsOn(NamedTypeSymbol on) 310698"];
8430 [label="Debug.Assert((object)depends != null); 310699"];
8431 [label="Debug.Assert((object)depends != null); 310700"];
8432 [label="Debug.Assert((object)on != null); 310701"];
8433 [label="Debug.Assert((object)on != null); 310702"];
8434 [label="on.IsDefinition 310703"];
8435 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 310704"];
8436 [label="OriginalDefinition 310705"];
8437 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 310706"];
8438 [label="OriginalSymbolDefinition 310707"];
8439 [label="get\n            {\n                return this.OriginalTypeSymbolDefinition;\n            } 310708"];
8440 [label="this.OriginalTypeSymbolDefinition 310709"];
8441 [label="get\n            {\n                return this.OriginalDefinition;\n            } 310710"];
8442 [label="return this.OriginalTypeSymbolDefinition; 310711"];
8443 [label="return OriginalSymbolDefinition; 310712"];
8444 [label="return (object)this == (object)OriginalDefinition; 310713"];
8445 [label="Debug.Assert(on.IsDefinition); 310714"];
8446 [label="var hs = PooledHashSet<Symbol>.GetInstance(); 310715"];
8447 [label="TypeDependsClosure(depends, depends.DeclaringCompilation, hs); 310716"];
8448 [label="depends.DeclaringCompilation 310717"];
8449 [label="get { return null; } 310718"];
8450 [label="return null; 310719"];
8451 [label="TypeDependsClosure(depends, depends.DeclaringCompilation, hs); 310720"];
8452 [label="TypeDependsClosure(depends, depends.DeclaringCompilation, hs); 310721"];
8453 [label="TypeDependsClosure(depends, depends.DeclaringCompilation, hs) 310722"];
8454 [label="param TypeDependsClosure(NamedTypeSymbol type) 310723"];
8455 [label="param TypeDependsClosure(CSharpCompilation currentCompilation) 310724"];
8456 [label="param TypeDependsClosure(HashSet<Symbol> partialClosure) 310725"];
8457 [label="if ((object)type == null)\n            {\n                return;\n            } 310726"];
8458 [label="if ((object)type == null)\n            {\n                return;\n            } 310727"];
8459 [label="type.OriginalDefinition 310728"];
8460 [label="get\n            {\n                return this;\n            } 310729"];
8461 [label="type = type.OriginalDefinition; 310730"];
8462 [label="if (partialClosure.Add(type))\n            {\n                if (type.IsInterface)\n                {\n                    foreach (var bt in type.GetDeclaredInterfaces(null))\n                    {\n                        TypeDependsClosure(bt, currentCompilation, partialClosure);\n                    }\n                }\n                else\n                {\n                    TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure);\n                }\n\n                // containment is interesting only for the current compilation\n                if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                }\n            } 310731"];
8463 [label="if (partialClosure.Add(type))\n            {\n                if (type.IsInterface)\n                {\n                    foreach (var bt in type.GetDeclaredInterfaces(null))\n                    {\n                        TypeDependsClosure(bt, currentCompilation, partialClosure);\n                    }\n                }\n                else\n                {\n                    TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure);\n                }\n\n                // containment is interesting only for the current compilation\n                if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                }\n            } 310732"];
8464 [label="if (partialClosure.Add(type))\n            {\n                if (type.IsInterface)\n                {\n                    foreach (var bt in type.GetDeclaredInterfaces(null))\n                    {\n                        TypeDependsClosure(bt, currentCompilation, partialClosure);\n                    }\n                }\n                else\n                {\n                    TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure);\n                }\n\n                // containment is interesting only for the current compilation\n                if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                }\n            } 310733"];
8465 [label="param GetHashCode(this) 310734"];
8466 [label="this.SpecialType 310735"];
8467 [label="get\n            {\n                return _corTypeId;\n            } 310736"];
8468 [label="if (this.SpecialType == SpecialType.System_Object)\n            {\n                return (int)SpecialType.System_Object;\n            } 310737"];
8469 [label="OriginalDefinition 310738"];
8470 [label="get\n            {\n                return this;\n            } 310739"];
8471 [label="return RuntimeHelpers.GetHashCode(OriginalDefinition); 310740"];
8472 [label="type.IsInterface 310741"];
8473 [label="get\n            {\n                return _flags.IsInterface();\n            } 310742"];
8474 [label="return _flags.IsInterface(); 310743"];
8475 [label="if (type.IsInterface)\n                {\n                    foreach (var bt in type.GetDeclaredInterfaces(null))\n                    {\n                        TypeDependsClosure(bt, currentCompilation, partialClosure);\n                    }\n                }\n                else\n                {\n                    TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure);\n                } 310744"];
8476 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure); 310745"];
8477 [label="type.GetDeclaredBaseType(null) 310746"];
8478 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 310747"];
8479 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 310748"];
8480 [label="s.Kind 310749"];
8481 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310750"];
8482 [label="return SymbolKind.Namespace; 310751"];
8483 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 310752"];
8484 [label="Debug.Assert((object)moduleSymbol != null); 310753"];
8485 [label="if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    } 310754"];
8486 [label="param TransformType(int targetSymbolCustomModifierCount) 310755"];
8487 [label="param TransformType(RefKind targetSymbolRefKind = RefKind.None) 310756"];
8488 [label="Debug.Assert((object)metadataType != null); 310757"];
8489 [label="if (hasTupleElementNamesAttribute && elementNames.IsDefaultOrEmpty)\n            {\n                return new UnsupportedMetadataTypeSymbol();\n            } 310758"];
8490 [label="param DecodeTupleTypesInternal(ImmutableArray<string?> elementNames) 310759"];
8491 [label="param TupleTypeDecoder(ImmutableArray<string?> elementNames) 310760"];
8492 [label="_elementNames 310761"];
8493 [label="elementNames.IsDefault 310762"];
8494 [label="_namesIndex = elementNames.IsDefault ? 0 : elementNames.Length; 310763"];
8495 [label="_namesIndex 310764"];
8496 [label="_foundUsableErrorType = false; 310765"];
8497 [label="_foundUsableErrorType 310766"];
8498 [label="param DecodeType(this) 310767"];
8499 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 310768"];
8500 [label="param DecodeNamedType(this) 310769"];
8501 [label="type.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 310770"];
8502 [label="get\n            {\n                return ImmutableArray<TypeWithAnnotations>.Empty;\n            } 310771"];
8503 [label="return ImmutableArray<TypeWithAnnotations>.Empty; 310772"];
8504 [label="var typeArgs = type.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics; 310773"];
8505 [label="var decodedArgs = DecodeTypeArguments(typeArgs); 310774"];
8506 [label="DecodeTypeArguments(typeArgs) 310775"];
8507 [label="param DecodeTypeArguments(ImmutableArray<TypeWithAnnotations> typeArgs) 310776"];
8508 [label="param DecodeTypeArguments(this) 310777"];
8509 [label="if (typeArgs.IsEmpty)\n            {\n                return typeArgs;\n            } 310778"];
8510 [label="return typeArgs; 310779"];
8511 [label="type.ContainingType 310780"];
8512 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 310781"];
8513 [label="return _container as NamedTypeSymbol; 310782"];
8514 [label="NamedTypeSymbol containingType = type.ContainingType; 310783"];
8515 [label="NamedTypeSymbol? decodedContainingType; 310784"];
8516 [label="if (containingType is object && containingType.IsGenericType)\n            {\n                decodedContainingType = DecodeNamedType(containingType);\n                Debug.Assert(decodedContainingType.IsGenericType);\n            }\n            else\n            {\n                decodedContainingType = containingType;\n            } 310785"];
8517 [label="decodedContainingType = containingType; 310786"];
8518 [label="var containerChanged = !ReferenceEquals(decodedContainingType, containingType); 310787"];
8519 [label="var containerChanged = !ReferenceEquals(decodedContainingType, containingType); 310788"];
8520 [label="var typeArgsChanged = typeArgs != decodedArgs; 310789"];
8521 [label="if (typeArgsChanged || containerChanged)\n            {\n                if (containerChanged)\n                {\n                    decodedType = decodedType.OriginalDefinition.AsMember(decodedContainingType);\n                    // If the type is nested, e.g. Outer<T>.Inner<V>, then Inner is definitely\n                    // not a tuple, since we know all tuple-compatible types (System.ValueTuple)\n                    // are not nested types. Thus, it is safe to return without checking if\n                    // Inner is a tuple.\n                    return decodedType.ConstructIfGeneric(decodedArgs);\n                }\n\n                decodedType = type.ConstructedFrom.Construct(decodedArgs, unbound: false);\n            } 310790"];
8522 [label="decodedType.IsTupleType 310791"];
8523 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 310792"];
8524 [label="_ 310793"];
8525 [label="tupleCardinality: out _ 310794"];
8526 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 310795"];
8527 [label="param IsTupleTypeOfCardinality(this) 310796"];
8528 [label="IsUnboundGenericType 310797"];
8529 [label="get\n            {\n                return false;\n            } 310798"];
8530 [label="return false; 310799"];
8531 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310800"];
8532 [label="ContainingSymbol 310801"];
8533 [label="get\n            {\n                return _container;\n            } 310802"];
8534 [label="return _container; 310803"];
8535 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310804"];
8536 [label=".Kind 310805"];
8537 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310806"];
8538 [label="return SymbolKind.Namespace; 310807"];
8539 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310808"];
8540 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310809"];
8541 [label="ContainingNamespace 310810"];
8542 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 310811"];
8543 [label="get\n            {\n                return _container;\n            } 310812"];
8544 [label="return _container; 310813"];
8545 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310814"];
8546 [label="ContainingNamespace.ContainingNamespace 310815"];
8547 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 310816"];
8548 [label=".IsGlobalNamespace 310817"];
8549 [label="get\n            {\n                return true;\n            } 310818"];
8550 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310819"];
8551 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310820"];
8552 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310821"];
8553 [label="Name 310822"];
8554 [label="get\n            {\n                return _name;\n            } 310823"];
8555 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310824"];
8556 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310825"];
8557 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 310826"];
8558 [label="tupleCardinality = 0; 310827"];
8559 [label="if (decodedType.IsTupleType)\n            {\n                int tupleCardinality = decodedType.TupleElementTypesWithAnnotations.Length;\n                if (tupleCardinality > 0)\n                {\n                    var elementNames = EatElementNamesIfAvailable(tupleCardinality);\n\n                    Debug.Assert(elementNames.IsDefault || elementNames.Length == tupleCardinality);\n\n                    decodedType = NamedTypeSymbol.CreateTuple(decodedType, elementNames);\n                }\n            } 310828"];
8560 [label="param Create(NullableAnnotation nullableAnnotation = NullableAnnotation.Oblivious) 310829"];
8561 [label="param Create(ImmutableArray<CustomModifier> customModifiers = default) 310830"];
8562 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 310831"];
8563 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 310832"];
8564 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 310833"];
8565 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 310834"];
8566 [label="typeSymbol.IsNullableType() 310835"];
8567 [label="param IsNullableType(this TypeSymbol type) 310836"];
8568 [label="type.OriginalDefinition 310837"];
8569 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 310838"];
8570 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 310839"];
8571 [label="type.OriginalDefinition.SpecialType 310840"];
8572 [label="get\n            {\n                return _corTypeId;\n            } 310841"];
8573 [label="param CreateNonLazyType(NullableAnnotation nullableAnnotation) 310842"];
8574 [label="param CreateNonLazyType(ImmutableArray<CustomModifier> customModifiers) 310843"];
8575 [label="Extensions.Create(customModifiers) 310844"];
8576 [label="param Create(ImmutableArray<CustomModifier> customModifiers) 310845"];
8577 [label="if (customModifiers.IsEmpty)\n                {\n                    return Default;\n                } 310846"];
8578 [label="return Default; 310847"];
8579 [label="param TypeWithAnnotations(NullableAnnotation nullableAnnotation) 310848"];
8580 [label="param TypeWithAnnotations(Extensions extensions) 310849"];
8581 [label="var a1 = defaultType is null; 310850"];
8582 [label="!a1 310851"];
8583 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 310852"];
8584 [label="defaultType.IsNullableType() 310853"];
8585 [label="param IsNullableType(this TypeSymbol type) 310854"];
8586 [label="type.OriginalDefinition 310855"];
8587 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 310856"];
8588 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 310857"];
8589 [label="type.OriginalDefinition.SpecialType 310858"];
8590 [label="get\n            {\n                return _corTypeId;\n            } 310859"];
8591 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 310860"];
8592 [label="Debug.Assert(a1 || a2 != true || a3); 310861"];
8593 [label="Debug.Assert(a1 || a2 != true || a3); 310862"];
8594 [label="Debug.Assert(extensions != null); 310863"];
8595 [label="Debug.Assert(extensions != null); 310864"];
8596 [label="NullableAnnotation 310865"];
8597 [label="_extensions 310866"];
8598 [label="param TransformType(Symbol accessSymbol) 310867"];
8599 [label="metadataType.HasType 310868"];
8600 [label="=> !(DefaultType is null) 310869"];
8601 [label="DefaultType is null 310870"];
8602 [label="!(DefaultType is null) 310871"];
8603 [label="Debug.Assert(metadataType.HasType); 310872"];
8604 [label="accessSymbol.IsDefinition 310873"];
8605 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 310874"];
8606 [label="OriginalDefinition 310875"];
8607 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 310876"];
8608 [label="OriginalSymbolDefinition 310877"];
8609 [label="get\n            {\n                return this.OriginalTypeSymbolDefinition;\n            } 310878"];
8610 [label="this.OriginalTypeSymbolDefinition 310879"];
8611 [label="get\n            {\n                return this.OriginalDefinition;\n            } 310880"];
8612 [label="return this.OriginalTypeSymbolDefinition; 310881"];
8613 [label="return OriginalSymbolDefinition; 310882"];
8614 [label="return (object)this == (object)OriginalDefinition; 310883"];
8615 [label="Debug.Assert(accessSymbol.IsDefinition); 310884"];
8616 [label="accessSymbol.ContainingModule 310885"];
8617 [label="get\n            {\n                return ContainingPEModule;\n            } 310886"];
8618 [label="ContainingPEModule 310887"];
8619 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 310888"];
8620 [label="s.Kind 310889"];
8621 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310890"];
8622 [label="return SymbolKind.Namespace; 310891"];
8623 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 310892"];
8624 [label="return ContainingPEModule; 310893"];
8625 [label="Debug.Assert((object)accessSymbol.ContainingModule == containingModule); 310894"];
8626 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 310895"];
8627 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 310896"];
8628 [label="AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _) 310897"];
8629 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 310898"];
8630 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 310899"];
8631 [label="Debug.Assert(symbol is object); 310900"];
8632 [label="symbol.Kind 310901"];
8633 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 310902"];
8634 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 310903"];
8635 [label="isInternal = false; 310904"];
8636 [label="symbol.DeclaredAccessibility 310905"];
8637 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 310906"];
8638 [label="Accessibility access = Accessibility.Private; 310907"];
8639 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 310908"];
8640 [label="symbol.ContainingType 310909"];
8641 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 310910"];
8642 [label="return _container as NamedTypeSymbol; 310911"];
8643 [label="symbol = symbol.ContainingType; 310912"];
8644 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 310913"];
8645 [label="return true; 310914"];
8646 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 310915"];
8647 [label="byte? value; 310916"];
8648 [label="param TryGetByte(out byte? value) 310917"];
8649 [label="value = null; 310918"];
8650 [label="s.Kind 310919"];
8651 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310920"];
8652 [label="return SymbolKind.Namespace; 310921"];
8653 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 310922"];
8654 [label="param GetNullableContextValue(this) 310923"];
8655 [label="param GetLocalNullableContextValue(this) 310924"];
8656 [label="get\n            {\n                return _moduleSymbol;\n            } 310925"];
8657 [label="return _moduleSymbol; 310926"];
8658 [label="param GetLocalNullableContextValue(this) 310927"];
8659 [label="get\n            {\n                return _assemblySymbol;\n            } 310928"];
8660 [label="return _assemblySymbol; 310929"];
8661 [label="param GetLocalNullableContextValue(this) 310930"];
8662 [label="get\n            {\n                return null;\n            } 310931"];
8663 [label="=> defaultType 310932"];
8664 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure); 310933"];
8665 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure); 310934"];
8666 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure); 310935"];
8667 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure) 310936"];
8668 [label="param TypeDependsClosure(NamedTypeSymbol type) 310937"];
8669 [label="param TypeDependsClosure(CSharpCompilation currentCompilation) 310938"];
8670 [label="param TypeDependsClosure(HashSet<Symbol> partialClosure) 310939"];
8671 [label="if ((object)type == null)\n            {\n                return;\n            } 310940"];
8672 [label="if ((object)type == null)\n            {\n                return;\n            } 310941"];
8673 [label="this.SpecialType 310942"];
8674 [label="get\n            {\n                return _corTypeId;\n            } 310943"];
8675 [label="if (this.SpecialType == SpecialType.System_Object)\n            {\n                return (int)SpecialType.System_Object;\n            } 310944"];
8676 [label="return (int)SpecialType.System_Object; 310945"];
8677 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 310946"];
8678 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 310947"];
8679 [label="s.Kind 310948"];
8680 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 310949"];
8681 [label="return SymbolKind.Namespace; 310950"];
8682 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 310951"];
8683 [label="return null; 310952"];
8684 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure); 310953"];
8685 [label="if ((object)type == null)\n            {\n                return;\n            } 310954"];
8686 [label="if ((object)type == null)\n            {\n                return;\n            } 310955"];
8687 [label="return; 310956"];
8688 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 310957"];
8689 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 310958"];
8690 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 310959"];
8691 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 310960"];
8692 [label="TypeDependsClosure(depends, depends.DeclaringCompilation, hs); 310961"];
8693 [label="var result = hs.Contains(on); 310962"];
8694 [label="var result = hs.Contains(on); 310963"];
8695 [label="var result = hs.Contains(on); 310964"];
8696 [label="this.SpecialType 310965"];
8697 [label="OriginalDefinition 310966"];
8698 [label="hs.Free(); 310967"];
8699 [label="return result; 310968"];
8700 [label="this.SetKnownToHaveNoDeclaredBaseCycles() 310969"];
8701 [label="param SetKnownToHaveNoDeclaredBaseCycles(this) 310970"];
8702 [label="_hasNoBaseCycles = true; 310971"];
8703 [label="_hasNoBaseCycles 310972"];
8704 [label="this.SetKnownToHaveNoDeclaredBaseCycles(); 310973"];
8705 [label="return declaredBase; 310974"];
8706 [label="Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType); 310975"];
8707 [label="Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType); 310976"];
8708 [label="Interlocked.CompareExchange(ref _lazyBaseType, MakeAcyclicBaseType(), ErrorTypeSymbol.UnknownResultType); 310977"];
8709 [label="return _lazyBaseType; 310978"];
8710 [label="NamedTypeSymbol @base = this.BaseTypeNoUseSiteDiagnostics; 310979"];
8711 [label="while ((object)@base != null)\n            {\n                if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                }\n\n                @base = @base.BaseTypeNoUseSiteDiagnostics;\n            } 310980"];
8712 [label="while ((object)@base != null)\n            {\n                if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                }\n\n                @base = @base.BaseTypeNoUseSiteDiagnostics;\n            } 310981"];
8713 [label="if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                } 310982"];
8714 [label="@base.IsErrorType() 310983"];
8715 [label="param IsErrorType(this TypeSymbol type) 310984"];
8716 [label="RoslynDebug.Assert((object)type != null); 310985"];
8717 [label="RoslynDebug.Assert((object)type != null); 310986"];
8718 [label="type.Kind 310987"];
8719 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 310988"];
8720 [label="return type.Kind == SymbolKind.ErrorType; 310989"];
8721 [label="if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                } 310990"];
8722 [label="@base.BaseTypeNoUseSiteDiagnostics 310991"];
8723 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 310992"];
8724 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 310993"];
8725 [label="if ((object)declaredBase == null)\n            {\n                return null;\n            } 310994"];
8726 [label="Debug.Assert((object)depends != null); 310995"];
8727 [label="Debug.Assert((object)on != null); 310996"];
8728 [label="on.IsDefinition 310997"];
8729 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 310998"];
8730 [label="OriginalDefinition 310999"];
8731 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 311000"];
8732 [label="OriginalSymbolDefinition 311001"];
8733 [label="get\n            {\n                return this.OriginalTypeSymbolDefinition;\n            } 311002"];
8734 [label="this.OriginalTypeSymbolDefinition 311003"];
8735 [label="get\n            {\n                return this.OriginalDefinition;\n            } 311004"];
8736 [label="return this.OriginalTypeSymbolDefinition; 311005"];
8737 [label="return OriginalSymbolDefinition; 311006"];
8738 [label="return (object)this == (object)OriginalDefinition; 311007"];
8739 [label="Debug.Assert(on.IsDefinition); 311008"];
8740 [label="depends.DeclaringCompilation 311009"];
8741 [label="get { return null; } 311010"];
8742 [label="return null; 311011"];
8743 [label="param TypeDependsClosure(CSharpCompilation currentCompilation) 311012"];
8744 [label="if ((object)type == null)\n            {\n                return;\n            } 311013"];
8745 [label="return; 311014"];
8746 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 311015"];
8747 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 311016"];
8748 [label="return result; 311017"];
8749 [label="this.SetKnownToHaveNoDeclaredBaseCycles(); 311018"];
8750 [label="@base = @base.BaseTypeNoUseSiteDiagnostics; 311019"];
8751 [label="if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                } 311020"];
8752 [label="@base.IsErrorType() 311021"];
8753 [label="param IsErrorType(this TypeSymbol type) 311022"];
8754 [label="RoslynDebug.Assert((object)type != null); 311023"];
8755 [label="RoslynDebug.Assert((object)type != null); 311024"];
8756 [label="type.Kind 311025"];
8757 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 311026"];
8758 [label="return type.Kind == SymbolKind.ErrorType; 311027"];
8759 [label="if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                } 311028"];
8760 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 311029"];
8761 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 311030"];
8762 [label="if ((object)declaredBase == null)\n            {\n                return null;\n            } 311031"];
8763 [label="return null; 311032"];
8764 [label="return null; 311033"];
8765 [label="if (MergeUseSiteDiagnostics(ref result, DeriveUseSiteDiagnosticFromBase()))\n            {\n                return result;\n            } 311034"];
8766 [label="MergeUseSiteDiagnostics(ref result, DeriveUseSiteDiagnosticFromBase()) 311035"];
8767 [label="param MergeUseSiteDiagnostics(ref DiagnosticInfo result) 311036"];
8768 [label="param MergeUseSiteDiagnostics(DiagnosticInfo info) 311037"];
8769 [label="param MergeUseSiteDiagnostics(this) 311038"];
8770 [label="if (info == null)\n            {\n                return false;\n            } 311039"];
8771 [label="if (info == null)\n            {\n                return false;\n            } 311040"];
8772 [label="return false; 311041"];
8773 [label="this.ContainingModule 311042"];
8774 [label="get\n            {\n                return ContainingPEModule;\n            } 311043"];
8775 [label="ContainingPEModule 311044"];
8776 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 311045"];
8777 [label="Symbol s = _container; 311046"];
8778 [label="s.Kind 311047"];
8779 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 311048"];
8780 [label="return SymbolKind.Namespace; 311049"];
8781 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 311050"];
8782 [label="((PENamespaceSymbol)s).ContainingPEModule 311051"];
8783 [label="return ContainingPEModule; 311052"];
8784 [label="if (this.ContainingModule.HasUnifiedReferences)\n            {\n                HashSet<TypeSymbol> unificationCheckedTypes = null;\n                if (GetUnificationUseSiteDiagnosticRecursive(ref result, this, ref unificationCheckedTypes))\n                {\n                    return result;\n                }\n            } 311053"];
8785 [label="this.ContainingModule.HasUnifiedReferences 311054"];
8786 [label="get { return GetUnifiedAssemblies().Length > 0; } 311055"];
8787 [label="GetUnifiedAssemblies() 311056"];
8788 [label="param GetUnifiedAssemblies(this) 311057"];
8789 [label="AssertReferencesInitialized() 311058"];
8790 [label="param AssertReferencesInitialized(this) 311059"];
8791 [label="Debug.Assert(_moduleReferences != null); 311060"];
8792 [label="Debug.Assert(_moduleReferences != null); 311061"];
8793 [label="AssertReferencesInitialized(); 311062"];
8794 [label="return GetUnifiedAssemblies().Length > 0; 311063"];
8795 [label="return GetUnifiedAssemblies().Length > 0; 311064"];
8796 [label="return result; 311065"];
8797 [label="if (!MergeUseSiteDiagnostics(ref diagnostic, CalculateUseSiteDiagnostic()))\n            {\n                // Check if this type is marked by RequiredAttribute attribute.\n                // If so mark the type as bad, because it relies upon semantics that are not understood by the C# compiler.\n                if (this.ContainingPEModule.Module.HasRequiredAttributeAttribute(_handle))\n                {\n                    diagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n                }\n                else if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                }\n            } 311066"];
8798 [label="MergeUseSiteDiagnostics(ref diagnostic, CalculateUseSiteDiagnostic()) 311067"];
8799 [label="param MergeUseSiteDiagnostics(ref DiagnosticInfo result) 311068"];
8800 [label="param MergeUseSiteDiagnostics(DiagnosticInfo info) 311069"];
8801 [label="param MergeUseSiteDiagnostics(this) 311070"];
8802 [label="if (info == null)\n            {\n                return false;\n            } 311071"];
8803 [label="if (info == null)\n            {\n                return false;\n            } 311072"];
8804 [label="return false; 311073"];
8805 [label="this.ContainingPEModule 311074"];
8806 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 311075"];
8807 [label="Symbol s = _container; 311076"];
8808 [label="s.Kind 311077"];
8809 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 311078"];
8810 [label="return SymbolKind.Namespace; 311079"];
8811 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 311080"];
8812 [label="((PENamespaceSymbol)s).ContainingPEModule 311081"];
8813 [label="if (this.ContainingPEModule.Module.HasRequiredAttributeAttribute(_handle))\n                {\n                    diagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n                }\n                else if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                } 311082"];
8814 [label="this.ContainingPEModule.Module 311083"];
8815 [label="get\n            {\n                return _module;\n            } 311084"];
8816 [label="if (this.ContainingPEModule.Module.HasRequiredAttributeAttribute(_handle))\n                {\n                    diagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n                }\n                else if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                } 311085"];
8817 [label="TypeKind 311086"];
8818 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 311087"];
8819 [label="TypeKind result = _lazyKind; 311088"];
8820 [label="if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                } 311089"];
8821 [label="if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    } 311090"];
8822 [label="TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true); 311091"];
8823 [label="GetDeclaredBaseType(skipTransformsIfNecessary: true) 311092"];
8824 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 311093"];
8825 [label="TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true); 311094"];
8826 [label="result = TypeKind.Class; 311095"];
8827 [label="if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        } 311096"];
8828 [label="if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        } 311097"];
8829 [label="@base.SpecialType 311098"];
8830 [label="SpecialType baseCorTypeId = @base.SpecialType; 311099"];
8831 [label="switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            } 311100"];
8832 [label="this.SpecialType 311101"];
8833 [label="if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    } 311102"];
8834 [label="result = TypeKind.Struct; 311103"];
8835 [label="_lazyKind 311104"];
8836 [label="return result; 311105"];
8837 [label="if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                } 311106"];
8838 [label="return diagnostic; 311107"];
8839 [label="_lazyUseSiteDiagnostic = GetUseSiteDiagnosticImpl(); 311108"];
8840 [label="_lazyUseSiteDiagnostic 311109"];
8841 [label="return _lazyUseSiteDiagnostic; 311110"];
8842 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 311111"];
8843 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 311112"];
8844 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 311113"];
8845 [label="return typeSymbol; 311114"];
8846 [label="_lazyReturnType = TypeWithAnnotations.Create(bodyBinder.GetSpecialType(SpecialType.System_Void, diagnostics, syntax)); 311115"];
8847 [label="TypeWithAnnotations.Create(bodyBinder.GetSpecialType(SpecialType.System_Void, diagnostics, syntax)) 311116"];
8848 [label="param Create(TypeSymbol typeSymbol) 311117"];
8849 [label="param Create(NullableAnnotation nullableAnnotation = NullableAnnotation.Oblivious) 311118"];
8850 [label="param Create(ImmutableArray<CustomModifier> customModifiers = default) 311119"];
8851 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 311120"];
8852 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 311121"];
8853 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 311122"];
8854 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 311123"];
8855 [label="typeSymbol.IsNullableType() 311124"];
8856 [label="param IsNullableType(this TypeSymbol type) 311125"];
8857 [label="type.OriginalDefinition 311126"];
8858 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 311127"];
8859 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 311128"];
8860 [label="type.OriginalDefinition.SpecialType 311129"];
8861 [label="get\n            {\n                return _corTypeId;\n            } 311130"];
8862 [label="return _corTypeId; 311131"];
8863 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 311132"];
8864 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 311133"];
8865 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 311134"];
8866 [label="CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()) 311135"];
8867 [label="param CreateNonLazyType(TypeSymbol typeSymbol) 311136"];
8868 [label="param CreateNonLazyType(NullableAnnotation nullableAnnotation) 311137"];
8869 [label="param CreateNonLazyType(ImmutableArray<CustomModifier> customModifiers) 311138"];
8870 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 311139"];
8871 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 311140"];
8872 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 311141"];
8873 [label="Extensions.Create(customModifiers) 311142"];
8874 [label="param Create(ImmutableArray<CustomModifier> customModifiers) 311143"];
8875 [label="if (customModifiers.IsEmpty)\n                {\n                    return Default;\n                } 311144"];
8876 [label="return Default; 311145"];
8877 [label="return new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)); 311146"];
8878 [label="new TypeWithAnnotations(typeSymbol, nullableAnnotation, Extensions.Create(customModifiers)) 311147"];
8879 [label="param TypeWithAnnotations(TypeSymbol defaultType) 311148"];
8880 [label="param TypeWithAnnotations(NullableAnnotation nullableAnnotation) 311149"];
8881 [label="param TypeWithAnnotations(Extensions extensions) 311150"];
8882 [label="param TypeWithAnnotations(this) 311151"];
8883 [label="var a1 = defaultType is null; 311152"];
8884 [label="!a1 311153"];
8885 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 311154"];
8886 [label="defaultType.IsNullableType() 311155"];
8887 [label="param IsNullableType(this TypeSymbol type) 311156"];
8888 [label="type.OriginalDefinition 311157"];
8889 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 311158"];
8890 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 311159"];
8891 [label="type.OriginalDefinition.SpecialType 311160"];
8892 [label="get\n            {\n                return _corTypeId;\n            } 311161"];
8893 [label="return _corTypeId; 311162"];
8894 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 311163"];
8895 [label="Debug.Assert(a1 || a2 != true || a3); 311164"];
8896 [label="Debug.Assert(a1 || a2 != true || a3); 311165"];
8897 [label="Debug.Assert(extensions != null); 311166"];
8898 [label="Debug.Assert(extensions != null); 311167"];
8899 [label="DefaultType 311168"];
8900 [label="NullableAnnotation 311169"];
8901 [label="_extensions 311170"];
8902 [label="return CreateNonLazyType(typeSymbol, nullableAnnotation, customModifiers.NullToEmpty()); 311171"];
8903 [label="_lazyReturnType = TypeWithAnnotations.Create(bodyBinder.GetSpecialType(SpecialType.System_Void, diagnostics, syntax)); 311172"];
8904 [label="_lazyReturnType 311173"];
8905 [label="this.Locations 311174"];
8906 [label="get\n            {\n                return this.locations;\n            } 311175"];
8907 [label="return this.locations; 311176"];
8908 [label="var location = this.Locations[0]; 311177"];
8909 [label="var location = this.Locations[0]; 311178"];
8910 [label="var location = this.Locations[0]; 311179"];
8911 [label="MethodKind 311180"];
8912 [label="get\n            {\n                return this.flags.MethodKind;\n            } 311181"];
8913 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 311182"];
8914 [label="if (MethodKind == MethodKind.StaticConstructor && (_lazyParameters.Length != 0))\n            {\n                diagnostics.Add(ErrorCode.ERR_StaticConstParam, location, this);\n            } 311183"];
8915 [label="this.CheckEffectiveAccessibility(_lazyReturnType, _lazyParameters, diagnostics); 311184"];
8916 [label="this.CheckEffectiveAccessibility(_lazyReturnType, _lazyParameters, diagnostics); 311185"];
8917 [label="this.CheckEffectiveAccessibility(_lazyReturnType, _lazyParameters, diagnostics) 311186"];
8918 [label="param CheckEffectiveAccessibility(TypeWithAnnotations returnType) 311187"];
8919 [label="param CheckEffectiveAccessibility(ImmutableArray<ParameterSymbol> parameters) 311188"];
8920 [label="param CheckEffectiveAccessibility(DiagnosticBag diagnostics) 311189"];
8921 [label="param CheckEffectiveAccessibility(this) 311190"];
8922 [label="this.DeclaredAccessibility 311191"];
8923 [label="get\n            {\n                return ModifierUtils.EffectiveAccessibility(this.DeclarationModifiers);\n            } 311192"];
8924 [label="return ModifierUtils.EffectiveAccessibility(this.DeclarationModifiers); 311193"];
8925 [label="ModifierUtils.EffectiveAccessibility(this.DeclarationModifiers) 311194"];
8926 [label="param EffectiveAccessibility(DeclarationModifiers modifiers) 311195"];
8927 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                    return Accessibility.NotApplicable; // for explicit interface implementation\n                case DeclarationModifiers.Private:\n                    return Accessibility.Private;\n                case DeclarationModifiers.Protected:\n                    return Accessibility.Protected;\n                case DeclarationModifiers.Internal:\n                    return Accessibility.Internal;\n                case DeclarationModifiers.Public:\n                    return Accessibility.Public;\n                case DeclarationModifiers.ProtectedInternal:\n                    return Accessibility.ProtectedOrInternal;\n                case DeclarationModifiers.PrivateProtected:\n                    return Accessibility.ProtectedAndInternal;\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return Accessibility.Public;\n            } 311196"];
8928 [label="return Accessibility.Public; 311197"];
8929 [label="if (this.DeclaredAccessibility <= Accessibility.Private || MethodKind == MethodKind.ExplicitInterfaceImplementation)\n            {\n                return;\n            } 311198"];
8930 [label="MethodKind 311199"];
8931 [label="get\n            {\n                return this.flags.MethodKind;\n            } 311200"];
8932 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 311201"];
8933 [label="if (this.DeclaredAccessibility <= Accessibility.Private || MethodKind == MethodKind.ExplicitInterfaceImplementation)\n            {\n                return;\n            } 311202"];
8934 [label="if (this.DeclaredAccessibility <= Accessibility.Private || MethodKind == MethodKind.ExplicitInterfaceImplementation)\n            {\n                return;\n            } 311203"];
8935 [label="this.MethodKind 311204"];
8936 [label="get\n            {\n                return this.flags.MethodKind;\n            } 311205"];
8937 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 311206"];
8938 [label="ErrorCode code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpReturn :\n                ErrorCode.ERR_BadVisReturnType; 311207"];
8939 [label="this.MethodKind 311208"];
8940 [label="get\n            {\n                return this.flags.MethodKind;\n            } 311209"];
8941 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 311210"];
8942 [label="ErrorCode code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpReturn :\n                ErrorCode.ERR_BadVisReturnType; 311211"];
8943 [label="ErrorCode code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpReturn :\n                ErrorCode.ERR_BadVisReturnType; 311212"];
8944 [label="(this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) 311213"];
8945 [label="HashSet<DiagnosticInfo> useSiteDiagnostics = null; 311214"];
8946 [label="if (!this.IsNoMoreVisibleThan(returnType, ref useSiteDiagnostics))\n            {\n                // Inconsistent accessibility: return type '{1}' is less accessible than method '{0}'\n                diagnostics.Add(code, Locations[0], this, returnType.Type);\n            } 311215"];
8947 [label="if (!this.IsNoMoreVisibleThan(returnType, ref useSiteDiagnostics))\n            {\n                // Inconsistent accessibility: return type '{1}' is less accessible than method '{0}'\n                diagnostics.Add(code, Locations[0], this, returnType.Type);\n            } 311216"];
8948 [label="if (!this.IsNoMoreVisibleThan(returnType, ref useSiteDiagnostics))\n            {\n                // Inconsistent accessibility: return type '{1}' is less accessible than method '{0}'\n                diagnostics.Add(code, Locations[0], this, returnType.Type);\n            } 311217"];
8949 [label="this.IsNoMoreVisibleThan(returnType, ref useSiteDiagnostics) 311218"];
8950 [label="param IsNoMoreVisibleThan(this Symbol symbol) 311219"];
8951 [label="param IsNoMoreVisibleThan(TypeWithAnnotations type) 311220"];
8952 [label="param IsNoMoreVisibleThan(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 311221"];
8953 [label="return type.IsAtLeastAsVisibleAs(symbol, ref useSiteDiagnostics); 311222"];
8954 [label="return type.IsAtLeastAsVisibleAs(symbol, ref useSiteDiagnostics); 311223"];
8955 [label="type.IsAtLeastAsVisibleAs(symbol, ref useSiteDiagnostics) 311224"];
8956 [label="param IsAtLeastAsVisibleAs(Symbol sym) 311225"];
8957 [label="param IsAtLeastAsVisibleAs(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 311226"];
8958 [label="param IsAtLeastAsVisibleAs(this) 311227"];
8959 [label="NullableUnderlyingTypeOrSelf 311228"];
8960 [label="=> _extensions.GetNullableUnderlyingTypeOrSelf(DefaultType) 311229"];
8961 [label="DefaultType 311230"];
8962 [label="_extensions.GetNullableUnderlyingTypeOrSelf(DefaultType) 311231"];
8963 [label="param GetNullableUnderlyingTypeOrSelf(TypeSymbol typeSymbol) 311232"];
8964 [label="=> typeSymbol.StrippedType() 311233"];
8965 [label="typeSymbol 311234"];
8966 [label="typeSymbol.StrippedType() 311235"];
8967 [label="param StrippedType(this TypeSymbol type) 311236"];
8968 [label="return type.IsNullableType() ? type.GetNullableUnderlyingType() : type; 311237"];
8969 [label="type.IsNullableType() 311238"];
8970 [label="param IsNullableType(this TypeSymbol type) 311239"];
8971 [label="type.OriginalDefinition 311240"];
8972 [label="get\n            {\n                return OriginalTypeSymbolDefinition;\n            } 311241"];
8973 [label="return type.OriginalDefinition.SpecialType == SpecialType.System_Nullable_T; 311242"];
8974 [label="type.OriginalDefinition.SpecialType 311243"];
8975 [label="get\n            {\n                return _corTypeId;\n            } 311244"];
8976 [label="return NullableUnderlyingTypeOrSelf.IsAtLeastAsVisibleAs(sym, ref useSiteDiagnostics); 311245"];
8977 [label="return NullableUnderlyingTypeOrSelf.IsAtLeastAsVisibleAs(sym, ref useSiteDiagnostics); 311246"];
8978 [label="return NullableUnderlyingTypeOrSelf.IsAtLeastAsVisibleAs(sym, ref useSiteDiagnostics); 311247"];
8979 [label="NullableUnderlyingTypeOrSelf.IsAtLeastAsVisibleAs(sym, ref useSiteDiagnostics) 311248"];
8980 [label="param IsAtLeastAsVisibleAs(this TypeSymbol type) 311249"];
8981 [label="param IsAtLeastAsVisibleAs(Symbol sym) 311250"];
8982 [label="param IsAtLeastAsVisibleAs(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 311251"];
8983 [label="HashSet<DiagnosticInfo>? localUseSiteDiagnostics = useSiteDiagnostics; 311252"];
8984 [label="var result = type.VisitType((type1, symbol, unused) => IsTypeLessVisibleThan(type1, symbol, ref localUseSiteDiagnostics), sym,\n                                        canDigThroughNullable: true); 311253"];
8985 [label="var result = type.VisitType((type1, symbol, unused) => IsTypeLessVisibleThan(type1, symbol, ref localUseSiteDiagnostics), sym,\n                                        canDigThroughNullable: true); 311254"];
8986 [label="var result = type.VisitType((type1, symbol, unused) => IsTypeLessVisibleThan(type1, symbol, ref localUseSiteDiagnostics), sym,\n                                        canDigThroughNullable: true); 311255"];
8987 [label="var result = type.VisitType((type1, symbol, unused) => IsTypeLessVisibleThan(type1, symbol, ref localUseSiteDiagnostics), sym,\n                                        canDigThroughNullable: true); 311256"];
8988 [label="type.VisitType((type1, symbol, unused) => IsTypeLessVisibleThan(type1, symbol, ref localUseSiteDiagnostics), sym,\n                                        canDigThroughNullable: true) 311257"];
8989 [label="param VisitType(this TypeSymbol type) 311258"];
8990 [label="param VisitType(Func<TypeSymbol, T, bool, bool> predicate) 311259"];
8991 [label="param VisitType(T arg) 311260"];
8992 [label="param VisitType(bool canDigThroughNullable = false) 311261"];
8993 [label="return VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable); 311262"];
8994 [label="return VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable); 311263"];
8995 [label="return VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable); 311264"];
8996 [label="return VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable); 311265"];
8997 [label="return VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable); 311266"];
8998 [label="VisitType(\n                typeWithAnnotationsOpt: default,\n                type: type,\n                typeWithAnnotationsPredicate: null,\n                typePredicate: predicate,\n                arg,\n                canDigThroughNullable) 311267"];
8999 [label="param VisitType(this TypeWithAnnotations typeWithAnnotationsOpt) 311268"];
9000 [label="param VisitType(TypeSymbol? type) 311269"];
9001 [label="param VisitType(Func<TypeWithAnnotations, T, bool, bool>? typeWithAnnotationsPredicate) 311270"];
9002 [label="param VisitType(Func<TypeSymbol, T, bool, bool>? typePredicate) 311271"];
9003 [label="param VisitType(T arg) 311272"];
9004 [label="param VisitType(bool canDigThroughNullable = false) 311273"];
9005 [label="param VisitType(bool useDefaultType = false) 311274"];
9006 [label="typeWithAnnotationsOpt.HasType 311275"];
9007 [label="=> !(DefaultType is null) 311276"];
9008 [label="DefaultType is null 311277"];
9009 [label="!(DefaultType is null) 311278"];
9010 [label="RoslynDebug.Assert(typeWithAnnotationsOpt.HasType == (type is null)); 311279"];
9011 [label="RoslynDebug.Assert(typeWithAnnotationsOpt.HasType == (type is null)); 311280"];
9012 [label="RoslynDebug.Assert(typeWithAnnotationsOpt.HasType == (type is null)); 311281"];
9013 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 311282"];
9014 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 311283"];
9015 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 311284"];
9016 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 311285"];
9017 [label="while (true)\n            {\n                TypeSymbol current = type ?? (useDefaultType ? typeWithAnnotationsOpt.DefaultType : typeWithAnnotationsOpt.Type);\n                bool isNestedNamedType = false;\n\n                // Visit containing types from outer-most to inner-most.\n                switch (current.TypeKind)\n                {\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Enum:\n                    case TypeKind.Delegate:\n                        {\n                            var containingType = current.ContainingType;\n                            if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            }\n                        }\n                        break;\n\n                    case TypeKind.Submission:\n                        RoslynDebug.Assert((object)current.ContainingType == null);\n                        break;\n                }\n\n                if (typeWithAnnotationsOpt.HasType && typeWithAnnotationsPredicate != null)\n                {\n                    if (typeWithAnnotationsPredicate(typeWithAnnotationsOpt, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                }\n                else if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                }\n\n                TypeWithAnnotations next;\n\n                switch (current.TypeKind)\n                {\n                    case TypeKind.Dynamic:\n                    case TypeKind.TypeParameter:\n                    case TypeKind.Submission:\n                    case TypeKind.Enum:\n                        return null;\n\n                    case TypeKind.Error:\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Delegate:\n                        var typeArguments = ((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics;\n                        if (typeArguments.IsEmpty)\n                        {\n                            return null;\n                        }\n\n                        int i;\n                        for (i = 0; i < typeArguments.Length - 1; i++)\n                        {\n                            // Let's try to avoid early resolution of nullable types\n                            (TypeWithAnnotations nextTypeWithAnnotations, TypeSymbol? nextType) = getNextIterationElements(typeArguments[i], canDigThroughNullable);\n                            var result = VisitType(\n                                typeWithAnnotationsOpt: nextTypeWithAnnotations,\n                                type: nextType,\n                                typeWithAnnotationsPredicate,\n                                typePredicate,\n                                arg,\n                                canDigThroughNullable,\n                                useDefaultType);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n                        }\n\n                        next = typeArguments[i];\n                        break;\n\n                    case TypeKind.Array:\n                        next = ((ArrayTypeSymbol)current).ElementTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.Pointer:\n                        next = ((PointerTypeSymbol)current).PointedAtTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.FunctionPointer:\n                        {\n                            var result = visitFunctionPointerType((FunctionPointerTypeSymbol)current, typeWithAnnotationsPredicate, typePredicate, arg, useDefaultType, canDigThroughNullable, out next);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n\n                            break;\n                        }\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(current.TypeKind);\n                }\n\n                // Let's try to avoid early resolution of nullable types\n                typeWithAnnotationsOpt = canDigThroughNullable ? default : next;\n                type = canDigThroughNullable ? next.NullableUnderlyingTypeOrSelf : null;\n            } 311286"];
9018 [label="TypeSymbol current = type ?? (useDefaultType ? typeWithAnnotationsOpt.DefaultType : typeWithAnnotationsOpt.Type); 311287"];
9019 [label="bool isNestedNamedType = false; 311288"];
9020 [label="current.TypeKind 311289"];
9021 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 311290"];
9022 [label="return result; 311291"];
9023 [label="switch (current.TypeKind)\n                {\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Enum:\n                    case TypeKind.Delegate:\n                        {\n                            var containingType = current.ContainingType;\n                            if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            }\n                        }\n                        break;\n\n                    case TypeKind.Submission:\n                        RoslynDebug.Assert((object)current.ContainingType == null);\n                        break;\n                } 311292"];
9024 [label="current.ContainingType 311293"];
9025 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 311294"];
9026 [label="return _container as NamedTypeSymbol; 311295"];
9027 [label="var containingType = current.ContainingType; 311296"];
9028 [label="if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            } 311297"];
9029 [label="if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            } 311298"];
9030 [label="typeWithAnnotationsOpt.HasType 311299"];
9031 [label="=> !(DefaultType is null) 311300"];
9032 [label="DefaultType is null 311301"];
9033 [label="!(DefaultType is null) 311302"];
9034 [label="if (typeWithAnnotationsOpt.HasType && typeWithAnnotationsPredicate != null)\n                {\n                    if (typeWithAnnotationsPredicate(typeWithAnnotationsOpt, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                }\n                else if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                } 311303"];
9035 [label="if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                } 311304"];
9036 [label="if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                } 311305"];
9037 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 311306"];
9038 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 311307"];
9039 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 311308"];
9040 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 311309"];
9041 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 311310"];
9042 [label="param IsTypeLessVisibleThan(TypeSymbol type) 311311"];
9043 [label="param IsTypeLessVisibleThan(Symbol sym) 311312"];
9044 [label="param IsTypeLessVisibleThan(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 311313"];
9045 [label="type.TypeKind 311314"];
9046 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 311315"];
9047 [label="return result; 311316"];
9048 [label="switch (type.TypeKind)\n            {\n                case TypeKind.Class:\n                case TypeKind.Struct:\n                case TypeKind.Interface:\n                case TypeKind.Enum:\n                case TypeKind.Delegate:\n                case TypeKind.Submission:\n                    return !IsAsRestrictive((NamedTypeSymbol)type, sym, ref useSiteDiagnostics);\n\n                default:\n                    return false;\n            } 311317"];
9049 [label="return !IsAsRestrictive((NamedTypeSymbol)type, sym, ref useSiteDiagnostics); 311318"];
9050 [label="return !IsAsRestrictive((NamedTypeSymbol)type, sym, ref useSiteDiagnostics); 311319"];
9051 [label="return !IsAsRestrictive((NamedTypeSymbol)type, sym, ref useSiteDiagnostics); 311320"];
9052 [label="IsAsRestrictive((NamedTypeSymbol)type, sym, ref useSiteDiagnostics) 311321"];
9053 [label="param IsAsRestrictive(NamedTypeSymbol s1) 311322"];
9054 [label="param IsAsRestrictive(Symbol sym2) 311323"];
9055 [label="param IsAsRestrictive(ref HashSet<DiagnosticInfo>? useSiteDiagnostics) 311324"];
9056 [label="s1.DeclaredAccessibility 311325"];
9057 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 311326"];
9058 [label="Accessibility access = Accessibility.Private; 311327"];
9059 [label="Accessibility acc1 = s1.DeclaredAccessibility; 311328"];
9060 [label="if (acc1 == Accessibility.Public)\n            {\n                return true;\n            } 311329"];
9061 [label="return true; 311330"];
9062 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 311331"];
9063 [label="TypeWithAnnotations next; 311332"];
9064 [label="next 311333"];
9065 [label="current.TypeKind 311334"];
9066 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 311335"];
9067 [label="TypeKind result = _lazyKind; 311336"];
9068 [label="switch (current.TypeKind)\n                {\n                    case TypeKind.Dynamic:\n                    case TypeKind.TypeParameter:\n                    case TypeKind.Submission:\n                    case TypeKind.Enum:\n                        return null;\n\n                    case TypeKind.Error:\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Delegate:\n                        var typeArguments = ((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics;\n                        if (typeArguments.IsEmpty)\n                        {\n                            return null;\n                        }\n\n                        int i;\n                        for (i = 0; i < typeArguments.Length - 1; i++)\n                        {\n                            // Let's try to avoid early resolution of nullable types\n                            (TypeWithAnnotations nextTypeWithAnnotations, TypeSymbol? nextType) = getNextIterationElements(typeArguments[i], canDigThroughNullable);\n                            var result = VisitType(\n                                typeWithAnnotationsOpt: nextTypeWithAnnotations,\n                                type: nextType,\n                                typeWithAnnotationsPredicate,\n                                typePredicate,\n                                arg,\n                                canDigThroughNullable,\n                                useDefaultType);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n                        }\n\n                        next = typeArguments[i];\n                        break;\n\n                    case TypeKind.Array:\n                        next = ((ArrayTypeSymbol)current).ElementTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.Pointer:\n                        next = ((PointerTypeSymbol)current).PointedAtTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.FunctionPointer:\n                        {\n                            var result = visitFunctionPointerType((FunctionPointerTypeSymbol)current, typeWithAnnotationsPredicate, typePredicate, arg, useDefaultType, canDigThroughNullable, out next);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n\n                            break;\n                        }\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(current.TypeKind);\n                } 311337"];
9069 [label="((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 311338"];
9070 [label="get\n            {\n                return ImmutableArray<TypeWithAnnotations>.Empty;\n            } 311339"];
9071 [label="return ImmutableArray<TypeWithAnnotations>.Empty; 311340"];
9072 [label="var typeArguments = ((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics; 311341"];
9073 [label="if (typeArguments.IsEmpty)\n                        {\n                            return null;\n                        } 311342"];
9074 [label="return null; 311343"];
9075 [label="useSiteDiagnostics = localUseSiteDiagnostics; 311344"];
9076 [label="return result is null; 311345"];
9077 [label="this.MethodKind 311346"];
9078 [label="get\n            {\n                return this.flags.MethodKind;\n            } 311347"];
9079 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 311348"];
9080 [label="code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpParam :\n                ErrorCode.ERR_BadVisParamType; 311349"];
9081 [label="this.MethodKind 311350"];
9082 [label="get\n            {\n                return this.flags.MethodKind;\n            } 311351"];
9083 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 311352"];
9084 [label="code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpParam :\n                ErrorCode.ERR_BadVisParamType; 311353"];
9085 [label="code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpParam :\n                ErrorCode.ERR_BadVisParamType; 311354"];
9086 [label="(this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) 311355"];
9087 [label="foreach (var parameter in parameters)\n            {\n                if (!parameter.TypeWithAnnotations.IsAtLeastAsVisibleAs(this, ref useSiteDiagnostics))\n                {\n                    // Inconsistent accessibility: parameter type '{1}' is less accessible than method '{0}'\n                    diagnostics.Add(code, Locations[0], this, parameter.Type);\n                }\n            } 311356"];
9088 [label="diagnostics.Add(Locations[0], useSiteDiagnostics); 311357"];
9089 [label="Locations 311358"];
9090 [label="get\n            {\n                return this.locations;\n            } 311359"];
9091 [label="return this.locations; 311360"];
9092 [label="diagnostics.Add(Locations[0], useSiteDiagnostics); 311361"];
9093 [label="diagnostics.Add(Locations[0], useSiteDiagnostics); 311362"];
9094 [label="diagnostics.Add(Locations[0], useSiteDiagnostics); 311363"];
9095 [label="diagnostics.Add(Locations[0], useSiteDiagnostics); 311364"];
9096 [label="this.CheckEffectiveAccessibility(_lazyReturnType, _lazyParameters, diagnostics); 311365"];
9097 [label="if (_lazyIsVararg && (IsGenericMethod || ContainingType.IsGenericType || _lazyParameters.Length > 0 && _lazyParameters[_lazyParameters.Length - 1].IsParams))\n            {\n                diagnostics.Add(ErrorCode.ERR_BadVarargs, location);\n            } 311366"];
9098 [label="MethodChecks(diagnostics); 311367"];
9099 [label="AddDeclarationDiagnostics(diagnostics); 311368"];
9100 [label="AddDeclarationDiagnostics(diagnostics) 311369"];
9101 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 311370"];
9102 [label="param AddDeclarationDiagnostics(this) 311371"];
9103 [label="ContainingSymbol 311372"];
9104 [label="get\n            {\n                return _containingType;\n            } 311373"];
9105 [label="return _containingType; 311374"];
9106 [label="if (ContainingSymbol is SourceMemberContainerTypeSymbol container)\n            {\n                container.AssertMemberExposure(this, forDiagnostics: true);\n            } 311375"];
9107 [label="container.AssertMemberExposure(this, forDiagnostics: true); 311376"];
9108 [label="container.AssertMemberExposure(this, forDiagnostics: true); 311377"];
9109 [label="container.AssertMemberExposure(this, forDiagnostics: true) 311378"];
9110 [label="param AssertMemberExposure(Symbol member) 311379"];
9111 [label="param AssertMemberExposure(bool forDiagnostics = false) 311380"];
9112 [label="if (member is NamedTypeSymbol type)\n            {\n                Debug.Assert(forDiagnostics);\n                // Lafhis\n                var temp = Volatile.Read(ref _lazyTypeMembers);\n                Debug.Assert(temp != null ? temp.Values.Any(types => types.Contains(t => t == (object)type)) == true : false);\n                return;\n            }\n            else if (member is TypeParameterSymbol || member is SynthesizedMethodBaseSymbol)\n            {\n                Debug.Assert(forDiagnostics);\n                return;\n            }\n            else if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 311381"];
9113 [label="if (member is TypeParameterSymbol || member is SynthesizedMethodBaseSymbol)\n            {\n                Debug.Assert(forDiagnostics);\n                return;\n            }\n            else if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 311382"];
9114 [label="if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 311383"];
9115 [label="Debug.Assert(declared != DeclaredMembersAndInitializers.UninitializedSentinel); 311384"];
9116 [label="return; 311385"];
9117 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 311386"];
9118 [label="AddDeclarationDiagnostics(diagnostics); 311387"];
9119 [label="state.NotePartComplete(CompletionPart.FinishMethodChecks); 311388"];
9120 [label="state.NotePartComplete(CompletionPart.FinishMethodChecks) 311389"];
9121 [label="param NotePartComplete(CompletionPart part) 311390"];
9122 [label="param NotePartComplete(this) 311391"];
9123 [label="return ThreadSafeFlagOperations.Set(ref _completeParts, (int)part); 311392"];
9124 [label="diagnostics.Free(); 311393"];
9125 [label="LazyMethodChecks(); 311394"];
9126 [label="return _lazyIsVararg; 311395"];
9127 [label="AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters); 311396"];
9128 [label="symbol.Parameters 311397"];
9129 [label="get\n            {\n                return _underlying.Parameters.GetPublicSymbols();\n            } 311398"];
9130 [label="_underlying.Parameters 311399"];
9131 [label="get\n            {\n                LazyMethodChecks();\n                return _lazyParameters;\n            } 311400"];
9132 [label="LazyMethodChecks() 311401"];
9133 [label="param LazyMethodChecks(this) 311402"];
9134 [label="if (!state.HasComplete(CompletionPart.FinishMethodChecks))\n            {\n                // TODO: if this lock ever encloses a potential call to Debugger.NotifyOfCrossThreadDependency,\n                // then we should call DebuggerUtilities.CallBeforeAcquiringLock() (see method comment for more\n                // details).\n\n                object lockObject = MethodChecksLockObject;\n                Debug.Assert(lockObject != null);\n                lock (lockObject)\n                {\n                    if (state.NotePartComplete(CompletionPart.StartMethodChecks))\n                    {\n                        // By setting StartMethodChecks, we've committed to doing the checks and setting\n                        // FinishMethodChecks.  So there is no cancellation supported between one and the other.\n                        var diagnostics = DiagnosticBag.GetInstance();\n                        try\n                        {\n                            MethodChecks(diagnostics);\n                            AddDeclarationDiagnostics(diagnostics);\n                        }\n                        finally\n                        {\n                            state.NotePartComplete(CompletionPart.FinishMethodChecks);\n                            diagnostics.Free();\n                        }\n                    }\n                    else\n                    {\n                        // Either (1) this thread is in the process of completing the method,\n                        // or (2) some other thread has beat us to the punch and completed the method.\n                        // We can distinguish the two cases here by checking for the FinishMethodChecks\n                        // part to be complete, which would only occur if another thread completed this\n                        // method.\n                        //\n                        // The other case, in which this thread is in the process of completing the method,\n                        // requires that we return here even though the checks are not complete.  That's because\n                        // methods are processed by first populating the return type and parameters by binding\n                        // the syntax from source.  Those values are visible to the same thread for the purpose\n                        // of computing which methods are implemented and overridden.  But then those values\n                        // may be rewritten (by the same thread) to copy down custom modifiers.  In order to\n                        // allow the same thread to see the return type and parameters from the syntax (though\n                        // they do not yet take on their final values), we return here.\n\n                        // Due to the fact that LazyMethodChecks is potentially reentrant, we must use a \n                        // reentrant lock to avoid deadlock and cannot assert that at this point method checks\n                        // have completed (state.HasComplete(CompletionPart.FinishMethodChecks)).\n                    }\n                }\n            } 311403"];
9135 [label="state.HasComplete(CompletionPart.FinishMethodChecks) 311404"];
9136 [label="param HasComplete(CompletionPart part) 311405"];
9137 [label="LazyMethodChecks(); 311406"];
9138 [label="return _lazyParameters; 311407"];
9139 [label="return _underlying.Parameters.GetPublicSymbols(); 311408"];
9140 [label="_underlying.Parameters.GetPublicSymbols() 311409"];
9141 [label="param GetPublicSymbols(this ImmutableArray<ParameterSymbol> symbols) 311410"];
9142 [label="return GetPublicSymbols<IParameterSymbol>(StaticCast<Symbol>.From(symbols)); 311411"];
9143 [label="GetPublicSymbols<IParameterSymbol>(StaticCast<Symbol>.From(symbols)) 311412"];
9144 [label="param GetPublicSymbols(this ImmutableArray<Symbol> symbols) 311413"];
9145 [label="if (symbols.IsDefault)\n            {\n                return default;\n            } 311414"];
9146 [label="return symbols.SelectAsArray(p => p.GetPublicSymbol<TISymbol>()); 311415"];
9147 [label="return symbols.SelectAsArray(p => p.GetPublicSymbol<TISymbol>()); 311416"];
9148 [label="AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters); 311417"];
9149 [label="AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters) 311418"];
9150 [label="param AddParametersIfRequired(bool hasThisParameter) 311419"];
9151 [label="param AddParametersIfRequired(bool isVarargs) 311420"];
9152 [label="param AddParametersIfRequired(ImmutableArray<IParameterSymbol> parameters) 311421"];
9153 [label="param AddParametersIfRequired(this) 311422"];
9154 [label="if (format.ParameterOptions == SymbolDisplayParameterOptions.None)\n            {\n                return;\n            } 311423"];
9155 [label="var first = true; 311424"];
9156 [label="if (!parameters.IsDefault)\n            {\n                foreach (var param in parameters)\n                {\n                    if (!first)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                        AddSpace();\n                    }\n                    else if (hasThisParameter)\n                    {\n                        if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeExtensionThis))\n                        {\n                            AddKeyword(SyntaxKind.ThisKeyword);\n                            AddSpace();\n                        }\n                    }\n\n                    first = false;\n                    param.Accept(this.NotFirstVisitor);\n                }\n            } 311425"];
9157 [label="foreach (var param in parameters)\n                {\n                    if (!first)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                        AddSpace();\n                    }\n                    else if (hasThisParameter)\n                    {\n                        if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeExtensionThis))\n                        {\n                            AddKeyword(SyntaxKind.ThisKeyword);\n                            AddSpace();\n                        }\n                    }\n\n                    first = false;\n                    param.Accept(this.NotFirstVisitor);\n                } 311426"];
9158 [label="if (isVarargs)\n            {\n                if (!first)\n                {\n                    AddPunctuation(SyntaxKind.CommaToken);\n                    AddSpace();\n                }\n\n                AddKeyword(SyntaxKind.ArgListKeyword);\n            } 311427"];
9159 [label="AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters); 311428"];
9160 [label="AddPunctuation(SyntaxKind.CloseParenToken); 311429"];
9161 [label="AddPunctuation(SyntaxKind.CloseParenToken) 311430"];
9162 [label="param AddPunctuation(SyntaxKind punctuationKind) 311431"];
9163 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 311432"];
9164 [label="AddPunctuation(SyntaxKind.CloseParenToken); 311433"];
9165 [label="param AddTypeParameterConstraints(IMethodSymbol symbol) 311434"];
9166 [label="param AddTypeParameterConstraints(this) 311435"];
9167 [label="if (format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeConstraints))\n            {\n                AddTypeParameterConstraints(symbol.TypeArguments);\n            } 311436"];
9168 [label="if (format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeConstraints))\n            {\n                AddTypeParameterConstraints(symbol.TypeArguments);\n            } 311437"];
9169 [label="Accept(visitor); 311438"];
9170 [label="symbol.Accept(visitor); 311439"];
9171 [label="param Symbol(this) 311440"];
9172 [label="_underlying 311441"];
9173 [label="Debug.Assert(underlying is object); 311442"];
9174 [label="if (symbol == null)\n            {\n                throw new ArgumentNullException(nameof(symbol));\n            } 311443"];
9175 [label="=> _underlying 311444"];
9176 [label="if (symbol is Symbols.PublicModel.MethodSymbol && \n                ((Symbols.PublicModel.MethodSymbol)symbol).UnderlyingMethodSymbol is SynthesizedSimpleProgramEntryPointSymbol)\n            {\n                return ImmutableArray.Create<SymbolDisplayPart>(new SymbolDisplayPart(SymbolDisplayPartKind.MethodName, symbol, '<top-level-statements-entry-point>'));\n            } 311445"];
9177 [label="param AddAccessibilityIfRequired(ISymbol symbol) 311446"];
9178 [label="param AddAccessibilityIfRequired(this) 311447"];
9179 [label="get\n            {\n                return UnderlyingSymbol.ContainingType.GetPublicSymbol();\n            } 311448"];
9180 [label="INamedTypeSymbol containingType = symbol.ContainingType; 311449"];
9181 [label="Debug.Assert((object)containingType != null || (symbol.ContainingSymbol is ITypeSymbol)); 311450"];
9182 [label="if (format.MemberOptions.IncludesOption(SymbolDisplayMemberOptions.IncludeAccessibility) &&\n                (containingType == null ||\n                 (containingType.TypeKind != TypeKind.Interface && !IsEnumMember(symbol) & !IsLocalFunction(symbol))))\n            {\n                AddAccessibility(symbol);\n            } 311451"];
9183 [label="param AddMemberModifiersIfRequired(ISymbol symbol) 311452"];
9184 [label="param AddMemberModifiersIfRequired(this) 311453"];
9185 [label="get\n            {\n                return UnderlyingSymbol.ContainingType.GetPublicSymbol();\n            } 311454"];
9186 [label="INamedTypeSymbol containingType = symbol.ContainingType; 311455"];
9187 [label="Debug.Assert(containingType != null || (symbol.ContainingSymbol is ITypeSymbol)); 311456"];
9188 [label="if (format.MemberOptions.IncludesOption(SymbolDisplayMemberOptions.IncludeModifiers) &&\n                (containingType == null ||\n                 (containingType.TypeKind != TypeKind.Interface && !IsEnumMember(symbol) && !IsLocalFunction(symbol))))\n            {\n                var isConst = symbol is IFieldSymbol && ((IFieldSymbol)symbol).IsConst;\n                if (symbol.IsStatic && !isConst)\n                {\n                    AddKeyword(SyntaxKind.StaticKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsOverride)\n                {\n                    AddKeyword(SyntaxKind.OverrideKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsAbstract)\n                {\n                    AddKeyword(SyntaxKind.AbstractKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsSealed)\n                {\n                    AddKeyword(SyntaxKind.SealedKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsExtern)\n                {\n                    AddKeyword(SyntaxKind.ExternKeyword);\n                    AddSpace();\n                }\n\n                if (symbol.IsVirtual)\n                {\n                    AddKeyword(SyntaxKind.VirtualKeyword);\n                    AddSpace();\n                }\n            } 311457"];
9189 [label="param ShouldMethodDisplayReadOnly(IPropertySymbol propertyOpt = null) 311458"];
9190 [label="get\n            {\n                return UnderlyingSymbol.ContainingType.GetPublicSymbol();\n            } 311459"];
9191 [label="if (method.ContainingType?.IsReadOnly == true)\n            {\n                return false;\n            } 311460"];
9192 [label="=> UnderlyingTypeSymbol.IsReadOnly 311461"];
9193 [label="=> _underlying 311462"];
9194 [label="=> HasFlag(DeclarationModifiers.ReadOnly) 311463"];
9195 [label="=> (_declModifiers & flag) != 0 311464"];
9196 [label="_declModifiers & flag 311465"];
9197 [label="(_declModifiers & flag) != 0 311466"];
9198 [label="var a3 = propertyOpt as Symbols.PublicModel.PropertySymbol; 311467"];
9199 [label="var a4 = a3 != null ? a3.UnderlyingSymbol as SourcePropertySymbolBase : null; 311468"];
9200 [label="a3 != null 311469"];
9201 [label="param IncludeNamedType(this) 311470"];
9202 [label="if (namedType is null)\n            {\n                return false;\n            } 311471"];
9203 [label="return kind == DeclarationKind.Script || kind == DeclarationKind.Submission; 311472"];
9204 [label="if (namedType.IsScriptClass && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.IncludeScriptType))\n            {\n                return false;\n            } 311473"];
9205 [label="if (semanticModelOpt is not null && namedType == semanticModelOpt.Compilation.ScriptGlobalsType)\n            {\n                return false;\n            } 311474"];
9206 [label="if (this.IsMinimizing && TryAddAlias(symbol, builder))\n            {\n                return;\n            } 311475"];
9207 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseSpecialTypes) ||\n                (symbol.IsNativeIntegerType && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseNativeIntegerUnderlyingType)))\n            {\n                if (AddSpecialTypeKeyword(symbol))\n                {\n                    //if we're using special type keywords and this is a special type, then no other work is required\n                    return;\n                }\n            } 311476"];
9208 [label="=> UnderlyingTypeSymbol.IsNativeIntegerType 311477"];
9209 [label="=> _underlying 311478"];
9210 [label="=> false 311479"];
9211 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseSpecialTypes) ||\n                (symbol.IsNativeIntegerType && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseNativeIntegerUnderlyingType)))\n            {\n                if (AddSpecialTypeKeyword(symbol))\n                {\n                    //if we're using special type keywords and this is a special type, then no other work is required\n                    return;\n                }\n            } 311480"];
9212 [label="=> UnderlyingTypeSymbol.IsTupleType 311481"];
9213 [label="=> _underlying 311482"];
9214 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 311483"];
9215 [label="param IsTupleTypeOfCardinality(this) 311484"];
9216 [label="get\n            {\n                return false;\n            } 311485"];
9217 [label="get\n            {\n                return _containingSymbol;\n            } 311486"];
9218 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311487"];
9219 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 311488"];
9220 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 311489"];
9221 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311490"];
9222 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 311491"];
9223 [label="=> _container 311492"];
9224 [label="_container 311493"];
9225 [label="container.ContainingSymbol 311494"];
9226 [label="get\n            {\n                return _assemblySymbol;\n            } 311495"];
9227 [label="return _assemblySymbol; 311496"];
9228 [label="get\n            {\n                return null;\n            } 311497"];
9229 [label="if (this.IsMinimizing || (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol)))\n            {\n                MinimallyQualify(symbol);\n                return;\n            } 311498"];
9230 [label="AddTypeKind(symbol); 311499"];
9231 [label="param AddTypeKind(INamedTypeSymbol symbol) 311500"];
9232 [label="param AddTypeKind(this) 311501"];
9233 [label="if (isFirstSymbolVisited && format.KindOptions.IncludesOption(SymbolDisplayKindOptions.IncludeTypeKeyword))\n            {\n                if (symbol.IsAnonymousType)\n                {\n                    builder.Add(new SymbolDisplayPart(SymbolDisplayPartKind.AnonymousTypeIndicator, null, 'AnonymousType'));\n                    AddSpace();\n                }\n                else if (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol))\n                {\n                    builder.Add(new SymbolDisplayPart(SymbolDisplayPartKind.AnonymousTypeIndicator, null, 'Tuple'));\n                    AddSpace();\n                }\n                else\n                {\n                    switch (symbol.TypeKind)\n                    {\n                        case TypeKind.Class when symbol.IsRecord:\n                            AddKeyword(SyntaxKind.RecordKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Module:\n                        case TypeKind.Class:\n                            AddKeyword(SyntaxKind.ClassKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Enum:\n                            AddKeyword(SyntaxKind.EnumKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Delegate:\n                            AddKeyword(SyntaxKind.DelegateKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Interface:\n                            AddKeyword(SyntaxKind.InterfaceKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Struct:\n                            if (symbol.IsReadOnly)\n                            {\n                                AddKeyword(SyntaxKind.ReadOnlyKeyword);\n                                AddSpace();\n                            }\n\n                            if (symbol.IsRefLikeType)\n                            {\n                                AddKeyword(SyntaxKind.RefKeyword);\n                                AddSpace();\n                            }\n\n                            AddKeyword(SyntaxKind.StructKeyword);\n                            AddSpace();\n                            break;\n                    }\n                }\n            } 311502"];
9234 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var invokeMethod = symbol.DelegateInvokeMethod;\n                    if (invokeMethod.ReturnsByRef)\n                    {\n                        AddRefIfRequired();\n                    }\n                    else if (invokeMethod.ReturnsByRefReadonly)\n                    {\n                        AddRefReadonlyIfRequired();\n                    }\n\n                    if (invokeMethod.ReturnsVoid)\n                    {\n                        AddKeyword(SyntaxKind.VoidKeyword);\n                    }\n                    else\n                    {\n                        AddReturnType(symbol.DelegateInvokeMethod);\n                    }\n\n                    AddSpace();\n                }\n            } 311503"];
9235 [label="param CanShowDelegateSignature(INamedTypeSymbol symbol) 311504"];
9236 [label="param CanShowDelegateSignature(this) 311505"];
9237 [label="return\n                isFirstSymbolVisited &&\n                symbol.TypeKind == TypeKind.Delegate &&\n                format.DelegateStyle != SymbolDisplayDelegateStyle.NameOnly &&\n                symbol.DelegateInvokeMethod != null; 311506"];
9238 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var invokeMethod = symbol.DelegateInvokeMethod;\n                    if (invokeMethod.ReturnsByRef)\n                    {\n                        AddRefIfRequired();\n                    }\n                    else if (invokeMethod.ReturnsByRefReadonly)\n                    {\n                        AddRefReadonlyIfRequired();\n                    }\n\n                    if (invokeMethod.ReturnsVoid)\n                    {\n                        AddKeyword(SyntaxKind.VoidKeyword);\n                    }\n                    else\n                    {\n                        AddReturnType(symbol.DelegateInvokeMethod);\n                    }\n\n                    AddSpace();\n                }\n            } 311507"];
9239 [label="var containingSymbol = symbol.ContainingSymbol; 311508"];
9240 [label="if (ShouldVisitNamespace(containingSymbol))\n            {\n                var namespaceSymbol = (INamespaceSymbol)containingSymbol;\n                var shouldSkip = namespaceSymbol.IsGlobalNamespace && symbol.TypeKind == TypeKind.Error;\n\n                if (!shouldSkip)\n                {\n                    namespaceSymbol.Accept(this.NotFirstVisitor);\n                    AddPunctuation(namespaceSymbol.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                }\n            } 311509"];
9241 [label="param ShouldVisitNamespace(ISymbol containingSymbol) 311510"];
9242 [label="param ShouldVisitNamespace(this) 311511"];
9243 [label="var namespaceSymbol = containingSymbol as INamespaceSymbol; 311512"];
9244 [label="if (namespaceSymbol == null)\n            {\n                return false;\n            } 311513"];
9245 [label="if (format.TypeQualificationStyle != SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces)\n            {\n                return false;\n            } 311514"];
9246 [label="=> _underlying.IsGlobalNamespace 311515"];
9247 [label="get\n            {\n                return (object)ContainingNamespace == null;\n            } 311516"];
9248 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 311517"];
9249 [label="=> _container 311518"];
9250 [label="_container 311519"];
9251 [label="container.ContainingSymbol 311520"];
9252 [label="get\n            {\n                return _assemblySymbol;\n            } 311521"];
9253 [label="return _assemblySymbol; 311522"];
9254 [label="get\n            {\n                return null;\n            } 311523"];
9255 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 311524"];
9256 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 311525"];
9257 [label="if (ShouldVisitNamespace(containingSymbol))\n            {\n                var namespaceSymbol = (INamespaceSymbol)containingSymbol;\n                var shouldSkip = namespaceSymbol.IsGlobalNamespace && symbol.TypeKind == TypeKind.Error;\n\n                if (!shouldSkip)\n                {\n                    namespaceSymbol.Accept(this.NotFirstVisitor);\n                    AddPunctuation(namespaceSymbol.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                }\n            } 311526"];
9258 [label="if (format.TypeQualificationStyle == SymbolDisplayTypeQualificationStyle.NameAndContainingTypes ||\n                format.TypeQualificationStyle == SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces)\n            {\n                if (IncludeNamedType(symbol.ContainingType))\n                {\n                    symbol.ContainingType.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.DotToken);\n                }\n            } 311527"];
9259 [label="symbol.ContainingType 311528"];
9260 [label="get\n            {\n                return _containingSymbol as NamedTypeSymbol;\n            } 311529"];
9261 [label="return _containingSymbol as NamedTypeSymbol; 311530"];
9262 [label="if (IncludeNamedType(symbol.ContainingType))\n                {\n                    symbol.ContainingType.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.DotToken);\n                } 311531"];
9263 [label="IncludeNamedType(symbol.ContainingType) 311532"];
9264 [label="param IncludeNamedType(INamedTypeSymbol namedType) 311533"];
9265 [label="param IncludeNamedType(this) 311534"];
9266 [label="if (namedType is null)\n            {\n                return false;\n            } 311535"];
9267 [label="return false; 311536"];
9268 [label="=> UnderlyingTypeSymbol.IsAnonymousType 311537"];
9269 [label="=> _underlying 311538"];
9270 [label="get\n            {\n                return false;\n            } 311539"];
9271 [label="=> UnderlyingTypeSymbol.IsTupleType 311540"];
9272 [label="=> _underlying 311541"];
9273 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 311542"];
9274 [label="param IsTupleTypeOfCardinality(this) 311543"];
9275 [label="get\n            {\n                return false;\n            } 311544"];
9276 [label="get\n            {\n                return _containingSymbol;\n            } 311545"];
9277 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311546"];
9278 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 311547"];
9279 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 311548"];
9280 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311549"];
9281 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 311550"];
9282 [label="=> _container 311551"];
9283 [label="_container 311552"];
9284 [label="container.ContainingSymbol 311553"];
9285 [label="get\n            {\n                return _assemblySymbol;\n            } 311554"];
9286 [label="return _assemblySymbol; 311555"];
9287 [label="get\n            {\n                return null;\n            } 311556"];
9288 [label="(symbol is Symbols.PublicModel.NamedTypeSymbol) 311557"];
9289 [label="((Symbols.PublicModel.NamedTypeSymbol)symbol).UnderlyingNamedTypeSymbol 311558"];
9290 [label="NamedTypeSymbol underlyingTypeSymbol = (symbol is Symbols.PublicModel.NamedTypeSymbol) ? ((Symbols.PublicModel.NamedTypeSymbol)symbol).UnderlyingNamedTypeSymbol : null; 311559"];
9291 [label="var illegalGenericInstantiationSymbol = underlyingTypeSymbol as NoPiaIllegalGenericInstantiationSymbol; 311560"];
9292 [label="if ((object)illegalGenericInstantiationSymbol != null)\n            {\n                symbol = illegalGenericInstantiationSymbol.UnderlyingSymbol.GetPublicSymbol();\n            }\n            else\n            {\n                var ambiguousCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaAmbiguousCanonicalTypeSymbol;\n\n                if ((object)ambiguousCanonicalTypeSymbol != null)\n                {\n                    symbol = ambiguousCanonicalTypeSymbol.FirstCandidate.GetPublicSymbol();\n                }\n                else\n                {\n                    var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol;\n\n                    if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    }\n                }\n            } 311561"];
9293 [label="var ambiguousCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaAmbiguousCanonicalTypeSymbol; 311562"];
9294 [label="if ((object)ambiguousCanonicalTypeSymbol != null)\n                {\n                    symbol = ambiguousCanonicalTypeSymbol.FirstCandidate.GetPublicSymbol();\n                }\n                else\n                {\n                    var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol;\n\n                    if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    }\n                } 311563"];
9295 [label="if ((object)ambiguousCanonicalTypeSymbol != null)\n                {\n                    symbol = ambiguousCanonicalTypeSymbol.FirstCandidate.GetPublicSymbol();\n                }\n                else\n                {\n                    var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol;\n\n                    if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    }\n                } 311564"];
9296 [label="var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol; 311565"];
9297 [label="if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    } 311566"];
9298 [label="if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    } 311567"];
9299 [label="get\n            {\n                return UnderlyingTypeSymbol.TypeKind;\n            } 311568"];
9300 [label="=> _underlying 311569"];
9301 [label="return UnderlyingTypeSymbol.TypeKind; 311570"];
9302 [label="get\n            {\n                return _flags.TypeKind;\n            } 311571"];
9303 [label="param RemoveAttributeSufficeIfNecessary(INamedTypeSymbol symbol) 311572"];
9304 [label="param RemoveAttributeSufficeIfNecessary(this) 311573"];
9305 [label="if (this.IsMinimizing &&\n                format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.RemoveAttributeSuffix) &&\n                semanticModelOpt.Compilation.IsAttributeType(symbol))\n            {\n                string nameWithoutAttributeSuffix;\n                if (symbolName.TryGetWithoutAttributeSuffix(out nameWithoutAttributeSuffix))\n                {\n                    var token = SyntaxFactory.ParseToken(nameWithoutAttributeSuffix);\n                    if (token.IsKind(SyntaxKind.IdentifierToken))\n                    {\n                        symbolName = nameWithoutAttributeSuffix;\n                    }\n                }\n            } 311574"];
9306 [label="if (format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseArityForGenericTypes))\n            {\n                // Only the compiler can set the internal option and the compiler doesn't use other implementations of INamedTypeSymbol.\n                if (underlyingTypeSymbol?.MangleName == true)\n                {\n                    Debug.Assert(symbol.Arity > 0);\n                    builder.Add(CreatePart(InternalSymbolDisplayPartKind.Arity, null,\n                        MetadataHelpers.GetAritySuffix(symbol.Arity)));\n                }\n            }\n            else if (symbol.Arity > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                // It would be nice to handle VB symbols too, but it's not worth the effort.\n                if (underlyingTypeSymbol is UnsupportedMetadataTypeSymbol || underlyingTypeSymbol is MissingMetadataTypeSymbol || symbol.IsUnboundGenericType)\n                {\n                    AddPunctuation(SyntaxKind.LessThanToken);\n                    for (int i = 0; i < symbol.Arity - 1; i++)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                    }\n\n                    AddPunctuation(SyntaxKind.GreaterThanToken);\n                }\n                else\n                {\n                    ImmutableArray<ImmutableArray<CustomModifier>> modifiers = GetTypeArgumentsModifiers(underlyingTypeSymbol);\n                    AddTypeArguments(symbol, modifiers);\n\n                    AddDelegateParameters(symbol);\n\n                    // TODO: do we want to skip these if we're being visited as a containing type?\n                    AddTypeParameterConstraints(symbol.TypeArguments);\n                }\n            }\n            else\n            {\n                AddDelegateParameters(symbol);\n            } 311575"];
9307 [label="symbol.Arity 311576"];
9308 [label="get\n            {\n                return UnderlyingNamedTypeSymbol.Arity;\n            } 311577"];
9309 [label="UnderlyingNamedTypeSymbol 311578"];
9310 [label="=> _underlying 311579"];
9311 [label="return UnderlyingNamedTypeSymbol.Arity; 311580"];
9312 [label="UnderlyingNamedTypeSymbol.Arity 311581"];
9313 [label="get\n            {\n                return declaration.Arity;\n            } 311582"];
9314 [label="if (symbol.Arity > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                // It would be nice to handle VB symbols too, but it's not worth the effort.\n                if (underlyingTypeSymbol is UnsupportedMetadataTypeSymbol || underlyingTypeSymbol is MissingMetadataTypeSymbol || symbol.IsUnboundGenericType)\n                {\n                    AddPunctuation(SyntaxKind.LessThanToken);\n                    for (int i = 0; i < symbol.Arity - 1; i++)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                    }\n\n                    AddPunctuation(SyntaxKind.GreaterThanToken);\n                }\n                else\n                {\n                    ImmutableArray<ImmutableArray<CustomModifier>> modifiers = GetTypeArgumentsModifiers(underlyingTypeSymbol);\n                    AddTypeArguments(symbol, modifiers);\n\n                    AddDelegateParameters(symbol);\n\n                    // TODO: do we want to skip these if we're being visited as a containing type?\n                    AddTypeParameterConstraints(symbol.TypeArguments);\n                }\n            }\n            else\n            {\n                AddDelegateParameters(symbol);\n            } 311583"];
9315 [label="if (symbol.Arity > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                // It would be nice to handle VB symbols too, but it's not worth the effort.\n                if (underlyingTypeSymbol is UnsupportedMetadataTypeSymbol || underlyingTypeSymbol is MissingMetadataTypeSymbol || symbol.IsUnboundGenericType)\n                {\n                    AddPunctuation(SyntaxKind.LessThanToken);\n                    for (int i = 0; i < symbol.Arity - 1; i++)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                    }\n\n                    AddPunctuation(SyntaxKind.GreaterThanToken);\n                }\n                else\n                {\n                    ImmutableArray<ImmutableArray<CustomModifier>> modifiers = GetTypeArgumentsModifiers(underlyingTypeSymbol);\n                    AddTypeArguments(symbol, modifiers);\n\n                    AddDelegateParameters(symbol);\n\n                    // TODO: do we want to skip these if we're being visited as a containing type?\n                    AddTypeParameterConstraints(symbol.TypeArguments);\n                }\n            }\n            else\n            {\n                AddDelegateParameters(symbol);\n            } 311584"];
9316 [label="AddDelegateParameters(symbol); 311585"];
9317 [label="AddDelegateParameters(symbol) 311586"];
9318 [label="param AddDelegateParameters(INamedTypeSymbol symbol) 311587"];
9319 [label="param AddDelegateParameters(this) 311588"];
9320 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndParameters ||\n                    format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var method = symbol.DelegateInvokeMethod;\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    AddParametersIfRequired(hasThisParameter: false, isVarargs: method.IsVararg, parameters: method.Parameters);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n            } 311589"];
9321 [label="CanShowDelegateSignature(symbol) 311590"];
9322 [label="param CanShowDelegateSignature(INamedTypeSymbol symbol) 311591"];
9323 [label="param CanShowDelegateSignature(this) 311592"];
9324 [label="return\n                isFirstSymbolVisited &&\n                symbol.TypeKind == TypeKind.Delegate &&\n                format.DelegateStyle != SymbolDisplayDelegateStyle.NameOnly &&\n                symbol.DelegateInvokeMethod != null; 311593"];
9325 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndParameters ||\n                    format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var method = symbol.DelegateInvokeMethod;\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    AddParametersIfRequired(hasThisParameter: false, isVarargs: method.IsVararg, parameters: method.Parameters);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n            } 311594"];
9326 [label="AddDelegateParameters(symbol); 311595"];
9327 [label="get\n            {\n                return this;\n            } 311596"];
9328 [label="if (underlyingTypeSymbol?.OriginalDefinition is MissingMetadataTypeSymbol &&\n                format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.FlagMissingMetadataTypes))\n            {\n                //add it as punctuation - it's just for testing\n                AddPunctuation(SyntaxKind.OpenBracketToken);\n                builder.Add(CreatePart(InternalSymbolDisplayPartKind.Other, symbol, 'missing'));\n                AddPunctuation(SyntaxKind.CloseBracketToken);\n            } 311597"];
9329 [label="AddNullableAnnotations(symbol); 311598"];
9330 [label="param AddNullableAnnotations(ITypeSymbol type) 311599"];
9331 [label="param AddNullableAnnotations(this) 311600"];
9332 [label="if (ShouldAddNullableAnnotation(type))\n            {\n                AddPunctuation(type.NullableAnnotation == CodeAnalysis.NullableAnnotation.Annotated ? SyntaxKind.QuestionToken : SyntaxKind.ExclamationToken);\n            } 311601"];
9333 [label="param ShouldAddNullableAnnotation(ITypeSymbol type) 311602"];
9334 [label="param ShouldAddNullableAnnotation(this) 311603"];
9335 [label="=> NullableAnnotation 311604"];
9336 [label="NullableAnnotation 311605"];
9337 [label="switch (type.NullableAnnotation)\n            {\n                case CodeAnalysis.NullableAnnotation.Annotated:\n                    if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) &&\n                        !ITypeSymbolHelpers.IsNullableType(type) && !type.IsValueType)\n                    {\n                        return true;\n                    }\n                    break;\n\n                // LAFHIS\n                case CodeAnalysis.NullableAnnotation.NotAnnotated:\n                    if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) &&\n                        !type.IsValueType &&\n                        ((type is not Symbols.PublicModel.TypeSymbol) ||\n                        ((Symbols.PublicModel.TypeSymbol)type).UnderlyingTypeSymbol.IsTypeParameterDisallowingAnnotationInCSharp8() != true))\n                    {\n                        return true;\n                    }\n                    break;\n            } 311606"];
9338 [label="get\n            {\n                return UnderlyingSymbol.ContainingType.GetPublicSymbol();\n            } 311607"];
9339 [label="if (symbol.ContainingType is null)\n            {\n                return SymbolDisplayPartKind.MethodName;\n            } 311608"];
9340 [label="get\n            {\n                return UnderlyingTypeSymbol.TypeKind;\n            } 311609"];
9341 [label="=> _underlying 311610"];
9342 [label="return UnderlyingTypeSymbol.TypeKind; 311611"];
9343 [label="get\n            {\n                return _flags.TypeKind;\n            } 311612"];
9344 [label="param AddTypeArguments(ImmutableArray<ImmutableArray<CustomModifier>> modifiers) 311613"];
9345 [label="param AddTypeArguments(this) 311614"];
9346 [label="=> UnderlyingSymbol.Kind 311615"];
9347 [label="=> _underlying 311616"];
9348 [label="get\n            {\n                return SymbolKind.Method;\n            } 311617"];
9349 [label="get\n            {\n                return GetTypeParametersAsTypeArguments();\n            } 311618"];
9350 [label="param GetTypeParametersAsTypeArguments(this) 311619"];
9351 [label="get { return ImmutableArray<TypeParameterSymbol>.Empty; } 311620"];
9352 [label="return _lazyTypeArguments; 311621"];
9353 [label="typeArguments = ((IMethodSymbol)owner).TypeArguments; 311622"];
9354 [label="if (typeArguments.Length > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                AddPunctuation(SyntaxKind.LessThanToken);\n\n                var first = true;\n                for (int i = 0; i < typeArguments.Length; i++)\n                {\n                    var typeArg = typeArguments[i];\n\n                    if (!first)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                        AddSpace();\n                    }\n                    first = false;\n\n                    AbstractSymbolDisplayVisitor visitor;\n\n                    if (typeArg.Kind == SymbolKind.TypeParameter)\n                    {\n                        var typeParam = (ITypeParameterSymbol)typeArg;\n\n                        AddTypeParameterVarianceIfRequired(typeParam);\n\n                        visitor = this.NotFirstVisitor;\n                    }\n                    else\n                    {\n                        visitor = this.NotFirstVisitorNamespaceOrType;\n                    }\n\n                    typeArg.Accept(visitor);\n\n                    if (!modifiers.IsDefault)\n                    {\n                        AddCustomModifiersIfRequired(modifiers[i], leadingSpace: true, trailingSpace: false);\n                    }\n                }\n\n                AddPunctuation(SyntaxKind.GreaterThanToken);\n            } 311623"];
9355 [label="symbol.IsExtensionMethod 311624"];
9356 [label="AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters); 311625"];
9357 [label="MethodChecksLockObject 311626"];
9358 [label="get { return this.syntaxReferenceOpt; } 311627"];
9359 [label="return this.syntaxReferenceOpt; 311628"];
9360 [label="object lockObject = MethodChecksLockObject; 311629"];
9361 [label="Debug.Assert(lockObject != null); 311630"];
9362 [label="Debug.Assert(lockObject != null); 311631"];
9363 [label="this.Kind 311632"];
9364 [label="get\n            {\n                return SymbolKind.Method;\n            } 311633"];
9365 [label="switch (this.Kind)\n                {\n                    case SymbolKind.ErrorType:\n                        return null;\n                    case SymbolKind.Assembly:\n                        Debug.Assert(!(this is SourceAssemblySymbol), 'SourceAssemblySymbol must override DeclaringCompilation');\n                        return null;\n                    case SymbolKind.NetModule:\n                        Debug.Assert(!(this is SourceModuleSymbol), 'SourceModuleSymbol must override DeclaringCompilation');\n                        return null;\n                } 311634"];
9366 [label="param GetBinderFactory(bool ignoreAccessibility = false) 311635"];
9367 [label="if (ignoreAccessibility && SimpleProgramNamedTypeSymbol.GetSimpleProgramEntryPoint(this) is object)\n            {\n                return GetBinderFactory(syntaxTree, ignoreAccessibility: true, ref _ignoreAccessibilityBinderFactories);\n            } 311636"];
9368 [label="Debug.Assert(syntaxReferenceOpt != null); 311637"];
9369 [label="Debug.Assert(node != null); 311638"];
9370 [label="param AssertMemberExposure(bool forDiagnostics = false) 311639"];
9371 [label="if (member is NamedTypeSymbol type)\n            {\n                Debug.Assert(forDiagnostics);\n                // Lafhis\n                var temp = Volatile.Read(ref _lazyTypeMembers);\n                Debug.Assert(temp != null ? temp.Values.Any(types => types.Contains(t => t == (object)type)) == true : false);\n                return;\n            }\n            else if (member is TypeParameterSymbol || member is SynthesizedMethodBaseSymbol)\n            {\n                Debug.Assert(forDiagnostics);\n                return;\n            }\n            else if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 311640"];
9372 [label="if (member is TypeParameterSymbol || member is SynthesizedMethodBaseSymbol)\n            {\n                Debug.Assert(forDiagnostics);\n                return;\n            }\n            else if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 311641"];
9373 [label="if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 311642"];
9374 [label="Debug.Assert(declared != DeclaredMembersAndInitializers.UninitializedSentinel); 311643"];
9375 [label="return; 311644"];
9376 [label="Debug.Assert((memberDeclarationOpt == null) == (memberOpt == null)); 311645"];
9377 [label="memberDeclarationOpt == null 311646"];
9378 [label="param ==(Symbol right) 311647"];
9379 [label="if (right is null)\n            {\n                return left is null;\n            } 311648"];
9380 [label="return left is null; 311649"];
9381 [label="Debug.Assert(BitArithmeticUtilities.CountBits((uint)usage) <= 1, 'Not a flags enum.'); 311650"];
9382 [label="NodeUsage extraInfo = NodeUsage.Normal; 311651"];
9383 [label="if (inBodyOrInitializer)\n                    {\n                        var method = GetMethodSymbol(parent, resultBinder);\n                        if ((object)method != null)\n                        {\n                            // Ctors cannot be generic\n                            //TODO: the error should be given in a different place, but should we ignore or consider the type args?\n                            Debug.Assert(method.Arity == 0, 'Generic Ctor, What to do?');\n\n                            resultBinder = new InMethodBinder(method, resultBinder);\n                        }\n                    } 311652"];
9384 [label="Debug.Assert((object)containing != null); 311653"];
9385 [label="RoslynDebug.Assert(next != null); 311654"];
9386 [label="_containingMemberOrLambda 311655"];
9387 [label="Debug.Assert(containingMemberOrLambda != null); 311656"];
9388 [label="containingMemberOrLambda != null 311657"];
9389 [label="param !=(Symbol left) 311658"];
9390 [label="param !=(Symbol right) 311659"];
9391 [label="if (right is null)\n            {\n                return left is object;\n            } 311660"];
9392 [label="return left is object; 311661"];
9393 [label="Debug.Assert((object)containing != null); 311662"];
9394 [label="RoslynDebug.Assert(next != null); 311663"];
9395 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 311664"];
9396 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion)); 311665"];
9397 [label="flags.Includes(BinderFlags.UncheckedRegion | BinderFlags.CheckedRegion) 311666"];
9398 [label="param Includes(this BinderFlags self) 311667"];
9399 [label="param Includes(BinderFlags other) 311668"];
9400 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 311669"];
9401 [label="RoslynDebug.Assert(!flags.Includes(BinderFlags.InNestedFinallyBlock) || flags.Includes(BinderFlags.InFinallyBlock | BinderFlags.InCatchBlock)); 311670"];
9402 [label="flags.Includes(BinderFlags.InNestedFinallyBlock) 311671"];
9403 [label="param Includes(this BinderFlags self) 311672"];
9404 [label="param Includes(BinderFlags other) 311673"];
9405 [label="Debug.Assert(containingMemberOrLambda != null); 311674"];
9406 [label="containingMemberOrLambda != null 311675"];
9407 [label="param !=(Symbol left) 311676"];
9408 [label="param !=(Symbol right) 311677"];
9409 [label="if (right is null)\n            {\n                return left is object;\n            } 311678"];
9410 [label="return left is object; 311679"];
9411 [label="get\n            {\n                return true;\n            } 311680"];
9412 [label="param MakeParameters(TOwningSymbol owner) 311681"];
9413 [label="param MakeParameters(SeparatedSyntaxList<TParameterSyntax> parametersList) 311682"];
9414 [label="param MakeParameters(out SyntaxToken arglistToken) 311683"];
9415 [label="param MakeParameters(DiagnosticBag diagnostics) 311684"];
9416 [label="param MakeParameters(bool allowRefOrOut) 311685"];
9417 [label="param MakeParameters(bool allowThis) 311686"];
9418 [label="param MakeParameters(bool addRefReadOnlyModifier) 311687"];
9419 [label="param MakeParameters(bool suppressUseSiteDiagnostics) 311688"];
9420 [label="param MakeParameters(int lastIndex) 311689"];
9421 [label="param MakeParameters(Func<Binder, TOwningSymbol, TypeWithAnnotations, TParameterSyntax, RefKind, int, SyntaxToken, SyntaxToken, bool, DiagnosticBag, TParameterSymbol> parameterCreationFunc) 311690"];
9422 [label="Debug.Assert(!parsingFunctionPointer || owner is FunctionPointerMethodSymbol); 311691"];
9423 [label="int parameterIndex = 0; 311692"];
9424 [label="int firstDefault = -1; 311693"];
9425 [label="var mustBeLastParameter = (ParameterSyntax)null; 311694"];
9426 [label="foreach (var parameterSyntax in parametersList)\n            {\n                if (parameterIndex > lastIndex) break;\n\n                CheckParameterModifiers(parameterSyntax, diagnostics, parsingFunctionPointer);\n\n                var refKind = GetModifiers(parameterSyntax.Modifiers, out SyntaxToken refnessKeyword, out SyntaxToken paramsKeyword, out SyntaxToken thisKeyword);\n                if (thisKeyword.Kind() != SyntaxKind.None && !allowThis)\n                {\n                    diagnostics.Add(ErrorCode.ERR_ThisInBadContext, thisKeyword.GetLocation());\n                }\n\n                if (parameterSyntax is ParameterSyntax concreteParam)\n                {\n                    if (mustBeLastParameter == null &&\n                        (concreteParam.Modifiers.Any(SyntaxKind.ParamsKeyword) ||\n                         concreteParam.Identifier.Kind() == SyntaxKind.ArgListKeyword))\n                    {\n                        mustBeLastParameter = concreteParam;\n                    }\n\n                    if (concreteParam.IsArgList)\n                    {\n                        arglistToken = concreteParam.Identifier;\n                        // The native compiler produces 'Expected type' here, in the parser. Roslyn produces\n                        // the somewhat more informative 'arglist not valid' error.\n                        if (paramsKeyword.Kind() != SyntaxKind.None\n                            || refnessKeyword.Kind() != SyntaxKind.None\n                            || thisKeyword.Kind() != SyntaxKind.None)\n                        {\n                            // CS1669: __arglist is not valid in this context\n                            diagnostics.Add(ErrorCode.ERR_IllegalVarArgs, arglistToken.GetLocation());\n                        }\n\n                        continue;\n                    }\n\n                    if (concreteParam.Default != null && firstDefault == -1)\n                    {\n                        firstDefault = parameterIndex;\n                    }\n                }\n\n                Debug.Assert(parameterSyntax.Type != null);\n                var parameterType = binder.BindType(parameterSyntax.Type, diagnostics, suppressUseSiteDiagnostics: suppressUseSiteDiagnostics);\n\n                if (!allowRefOrOut && (refKind == RefKind.Ref || refKind == RefKind.Out))\n                {\n                    Debug.Assert(refnessKeyword.Kind() != SyntaxKind.None);\n\n                    // error CS0631: ref and out are not valid in this context\n                    diagnostics.Add(ErrorCode.ERR_IllegalRefParam, refnessKeyword.GetLocation());\n                }\n\n                TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics);\n\n                ReportParameterErrors(owner, parameterSyntax, parameter, thisKeyword, paramsKeyword, firstDefault, diagnostics);\n\n                builder.Add(parameter);\n                ++parameterIndex;\n            } 311695"];
9427 [label="if (parameterIndex > lastIndex) break; 311696"];
9428 [label="CheckParameterModifiers(parameterSyntax, diagnostics, parsingFunctionPointer); 311697"];
9429 [label="CheckParameterModifiers(parameterSyntax, diagnostics, parsingFunctionPointer); 311698"];
9430 [label="CheckParameterModifiers(parameterSyntax, diagnostics, parsingFunctionPointer); 311699"];
9431 [label="CheckParameterModifiers(parameterSyntax, diagnostics, parsingFunctionPointer) 311700"];
9432 [label="param CheckParameterModifiers(BaseParameterSyntax parameter) 311701"];
9433 [label="param CheckParameterModifiers(DiagnosticBag diagnostics) 311702"];
9434 [label="param CheckParameterModifiers(bool parsingFunctionPointerParams) 311703"];
9435 [label="var seenThis = false; 311704"];
9436 [label="var seenRef = false; 311705"];
9437 [label="var seenOut = false; 311706"];
9438 [label="var seenParams = false; 311707"];
9439 [label="var seenIn = false; 311708"];
9440 [label="foreach (var modifier in parameter.Modifiers)\n            {\n                switch (modifier.Kind())\n                {\n                    case SyntaxKind.ThisKeyword:\n                        if (seenThis)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DupParamMod, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.ThisKeyword));\n                        }\n                        else if (seenOut)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParameterModifiers, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.ThisKeyword), SyntaxFacts.GetText(SyntaxKind.OutKeyword));\n                        }\n                        else if (seenParams)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParamModThis, modifier.GetLocation());\n                        }\n                        else\n                        {\n                            seenThis = true;\n                        }\n                        break;\n\n                    case SyntaxKind.RefKeyword:\n                        if (seenRef)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DupParamMod, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.RefKeyword));\n                        }\n                        else if (seenParams)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_ParamsCantBeWithModifier, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.RefKeyword));\n                        }\n                        else if (seenOut)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParameterModifiers, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.RefKeyword), SyntaxFacts.GetText(SyntaxKind.OutKeyword));\n                        }\n                        else if (seenIn)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParameterModifiers, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.RefKeyword), SyntaxFacts.GetText(SyntaxKind.InKeyword));\n                        }\n                        else\n                        {\n                            seenRef = true;\n                        }\n                        break;\n\n                    case SyntaxKind.OutKeyword:\n                        if (seenOut)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DupParamMod, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.OutKeyword));\n                        }\n                        else if (seenThis)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParameterModifiers, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.OutKeyword), SyntaxFacts.GetText(SyntaxKind.ThisKeyword));\n                        }\n                        else if (seenParams)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_ParamsCantBeWithModifier, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.OutKeyword));\n                        }\n                        else if (seenRef)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParameterModifiers, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.OutKeyword), SyntaxFacts.GetText(SyntaxKind.RefKeyword));\n                        }\n                        else if (seenIn)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParameterModifiers, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.OutKeyword), SyntaxFacts.GetText(SyntaxKind.InKeyword));\n                        }\n                        else\n                        {\n                            seenOut = true;\n                        }\n                        break;\n\n                    case SyntaxKind.ParamsKeyword when !parsingFunctionPointerParams:\n                        if (seenParams)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DupParamMod, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.ParamsKeyword));\n                        }\n                        else if (seenThis)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParamModThis, modifier.GetLocation());\n                        }\n                        else if (seenRef)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParameterModifiers, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.ParamsKeyword), SyntaxFacts.GetText(SyntaxKind.RefKeyword));\n                        }\n                        else if (seenIn)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParameterModifiers, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.ParamsKeyword), SyntaxFacts.GetText(SyntaxKind.InKeyword));\n                        }\n                        else if (seenOut)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParameterModifiers, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.ParamsKeyword), SyntaxFacts.GetText(SyntaxKind.OutKeyword));\n                        }\n                        else\n                        {\n                            seenParams = true;\n                        }\n                        break;\n\n                    case SyntaxKind.InKeyword:\n                        if (seenIn)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_DupParamMod, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.InKeyword));\n                        }\n                        else if (seenOut)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParameterModifiers, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.InKeyword), SyntaxFacts.GetText(SyntaxKind.OutKeyword));\n                        }\n                        else if (seenRef)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_BadParameterModifiers, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.InKeyword), SyntaxFacts.GetText(SyntaxKind.RefKeyword));\n                        }\n                        else if (seenParams)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_ParamsCantBeWithModifier, modifier.GetLocation(), SyntaxFacts.GetText(SyntaxKind.InKeyword));\n                        }\n                        else\n                        {\n                            seenIn = true;\n                        }\n                        break;\n\n                    case SyntaxKind.ParamsKeyword when parsingFunctionPointerParams:\n                    case SyntaxKind.ReadOnlyKeyword when parsingFunctionPointerParams:\n                        diagnostics.Add(ErrorCode.ERR_BadFuncPointerParamModifier, modifier.GetLocation(), SyntaxFacts.GetText(modifier.Kind()));\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(modifier.Kind());\n                }\n            } 311709"];
9441 [label="var refKind = GetModifiers(parameterSyntax.Modifiers, out SyntaxToken refnessKeyword, out SyntaxToken paramsKeyword, out SyntaxToken thisKeyword); 311710"];
9442 [label="var refKind = GetModifiers(parameterSyntax.Modifiers, out SyntaxToken refnessKeyword, out SyntaxToken paramsKeyword, out SyntaxToken thisKeyword); 311711"];
9443 [label="GetModifiers(parameterSyntax.Modifiers, out SyntaxToken refnessKeyword, out SyntaxToken paramsKeyword, out SyntaxToken thisKeyword) 311712"];
9444 [label="param GetModifiers(SyntaxTokenList modifiers) 311713"];
9445 [label="param GetModifiers(out SyntaxToken refnessKeyword) 311714"];
9446 [label="param GetModifiers(out SyntaxToken paramsKeyword) 311715"];
9447 [label="param GetModifiers(out SyntaxToken thisKeyword) 311716"];
9448 [label="var refKind = RefKind.None; 311717"];
9449 [label="refnessKeyword = default(SyntaxToken); 311718"];
9450 [label="paramsKeyword = default(SyntaxToken); 311719"];
9451 [label="thisKeyword = default(SyntaxToken); 311720"];
9452 [label="foreach (var modifier in modifiers)\n            {\n                switch (modifier.Kind())\n                {\n                    case SyntaxKind.OutKeyword:\n                        if (refKind == RefKind.None)\n                        {\n                            refnessKeyword = modifier;\n                            refKind = RefKind.Out;\n                        }\n                        break;\n                    case SyntaxKind.RefKeyword:\n                        if (refKind == RefKind.None)\n                        {\n                            refnessKeyword = modifier;\n                            refKind = RefKind.Ref;\n                        }\n                        break;\n                    case SyntaxKind.InKeyword:\n                        if (refKind == RefKind.None)\n                        {\n                            refnessKeyword = modifier;\n                            refKind = RefKind.In;\n                        }\n                        break;\n                    case SyntaxKind.ParamsKeyword:\n                        paramsKeyword = modifier;\n                        break;\n                    case SyntaxKind.ThisKeyword:\n                        thisKeyword = modifier;\n                        break;\n                }\n            } 311721"];
9453 [label="return refKind; 311722"];
9454 [label="var refKind = GetModifiers(parameterSyntax.Modifiers, out SyntaxToken refnessKeyword, out SyntaxToken paramsKeyword, out SyntaxToken thisKeyword); 311723"];
9455 [label="if (thisKeyword.Kind() != SyntaxKind.None && !allowThis)\n                {\n                    diagnostics.Add(ErrorCode.ERR_ThisInBadContext, thisKeyword.GetLocation());\n                } 311724"];
9456 [label="if (parameterSyntax is ParameterSyntax concreteParam)\n                {\n                    if (mustBeLastParameter == null &&\n                        (concreteParam.Modifiers.Any(SyntaxKind.ParamsKeyword) ||\n                         concreteParam.Identifier.Kind() == SyntaxKind.ArgListKeyword))\n                    {\n                        mustBeLastParameter = concreteParam;\n                    }\n\n                    if (concreteParam.IsArgList)\n                    {\n                        arglistToken = concreteParam.Identifier;\n                        // The native compiler produces 'Expected type' here, in the parser. Roslyn produces\n                        // the somewhat more informative 'arglist not valid' error.\n                        if (paramsKeyword.Kind() != SyntaxKind.None\n                            || refnessKeyword.Kind() != SyntaxKind.None\n                            || thisKeyword.Kind() != SyntaxKind.None)\n                        {\n                            // CS1669: __arglist is not valid in this context\n                            diagnostics.Add(ErrorCode.ERR_IllegalVarArgs, arglistToken.GetLocation());\n                        }\n\n                        continue;\n                    }\n\n                    if (concreteParam.Default != null && firstDefault == -1)\n                    {\n                        firstDefault = parameterIndex;\n                    }\n                } 311725"];
9457 [label="if (mustBeLastParameter == null &&\n                        (concreteParam.Modifiers.Any(SyntaxKind.ParamsKeyword) ||\n                         concreteParam.Identifier.Kind() == SyntaxKind.ArgListKeyword))\n                    {\n                        mustBeLastParameter = concreteParam;\n                    } 311726"];
9458 [label="if (mustBeLastParameter == null &&\n                        (concreteParam.Modifiers.Any(SyntaxKind.ParamsKeyword) ||\n                         concreteParam.Identifier.Kind() == SyntaxKind.ArgListKeyword))\n                    {\n                        mustBeLastParameter = concreteParam;\n                    } 311727"];
9459 [label="if (mustBeLastParameter == null &&\n                        (concreteParam.Modifiers.Any(SyntaxKind.ParamsKeyword) ||\n                         concreteParam.Identifier.Kind() == SyntaxKind.ArgListKeyword))\n                    {\n                        mustBeLastParameter = concreteParam;\n                    } 311728"];
9460 [label="if (mustBeLastParameter == null &&\n                        (concreteParam.Modifiers.Any(SyntaxKind.ParamsKeyword) ||\n                         concreteParam.Identifier.Kind() == SyntaxKind.ArgListKeyword))\n                    {\n                        mustBeLastParameter = concreteParam;\n                    } 311729"];
9461 [label="if (concreteParam.IsArgList)\n                    {\n                        arglistToken = concreteParam.Identifier;\n                        // The native compiler produces 'Expected type' here, in the parser. Roslyn produces\n                        // the somewhat more informative 'arglist not valid' error.\n                        if (paramsKeyword.Kind() != SyntaxKind.None\n                            || refnessKeyword.Kind() != SyntaxKind.None\n                            || thisKeyword.Kind() != SyntaxKind.None)\n                        {\n                            // CS1669: __arglist is not valid in this context\n                            diagnostics.Add(ErrorCode.ERR_IllegalVarArgs, arglistToken.GetLocation());\n                        }\n\n                        continue;\n                    } 311730"];
9462 [label="if (concreteParam.Default != null && firstDefault == -1)\n                    {\n                        firstDefault = parameterIndex;\n                    } 311731"];
9463 [label="if (concreteParam.Default != null && firstDefault == -1)\n                    {\n                        firstDefault = parameterIndex;\n                    } 311732"];
9464 [label="Debug.Assert(parameterSyntax.Type != null); 311733"];
9465 [label="Debug.Assert(parameterSyntax.Type != null); 311734"];
9466 [label="var parameterType = binder.BindType(parameterSyntax.Type, diagnostics, suppressUseSiteDiagnostics: suppressUseSiteDiagnostics); 311735"];
9467 [label="var parameterType = binder.BindType(parameterSyntax.Type, diagnostics, suppressUseSiteDiagnostics: suppressUseSiteDiagnostics); 311736"];
9468 [label="var parameterType = binder.BindType(parameterSyntax.Type, diagnostics, suppressUseSiteDiagnostics: suppressUseSiteDiagnostics); 311737"];
9469 [label="var parameterType = binder.BindType(parameterSyntax.Type, diagnostics, suppressUseSiteDiagnostics: suppressUseSiteDiagnostics); 311738"];
9470 [label="binder.BindType(parameterSyntax.Type, diagnostics, suppressUseSiteDiagnostics: suppressUseSiteDiagnostics) 311739"];
9471 [label="param BindType(ExpressionSyntax syntax) 311740"];
9472 [label="param BindType(DiagnosticBag diagnostics) 311741"];
9473 [label="param BindType(ConsList<TypeSymbol> basesBeingResolved = null) 311742"];
9474 [label="param BindType(bool suppressUseSiteDiagnostics = false) 311743"];
9475 [label="param BindType(this) 311744"];
9476 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 311745"];
9477 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 311746"];
9478 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 311747"];
9479 [label="var symbol = BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics); 311748"];
9480 [label="BindTypeOrAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics) 311749"];
9481 [label="param BindTypeOrAlias(ExpressionSyntax syntax) 311750"];
9482 [label="param BindTypeOrAlias(DiagnosticBag diagnostics) 311751"];
9483 [label="param BindTypeOrAlias(ConsList<TypeSymbol> basesBeingResolved = null) 311752"];
9484 [label="param BindTypeOrAlias(bool suppressUseSiteDiagnostics = false) 311753"];
9485 [label="param BindTypeOrAlias(this) 311754"];
9486 [label="Debug.Assert(diagnostics != null); 311755"];
9487 [label="Debug.Assert(diagnostics != null); 311756"];
9488 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 311757"];
9489 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 311758"];
9490 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 311759"];
9491 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 311760"];
9492 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 311761"];
9493 [label="var symbol = BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics); 311762"];
9494 [label="BindNamespaceOrTypeOrAliasSymbol(syntax, diagnostics, basesBeingResolved, basesBeingResolved != null || suppressUseSiteDiagnostics) 311763"];
9495 [label="param BindNamespaceOrTypeOrAliasSymbol(ExpressionSyntax syntax) 311764"];
9496 [label="param BindNamespaceOrTypeOrAliasSymbol(DiagnosticBag diagnostics) 311765"];
9497 [label="param BindNamespaceOrTypeOrAliasSymbol(ConsList<TypeSymbol> basesBeingResolved) 311766"];
9498 [label="param BindNamespaceOrTypeOrAliasSymbol(bool suppressUseSiteDiagnostics) 311767"];
9499 [label="param BindNamespaceOrTypeOrAliasSymbol(this) 311768"];
9500 [label="switch (syntax.Kind())\n            {\n                case SyntaxKind.NullableType:\n                    return bindNullable(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.PredefinedType:\n                    return bindPredefined(syntax, diagnostics);\n\n                case SyntaxKind.IdentifierName:\n                    return BindNonGenericSimpleNamespaceOrTypeOrAliasSymbol((IdentifierNameSyntax)syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics, qualifierOpt: null);\n\n                case SyntaxKind.GenericName:\n                    return BindGenericSimpleNamespaceOrTypeOrAliasSymbol((GenericNameSyntax)syntax, diagnostics, basesBeingResolved, qualifierOpt: null);\n\n                case SyntaxKind.AliasQualifiedName:\n                    return bindAlias(syntax, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n\n                case SyntaxKind.QualifiedName:\n                    {\n                        var node = (QualifiedNameSyntax)syntax;\n                        return BindQualifiedName(node.Left, node.Right, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.SimpleMemberAccessExpression:\n                    {\n                        var node = (MemberAccessExpressionSyntax)syntax;\n                        return BindQualifiedName(node.Expression, node.Name, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                case SyntaxKind.ArrayType:\n                    {\n                        return BindArrayType((ArrayTypeSyntax)syntax, diagnostics, permitDimensions: false, basesBeingResolved, disallowRestrictedTypes: true);\n                    }\n\n                case SyntaxKind.PointerType:\n                    return bindPointer(syntax, diagnostics, basesBeingResolved);\n\n                case SyntaxKind.FunctionPointerType:\n                    var functionPointerTypeSyntax = (FunctionPointerTypeSyntax)syntax;\n                    if (GetUnsafeDiagnosticInfo(sizeOfTypeOpt: null) is CSDiagnosticInfo info)\n                    {\n                        var @delegate = functionPointerTypeSyntax.DelegateKeyword;\n                        var asterisk = functionPointerTypeSyntax.AsteriskToken;\n                        RoslynDebug.Assert(@delegate.SyntaxTree is object);\n                        diagnostics.Add(info, Location.Create(@delegate.SyntaxTree, TextSpan.FromBounds(@delegate.SpanStart, asterisk.Span.End)));\n                    }\n\n                    return TypeWithAnnotations.Create(\n                        FunctionPointerTypeSymbol.CreateFromSource(\n                            functionPointerTypeSyntax,\n                            this,\n                            diagnostics,\n                            basesBeingResolved,\n                            suppressUseSiteDiagnostics));\n\n                case SyntaxKind.OmittedTypeArgument:\n                    {\n                        return BindTypeArgument((TypeSyntax)syntax, diagnostics, basesBeingResolved);\n                    }\n\n                case SyntaxKind.TupleType:\n                    {\n                        var tupleTypeSyntax = (TupleTypeSyntax)syntax;\n                        return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(tupleTypeSyntax.CloseParenToken), BindTupleType(tupleTypeSyntax, diagnostics, basesBeingResolved));\n                    }\n\n                case SyntaxKind.RefType:\n                    {\n                        // ref needs to be handled by the caller\n                        var refTypeSyntax = (RefTypeSyntax)syntax;\n                        var refToken = refTypeSyntax.RefKeyword;\n                        if (!syntax.HasErrors)\n                        {\n                            diagnostics.Add(ErrorCode.ERR_UnexpectedToken, refToken.GetLocation(), refToken.ToString());\n                        }\n\n                        return BindNamespaceOrTypeOrAliasSymbol(refTypeSyntax.Type, diagnostics, basesBeingResolved, suppressUseSiteDiagnostics);\n                    }\n\n                default:\n                    {\n                        // This is invalid syntax for a type.  This arises when a constant pattern that fails to bind\n                        // is attempted to be bound as a type pattern.\n                        return createErrorType(syntax);\n                    }\n            } 311769"];
9501 [label="return bindPredefined(syntax, diagnostics); 311770"];
9502 [label="return bindPredefined(syntax, diagnostics); 311771"];
9503 [label="bindPredefined(syntax, diagnostics) 311772"];
9504 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 311773"];
9505 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 311774"];
9506 [label="NamespaceOrTypeOrAliasSymbolWithAnnotations bindPredefined(ExpressionSyntax syntax, DiagnosticBag diagnostics)\n            {\n                var predefinedType = (PredefinedTypeSyntax)syntax;\n                var type = BindPredefinedTypeSymbol(predefinedType, diagnostics);\n                return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type);\n            } 311775"];
9507 [label="var predefinedType = (PredefinedTypeSyntax)syntax; 311776"];
9508 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 311777"];
9509 [label="var type = BindPredefinedTypeSymbol(predefinedType, diagnostics); 311778"];
9510 [label="BindPredefinedTypeSymbol(predefinedType, diagnostics) 311779"];
9511 [label="param BindPredefinedTypeSymbol(PredefinedTypeSyntax node) 311780"];
9512 [label="param BindPredefinedTypeSymbol(DiagnosticBag diagnostics) 311781"];
9513 [label="param BindPredefinedTypeSymbol(this) 311782"];
9514 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 311783"];
9515 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 311784"];
9516 [label="return GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node); 311785"];
9517 [label="GetSpecialType(node.Keyword.Kind().GetSpecialType(), diagnostics, node) 311786"];
9518 [label="param GetSpecialType(SpecialType typeId) 311787"];
9519 [label="param GetSpecialType(DiagnosticBag diagnostics) 311788"];
9520 [label="param GetSpecialType(SyntaxNode node) 311789"];
9521 [label="param GetSpecialType(this) 311790"];
9522 [label="return GetSpecialType(this.Compilation, typeId, node, diagnostics); 311791"];
9523 [label="param GetSpecialType(SyntaxNode node) 311792"];
9524 [label="param GetSpecialType(DiagnosticBag diagnostics) 311793"];
9525 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 311794"];
9526 [label="NamedTypeSymbol result; 311795"];
9527 [label="GetBoundReferenceManager(); 311796"];
9528 [label="this.Modules 311797"];
9529 [label="foreach (var module in this.Modules)\n            {\n                Debug.Assert(module.GetReferencedAssemblies().Length == 0);\n            } 311798"];
9530 [label="module.GetReferencedAssemblies() 311799"];
9531 [label="param GetReferencedAssemblies(this) 311800"];
9532 [label="AssertReferencesInitialized() 311801"];
9533 [label="param AssertReferencesInitialized(this) 311802"];
9534 [label="Debug.Assert(_moduleReferences != null); 311803"];
9535 [label="Debug.Assert(_moduleReferences != null); 311804"];
9536 [label="AssertReferencesInitialized(); 311805"];
9537 [label="return _moduleReferences.Identities; 311806"];
9538 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 311807"];
9539 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 311808"];
9540 [label="result.SpecialType 311809"];
9541 [label="get\n            {\n                return _corTypeId;\n            } 311810"];
9542 [label="Debug.Assert(result.SpecialType == specialType); 311811"];
9543 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 311812"];
9544 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 311813"];
9545 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 311814"];
9546 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 311815"];
9547 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 311816"];
9548 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 311817"];
9549 [label="s.Kind 311818"];
9550 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 311819"];
9551 [label="return SymbolKind.Namespace; 311820"];
9552 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 311821"];
9553 [label="Debug.Assert((object)moduleSymbol != null); 311822"];
9554 [label="if (skipTransformsIfNecessary)\n                    {\n                        // If the transforms are not necessary, return early without updating the\n                        // base type field. This avoids cycles decoding nullability in particular.\n                        return baseType;\n                    } 311823"];
9555 [label="param TransformType(int targetSymbolCustomModifierCount) 311824"];
9556 [label="param TransformType(RefKind targetSymbolRefKind = RefKind.None) 311825"];
9557 [label="Debug.Assert((object)metadataType != null); 311826"];
9558 [label="if (hasTupleElementNamesAttribute && elementNames.IsDefaultOrEmpty)\n            {\n                return new UnsupportedMetadataTypeSymbol();\n            } 311827"];
9559 [label="param TupleTypeDecoder(ImmutableArray<string?> elementNames) 311828"];
9560 [label="_elementNames 311829"];
9561 [label="elementNames.IsDefault 311830"];
9562 [label="_namesIndex = elementNames.IsDefault ? 0 : elementNames.Length; 311831"];
9563 [label="_namesIndex 311832"];
9564 [label="_foundUsableErrorType = false; 311833"];
9565 [label="_foundUsableErrorType 311834"];
9566 [label="param DecodeType(this) 311835"];
9567 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 311836"];
9568 [label="param DecodeNamedType(this) 311837"];
9569 [label="type.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 311838"];
9570 [label="get\n            {\n                return ImmutableArray<TypeWithAnnotations>.Empty;\n            } 311839"];
9571 [label="return ImmutableArray<TypeWithAnnotations>.Empty; 311840"];
9572 [label="var typeArgs = type.TypeArgumentsWithAnnotationsNoUseSiteDiagnostics; 311841"];
9573 [label="var decodedArgs = DecodeTypeArguments(typeArgs); 311842"];
9574 [label="DecodeTypeArguments(typeArgs) 311843"];
9575 [label="param DecodeTypeArguments(ImmutableArray<TypeWithAnnotations> typeArgs) 311844"];
9576 [label="param DecodeTypeArguments(this) 311845"];
9577 [label="if (typeArgs.IsEmpty)\n            {\n                return typeArgs;\n            } 311846"];
9578 [label="return typeArgs; 311847"];
9579 [label="type.ContainingType 311848"];
9580 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 311849"];
9581 [label="return _container as NamedTypeSymbol; 311850"];
9582 [label="NamedTypeSymbol containingType = type.ContainingType; 311851"];
9583 [label="NamedTypeSymbol? decodedContainingType; 311852"];
9584 [label="if (containingType is object && containingType.IsGenericType)\n            {\n                decodedContainingType = DecodeNamedType(containingType);\n                Debug.Assert(decodedContainingType.IsGenericType);\n            }\n            else\n            {\n                decodedContainingType = containingType;\n            } 311853"];
9585 [label="decodedContainingType = containingType; 311854"];
9586 [label="var containerChanged = !ReferenceEquals(decodedContainingType, containingType); 311855"];
9587 [label="var containerChanged = !ReferenceEquals(decodedContainingType, containingType); 311856"];
9588 [label="var typeArgsChanged = typeArgs != decodedArgs; 311857"];
9589 [label="if (typeArgsChanged || containerChanged)\n            {\n                if (containerChanged)\n                {\n                    decodedType = decodedType.OriginalDefinition.AsMember(decodedContainingType);\n                    // If the type is nested, e.g. Outer<T>.Inner<V>, then Inner is definitely\n                    // not a tuple, since we know all tuple-compatible types (System.ValueTuple)\n                    // are not nested types. Thus, it is safe to return without checking if\n                    // Inner is a tuple.\n                    return decodedType.ConstructIfGeneric(decodedArgs);\n                }\n\n                decodedType = type.ConstructedFrom.Construct(decodedArgs, unbound: false);\n            } 311858"];
9590 [label="decodedType.IsTupleType 311859"];
9591 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 311860"];
9592 [label="_ 311861"];
9593 [label="tupleCardinality: out _ 311862"];
9594 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 311863"];
9595 [label="param IsTupleTypeOfCardinality(this) 311864"];
9596 [label="IsUnboundGenericType 311865"];
9597 [label="get\n            {\n                return false;\n            } 311866"];
9598 [label="return false; 311867"];
9599 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311868"];
9600 [label="ContainingSymbol 311869"];
9601 [label="get\n            {\n                return _container;\n            } 311870"];
9602 [label="return _container; 311871"];
9603 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311872"];
9604 [label=".Kind 311873"];
9605 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 311874"];
9606 [label="return SymbolKind.Namespace; 311875"];
9607 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311876"];
9608 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311877"];
9609 [label="ContainingNamespace 311878"];
9610 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 311879"];
9611 [label="get\n            {\n                return _container;\n            } 311880"];
9612 [label="return _container; 311881"];
9613 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311882"];
9614 [label="ContainingNamespace.ContainingNamespace 311883"];
9615 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 311884"];
9616 [label=".IsGlobalNamespace 311885"];
9617 [label="get\n            {\n                return true;\n            } 311886"];
9618 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311887"];
9619 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311888"];
9620 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311889"];
9621 [label="Name 311890"];
9622 [label="get\n            {\n                return _name;\n            } 311891"];
9623 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311892"];
9624 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311893"];
9625 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 311894"];
9626 [label="tupleCardinality = 0; 311895"];
9627 [label="if (decodedType.IsTupleType)\n            {\n                int tupleCardinality = decodedType.TupleElementTypesWithAnnotations.Length;\n                if (tupleCardinality > 0)\n                {\n                    var elementNames = EatElementNamesIfAvailable(tupleCardinality);\n\n                    Debug.Assert(elementNames.IsDefault || elementNames.Length == tupleCardinality);\n\n                    decodedType = NamedTypeSymbol.CreateTuple(decodedType, elementNames);\n                }\n            } 311896"];
9628 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 311897"];
9629 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 311898"];
9630 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 311899"];
9631 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 311900"];
9632 [label="typeSymbol.IsNullableType() 311901"];
9633 [label="param IsNullableType(this TypeSymbol type) 311902"];
9634 [label="var a1 = defaultType is null; 311903"];
9635 [label="!a1 311904"];
9636 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 311905"];
9637 [label="defaultType.IsNullableType() 311906"];
9638 [label="param IsNullableType(this TypeSymbol type) 311907"];
9639 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 311908"];
9640 [label="Debug.Assert(a1 || a2 != true || a3); 311909"];
9641 [label="Debug.Assert(a1 || a2 != true || a3); 311910"];
9642 [label="Debug.Assert(extensions != null); 311911"];
9643 [label="param TransformType(Symbol accessSymbol) 311912"];
9644 [label="metadataType.HasType 311913"];
9645 [label="Debug.Assert(metadataType.HasType); 311914"];
9646 [label="accessSymbol.IsDefinition 311915"];
9647 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 311916"];
9648 [label="OriginalDefinition 311917"];
9649 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 311918"];
9650 [label="OriginalSymbolDefinition 311919"];
9651 [label="get\n            {\n                return this.OriginalTypeSymbolDefinition;\n            } 311920"];
9652 [label="this.OriginalTypeSymbolDefinition 311921"];
9653 [label="get\n            {\n                return this.OriginalDefinition;\n            } 311922"];
9654 [label="return this.OriginalTypeSymbolDefinition; 311923"];
9655 [label="return OriginalSymbolDefinition; 311924"];
9656 [label="return (object)this == (object)OriginalDefinition; 311925"];
9657 [label="Debug.Assert(accessSymbol.IsDefinition); 311926"];
9658 [label="accessSymbol.ContainingModule 311927"];
9659 [label="get\n            {\n                return ContainingPEModule;\n            } 311928"];
9660 [label="ContainingPEModule 311929"];
9661 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 311930"];
9662 [label="s.Kind 311931"];
9663 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 311932"];
9664 [label="return SymbolKind.Namespace; 311933"];
9665 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 311934"];
9666 [label="return ContainingPEModule; 311935"];
9667 [label="Debug.Assert((object)accessSymbol.ContainingModule == containingModule); 311936"];
9668 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 311937"];
9669 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 311938"];
9670 [label="AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _) 311939"];
9671 [label="param IsEffectivelyPublicOrInternal(Symbol symbol) 311940"];
9672 [label="param IsEffectivelyPublicOrInternal(out bool isInternal) 311941"];
9673 [label="Debug.Assert(symbol is object); 311942"];
9674 [label="symbol.Kind 311943"];
9675 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 311944"];
9676 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Event:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Property:\n                    break;\n                case SymbolKind.TypeParameter:\n                    symbol = symbol.ContainingSymbol;\n                    break;\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(symbol.Kind);\n            } 311945"];
9677 [label="isInternal = false; 311946"];
9678 [label="symbol.DeclaredAccessibility 311947"];
9679 [label="get\n            {\n                Accessibility access = Accessibility.Private;\n\n                switch (_flags & TypeAttributes.VisibilityMask)\n                {\n                    case TypeAttributes.NestedAssembly:\n                        access = Accessibility.Internal;\n                        break;\n\n                    case TypeAttributes.NestedFamORAssem:\n                        access = Accessibility.ProtectedOrInternal;\n                        break;\n\n                    case TypeAttributes.NestedFamANDAssem:\n                        access = Accessibility.ProtectedAndInternal;\n                        break;\n\n                    case TypeAttributes.NestedPrivate:\n                        access = Accessibility.Private;\n                        break;\n\n                    case TypeAttributes.Public:\n                    case TypeAttributes.NestedPublic:\n                        access = Accessibility.Public;\n                        break;\n\n                    case TypeAttributes.NestedFamily:\n                        access = Accessibility.Protected;\n                        break;\n\n                    case TypeAttributes.NotPublic:\n                        access = Accessibility.Internal;\n                        break;\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_flags & TypeAttributes.VisibilityMask);\n                }\n\n                return access;\n            } 311948"];
9680 [label="Accessibility access = Accessibility.Private; 311949"];
9681 [label="switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                } 311950"];
9682 [label="symbol.ContainingType 311951"];
9683 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 311952"];
9684 [label="return _container as NamedTypeSymbol; 311953"];
9685 [label="symbol = symbol.ContainingType; 311954"];
9686 [label="do\n            {\n                switch (symbol.DeclaredAccessibility)\n                {\n                    case Accessibility.Public:\n                    case Accessibility.Protected:\n                    case Accessibility.ProtectedOrInternal:\n                        break;\n                    case Accessibility.Internal:\n                    case Accessibility.ProtectedAndInternal:\n                        isInternal = true;\n                        break;\n                    case Accessibility.Private:\n                        return false;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(symbol.DeclaredAccessibility);\n                }\n\n                symbol = symbol.ContainingType;\n            }\n            while (symbol is object); 311955"];
9687 [label="return true; 311956"];
9688 [label="_ = AccessCheck.IsEffectivelyPublicOrInternal(accessSymbol, out _); 311957"];
9689 [label="param TryGetByte(out byte? value) 311958"];
9690 [label="value = null; 311959"];
9691 [label="param GetNullableContextValue(this) 311960"];
9692 [label="param GetLocalNullableContextValue(this) 311961"];
9693 [label="get\n            {\n                return _moduleSymbol;\n            } 311962"];
9694 [label="return _moduleSymbol; 311963"];
9695 [label="param GetLocalNullableContextValue(this) 311964"];
9696 [label="get\n            {\n                return _assemblySymbol;\n            } 311965"];
9697 [label="return _assemblySymbol; 311966"];
9698 [label="param GetLocalNullableContextValue(this) 311967"];
9699 [label="get\n            {\n                return null;\n            } 311968"];
9700 [label="=> defaultType 311969"];
9701 [label="Debug.Assert((object)depends != null); 311970"];
9702 [label="Debug.Assert((object)depends != null); 311971"];
9703 [label="Debug.Assert((object)on != null); 311972"];
9704 [label="Debug.Assert((object)on != null); 311973"];
9705 [label="on.IsDefinition 311974"];
9706 [label="get\n            {\n                return (object)this == (object)OriginalDefinition;\n            } 311975"];
9707 [label="OriginalDefinition 311976"];
9708 [label="get\n            {\n                return OriginalSymbolDefinition;\n            } 311977"];
9709 [label="OriginalSymbolDefinition 311978"];
9710 [label="get\n            {\n                return this.OriginalTypeSymbolDefinition;\n            } 311979"];
9711 [label="this.OriginalTypeSymbolDefinition 311980"];
9712 [label="get\n            {\n                return this.OriginalDefinition;\n            } 311981"];
9713 [label="return this.OriginalTypeSymbolDefinition; 311982"];
9714 [label="return OriginalSymbolDefinition; 311983"];
9715 [label="return (object)this == (object)OriginalDefinition; 311984"];
9716 [label="Debug.Assert(on.IsDefinition); 311985"];
9717 [label="depends.DeclaringCompilation 311986"];
9718 [label="get { return null; } 311987"];
9719 [label="return null; 311988"];
9720 [label="param TypeDependsClosure(CSharpCompilation currentCompilation) 311989"];
9721 [label="if ((object)type == null)\n            {\n                return;\n            } 311990"];
9722 [label="if ((object)type == null)\n            {\n                return;\n            } 311991"];
9723 [label="param GetDeclaredBaseType(ConsList<TypeSymbol> basesBeingResolved) 311992"];
9724 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 311993"];
9725 [label="TypeDependsClosure(type.GetDeclaredBaseType(null), currentCompilation, partialClosure); 311994"];
9726 [label="if ((object)type == null)\n            {\n                return;\n            } 311995"];
9727 [label="return; 311996"];
9728 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 311997"];
9729 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 311998"];
9730 [label="if (currentCompilation != null && type.IsFromCompilation(currentCompilation))\n                {\n                    TypeDependsClosure(type.ContainingType, currentCompilation, partialClosure);\n                } 311999"];
9731 [label="return result; 312000"];
9732 [label="this.SetKnownToHaveNoDeclaredBaseCycles(); 312001"];
9733 [label="if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                } 312002"];
9734 [label="@base.IsErrorType() 312003"];
9735 [label="param IsErrorType(this TypeSymbol type) 312004"];
9736 [label="RoslynDebug.Assert((object)type != null); 312005"];
9737 [label="RoslynDebug.Assert((object)type != null); 312006"];
9738 [label="type.Kind 312007"];
9739 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 312008"];
9740 [label="return type.Kind == SymbolKind.ErrorType; 312009"];
9741 [label="if (@base.IsErrorType() && @base is NoPiaIllegalGenericInstantiationSymbol)\n                {\n                    return @base.GetUseSiteDiagnostic();\n                } 312010"];
9742 [label="return null; 312011"];
9743 [label="param MergeUseSiteDiagnostics(this) 312012"];
9744 [label="this.ContainingModule 312013"];
9745 [label="get\n            {\n                return ContainingPEModule;\n            } 312014"];
9746 [label="ContainingPEModule 312015"];
9747 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 312016"];
9748 [label="Symbol s = _container; 312017"];
9749 [label="s.Kind 312018"];
9750 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 312019"];
9751 [label="return SymbolKind.Namespace; 312020"];
9752 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 312021"];
9753 [label="return ContainingPEModule; 312022"];
9754 [label="if (this.ContainingModule.HasUnifiedReferences)\n            {\n                HashSet<TypeSymbol> unificationCheckedTypes = null;\n                if (GetUnificationUseSiteDiagnosticRecursive(ref result, this, ref unificationCheckedTypes))\n                {\n                    return result;\n                }\n            } 312023"];
9755 [label="this.ContainingModule.HasUnifiedReferences 312024"];
9756 [label="get { return GetUnifiedAssemblies().Length > 0; } 312025"];
9757 [label="GetUnifiedAssemblies() 312026"];
9758 [label="param GetUnifiedAssemblies(this) 312027"];
9759 [label="AssertReferencesInitialized() 312028"];
9760 [label="param AssertReferencesInitialized(this) 312029"];
9761 [label="Debug.Assert(_moduleReferences != null); 312030"];
9762 [label="Debug.Assert(_moduleReferences != null); 312031"];
9763 [label="AssertReferencesInitialized(); 312032"];
9764 [label="return GetUnifiedAssemblies().Length > 0; 312033"];
9765 [label="return GetUnifiedAssemblies().Length > 0; 312034"];
9766 [label="Symbol s = _container; 312035"];
9767 [label="s.Kind 312036"];
9768 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 312037"];
9769 [label="return SymbolKind.Namespace; 312038"];
9770 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 312039"];
9771 [label="if (this.ContainingPEModule.Module.HasRequiredAttributeAttribute(_handle))\n                {\n                    diagnostic = new CSDiagnosticInfo(ErrorCode.ERR_BogusType, this);\n                }\n                else if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                } 312040"];
9772 [label="param GetDeclaredBaseType(bool skipTransformsIfNecessary) 312041"];
9773 [label="result = TypeKind.Class; 312042"];
9774 [label="if (TypeKind == TypeKind.Class && SpecialType != SpecialType.System_Enum)\n                {\n                    TypeSymbol @base = GetDeclaredBaseType(null);\n                    if (@base?.SpecialType == SpecialType.None && @base.ContainingAssembly?.IsMissing == true)\n                    {\n                        var missingType = @base as MissingMetadataTypeSymbol.TopLevel;\n                        if ((object)missingType != null && missingType.Arity == 0)\n                        {\n                            string emittedName = MetadataHelpers.BuildQualifiedName(missingType.NamespaceName, missingType.MetadataName);\n                            switch (SpecialTypes.GetTypeFromMetadataName(emittedName))\n                            {\n                                case SpecialType.System_Enum:\n                                case SpecialType.System_MulticastDelegate:\n                                case SpecialType.System_ValueType:\n                                    // This might be a structure, an enum, or a delegate\n                                    diagnostic = missingType.GetUseSiteDiagnostic();\n                                    break;\n                            }\n                        }\n                    }\n                } 312043"];
9775 [label="return _lazyUseSiteDiagnostic; 312044"];
9776 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 312045"];
9777 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 312046"];
9778 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 312047"];
9779 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 312048"];
9780 [label="AreNullableAnnotationsEnabled(predefinedType.Keyword) 312049"];
9781 [label="param AreNullableAnnotationsEnabled(SyntaxToken token) 312050"];
9782 [label="param AreNullableAnnotationsEnabled(this) 312051"];
9783 [label="RoslynDebug.Assert(token.SyntaxTree is object); 312052"];
9784 [label="return AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart); 312053"];
9785 [label="AreNullableAnnotationsEnabled(token.SyntaxTree, token.SpanStart) 312054"];
9786 [label="param AreNullableAnnotationsEnabled(SyntaxTree syntaxTree) 312055"];
9787 [label="param AreNullableAnnotationsEnabled(int position) 312056"];
9788 [label="param AreNullableAnnotationsEnabled(this) 312057"];
9789 [label="CSharpSyntaxTree csTree = (CSharpSyntaxTree)syntaxTree; 312058"];
9790 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 312059"];
9791 [label="Syntax.NullableContextState context = csTree.GetNullableContextState(position); 312060"];
9792 [label="context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            } 312061"];
9793 [label="this.Compilation.Options 312062"];
9794 [label="get\n            {\n                return _options;\n            } 312063"];
9795 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 312064"];
9796 [label="return context.AnnotationsState switch\n            {\n                Syntax.NullableContextState.State.Enabled => true,\n                Syntax.NullableContextState.State.Disabled => false,\n                Syntax.NullableContextState.State.ExplicitlyRestored => GetGlobalAnnotationState(),\n                Syntax.NullableContextState.State.Unknown =>\n                    !csTree.IsGeneratedCode(this.Compilation.Options.SyntaxTreeOptionsProvider, CancellationToken.None)\n                    && AreNullableAnnotationsGloballyEnabled(),\n                _ => throw ExceptionUtilities.UnexpectedValue(context.AnnotationsState)\n            }; 312065"];
9797 [label="AreNullableAnnotationsGloballyEnabled() 312066"];
9798 [label="param AreNullableAnnotationsGloballyEnabled(this) 312067"];
9799 [label="RoslynDebug.Assert(Next is object); 312068"];
9800 [label="Next.AreNullableAnnotationsGloballyEnabled() 312069"];
9801 [label="param AreNullableAnnotationsGloballyEnabled(this) 312070"];
9802 [label="param AreNullableAnnotationsGloballyEnabled(this) 312071"];
9803 [label="GetGlobalAnnotationState() 312072"];
9804 [label="param GetGlobalAnnotationState(this) 312073"];
9805 [label="Compilation.Options 312074"];
9806 [label="get\n            {\n                return _options;\n            } 312075"];
9807 [label="switch (Compilation.Options.NullableContextOptions)\n            {\n                case NullableContextOptions.Enable:\n                case NullableContextOptions.Annotations:\n                    return true;\n\n                case NullableContextOptions.Disable:\n                case NullableContextOptions.Warnings:\n                    return false;\n\n                default:\n                    throw ExceptionUtilities.UnexpectedValue(Compilation.Options.NullableContextOptions);\n            } 312076"];
9808 [label="return false; 312077"];
9809 [label="return GetGlobalAnnotationState(); 312078"];
9810 [label="return Next.AreNullableAnnotationsGloballyEnabled(); 312079"];
9811 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 312080"];
9812 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 312081"];
9813 [label="TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type) 312082"];
9814 [label="param Create(bool isNullableEnabled) 312083"];
9815 [label="param Create(TypeSymbol typeSymbol) 312084"];
9816 [label="param Create(bool isAnnotated = false) 312085"];
9817 [label="if (typeSymbol is null)\n            {\n                return default;\n            } 312086"];
9818 [label="return Create(typeSymbol, nullableAnnotation: isAnnotated ? NullableAnnotation.Annotated : isNullableEnabled ? NullableAnnotation.NotAnnotated : NullableAnnotation.Oblivious); 312087"];
9819 [label="isAnnotated 312088"];
9820 [label="isNullableEnabled 312089"];
9821 [label="return Create(typeSymbol, nullableAnnotation: isAnnotated ? NullableAnnotation.Annotated : isNullableEnabled ? NullableAnnotation.NotAnnotated : NullableAnnotation.Oblivious); 312090"];
9822 [label="return Create(typeSymbol, nullableAnnotation: isAnnotated ? NullableAnnotation.Annotated : isNullableEnabled ? NullableAnnotation.NotAnnotated : NullableAnnotation.Oblivious); 312091"];
9823 [label="Create(typeSymbol, nullableAnnotation: isAnnotated ? NullableAnnotation.Annotated : isNullableEnabled ? NullableAnnotation.NotAnnotated : NullableAnnotation.Oblivious) 312092"];
9824 [label="param Create(TypeSymbol typeSymbol) 312093"];
9825 [label="param Create(NullableAnnotation nullableAnnotation = NullableAnnotation.Oblivious) 312094"];
9826 [label="param Create(ImmutableArray<CustomModifier> customModifiers = default) 312095"];
9827 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 312096"];
9828 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 312097"];
9829 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 312098"];
9830 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 312099"];
9831 [label="typeSymbol.IsNullableType() 312100"];
9832 [label="param IsNullableType(this TypeSymbol type) 312101"];
9833 [label="var a1 = defaultType is null; 312102"];
9834 [label="!a1 312103"];
9835 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 312104"];
9836 [label="defaultType.IsNullableType() 312105"];
9837 [label="param IsNullableType(this TypeSymbol type) 312106"];
9838 [label="return _corTypeId; 312107"];
9839 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 312108"];
9840 [label="Debug.Assert(a1 || a2 != true || a3); 312109"];
9841 [label="Debug.Assert(a1 || a2 != true || a3); 312110"];
9842 [label="Debug.Assert(extensions != null); 312111"];
9843 [label="Debug.Assert(extensions != null); 312112"];
9844 [label="return Create(typeSymbol, nullableAnnotation: isAnnotated ? NullableAnnotation.Annotated : isNullableEnabled ? NullableAnnotation.NotAnnotated : NullableAnnotation.Oblivious); 312113"];
9845 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 312114"];
9846 [label="param operator(TypeWithAnnotations typeWithAnnotations) 312115"];
9847 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 312116"];
9848 [label="return new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations); 312117"];
9849 [label="new NamespaceOrTypeOrAliasSymbolWithAnnotations(typeWithAnnotations) 312118"];
9850 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(TypeWithAnnotations typeWithAnnotations) 312119"];
9851 [label="param NamespaceOrTypeOrAliasSymbolWithAnnotations(this) 312120"];
9852 [label="typeWithAnnotations.HasType 312121"];
9853 [label="=> !(DefaultType is null) 312122"];
9854 [label="DefaultType is null 312123"];
9855 [label="Debug.Assert(typeWithAnnotations.HasType); 312124"];
9856 [label="_typeWithAnnotations 312125"];
9857 [label="_symbol = null; 312126"];
9858 [label="_symbol 312127"];
9859 [label="_isNullableEnabled = false; 312128"];
9860 [label="_isNullableEnabled 312129"];
9861 [label="return TypeWithAnnotations.Create(AreNullableAnnotationsEnabled(predefinedType.Keyword), type); 312130"];
9862 [label="return bindPredefined(syntax, diagnostics); 312131"];
9863 [label="symbol.IsType 312132"];
9864 [label="=> !_typeWithAnnotations.IsDefault 312133"];
9865 [label="_typeWithAnnotations.IsDefault 312134"];
9866 [label="=> DefaultType is null && this.NullableAnnotation == 0 && (_extensions == null || _extensions == Extensions.Default) 312135"];
9867 [label="DefaultType is null 312136"];
9868 [label="DefaultType is null && this.NullableAnnotation == 0 312137"];
9869 [label="DefaultType is null && this.NullableAnnotation == 0 && (_extensions == null || _extensions == Extensions.Default) 312138"];
9870 [label="!_typeWithAnnotations.IsDefault 312139"];
9871 [label="if (symbol.IsType ||\n                (symbol.IsAlias && UnwrapAliasNoDiagnostics(symbol.Symbol, basesBeingResolved) is TypeSymbol))\n            {\n                if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                }\n\n                return symbol;\n            } 312140"];
9872 [label="symbol.IsType 312141"];
9873 [label="if (symbol.IsType)\n                {\n                    // Obsolete alias targets are reported in UnwrapAlias, but if it was a type (not an\n                    // alias to a type) we report the obsolete type here.\n                    symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics);\n                } 312142"];
9874 [label="symbol.TypeWithAnnotations 312143"];
9875 [label="=> _typeWithAnnotations 312144"];
9876 [label="_typeWithAnnotations 312145"];
9877 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 312146"];
9878 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 312147"];
9879 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 312148"];
9880 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 312149"];
9881 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics) 312150"];
9882 [label="param ReportDiagnosticsIfObsolete(Binder binder) 312151"];
9883 [label="param ReportDiagnosticsIfObsolete(SyntaxNode syntax) 312152"];
9884 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 312153"];
9885 [label="=>\n            _extensions.ReportDiagnosticsIfObsolete(this, binder, syntax, diagnostics) 312154"];
9886 [label="this 312155"];
9887 [label="binder 312156"];
9888 [label="syntax 312157"];
9889 [label="diagnostics 312158"];
9890 [label="_extensions.ReportDiagnosticsIfObsolete(this, binder, syntax, diagnostics) 312159"];
9891 [label="param ReportDiagnosticsIfObsolete(TypeWithAnnotations type) 312160"];
9892 [label="param ReportDiagnosticsIfObsolete(Binder binder) 312161"];
9893 [label="param ReportDiagnosticsIfObsolete(SyntaxNode syntax) 312162"];
9894 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 312163"];
9895 [label="param ReportDiagnosticsIfObsolete(this) 312164"];
9896 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 312165"];
9897 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 312166"];
9898 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 312167"];
9899 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics) 312168"];
9900 [label="param ReportDiagnosticsIfObsoleteCore(Binder binder) 312169"];
9901 [label="param ReportDiagnosticsIfObsoleteCore(SyntaxNode syntax) 312170"];
9902 [label="param ReportDiagnosticsIfObsoleteCore(DiagnosticBag diagnostics) 312171"];
9903 [label="param ReportDiagnosticsIfObsoleteCore(this) 312172"];
9904 [label="binder.ReportDiagnosticsIfObsolete(diagnostics, Type, syntax, hasBaseReceiver: false); 312173"];
9905 [label="Type 312174"];
9906 [label="=> _extensions?.GetResolvedType(DefaultType) 312175"];
9907 [label="=> defaultType 312176"];
9908 [label="binder.ReportDiagnosticsIfObsolete(diagnostics, Type, syntax, hasBaseReceiver: false); 312177"];
9909 [label="binder.ReportDiagnosticsIfObsolete(diagnostics, Type, syntax, hasBaseReceiver: false); 312178"];
9910 [label="binder.ReportDiagnosticsIfObsolete(diagnostics, Type, syntax, hasBaseReceiver: false); 312179"];
9911 [label="binder.ReportDiagnosticsIfObsolete(diagnostics, Type, syntax, hasBaseReceiver: false) 312180"];
9912 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 312181"];
9913 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 312182"];
9914 [label="param ReportDiagnosticsIfObsolete(SyntaxNode node) 312183"];
9915 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 312184"];
9916 [label="param ReportDiagnosticsIfObsolete(this) 312185"];
9917 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 312186"];
9918 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 312187"];
9919 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 312188"];
9920 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 312189"];
9921 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver) 312190"];
9922 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 312191"];
9923 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 312192"];
9924 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 312193"];
9925 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 312194"];
9926 [label="param ReportDiagnosticsIfObsolete(this) 312195"];
9927 [label="symbol.Kind 312196"];
9928 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 312197"];
9929 [label="switch (symbol.Kind)\n            {\n                case SymbolKind.NamedType:\n                case SymbolKind.Field:\n                case SymbolKind.Method:\n                case SymbolKind.Event:\n                case SymbolKind.Property:\n                    ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags);\n                    break;\n            } 312198"];
9930 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 312199"];
9931 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 312200"];
9932 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 312201"];
9933 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 312202"];
9934 [label="this.ContainingMemberOrLambda 312203"];
9935 [label="get { return _containingMemberOrLambda; } 312204"];
9936 [label="return _containingMemberOrLambda; 312205"];
9937 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 312206"];
9938 [label="this.ContainingType 312207"];
9939 [label="get\n            {\n                var member = this.ContainingMemberOrLambda;\n                RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType);\n                return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                };\n            } 312208"];
9940 [label="this.ContainingMemberOrLambda 312209"];
9941 [label="get { return _containingMemberOrLambda; } 312210"];
9942 [label="return _containingMemberOrLambda; 312211"];
9943 [label="var member = this.ContainingMemberOrLambda; 312212"];
9944 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 312213"];
9945 [label="member.Kind 312214"];
9946 [label="get\n            {\n                return SymbolKind.Method;\n            } 312215"];
9947 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 312216"];
9948 [label="RoslynDebug.Assert(member is null || member.Kind != SymbolKind.ErrorType); 312217"];
9949 [label="member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                } 312218"];
9950 [label="member.ContainingType 312219"];
9951 [label="return member switch\n                {\n                    null => null,\n                    NamedTypeSymbol namedType => namedType,\n                    _ => member.ContainingType\n                }; 312220"];
9952 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 312221"];
9953 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 312222"];
9954 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags) 312223"];
9955 [label="param ReportDiagnosticsIfObsolete(DiagnosticBag diagnostics) 312224"];
9956 [label="param ReportDiagnosticsIfObsolete(Symbol symbol) 312225"];
9957 [label="param ReportDiagnosticsIfObsolete(SyntaxNodeOrToken node) 312226"];
9958 [label="param ReportDiagnosticsIfObsolete(bool hasBaseReceiver) 312227"];
9959 [label="param ReportDiagnosticsIfObsolete(Symbol? containingMember) 312228"];
9960 [label="param ReportDiagnosticsIfObsolete(NamedTypeSymbol? containingType) 312229"];
9961 [label="param ReportDiagnosticsIfObsolete(BinderFlags location) 312230"];
9962 [label="RoslynDebug.Assert(symbol is object); 312231"];
9963 [label="RoslynDebug.Assert(symbol is object); 312232"];
9964 [label="symbol.Kind 312233"];
9965 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 312234"];
9966 [label="RoslynDebug.Assert(symbol.Kind == SymbolKind.NamedType ||\n                         symbol.Kind == SymbolKind.Field ||\n                         symbol.Kind == SymbolKind.Method ||\n                         symbol.Kind == SymbolKind.Event ||\n                         symbol.Kind == SymbolKind.Property); 312235"];
9967 [label="symbol.Kind 312236"];
9968 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 312237"];
9969 [label="if (symbol.Kind == SymbolKind.Method)\n            {\n                symbol = ((MethodSymbol)symbol).ConstructedFrom;\n            } 312238"];
9970 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 312239"];
9971 [label="Symbol leastOverriddenSymbol = symbol.GetLeastOverriddenMember(containingType); 312240"];
9972 [label="symbol.GetLeastOverriddenMember(containingType) 312241"];
9973 [label="param GetLeastOverriddenMember(this Symbol member) 312242"];
9974 [label="param GetLeastOverriddenMember(NamedTypeSymbol accessingTypeOpt) 312243"];
9975 [label="member.Kind 312244"];
9976 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 312245"];
9977 [label="switch (member.Kind)\n            {\n                case SymbolKind.Method:\n                    var method = (MethodSymbol)member;\n                    return method.GetConstructedLeastOverriddenMethod(accessingTypeOpt, requireSameReturnType: false);\n\n                case SymbolKind.Property:\n                    var property = (PropertySymbol)member;\n                    return property.GetLeastOverriddenProperty(accessingTypeOpt);\n\n                case SymbolKind.Event:\n                    var evnt = (EventSymbol)member;\n                    return evnt.GetLeastOverriddenEvent(accessingTypeOpt);\n\n                default:\n                    return member;\n            } 312246"];
9978 [label="return member; 312247"];
9979 [label="bool checkOverridingSymbol = hasBaseReceiver && !ReferenceEquals(symbol, leastOverriddenSymbol); 312248"];
9980 [label="if (checkOverridingSymbol)\n            {\n                // If we have a base receiver, we must be done with declaration binding, so it should\n                // be safe to decode diagnostics.  We want to do this since reporting for the overriding\n                // member is conditional on reporting for the overridden member (i.e. we need a definite\n                // answer so we don't double-report).  You might think that double reporting just results\n                // in cascading diagnostics, but it's possible that the second diagnostic is an error\n                // while the first is merely a warning.\n                leastOverriddenSymbol.GetAttributes();\n            } 312249"];
9981 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 312250"];
9982 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 312251"];
9983 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 312252"];
9984 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 312253"];
9985 [label="var diagnosticKind = ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location); 312254"];
9986 [label="ReportDiagnosticsIfObsoleteInternal(diagnostics, leastOverriddenSymbol, node, containingMember, location) 312255"];
9987 [label="param ReportDiagnosticsIfObsoleteInternal(DiagnosticBag diagnostics) 312256"];
9988 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol symbol) 312257"];
9989 [label="param ReportDiagnosticsIfObsoleteInternal(SyntaxNodeOrToken node) 312258"];
9990 [label="param ReportDiagnosticsIfObsoleteInternal(Symbol? containingMember) 312259"];
9991 [label="param ReportDiagnosticsIfObsoleteInternal(BinderFlags location) 312260"];
9992 [label="RoslynDebug.Assert(diagnostics != null); 312261"];
9993 [label="RoslynDebug.Assert(diagnostics != null); 312262"];
9994 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 312263"];
9995 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 312264"];
9996 [label="var kind = ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember); 312265"];
9997 [label="ObsoleteAttributeHelpers.GetObsoleteDiagnosticKind(symbol, containingMember) 312266"];
9998 [label="param GetObsoleteDiagnosticKind(Symbol symbol) 312267"];
9999 [label="param GetObsoleteDiagnosticKind(Symbol containingMember) 312268"];
10000 [label="param GetObsoleteDiagnosticKind(bool forceComplete = false) 312269"];
10001 [label="symbol.ObsoleteKind 312270"];
10002 [label="get\n            {\n                var data = this.ObsoleteAttributeData;\n                return (data == null) ? ObsoleteAttributeKind.None : data.Kind;\n            } 312271"];
10003 [label="this.ObsoleteAttributeData 312272"];
10004 [label="get\n            {\n                var uncommon = GetUncommonProperties();\n                if (uncommon == s_noUncommonProperties)\n                {\n                    return null;\n                }\n\n                bool ignoreByRefLikeMarker = this.IsRefLikeType;\n                ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker);\n                return uncommon.lazyObsoleteAttributeData;\n            } 312273"];
10005 [label="GetUncommonProperties() 312274"];
10006 [label="param GetUncommonProperties(this) 312275"];
10007 [label="var result = _lazyUncommonProperties; 312276"];
10008 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 312277"];
10009 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 312278"];
10010 [label="this.IsUncommon() 312279"];
10011 [label="param IsUncommon(this) 312280"];
10012 [label="this.ContainingPEModule 312281"];
10013 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 312282"];
10014 [label="Symbol s = _container; 312283"];
10015 [label="s.Kind 312284"];
10016 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 312285"];
10017 [label="return SymbolKind.Namespace; 312286"];
10018 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 312287"];
10019 [label="if (this.ContainingPEModule.HasAnyCustomAttributes(_handle))\n            {\n                return true;\n            } 312288"];
10020 [label="if (this.ContainingPEModule.HasAnyCustomAttributes(_handle))\n            {\n                return true;\n            } 312289"];
10021 [label="this.ContainingPEModule.HasAnyCustomAttributes(_handle) 312290"];
10022 [label="param HasAnyCustomAttributes(EntityHandle token) 312291"];
10023 [label="param HasAnyCustomAttributes(this) 312292"];
10024 [label="foreach (var attr in _module.GetCustomAttributesOrThrow(token))\n                {\n                    return true;\n                } 312293"];
10025 [label="foreach (var attr in _module.GetCustomAttributesOrThrow(token))\n                {\n                    return true;\n                } 312294"];
10026 [label="return true; 312295"];
10027 [label="return true; 312296"];
10028 [label="if (this.IsUncommon())\n            {\n                result = new UncommonProperties();\n                return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result;\n            } 312297"];
10029 [label="result = new UncommonProperties(); 312298"];
10030 [label="new UncommonProperties() 312299"];
10031 [label="param UncommonProperties(this) 312300"];
10032 [label="lazyEnumUnderlyingType 312301"];
10033 [label="lazyObsoleteAttributeData = ObsoleteAttributeData.Uninitialized 312302"];
10034 [label="lazyAttributeUsageInfo = AttributeUsageInfo.Null 312303"];
10035 [label="lazyContainsExtensionMethods 312304"];
10036 [label="lazyIsByRefLike 312305"];
10037 [label="lazyIsReadOnly 312306"];
10038 [label="lazyDefaultMemberName 312307"];
10039 [label="lazyComImportCoClassType = ErrorTypeSymbol.UnknownResultType 312308"];
10040 [label="lazyHasEmbeddedAttribute = ThreeState.Unknown 312309"];
10041 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 312310"];
10042 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 312311"];
10043 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 312312"];
10044 [label="return Interlocked.CompareExchange(ref _lazyUncommonProperties, result, null) ?? result; 312313"];
10045 [label="var uncommon = GetUncommonProperties(); 312314"];
10046 [label="if (uncommon == s_noUncommonProperties)\n                {\n                    return null;\n                } 312315"];
10047 [label="this.IsRefLikeType 312316"];
10048 [label="get\n            {\n                var uncommon = GetUncommonProperties();\n                if (uncommon == s_noUncommonProperties)\n                {\n                    return false;\n                }\n\n                if (!uncommon.lazyIsByRefLike.HasValue())\n                {\n                    var isByRefLike = ThreeState.False;\n\n                    if (this.TypeKind == TypeKind.Struct)\n                    {\n                        var moduleSymbol = this.ContainingPEModule;\n                        var module = moduleSymbol.Module;\n                        isByRefLike = module.HasIsByRefLikeAttribute(_handle).ToThreeState();\n                    }\n\n                    uncommon.lazyIsByRefLike = isByRefLike;\n                }\n\n                return uncommon.lazyIsByRefLike.Value();\n            } 312317"];
10049 [label="GetUncommonProperties() 312318"];
10050 [label="param GetUncommonProperties(this) 312319"];
10051 [label="var result = _lazyUncommonProperties; 312320"];
10052 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 312321"];
10053 [label="if (result != null)\n            {\n#if DEBUG\n                Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified');\n#endif\n                return result;\n            } 312322"];
10054 [label="Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified'); 312323"];
10055 [label="Debug.Assert(result != s_noUncommonProperties || result.IsDefaultValue(), 'default value was modified'); 312324"];
10056 [label="return result; 312325"];
10057 [label="var uncommon = GetUncommonProperties(); 312326"];
10058 [label="if (uncommon == s_noUncommonProperties)\n                {\n                    return false;\n                } 312327"];
10059 [label="if (!uncommon.lazyIsByRefLike.HasValue())\n                {\n                    var isByRefLike = ThreeState.False;\n\n                    if (this.TypeKind == TypeKind.Struct)\n                    {\n                        var moduleSymbol = this.ContainingPEModule;\n                        var module = moduleSymbol.Module;\n                        isByRefLike = module.HasIsByRefLikeAttribute(_handle).ToThreeState();\n                    }\n\n                    uncommon.lazyIsByRefLike = isByRefLike;\n                } 312328"];
10060 [label="var isByRefLike = ThreeState.False; 312329"];
10061 [label="this.TypeKind 312330"];
10062 [label="if (this.TypeKind == TypeKind.Struct)\n                    {\n                        var moduleSymbol = this.ContainingPEModule;\n                        var module = moduleSymbol.Module;\n                        isByRefLike = module.HasIsByRefLikeAttribute(_handle).ToThreeState();\n                    } 312331"];
10063 [label="this.ContainingPEModule 312332"];
10064 [label="s.Kind 312333"];
10065 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 312334"];
10066 [label="return SymbolKind.Namespace; 312335"];
10067 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 312336"];
10068 [label="var moduleSymbol = this.ContainingPEModule; 312337"];
10069 [label="moduleSymbol.Module 312338"];
10070 [label="get\n            {\n                return _module;\n            } 312339"];
10071 [label="var module = moduleSymbol.Module; 312340"];
10072 [label="isByRefLike = module.HasIsByRefLikeAttribute(_handle).ToThreeState(); 312341"];
10073 [label="isByRefLike = module.HasIsByRefLikeAttribute(_handle).ToThreeState(); 312342"];
10074 [label="uncommon.lazyIsByRefLike 312343"];
10075 [label="return uncommon.lazyIsByRefLike.Value(); 312344"];
10076 [label="bool ignoreByRefLikeMarker = this.IsRefLikeType; 312345"];
10077 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker); 312346"];
10078 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker); 312347"];
10079 [label="ContainingPEModule 312348"];
10080 [label="get\n            {\n                Symbol s = _container;\n\n                while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                }\n\n                return ((PENamespaceSymbol)s).ContainingPEModule;\n            } 312349"];
10081 [label="Symbol s = _container; 312350"];
10082 [label="s.Kind 312351"];
10083 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 312352"];
10084 [label="return SymbolKind.Namespace; 312353"];
10085 [label="while (s.Kind != SymbolKind.Namespace)\n                {\n                    s = s.ContainingSymbol;\n                } 312354"];
10086 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker); 312355"];
10087 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker); 312356"];
10088 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker) 312357"];
10089 [label="param InitializeObsoleteDataFromMetadata(ref ObsoleteAttributeData data) 312358"];
10090 [label="param InitializeObsoleteDataFromMetadata(EntityHandle token) 312359"];
10091 [label="param InitializeObsoleteDataFromMetadata(PEModuleSymbol containingModule) 312360"];
10092 [label="param InitializeObsoleteDataFromMetadata(bool ignoreByRefLikeMarker) 312361"];
10093 [label="if (ReferenceEquals(data, ObsoleteAttributeData.Uninitialized))\n            {\n                ObsoleteAttributeData obsoleteAttributeData = GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker);\n                Interlocked.CompareExchange(ref data, obsoleteAttributeData, ObsoleteAttributeData.Uninitialized);\n            } 312362"];
10094 [label="if (ReferenceEquals(data, ObsoleteAttributeData.Uninitialized))\n            {\n                ObsoleteAttributeData obsoleteAttributeData = GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker);\n                Interlocked.CompareExchange(ref data, obsoleteAttributeData, ObsoleteAttributeData.Uninitialized);\n            } 312363"];
10095 [label="ObsoleteAttributeData obsoleteAttributeData = GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker); 312364"];
10096 [label="ObsoleteAttributeData obsoleteAttributeData = GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker); 312365"];
10097 [label="ObsoleteAttributeData obsoleteAttributeData = GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker); 312366"];
10098 [label="GetObsoleteDataFromMetadata(token, containingModule, ignoreByRefLikeMarker) 312367"];
10099 [label="param GetObsoleteDataFromMetadata(EntityHandle token) 312368"];
10100 [label="param GetObsoleteDataFromMetadata(PEModuleSymbol containingModule) 312369"];
10101 [label="param GetObsoleteDataFromMetadata(bool ignoreByRefLikeMarker) 312370"];
10102 [label="containingModule.Module 312371"];
10103 [label="get\n            {\n                return _module;\n            } 312372"];
10104 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 312373"];
10105 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 312374"];
10106 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 312375"];
10107 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 312376"];
10108 [label="new MetadataDecoder(containingModule) 312377"];
10109 [label="param MetadataDecoder(PEModuleSymbol moduleSymbol) 312378"];
10110 [label="param MetadataDecoder(this) 312379"];
10111 [label="moduleSymbol 312380"];
10112 [label="null 312381"];
10113 [label="null 312382"];
10114 [label="param MetadataDecoder(this) 312383"];
10115 [label="param MetadataDecoder(PEModuleSymbol moduleSymbol) 312384"];
10116 [label="param MetadataDecoder(PENamedTypeSymbol typeContextOpt) 312385"];
10117 [label="param MetadataDecoder(PEMethodSymbol methodContextOpt) 312386"];
10118 [label="return _assembly.Identity; 312387"];
10119 [label="Debug.Assert((object)moduleSymbol != null); 312388"];
10120 [label="Debug.Assert((object)moduleSymbol != null); 312389"];
10121 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 312390"];
10122 [label="var obsoleteAttributeData = containingModule.Module.TryGetDeprecatedOrExperimentalOrObsoleteAttribute(token, new MetadataDecoder(containingModule), ignoreByRefLikeMarker); 312391"];
10123 [label="Debug.Assert(obsoleteAttributeData == null || !obsoleteAttributeData.IsUninitialized); 312392"];
10124 [label="Debug.Assert(obsoleteAttributeData == null || !obsoleteAttributeData.IsUninitialized); 312393"];
10125 [label="return obsoleteAttributeData; 312394"];
10126 [label="Interlocked.CompareExchange(ref data, obsoleteAttributeData, ObsoleteAttributeData.Uninitialized); 312395"];
10127 [label="Interlocked.CompareExchange(ref data, obsoleteAttributeData, ObsoleteAttributeData.Uninitialized); 312396"];
10128 [label="Interlocked.CompareExchange(ref data, obsoleteAttributeData, ObsoleteAttributeData.Uninitialized); 312397"];
10129 [label="ObsoleteAttributeHelpers.InitializeObsoleteDataFromMetadata(ref uncommon.lazyObsoleteAttributeData, _handle, ContainingPEModule, ignoreByRefLikeMarker); 312398"];
10130 [label="return uncommon.lazyObsoleteAttributeData; 312399"];
10131 [label="var data = this.ObsoleteAttributeData; 312400"];
10132 [label="return (data == null) ? ObsoleteAttributeKind.None : data.Kind; 312401"];
10133 [label="return (data == null) ? ObsoleteAttributeKind.None : data.Kind; 312402"];
10134 [label="(data == null) 312403"];
10135 [label="switch (symbol.ObsoleteKind)\n            {\n                case ObsoleteAttributeKind.None:\n                    return ObsoleteDiagnosticKind.NotObsolete;\n                case ObsoleteAttributeKind.Experimental:\n                    return ObsoleteDiagnosticKind.Diagnostic;\n                case ObsoleteAttributeKind.Uninitialized:\n                    // If we haven't cracked attributes on the symbol at all or we haven't\n                    // cracked attribute arguments enough to be able to report diagnostics for\n                    // ObsoleteAttribute, store the symbol so that we can report diagnostics at a \n                    // later stage.\n                    return ObsoleteDiagnosticKind.Lazy;\n            } 312404"];
10136 [label="return ObsoleteDiagnosticKind.NotObsolete; 312405"];
10137 [label="DiagnosticInfo? info = null; 312406"];
10138 [label="switch (kind)\n            {\n                case ObsoleteDiagnosticKind.Diagnostic:\n                    info = ObsoleteAttributeHelpers.CreateObsoleteDiagnostic(symbol, location);\n                    break;\n                case ObsoleteDiagnosticKind.Lazy:\n                case ObsoleteDiagnosticKind.LazyPotentiallySuppressed:\n                    info = new LazyObsoleteDiagnosticInfo(symbol, containingMember, location);\n                    break;\n            } 312407"];
10139 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 312408"];
10140 [label="if (info != null)\n            {\n                diagnostics.Add(info, node.GetLocation());\n            } 312409"];
10141 [label="return kind; 312410"];
10142 [label="switch (diagnosticKind)\n            {\n                case ObsoleteDiagnosticKind.NotObsolete:\n                case ObsoleteDiagnosticKind.Lazy:\n                    if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    }\n                    break;\n            } 312411"];
10143 [label="if (checkOverridingSymbol)\n                    {\n                        RoslynDebug.Assert(diagnosticKind != ObsoleteDiagnosticKind.Lazy, 'We forced attribute binding above.');\n                        ReportDiagnosticsIfObsoleteInternal(diagnostics, symbol, node, containingMember, location);\n                    } 312412"];
10144 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, node, hasBaseReceiver, this.ContainingMemberOrLambda, this.ContainingType, this.Flags); 312413"];
10145 [label="ReportDiagnosticsIfObsolete(diagnostics, symbol, (SyntaxNodeOrToken)node, hasBaseReceiver); 312414"];
10146 [label="type.ReportDiagnosticsIfObsoleteCore(binder, syntax, diagnostics); 312415"];
10147 [label="symbol.TypeWithAnnotations.ReportDiagnosticsIfObsolete(this, syntax, diagnostics); 312416"];
10148 [label="return symbol; 312417"];
10149 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 312418"];
10150 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 312419"];
10151 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 312420"];
10152 [label="return UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations; 312421"];
10153 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved) 312422"];
10154 [label="param UnwrapAlias(in NamespaceOrTypeOrAliasSymbolWithAnnotations symbol) 312423"];
10155 [label="param UnwrapAlias(DiagnosticBag diagnostics) 312424"];
10156 [label="param UnwrapAlias(SyntaxNode syntax) 312425"];
10157 [label="param UnwrapAlias(ConsList<TypeSymbol> basesBeingResolved = null) 312426"];
10158 [label="param UnwrapAlias(this) 312427"];
10159 [label="symbol.IsAlias 312428"];
10160 [label="=> _symbol?.Kind == SymbolKind.Alias 312429"];
10161 [label="_symbol 312430"];
10162 [label="_symbol?.Kind == SymbolKind.Alias 312431"];
10163 [label="if (symbol.IsAlias)\n            {\n                AliasSymbol discarded;\n                return NamespaceOrTypeOrAliasSymbolWithAnnotations.CreateUnannotated(symbol.IsNullableEnabled, (NamespaceOrTypeSymbol)UnwrapAlias(symbol.Symbol, out discarded, diagnostics, syntax, basesBeingResolved));\n            } 312432"];
10164 [label="return symbol; 312433"];
10165 [label="UnwrapAlias(symbol, diagnostics, syntax, basesBeingResolved).TypeWithAnnotations 312434"];
10166 [label="=> _typeWithAnnotations 312435"];
10167 [label="_typeWithAnnotations 312436"];
10168 [label="if (!allowRefOrOut && (refKind == RefKind.Ref || refKind == RefKind.Out))\n                {\n                    Debug.Assert(refnessKeyword.Kind() != SyntaxKind.None);\n\n                    // error CS0631: ref and out are not valid in this context\n                    diagnostics.Add(ErrorCode.ERR_IllegalRefParam, refnessKeyword.GetLocation());\n                } 312437"];
10169 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312438"];
10170 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312439"];
10171 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312440"];
10172 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312441"];
10173 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312442"];
10174 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312443"];
10175 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312444"];
10176 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312445"];
10177 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312446"];
10178 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312447"];
10179 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312448"];
10180 [label="param Create(Binder context) 312449"];
10181 [label="param Create(Symbol owner) 312450"];
10182 [label="param Create(TypeWithAnnotations parameterType) 312451"];
10183 [label="param Create(ParameterSyntax syntax) 312452"];
10184 [label="param Create(RefKind refKind) 312453"];
10185 [label="param Create(SyntaxToken identifier) 312454"];
10186 [label="param Create(int ordinal) 312455"];
10187 [label="param Create(bool isParams) 312456"];
10188 [label="param Create(bool isExtensionMethodThis) 312457"];
10189 [label="param Create(bool addRefReadOnlyModifier) 312458"];
10190 [label="param Create(DiagnosticBag declarationDiagnostics) 312459"];
10191 [label="Debug.Assert(!(owner is LambdaSymbol)); 312460"];
10192 [label="var name = identifier.ValueText; 312461"];
10193 [label="var locations = ImmutableArray.Create<Location>(new SourceLocation(identifier)); 312462"];
10194 [label="if (isParams)\n            {\n                // touch the constructor in order to generate proper use-site diagnostics\n                Binder.ReportUseSiteDiagnosticForSynthesizedAttribute(context.Compilation,\n                    WellKnownMember.System_ParamArrayAttribute__ctor,\n                    declarationDiagnostics,\n                    identifier.Parent.GetLocation());\n            } 312463"];
10195 [label="ImmutableArray<CustomModifier> inModifiers = ParameterHelpers.ConditionallyCreateInModifiers(refKind, addRefReadOnlyModifier, context, declarationDiagnostics, syntax); 312464"];
10196 [label="ImmutableArray<CustomModifier> inModifiers = ParameterHelpers.ConditionallyCreateInModifiers(refKind, addRefReadOnlyModifier, context, declarationDiagnostics, syntax); 312465"];
10197 [label="ImmutableArray<CustomModifier> inModifiers = ParameterHelpers.ConditionallyCreateInModifiers(refKind, addRefReadOnlyModifier, context, declarationDiagnostics, syntax); 312466"];
10198 [label="ImmutableArray<CustomModifier> inModifiers = ParameterHelpers.ConditionallyCreateInModifiers(refKind, addRefReadOnlyModifier, context, declarationDiagnostics, syntax); 312467"];
10199 [label="ImmutableArray<CustomModifier> inModifiers = ParameterHelpers.ConditionallyCreateInModifiers(refKind, addRefReadOnlyModifier, context, declarationDiagnostics, syntax); 312468"];
10200 [label="ParameterHelpers.ConditionallyCreateInModifiers(refKind, addRefReadOnlyModifier, context, declarationDiagnostics, syntax) 312469"];
10201 [label="param ConditionallyCreateInModifiers(RefKind refKind) 312470"];
10202 [label="param ConditionallyCreateInModifiers(bool addRefReadOnlyModifier) 312471"];
10203 [label="param ConditionallyCreateInModifiers(Binder binder) 312472"];
10204 [label="param ConditionallyCreateInModifiers(DiagnosticBag diagnostics) 312473"];
10205 [label="param ConditionallyCreateInModifiers(SyntaxNode syntax) 312474"];
10206 [label="if (addRefReadOnlyModifier && refKind == RefKind.In)\n            {\n                return CreateInModifiers(binder, diagnostics, syntax);\n            }\n            else\n            {\n                return ImmutableArray<CustomModifier>.Empty;\n            } 312475"];
10207 [label="return ImmutableArray<CustomModifier>.Empty; 312476"];
10208 [label="if (!inModifiers.IsDefaultOrEmpty)\n            {\n                return new SourceComplexParameterSymbolWithCustomModifiersPrecedingByRef(\n                    owner,\n                    ordinal,\n                    parameterType,\n                    refKind,\n                    inModifiers,\n                    name,\n                    locations,\n                    syntax.GetReference(),\n                    isParams,\n                    isExtensionMethodThis);\n            } 312477"];
10209 [label="if (!isParams &&\n                !isExtensionMethodThis &&\n                (syntax.Default == null) &&\n                (syntax.AttributeLists.Count == 0) &&\n                !owner.IsPartialMethod())\n            {\n                return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations);\n            } 312478"];
10210 [label="if (!isParams &&\n                !isExtensionMethodThis &&\n                (syntax.Default == null) &&\n                (syntax.AttributeLists.Count == 0) &&\n                !owner.IsPartialMethod())\n            {\n                return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations);\n            } 312479"];
10211 [label="if (!isParams &&\n                !isExtensionMethodThis &&\n                (syntax.Default == null) &&\n                (syntax.AttributeLists.Count == 0) &&\n                !owner.IsPartialMethod())\n            {\n                return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations);\n            } 312480"];
10212 [label="if (!isParams &&\n                !isExtensionMethodThis &&\n                (syntax.Default == null) &&\n                (syntax.AttributeLists.Count == 0) &&\n                !owner.IsPartialMethod())\n            {\n                return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations);\n            } 312481"];
10213 [label="if (!isParams &&\n                !isExtensionMethodThis &&\n                (syntax.Default == null) &&\n                (syntax.AttributeLists.Count == 0) &&\n                !owner.IsPartialMethod())\n            {\n                return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations);\n            } 312482"];
10214 [label="owner.IsPartialMethod() 312483"];
10215 [label="param IsPartialMethod(this Symbol member) 312484"];
10216 [label="var sms = member as SourceMemberMethodSymbol; 312485"];
10217 [label=".IsPartial 312486"];
10218 [label="get\n            {\n                return (this.DeclarationModifiers & DeclarationModifiers.Partial) != 0;\n            } 312487"];
10219 [label="return (this.DeclarationModifiers & DeclarationModifiers.Partial) != 0; 312488"];
10220 [label="return (this.DeclarationModifiers & DeclarationModifiers.Partial) != 0; 312489"];
10221 [label="return sms?.IsPartial == true; 312490"];
10222 [label="return sms?.IsPartial == true; 312491"];
10223 [label="if (!isParams &&\n                !isExtensionMethodThis &&\n                (syntax.Default == null) &&\n                (syntax.AttributeLists.Count == 0) &&\n                !owner.IsPartialMethod())\n            {\n                return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations);\n            } 312492"];
10224 [label="return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations); 312493"];
10225 [label="return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations); 312494"];
10226 [label="return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations); 312495"];
10227 [label="return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations); 312496"];
10228 [label="return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations); 312497"];
10229 [label="return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations); 312498"];
10230 [label="return new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations); 312499"];
10231 [label="new SourceSimpleParameterSymbol(owner, parameterType, ordinal, refKind, name, isDiscard: false, locations) 312500"];
10232 [label="param SourceSimpleParameterSymbol(Symbol owner) 312501"];
10233 [label="param SourceSimpleParameterSymbol(TypeWithAnnotations parameterType) 312502"];
10234 [label="param SourceSimpleParameterSymbol(int ordinal) 312503"];
10235 [label="param SourceSimpleParameterSymbol(RefKind refKind) 312504"];
10236 [label="param SourceSimpleParameterSymbol(string name) 312505"];
10237 [label="param SourceSimpleParameterSymbol(bool isDiscard) 312506"];
10238 [label="param SourceSimpleParameterSymbol(ImmutableArray<Location> locations) 312507"];
10239 [label="param SourceSimpleParameterSymbol(this) 312508"];
10240 [label="owner 312509"];
10241 [label="parameterType 312510"];
10242 [label="ordinal 312511"];
10243 [label="refKind 312512"];
10244 [label="name 312513"];
10245 [label="locations 312514"];
10246 [label="param SourceSimpleParameterSymbol(this) 312515"];
10247 [label="param SourceParameterSymbol(Symbol owner) 312516"];
10248 [label="param SourceParameterSymbol(TypeWithAnnotations parameterType) 312517"];
10249 [label="param SourceParameterSymbol(int ordinal) 312518"];
10250 [label="param SourceParameterSymbol(RefKind refKind) 312519"];
10251 [label="param SourceParameterSymbol(string name) 312520"];
10252 [label="param SourceParameterSymbol(ImmutableArray<Location> locations) 312521"];
10253 [label="param SourceParameterSymbol(this) 312522"];
10254 [label="owner 312523"];
10255 [label="ordinal 312524"];
10256 [label="param SourceParameterSymbol(this) 312525"];
10257 [label="param SourceParameterSymbolBase(Symbol containingSymbol) 312526"];
10258 [label="param SourceParameterSymbolBase(int ordinal) 312527"];
10259 [label="param SourceParameterSymbolBase(this) 312528"];
10260 [label="'value' 312529"];
10261 [label="ValueParameterName = 'value' 312530"];
10262 [label="param SourceParameterSymbolBase(this) 312531"];
10263 [label="param ParameterSymbol(this) 312532"];
10264 [label="param ParameterSymbol(this) 312533"];
10265 [label="_lazyAdapter 312534"];
10266 [label="_containingSymbol 312535"];
10267 [label="_ordinal 312536"];
10268 [label="Debug.Assert((object)containingSymbol != null); 312537"];
10269 [label="Debug.Assert((object)containingSymbol != null); 312538"];
10270 [label="_ordinal 312539"];
10271 [label="_containingSymbol 312540"];
10272 [label="_name 312541"];
10273 [label="_refKind 312542"];
10274 [label="foreach (var location in locations)\n            {\n                Debug.Assert(location != null);\n            } 312543"];
10275 [label="Debug.Assert(location != null); 312544"];
10276 [label="owner.Kind 312545"];
10277 [label="get\n            {\n                return SymbolKind.Method;\n            } 312546"];
10278 [label="Debug.Assert((owner.Kind == SymbolKind.Method) || (owner.Kind == SymbolKind.Property)); 312547"];
10279 [label="this.parameterType 312548"];
10280 [label="_refKind 312549"];
10281 [label="_name 312550"];
10282 [label="_locations 312551"];
10283 [label="public override bool IsDiscard { get; } 312552"];
10284 [label="IsDiscard 312553"];
10285 [label="TParameterSymbol parameter = parameterCreationFunc(binder, owner, parameterType, parameterSyntax, refKind, parameterIndex, paramsKeyword, thisKeyword, addRefReadOnlyModifier, diagnostics); 312554"];
10286 [label="ReportParameterErrors(owner, parameterSyntax, parameter, thisKeyword, paramsKeyword, firstDefault, diagnostics); 312555"];
10287 [label="ReportParameterErrors(owner, parameterSyntax, parameter, thisKeyword, paramsKeyword, firstDefault, diagnostics); 312556"];
10288 [label="ReportParameterErrors(owner, parameterSyntax, parameter, thisKeyword, paramsKeyword, firstDefault, diagnostics); 312557"];
10289 [label="ReportParameterErrors(owner, parameterSyntax, parameter, thisKeyword, paramsKeyword, firstDefault, diagnostics); 312558"];
10290 [label="ReportParameterErrors(owner, parameterSyntax, parameter, thisKeyword, paramsKeyword, firstDefault, diagnostics); 312559"];
10291 [label="ReportParameterErrors(owner, parameterSyntax, parameter, thisKeyword, paramsKeyword, firstDefault, diagnostics); 312560"];
10292 [label="ReportParameterErrors(owner, parameterSyntax, parameter, thisKeyword, paramsKeyword, firstDefault, diagnostics); 312561"];
10293 [label="ReportParameterErrors(owner, parameterSyntax, parameter, thisKeyword, paramsKeyword, firstDefault, diagnostics) 312562"];
10294 [label="param ReportParameterErrors(Symbol owner) 312563"];
10295 [label="param ReportParameterErrors(BaseParameterSyntax parameterSyntax) 312564"];
10296 [label="param ReportParameterErrors(ParameterSymbol parameter) 312565"];
10297 [label="param ReportParameterErrors(SyntaxToken thisKeyword) 312566"];
10298 [label="param ReportParameterErrors(SyntaxToken paramsKeyword) 312567"];
10299 [label="param ReportParameterErrors(int firstDefault) 312568"];
10300 [label="param ReportParameterErrors(DiagnosticBag diagnostics) 312569"];
10301 [label="parameter.Ordinal 312570"];
10302 [label="get { return _ordinal; } 312571"];
10303 [label="return _ordinal; 312572"];
10304 [label="int parameterIndex = parameter.Ordinal; 312573"];
10305 [label="bool isDefault = parameterSyntax is ParameterSyntax { Default: { } }; 312574"];
10306 [label="bool isDefault = parameterSyntax is ParameterSyntax { Default: { } }; 312575"];
10307 [label="if (thisKeyword.Kind() == SyntaxKind.ThisKeyword && parameterIndex != 0)\n            {\n                // Report CS1100 on 'this'. Note that is a change from Dev10\n                // which reports the error on the type following 'this'.\n\n                // error CS1100: Method '{0}' has a parameter modifier 'this' which is not on the first parameter\n                diagnostics.Add(ErrorCode.ERR_BadThisParam, thisKeyword.GetLocation(), owner.Name);\n            }\n            else if (parameter.IsParams && owner.IsOperator())\n            {\n                // error CS1670: params is not valid in this context\n                diagnostics.Add(ErrorCode.ERR_IllegalParams, paramsKeyword.GetLocation());\n            }\n            else if (parameter.IsParams && !parameter.TypeWithAnnotations.IsSZArray())\n            {\n                // error CS0225: The params parameter must be a single dimensional array\n                diagnostics.Add(ErrorCode.ERR_ParamsMustBeArray, paramsKeyword.GetLocation());\n            }\n            else if (parameter.TypeWithAnnotations.IsStatic)\n            {\n                Debug.Assert(parameter.ContainingSymbol is FunctionPointerMethodSymbol or { ContainingType: not null });\n                // error CS0721: '{0}': static types cannot be used as parameters\n                // LAFHIS\n                diagnostics.Add(\n                    ErrorFacts.GetStaticClassParameterCode(\n                        parameter.ContainingSymbol.ContainingType.Equals(null) ?\n                        parameter.ContainingSymbol.ContainingType.IsInterfaceType() : false),\n                    owner.Locations.IsEmpty ? parameterSyntax.GetLocation() : owner.Locations[0],\n                    parameter.Type);\n            }\n            else if (firstDefault != -1 && parameterIndex > firstDefault && !isDefault && !parameter.IsParams)\n            {\n                // error CS1737: Optional parameters must appear after all required parameters\n                Location loc = ((ParameterSyntax)(BaseParameterSyntax)parameterSyntax).Identifier.GetNextToken(includeZeroWidth: true).GetLocation(); //could be missing\n                diagnostics.Add(ErrorCode.ERR_DefaultValueBeforeRequiredValue, loc);\n            }\n            else if (parameter.RefKind != RefKind.None &&\n                parameter.TypeWithAnnotations.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                // CS1601: Cannot make reference to variable of type 'System.TypedReference'\n                diagnostics.Add(ErrorCode.ERR_MethodArgCantBeRefAny, parameterSyntax.Location, parameter.Type);\n            } 312576"];
10308 [label="if (thisKeyword.Kind() == SyntaxKind.ThisKeyword && parameterIndex != 0)\n            {\n                // Report CS1100 on 'this'. Note that is a change from Dev10\n                // which reports the error on the type following 'this'.\n\n                // error CS1100: Method '{0}' has a parameter modifier 'this' which is not on the first parameter\n                diagnostics.Add(ErrorCode.ERR_BadThisParam, thisKeyword.GetLocation(), owner.Name);\n            }\n            else if (parameter.IsParams && owner.IsOperator())\n            {\n                // error CS1670: params is not valid in this context\n                diagnostics.Add(ErrorCode.ERR_IllegalParams, paramsKeyword.GetLocation());\n            }\n            else if (parameter.IsParams && !parameter.TypeWithAnnotations.IsSZArray())\n            {\n                // error CS0225: The params parameter must be a single dimensional array\n                diagnostics.Add(ErrorCode.ERR_ParamsMustBeArray, paramsKeyword.GetLocation());\n            }\n            else if (parameter.TypeWithAnnotations.IsStatic)\n            {\n                Debug.Assert(parameter.ContainingSymbol is FunctionPointerMethodSymbol or { ContainingType: not null });\n                // error CS0721: '{0}': static types cannot be used as parameters\n                // LAFHIS\n                diagnostics.Add(\n                    ErrorFacts.GetStaticClassParameterCode(\n                        parameter.ContainingSymbol.ContainingType.Equals(null) ?\n                        parameter.ContainingSymbol.ContainingType.IsInterfaceType() : false),\n                    owner.Locations.IsEmpty ? parameterSyntax.GetLocation() : owner.Locations[0],\n                    parameter.Type);\n            }\n            else if (firstDefault != -1 && parameterIndex > firstDefault && !isDefault && !parameter.IsParams)\n            {\n                // error CS1737: Optional parameters must appear after all required parameters\n                Location loc = ((ParameterSyntax)(BaseParameterSyntax)parameterSyntax).Identifier.GetNextToken(includeZeroWidth: true).GetLocation(); //could be missing\n                diagnostics.Add(ErrorCode.ERR_DefaultValueBeforeRequiredValue, loc);\n            }\n            else if (parameter.RefKind != RefKind.None &&\n                parameter.TypeWithAnnotations.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                // CS1601: Cannot make reference to variable of type 'System.TypedReference'\n                diagnostics.Add(ErrorCode.ERR_MethodArgCantBeRefAny, parameterSyntax.Location, parameter.Type);\n            } 312577"];
10309 [label="parameter.IsParams 312578"];
10310 [label="get { return false; } 312579"];
10311 [label="return false; 312580"];
10312 [label="if (parameter.IsParams && owner.IsOperator())\n            {\n                // error CS1670: params is not valid in this context\n                diagnostics.Add(ErrorCode.ERR_IllegalParams, paramsKeyword.GetLocation());\n            }\n            else if (parameter.IsParams && !parameter.TypeWithAnnotations.IsSZArray())\n            {\n                // error CS0225: The params parameter must be a single dimensional array\n                diagnostics.Add(ErrorCode.ERR_ParamsMustBeArray, paramsKeyword.GetLocation());\n            }\n            else if (parameter.TypeWithAnnotations.IsStatic)\n            {\n                Debug.Assert(parameter.ContainingSymbol is FunctionPointerMethodSymbol or { ContainingType: not null });\n                // error CS0721: '{0}': static types cannot be used as parameters\n                // LAFHIS\n                diagnostics.Add(\n                    ErrorFacts.GetStaticClassParameterCode(\n                        parameter.ContainingSymbol.ContainingType.Equals(null) ?\n                        parameter.ContainingSymbol.ContainingType.IsInterfaceType() : false),\n                    owner.Locations.IsEmpty ? parameterSyntax.GetLocation() : owner.Locations[0],\n                    parameter.Type);\n            }\n            else if (firstDefault != -1 && parameterIndex > firstDefault && !isDefault && !parameter.IsParams)\n            {\n                // error CS1737: Optional parameters must appear after all required parameters\n                Location loc = ((ParameterSyntax)(BaseParameterSyntax)parameterSyntax).Identifier.GetNextToken(includeZeroWidth: true).GetLocation(); //could be missing\n                diagnostics.Add(ErrorCode.ERR_DefaultValueBeforeRequiredValue, loc);\n            }\n            else if (parameter.RefKind != RefKind.None &&\n                parameter.TypeWithAnnotations.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                // CS1601: Cannot make reference to variable of type 'System.TypedReference'\n                diagnostics.Add(ErrorCode.ERR_MethodArgCantBeRefAny, parameterSyntax.Location, parameter.Type);\n            } 312581"];
10313 [label="parameter.IsParams 312582"];
10314 [label="get { return false; } 312583"];
10315 [label="if (parameter.IsParams && !parameter.TypeWithAnnotations.IsSZArray())\n            {\n                // error CS0225: The params parameter must be a single dimensional array\n                diagnostics.Add(ErrorCode.ERR_ParamsMustBeArray, paramsKeyword.GetLocation());\n            }\n            else if (parameter.TypeWithAnnotations.IsStatic)\n            {\n                Debug.Assert(parameter.ContainingSymbol is FunctionPointerMethodSymbol or { ContainingType: not null });\n                // error CS0721: '{0}': static types cannot be used as parameters\n                // LAFHIS\n                diagnostics.Add(\n                    ErrorFacts.GetStaticClassParameterCode(\n                        parameter.ContainingSymbol.ContainingType.Equals(null) ?\n                        parameter.ContainingSymbol.ContainingType.IsInterfaceType() : false),\n                    owner.Locations.IsEmpty ? parameterSyntax.GetLocation() : owner.Locations[0],\n                    parameter.Type);\n            }\n            else if (firstDefault != -1 && parameterIndex > firstDefault && !isDefault && !parameter.IsParams)\n            {\n                // error CS1737: Optional parameters must appear after all required parameters\n                Location loc = ((ParameterSyntax)(BaseParameterSyntax)parameterSyntax).Identifier.GetNextToken(includeZeroWidth: true).GetLocation(); //could be missing\n                diagnostics.Add(ErrorCode.ERR_DefaultValueBeforeRequiredValue, loc);\n            }\n            else if (parameter.RefKind != RefKind.None &&\n                parameter.TypeWithAnnotations.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                // CS1601: Cannot make reference to variable of type 'System.TypedReference'\n                diagnostics.Add(ErrorCode.ERR_MethodArgCantBeRefAny, parameterSyntax.Location, parameter.Type);\n            } 312584"];
10316 [label="parameter.TypeWithAnnotations 312585"];
10317 [label="get\n            {\n                return this.parameterType;\n            } 312586"];
10318 [label="return this.parameterType; 312587"];
10319 [label="if (parameter.TypeWithAnnotations.IsStatic)\n            {\n                Debug.Assert(parameter.ContainingSymbol is FunctionPointerMethodSymbol or { ContainingType: not null });\n                // error CS0721: '{0}': static types cannot be used as parameters\n                // LAFHIS\n                diagnostics.Add(\n                    ErrorFacts.GetStaticClassParameterCode(\n                        parameter.ContainingSymbol.ContainingType.Equals(null) ?\n                        parameter.ContainingSymbol.ContainingType.IsInterfaceType() : false),\n                    owner.Locations.IsEmpty ? parameterSyntax.GetLocation() : owner.Locations[0],\n                    parameter.Type);\n            }\n            else if (firstDefault != -1 && parameterIndex > firstDefault && !isDefault && !parameter.IsParams)\n            {\n                // error CS1737: Optional parameters must appear after all required parameters\n                Location loc = ((ParameterSyntax)(BaseParameterSyntax)parameterSyntax).Identifier.GetNextToken(includeZeroWidth: true).GetLocation(); //could be missing\n                diagnostics.Add(ErrorCode.ERR_DefaultValueBeforeRequiredValue, loc);\n            }\n            else if (parameter.RefKind != RefKind.None &&\n                parameter.TypeWithAnnotations.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                // CS1601: Cannot make reference to variable of type 'System.TypedReference'\n                diagnostics.Add(ErrorCode.ERR_MethodArgCantBeRefAny, parameterSyntax.Location, parameter.Type);\n            } 312588"];
10320 [label="parameter.TypeWithAnnotations.IsStatic 312589"];
10321 [label="=>\n            _extensions.IsStatic(DefaultType) 312590"];
10322 [label="DefaultType 312591"];
10323 [label="_extensions.IsStatic(DefaultType) 312592"];
10324 [label="param IsStatic(TypeSymbol typeSymbol) 312593"];
10325 [label="=> typeSymbol.IsStatic 312594"];
10326 [label="typeSymbol.IsStatic 312595"];
10327 [label="get\n            {\n                return\n                    (_flags & TypeAttributes.Sealed) != 0 &&\n                    (_flags & TypeAttributes.Abstract) != 0;\n            } 312596"];
10328 [label="return\n                    (_flags & TypeAttributes.Sealed) != 0 &&\n                    (_flags & TypeAttributes.Abstract) != 0; 312597"];
10329 [label="return\n                    (_flags & TypeAttributes.Sealed) != 0 &&\n                    (_flags & TypeAttributes.Abstract) != 0; 312598"];
10330 [label="if (firstDefault != -1 && parameterIndex > firstDefault && !isDefault && !parameter.IsParams)\n            {\n                // error CS1737: Optional parameters must appear after all required parameters\n                Location loc = ((ParameterSyntax)(BaseParameterSyntax)parameterSyntax).Identifier.GetNextToken(includeZeroWidth: true).GetLocation(); //could be missing\n                diagnostics.Add(ErrorCode.ERR_DefaultValueBeforeRequiredValue, loc);\n            }\n            else if (parameter.RefKind != RefKind.None &&\n                parameter.TypeWithAnnotations.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                // CS1601: Cannot make reference to variable of type 'System.TypedReference'\n                diagnostics.Add(ErrorCode.ERR_MethodArgCantBeRefAny, parameterSyntax.Location, parameter.Type);\n            } 312599"];
10331 [label="if (firstDefault != -1 && parameterIndex > firstDefault && !isDefault && !parameter.IsParams)\n            {\n                // error CS1737: Optional parameters must appear after all required parameters\n                Location loc = ((ParameterSyntax)(BaseParameterSyntax)parameterSyntax).Identifier.GetNextToken(includeZeroWidth: true).GetLocation(); //could be missing\n                diagnostics.Add(ErrorCode.ERR_DefaultValueBeforeRequiredValue, loc);\n            }\n            else if (parameter.RefKind != RefKind.None &&\n                parameter.TypeWithAnnotations.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                // CS1601: Cannot make reference to variable of type 'System.TypedReference'\n                diagnostics.Add(ErrorCode.ERR_MethodArgCantBeRefAny, parameterSyntax.Location, parameter.Type);\n            } 312600"];
10332 [label="parameter.RefKind 312601"];
10333 [label="get\n            {\n                return _refKind;\n            } 312602"];
10334 [label="return _refKind; 312603"];
10335 [label="if (parameter.RefKind != RefKind.None &&\n                parameter.TypeWithAnnotations.IsRestrictedType(ignoreSpanLikeTypes: true))\n            {\n                // CS1601: Cannot make reference to variable of type 'System.TypedReference'\n                diagnostics.Add(ErrorCode.ERR_MethodArgCantBeRefAny, parameterSyntax.Location, parameter.Type);\n            } 312604"];
10336 [label="builder.Add(parameter); 312605"];
10337 [label="builder.Add(parameter); 312606"];
10338 [label="++parameterIndex; 312607"];
10339 [label="if (mustBeLastParameter != null && mustBeLastParameter != parametersList[lastIndex])\n            {\n                diagnostics.Add(\n                    mustBeLastParameter.Identifier.Kind() == SyntaxKind.ArgListKeyword\n                        ? ErrorCode.ERR_VarargsLast\n                        : ErrorCode.ERR_ParamsLast,\n                    mustBeLastParameter.GetLocation());\n            } 312608"];
10340 [label="if (mustBeLastParameter != null && mustBeLastParameter != parametersList[lastIndex])\n            {\n                diagnostics.Add(\n                    mustBeLastParameter.Identifier.Kind() == SyntaxKind.ArgListKeyword\n                        ? ErrorCode.ERR_VarargsLast\n                        : ErrorCode.ERR_ParamsLast,\n                    mustBeLastParameter.GetLocation());\n            } 312609"];
10341 [label="var methodOwner = owner as MethodSymbol; 312610"];
10342 [label="var typeParameters = (object)methodOwner != null ?\n                    methodOwner.TypeParameters :\n                    default(ImmutableArray<TypeParameterSymbol>); 312611"];
10343 [label="var typeParameters = (object)methodOwner != null ?\n                    methodOwner.TypeParameters :\n                    default(ImmutableArray<TypeParameterSymbol>); 312612"];
10344 [label="(object)methodOwner != null 312613"];
10345 [label="methodOwner.TypeParameters 312614"];
10346 [label="get { return ImmutableArray<TypeParameterSymbol>.Empty; } 312615"];
10347 [label=".MethodKind 312616"];
10348 [label="get\n            {\n                return this.flags.MethodKind;\n            } 312617"];
10349 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 312618"];
10350 [label="Debug.Assert(methodOwner?.MethodKind != MethodKind.LambdaMethod); 312619"];
10351 [label=".MethodKind 312620"];
10352 [label="get\n            {\n                return this.flags.MethodKind;\n            } 312621"];
10353 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 312622"];
10354 [label="binder.ValidateParameterNameConflicts(typeParameters, parameters.Cast<TParameterSymbol, ParameterSymbol>(), allowShadowingNames, diagnostics) 312623"];
10355 [label="param ValidateParameterNameConflicts(ImmutableArray<TypeParameterSymbol> typeParameters) 312624"];
10356 [label="param ValidateParameterNameConflicts(ImmutableArray<ParameterSymbol> parameters) 312625"];
10357 [label="param ValidateParameterNameConflicts(bool allowShadowingNames) 312626"];
10358 [label="param ValidateParameterNameConflicts(DiagnosticBag diagnostics) 312627"];
10359 [label="param ValidateParameterNameConflicts(this) 312628"];
10360 [label="PooledHashSet<string>? tpNames = null; 312629"];
10361 [label="if (!typeParameters.IsDefaultOrEmpty)\n            {\n                tpNames = PooledHashSet<string>.GetInstance();\n                foreach (var tp in typeParameters)\n                {\n                    var name = tp.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (!tpNames.Add(name))\n                    {\n                        // Type parameter declaration name conflicts are detected elsewhere\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(tp, diagnostics);\n                    }\n                }\n            } 312630"];
10362 [label="PooledHashSet<string>? pNames = null; 312631"];
10363 [label="if (!parameters.IsDefaultOrEmpty)\n            {\n                pNames = PooledHashSet<string>.GetInstance();\n                foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                }\n            } 312632"];
10364 [label="pNames = PooledHashSet<string>.GetInstance(); 312633"];
10365 [label="foreach (var p in parameters)\n                {\n                    var name = p.Name;\n                    if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    }\n\n                    if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    }\n\n                    if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    }\n                } 312634"];
10366 [label="p.Name 312635"];
10367 [label="get\n            {\n                return _name;\n            } 312636"];
10368 [label="return _name; 312637"];
10369 [label="var name = p.Name; 312638"];
10370 [label="if (string.IsNullOrEmpty(name))\n                    {\n                        continue;\n                    } 312639"];
10371 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 312640"];
10372 [label="if (tpNames != null && tpNames.Contains(name))\n                    {\n                        // CS0412: 'X': a parameter or local variable cannot have the same name as a method type parameter\n                        diagnostics.Add(ErrorCode.ERR_LocalSameNameAsTypeParam, GetLocation(p), name);\n                    } 312641"];
10373 [label="if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 312642"];
10374 [label="if (!pNames.Add(name))\n                    {\n                        // The parameter name '{0}' is a duplicate\n                        diagnostics.Add(ErrorCode.ERR_DuplicateParamName, GetLocation(p), name);\n                    }\n                    else if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 312643"];
10375 [label="if (!allowShadowingNames)\n                    {\n                        ValidateDeclarationNameConflictsInScope(p, diagnostics);\n                    } 312644"];
10376 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 312645"];
10377 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics); 312646"];
10378 [label="ValidateDeclarationNameConflictsInScope(p, diagnostics) 312647"];
10379 [label="param ValidateDeclarationNameConflictsInScope(Symbol symbol) 312648"];
10380 [label="param ValidateDeclarationNameConflictsInScope(DiagnosticBag diagnostics) 312649"];
10381 [label="param ValidateDeclarationNameConflictsInScope(this) 312650"];
10382 [label="Location location = GetLocation(symbol); 312651"];
10383 [label="GetLocation(symbol) 312652"];
10384 [label="param GetLocation(Symbol symbol) 312653"];
10385 [label="symbol.Locations 312654"];
10386 [label="get\n            {\n                return _locations;\n            } 312655"];
10387 [label="return _locations; 312656"];
10388 [label="var locations = symbol.Locations; 312657"];
10389 [label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 312658"];
10390 [label="return locations.Length != 0 ? locations[0] : symbol.ContainingSymbol.Locations[0]; 312659"];
10391 [label="locations.Length != 0 312660"];
10392 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 312661"];
10393 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 312662"];
10394 [label="symbol.Name 312663"];
10395 [label="get\n            {\n                return _name;\n            } 312664"];
10396 [label="return _name; 312665"];
10397 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 312666"];
10398 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 312667"];
10399 [label="ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics) 312668"];
10400 [label="param ValidateNameConflictsInScope(Symbol? symbol) 312669"];
10401 [label="param ValidateNameConflictsInScope(Location location) 312670"];
10402 [label="param ValidateNameConflictsInScope(string name) 312671"];
10403 [label="param ValidateNameConflictsInScope(DiagnosticBag diagnostics) 312672"];
10404 [label="param ValidateNameConflictsInScope(this) 312673"];
10405 [label="if (string.IsNullOrEmpty(name))\n            {\n                return false;\n            } 312674"];
10406 [label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 312675"];
10407 [label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 312676"];
10408 [label="bool allowShadowing = Compilation.IsFeatureEnabled(MessageID.IDS_FeatureNameShadowingInNestedFunctions); 312677"];
10409 [label="for (Binder? binder = this; binder != null; binder = binder.Next)\n            {\n                // no local scopes enclose members\n                if (binder is InContainerBinder)\n                {\n                    return false;\n                }\n\n                var scope = binder as LocalScopeBinder;\n                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                }\n\n                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.\n                if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                }\n\n                if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                }\n            } 312678"];
10410 [label="for (Binder? binder = this; binder != null; binder = binder.Next)\n            {\n                // no local scopes enclose members\n                if (binder is InContainerBinder)\n                {\n                    return false;\n                }\n\n                var scope = binder as LocalScopeBinder;\n                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                }\n\n                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.\n                if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                }\n\n                if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                }\n            } 312679"];
10411 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 312680"];
10412 [label="var scope = binder as LocalScopeBinder; 312681"];
10413 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 312682"];
10414 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 312683"];
10415 [label="binder.IsNestedFunctionBinder 312684"];
10416 [label="=> false 312685"];
10417 [label="false 312686"];
10418 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 312687"];
10419 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 312688"];
10420 [label="binder.IsLastBinderWithinMember() 312689"];
10421 [label="param IsLastBinderWithinMember(this) 312690"];
10422 [label="this.ContainingMemberOrLambda 312691"];
10423 [label="get { return _containingMemberOrLambda; } 312692"];
10424 [label="return _containingMemberOrLambda; 312693"];
10425 [label="var containingMemberOrLambda = this.ContainingMemberOrLambda; 312694"];
10426 [label=".Kind 312695"];
10427 [label="get\n            {\n                return SymbolKind.Method;\n            } 312696"];
10428 [label="switch (containingMemberOrLambda?.Kind)\n            {\n                case null:\n                case SymbolKind.NamedType:\n                case SymbolKind.Namespace:\n                    return true;\n                default:\n                    return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda;\n            } 312697"];
10429 [label="containingMemberOrLambda.ContainingSymbol 312698"];
10430 [label="get\n            {\n                return _containingType;\n            } 312699"];
10431 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 312700"];
10432 [label=".Kind 312701"];
10433 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 312702"];
10434 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 312703"];
10435 [label=".ContainingMemberOrLambda 312704"];
10436 [label="get { return _containingMemberOrLambda; } 312705"];
10437 [label="return _containingMemberOrLambda; 312706"];
10438 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 312707"];
10439 [label="this.Next?.ContainingMemberOrLambda != containingMemberOrLambda 312708"];
10440 [label="param !=(Symbol left) 312709"];
10441 [label="param !=(Symbol right) 312710"];
10442 [label="if (right is null)\n            {\n                return left is object;\n            } 312711"];
10443 [label="return (object)left != (object)right && !right.Equals(left); 312712"];
10444 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 312713"];
10445 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 312714"];
10446 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 312715"];
10447 [label="for (Binder? binder = this; binder != null; binder = binder.Next)\n            {\n                // no local scopes enclose members\n                if (binder is InContainerBinder)\n                {\n                    return false;\n                }\n\n                var scope = binder as LocalScopeBinder;\n                if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                }\n\n                // If shadowing is enabled, avoid checking for conflicts outside of local functions or lambdas.\n                if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                }\n\n                if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                }\n            } 312716"];
10448 [label="if (binder is InContainerBinder)\n                {\n                    return false;\n                } 312717"];
10449 [label="var scope = binder as LocalScopeBinder; 312718"];
10450 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 312719"];
10451 [label="if (scope?.EnsureSingleDefinition(symbol, name, location, diagnostics) == true)\n                {\n                    return true;\n                } 312720"];
10452 [label="binder.IsNestedFunctionBinder 312721"];
10453 [label="=> false 312722"];
10454 [label="false 312723"];
10455 [label="if (allowShadowing && binder.IsNestedFunctionBinder)\n                {\n                    return false;\n                } 312724"];
10456 [label="binder.IsLastBinderWithinMember() 312725"];
10457 [label="param IsLastBinderWithinMember(this) 312726"];
10458 [label="this.ContainingMemberOrLambda 312727"];
10459 [label="get { return _containingMemberOrLambda; } 312728"];
10460 [label="return _containingMemberOrLambda; 312729"];
10461 [label="var containingMemberOrLambda = this.ContainingMemberOrLambda; 312730"];
10462 [label=".Kind 312731"];
10463 [label="get\n            {\n                return SymbolKind.Method;\n            } 312732"];
10464 [label="switch (containingMemberOrLambda?.Kind)\n            {\n                case null:\n                case SymbolKind.NamedType:\n                case SymbolKind.Namespace:\n                    return true;\n                default:\n                    return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda;\n            } 312733"];
10465 [label="containingMemberOrLambda.ContainingSymbol 312734"];
10466 [label="get\n            {\n                return _containingType;\n            } 312735"];
10467 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 312736"];
10468 [label=".Kind 312737"];
10469 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 312738"];
10470 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 312739"];
10471 [label=".ContainingMemberOrLambda 312740"];
10472 [label="get\n            {\n                var merged = _container as MergedNamespaceSymbol;\n                return ((object)merged != null) ? merged.GetConstituentForCompilation(this.Compilation) : _container;\n            } 312741"];
10473 [label="_container 312742"];
10474 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 312743"];
10475 [label="this.Next?.ContainingMemberOrLambda != containingMemberOrLambda 312744"];
10476 [label="param !=(Symbol left) 312745"];
10477 [label="param !=(Symbol right) 312746"];
10478 [label="if (right is null)\n            {\n                return left is object;\n            } 312747"];
10479 [label="return (object)left != (object)right && !right.Equals(left); 312748"];
10480 [label="return (object)left != (object)right && !right.Equals(left); 312749"];
10481 [label="right.Equals(left) 312750"];
10482 [label="param Equals(object obj) 312751"];
10483 [label="param Equals(this) 312752"];
10484 [label="param Equals(TypeCompareKind compareKind) 312753"];
10485 [label="if (other is SubstitutedMethodSymbol sms)\n            {\n                return sms.Equals(this, compareKind);\n            } 312754"];
10486 [label="if (other is NativeIntegerMethodSymbol nms)\n            {\n                return nms.Equals(this, compareKind);\n            } 312755"];
10487 [label="param Equals(TypeCompareKind compareKind) 312756"];
10488 [label="return (object)this == other; 312757"];
10489 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 312758"];
10490 [label="return containingMemberOrLambda.ContainingSymbol?.Kind == SymbolKind.NamedType &&\n                           this.Next?.ContainingMemberOrLambda != containingMemberOrLambda; 312759"];
10491 [label="if (binder.IsLastBinderWithinMember())\n                {\n                    // Declarations within a member do not conflict with declarations outside.\n                    return false;\n                } 312760"];
10492 [label="return false; 312761"];
10493 [label="return ValidateNameConflictsInScope(symbol, location, symbol.Name, diagnostics); 312762"];
10494 [label="tpNames?.Free(); 312763"];
10495 [label="pNames?.Free(); 312764"];
10496 [label="param GetSpecialType(DiagnosticBag diagnostics) 312765"];
10497 [label="param GetSpecialType(SyntaxNode node) 312766"];
10498 [label="param GetSpecialType(SyntaxNode node) 312767"];
10499 [label="param GetSpecialType(DiagnosticBag diagnostics) 312768"];
10500 [label="if (specialType <= SpecialType.None || specialType > SpecialType.Count)\n            {\n                throw new ArgumentOutOfRangeException(nameof(specialType), $'Unexpected SpecialType: '{(int)specialType}'.');\n            } 312769"];
10501 [label="NamedTypeSymbol result; 312770"];
10502 [label="GetBoundReferenceManager(); 312771"];
10503 [label="this.Modules 312772"];
10504 [label="foreach (var module in this.Modules)\n            {\n                Debug.Assert(module.GetReferencedAssemblies().Length == 0);\n            } 312773"];
10505 [label="module.GetReferencedAssemblies() 312774"];
10506 [label="param GetReferencedAssemblies(this) 312775"];
10507 [label="AssertReferencesInitialized() 312776"];
10508 [label="param AssertReferencesInitialized(this) 312777"];
10509 [label="Debug.Assert(_moduleReferences != null); 312778"];
10510 [label="Debug.Assert(_moduleReferences != null); 312779"];
10511 [label="AssertReferencesInitialized(); 312780"];
10512 [label="return _moduleReferences.Identities; 312781"];
10513 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 312782"];
10514 [label="Debug.Assert(module.GetReferencedAssemblies().Length == 0); 312783"];
10515 [label="result.SpecialType 312784"];
10516 [label="get\n            {\n                return _corTypeId;\n            } 312785"];
10517 [label="Debug.Assert(result.SpecialType == specialType); 312786"];
10518 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 312787"];
10519 [label="Debug.Assert((object)typeSymbol != null, 'Expect an error type if special type isn't found'); 312788"];
10520 [label="param ReportUseSiteDiagnostics(DiagnosticBag diagnostics) 312789"];
10521 [label="param ReportUseSiteDiagnostics(SyntaxNode node) 312790"];
10522 [label="return _lazyUseSiteDiagnostic; 312791"];
10523 [label="DiagnosticInfo info = symbol.GetUseSiteDiagnostic(); 312792"];
10524 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 312793"];
10525 [label="return info != null && Symbol.ReportUseSiteDiagnostic(info, diagnostics, node.Location); 312794"];
10526 [label="if (typeSymbol is null && nullableAnnotation == 0)\n            {\n                return default;\n            } 312795"];
10527 [label="Debug.Assert(nullableAnnotation != NullableAnnotation.Ignored || typeSymbol.IsTypeParameter()); 312796"];
10528 [label="switch (nullableAnnotation)\n            {\n                case NullableAnnotation.Oblivious:\n                case NullableAnnotation.NotAnnotated:\n                    // LAFHIS\n                    if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    }\n                    break;\n            } 312797"];
10529 [label="if (typeSymbol is not null && typeSymbol.IsNullableType())\n                    {\n                        // int?, T? where T : struct (add annotation)\n                        nullableAnnotation = NullableAnnotation.Annotated;\n                    } 312798"];
10530 [label="typeSymbol.IsNullableType() 312799"];
10531 [label="param IsNullableType(this TypeSymbol type) 312800"];
10532 [label="var a1 = defaultType is null; 312801"];
10533 [label="!a1 312802"];
10534 [label="var a2 = !a1 ? defaultType.IsNullableType() : true; 312803"];
10535 [label="defaultType.IsNullableType() 312804"];
10536 [label="param IsNullableType(this TypeSymbol type) 312805"];
10537 [label="var a3 = nullableAnnotation == NullableAnnotation.Annotated; 312806"];
10538 [label="Debug.Assert(a1 || a2 != true || a3); 312807"];
10539 [label="Debug.Assert(a1 || a2 != true || a3); 312808"];
10540 [label="Debug.Assert(extensions != null); 312809"];
10541 [label="MethodKind 312810"];
10542 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 312811"];
10543 [label="if (MethodKind == MethodKind.StaticConstructor && (_lazyParameters.Length != 0))\n            {\n                diagnostics.Add(ErrorCode.ERR_StaticConstParam, location, this);\n            } 312812"];
10544 [label="param CheckEffectiveAccessibility(ImmutableArray<ParameterSymbol> parameters) 312813"];
10545 [label="this.DeclaredAccessibility 312814"];
10546 [label="get\n            {\n                return ModifierUtils.EffectiveAccessibility(this.DeclarationModifiers);\n            } 312815"];
10547 [label="return ModifierUtils.EffectiveAccessibility(this.DeclarationModifiers); 312816"];
10548 [label="ModifierUtils.EffectiveAccessibility(this.DeclarationModifiers) 312817"];
10549 [label="param EffectiveAccessibility(DeclarationModifiers modifiers) 312818"];
10550 [label="switch (modifiers & DeclarationModifiers.AccessibilityMask)\n            {\n                case DeclarationModifiers.None:\n                    return Accessibility.NotApplicable; // for explicit interface implementation\n                case DeclarationModifiers.Private:\n                    return Accessibility.Private;\n                case DeclarationModifiers.Protected:\n                    return Accessibility.Protected;\n                case DeclarationModifiers.Internal:\n                    return Accessibility.Internal;\n                case DeclarationModifiers.Public:\n                    return Accessibility.Public;\n                case DeclarationModifiers.ProtectedInternal:\n                    return Accessibility.ProtectedOrInternal;\n                case DeclarationModifiers.PrivateProtected:\n                    return Accessibility.ProtectedAndInternal;\n                default:\n                    // This happens when you have a mix of accessibilities.\n                    //\n                    // i.e.: public private void Goo()\n                    return Accessibility.Public;\n            } 312819"];
10551 [label="return Accessibility.Public; 312820"];
10552 [label="if (this.DeclaredAccessibility <= Accessibility.Private || MethodKind == MethodKind.ExplicitInterfaceImplementation)\n            {\n                return;\n            } 312821"];
10553 [label="MethodKind 312822"];
10554 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 312823"];
10555 [label="if (this.DeclaredAccessibility <= Accessibility.Private || MethodKind == MethodKind.ExplicitInterfaceImplementation)\n            {\n                return;\n            } 312824"];
10556 [label="if (this.DeclaredAccessibility <= Accessibility.Private || MethodKind == MethodKind.ExplicitInterfaceImplementation)\n            {\n                return;\n            } 312825"];
10557 [label="this.MethodKind 312826"];
10558 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 312827"];
10559 [label="ErrorCode code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpReturn :\n                ErrorCode.ERR_BadVisReturnType; 312828"];
10560 [label="this.MethodKind 312829"];
10561 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 312830"];
10562 [label="ErrorCode code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpReturn :\n                ErrorCode.ERR_BadVisReturnType; 312831"];
10563 [label="ErrorCode code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpReturn :\n                ErrorCode.ERR_BadVisReturnType; 312832"];
10564 [label="(this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) 312833"];
10565 [label="=> typeSymbol.StrippedType() 312834"];
10566 [label="param VisitType(bool canDigThroughNullable = false) 312835"];
10567 [label="param VisitType(Func<TypeWithAnnotations, T, bool, bool>? typeWithAnnotationsPredicate) 312836"];
10568 [label="param VisitType(bool canDigThroughNullable = false) 312837"];
10569 [label="param VisitType(bool useDefaultType = false) 312838"];
10570 [label="typeWithAnnotationsOpt.HasType 312839"];
10571 [label="RoslynDebug.Assert(typeWithAnnotationsOpt.HasType == (type is null)); 312840"];
10572 [label="RoslynDebug.Assert(typeWithAnnotationsOpt.HasType == (type is null)); 312841"];
10573 [label="RoslynDebug.Assert(typeWithAnnotationsOpt.HasType == (type is null)); 312842"];
10574 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 312843"];
10575 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 312844"];
10576 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 312845"];
10577 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 312846"];
10578 [label="current.TypeKind 312847"];
10579 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 312848"];
10580 [label="switch (current.TypeKind)\n                {\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Enum:\n                    case TypeKind.Delegate:\n                        {\n                            var containingType = current.ContainingType;\n                            if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            }\n                        }\n                        break;\n\n                    case TypeKind.Submission:\n                        RoslynDebug.Assert((object)current.ContainingType == null);\n                        break;\n                } 312849"];
10581 [label="current.ContainingType 312850"];
10582 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 312851"];
10583 [label="return _container as NamedTypeSymbol; 312852"];
10584 [label="var containingType = current.ContainingType; 312853"];
10585 [label="if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            } 312854"];
10586 [label="if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            } 312855"];
10587 [label="if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    } 312856"];
10588 [label="param IsTypeLessVisibleThan(Symbol sym) 312857"];
10589 [label="param IsAsRestrictive(Symbol sym2) 312858"];
10590 [label="Accessibility access = Accessibility.Private; 312859"];
10591 [label="TypeWithAnnotations next; 312860"];
10592 [label="next 312861"];
10593 [label="current.TypeKind 312862"];
10594 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 312863"];
10595 [label="TypeKind result = _lazyKind; 312864"];
10596 [label="switch (current.TypeKind)\n                {\n                    case TypeKind.Dynamic:\n                    case TypeKind.TypeParameter:\n                    case TypeKind.Submission:\n                    case TypeKind.Enum:\n                        return null;\n\n                    case TypeKind.Error:\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Delegate:\n                        var typeArguments = ((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics;\n                        if (typeArguments.IsEmpty)\n                        {\n                            return null;\n                        }\n\n                        int i;\n                        for (i = 0; i < typeArguments.Length - 1; i++)\n                        {\n                            // Let's try to avoid early resolution of nullable types\n                            (TypeWithAnnotations nextTypeWithAnnotations, TypeSymbol? nextType) = getNextIterationElements(typeArguments[i], canDigThroughNullable);\n                            var result = VisitType(\n                                typeWithAnnotationsOpt: nextTypeWithAnnotations,\n                                type: nextType,\n                                typeWithAnnotationsPredicate,\n                                typePredicate,\n                                arg,\n                                canDigThroughNullable,\n                                useDefaultType);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n                        }\n\n                        next = typeArguments[i];\n                        break;\n\n                    case TypeKind.Array:\n                        next = ((ArrayTypeSymbol)current).ElementTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.Pointer:\n                        next = ((PointerTypeSymbol)current).PointedAtTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.FunctionPointer:\n                        {\n                            var result = visitFunctionPointerType((FunctionPointerTypeSymbol)current, typeWithAnnotationsPredicate, typePredicate, arg, useDefaultType, canDigThroughNullable, out next);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n\n                            break;\n                        }\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(current.TypeKind);\n                } 312865"];
10597 [label="((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 312866"];
10598 [label="get\n            {\n                return ImmutableArray<TypeWithAnnotations>.Empty;\n            } 312867"];
10599 [label="return ImmutableArray<TypeWithAnnotations>.Empty; 312868"];
10600 [label="var typeArguments = ((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics; 312869"];
10601 [label="if (typeArguments.IsEmpty)\n                        {\n                            return null;\n                        } 312870"];
10602 [label="return null; 312871"];
10603 [label="return result is null; 312872"];
10604 [label="this.MethodKind 312873"];
10605 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 312874"];
10606 [label="code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpParam :\n                ErrorCode.ERR_BadVisParamType; 312875"];
10607 [label="this.MethodKind 312876"];
10608 [label="get { return (MethodKind)((_flags >> MethodKindOffset) & MethodKindMask); } 312877"];
10609 [label="code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpParam :\n                ErrorCode.ERR_BadVisParamType; 312878"];
10610 [label="code = (this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) ?\n                ErrorCode.ERR_BadVisOpParam :\n                ErrorCode.ERR_BadVisParamType; 312879"];
10611 [label="(this.MethodKind == MethodKind.Conversion || this.MethodKind == MethodKind.UserDefinedOperator) 312880"];
10612 [label="foreach (var parameter in parameters)\n            {\n                if (!parameter.TypeWithAnnotations.IsAtLeastAsVisibleAs(this, ref useSiteDiagnostics))\n                {\n                    // Inconsistent accessibility: parameter type '{1}' is less accessible than method '{0}'\n                    diagnostics.Add(code, Locations[0], this, parameter.Type);\n                }\n            } 312881"];
10613 [label="parameter.TypeWithAnnotations 312882"];
10614 [label="get\n            {\n                return this.parameterType;\n            } 312883"];
10615 [label="return this.parameterType; 312884"];
10616 [label="if (!parameter.TypeWithAnnotations.IsAtLeastAsVisibleAs(this, ref useSiteDiagnostics))\n                {\n                    // Inconsistent accessibility: parameter type '{1}' is less accessible than method '{0}'\n                    diagnostics.Add(code, Locations[0], this, parameter.Type);\n                } 312885"];
10617 [label="if (!parameter.TypeWithAnnotations.IsAtLeastAsVisibleAs(this, ref useSiteDiagnostics))\n                {\n                    // Inconsistent accessibility: parameter type '{1}' is less accessible than method '{0}'\n                    diagnostics.Add(code, Locations[0], this, parameter.Type);\n                } 312886"];
10618 [label="parameter.TypeWithAnnotations.IsAtLeastAsVisibleAs(this, ref useSiteDiagnostics) 312887"];
10619 [label="param IsAtLeastAsVisibleAs(Symbol sym) 312888"];
10620 [label="param IsAtLeastAsVisibleAs(ref HashSet<DiagnosticInfo> useSiteDiagnostics) 312889"];
10621 [label="param IsAtLeastAsVisibleAs(this) 312890"];
10622 [label="=> typeSymbol.StrippedType() 312891"];
10623 [label="param VisitType(bool canDigThroughNullable = false) 312892"];
10624 [label="param VisitType(Func<TypeWithAnnotations, T, bool, bool>? typeWithAnnotationsPredicate) 312893"];
10625 [label="param VisitType(bool canDigThroughNullable = false) 312894"];
10626 [label="param VisitType(bool useDefaultType = false) 312895"];
10627 [label="typeWithAnnotationsOpt.HasType 312896"];
10628 [label="RoslynDebug.Assert(typeWithAnnotationsOpt.HasType == (type is null)); 312897"];
10629 [label="RoslynDebug.Assert(typeWithAnnotationsOpt.HasType == (type is null)); 312898"];
10630 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 312899"];
10631 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 312900"];
10632 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 312901"];
10633 [label="RoslynDebug.Assert(canDigThroughNullable == false || useDefaultType == false, 'digging through nullable will cause early resolution of nullable types'); 312902"];
10634 [label="current.TypeKind 312903"];
10635 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 312904"];
10636 [label="switch (current.TypeKind)\n                {\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Enum:\n                    case TypeKind.Delegate:\n                        {\n                            var containingType = current.ContainingType;\n                            if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            }\n                        }\n                        break;\n\n                    case TypeKind.Submission:\n                        RoslynDebug.Assert((object)current.ContainingType == null);\n                        break;\n                } 312905"];
10637 [label="current.ContainingType 312906"];
10638 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 312907"];
10639 [label="return _container as NamedTypeSymbol; 312908"];
10640 [label="var containingType = current.ContainingType; 312909"];
10641 [label="if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            } 312910"];
10642 [label="if ((object)containingType != null)\n                            {\n                                isNestedNamedType = true;\n                                var result = VisitType(default, containingType, typeWithAnnotationsPredicate, typePredicate, arg, canDigThroughNullable, useDefaultType);\n                                if (result is object)\n                                {\n                                    return result;\n                                }\n                            } 312911"];
10643 [label="if (typePredicate != null)\n                {\n                    if (typePredicate(current, arg, isNestedNamedType))\n                    {\n                        return current;\n                    }\n                } 312912"];
10644 [label="param IsTypeLessVisibleThan(Symbol sym) 312913"];
10645 [label="param IsAsRestrictive(Symbol sym2) 312914"];
10646 [label="Accessibility access = Accessibility.Private; 312915"];
10647 [label="TypeWithAnnotations next; 312916"];
10648 [label="next 312917"];
10649 [label="current.TypeKind 312918"];
10650 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 312919"];
10651 [label="switch (current.TypeKind)\n                {\n                    case TypeKind.Dynamic:\n                    case TypeKind.TypeParameter:\n                    case TypeKind.Submission:\n                    case TypeKind.Enum:\n                        return null;\n\n                    case TypeKind.Error:\n                    case TypeKind.Class:\n                    case TypeKind.Struct:\n                    case TypeKind.Interface:\n                    case TypeKind.Delegate:\n                        var typeArguments = ((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics;\n                        if (typeArguments.IsEmpty)\n                        {\n                            return null;\n                        }\n\n                        int i;\n                        for (i = 0; i < typeArguments.Length - 1; i++)\n                        {\n                            // Let's try to avoid early resolution of nullable types\n                            (TypeWithAnnotations nextTypeWithAnnotations, TypeSymbol? nextType) = getNextIterationElements(typeArguments[i], canDigThroughNullable);\n                            var result = VisitType(\n                                typeWithAnnotationsOpt: nextTypeWithAnnotations,\n                                type: nextType,\n                                typeWithAnnotationsPredicate,\n                                typePredicate,\n                                arg,\n                                canDigThroughNullable,\n                                useDefaultType);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n                        }\n\n                        next = typeArguments[i];\n                        break;\n\n                    case TypeKind.Array:\n                        next = ((ArrayTypeSymbol)current).ElementTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.Pointer:\n                        next = ((PointerTypeSymbol)current).PointedAtTypeWithAnnotations;\n                        break;\n\n                    case TypeKind.FunctionPointer:\n                        {\n                            var result = visitFunctionPointerType((FunctionPointerTypeSymbol)current, typeWithAnnotationsPredicate, typePredicate, arg, useDefaultType, canDigThroughNullable, out next);\n                            if (result is object)\n                            {\n                                return result;\n                            }\n\n                            break;\n                        }\n\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(current.TypeKind);\n                } 312920"];
10652 [label="((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics 312921"];
10653 [label="get\n            {\n                return ImmutableArray<TypeWithAnnotations>.Empty;\n            } 312922"];
10654 [label="return ImmutableArray<TypeWithAnnotations>.Empty; 312923"];
10655 [label="var typeArguments = ((NamedTypeSymbol)current).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics; 312924"];
10656 [label="if (typeArguments.IsEmpty)\n                        {\n                            return null;\n                        } 312925"];
10657 [label="return null; 312926"];
10658 [label="return result is null; 312927"];
10659 [label="if (_lazyIsVararg && (IsGenericMethod || ContainingType.IsGenericType || _lazyParameters.Length > 0 && _lazyParameters[_lazyParameters.Length - 1].IsParams))\n            {\n                diagnostics.Add(ErrorCode.ERR_BadVarargs, location);\n            } 312928"];
10660 [label="AddDeclarationDiagnostics(diagnostics); 312929"];
10661 [label="param AddDeclarationDiagnostics(DiagnosticBag diagnostics) 312930"];
10662 [label="param AssertMemberExposure(bool forDiagnostics = false) 312931"];
10663 [label="if (member is NamedTypeSymbol type)\n            {\n                Debug.Assert(forDiagnostics);\n                // Lafhis\n                var temp = Volatile.Read(ref _lazyTypeMembers);\n                Debug.Assert(temp != null ? temp.Values.Any(types => types.Contains(t => t == (object)type)) == true : false);\n                return;\n            }\n            else if (member is TypeParameterSymbol || member is SynthesizedMethodBaseSymbol)\n            {\n                Debug.Assert(forDiagnostics);\n                return;\n            }\n            else if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 312932"];
10664 [label="if (member is TypeParameterSymbol || member is SynthesizedMethodBaseSymbol)\n            {\n                Debug.Assert(forDiagnostics);\n                return;\n            }\n            else if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 312933"];
10665 [label="if (member is FieldSymbol field && field.AssociatedSymbol is EventSymbol e)\n            {\n                Debug.Assert(forDiagnostics);\n                member = e;\n            } 312934"];
10666 [label="Debug.Assert(declared != DeclaredMembersAndInitializers.UninitializedSentinel); 312935"];
10667 [label="return; 312936"];
10668 [label="if (!diagnostics.IsEmptyWithoutResolution)\n            {\n                CSharpCompilation compilation = this.DeclaringCompilation;\n                Debug.Assert(compilation != null);\n                compilation.DeclarationDiagnostics.AddRange(diagnostics);\n            } 312937"];
10669 [label="LazyMethodChecks(); 312938"];
10670 [label="return _lazyIsVararg; 312939"];
10671 [label="AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters); 312940"];
10672 [label="LazyMethodChecks() 312941"];
10673 [label="param LazyMethodChecks(this) 312942"];
10674 [label="LazyMethodChecks(); 312943"];
10675 [label="if (symbols.IsDefault)\n            {\n                return default;\n            } 312944"];
10676 [label="param CreateISymbol(this) 312945"];
10677 [label="return new PublicModel.ParameterSymbol(this); 312946"];
10678 [label="return new PublicModel.ParameterSymbol(this); 312947"];
10679 [label="new PublicModel.ParameterSymbol(this) 312948"];
10680 [label="param ParameterSymbol(Symbols.ParameterSymbol underlying) 312949"];
10681 [label="param ParameterSymbol(this) 312950"];
10682 [label="param ParameterSymbol(this) 312951"];
10683 [label="param Symbol(this) 312952"];
10684 [label="_underlying 312953"];
10685 [label="_lazyType 312954"];
10686 [label="Debug.Assert(underlying is object); 312955"];
10687 [label="_underlying 312956"];
10688 [label="Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null); 312957"];
10689 [label="AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters); 312958"];
10690 [label="AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters) 312959"];
10691 [label="param AddParametersIfRequired(bool hasThisParameter) 312960"];
10692 [label="param AddParametersIfRequired(bool isVarargs) 312961"];
10693 [label="param AddParametersIfRequired(ImmutableArray<IParameterSymbol> parameters) 312962"];
10694 [label="param AddParametersIfRequired(this) 312963"];
10695 [label="if (format.ParameterOptions == SymbolDisplayParameterOptions.None)\n            {\n                return;\n            } 312964"];
10696 [label="var first = true; 312965"];
10697 [label="if (!parameters.IsDefault)\n            {\n                foreach (var param in parameters)\n                {\n                    if (!first)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                        AddSpace();\n                    }\n                    else if (hasThisParameter)\n                    {\n                        if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeExtensionThis))\n                        {\n                            AddKeyword(SyntaxKind.ThisKeyword);\n                            AddSpace();\n                        }\n                    }\n\n                    first = false;\n                    param.Accept(this.NotFirstVisitor);\n                }\n            } 312966"];
10698 [label="foreach (var param in parameters)\n                {\n                    if (!first)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                        AddSpace();\n                    }\n                    else if (hasThisParameter)\n                    {\n                        if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeExtensionThis))\n                        {\n                            AddKeyword(SyntaxKind.ThisKeyword);\n                            AddSpace();\n                        }\n                    }\n\n                    first = false;\n                    param.Accept(this.NotFirstVisitor);\n                } 312967"];
10699 [label="if (!first)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                        AddSpace();\n                    }\n                    else if (hasThisParameter)\n                    {\n                        if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeExtensionThis))\n                        {\n                            AddKeyword(SyntaxKind.ThisKeyword);\n                            AddSpace();\n                        }\n                    } 312968"];
10700 [label="if (hasThisParameter)\n                    {\n                        if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeExtensionThis))\n                        {\n                            AddKeyword(SyntaxKind.ThisKeyword);\n                            AddSpace();\n                        }\n                    } 312969"];
10701 [label="first = false; 312970"];
10702 [label="param.Accept(this.NotFirstVisitor); 312971"];
10703 [label="param.Accept(this.NotFirstVisitor) 312972"];
10704 [label="param Accept(SymbolVisitor visitor) 312973"];
10705 [label="param Accept(SymbolVisitor visitor) 312974"];
10706 [label="param Accept(this) 312975"];
10707 [label="visitor.VisitParameter(this); 312976"];
10708 [label="visitor.VisitParameter(this) 312977"];
10709 [label="param VisitParameter(IParameterSymbol symbol) 312978"];
10710 [label="param VisitParameter(this) 312979"];
10711 [label="var includeType = format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeType); 312980"];
10712 [label="var includeType = format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeType); 312981"];
10713 [label="var includeName = format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeName)\n                              && !(symbol.ContainingSymbol is IMethodSymbol { MethodKind: MethodKind.FunctionPointerSignature }); 312982"];
10714 [label="var includeName = format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeName)\n                              && !(symbol.ContainingSymbol is IMethodSymbol { MethodKind: MethodKind.FunctionPointerSignature }); 312983"];
10715 [label="symbol.ContainingSymbol 312984"];
10716 [label="get\n            {\n                return UnderlyingSymbol.ContainingSymbol.GetPublicSymbol();\n            } 312985"];
10717 [label="=> _underlying 312986"];
10718 [label="_underlying 312987"];
10719 [label="get { return _containingSymbol; } 312988"];
10720 [label="return _containingSymbol; 312989"];
10721 [label="var includeName = format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeName)\n                              && !(symbol.ContainingSymbol is IMethodSymbol { MethodKind: MethodKind.FunctionPointerSignature }); 312990"];
10722 [label="MethodKind 312991"];
10723 [label="get\n            {\n                switch (_underlying.MethodKind)\n                {\n                    case MethodKind.AnonymousFunction:\n                        return MethodKind.AnonymousFunction;\n                    case MethodKind.Constructor:\n                        return MethodKind.Constructor;\n                    case MethodKind.Conversion:\n                        return MethodKind.Conversion;\n                    case MethodKind.DelegateInvoke:\n                        return MethodKind.DelegateInvoke;\n                    case MethodKind.Destructor:\n                        return MethodKind.Destructor;\n                    case MethodKind.EventAdd:\n                        return MethodKind.EventAdd;\n                    case MethodKind.EventRemove:\n                        return MethodKind.EventRemove;\n                    case MethodKind.ExplicitInterfaceImplementation:\n                        return MethodKind.ExplicitInterfaceImplementation;\n                    case MethodKind.UserDefinedOperator:\n                        return MethodKind.UserDefinedOperator;\n                    case MethodKind.BuiltinOperator:\n                        return MethodKind.BuiltinOperator;\n                    case MethodKind.Ordinary:\n                        return MethodKind.Ordinary;\n                    case MethodKind.PropertyGet:\n                        return MethodKind.PropertyGet;\n                    case MethodKind.PropertySet:\n                        return MethodKind.PropertySet;\n                    case MethodKind.ReducedExtension:\n                        return MethodKind.ReducedExtension;\n                    case MethodKind.StaticConstructor:\n                        return MethodKind.StaticConstructor;\n                    case MethodKind.LocalFunction:\n                        return MethodKind.LocalFunction;\n                    case MethodKind.FunctionPointerSignature:\n                        return MethodKind.FunctionPointerSignature;\n                    default:\n                        throw ExceptionUtilities.UnexpectedValue(_underlying.MethodKind);\n                }\n            } 312992"];
10724 [label="var includeName = format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeName)\n                              && !(symbol.ContainingSymbol is IMethodSymbol { MethodKind: MethodKind.FunctionPointerSignature }); 312993"];
10725 [label="var includeBrackets = format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeOptionalBrackets); 312994"];
10726 [label="var includeBrackets = format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeOptionalBrackets); 312995"];
10727 [label="symbol.IsOptional 312996"];
10728 [label="=> _underlying.IsOptional 312997"];
10729 [label="_underlying.IsOptional 312998"];
10730 [label="get\n            {\n                // DEV10 COMPATIBILITY: Special handling for ParameterArray params\n                //\n                // Ideally we should not need the additional 'isParams' check below\n                // as a ParameterArray param cannot have a default value.\n                // However, for certain cases of overriding this is not true.\n                // See test 'CodeGenTests.NoDefaultForParams_Dev10781558' for an example.\n                // See Roslyn bug 10753 and Dev10 bug 781558 for details.\n                //\n                // To maintain compatibility with Dev10, we allow such code to compile but explicitly\n                // classify a ParameterArray param as a required parameter.\n                //\n                // Also when we call f() where signature of f is void([Optional]params int[] args) \n                // an empty array is created and passed to f.\n                //\n                // We also do not consider ref/out parameters as optional, unless in COM interop scenarios \n                // and only for ref.\n                RefKind refKind;\n                return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport));\n            } 312999"];
10731 [label="RefKind refKind; 313000"];
10732 [label="IsParams 313001"];
10733 [label="get { return false; } 313002"];
10734 [label="return false; 313003"];
10735 [label="return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport)); 313004"];
10736 [label="IsMetadataOptional 313005"];
10737 [label="get { return false; } 313006"];
10738 [label="return false; 313007"];
10739 [label="return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport)); 313008"];
10740 [label="return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport)); 313009"];
10741 [label="if (includeBrackets && symbol.IsOptional)\n            {\n                AddPunctuation(SyntaxKind.OpenBracketToken);\n            } 313010"];
10742 [label="if (includeBrackets && symbol.IsOptional)\n            {\n                AddPunctuation(SyntaxKind.OpenBracketToken);\n            } 313011"];
10743 [label="if (includeType)\n            {\n                AddParameterRefKindIfRequired(symbol.RefKind);\n                AddCustomModifiersIfRequired(symbol.RefCustomModifiers, leadingSpace: false, trailingSpace: true);\n\n                if (symbol.IsParams && format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeParamsRefOut))\n                {\n                    AddKeyword(SyntaxKind.ParamsKeyword);\n                    AddSpace();\n                }\n\n                symbol.Type.Accept(this.NotFirstVisitor);\n                AddCustomModifiersIfRequired(symbol.CustomModifiers, leadingSpace: true, trailingSpace: false);\n            } 313012"];
10744 [label="symbol.RefKind 313013"];
10745 [label="=> _underlying.RefKind 313014"];
10746 [label="_underlying.RefKind 313015"];
10747 [label="get\n            {\n                return _refKind;\n            } 313016"];
10748 [label="return _refKind; 313017"];
10749 [label="AddParameterRefKindIfRequired(symbol.RefKind); 313018"];
10750 [label="AddParameterRefKindIfRequired(symbol.RefKind) 313019"];
10751 [label="param AddParameterRefKindIfRequired(RefKind refKind) 313020"];
10752 [label="param AddParameterRefKindIfRequired(this) 313021"];
10753 [label="if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeParamsRefOut))\n            {\n                switch (refKind)\n                {\n                    case RefKind.Out:\n                        AddKeyword(SyntaxKind.OutKeyword);\n                        AddSpace();\n                        break;\n                    case RefKind.Ref:\n                        AddKeyword(SyntaxKind.RefKeyword);\n                        AddSpace();\n                        break;\n                    case RefKind.In:\n                        AddKeyword(SyntaxKind.InKeyword);\n                        AddSpace();\n                        break;\n                }\n            } 313022"];
10754 [label="if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeParamsRefOut))\n            {\n                switch (refKind)\n                {\n                    case RefKind.Out:\n                        AddKeyword(SyntaxKind.OutKeyword);\n                        AddSpace();\n                        break;\n                    case RefKind.Ref:\n                        AddKeyword(SyntaxKind.RefKeyword);\n                        AddSpace();\n                        break;\n                    case RefKind.In:\n                        AddKeyword(SyntaxKind.InKeyword);\n                        AddSpace();\n                        break;\n                }\n            } 313023"];
10755 [label="switch (refKind)\n                {\n                    case RefKind.Out:\n                        AddKeyword(SyntaxKind.OutKeyword);\n                        AddSpace();\n                        break;\n                    case RefKind.Ref:\n                        AddKeyword(SyntaxKind.RefKeyword);\n                        AddSpace();\n                        break;\n                    case RefKind.In:\n                        AddKeyword(SyntaxKind.InKeyword);\n                        AddSpace();\n                        break;\n                } 313024"];
10756 [label="AddParameterRefKindIfRequired(symbol.RefKind); 313025"];
10757 [label="symbol.RefCustomModifiers 313026"];
10758 [label="get { return _underlying.RefCustomModifiers; } 313027"];
10759 [label="_underlying.RefCustomModifiers 313028"];
10760 [label="get { return ImmutableArray<CustomModifier>.Empty; } 313029"];
10761 [label="return ImmutableArray<CustomModifier>.Empty; 313030"];
10762 [label="return _underlying.RefCustomModifiers; 313031"];
10763 [label="AddCustomModifiersIfRequired(symbol.RefCustomModifiers, leadingSpace: false, trailingSpace: true); 313032"];
10764 [label="AddCustomModifiersIfRequired(symbol.RefCustomModifiers, leadingSpace: false, trailingSpace: true); 313033"];
10765 [label="AddCustomModifiersIfRequired(symbol.RefCustomModifiers, leadingSpace: false, trailingSpace: true) 313034"];
10766 [label="param AddCustomModifiersIfRequired(ImmutableArray<CustomModifier> customModifiers) 313035"];
10767 [label="param AddCustomModifiersIfRequired(bool leadingSpace = false) 313036"];
10768 [label="param AddCustomModifiersIfRequired(bool trailingSpace = true) 313037"];
10769 [label="param AddCustomModifiersIfRequired(this) 313038"];
10770 [label="if (this.format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.IncludeCustomModifiers) && !customModifiers.IsEmpty)\n            {\n                bool first = true;\n                foreach (CustomModifier customModifier in customModifiers)\n                {\n                    if (!first || leadingSpace)\n                    {\n                        AddSpace();\n                    }\n                    first = false;\n\n                    this.builder.Add(CreatePart(InternalSymbolDisplayPartKind.Other, null, customModifier.IsOptional ? IL_KEYWORD_MODOPT : IL_KEYWORD_MODREQ));\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    customModifier.Modifier.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n                if (trailingSpace)\n                {\n                    AddSpace();\n                }\n            } 313039"];
10771 [label="if (this.format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.IncludeCustomModifiers) && !customModifiers.IsEmpty)\n            {\n                bool first = true;\n                foreach (CustomModifier customModifier in customModifiers)\n                {\n                    if (!first || leadingSpace)\n                    {\n                        AddSpace();\n                    }\n                    first = false;\n\n                    this.builder.Add(CreatePart(InternalSymbolDisplayPartKind.Other, null, customModifier.IsOptional ? IL_KEYWORD_MODOPT : IL_KEYWORD_MODREQ));\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    customModifier.Modifier.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n                if (trailingSpace)\n                {\n                    AddSpace();\n                }\n            } 313040"];
10772 [label="if (this.format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.IncludeCustomModifiers) && !customModifiers.IsEmpty)\n            {\n                bool first = true;\n                foreach (CustomModifier customModifier in customModifiers)\n                {\n                    if (!first || leadingSpace)\n                    {\n                        AddSpace();\n                    }\n                    first = false;\n\n                    this.builder.Add(CreatePart(InternalSymbolDisplayPartKind.Other, null, customModifier.IsOptional ? IL_KEYWORD_MODOPT : IL_KEYWORD_MODREQ));\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    customModifier.Modifier.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n                if (trailingSpace)\n                {\n                    AddSpace();\n                }\n            } 313041"];
10773 [label="symbol.IsParams 313042"];
10774 [label="=> _underlying.IsParams 313043"];
10775 [label="_underlying.IsParams 313044"];
10776 [label="get { return false; } 313045"];
10777 [label="return false; 313046"];
10778 [label="if (symbol.IsParams && format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeParamsRefOut))\n                {\n                    AddKeyword(SyntaxKind.ParamsKeyword);\n                    AddSpace();\n                } 313047"];
10779 [label="symbol.Type 313048"];
10780 [label="get\n            {\n                if (_lazyType is null)\n                {\n                    Interlocked.CompareExchange(ref _lazyType, _underlying.TypeWithAnnotations.GetPublicSymbol(), null);\n                }\n\n                return _lazyType;\n            } 313049"];
10781 [label="if (_lazyType is null)\n                {\n                    Interlocked.CompareExchange(ref _lazyType, _underlying.TypeWithAnnotations.GetPublicSymbol(), null);\n                } 313050"];
10782 [label="Interlocked.CompareExchange(ref _lazyType, _underlying.TypeWithAnnotations.GetPublicSymbol(), null); 313051"];
10783 [label="_underlying.TypeWithAnnotations 313052"];
10784 [label="Interlocked.CompareExchange(ref _lazyType, _underlying.TypeWithAnnotations.GetPublicSymbol(), null); 313053"];
10785 [label="_underlying.TypeWithAnnotations.GetPublicSymbol() 313054"];
10786 [label="param GetPublicSymbol(this TypeWithAnnotations type) 313055"];
10787 [label="type.Type 313056"];
10788 [label="=> _extensions?.GetResolvedType(DefaultType) 313057"];
10789 [label="=> defaultType 313058"];
10790 [label="return type.Type?.GetITypeSymbol(type.ToPublicAnnotation()); 313059"];
10791 [label="return type.Type?.GetITypeSymbol(type.ToPublicAnnotation()); 313060"];
10792 [label="type.ToPublicAnnotation() 313061"];
10793 [label="param ToPublicAnnotation(this TypeWithAnnotations type) 313062"];
10794 [label="type.Type 313063"];
10795 [label="=> _extensions?.GetResolvedType(DefaultType) 313064"];
10796 [label="=> defaultType 313065"];
10797 [label="type.NullableAnnotation 313066"];
10798 [label="ToPublicAnnotation(type.Type, type.NullableAnnotation) 313067"];
10799 [label="param ToPublicAnnotation(TypeSymbol? type) 313068"];
10800 [label="param ToPublicAnnotation(NullableAnnotation annotation) 313069"];
10801 [label="Debug.Assert(annotation != NullableAnnotation.Ignored); 313070"];
10802 [label="annotation switch\n            {\n                NullableAnnotation.Annotated => CodeAnalysis.NullableAnnotation.Annotated,\n                NullableAnnotation.NotAnnotated => CodeAnalysis.NullableAnnotation.NotAnnotated,\n\n                // A value type may be oblivious or not annotated depending on whether the type reference\n                // is from source or metadata. (Binding using the #nullable context only when setting the annotation\n                // to avoid checking IsValueType early.) The annotation is normalized here in the public API.\n                NullableAnnotation.Oblivious when type?.IsValueType == true => CodeAnalysis.NullableAnnotation.NotAnnotated,\n                NullableAnnotation.Oblivious => CodeAnalysis.NullableAnnotation.None,\n\n                NullableAnnotation.Ignored => CodeAnalysis.NullableAnnotation.None,\n\n                _ => throw ExceptionUtilities.UnexpectedValue(annotation)\n            } 313071"];
10803 [label=".IsValueType 313072"];
10804 [label="get\n            {\n                var kind = TypeKind;\n                return kind == TypeKind.Struct || kind == TypeKind.Enum;\n            } 313073"];
10805 [label="TypeKind 313074"];
10806 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 313075"];
10807 [label="var kind = TypeKind; 313076"];
10808 [label="return kind == TypeKind.Struct || kind == TypeKind.Enum; 313077"];
10809 [label="when type?.IsValueType == true 313078"];
10810 [label="return type.Type?.GetITypeSymbol(type.ToPublicAnnotation()); 313079"];
10811 [label=".GetITypeSymbol(type.ToPublicAnnotation()) 313080"];
10812 [label="param GetITypeSymbol(CodeAnalysis.NullableAnnotation nullableAnnotation) 313081"];
10813 [label="param GetITypeSymbol(this) 313082"];
10814 [label="DefaultNullableAnnotation 313083"];
10815 [label="=> NullableAnnotationExtensions.ToPublicAnnotation(this, NullableAnnotation.Oblivious) 313084"];
10816 [label="this 313085"];
10817 [label="NullableAnnotation.Oblivious 313086"];
10818 [label="param ToPublicAnnotation(TypeSymbol? type) 313087"];
10819 [label="param ToPublicAnnotation(NullableAnnotation annotation) 313088"];
10820 [label="Debug.Assert(annotation != NullableAnnotation.Ignored); 313089"];
10821 [label="annotation switch\n            {\n                NullableAnnotation.Annotated => CodeAnalysis.NullableAnnotation.Annotated,\n                NullableAnnotation.NotAnnotated => CodeAnalysis.NullableAnnotation.NotAnnotated,\n\n                // A value type may be oblivious or not annotated depending on whether the type reference\n                // is from source or metadata. (Binding using the #nullable context only when setting the annotation\n                // to avoid checking IsValueType early.) The annotation is normalized here in the public API.\n                NullableAnnotation.Oblivious when type?.IsValueType == true => CodeAnalysis.NullableAnnotation.NotAnnotated,\n                NullableAnnotation.Oblivious => CodeAnalysis.NullableAnnotation.None,\n\n                NullableAnnotation.Ignored => CodeAnalysis.NullableAnnotation.None,\n\n                _ => throw ExceptionUtilities.UnexpectedValue(annotation)\n            } 313090"];
10822 [label=".IsValueType 313091"];
10823 [label="get\n            {\n                var kind = TypeKind;\n                return kind == TypeKind.Struct || kind == TypeKind.Enum;\n            } 313092"];
10824 [label="TypeKind 313093"];
10825 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 313094"];
10826 [label="var kind = TypeKind; 313095"];
10827 [label="return kind == TypeKind.Struct || kind == TypeKind.Enum; 313096"];
10828 [label="when type?.IsValueType == true 313097"];
10829 [label="if (nullableAnnotation == DefaultNullableAnnotation)\n            {\n                return (ITypeSymbol)this.ISymbol;\n            } 313098"];
10830 [label="if (nullableAnnotation == DefaultNullableAnnotation)\n            {\n                return (ITypeSymbol)this.ISymbol;\n            } 313099"];
10831 [label="this.ISymbol 313100"];
10832 [label="get\n            {\n                if (_lazyISymbol is null)\n                {\n                    Interlocked.CompareExchange(ref _lazyISymbol, CreateISymbol(), null);\n                }\n\n                return _lazyISymbol;\n            } 313101"];
10833 [label="=> NullableAnnotationExtensions.ToPublicAnnotation(this, NullableAnnotation.Oblivious) 313102"];
10834 [label="this 313103"];
10835 [label="NullableAnnotation.Oblivious 313104"];
10836 [label="param ToPublicAnnotation(TypeSymbol? type) 313105"];
10837 [label="param ToPublicAnnotation(NullableAnnotation annotation) 313106"];
10838 [label="Debug.Assert(annotation != NullableAnnotation.Ignored); 313107"];
10839 [label="annotation switch\n            {\n                NullableAnnotation.Annotated => CodeAnalysis.NullableAnnotation.Annotated,\n                NullableAnnotation.NotAnnotated => CodeAnalysis.NullableAnnotation.NotAnnotated,\n\n                // A value type may be oblivious or not annotated depending on whether the type reference\n                // is from source or metadata. (Binding using the #nullable context only when setting the annotation\n                // to avoid checking IsValueType early.) The annotation is normalized here in the public API.\n                NullableAnnotation.Oblivious when type?.IsValueType == true => CodeAnalysis.NullableAnnotation.NotAnnotated,\n                NullableAnnotation.Oblivious => CodeAnalysis.NullableAnnotation.None,\n\n                NullableAnnotation.Ignored => CodeAnalysis.NullableAnnotation.None,\n\n                _ => throw ExceptionUtilities.UnexpectedValue(annotation)\n            } 313108"];
10840 [label=".IsValueType 313109"];
10841 [label="get\n            {\n                var kind = TypeKind;\n                return kind == TypeKind.Struct || kind == TypeKind.Enum;\n            } 313110"];
10842 [label="TypeKind 313111"];
10843 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 313112"];
10844 [label="var kind = TypeKind; 313113"];
10845 [label="return kind == TypeKind.Struct || kind == TypeKind.Enum; 313114"];
10846 [label="when type?.IsValueType == true 313115"];
10847 [label="param NamespaceOrTypeSymbol(this) 313116"];
10848 [label="param Symbol(this) 313117"];
10849 [label="protected CodeAnalysis.NullableAnnotation NullableAnnotation { get; } 313118"];
10850 [label="_underlying 313119"];
10851 [label="Debug.Assert(underlying is object); 313120"];
10852 [label="Debug.Assert(!underlying.IsErrorType()); 313121"];
10853 [label="underlying.IsErrorType() 313122"];
10854 [label="param IsErrorType(this TypeSymbol type) 313123"];
10855 [label="RoslynDebug.Assert((object)type != null); 313124"];
10856 [label="RoslynDebug.Assert((object)type != null); 313125"];
10857 [label="type.Kind 313126"];
10858 [label="get\n            {\n                return SymbolKind.NamedType;\n            } 313127"];
10859 [label="return type.Kind == SymbolKind.ErrorType; 313128"];
10860 [label="Debug.Assert(!underlying.IsErrorType()); 313129"];
10861 [label="return (ITypeSymbol)this.ISymbol; 313130"];
10862 [label="Interlocked.CompareExchange(ref _lazyType, _underlying.TypeWithAnnotations.GetPublicSymbol(), null); 313131"];
10863 [label="return _lazyType; 313132"];
10864 [label="symbol.Type.Accept(this.NotFirstVisitor); 313133"];
10865 [label="symbol.Type.Accept(this.NotFirstVisitor); 313134"];
10866 [label="symbol.Type.Accept(this.NotFirstVisitor) 313135"];
10867 [label="param Accept(SymbolVisitor visitor) 313136"];
10868 [label="param Accept(this) 313137"];
10869 [label="if (this.IsMinimizing && TryAddAlias(symbol, builder))\n            {\n                return;\n            } 313138"];
10870 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseSpecialTypes) ||\n                (symbol.IsNativeIntegerType && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseNativeIntegerUnderlyingType)))\n            {\n                if (AddSpecialTypeKeyword(symbol))\n                {\n                    //if we're using special type keywords and this is a special type, then no other work is required\n                    return;\n                }\n            } 313139"];
10871 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseSpecialTypes) ||\n                (symbol.IsNativeIntegerType && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseNativeIntegerUnderlyingType)))\n            {\n                if (AddSpecialTypeKeyword(symbol))\n                {\n                    //if we're using special type keywords and this is a special type, then no other work is required\n                    return;\n                }\n            } 313140"];
10872 [label="symbol.IsNativeIntegerType 313141"];
10873 [label="=> UnderlyingTypeSymbol.IsNativeIntegerType 313142"];
10874 [label="UnderlyingTypeSymbol 313143"];
10875 [label="=> _underlying 313144"];
10876 [label="UnderlyingTypeSymbol.IsNativeIntegerType 313145"];
10877 [label="=> false 313146"];
10878 [label="false 313147"];
10879 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseSpecialTypes) ||\n                (symbol.IsNativeIntegerType && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseNativeIntegerUnderlyingType)))\n            {\n                if (AddSpecialTypeKeyword(symbol))\n                {\n                    //if we're using special type keywords and this is a special type, then no other work is required\n                    return;\n                }\n            } 313148"];
10880 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.UseSpecialTypes) ||\n                (symbol.IsNativeIntegerType && !format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseNativeIntegerUnderlyingType)))\n            {\n                if (AddSpecialTypeKeyword(symbol))\n                {\n                    //if we're using special type keywords and this is a special type, then no other work is required\n                    return;\n                }\n            } 313149"];
10881 [label="symbol.IsTupleType 313150"];
10882 [label="=> UnderlyingTypeSymbol.IsTupleType 313151"];
10883 [label="UnderlyingTypeSymbol 313152"];
10884 [label="=> _underlying 313153"];
10885 [label="UnderlyingTypeSymbol.IsTupleType 313154"];
10886 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 313155"];
10887 [label="_ 313156"];
10888 [label="tupleCardinality: out _ 313157"];
10889 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 313158"];
10890 [label="param IsTupleTypeOfCardinality(this) 313159"];
10891 [label="IsUnboundGenericType 313160"];
10892 [label="get\n            {\n                return false;\n            } 313161"];
10893 [label="return false; 313162"];
10894 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313163"];
10895 [label="ContainingSymbol 313164"];
10896 [label="get\n            {\n                return _container;\n            } 313165"];
10897 [label="return _container; 313166"];
10898 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313167"];
10899 [label=".Kind 313168"];
10900 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 313169"];
10901 [label="return SymbolKind.Namespace; 313170"];
10902 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313171"];
10903 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313172"];
10904 [label="ContainingNamespace 313173"];
10905 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 313174"];
10906 [label="get\n            {\n                return _container;\n            } 313175"];
10907 [label="return _container; 313176"];
10908 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313177"];
10909 [label="ContainingNamespace.ContainingNamespace 313178"];
10910 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 313179"];
10911 [label=".IsGlobalNamespace 313180"];
10912 [label="get\n            {\n                return true;\n            } 313181"];
10913 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313182"];
10914 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313183"];
10915 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313184"];
10916 [label="Name 313185"];
10917 [label="get\n            {\n                return _name;\n            } 313186"];
10918 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313187"];
10919 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313188"];
10920 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313189"];
10921 [label="tupleCardinality = 0; 313190"];
10922 [label="if (this.IsMinimizing || (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol)))\n            {\n                MinimallyQualify(symbol);\n                return;\n            } 313191"];
10923 [label="if (this.IsMinimizing || (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol)))\n            {\n                MinimallyQualify(symbol);\n                return;\n            } 313192"];
10924 [label="AddTypeKind(symbol); 313193"];
10925 [label="AddTypeKind(symbol) 313194"];
10926 [label="param AddTypeKind(INamedTypeSymbol symbol) 313195"];
10927 [label="param AddTypeKind(this) 313196"];
10928 [label="if (isFirstSymbolVisited && format.KindOptions.IncludesOption(SymbolDisplayKindOptions.IncludeTypeKeyword))\n            {\n                if (symbol.IsAnonymousType)\n                {\n                    builder.Add(new SymbolDisplayPart(SymbolDisplayPartKind.AnonymousTypeIndicator, null, 'AnonymousType'));\n                    AddSpace();\n                }\n                else if (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol))\n                {\n                    builder.Add(new SymbolDisplayPart(SymbolDisplayPartKind.AnonymousTypeIndicator, null, 'Tuple'));\n                    AddSpace();\n                }\n                else\n                {\n                    switch (symbol.TypeKind)\n                    {\n                        case TypeKind.Class when symbol.IsRecord:\n                            AddKeyword(SyntaxKind.RecordKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Module:\n                        case TypeKind.Class:\n                            AddKeyword(SyntaxKind.ClassKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Enum:\n                            AddKeyword(SyntaxKind.EnumKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Delegate:\n                            AddKeyword(SyntaxKind.DelegateKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Interface:\n                            AddKeyword(SyntaxKind.InterfaceKeyword);\n                            AddSpace();\n                            break;\n\n                        case TypeKind.Struct:\n                            if (symbol.IsReadOnly)\n                            {\n                                AddKeyword(SyntaxKind.ReadOnlyKeyword);\n                                AddSpace();\n                            }\n\n                            if (symbol.IsRefLikeType)\n                            {\n                                AddKeyword(SyntaxKind.RefKeyword);\n                                AddSpace();\n                            }\n\n                            AddKeyword(SyntaxKind.StructKeyword);\n                            AddSpace();\n                            break;\n                    }\n                }\n            } 313197"];
10929 [label="AddTypeKind(symbol); 313198"];
10930 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var invokeMethod = symbol.DelegateInvokeMethod;\n                    if (invokeMethod.ReturnsByRef)\n                    {\n                        AddRefIfRequired();\n                    }\n                    else if (invokeMethod.ReturnsByRefReadonly)\n                    {\n                        AddRefReadonlyIfRequired();\n                    }\n\n                    if (invokeMethod.ReturnsVoid)\n                    {\n                        AddKeyword(SyntaxKind.VoidKeyword);\n                    }\n                    else\n                    {\n                        AddReturnType(symbol.DelegateInvokeMethod);\n                    }\n\n                    AddSpace();\n                }\n            } 313199"];
10931 [label="CanShowDelegateSignature(symbol) 313200"];
10932 [label="param CanShowDelegateSignature(INamedTypeSymbol symbol) 313201"];
10933 [label="param CanShowDelegateSignature(this) 313202"];
10934 [label="return\n                isFirstSymbolVisited &&\n                symbol.TypeKind == TypeKind.Delegate &&\n                format.DelegateStyle != SymbolDisplayDelegateStyle.NameOnly &&\n                symbol.DelegateInvokeMethod != null; 313203"];
10935 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var invokeMethod = symbol.DelegateInvokeMethod;\n                    if (invokeMethod.ReturnsByRef)\n                    {\n                        AddRefIfRequired();\n                    }\n                    else if (invokeMethod.ReturnsByRefReadonly)\n                    {\n                        AddRefReadonlyIfRequired();\n                    }\n\n                    if (invokeMethod.ReturnsVoid)\n                    {\n                        AddKeyword(SyntaxKind.VoidKeyword);\n                    }\n                    else\n                    {\n                        AddReturnType(symbol.DelegateInvokeMethod);\n                    }\n\n                    AddSpace();\n                }\n            } 313204"];
10936 [label="get\n            {\n                return _container;\n            } 313205"];
10937 [label="return _container; 313206"];
10938 [label="var containingSymbol = symbol.ContainingSymbol; 313207"];
10939 [label="if (ShouldVisitNamespace(containingSymbol))\n            {\n                var namespaceSymbol = (INamespaceSymbol)containingSymbol;\n                var shouldSkip = namespaceSymbol.IsGlobalNamespace && symbol.TypeKind == TypeKind.Error;\n\n                if (!shouldSkip)\n                {\n                    namespaceSymbol.Accept(this.NotFirstVisitor);\n                    AddPunctuation(namespaceSymbol.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                }\n            } 313208"];
10940 [label="ShouldVisitNamespace(containingSymbol) 313209"];
10941 [label="param ShouldVisitNamespace(ISymbol containingSymbol) 313210"];
10942 [label="param ShouldVisitNamespace(this) 313211"];
10943 [label="var namespaceSymbol = containingSymbol as INamespaceSymbol; 313212"];
10944 [label="if (namespaceSymbol == null)\n            {\n                return false;\n            } 313213"];
10945 [label="if (namespaceSymbol == null)\n            {\n                return false;\n            } 313214"];
10946 [label="if (format.TypeQualificationStyle != SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces)\n            {\n                return false;\n            } 313215"];
10947 [label="namespaceSymbol.IsGlobalNamespace 313216"];
10948 [label="=> _underlying.IsGlobalNamespace 313217"];
10949 [label="get\n            {\n                return false;\n            } 313218"];
10950 [label="return\n                !namespaceSymbol.IsGlobalNamespace ||\n                format.GlobalNamespaceStyle == SymbolDisplayGlobalNamespaceStyle.Included; 313219"];
10951 [label="if (ShouldVisitNamespace(containingSymbol))\n            {\n                var namespaceSymbol = (INamespaceSymbol)containingSymbol;\n                var shouldSkip = namespaceSymbol.IsGlobalNamespace && symbol.TypeKind == TypeKind.Error;\n\n                if (!shouldSkip)\n                {\n                    namespaceSymbol.Accept(this.NotFirstVisitor);\n                    AddPunctuation(namespaceSymbol.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                }\n            } 313220"];
10952 [label="var namespaceSymbol = (INamespaceSymbol)containingSymbol; 313221"];
10953 [label="namespaceSymbol.IsGlobalNamespace 313222"];
10954 [label="=> _underlying.IsGlobalNamespace 313223"];
10955 [label="get\n            {\n                return false;\n            } 313224"];
10956 [label="var shouldSkip = namespaceSymbol.IsGlobalNamespace && symbol.TypeKind == TypeKind.Error; 313225"];
10957 [label="if (!shouldSkip)\n                {\n                    namespaceSymbol.Accept(this.NotFirstVisitor);\n                    AddPunctuation(namespaceSymbol.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                } 313226"];
10958 [label="namespaceSymbol.Accept(this.NotFirstVisitor); 313227"];
10959 [label="namespaceSymbol.Accept(this.NotFirstVisitor) 313228"];
10960 [label="param Accept(SymbolVisitor visitor) 313229"];
10961 [label="param Accept(this) 313230"];
10962 [label="if (this.IsMinimizing)\n            {\n                if (TryAddAlias(symbol, builder))\n                {\n                    return;\n                }\n\n                MinimallyQualify(symbol);\n                return;\n            } 313231"];
10963 [label="if (isFirstSymbolVisited && format.KindOptions.IncludesOption(SymbolDisplayKindOptions.IncludeNamespaceKeyword))\n            {\n                AddKeyword(SyntaxKind.NamespaceKeyword);\n                AddSpace();\n            } 313232"];
10964 [label="=> UnderlyingSymbol.ContainingNamespace.GetPublicSymbol() 313233"];
10965 [label="var containingNamespace = symbol.ContainingNamespace; 313234"];
10966 [label="if (ShouldVisitNamespace(containingNamespace))\n                {\n                    containingNamespace.Accept(this.NotFirstVisitor);\n                    AddPunctuation(containingNamespace.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                } 313235"];
10967 [label="ShouldVisitNamespace(containingNamespace) 313236"];
10968 [label="param ShouldVisitNamespace(ISymbol containingSymbol) 313237"];
10969 [label="param ShouldVisitNamespace(this) 313238"];
10970 [label="var namespaceSymbol = containingSymbol as INamespaceSymbol; 313239"];
10971 [label="if (namespaceSymbol == null)\n            {\n                return false;\n            } 313240"];
10972 [label="if (namespaceSymbol == null)\n            {\n                return false;\n            } 313241"];
10973 [label="if (format.TypeQualificationStyle != SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces)\n            {\n                return false;\n            } 313242"];
10974 [label="=> _underlying.IsGlobalNamespace 313243"];
10975 [label="get\n            {\n                return true;\n            } 313244"];
10976 [label="if (ShouldVisitNamespace(containingNamespace))\n                {\n                    containingNamespace.Accept(this.NotFirstVisitor);\n                    AddPunctuation(containingNamespace.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken);\n                } 313245"];
10977 [label="=> _underlying.IsGlobalNamespace 313246"];
10978 [label="get\n            {\n                return false;\n            } 313247"];
10979 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 313248"];
10980 [label="namespaceSymbol.Accept(this.NotFirstVisitor); 313249"];
10981 [label="namespaceSymbol.IsGlobalNamespace 313250"];
10982 [label="=> _underlying.IsGlobalNamespace 313251"];
10983 [label="get\n            {\n                return false;\n            } 313252"];
10984 [label="AddPunctuation(namespaceSymbol.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken); 313253"];
10985 [label="AddPunctuation(namespaceSymbol.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken) 313254"];
10986 [label="param AddPunctuation(SyntaxKind punctuationKind) 313255"];
10987 [label="param AddPunctuation(this) 313256"];
10988 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 313257"];
10989 [label="AddPunctuation(namespaceSymbol.IsGlobalNamespace ? SyntaxKind.ColonColonToken : SyntaxKind.DotToken); 313258"];
10990 [label="if (format.TypeQualificationStyle == SymbolDisplayTypeQualificationStyle.NameAndContainingTypes ||\n                format.TypeQualificationStyle == SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces)\n            {\n                if (IncludeNamedType(symbol.ContainingType))\n                {\n                    symbol.ContainingType.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.DotToken);\n                }\n            } 313259"];
10991 [label="symbol.ContainingType 313260"];
10992 [label="get\n            {\n                return _container as NamedTypeSymbol;\n            } 313261"];
10993 [label="return _container as NamedTypeSymbol; 313262"];
10994 [label="if (IncludeNamedType(symbol.ContainingType))\n                {\n                    symbol.ContainingType.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.DotToken);\n                } 313263"];
10995 [label="IncludeNamedType(symbol.ContainingType) 313264"];
10996 [label="param IncludeNamedType(INamedTypeSymbol namedType) 313265"];
10997 [label="param IncludeNamedType(this) 313266"];
10998 [label="if (namedType is null)\n            {\n                return false;\n            } 313267"];
10999 [label="return false; 313268"];
11000 [label="symbol.IsAnonymousType 313269"];
11001 [label="=> UnderlyingTypeSymbol.IsAnonymousType 313270"];
11002 [label="UnderlyingTypeSymbol 313271"];
11003 [label="=> _underlying 313272"];
11004 [label="_underlying 313273"];
11005 [label="UnderlyingTypeSymbol.IsAnonymousType 313274"];
11006 [label="get\n            {\n                return false;\n            } 313275"];
11007 [label="return false; 313276"];
11008 [label="if (symbol.IsAnonymousType)\n            {\n                AddAnonymousTypeName(symbol);\n                return;\n            }\n            else if (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol))\n            {\n                AddTupleTypeName(symbol);\n                return;\n            } 313277"];
11009 [label="symbol.IsTupleType 313278"];
11010 [label="=> UnderlyingTypeSymbol.IsTupleType 313279"];
11011 [label="UnderlyingTypeSymbol 313280"];
11012 [label="=> _underlying 313281"];
11013 [label="_underlying 313282"];
11014 [label="UnderlyingTypeSymbol.IsTupleType 313283"];
11015 [label="=> IsTupleTypeOfCardinality(tupleCardinality: out _) 313284"];
11016 [label="_ 313285"];
11017 [label="tupleCardinality: out _ 313286"];
11018 [label="param IsTupleTypeOfCardinality(out int tupleCardinality) 313287"];
11019 [label="param IsTupleTypeOfCardinality(this) 313288"];
11020 [label="IsUnboundGenericType 313289"];
11021 [label="get\n            {\n                return false;\n            } 313290"];
11022 [label="return false; 313291"];
11023 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313292"];
11024 [label="ContainingSymbol 313293"];
11025 [label="get\n            {\n                return _container;\n            } 313294"];
11026 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313295"];
11027 [label=".Kind 313296"];
11028 [label="get\n            {\n                return SymbolKind.Namespace;\n            } 313297"];
11029 [label="return SymbolKind.Namespace; 313298"];
11030 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313299"];
11031 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313300"];
11032 [label="ContainingNamespace 313301"];
11033 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 313302"];
11034 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313303"];
11035 [label="ContainingNamespace.ContainingNamespace 313304"];
11036 [label="get\n            {\n                for (var container = this.ContainingSymbol; (object)container != null; container = container.ContainingSymbol)\n                {\n                    var ns = container as NamespaceSymbol;\n                    if ((object)ns != null)\n                    {\n                        return ns;\n                    }\n                }\n\n                return null;\n            } 313305"];
11037 [label=".IsGlobalNamespace 313306"];
11038 [label="get\n            {\n                return true;\n            } 313307"];
11039 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313308"];
11040 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313309"];
11041 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313310"];
11042 [label="Name 313311"];
11043 [label="get\n            {\n                return _name;\n            } 313312"];
11044 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313313"];
11045 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313314"];
11046 [label="if (!IsUnboundGenericType &&\n                ContainingSymbol?.Kind == SymbolKind.Namespace &&\n                ContainingNamespace.ContainingNamespace?.IsGlobalNamespace == true &&\n                Name == ValueTupleTypeName &&\n                ContainingNamespace.Name == MetadataHelpers.SystemString)\n            {\n                int arity = Arity;\n\n                if (arity >= 0 && arity < ValueTupleRestPosition)\n                {\n                    tupleCardinality = arity;\n                    return true;\n                }\n                else if (arity == ValueTupleRestPosition && !IsDefinition)\n                {\n                    // Skip through 'Rest' extensions\n                    TypeSymbol typeToCheck = this;\n                    int levelsOfNesting = 0;\n\n                    do\n                    {\n                        levelsOfNesting++;\n                        typeToCheck = ((NamedTypeSymbol)typeToCheck).TypeArgumentsWithAnnotationsNoUseSiteDiagnostics[ValueTupleRestPosition - 1].Type;\n                    }\n                    while (Equals(typeToCheck.OriginalDefinition, this.OriginalDefinition, TypeCompareKind.ConsiderEverything) && !typeToCheck.IsDefinition);\n\n                    arity = typeToCheck is NamedTypeSymbol ? ((NamedTypeSymbol)typeToCheck).Arity : 0;\n\n                    if (arity > 0 && arity < ValueTupleRestPosition && ((NamedTypeSymbol)typeToCheck).IsTupleTypeOfCardinality(out tupleCardinality))\n                    {\n                        Debug.Assert(tupleCardinality < ValueTupleRestPosition);\n                        tupleCardinality += (ValueTupleRestPosition - 1) * levelsOfNesting;\n                        return true;\n                    }\n                }\n            } 313315"];
11047 [label="tupleCardinality = 0; 313316"];
11048 [label="if (symbol.IsTupleType && !ShouldDisplayAsValueTuple(symbol))\n            {\n                AddTupleTypeName(symbol);\n                return;\n            } 313317"];
11049 [label="(symbol is Symbols.PublicModel.NamedTypeSymbol) 313318"];
11050 [label="((Symbols.PublicModel.NamedTypeSymbol)symbol).UnderlyingNamedTypeSymbol 313319"];
11051 [label="_underlying 313320"];
11052 [label="NamedTypeSymbol underlyingTypeSymbol = (symbol is Symbols.PublicModel.NamedTypeSymbol) ? ((Symbols.PublicModel.NamedTypeSymbol)symbol).UnderlyingNamedTypeSymbol : null; 313321"];
11053 [label="var illegalGenericInstantiationSymbol = underlyingTypeSymbol as NoPiaIllegalGenericInstantiationSymbol; 313322"];
11054 [label="if ((object)illegalGenericInstantiationSymbol != null)\n            {\n                symbol = illegalGenericInstantiationSymbol.UnderlyingSymbol.GetPublicSymbol();\n            }\n            else\n            {\n                var ambiguousCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaAmbiguousCanonicalTypeSymbol;\n\n                if ((object)ambiguousCanonicalTypeSymbol != null)\n                {\n                    symbol = ambiguousCanonicalTypeSymbol.FirstCandidate.GetPublicSymbol();\n                }\n                else\n                {\n                    var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol;\n\n                    if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    }\n                }\n            } 313323"];
11055 [label="if ((object)illegalGenericInstantiationSymbol != null)\n            {\n                symbol = illegalGenericInstantiationSymbol.UnderlyingSymbol.GetPublicSymbol();\n            }\n            else\n            {\n                var ambiguousCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaAmbiguousCanonicalTypeSymbol;\n\n                if ((object)ambiguousCanonicalTypeSymbol != null)\n                {\n                    symbol = ambiguousCanonicalTypeSymbol.FirstCandidate.GetPublicSymbol();\n                }\n                else\n                {\n                    var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol;\n\n                    if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    }\n                }\n            } 313324"];
11056 [label="var ambiguousCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaAmbiguousCanonicalTypeSymbol; 313325"];
11057 [label="if ((object)ambiguousCanonicalTypeSymbol != null)\n                {\n                    symbol = ambiguousCanonicalTypeSymbol.FirstCandidate.GetPublicSymbol();\n                }\n                else\n                {\n                    var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol;\n\n                    if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    }\n                } 313326"];
11058 [label="if ((object)ambiguousCanonicalTypeSymbol != null)\n                {\n                    symbol = ambiguousCanonicalTypeSymbol.FirstCandidate.GetPublicSymbol();\n                }\n                else\n                {\n                    var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol;\n\n                    if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    }\n                } 313327"];
11059 [label="var missingCanonicalTypeSymbol = underlyingTypeSymbol as NoPiaMissingCanonicalTypeSymbol; 313328"];
11060 [label="if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    } 313329"];
11061 [label="if ((object)missingCanonicalTypeSymbol != null)\n                    {\n                        symbolName = missingCanonicalTypeSymbol.FullTypeName;\n                    } 313330"];
11062 [label="symbol.TypeKind 313331"];
11063 [label="get\n            {\n                return UnderlyingTypeSymbol.TypeKind;\n            } 313332"];
11064 [label="UnderlyingTypeSymbol 313333"];
11065 [label="=> _underlying 313334"];
11066 [label="_underlying 313335"];
11067 [label="return UnderlyingTypeSymbol.TypeKind; 313336"];
11068 [label="UnderlyingTypeSymbol.TypeKind 313337"];
11069 [label="get\n            {\n                TypeKind result = _lazyKind;\n\n                if (result == TypeKind.Unknown)\n                {\n                    if (_flags.IsInterface())\n                    {\n                        result = TypeKind.Interface;\n                    }\n                    else\n                    {\n                        TypeSymbol @base = GetDeclaredBaseType(skipTransformsIfNecessary: true);\n\n                        result = TypeKind.Class;\n\n                        if ((object)@base != null)\n                        {\n                            SpecialType baseCorTypeId = @base.SpecialType;\n\n                            switch (baseCorTypeId)\n                            {\n                                case SpecialType.System_Enum:\n                                    // Enum\n                                    result = TypeKind.Enum;\n                                    break;\n\n                                case SpecialType.System_MulticastDelegate:\n                                    // Delegate\n                                    result = TypeKind.Delegate;\n                                    break;\n\n                                case SpecialType.System_ValueType:\n                                    // System.Enum is the only class that derives from ValueType\n                                    if (this.SpecialType != SpecialType.System_Enum)\n                                    {\n                                        // Struct\n                                        result = TypeKind.Struct;\n                                    }\n                                    break;\n                            }\n                        }\n                    }\n\n                    _lazyKind = result;\n                }\n\n                return result;\n            } 313338"];
11070 [label="return SymbolDisplayPartKind.StructName; 313339"];
11071 [label="param RemoveAttributeSufficeIfNecessary(INamedTypeSymbol symbol) 313340"];
11072 [label="param RemoveAttributeSufficeIfNecessary(this) 313341"];
11073 [label="if (this.IsMinimizing &&\n                format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.RemoveAttributeSuffix) &&\n                semanticModelOpt.Compilation.IsAttributeType(symbol))\n            {\n                string nameWithoutAttributeSuffix;\n                if (symbolName.TryGetWithoutAttributeSuffix(out nameWithoutAttributeSuffix))\n                {\n                    var token = SyntaxFactory.ParseToken(nameWithoutAttributeSuffix);\n                    if (token.IsKind(SyntaxKind.IdentifierToken))\n                    {\n                        symbolName = nameWithoutAttributeSuffix;\n                    }\n                }\n            } 313342"];
11074 [label="if (format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseArityForGenericTypes))\n            {\n                // Only the compiler can set the internal option and the compiler doesn't use other implementations of INamedTypeSymbol.\n                if (underlyingTypeSymbol?.MangleName == true)\n                {\n                    Debug.Assert(symbol.Arity > 0);\n                    builder.Add(CreatePart(InternalSymbolDisplayPartKind.Arity, null,\n                        MetadataHelpers.GetAritySuffix(symbol.Arity)));\n                }\n            }\n            else if (symbol.Arity > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                // It would be nice to handle VB symbols too, but it's not worth the effort.\n                if (underlyingTypeSymbol is UnsupportedMetadataTypeSymbol || underlyingTypeSymbol is MissingMetadataTypeSymbol || symbol.IsUnboundGenericType)\n                {\n                    AddPunctuation(SyntaxKind.LessThanToken);\n                    for (int i = 0; i < symbol.Arity - 1; i++)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                    }\n\n                    AddPunctuation(SyntaxKind.GreaterThanToken);\n                }\n                else\n                {\n                    ImmutableArray<ImmutableArray<CustomModifier>> modifiers = GetTypeArgumentsModifiers(underlyingTypeSymbol);\n                    AddTypeArguments(symbol, modifiers);\n\n                    AddDelegateParameters(symbol);\n\n                    // TODO: do we want to skip these if we're being visited as a containing type?\n                    AddTypeParameterConstraints(symbol.TypeArguments);\n                }\n            }\n            else\n            {\n                AddDelegateParameters(symbol);\n            } 313343"];
11075 [label="if (format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.UseArityForGenericTypes))\n            {\n                // Only the compiler can set the internal option and the compiler doesn't use other implementations of INamedTypeSymbol.\n                if (underlyingTypeSymbol?.MangleName == true)\n                {\n                    Debug.Assert(symbol.Arity > 0);\n                    builder.Add(CreatePart(InternalSymbolDisplayPartKind.Arity, null,\n                        MetadataHelpers.GetAritySuffix(symbol.Arity)));\n                }\n            }\n            else if (symbol.Arity > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                // It would be nice to handle VB symbols too, but it's not worth the effort.\n                if (underlyingTypeSymbol is UnsupportedMetadataTypeSymbol || underlyingTypeSymbol is MissingMetadataTypeSymbol || symbol.IsUnboundGenericType)\n                {\n                    AddPunctuation(SyntaxKind.LessThanToken);\n                    for (int i = 0; i < symbol.Arity - 1; i++)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                    }\n\n                    AddPunctuation(SyntaxKind.GreaterThanToken);\n                }\n                else\n                {\n                    ImmutableArray<ImmutableArray<CustomModifier>> modifiers = GetTypeArgumentsModifiers(underlyingTypeSymbol);\n                    AddTypeArguments(symbol, modifiers);\n\n                    AddDelegateParameters(symbol);\n\n                    // TODO: do we want to skip these if we're being visited as a containing type?\n                    AddTypeParameterConstraints(symbol.TypeArguments);\n                }\n            }\n            else\n            {\n                AddDelegateParameters(symbol);\n            } 313344"];
11076 [label="symbol.Arity 313345"];
11077 [label="get\n            {\n                return UnderlyingNamedTypeSymbol.Arity;\n            } 313346"];
11078 [label="UnderlyingNamedTypeSymbol 313347"];
11079 [label="=> _underlying 313348"];
11080 [label="return UnderlyingNamedTypeSymbol.Arity; 313349"];
11081 [label="UnderlyingNamedTypeSymbol.Arity 313350"];
11082 [label="get\n                {\n                    return 0;\n                } 313351"];
11083 [label="return UnderlyingNamedTypeSymbol.Arity; 313352"];
11084 [label="if (symbol.Arity > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                // It would be nice to handle VB symbols too, but it's not worth the effort.\n                if (underlyingTypeSymbol is UnsupportedMetadataTypeSymbol || underlyingTypeSymbol is MissingMetadataTypeSymbol || symbol.IsUnboundGenericType)\n                {\n                    AddPunctuation(SyntaxKind.LessThanToken);\n                    for (int i = 0; i < symbol.Arity - 1; i++)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                    }\n\n                    AddPunctuation(SyntaxKind.GreaterThanToken);\n                }\n                else\n                {\n                    ImmutableArray<ImmutableArray<CustomModifier>> modifiers = GetTypeArgumentsModifiers(underlyingTypeSymbol);\n                    AddTypeArguments(symbol, modifiers);\n\n                    AddDelegateParameters(symbol);\n\n                    // TODO: do we want to skip these if we're being visited as a containing type?\n                    AddTypeParameterConstraints(symbol.TypeArguments);\n                }\n            }\n            else\n            {\n                AddDelegateParameters(symbol);\n            } 313353"];
11085 [label="if (symbol.Arity > 0 && format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeParameters))\n            {\n                // It would be nice to handle VB symbols too, but it's not worth the effort.\n                if (underlyingTypeSymbol is UnsupportedMetadataTypeSymbol || underlyingTypeSymbol is MissingMetadataTypeSymbol || symbol.IsUnboundGenericType)\n                {\n                    AddPunctuation(SyntaxKind.LessThanToken);\n                    for (int i = 0; i < symbol.Arity - 1; i++)\n                    {\n                        AddPunctuation(SyntaxKind.CommaToken);\n                    }\n\n                    AddPunctuation(SyntaxKind.GreaterThanToken);\n                }\n                else\n                {\n                    ImmutableArray<ImmutableArray<CustomModifier>> modifiers = GetTypeArgumentsModifiers(underlyingTypeSymbol);\n                    AddTypeArguments(symbol, modifiers);\n\n                    AddDelegateParameters(symbol);\n\n                    // TODO: do we want to skip these if we're being visited as a containing type?\n                    AddTypeParameterConstraints(symbol.TypeArguments);\n                }\n            }\n            else\n            {\n                AddDelegateParameters(symbol);\n            } 313354"];
11086 [label="AddDelegateParameters(symbol); 313355"];
11087 [label="AddDelegateParameters(symbol) 313356"];
11088 [label="param AddDelegateParameters(INamedTypeSymbol symbol) 313357"];
11089 [label="param AddDelegateParameters(this) 313358"];
11090 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndParameters ||\n                    format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var method = symbol.DelegateInvokeMethod;\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    AddParametersIfRequired(hasThisParameter: false, isVarargs: method.IsVararg, parameters: method.Parameters);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n            } 313359"];
11091 [label="CanShowDelegateSignature(symbol) 313360"];
11092 [label="param CanShowDelegateSignature(INamedTypeSymbol symbol) 313361"];
11093 [label="param CanShowDelegateSignature(this) 313362"];
11094 [label="return\n                isFirstSymbolVisited &&\n                symbol.TypeKind == TypeKind.Delegate &&\n                format.DelegateStyle != SymbolDisplayDelegateStyle.NameOnly &&\n                symbol.DelegateInvokeMethod != null; 313363"];
11095 [label="if (CanShowDelegateSignature(symbol))\n            {\n                if (format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndParameters ||\n                    format.DelegateStyle == SymbolDisplayDelegateStyle.NameAndSignature)\n                {\n                    var method = symbol.DelegateInvokeMethod;\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    AddParametersIfRequired(hasThisParameter: false, isVarargs: method.IsVararg, parameters: method.Parameters);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n            } 313364"];
11096 [label="AddDelegateParameters(symbol); 313365"];
11097 [label=".OriginalDefinition 313366"];
11098 [label="get\n            {\n                return this;\n            } 313367"];
11099 [label="if (underlyingTypeSymbol?.OriginalDefinition is MissingMetadataTypeSymbol &&\n                format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.FlagMissingMetadataTypes))\n            {\n                //add it as punctuation - it's just for testing\n                AddPunctuation(SyntaxKind.OpenBracketToken);\n                builder.Add(CreatePart(InternalSymbolDisplayPartKind.Other, symbol, 'missing'));\n                AddPunctuation(SyntaxKind.CloseBracketToken);\n            } 313368"];
11100 [label="AddNullableAnnotations(symbol); 313369"];
11101 [label="AddNullableAnnotations(symbol) 313370"];
11102 [label="param AddNullableAnnotations(ITypeSymbol type) 313371"];
11103 [label="param AddNullableAnnotations(this) 313372"];
11104 [label="if (ShouldAddNullableAnnotation(type))\n            {\n                AddPunctuation(type.NullableAnnotation == CodeAnalysis.NullableAnnotation.Annotated ? SyntaxKind.QuestionToken : SyntaxKind.ExclamationToken);\n            } 313373"];
11105 [label="ShouldAddNullableAnnotation(type) 313374"];
11106 [label="param ShouldAddNullableAnnotation(ITypeSymbol type) 313375"];
11107 [label="param ShouldAddNullableAnnotation(this) 313376"];
11108 [label="type.NullableAnnotation 313377"];
11109 [label="=> NullableAnnotation 313378"];
11110 [label="NullableAnnotation 313379"];
11111 [label="switch (type.NullableAnnotation)\n            {\n                case CodeAnalysis.NullableAnnotation.Annotated:\n                    if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.IncludeNullableReferenceTypeModifier) &&\n                        !ITypeSymbolHelpers.IsNullableType(type) && !type.IsValueType)\n                    {\n                        return true;\n                    }\n                    break;\n\n                // LAFHIS\n                case CodeAnalysis.NullableAnnotation.NotAnnotated:\n                    if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) &&\n                        !type.IsValueType &&\n                        ((type is not Symbols.PublicModel.TypeSymbol) ||\n                        ((Symbols.PublicModel.TypeSymbol)type).UnderlyingTypeSymbol.IsTypeParameterDisallowingAnnotationInCSharp8() != true))\n                    {\n                        return true;\n                    }\n                    break;\n            } 313380"];
11112 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) &&\n                        !type.IsValueType &&\n                        ((type is not Symbols.PublicModel.TypeSymbol) ||\n                        ((Symbols.PublicModel.TypeSymbol)type).UnderlyingTypeSymbol.IsTypeParameterDisallowingAnnotationInCSharp8() != true))\n                    {\n                        return true;\n                    } 313381"];
11113 [label="if (format.MiscellaneousOptions.IncludesOption(SymbolDisplayMiscellaneousOptions.IncludeNotNullableReferenceTypeModifier) &&\n                        !type.IsValueType &&\n                        ((type is not Symbols.PublicModel.TypeSymbol) ||\n                        ((Symbols.PublicModel.TypeSymbol)type).UnderlyingTypeSymbol.IsTypeParameterDisallowingAnnotationInCSharp8() != true))\n                    {\n                        return true;\n                    } 313382"];
11114 [label="return false; 313383"];
11115 [label="if (ShouldAddNullableAnnotation(type))\n            {\n                AddPunctuation(type.NullableAnnotation == CodeAnalysis.NullableAnnotation.Annotated ? SyntaxKind.QuestionToken : SyntaxKind.ExclamationToken);\n            } 313384"];
11116 [label="AddNullableAnnotations(symbol); 313385"];
11117 [label="symbol.Type.Accept(this.NotFirstVisitor); 313386"];
11118 [label="symbol.CustomModifiers 313387"];
11119 [label="get { return _underlying.TypeWithAnnotations.CustomModifiers; } 313388"];
11120 [label="_underlying.TypeWithAnnotations 313389"];
11121 [label="get\n            {\n                return this.parameterType;\n            } 313390"];
11122 [label="return _underlying.TypeWithAnnotations.CustomModifiers; 313391"];
11123 [label="_underlying.TypeWithAnnotations.CustomModifiers 313392"];
11124 [label="=> _extensions.CustomModifiers 313393"];
11125 [label="_extensions.CustomModifiers 313394"];
11126 [label="=> _customModifiers 313395"];
11127 [label="_customModifiers 313396"];
11128 [label="AddCustomModifiersIfRequired(symbol.CustomModifiers, leadingSpace: true, trailingSpace: false); 313397"];
11129 [label="AddCustomModifiersIfRequired(symbol.CustomModifiers, leadingSpace: true, trailingSpace: false); 313398"];
11130 [label="AddCustomModifiersIfRequired(symbol.CustomModifiers, leadingSpace: true, trailingSpace: false) 313399"];
11131 [label="param AddCustomModifiersIfRequired(ImmutableArray<CustomModifier> customModifiers) 313400"];
11132 [label="param AddCustomModifiersIfRequired(bool leadingSpace = false) 313401"];
11133 [label="param AddCustomModifiersIfRequired(bool trailingSpace = true) 313402"];
11134 [label="param AddCustomModifiersIfRequired(this) 313403"];
11135 [label="if (this.format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.IncludeCustomModifiers) && !customModifiers.IsEmpty)\n            {\n                bool first = true;\n                foreach (CustomModifier customModifier in customModifiers)\n                {\n                    if (!first || leadingSpace)\n                    {\n                        AddSpace();\n                    }\n                    first = false;\n\n                    this.builder.Add(CreatePart(InternalSymbolDisplayPartKind.Other, null, customModifier.IsOptional ? IL_KEYWORD_MODOPT : IL_KEYWORD_MODREQ));\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    customModifier.Modifier.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n                if (trailingSpace)\n                {\n                    AddSpace();\n                }\n            } 313404"];
11136 [label="if (this.format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.IncludeCustomModifiers) && !customModifiers.IsEmpty)\n            {\n                bool first = true;\n                foreach (CustomModifier customModifier in customModifiers)\n                {\n                    if (!first || leadingSpace)\n                    {\n                        AddSpace();\n                    }\n                    first = false;\n\n                    this.builder.Add(CreatePart(InternalSymbolDisplayPartKind.Other, null, customModifier.IsOptional ? IL_KEYWORD_MODOPT : IL_KEYWORD_MODREQ));\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    customModifier.Modifier.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n                if (trailingSpace)\n                {\n                    AddSpace();\n                }\n            } 313405"];
11137 [label="if (this.format.CompilerInternalOptions.IncludesOption(SymbolDisplayCompilerInternalOptions.IncludeCustomModifiers) && !customModifiers.IsEmpty)\n            {\n                bool first = true;\n                foreach (CustomModifier customModifier in customModifiers)\n                {\n                    if (!first || leadingSpace)\n                    {\n                        AddSpace();\n                    }\n                    first = false;\n\n                    this.builder.Add(CreatePart(InternalSymbolDisplayPartKind.Other, null, customModifier.IsOptional ? IL_KEYWORD_MODOPT : IL_KEYWORD_MODREQ));\n                    AddPunctuation(SyntaxKind.OpenParenToken);\n                    customModifier.Modifier.Accept(this.NotFirstVisitor);\n                    AddPunctuation(SyntaxKind.CloseParenToken);\n                }\n                if (trailingSpace)\n                {\n                    AddSpace();\n                }\n            } 313406"];
11138 [label="if (includeName && includeType)\n            {\n                AddSpace();\n            } 313407"];
11139 [label="AddSpace() 313408"];
11140 [label="param AddSpace(this) 313409"];
11141 [label="builder.Add(CreatePart(SymbolDisplayPartKind.Space, null, ' ')); 313410"];
11142 [label="builder.Add(CreatePart(SymbolDisplayPartKind.Space, null, ' ')); 313411"];
11143 [label="CreatePart(SymbolDisplayPartKind.Space, null, ' ') 313412"];
11144 [label="param CreatePart(SymbolDisplayPartKind kind) 313413"];
11145 [label="param CreatePart(ISymbol symbol) 313414"];
11146 [label="param CreatePart(string text) 313415"];
11147 [label="param CreatePart(this) 313416"];
11148 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 313417"];
11149 [label="AddSpace(); 313418"];
11150 [label="if (includeName)\n            {\n                var kind = symbol.IsThis ? SymbolDisplayPartKind.Keyword : SymbolDisplayPartKind.ParameterName;\n                builder.Add(CreatePart(kind, symbol, symbol.Name));\n\n                if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeDefaultValue) &&\n                    symbol.HasExplicitDefaultValue &&\n                    CanAddConstant(symbol.Type, symbol.ExplicitDefaultValue))\n                {\n                    AddSpace();\n                    AddPunctuation(SyntaxKind.EqualsToken);\n                    AddSpace();\n\n                    AddConstantValue(symbol.Type, symbol.ExplicitDefaultValue);\n                }\n            } 313419"];
11151 [label="symbol.IsThis 313420"];
11152 [label="=> _underlying.IsThis 313421"];
11153 [label="_underlying.IsThis 313422"];
11154 [label="get\n            {\n                return false;\n            } 313423"];
11155 [label="return false; 313424"];
11156 [label="var kind = symbol.IsThis ? SymbolDisplayPartKind.Keyword : SymbolDisplayPartKind.ParameterName; 313425"];
11157 [label="builder.Add(CreatePart(kind, symbol, symbol.Name)); 313426"];
11158 [label="builder.Add(CreatePart(kind, symbol, symbol.Name)); 313427"];
11159 [label="symbol.Name 313428"];
11160 [label="_underlying 313429"];
11161 [label="builder.Add(CreatePart(kind, symbol, symbol.Name)); 313430"];
11162 [label="CreatePart(kind, symbol, symbol.Name) 313431"];
11163 [label="param CreatePart(SymbolDisplayPartKind kind) 313432"];
11164 [label="param CreatePart(ISymbol symbol) 313433"];
11165 [label="param CreatePart(string text) 313434"];
11166 [label="text = (text == null) ? '?' :\n                   (_escapeKeywordIdentifiers && IsEscapable(kind)) ? EscapeIdentifier(text) : text; 313435"];
11167 [label="if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeDefaultValue) &&\n                    symbol.HasExplicitDefaultValue &&\n                    CanAddConstant(symbol.Type, symbol.ExplicitDefaultValue))\n                {\n                    AddSpace();\n                    AddPunctuation(SyntaxKind.EqualsToken);\n                    AddSpace();\n\n                    AddConstantValue(symbol.Type, symbol.ExplicitDefaultValue);\n                } 313436"];
11168 [label="if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeDefaultValue) &&\n                    symbol.HasExplicitDefaultValue &&\n                    CanAddConstant(symbol.Type, symbol.ExplicitDefaultValue))\n                {\n                    AddSpace();\n                    AddPunctuation(SyntaxKind.EqualsToken);\n                    AddSpace();\n\n                    AddConstantValue(symbol.Type, symbol.ExplicitDefaultValue);\n                } 313437"];
11169 [label="symbol.HasExplicitDefaultValue 313438"];
11170 [label="=> _underlying.HasExplicitDefaultValue 313439"];
11171 [label="_underlying.HasExplicitDefaultValue 313440"];
11172 [label="get\n            {\n                // In the symbol model, only optional parameters have default values.\n                // Internally, however, non-optional parameters may also have default\n                // values (accessible via DefaultConstantValue).  For example, if the\n                // DefaultParameterValue attribute is applied to a non-optional parameter\n                // we still want to emit a default parameter value, even if it isn't\n                // recognized by the language.\n                // Special Case: params parameters are never optional, but can have\n                // default values (e.g. if the params-ness is inherited from an\n                // overridden method, but the current method declares the parameter\n                // as optional).  In such cases, dev11 emits the default value.\n                return IsOptional && ExplicitDefaultConstantValue != null;\n            } 313441"];
11173 [label="IsOptional 313442"];
11174 [label="get\n            {\n                // DEV10 COMPATIBILITY: Special handling for ParameterArray params\n                //\n                // Ideally we should not need the additional 'isParams' check below\n                // as a ParameterArray param cannot have a default value.\n                // However, for certain cases of overriding this is not true.\n                // See test 'CodeGenTests.NoDefaultForParams_Dev10781558' for an example.\n                // See Roslyn bug 10753 and Dev10 bug 781558 for details.\n                //\n                // To maintain compatibility with Dev10, we allow such code to compile but explicitly\n                // classify a ParameterArray param as a required parameter.\n                //\n                // Also when we call f() where signature of f is void([Optional]params int[] args) \n                // an empty array is created and passed to f.\n                //\n                // We also do not consider ref/out parameters as optional, unless in COM interop scenarios \n                // and only for ref.\n                RefKind refKind;\n                return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport));\n            } 313443"];
11175 [label="RefKind refKind; 313444"];
11176 [label="IsParams 313445"];
11177 [label="get { return false; } 313446"];
11178 [label="return false; 313447"];
11179 [label="return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport)); 313448"];
11180 [label="IsMetadataOptional 313449"];
11181 [label="get { return false; } 313450"];
11182 [label="return false; 313451"];
11183 [label="return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport)); 313452"];
11184 [label="return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport)); 313453"];
11185 [label="return IsOptional && ExplicitDefaultConstantValue != null; 313454"];
11186 [label="if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeDefaultValue) &&\n                    symbol.HasExplicitDefaultValue &&\n                    CanAddConstant(symbol.Type, symbol.ExplicitDefaultValue))\n                {\n                    AddSpace();\n                    AddPunctuation(SyntaxKind.EqualsToken);\n                    AddSpace();\n\n                    AddConstantValue(symbol.Type, symbol.ExplicitDefaultValue);\n                } 313455"];
11187 [label="if (format.ParameterOptions.IncludesOption(SymbolDisplayParameterOptions.IncludeDefaultValue) &&\n                    symbol.HasExplicitDefaultValue &&\n                    CanAddConstant(symbol.Type, symbol.ExplicitDefaultValue))\n                {\n                    AddSpace();\n                    AddPunctuation(SyntaxKind.EqualsToken);\n                    AddSpace();\n\n                    AddConstantValue(symbol.Type, symbol.ExplicitDefaultValue);\n                } 313456"];
11188 [label="symbol.IsOptional 313457"];
11189 [label="=> _underlying.IsOptional 313458"];
11190 [label="_underlying.IsOptional 313459"];
11191 [label="get\n            {\n                // DEV10 COMPATIBILITY: Special handling for ParameterArray params\n                //\n                // Ideally we should not need the additional 'isParams' check below\n                // as a ParameterArray param cannot have a default value.\n                // However, for certain cases of overriding this is not true.\n                // See test 'CodeGenTests.NoDefaultForParams_Dev10781558' for an example.\n                // See Roslyn bug 10753 and Dev10 bug 781558 for details.\n                //\n                // To maintain compatibility with Dev10, we allow such code to compile but explicitly\n                // classify a ParameterArray param as a required parameter.\n                //\n                // Also when we call f() where signature of f is void([Optional]params int[] args) \n                // an empty array is created and passed to f.\n                //\n                // We also do not consider ref/out parameters as optional, unless in COM interop scenarios \n                // and only for ref.\n                RefKind refKind;\n                return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport));\n            } 313460"];
11192 [label="RefKind refKind; 313461"];
11193 [label="IsParams 313462"];
11194 [label="get { return false; } 313463"];
11195 [label="return false; 313464"];
11196 [label="return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport)); 313465"];
11197 [label="IsMetadataOptional 313466"];
11198 [label="get { return false; } 313467"];
11199 [label="return false; 313468"];
11200 [label="return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport)); 313469"];
11201 [label="return !IsParams && IsMetadataOptional &&\n                       ((refKind = RefKind) == RefKind.None ||\n                        (refKind == RefKind.In) ||\n                        (refKind == RefKind.Ref && ContainingSymbol.ContainingType.IsComImport)); 313470"];
11202 [label="if (includeBrackets && symbol.IsOptional)\n            {\n                AddPunctuation(SyntaxKind.CloseBracketToken);\n            } 313471"];
11203 [label="if (includeBrackets && symbol.IsOptional)\n            {\n                AddPunctuation(SyntaxKind.CloseBracketToken);\n            } 313472"];
11204 [label="visitor.VisitParameter(this); 313473"];
11205 [label="param.Accept(this.NotFirstVisitor); 313474"];
11206 [label="if (isVarargs)\n            {\n                if (!first)\n                {\n                    AddPunctuation(SyntaxKind.CommaToken);\n                    AddSpace();\n                }\n\n                AddKeyword(SyntaxKind.ArgListKeyword);\n            } 313475"];
11207 [label="AddParametersIfRequired(\n                    hasThisParameter: symbol.IsExtensionMethod && symbol.MethodKind != MethodKind.ReducedExtension,\n                    isVarargs: symbol.IsVararg,\n                    parameters: symbol.Parameters); 313476"];
11208 [label="param AddTypeParameterConstraints(IMethodSymbol symbol) 313477"];
11209 [label="param AddTypeParameterConstraints(this) 313478"];
11210 [label="if (format.GenericsOptions.IncludesOption(SymbolDisplayGenericsOptions.IncludeTypeConstraints))\n            {\n                AddTypeParameterConstraints(symbol.TypeArguments);\n            } 313479"];
11211 [label="CustomAssert.Equal('MyClass..ctor(), MyClass..ctor(System.Int32 DummyInt)', actual); 313480"];
11212 [label="CustomAssert.Equal('MyClass..ctor(), MyClass..ctor(System.Int32 DummyInt)', actual); 313481"];
2 -> 0;
2 -> 1;
3 -> 1;
5 -> 4;
7 -> 6;
9 -> 8;
11 -> 10;
13 -> 12;
15 -> 14;
17 -> 16;
19 -> 18;
21 -> 20;
23 -> 22;
25 -> 24;
27 -> 26;
29 -> 28;
31 -> 30;
33 -> 32;
35 -> 34;
37 -> 36;
39 -> 38;
41 -> 40;
42 -> 0;
43 -> 0;
44 -> 42;
44 -> 43;
44 -> 0;
45 -> 44;
46 -> 0;
47 -> 0;
48 -> 46;
48 -> 47;
48 -> 44;
49 -> 48;
50 -> 0;
51 -> 50;
52 -> 51;
52 -> 50;
53 -> 52;
55 -> 0;
56 -> 54;
56 -> 55;
57 -> 56;
58 -> 0;
59 -> 0;
60 -> 58;
60 -> 59;
60 -> 0;
61 -> 60;
62 -> 0;
63 -> 0;
64 -> 62;
64 -> 63;
64 -> 48;
65 -> 64;
66 -> 0;
67 -> 0;
68 -> 66;
68 -> 67;
68 -> 64;
69 -> 68;
70 -> 0;
71 -> 0;
72 -> 70;
72 -> 71;
72 -> 68;
73 -> 72;
74 -> 0;
75 -> 0;
76 -> 74;
76 -> 75;
76 -> 0;
77 -> 76;
78 -> 0;
79 -> 0;
80 -> 78;
80 -> 79;
80 -> 0;
81 -> 80;
82 -> 0;
83 -> 0;
84 -> 82;
84 -> 83;
84 -> 0;
85 -> 84;
86 -> 0;
87 -> 0;
88 -> 86;
88 -> 87;
88 -> 72;
89 -> 88;
90 -> 0;
91 -> 0;
92 -> 90;
92 -> 91;
92 -> 0;
93 -> 92;
95 -> 0;
96 -> 94;
96 -> 95;
97 -> 96;
98 -> 0;
99 -> 0;
100 -> 98;
100 -> 99;
100 -> 88;
101 -> 100;
102 -> 0;
103 -> 0;
104 -> 102;
104 -> 103;
104 -> 0;
105 -> 104;
106 -> 0;
107 -> 0;
108 -> 106;
108 -> 107;
108 -> 0;
109 -> 108;
110 -> 0;
111 -> 0;
112 -> 110;
112 -> 111;
112 -> 0;
113 -> 112;
114 -> 0;
115 -> 0;
116 -> 114;
116 -> 115;
116 -> 0;
117 -> 116;
118 -> 0;
119 -> 0;
120 -> 118;
120 -> 119;
120 -> 0;
121 -> 120;
122 -> 0;
123 -> 0;
124 -> 122;
124 -> 123;
124 -> 100;
125 -> 124;
126 -> 0;
127 -> 0;
128 -> 126;
128 -> 127;
128 -> 124;
129 -> 128;
130 -> 0;
131 -> 0;
132 -> 130;
132 -> 131;
132 -> 128;
133 -> 132;
134 -> 0;
135 -> 0;
136 -> 134;
136 -> 135;
136 -> 132;
137 -> 136;
138 -> 0;
139 -> 0;
140 -> 138;
140 -> 139;
140 -> 0;
141 -> 140;
142 -> 0;
143 -> 0;
144 -> 142;
144 -> 143;
144 -> 0;
145 -> 144;
146 -> 0;
147 -> 0;
148 -> 146;
148 -> 147;
148 -> 136;
149 -> 148;
150 -> 0;
151 -> 0;
152 -> 150;
152 -> 151;
152 -> 0;
153 -> 152;
154 -> 0;
155 -> 0;
156 -> 154;
156 -> 155;
156 -> 0;
157 -> 156;
158 -> 0;
159 -> 0;
160 -> 158;
160 -> 159;
160 -> 0;
161 -> 160;
162 -> 0;
163 -> 0;
164 -> 162;
164 -> 163;
164 -> 148;
165 -> 164;
166 -> 0;
167 -> 0;
168 -> 166;
168 -> 167;
168 -> 0;
169 -> 168;
170 -> 0;
171 -> 0;
172 -> 170;
172 -> 171;
172 -> 0;
173 -> 172;
175 -> 174;
177 -> 175;
177 -> 176;
178 -> 177;
180 -> 0;
180 -> 179;
181 -> 180;
181 -> 0;
182 -> 181;
184 -> 183;
186 -> 185;
188 -> 187;
190 -> 189;
191 -> 3;
192 -> 191;
193 -> 192;
194 -> 193;
194 -> 192;
195 -> 1;
195 -> 2;
195 -> 194;
196 -> 1;
197 -> 1;
198 -> 197;
198 -> 1;
199 -> 1;
200 -> 198;
200 -> 199;
201 -> 200;
201 -> 199;
202 -> 199;
203 -> 201;
203 -> 202;
204 -> 202;
205 -> 203;
205 -> 204;
205 -> 202;
206 -> 202;
206 -> 1;
207 -> 1;
208 -> 1;
209 -> 206;
209 -> 208;
210 -> 207;
210 -> 208;
211 -> 207;
211 -> 208;
212 -> 207;
212 -> 208;
213 -> 207;
213 -> 208;
214 -> 207;
214 -> 208;
215 -> 207;
215 -> 208;
216 -> 207;
216 -> 208;
217 -> 209;
217 -> 208;
218 -> 213;
218 -> 208;
219 -> 210;
219 -> 208;
220 -> 208;
221 -> 218;
221 -> 220;
222 -> 219;
222 -> 220;
223 -> 221;
223 -> 220;
224 -> 220;
225 -> 223;
225 -> 224;
226 -> 225;
226 -> 224;
227 -> 226;
228 -> 0;
228 -> 227;
229 -> 228;
230 -> 229;
231 -> 229;
232 -> 0;
232 -> 231;
233 -> 232;
233 -> 230;
233 -> 229;
234 -> 233;
234 -> 227;
235 -> 220;
236 -> 222;
236 -> 235;
236 -> 220;
237 -> 234;
237 -> 236;
238 -> 211;
238 -> 208;
239 -> 212;
239 -> 208;
240 -> 214;
240 -> 208;
241 -> 215;
241 -> 208;
242 -> 216;
242 -> 208;
243 -> 208;
244 -> 217;
244 -> 243;
245 -> 237;
245 -> 243;
246 -> 238;
246 -> 243;
247 -> 239;
247 -> 243;
248 -> 240;
248 -> 243;
249 -> 241;
249 -> 243;
250 -> 242;
250 -> 243;
251 -> 244;
251 -> 243;
252 -> 245;
252 -> 243;
253 -> 246;
253 -> 243;
254 -> 247;
254 -> 243;
255 -> 248;
255 -> 243;
256 -> 249;
256 -> 243;
257 -> 250;
257 -> 243;
258 -> 243;
259 -> 258;
259 -> 243;
260 -> 243;
261 -> 251;
261 -> 260;
262 -> 252;
262 -> 260;
263 -> 253;
263 -> 260;
264 -> 254;
264 -> 260;
265 -> 255;
265 -> 260;
266 -> 256;
266 -> 260;
267 -> 257;
267 -> 260;
268 -> 259;
268 -> 260;
269 -> 264;
269 -> 260;
270 -> 266;
270 -> 260;
271 -> 260;
272 -> 269;
272 -> 271;
273 -> 270;
273 -> 271;
274 -> 261;
274 -> 271;
275 -> 274;
275 -> 205;
275 -> 271;
276 -> 275;
277 -> 273;
277 -> 275;
278 -> 272;
278 -> 275;
279 -> 275;
280 -> 276;
280 -> 279;
281 -> 277;
281 -> 279;
282 -> 278;
282 -> 279;
283 -> 276;
283 -> 279;
284 -> 279;
285 -> 282;
285 -> 284;
285 -> 279;
286 -> 0;
287 -> 0;
289 -> 286;
289 -> 287;
289 -> 288;
290 -> 289;
291 -> 0;
292 -> 290;
292 -> 289;
292 -> 291;
293 -> 292;
294 -> 0;
295 -> 290;
295 -> 289;
295 -> 294;
296 -> 295;
297 -> 0;
298 -> 290;
298 -> 289;
298 -> 297;
299 -> 298;
300 -> 0;
301 -> 290;
301 -> 289;
301 -> 300;
302 -> 301;
303 -> 0;
304 -> 290;
304 -> 289;
304 -> 303;
305 -> 304;
306 -> 0;
307 -> 290;
307 -> 289;
307 -> 306;
308 -> 307;
309 -> 0;
310 -> 290;
310 -> 289;
310 -> 309;
311 -> 310;
312 -> 0;
313 -> 290;
313 -> 289;
313 -> 312;
314 -> 313;
315 -> 0;
316 -> 290;
316 -> 289;
316 -> 315;
317 -> 316;
318 -> 0;
319 -> 290;
319 -> 289;
319 -> 318;
320 -> 319;
321 -> 0;
322 -> 290;
322 -> 289;
322 -> 321;
323 -> 322;
324 -> 290;
327 -> 324;
327 -> 326;
328 -> 325;
328 -> 326;
329 -> 326;
330 -> 327;
330 -> 289;
330 -> 326;
331 -> 326;
332 -> 328;
332 -> 326;
333 -> 329;
333 -> 326;
334 -> 332;
334 -> 333;
334 -> 326;
335 -> 334;
335 -> 331;
335 -> 326;
336 -> 330;
336 -> 331;
336 -> 289;
336 -> 335;
336 -> 334;
336 -> 326;
337 -> 336;
338 -> 0;
339 -> 338;
341 -> 339;
341 -> 340;
342 -> 290;
342 -> 289;
342 -> 341;
343 -> 342;
344 -> 0;
345 -> 344;
346 -> 290;
346 -> 289;
346 -> 345;
347 -> 346;
348 -> 0;
349 -> 290;
349 -> 289;
349 -> 348;
350 -> 349;
351 -> 314;
353 -> 352;
354 -> 0;
355 -> 0;
356 -> 0;
358 -> 354;
358 -> 355;
358 -> 356;
358 -> 357;
359 -> 353;
360 -> 358;
360 -> 359;
360 -> 352;
361 -> 360;
365 -> 362;
365 -> 363;
365 -> 364;
366 -> 296;
366 -> 289;
366 -> 295;
366 -> 362;
366 -> 365;
367 -> 366;
368 -> 308;
369 -> 317;
370 -> 317;
371 -> 314;
372 -> 0;
373 -> 0;
375 -> 372;
375 -> 374;
376 -> 373;
376 -> 374;
377 -> 374;
378 -> 375;
378 -> 374;
379 -> 376;
379 -> 374;
380 -> 0;
380 -> 374;
381 -> 377;
381 -> 374;
382 -> 374;
383 -> 378;
383 -> 379;
383 -> 380;
383 -> 381;
383 -> 382;
383 -> 374;
384 -> 383;
385 -> 0;
386 -> 0;
388 -> 385;
388 -> 387;
389 -> 386;
389 -> 387;
390 -> 387;
391 -> 388;
391 -> 387;
392 -> 389;
392 -> 387;
393 -> 0;
393 -> 387;
394 -> 390;
394 -> 387;
395 -> 387;
396 -> 391;
396 -> 392;
396 -> 393;
396 -> 394;
396 -> 395;
396 -> 387;
397 -> 396;
399 -> 384;
399 -> 383;
399 -> 398;
400 -> 399;
402 -> 397;
402 -> 396;
402 -> 401;
403 -> 402;
404 -> 0;
405 -> 0;
407 -> 404;
407 -> 406;
408 -> 405;
408 -> 406;
409 -> 406;
410 -> 407;
410 -> 406;
411 -> 408;
411 -> 406;
412 -> 0;
412 -> 406;
413 -> 409;
413 -> 406;
414 -> 406;
415 -> 410;
415 -> 411;
415 -> 412;
415 -> 413;
415 -> 414;
415 -> 406;
416 -> 415;
417 -> 0;
418 -> 0;
420 -> 417;
420 -> 419;
421 -> 418;
421 -> 419;
422 -> 419;
423 -> 420;
423 -> 419;
424 -> 421;
424 -> 419;
425 -> 0;
425 -> 419;
426 -> 422;
426 -> 419;
427 -> 419;
428 -> 423;
428 -> 424;
428 -> 425;
428 -> 426;
428 -> 427;
428 -> 419;
429 -> 428;
430 -> 0;
431 -> 0;
433 -> 430;
433 -> 432;
434 -> 431;
434 -> 432;
435 -> 432;
436 -> 433;
436 -> 432;
437 -> 434;
437 -> 432;
438 -> 0;
438 -> 432;
439 -> 435;
439 -> 432;
440 -> 432;
441 -> 436;
441 -> 437;
441 -> 438;
441 -> 439;
441 -> 440;
441 -> 432;
442 -> 441;
443 -> 0;
444 -> 0;
446 -> 443;
446 -> 445;
447 -> 444;
447 -> 445;
448 -> 445;
449 -> 446;
449 -> 445;
450 -> 447;
450 -> 445;
451 -> 0;
451 -> 445;
452 -> 448;
452 -> 445;
453 -> 445;
454 -> 449;
454 -> 450;
454 -> 451;
454 -> 452;
454 -> 453;
454 -> 445;
455 -> 454;
456 -> 0;
457 -> 0;
459 -> 456;
459 -> 458;
460 -> 457;
460 -> 458;
461 -> 458;
462 -> 459;
462 -> 458;
463 -> 460;
463 -> 458;
464 -> 0;
464 -> 458;
465 -> 461;
465 -> 458;
466 -> 458;
467 -> 462;
467 -> 463;
467 -> 464;
467 -> 465;
467 -> 466;
467 -> 458;
468 -> 467;
469 -> 0;
470 -> 0;
472 -> 469;
472 -> 471;
473 -> 470;
473 -> 471;
474 -> 471;
475 -> 472;
475 -> 471;
476 -> 473;
476 -> 471;
477 -> 0;
477 -> 471;
478 -> 474;
478 -> 471;
479 -> 471;
480 -> 475;
480 -> 476;
480 -> 477;
480 -> 478;
480 -> 479;
480 -> 471;
481 -> 480;
483 -> 384;
483 -> 383;
483 -> 482;
484 -> 483;
486 -> 397;
486 -> 396;
486 -> 485;
487 -> 486;
489 -> 416;
489 -> 415;
489 -> 488;
490 -> 489;
492 -> 429;
492 -> 428;
492 -> 491;
493 -> 492;
494 -> 0;
495 -> 384;
495 -> 383;
495 -> 494;
495 -> 0;
496 -> 495;
497 -> 0;
498 -> 397;
498 -> 396;
498 -> 497;
498 -> 0;
499 -> 498;
500 -> 0;
501 -> 468;
501 -> 467;
501 -> 500;
501 -> 0;
502 -> 501;
503 -> 0;
504 -> 416;
504 -> 415;
504 -> 503;
504 -> 0;
505 -> 504;
506 -> 0;
507 -> 0;
507 -> 506;
508 -> 507;
509 -> 290;
509 -> 285;
510 -> 280;
510 -> 279;
511 -> 0;
511 -> 279;
512 -> 511;
512 -> 283;
512 -> 279;
513 -> 279;
514 -> 510;
514 -> 512;
514 -> 513;
514 -> 0;
514 -> 279;
515 -> 514;
515 -> 279;
516 -> 509;
516 -> 279;
517 -> 281;
517 -> 279;
518 -> 279;
519 -> 515;
519 -> 516;
519 -> 517;
519 -> 518;
519 -> 514;
519 -> 289;
519 -> 279;
520 -> 279;
521 -> 519;
521 -> 520;
522 -> 520;
523 -> 520;
524 -> 521;
524 -> 519;
524 -> 523;
524 -> 520;
525 -> 522;
525 -> 520;
526 -> 520;
527 -> 524;
527 -> 519;
527 -> 523;
527 -> 525;
527 -> 526;
527 -> 522;
527 -> 520;
528 -> 520;
529 -> 528;
529 -> 522;
529 -> 520;
530 -> 522;
530 -> 520;
531 -> 520;
532 -> 530;
532 -> 531;
532 -> 522;
532 -> 529;
532 -> 520;
533 -> 521;
533 -> 520;
534 -> 533;
534 -> 276;
534 -> 275;
535 -> 276;
535 -> 260;
536 -> 260;
537 -> 263;
537 -> 536;
537 -> 260;
538 -> 535;
538 -> 537;
539 -> 537;
540 -> 538;
540 -> 539;
540 -> 276;
540 -> 534;
540 -> 519;
540 -> 537;
541 -> 540;
541 -> 537;
542 -> 384;
542 -> 541;
543 -> 0;
543 -> 260;
544 -> 268;
544 -> 260;
545 -> 265;
545 -> 535;
545 -> 262;
545 -> 542;
545 -> 260;
546 -> 545;
546 -> 260;
547 -> 260;
548 -> 546;
548 -> 547;
549 -> 0;
549 -> 547;
550 -> 549;
551 -> 260;
552 -> 545;
552 -> 276;
552 -> 534;
552 -> 519;
552 -> 233;
552 -> 0;
552 -> 383;
552 -> 230;
552 -> 260;
553 -> 260;
554 -> 553;
555 -> 552;
555 -> 554;
555 -> 260;
556 -> 0;
558 -> 556;
558 -> 557;
559 -> 558;
560 -> 0;
562 -> 560;
562 -> 561;
564 -> 562;
564 -> 563;
565 -> 564;
566 -> 552;
566 -> 553;
567 -> 552;
567 -> 553;
568 -> 552;
568 -> 553;
569 -> 552;
569 -> 553;
570 -> 566;
570 -> 553;
571 -> 569;
571 -> 553;
572 -> 567;
572 -> 553;
573 -> 568;
573 -> 553;
574 -> 553;
575 -> 553;
576 -> 570;
576 -> 575;
577 -> 571;
577 -> 575;
578 -> 572;
578 -> 575;
579 -> 573;
579 -> 575;
580 -> 574;
580 -> 575;
581 -> 574;
581 -> 575;
582 -> 574;
582 -> 575;
583 -> 574;
583 -> 575;
584 -> 575;
585 -> 577;
585 -> 584;
585 -> 575;
586 -> 583;
586 -> 575;
587 -> 579;
587 -> 575;
588 -> 587;
588 -> 555;
588 -> 575;
589 -> 576;
589 -> 575;
590 -> 577;
590 -> 575;
591 -> 588;
591 -> 575;
592 -> 580;
592 -> 575;
593 -> 581;
593 -> 575;
594 -> 582;
594 -> 575;
595 -> 583;
595 -> 575;
596 -> 575;
597 -> 0;
597 -> 575;
598 -> 577;
598 -> 588;
598 -> 575;
599 -> 597;
599 -> 598;
599 -> 595;
599 -> 596;
599 -> 0;
599 -> 588;
599 -> 575;
600 -> 575;
601 -> 589;
601 -> 600;
602 -> 590;
602 -> 600;
603 -> 591;
603 -> 600;
604 -> 592;
604 -> 600;
605 -> 593;
605 -> 600;
606 -> 594;
606 -> 600;
607 -> 595;
607 -> 600;
608 -> 596;
608 -> 600;
609 -> 596;
609 -> 600;
610 -> 599;
610 -> 600;
611 -> 596;
611 -> 600;
612 -> 596;
612 -> 600;
613 -> 596;
613 -> 600;
614 -> 601;
614 -> 600;
615 -> 602;
615 -> 600;
616 -> 603;
616 -> 600;
617 -> 604;
617 -> 600;
618 -> 605;
618 -> 600;
619 -> 606;
619 -> 600;
620 -> 607;
620 -> 600;
621 -> 608;
621 -> 600;
622 -> 609;
622 -> 600;
623 -> 610;
623 -> 600;
624 -> 610;
624 -> 599;
624 -> 600;
625 -> 624;
625 -> 599;
625 -> 600;
626 -> 611;
626 -> 600;
627 -> 612;
627 -> 600;
628 -> 600;
629 -> 614;
629 -> 628;
630 -> 615;
630 -> 628;
631 -> 616;
631 -> 628;
632 -> 617;
632 -> 628;
633 -> 618;
633 -> 628;
634 -> 619;
634 -> 628;
635 -> 620;
635 -> 628;
636 -> 621;
636 -> 628;
637 -> 622;
637 -> 628;
638 -> 623;
638 -> 628;
639 -> 625;
639 -> 628;
640 -> 626;
640 -> 628;
641 -> 627;
641 -> 628;
642 -> 613;
642 -> 628;
643 -> 629;
643 -> 628;
644 -> 631;
644 -> 628;
645 -> 639;
645 -> 628;
646 -> 635;
646 -> 628;
647 -> 640;
647 -> 628;
648 -> 641;
648 -> 628;
649 -> 628;
650 -> 649;
650 -> 643;
650 -> 644;
650 -> 645;
650 -> 646;
650 -> 647;
650 -> 648;
650 -> 588;
650 -> 625;
650 -> 628;
651 -> 649;
651 -> 628;
652 -> 649;
652 -> 628;
653 -> 649;
653 -> 628;
654 -> 649;
654 -> 628;
655 -> 649;
655 -> 628;
656 -> 649;
656 -> 628;
657 -> 649;
657 -> 628;
658 -> 649;
658 -> 628;
659 -> 649;
659 -> 628;
660 -> 649;
660 -> 628;
661 -> 649;
661 -> 628;
662 -> 649;
662 -> 628;
663 -> 649;
663 -> 628;
664 -> 649;
664 -> 628;
665 -> 649;
665 -> 628;
666 -> 649;
666 -> 628;
667 -> 649;
667 -> 628;
668 -> 649;
668 -> 628;
669 -> 649;
669 -> 628;
670 -> 649;
670 -> 628;
671 -> 649;
671 -> 628;
672 -> 649;
672 -> 628;
673 -> 649;
673 -> 628;
674 -> 649;
674 -> 628;
675 -> 649;
675 -> 628;
676 -> 649;
676 -> 628;
677 -> 628;
678 -> 677;
678 -> 649;
678 -> 628;
679 -> 649;
679 -> 628;
680 -> 649;
680 -> 628;
681 -> 649;
681 -> 628;
682 -> 649;
682 -> 628;
683 -> 649;
683 -> 628;
684 -> 649;
684 -> 628;
685 -> 649;
685 -> 628;
686 -> 628;
687 -> 628;
688 -> 685;
688 -> 687;
689 -> 686;
689 -> 687;
691 -> 690;
692 -> 690;
693 -> 687;
694 -> 689;
694 -> 693;
695 -> 693;
696 -> 689;
696 -> 687;
697 -> 688;
697 -> 689;
697 -> 687;
698 -> 686;
698 -> 649;
698 -> 628;
699 -> 630;
699 -> 649;
699 -> 628;
700 -> 649;
700 -> 628;
701 -> 700;
701 -> 650;
701 -> 651;
701 -> 699;
701 -> 652;
701 -> 653;
701 -> 654;
701 -> 655;
701 -> 656;
701 -> 657;
701 -> 658;
701 -> 659;
701 -> 660;
701 -> 661;
701 -> 662;
701 -> 663;
701 -> 664;
701 -> 665;
701 -> 666;
701 -> 667;
701 -> 668;
701 -> 669;
701 -> 670;
701 -> 671;
701 -> 672;
701 -> 673;
701 -> 674;
701 -> 675;
701 -> 676;
701 -> 678;
701 -> 679;
701 -> 698;
701 -> 680;
701 -> 681;
701 -> 682;
701 -> 683;
701 -> 684;
701 -> 677;
701 -> 695;
701 -> 696;
701 -> 697;
701 -> 628;
702 -> 701;
702 -> 649;
702 -> 628;
703 -> 649;
703 -> 701;
703 -> 628;
704 -> 703;
704 -> 701;
704 -> 702;
704 -> 628;
705 -> 704;
705 -> 649;
705 -> 628;
706 -> 649;
706 -> 704;
706 -> 628;
707 -> 706;
707 -> 704;
707 -> 705;
707 -> 628;
708 -> 707;
708 -> 649;
708 -> 628;
709 -> 649;
709 -> 707;
709 -> 628;
710 -> 709;
710 -> 707;
710 -> 708;
710 -> 628;
711 -> 710;
711 -> 649;
711 -> 628;
712 -> 649;
712 -> 710;
712 -> 628;
713 -> 712;
713 -> 710;
713 -> 711;
713 -> 628;
714 -> 713;
714 -> 649;
714 -> 628;
715 -> 649;
715 -> 628;
716 -> 628;
717 -> 628;
718 -> 715;
718 -> 717;
719 -> 716;
719 -> 717;
720 -> 717;
721 -> 720;
721 -> 717;
722 -> 720;
722 -> 717;
723 -> 720;
723 -> 717;
724 -> 717;
725 -> 724;
725 -> 720;
725 -> 717;
726 -> 717;
727 -> 718;
727 -> 726;
727 -> 717;
728 -> 718;
728 -> 720;
728 -> 717;
729 -> 716;
729 -> 649;
729 -> 628;
730 -> 638;
730 -> 713;
730 -> 628;
731 -> 628;
732 -> 730;
732 -> 731;
733 -> 731;
734 -> 732;
734 -> 731;
735 -> 734;
735 -> 713;
735 -> 714;
735 -> 729;
735 -> 731;
736 -> 0;
736 -> 731;
737 -> 736;
737 -> 733;
737 -> 731;
738 -> 737;
738 -> 628;
739 -> 738;
739 -> 649;
739 -> 628;
740 -> 635;
740 -> 628;
741 -> 740;
742 -> 632;
742 -> 741;
742 -> 740;
743 -> 633;
743 -> 741;
743 -> 740;
744 -> 742;
744 -> 743;
744 -> 740;
745 -> 634;
745 -> 741;
745 -> 740;
746 -> 744;
746 -> 745;
746 -> 740;
747 -> 637;
747 -> 628;
748 -> 649;
748 -> 713;
748 -> 714;
748 -> 729;
748 -> 739;
748 -> 720;
748 -> 721;
748 -> 728;
748 -> 722;
748 -> 723;
748 -> 725;
748 -> 724;
748 -> 747;
749 -> 747;
750 -> 649;
750 -> 749;
751 -> 750;
751 -> 748;
751 -> 749;
752 -> 636;
752 -> 747;
753 -> 747;
754 -> 747;
755 -> 748;
755 -> 754;
756 -> 751;
756 -> 754;
757 -> 752;
757 -> 754;
758 -> 753;
758 -> 754;
759 -> 755;
759 -> 754;
760 -> 756;
760 -> 754;
761 -> 757;
761 -> 754;
762 -> 754;
763 -> 762;
763 -> 759;
763 -> 760;
763 -> 761;
763 -> 748;
763 -> 754;
764 -> 753;
764 -> 649;
764 -> 747;
765 -> 638;
765 -> 649;
765 -> 628;
766 -> 649;
766 -> 763;
766 -> 628;
767 -> 628;
768 -> 649;
768 -> 763;
768 -> 767;
768 -> 628;
769 -> 575;
770 -> 578;
770 -> 769;
770 -> 575;
771 -> 578;
771 -> 770;
772 -> 770;
773 -> 771;
773 -> 772;
774 -> 596;
774 -> 772;
775 -> 772;
776 -> 773;
776 -> 775;
776 -> 772;
777 -> 773;
777 -> 772;
778 -> 777;
778 -> 763;
778 -> 764;
778 -> 765;
778 -> 772;
779 -> 772;
780 -> 774;
780 -> 778;
780 -> 772;
781 -> 779;
781 -> 772;
782 -> 780;
782 -> 778;
782 -> 772;
783 -> 781;
783 -> 782;
783 -> 779;
783 -> 778;
783 -> 772;
784 -> 772;
785 -> 772;
786 -> 773;
786 -> 772;
787 -> 786;
787 -> 783;
787 -> 772;
788 -> 787;
789 -> 787;
790 -> 787;
791 -> 774;
791 -> 790;
791 -> 787;
792 -> 787;
793 -> 779;
793 -> 792;
793 -> 790;
793 -> 787;
794 -> 784;
794 -> 787;
794 -> 793;
795 -> 785;
795 -> 787;
796 -> 779;
796 -> 793;
796 -> 772;
797 -> 774;
797 -> 796;
797 -> 772;
798 -> 773;
798 -> 772;
799 -> 780;
799 -> 798;
799 -> 796;
799 -> 772;
800 -> 774;
800 -> 799;
800 -> 772;
801 -> 794;
801 -> 772;
802 -> 799;
802 -> 772;
803 -> 772;
804 -> 800;
804 -> 803;
805 -> 801;
805 -> 803;
806 -> 802;
806 -> 803;
807 -> 774;
807 -> 803;
808 -> 807;
808 -> 799;
808 -> 803;
809 -> 803;
810 -> 807;
810 -> 809;
811 -> 810;
811 -> 799;
811 -> 809;
812 -> 811;
812 -> 809;
813 -> 812;
813 -> 803;
814 -> 803;
815 -> 808;
815 -> 814;
816 -> 815;
816 -> 808;
816 -> 814;
817 -> 803;
818 -> 816;
818 -> 817;
819 -> 804;
819 -> 803;
820 -> 805;
820 -> 803;
821 -> 806;
821 -> 803;
822 -> 803;
823 -> 803;
824 -> 808;
824 -> 823;
825 -> 808;
825 -> 823;
826 -> 808;
826 -> 823;
827 -> 813;
827 -> 823;
828 -> 816;
828 -> 823;
829 -> 818;
829 -> 823;
830 -> 818;
830 -> 823;
831 -> 819;
831 -> 823;
832 -> 820;
832 -> 823;
833 -> 821;
833 -> 823;
834 -> 818;
834 -> 823;
835 -> 822;
835 -> 823;
836 -> 822;
836 -> 823;
837 -> 827;
837 -> 823;
838 -> 828;
838 -> 823;
839 -> 829;
839 -> 823;
840 -> 833;
840 -> 818;
840 -> 823;
841 -> 835;
841 -> 823;
842 -> 823;
843 -> 837;
843 -> 842;
844 -> 838;
844 -> 842;
845 -> 839;
845 -> 842;
846 -> 841;
846 -> 842;
847 -> 836;
847 -> 842;
848 -> 846;
848 -> 842;
849 -> 842;
850 -> 849;
850 -> 842;
851 -> 849;
851 -> 842;
852 -> 849;
852 -> 842;
853 -> 849;
853 -> 842;
854 -> 849;
854 -> 842;
855 -> 849;
855 -> 842;
856 -> 849;
856 -> 842;
857 -> 849;
857 -> 842;
858 -> 849;
858 -> 842;
859 -> 849;
859 -> 842;
860 -> 849;
860 -> 842;
861 -> 849;
861 -> 842;
862 -> 849;
862 -> 842;
863 -> 849;
863 -> 842;
864 -> 849;
864 -> 842;
865 -> 849;
865 -> 842;
866 -> 849;
866 -> 842;
867 -> 849;
867 -> 842;
868 -> 849;
868 -> 842;
869 -> 849;
869 -> 842;
870 -> 849;
870 -> 842;
871 -> 849;
871 -> 842;
872 -> 849;
872 -> 842;
873 -> 849;
873 -> 842;
874 -> 849;
874 -> 842;
875 -> 849;
875 -> 842;
876 -> 842;
877 -> 876;
877 -> 849;
877 -> 842;
878 -> 849;
878 -> 842;
879 -> 849;
879 -> 842;
880 -> 849;
880 -> 842;
881 -> 849;
881 -> 842;
882 -> 849;
882 -> 842;
883 -> 849;
883 -> 842;
884 -> 849;
884 -> 842;
885 -> 842;
886 -> 842;
887 -> 884;
887 -> 886;
888 -> 885;
888 -> 886;
889 -> 886;
890 -> 888;
890 -> 889;
891 -> 889;
892 -> 888;
892 -> 886;
893 -> 887;
893 -> 888;
893 -> 886;
894 -> 885;
894 -> 849;
894 -> 842;
895 -> 849;
895 -> 842;
896 -> 849;
896 -> 842;
897 -> 842;
898 -> 842;
899 -> 896;
899 -> 898;
900 -> 897;
900 -> 898;
901 -> 898;
902 -> 901;
902 -> 898;
903 -> 901;
903 -> 898;
904 -> 901;
904 -> 898;
905 -> 898;
906 -> 905;
906 -> 901;
906 -> 898;
907 -> 898;
908 -> 899;
908 -> 907;
908 -> 898;
909 -> 899;
909 -> 901;
909 -> 898;
910 -> 897;
910 -> 849;
910 -> 842;
911 -> 842;
912 -> 840;
912 -> 911;
913 -> 911;
914 -> 912;
914 -> 911;
915 -> 914;
915 -> 840;
915 -> 910;
915 -> 901;
915 -> 902;
915 -> 909;
915 -> 903;
915 -> 904;
915 -> 906;
915 -> 905;
916 -> 914;
917 -> 915;
917 -> 916;
918 -> 830;
918 -> 842;
919 -> 918;
920 -> 843;
920 -> 919;
920 -> 918;
921 -> 844;
921 -> 919;
921 -> 918;
922 -> 920;
922 -> 921;
922 -> 918;
923 -> 845;
923 -> 919;
923 -> 918;
924 -> 922;
924 -> 923;
924 -> 918;
925 -> 831;
925 -> 832;
926 -> 849;
926 -> 832;
927 -> 831;
927 -> 926;
927 -> 840;
927 -> 910;
927 -> 917;
927 -> 901;
927 -> 902;
927 -> 909;
927 -> 903;
927 -> 904;
927 -> 906;
927 -> 905;
927 -> 832;
928 -> 831;
928 -> 849;
928 -> 832;
929 -> 849;
929 -> 927;
929 -> 842;
930 -> 842;
931 -> 849;
931 -> 927;
931 -> 930;
931 -> 842;
932 -> 822;
932 -> 772;
933 -> 932;
933 -> 770;
934 -> 933;
934 -> 927;
934 -> 575;
935 -> 933;
935 -> 575;
936 -> 552;
936 -> 935;
936 -> 927;
936 -> 928;
936 -> 833;
936 -> 260;
937 -> 936;
937 -> 260;
938 -> 260;
939 -> 937;
939 -> 938;
940 -> 938;
941 -> 939;
941 -> 940;
942 -> 941;
942 -> 936;
942 -> 940;
943 -> 942;
943 -> 938;
944 -> 943;
944 -> 942;
944 -> 938;
945 -> 938;
946 -> 943;
946 -> 945;
946 -> 942;
946 -> 938;
947 -> 0;
947 -> 938;
948 -> 946;
948 -> 947;
948 -> 938;
949 -> 267;
949 -> 948;
949 -> 260;
950 -> 936;
950 -> 260;
951 -> 1;
952 -> 950;
952 -> 951;
953 -> 951;
954 -> 952;
954 -> 953;
955 -> 953;
956 -> 954;
956 -> 955;
957 -> 956;
957 -> 948;
957 -> 955;
958 -> 956;
958 -> 957;
959 -> 957;
960 -> 958;
960 -> 959;
961 -> 956;
961 -> 948;
961 -> 959;
962 -> 960;
962 -> 959;
963 -> 959;
964 -> 962;
964 -> 963;
965 -> 961;
965 -> 963;
966 -> 963;
967 -> 963;
968 -> 963;
969 -> 964;
969 -> 968;
970 -> 969;
970 -> 963;
971 -> 963;
972 -> 963;
973 -> 972;
973 -> 963;
974 -> 963;
975 -> 974;
975 -> 963;
976 -> 963;
977 -> 976;
977 -> 963;
978 -> 963;
979 -> 978;
979 -> 963;
980 -> 964;
980 -> 963;
981 -> 967;
981 -> 963;
982 -> 978;
982 -> 963;
983 -> 971;
983 -> 963;
984 -> 972;
984 -> 963;
985 -> 974;
985 -> 963;
986 -> 976;
986 -> 963;
987 -> 966;
987 -> 963;
988 -> 980;
988 -> 981;
988 -> 982;
988 -> 983;
988 -> 984;
988 -> 985;
988 -> 986;
988 -> 987;
988 -> 965;
988 -> 948;
988 -> 967;
988 -> 966;
988 -> 979;
988 -> 973;
988 -> 975;
988 -> 977;
988 -> 963;
989 -> 963;
990 -> 988;
990 -> 989;
991 -> 989;
992 -> 990;
992 -> 991;
993 -> 992;
993 -> 988;
993 -> 991;
994 -> 993;
994 -> 989;
995 -> 0;
996 -> 0;
996 -> 995;
997 -> 0;
998 -> 996;
998 -> 0;
998 -> 997;
999 -> 998;
1000 -> 989;
1001 -> 994;
1001 -> 1000;
1002 -> 994;
1002 -> 1000;
1003 -> 1000;
1004 -> 1001;
1004 -> 994;
1004 -> 1003;
1004 -> 1000;
1005 -> 994;
1005 -> 1000;
1006 -> 994;
1006 -> 1000;
1007 -> 0;
1007 -> 1000;
1008 -> 1000;
1009 -> 1000;
1010 -> 1005;
1010 -> 1000;
1011 -> 1010;
1012 -> 1010;
1013 -> 1011;
1013 -> 1012;
1014 -> 1013;
1014 -> 1012;
1015 -> 0;
1015 -> 1014;
1016 -> 1010;
1017 -> 1015;
1017 -> 1010;
1018 -> 1007;
1018 -> 1010;
1019 -> 1008;
1019 -> 1010;
1020 -> 1009;
1020 -> 1010;
1021 -> 1006;
1021 -> 1010;
1022 -> 1010;
1023 -> 1016;
1023 -> 1022;
1024 -> 1017;
1024 -> 1022;
1025 -> 1018;
1025 -> 1022;
1026 -> 1019;
1026 -> 1022;
1027 -> 1020;
1027 -> 1022;
1028 -> 1021;
1028 -> 1022;
1029 -> 1025;
1029 -> 1024;
1029 -> 1022;
1030 -> 1022;
1031 -> 1007;
1031 -> 1015;
1031 -> 1010;
1032 -> 1031;
1032 -> 0;
1032 -> 1000;
1033 -> 1031;
1033 -> 1000;
1034 -> 988;
1034 -> 989;
1035 -> 1034;
1035 -> 1033;
1035 -> 989;
1036 -> 988;
1036 -> 989;
1037 -> 0;
1037 -> 989;
1038 -> 988;
1038 -> 1037;
1038 -> 1035;
1038 -> 963;
1039 -> 988;
1039 -> 989;
1040 -> 988;
1040 -> 989;
1041 -> 988;
1041 -> 989;
1042 -> 988;
1042 -> 989;
1043 -> 988;
1043 -> 989;
1044 -> 988;
1044 -> 989;
1045 -> 988;
1045 -> 989;
1046 -> 1039;
1046 -> 989;
1047 -> 1040;
1047 -> 989;
1048 -> 1044;
1048 -> 989;
1049 -> 1041;
1049 -> 989;
1050 -> 1042;
1050 -> 989;
1051 -> 1043;
1051 -> 989;
1052 -> 989;
1053 -> 989;
1054 -> 1046;
1054 -> 1053;
1055 -> 1047;
1055 -> 1053;
1056 -> 1048;
1056 -> 1053;
1057 -> 1049;
1057 -> 1053;
1058 -> 1050;
1058 -> 1053;
1059 -> 1051;
1059 -> 1053;
1060 -> 1052;
1060 -> 1053;
1061 -> 1054;
1061 -> 1038;
1061 -> 1053;
1062 -> 1054;
1062 -> 1038;
1062 -> 1053;
1063 -> 1056;
1063 -> 1053;
1064 -> 1053;
1065 -> 1061;
1065 -> 1064;
1066 -> 1062;
1066 -> 1064;
1067 -> 1063;
1067 -> 1064;
1068 -> 1060;
1068 -> 1064;
1069 -> 1064;
1070 -> 1069;
1070 -> 1064;
1071 -> 1069;
1071 -> 1064;
1072 -> 1069;
1072 -> 1064;
1073 -> 1064;
1074 -> 1065;
1074 -> 1073;
1074 -> 1064;
1075 -> 1066;
1075 -> 1038;
1075 -> 1064;
1076 -> 1067;
1076 -> 1069;
1076 -> 1064;
1077 -> 1065;
1077 -> 1069;
1077 -> 1064;
1078 -> 1066;
1078 -> 1069;
1078 -> 1064;
1079 -> 1060;
1079 -> 1053;
1080 -> 1060;
1080 -> 1053;
1081 -> 1060;
1081 -> 1053;
1082 -> 1060;
1082 -> 1053;
1083 -> 1060;
1083 -> 1053;
1084 -> 1060;
1084 -> 1053;
1085 -> 1060;
1085 -> 1053;
1086 -> 1053;
1087 -> 1057;
1087 -> 1086;
1087 -> 1053;
1088 -> 1053;
1089 -> 1055;
1089 -> 1088;
1089 -> 1053;
1090 -> 1055;
1090 -> 1060;
1090 -> 1053;
1091 -> 1054;
1091 -> 1060;
1091 -> 1053;
1092 -> 1057;
1092 -> 1060;
1092 -> 1053;
1093 -> 1059;
1093 -> 1060;
1093 -> 1053;
1094 -> 1058;
1094 -> 1060;
1094 -> 1053;
1095 -> 988;
1095 -> 1052;
1095 -> 1038;
1095 -> 1069;
1095 -> 1070;
1095 -> 1071;
1095 -> 1077;
1095 -> 1072;
1095 -> 1076;
1095 -> 1078;
1095 -> 1079;
1095 -> 1091;
1095 -> 1080;
1095 -> 1090;
1095 -> 1081;
1095 -> 1092;
1095 -> 1082;
1095 -> 1093;
1095 -> 1083;
1095 -> 1094;
1095 -> 1084;
1095 -> 1085;
1095 -> 963;
1096 -> 1095;
1096 -> 1073;
1096 -> 1064;
1097 -> 1095;
1097 -> 1064;
1098 -> 965;
1098 -> 1095;
1098 -> 963;
1099 -> 963;
1100 -> 1095;
1100 -> 963;
1101 -> 1098;
1101 -> 1099;
1102 -> 1101;
1102 -> 1098;
1102 -> 1099;
1103 -> 963;
1104 -> 1102;
1104 -> 963;
1105 -> 963;
1106 -> 963;
1107 -> 963;
1108 -> 1107;
1108 -> 963;
1109 -> 963;
1110 -> 1109;
1110 -> 963;
1111 -> 963;
1112 -> 1111;
1112 -> 963;
1113 -> 964;
1113 -> 1104;
1113 -> 963;
1114 -> 963;
1115 -> 1113;
1115 -> 1114;
1115 -> 963;
1116 -> 1115;
1116 -> 963;
1117 -> 963;
1118 -> 1116;
1118 -> 1117;
1118 -> 963;
1119 -> 1118;
1119 -> 963;
1120 -> 963;
1121 -> 1119;
1121 -> 1120;
1121 -> 963;
1122 -> 1121;
1122 -> 963;
1123 -> 0;
1123 -> 963;
1124 -> 1123;
1124 -> 1122;
1124 -> 963;
1125 -> 964;
1125 -> 963;
1126 -> 1104;
1126 -> 963;
1127 -> 1095;
1127 -> 963;
1128 -> 963;
1129 -> 964;
1129 -> 1128;
1130 -> 1129;
1130 -> 1104;
1130 -> 1128;
1131 -> 1130;
1131 -> 963;
1132 -> 963;
1133 -> 964;
1133 -> 1132;
1134 -> 1133;
1134 -> 1104;
1134 -> 1132;
1135 -> 1134;
1135 -> 963;
1136 -> 970;
1136 -> 963;
1137 -> 967;
1137 -> 963;
1138 -> 1111;
1138 -> 963;
1139 -> 1107;
1139 -> 963;
1140 -> 1109;
1140 -> 963;
1141 -> 1124;
1141 -> 963;
1142 -> 966;
1142 -> 963;
1143 -> 1105;
1143 -> 963;
1144 -> 1106;
1144 -> 963;
1145 -> 1125;
1145 -> 1126;
1145 -> 1127;
1145 -> 1131;
1145 -> 1135;
1145 -> 1136;
1145 -> 1137;
1145 -> 1138;
1145 -> 1139;
1145 -> 1140;
1145 -> 1141;
1145 -> 1142;
1145 -> 1143;
1145 -> 1144;
1145 -> 965;
1145 -> 1104;
1145 -> 1095;
1145 -> 1112;
1145 -> 1108;
1145 -> 1110;
1145 -> 0;
1145 -> 963;
1146 -> 963;
1147 -> 1145;
1147 -> 1146;
1148 -> 1145;
1148 -> 1146;
1149 -> 1145;
1149 -> 1146;
1150 -> 1149;
1150 -> 1145;
1150 -> 1146;
1151 -> 1147;
1151 -> 1146;
1152 -> 1146;
1153 -> 1148;
1153 -> 1146;
1154 -> 1150;
1154 -> 1151;
1154 -> 1152;
1154 -> 1153;
1154 -> 1145;
1154 -> 1146;
1155 -> 1145;
1155 -> 1146;
1156 -> 1155;
1156 -> 1154;
1156 -> 1146;
1157 -> 1145;
1157 -> 1146;
1158 -> 1157;
1158 -> 1156;
1158 -> 1146;
1159 -> 1145;
1159 -> 1146;
1160 -> 1159;
1160 -> 1158;
1160 -> 1146;
1161 -> 1145;
1161 -> 1146;
1162 -> 1161;
1162 -> 1160;
1162 -> 1146;
1163 -> 1145;
1163 -> 1146;
1164 -> 1146;
1165 -> 1163;
1165 -> 1162;
1165 -> 1164;
1165 -> 1146;
1166 -> 1165;
1167 -> 1166;
1167 -> 1163;
1167 -> 1165;
1168 -> 1163;
1168 -> 1162;
1168 -> 1167;
1168 -> 1165;
1169 -> 1165;
1170 -> 1168;
1170 -> 1169;
1171 -> 1163;
1171 -> 1169;
1172 -> 1171;
1172 -> 1162;
1172 -> 1169;
1173 -> 1172;
1173 -> 1162;
1173 -> 1167;
1173 -> 1169;
1174 -> 1165;
1175 -> 1163;
1175 -> 1162;
1175 -> 1167;
1175 -> 1146;
1176 -> 1163;
1176 -> 1175;
1177 -> 1175;
1178 -> 1176;
1178 -> 1177;
1179 -> 1163;
1179 -> 1177;
1180 -> 1179;
1180 -> 1175;
1180 -> 1177;
1181 -> 1175;
1182 -> 1175;
1182 -> 963;
1183 -> 1175;
1183 -> 963;
1184 -> 1175;
1184 -> 963;
1185 -> 1095;
1185 -> 1184;
1185 -> 1175;
1185 -> 1183;
1185 -> 963;
1186 -> 963;
1187 -> 963;
1188 -> 1187;
1188 -> 963;
1189 -> 1175;
1189 -> 963;
1190 -> 1183;
1190 -> 963;
1191 -> 1185;
1191 -> 963;
1192 -> 1095;
1192 -> 963;
1193 -> 1095;
1193 -> 1185;
1193 -> 963;
1194 -> 967;
1194 -> 963;
1195 -> 970;
1195 -> 963;
1196 -> 1186;
1196 -> 963;
1197 -> 1187;
1197 -> 963;
1198 -> 1189;
1198 -> 1190;
1198 -> 1191;
1198 -> 1192;
1198 -> 1193;
1198 -> 1194;
1198 -> 1195;
1198 -> 1196;
1198 -> 1197;
1198 -> 1185;
1198 -> 1183;
1198 -> 1188;
1198 -> 963;
1199 -> 963;
1200 -> 963;
1201 -> 1200;
1201 -> 1175;
1201 -> 1198;
1201 -> 963;
1202 -> 1175;
1202 -> 1198;
1202 -> 1200;
1202 -> 1201;
1203 -> 1202;
1203 -> 1198;
1203 -> 1201;
1204 -> 1175;
1204 -> 1200;
1204 -> 1198;
1204 -> 1203;
1205 -> 1203;
1206 -> 1204;
1206 -> 1205;
1207 -> 1206;
1207 -> 1204;
1207 -> 1205;
1208 -> 1205;
1209 -> 1206;
1209 -> 1208;
1210 -> 1209;
1210 -> 1205;
1211 -> 1205;
1212 -> 1206;
1212 -> 1211;
1213 -> 1211;
1214 -> 1212;
1214 -> 1213;
1215 -> 1214;
1215 -> 1204;
1215 -> 1213;
1216 -> 1214;
1216 -> 1204;
1216 -> 1215;
1217 -> 1216;
1217 -> 1214;
1217 -> 1215;
1218 -> 1215;
1219 -> 1218;
1219 -> 1214;
1219 -> 1215;
1220 -> 1214;
1220 -> 1216;
1220 -> 1217;
1220 -> 1213;
1221 -> 1220;
1221 -> 1211;
1222 -> 1212;
1222 -> 1216;
1222 -> 1211;
1223 -> 1222;
1223 -> 1205;
1224 -> 1205;
1225 -> 1205;
1226 -> 1207;
1226 -> 1225;
1227 -> 1207;
1227 -> 1225;
1228 -> 1210;
1228 -> 1225;
1229 -> 1223;
1229 -> 1225;
1230 -> 1224;
1230 -> 1225;
1231 -> 1225;
1232 -> 1230;
1232 -> 1231;
1233 -> 1231;
1234 -> 1232;
1234 -> 1233;
1237 -> 1236;
1237 -> 1235;
1238 -> 1235;
1239 -> 1233;
1240 -> 1234;
1240 -> 1239;
1241 -> 1239;
1242 -> 1240;
1242 -> 1241;
1243 -> 1242;
1243 -> 1241;
1244 -> 1240;
1244 -> 1239;
1245 -> 1233;
1246 -> 1245;
1246 -> 1234;
1246 -> 1233;
1247 -> 1234;
1247 -> 1233;
1248 -> 1232;
1248 -> 1231;
1249 -> 1232;
1249 -> 1231;
1250 -> 1232;
1250 -> 1231;
1251 -> 1232;
1251 -> 1231;
1252 -> 1232;
1252 -> 1231;
1253 -> 1232;
1253 -> 1231;
1254 -> 1232;
1254 -> 1231;
1255 -> 1230;
1255 -> 1225;
1256 -> 1230;
1256 -> 1225;
1257 -> 1230;
1257 -> 1225;
1258 -> 1225;
1259 -> 1226;
1259 -> 1258;
1259 -> 1225;
1260 -> 1225;
1261 -> 1227;
1261 -> 1260;
1261 -> 1225;
1262 -> 1226;
1262 -> 1230;
1262 -> 1225;
1263 -> 1227;
1263 -> 1230;
1263 -> 1225;
1264 -> 1226;
1264 -> 1216;
1264 -> 1217;
1264 -> 1219;
1264 -> 1225;
1265 -> 1225;
1266 -> 1265;
1266 -> 1226;
1266 -> 1216;
1266 -> 1217;
1266 -> 1219;
1266 -> 1225;
1267 -> 1230;
1267 -> 1266;
1269 -> 1268;
1270 -> 1226;
1270 -> 1216;
1270 -> 1265;
1270 -> 1217;
1270 -> 1219;
1270 -> 1266;
1271 -> 1229;
1271 -> 1266;
1272 -> 1265;
1272 -> 1266;
1273 -> 1266;
1274 -> 1266;
1275 -> 1267;
1275 -> 1274;
1276 -> 1270;
1276 -> 1274;
1277 -> 1271;
1277 -> 1274;
1278 -> 1272;
1278 -> 1274;
1279 -> 1273;
1279 -> 1274;
1280 -> 1275;
1280 -> 1274;
1281 -> 1276;
1281 -> 1274;
1282 -> 1277;
1282 -> 1274;
1283 -> 1278;
1283 -> 1274;
1284 -> 1274;
1285 -> 1280;
1285 -> 1284;
1286 -> 1281;
1286 -> 1284;
1287 -> 1282;
1287 -> 1284;
1288 -> 1283;
1288 -> 1284;
1289 -> 1279;
1289 -> 1284;
1290 -> 1284;
1291 -> 1289;
1291 -> 1290;
1292 -> 1290;
1293 -> 1291;
1293 -> 1292;
1294 -> 1292;
1295 -> 1293;
1295 -> 1294;
1296 -> 1295;
1296 -> 1294;
1297 -> 1291;
1297 -> 1290;
1298 -> 1289;
1298 -> 1284;
1299 -> 1289;
1299 -> 1284;
1300 -> 1289;
1300 -> 1284;
1301 -> 1289;
1301 -> 1284;
1302 -> 1289;
1302 -> 1284;
1303 -> 1289;
1303 -> 1284;
1304 -> 1289;
1304 -> 1284;
1305 -> 1284;
1306 -> 1305;
1306 -> 1284;
1307 -> 1269;
1307 -> 1284;
1308 -> 1306;
1308 -> 1307;
1308 -> 1284;
1309 -> 1308;
1309 -> 1289;
1309 -> 1284;
1310 -> 1284;
1311 -> 1310;
1311 -> 1284;
1312 -> 1269;
1312 -> 1284;
1313 -> 1311;
1313 -> 1312;
1313 -> 1284;
1314 -> 1313;
1314 -> 1289;
1314 -> 1284;
1315 -> 1289;
1315 -> 1284;
1316 -> 1289;
1316 -> 1284;
1317 -> 1289;
1317 -> 1284;
1318 -> 1289;
1318 -> 1284;
1319 -> 1284;
1320 -> 1285;
1320 -> 1319;
1320 -> 1284;
1321 -> 1284;
1322 -> 1286;
1322 -> 1321;
1322 -> 1284;
1323 -> 1285;
1323 -> 1289;
1323 -> 1284;
1324 -> 1288;
1324 -> 1289;
1324 -> 1284;
1325 -> 1286;
1325 -> 1289;
1325 -> 1284;
1326 -> 1287;
1326 -> 1289;
1326 -> 1284;
1327 -> 1289;
1327 -> 1284;
1328 -> 1284;
1329 -> 1284;
1330 -> 1327;
1330 -> 1329;
1331 -> 1328;
1331 -> 1329;
1332 -> 1329;
1333 -> 1331;
1333 -> 1332;
1334 -> 1332;
1335 -> 1333;
1335 -> 1334;
1336 -> 1334;
1337 -> 1335;
1337 -> 1336;
1338 -> 1336;
1339 -> 1337;
1339 -> 1338;
1340 -> 1339;
1340 -> 1338;
1341 -> 1335;
1341 -> 1334;
1342 -> 1335;
1342 -> 1334;
1343 -> 1333;
1343 -> 1332;
1344 -> 1333;
1344 -> 1332;
1345 -> 1333;
1345 -> 1332;
1346 -> 1331;
1346 -> 1329;
1347 -> 1329;
1348 -> 1330;
1348 -> 1347;
1348 -> 1329;
1349 -> 1330;
1349 -> 1331;
1349 -> 1329;
1350 -> 1328;
1350 -> 1289;
1350 -> 1284;
1351 -> 1289;
1351 -> 1284;
1352 -> 1351;
1352 -> 1296;
1352 -> 1297;
1352 -> 1323;
1352 -> 1324;
1352 -> 1325;
1352 -> 1350;
1352 -> 1302;
1352 -> 1303;
1352 -> 1304;
1352 -> 1309;
1352 -> 1314;
1352 -> 1326;
1352 -> 1316;
1352 -> 1317;
1352 -> 1318;
1352 -> 1308;
1352 -> 1313;
1352 -> 1243;
1352 -> 1244;
1352 -> 1246;
1352 -> 1247;
1352 -> 1248;
1352 -> 1249;
1352 -> 1250;
1352 -> 1251;
1352 -> 1252;
1352 -> 1253;
1352 -> 1254;
1352 -> 1262;
1352 -> 1263;
1352 -> 1257;
1352 -> 1245;
1352 -> 1270;
1352 -> 1340;
1352 -> 1341;
1352 -> 1342;
1352 -> 1343;
1352 -> 1344;
1352 -> 1345;
1352 -> 1349;
1352 -> 1284;
1353 -> 1352;
1353 -> 1289;
1353 -> 1284;
1354 -> 1274;
1355 -> 1278;
1355 -> 1354;
1355 -> 1274;
1356 -> 1273;
1356 -> 1265;
1356 -> 1264;
1356 -> 1266;
1357 -> 1264;
1357 -> 1225;
1358 -> 1357;
1358 -> 1264;
1358 -> 1356;
1358 -> 1352;
1358 -> 1353;
1358 -> 1225;
1359 -> 1358;
1359 -> 1230;
1359 -> 1225;
1360 -> 1228;
1360 -> 1230;
1360 -> 1225;
1361 -> 1224;
1361 -> 1203;
1362 -> 1361;
1362 -> 1202;
1362 -> 1203;
1363 -> 1200;
1363 -> 1203;
1364 -> 1199;
1364 -> 1363;
1364 -> 1203;
1365 -> 1175;
1365 -> 1200;
1365 -> 1358;
1365 -> 1359;
1365 -> 1360;
1365 -> 1201;
1366 -> 1201;
1367 -> 1365;
1367 -> 1366;
1368 -> 1201;
1369 -> 1202;
1369 -> 1198;
1369 -> 1362;
1369 -> 1368;
1370 -> 1369;
1370 -> 1365;
1370 -> 1368;
1371 -> 1367;
1371 -> 1370;
1371 -> 1201;
1372 -> 1365;
1373 -> 1372;
1373 -> 1365;
1374 -> 1365;
1375 -> 1365;
1376 -> 1365;
1377 -> 1365;
1378 -> 1365;
1379 -> 1365;
1380 -> 1365;
1381 -> 1365;
1382 -> 1365;
1383 -> 1365;
1384 -> 1365;
1385 -> 1365;
1386 -> 1365;
1387 -> 1365;
1388 -> 1365;
1389 -> 1201;
1389 -> 1365;
1390 -> 1199;
1390 -> 1364;
1390 -> 1389;
1390 -> 1365;
1391 -> 1365;
1392 -> 1365;
1393 -> 1365;
1393 -> 1388;
1393 -> 1392;
1394 -> 1393;
1394 -> 1365;
1394 -> 1392;
1395 -> 1391;
1395 -> 1394;
1395 -> 1365;
1396 -> 1391;
1396 -> 1365;
1397 -> 1391;
1397 -> 1365;
1398 -> 1391;
1399 -> 1391;
1400 -> 1391;
1401 -> 1391;
1402 -> 1391;
1403 -> 1391;
1404 -> 1391;
1405 -> 1391;
1406 -> 1391;
1407 -> 1391;
1407 -> 1387;
1407 -> 1365;
1408 -> 1391;
1408 -> 1365;
1409 -> 1365;
1410 -> 1365;
1410 -> 1408;
1410 -> 1392;
1411 -> 1410;
1411 -> 1391;
1411 -> 1392;
1412 -> 1391;
1413 -> 1412;
1413 -> 1391;
1414 -> 1391;
1415 -> 1391;
1416 -> 1391;
1417 -> 1391;
1418 -> 1391;
1419 -> 1391;
1420 -> 1365;
1420 -> 1391;
1421 -> 1199;
1421 -> 1364;
1421 -> 1390;
1421 -> 1420;
1421 -> 1391;
1422 -> 1391;
1423 -> 1391;
1423 -> 1419;
1423 -> 1422;
1424 -> 1423;
1424 -> 1391;
1424 -> 1422;
1425 -> 1391;
1426 -> 964;
1426 -> 963;
1427 -> 965;
1427 -> 1391;
1427 -> 963;
1428 -> 964;
1428 -> 1391;
1428 -> 963;
1429 -> 963;
1431 -> 1095;
1431 -> 963;
1432 -> 963;
1433 -> 1426;
1433 -> 1432;
1434 -> 1427;
1434 -> 1432;
1435 -> 1428;
1435 -> 1432;
1436 -> 1431;
1436 -> 1432;
1437 -> 1429;
1437 -> 1432;
1438 -> 1432;
1439 -> 1437;
1439 -> 1438;
1440 -> 1438;
1441 -> 1439;
1441 -> 1440;
1442 -> 1440;
1443 -> 1441;
1443 -> 1442;
1444 -> 1442;
1445 -> 1443;
1445 -> 1444;
1446 -> 1445;
1446 -> 1444;
1447 -> 1443;
1447 -> 1442;
1448 -> 1440;
1449 -> 1448;
1449 -> 1441;
1449 -> 1440;
1450 -> 1441;
1450 -> 1440;
1451 -> 1439;
1451 -> 1438;
1452 -> 1439;
1452 -> 1438;
1453 -> 1439;
1453 -> 1438;
1454 -> 1439;
1454 -> 1438;
1455 -> 1439;
1455 -> 1438;
1456 -> 1439;
1456 -> 1438;
1457 -> 1439;
1457 -> 1438;
1458 -> 1437;
1458 -> 1432;
1459 -> 1437;
1459 -> 1432;
1460 -> 1437;
1460 -> 1432;
1461 -> 1437;
1461 -> 1432;
1462 -> 1437;
1462 -> 1432;
1463 -> 1437;
1463 -> 1432;
1464 -> 1437;
1464 -> 1432;
1465 -> 1437;
1465 -> 1432;
1466 -> 1437;
1466 -> 1432;
1467 -> 1432;
1468 -> 1467;
1468 -> 1437;
1468 -> 1432;
1469 -> 1432;
1470 -> 1469;
1470 -> 1437;
1470 -> 1432;
1471 -> 1432;
1472 -> 1471;
1472 -> 1437;
1472 -> 1432;
1473 -> 1437;
1473 -> 1432;
1474 -> 1437;
1474 -> 1432;
1475 -> 1432;
1476 -> 1433;
1476 -> 1475;
1476 -> 1432;
1477 -> 1432;
1478 -> 1434;
1478 -> 1477;
1478 -> 1432;
1479 -> 1435;
1479 -> 1432;
1480 -> 1436;
1480 -> 1095;
1480 -> 1432;
1481 -> 1433;
1481 -> 1437;
1481 -> 1432;
1482 -> 1434;
1482 -> 1437;
1482 -> 1432;
1483 -> 1432;
1484 -> 1483;
1484 -> 1436;
1484 -> 1095;
1484 -> 1432;
1485 -> 1437;
1485 -> 1432;
1486 -> 1432;
1487 -> 1433;
1487 -> 1486;
1488 -> 1487;
1488 -> 1428;
1488 -> 1486;
1489 -> 1488;
1489 -> 1432;
1490 -> 1435;
1490 -> 1432;
1491 -> 1432;
1492 -> 1432;
1493 -> 1485;
1493 -> 1492;
1494 -> 1489;
1494 -> 1492;
1495 -> 1490;
1495 -> 1492;
1496 -> 1491;
1496 -> 1492;
1497 -> 1492;
1498 -> 1496;
1498 -> 1497;
1499 -> 1497;
1500 -> 1498;
1500 -> 1499;
1501 -> 1499;
1502 -> 1500;
1502 -> 1501;
1503 -> 1502;
1503 -> 1501;
1504 -> 1498;
1504 -> 1497;
1505 -> 1496;
1505 -> 1492;
1506 -> 0;
1506 -> 1496;
1506 -> 1492;
1507 -> 1496;
1507 -> 1492;
1508 -> 1496;
1508 -> 1492;
1509 -> 1496;
1509 -> 1492;
1510 -> 1496;
1510 -> 1492;
1511 -> 1496;
1511 -> 1492;
1512 -> 1492;
1513 -> 1493;
1513 -> 1512;
1513 -> 1492;
1514 -> 1493;
1514 -> 1496;
1514 -> 1492;
1515 -> 1494;
1515 -> 1496;
1515 -> 1492;
1516 -> 1495;
1516 -> 1496;
1516 -> 1492;
1517 -> 1484;
1517 -> 1491;
1517 -> 1503;
1517 -> 1504;
1517 -> 1514;
1517 -> 1506;
1517 -> 1515;
1517 -> 1508;
1517 -> 1509;
1517 -> 1510;
1517 -> 1516;
1517 -> 1446;
1517 -> 1447;
1517 -> 1449;
1517 -> 1450;
1517 -> 1451;
1517 -> 1452;
1517 -> 1453;
1517 -> 1454;
1517 -> 1455;
1517 -> 1456;
1517 -> 1457;
1517 -> 1481;
1517 -> 1459;
1517 -> 1482;
1517 -> 1461;
1517 -> 1462;
1517 -> 1463;
1517 -> 1464;
1517 -> 1465;
1517 -> 1466;
1517 -> 1468;
1517 -> 1470;
1517 -> 1472;
1517 -> 1473;
1517 -> 1474;
1517 -> 1448;
1517 -> 1488;
1517 -> 1467;
1517 -> 1469;
1517 -> 1471;
1517 -> 1432;
1518 -> 1432;
1519 -> 1433;
1519 -> 1518;
1520 -> 1519;
1520 -> 1517;
1520 -> 1518;
1521 -> 1520;
1521 -> 1432;
1522 -> 1521;
1522 -> 1432;
1523 -> 1436;
1523 -> 1432;
1524 -> 1484;
1524 -> 1517;
1524 -> 1432;
1525 -> 1524;
1525 -> 1437;
1525 -> 1432;
1526 -> 1432;
1527 -> 1433;
1527 -> 1526;
1528 -> 1527;
1528 -> 1517;
1528 -> 1526;
1529 -> 1528;
1529 -> 1432;
1530 -> 1529;
1530 -> 1517;
1530 -> 1525;
1530 -> 1432;
1531 -> 963;
1532 -> 963;
1533 -> 1175;
1533 -> 1532;
1533 -> 963;
1534 -> 1533;
1535 -> 1175;
1535 -> 1517;
1535 -> 1525;
1535 -> 1534;
1536 -> 1535;
1536 -> 963;
1537 -> 963;
1538 -> 1536;
1538 -> 1537;
1539 -> 1429;
1539 -> 1537;
1540 -> 1537;
1541 -> 1539;
1541 -> 1517;
1541 -> 1540;
1541 -> 1537;
1542 -> 1538;
1542 -> 1539;
1542 -> 1537;
1543 -> 963;
1544 -> 963;
1545 -> 963;
1546 -> 1175;
1546 -> 1517;
1546 -> 1545;
1546 -> 963;
1547 -> 963;
1548 -> 1547;
1548 -> 963;
1549 -> 1429;
1549 -> 963;
1550 -> 1095;
1550 -> 963;
1551 -> 1546;
1551 -> 963;
1552 -> 1175;
1552 -> 963;
1553 -> 1544;
1553 -> 963;
1554 -> 1547;
1554 -> 963;
1555 -> 963;
1556 -> 1549;
1556 -> 1555;
1557 -> 1550;
1557 -> 1555;
1558 -> 1551;
1558 -> 1555;
1559 -> 1552;
1559 -> 1555;
1560 -> 1553;
1560 -> 1555;
1561 -> 1554;
1561 -> 1555;
1562 -> 1555;
1563 -> 1556;
1563 -> 1562;
1564 -> 1563;
1564 -> 1517;
1564 -> 1525;
1564 -> 1562;
1565 -> 1564;
1565 -> 1555;
1566 -> 1555;
1567 -> 1566;
1567 -> 1557;
1567 -> 1095;
1567 -> 1555;
1568 -> 1565;
1568 -> 1517;
1568 -> 1524;
1568 -> 1567;
1568 -> 1555;
1569 -> 1555;
1570 -> 1565;
1570 -> 1517;
1570 -> 1524;
1570 -> 1569;
1570 -> 1555;
1571 -> 1570;
1571 -> 1555;
1572 -> 1555;
1573 -> 1555;
1574 -> 1573;
1574 -> 1565;
1574 -> 1517;
1574 -> 1524;
1574 -> 1555;
1575 -> 1574;
1576 -> 1575;
1576 -> 1574;
1577 -> 1558;
1577 -> 1576;
1578 -> 1577;
1578 -> 1574;
1579 -> 1577;
1579 -> 1574;
1580 -> 1574;
1581 -> 1574;
1582 -> 1581;
1582 -> 1577;
1582 -> 1574;
1583 -> 1582;
1584 -> 1559;
1584 -> 1517;
1584 -> 1525;
1584 -> 1542;
1584 -> 1583;
1584 -> 1582;
1585 -> 1582;
1586 -> 1559;
1586 -> 1517;
1586 -> 1525;
1586 -> 1542;
1586 -> 1585;
1586 -> 1582;
1587 -> 1572;
1587 -> 1581;
1587 -> 1582;
1588 -> 1586;
1588 -> 1517;
1588 -> 1525;
1588 -> 1542;
1588 -> 1524;
1588 -> 1587;
1588 -> 1582;
1589 -> 1588;
1589 -> 1517;
1589 -> 1524;
1589 -> 1582;
1590 -> 1588;
1590 -> 1517;
1590 -> 1524;
1590 -> 1582;
1591 -> 1559;
1591 -> 1590;
1592 -> 1588;
1592 -> 1590;
1593 -> 1580;
1593 -> 1590;
1594 -> 1590;
1595 -> 1591;
1595 -> 1594;
1596 -> 1592;
1596 -> 1594;
1597 -> 1593;
1597 -> 1594;
1598 -> 1596;
1598 -> 1517;
1598 -> 1524;
1598 -> 1594;
1599 -> 1596;
1599 -> 1517;
1599 -> 1524;
1599 -> 1594;
1600 -> 1595;
1600 -> 1517;
1600 -> 1525;
1600 -> 1542;
1600 -> 1596;
1600 -> 1524;
1600 -> 1594;
1601 -> 1600;
1601 -> 1594;
1602 -> 1594;
1603 -> 1596;
1603 -> 1517;
1603 -> 1524;
1603 -> 1602;
1603 -> 1594;
1604 -> 1600;
1604 -> 1594;
1605 -> 1604;
1605 -> 1581;
1605 -> 1579;
1605 -> 1590;
1606 -> 1588;
1606 -> 1517;
1606 -> 1524;
1606 -> 1581;
1606 -> 1578;
1606 -> 1582;
1607 -> 1572;
1607 -> 1582;
1608 -> 1586;
1608 -> 1517;
1608 -> 1525;
1608 -> 1542;
1608 -> 1524;
1608 -> 1607;
1608 -> 1582;
1609 -> 1608;
1609 -> 1517;
1609 -> 1524;
1609 -> 1582;
1610 -> 1608;
1610 -> 1517;
1610 -> 1524;
1610 -> 1582;
1611 -> 1559;
1611 -> 1610;
1612 -> 1608;
1612 -> 1610;
1613 -> 1610;
1614 -> 1611;
1614 -> 1613;
1615 -> 1612;
1615 -> 1613;
1616 -> 1615;
1616 -> 1517;
1616 -> 1524;
1616 -> 1613;
1617 -> 1615;
1617 -> 1517;
1617 -> 1524;
1617 -> 1613;
1618 -> 1614;
1618 -> 1517;
1618 -> 1525;
1618 -> 1542;
1618 -> 1615;
1618 -> 1524;
1618 -> 1613;
1619 -> 1618;
1619 -> 1613;
1620 -> 1613;
1621 -> 1615;
1621 -> 1517;
1621 -> 1524;
1621 -> 1620;
1621 -> 1613;
1622 -> 1618;
1622 -> 1613;
1623 -> 1622;
1623 -> 1582;
1623 -> 1579;
1623 -> 1610;
1624 -> 1608;
1624 -> 1517;
1624 -> 1524;
1624 -> 1582;
1624 -> 1578;
1625 -> 1578;
1625 -> 1574;
1626 -> 1625;
1626 -> 1578;
1626 -> 1606;
1626 -> 1624;
1626 -> 1517;
1626 -> 1525;
1626 -> 1542;
1626 -> 1524;
1626 -> 1574;
1627 -> 1579;
1627 -> 1574;
1628 -> 1627;
1628 -> 1579;
1628 -> 1605;
1628 -> 1623;
1628 -> 1626;
1628 -> 1574;
1629 -> 1597;
1629 -> 1574;
1630 -> 1626;
1630 -> 1628;
1630 -> 1629;
1630 -> 1574;
1631 -> 1574;
1632 -> 1565;
1632 -> 1573;
1632 -> 1517;
1632 -> 1525;
1632 -> 1542;
1632 -> 1524;
1632 -> 1630;
1632 -> 1574;
1633 -> 1630;
1633 -> 1574;
1634 -> 1556;
1634 -> 1574;
1635 -> 1574;
1636 -> 1633;
1636 -> 1635;
1637 -> 1634;
1637 -> 1635;
1638 -> 1632;
1638 -> 1635;
1639 -> 1635;
1640 -> 1636;
1640 -> 1639;
1640 -> 1635;
1641 -> 1635;
1642 -> 1638;
1642 -> 1641;
1643 -> 1641;
1644 -> 1642;
1644 -> 1632;
1644 -> 1643;
1644 -> 1641;
1645 -> 1635;
1646 -> 1636;
1646 -> 1638;
1646 -> 1635;
1647 -> 1574;
1648 -> 1572;
1648 -> 1577;
1648 -> 1574;
1649 -> 1571;
1649 -> 1555;
1650 -> 963;
1651 -> 963;
1652 -> 1199;
1652 -> 1364;
1652 -> 1390;
1652 -> 1421;
1652 -> 1651;
1652 -> 963;
1653 -> 1175;
1653 -> 1652;
1654 -> 1199;
1654 -> 1652;
1655 -> 1429;
1655 -> 1652;
1656 -> 1175;
1656 -> 1652;
1657 -> 1560;
1657 -> 1652;
1658 -> 1652;
1659 -> 1654;
1659 -> 1658;
1660 -> 1655;
1660 -> 1658;
1661 -> 1656;
1661 -> 1658;
1662 -> 1656;
1662 -> 1658;
1663 -> 1657;
1663 -> 1658;
1664 -> 1658;
1665 -> 1659;
1665 -> 1199;
1665 -> 1364;
1665 -> 1390;
1665 -> 1421;
1665 -> 1664;
1665 -> 1658;
1666 -> 1658;
1667 -> 1660;
1667 -> 1666;
1668 -> 1667;
1668 -> 1632;
1668 -> 1666;
1669 -> 1668;
1669 -> 1658;
1670 -> 1658;
1671 -> 1669;
1671 -> 1670;
1671 -> 1658;
1672 -> 1659;
1672 -> 1658;
1673 -> 1661;
1673 -> 1672;
1673 -> 1632;
1673 -> 1646;
1674 -> 1672;
1675 -> 1673;
1675 -> 1674;
1675 -> 1672;
1676 -> 1661;
1676 -> 1672;
1676 -> 1673;
1676 -> 1675;
1677 -> 1676;
1677 -> 1675;
1678 -> 1662;
1678 -> 1675;
1679 -> 1662;
1679 -> 1676;
1679 -> 1672;
1679 -> 1675;
1680 -> 1663;
1680 -> 1675;
1681 -> 1660;
1681 -> 1675;
1682 -> 1675;
1683 -> 1677;
1683 -> 1682;
1684 -> 1678;
1684 -> 1682;
1685 -> 1679;
1685 -> 1682;
1686 -> 1680;
1686 -> 1682;
1687 -> 1681;
1687 -> 1682;
1688 -> 1685;
1688 -> 1676;
1688 -> 1682;
1689 -> 1685;
1689 -> 1676;
1689 -> 1682;
1690 -> 1685;
1690 -> 1676;
1690 -> 1682;
1691 -> 1682;
1692 -> 1690;
1692 -> 1691;
1693 -> 1692;
1693 -> 1676;
1693 -> 1691;
1694 -> 1693;
1694 -> 1682;
1695 -> 1694;
1695 -> 1676;
1695 -> 1682;
1696 -> 1682;
1697 -> 1682;
1698 -> 1697;
1698 -> 1695;
1698 -> 1682;
1699 -> 1683;
1699 -> 1676;
1699 -> 1697;
1699 -> 1698;
1700 -> 1699;
1700 -> 1698;
1701 -> 1699;
1701 -> 1698;
1702 -> 1698;
1703 -> 1683;
1703 -> 1702;
1704 -> 1703;
1704 -> 1699;
1704 -> 1702;
1705 -> 1704;
1705 -> 1698;
1706 -> 1696;
1706 -> 1698;
1707 -> 1700;
1707 -> 1698;
1708 -> 1698;
1709 -> 1699;
1709 -> 1698;
1710 -> 1705;
1710 -> 1706;
1710 -> 1707;
1710 -> 1708;
1710 -> 1709;
1710 -> 1699;
1710 -> 1700;
1710 -> 1698;
1711 -> 1698;
1712 -> 1698;
1713 -> 1712;
1713 -> 1699;
1713 -> 1698;
1714 -> 1700;
1714 -> 1698;
1715 -> 1714;
1715 -> 1710;
1715 -> 1698;
1716 -> 1701;
1716 -> 1698;
1717 -> 1711;
1717 -> 1698;
1718 -> 1715;
1718 -> 1716;
1718 -> 1717;
1718 -> 1698;
1719 -> 1694;
1719 -> 1697;
1719 -> 1676;
1719 -> 1718;
1719 -> 1698;
1720 -> 1718;
1720 -> 1698;
1721 -> 1687;
1721 -> 1698;
1722 -> 1698;
1723 -> 1720;
1723 -> 1722;
1724 -> 1721;
1724 -> 1722;
1725 -> 1719;
1725 -> 1722;
1726 -> 1722;
1727 -> 1723;
1727 -> 1726;
1727 -> 1722;
1728 -> 1722;
1729 -> 1725;
1729 -> 1728;
1730 -> 1728;
1731 -> 1729;
1731 -> 1719;
1731 -> 1730;
1731 -> 1728;
1732 -> 1722;
1733 -> 1698;
1734 -> 1696;
1734 -> 1699;
1734 -> 1698;
1735 -> 1675;
1736 -> 1686;
1736 -> 1723;
1737 -> 1660;
1737 -> 1723;
1738 -> 1723;
1739 -> 1737;
1739 -> 1723;
1740 -> 1723;
1741 -> 1723;
1742 -> 1723;
1743 -> 1723;
1743 -> 1742;
1744 -> 1743;
1744 -> 1723;
1744 -> 1742;
1745 -> 1738;
1745 -> 1744;
1746 -> 1743;
1746 -> 1744;
1747 -> 1723;
1747 -> 1744;
1748 -> 1744;
1749 -> 1745;
1749 -> 1748;
1750 -> 1746;
1750 -> 1748;
1751 -> 1747;
1751 -> 1748;
1752 -> 1750;
1752 -> 1723;
1752 -> 1748;
1753 -> 1750;
1753 -> 1723;
1753 -> 1748;
1754 -> 1749;
1754 -> 1748;
1755 -> 1748;
1756 -> 1750;
1756 -> 1723;
1756 -> 1755;
1756 -> 1748;
1757 -> 1749;
1757 -> 1742;
1757 -> 1723;
1757 -> 1744;
1758 -> 1723;
1758 -> 1742;
1758 -> 1744;
1759 -> 1736;
1759 -> 1744;
1760 -> 1744;
1761 -> 1758;
1761 -> 1760;
1762 -> 1759;
1762 -> 1760;
1763 -> 1760;
1764 -> 1760;
1765 -> 1762;
1765 -> 1764;
1765 -> 1760;
1766 -> 1765;
1767 -> 1761;
1767 -> 1760;
1768 -> 1760;
1769 -> 1760;
1770 -> 1767;
1770 -> 1769;
1771 -> 1768;
1771 -> 1769;
1772 -> 1769;
1773 -> 1771;
1773 -> 1769;
1774 -> 1771;
1774 -> 1769;
1775 -> 1769;
1776 -> 1770;
1776 -> 1775;
1776 -> 1769;
1777 -> 1770;
1777 -> 1771;
1777 -> 1769;
1778 -> 1771;
1778 -> 1769;
1779 -> 1769;
1780 -> 1769;
1781 -> 1778;
1781 -> 1780;
1782 -> 1779;
1782 -> 1780;
1783 -> 1779;
1783 -> 1780;
1784 -> 1780;
1785 -> 1783;
1785 -> 1780;
1786 -> 1783;
1786 -> 1780;
1787 -> 1783;
1787 -> 1780;
1788 -> 1780;
1789 -> 1781;
1789 -> 1788;
1789 -> 1780;
1790 -> 1780;
1791 -> 1782;
1791 -> 1790;
1791 -> 1780;
1792 -> 1781;
1792 -> 1783;
1792 -> 1780;
1793 -> 1782;
1793 -> 1783;
1793 -> 1780;
1794 -> 1783;
1794 -> 1780;
1795 -> 1780;
1796 -> 1780;
1797 -> 1794;
1797 -> 1796;
1798 -> 1795;
1798 -> 1796;
1799 -> 1796;
1800 -> 1798;
1800 -> 1796;
1801 -> 1798;
1801 -> 1796;
1802 -> 1796;
1803 -> 1797;
1803 -> 1802;
1803 -> 1796;
1804 -> 1797;
1804 -> 1798;
1804 -> 1796;
1805 -> 0;
1805 -> 1798;
1805 -> 1796;
1806 -> 1795;
1806 -> 1783;
1806 -> 1780;
1807 -> 1779;
1807 -> 1771;
1807 -> 1769;
1808 -> 1761;
1808 -> 1760;
1809 -> 1768;
1809 -> 1760;
1810 -> 1766;
1810 -> 1808;
1810 -> 1809;
1810 -> 1760;
1811 -> 1768;
1811 -> 1760;
1812 -> 1811;
1812 -> 1744;
1813 -> 1812;
1813 -> 1742;
1813 -> 1723;
1813 -> 1744;
1814 -> 1761;
1814 -> 1766;
1815 -> 1763;
1815 -> 1766;
1816 -> 1766;
1816 -> 1814;
1816 -> 1815;
1816 -> 1723;
1816 -> 1810;
1816 -> 1771;
1816 -> 1777;
1816 -> 1807;
1816 -> 1783;
1816 -> 1792;
1816 -> 1793;
1816 -> 1806;
1816 -> 1798;
1816 -> 1805;
1816 -> 1804;
1817 -> 1723;
1817 -> 1757;
1817 -> 1813;
1817 -> 1816;
1818 -> 1739;
1818 -> 1723;
1819 -> 1723;
1820 -> 1817;
1820 -> 1819;
1820 -> 1723;
1821 -> 1723;
1822 -> 1817;
1822 -> 1821;
1823 -> 1821;
1824 -> 1822;
1824 -> 1817;
1824 -> 1823;
1824 -> 1821;
1825 -> 1723;
1826 -> 1723;
1827 -> 1660;
1827 -> 1817;
1828 -> 1827;
1828 -> 1817;
1829 -> 1817;
1830 -> 1817;
1831 -> 1817;
1832 -> 1817;
1833 -> 1817;
1834 -> 1817;
1835 -> 1817;
1836 -> 1835;
1836 -> 1817;
1837 -> 1835;
1837 -> 1817;
1838 -> 1817;
1839 -> 1835;
1839 -> 1838;
1839 -> 1817;
1840 -> 1835;
1840 -> 1817;
1841 -> 1835;
1841 -> 1817;
1842 -> 1835;
1842 -> 1817;
1843 -> 1817;
1844 -> 1835;
1844 -> 1843;
1844 -> 1817;
1845 -> 1817;
1846 -> 1835;
1846 -> 1845;
1846 -> 1817;
1847 -> 1835;
1847 -> 1817;
1848 -> 1835;
1848 -> 1817;
1849 -> 1817;
1850 -> 1835;
1850 -> 1849;
1850 -> 1817;
1851 -> 1835;
1852 -> 1835;
1853 -> 1835;
1854 -> 1835;
1855 -> 1835;
1856 -> 1835;
1857 -> 1835;
1858 -> 1835;
1859 -> 1835;
1860 -> 1835;
1861 -> 1835;
1862 -> 1828;
1862 -> 1817;
1863 -> 1817;
1864 -> 1835;
1864 -> 1863;
1864 -> 1817;
1865 -> 1817;
1866 -> 1835;
1866 -> 1865;
1867 -> 1865;
1868 -> 1866;
1868 -> 1835;
1868 -> 1867;
1868 -> 1865;
1869 -> 1817;
1870 -> 1817;
1871 -> 1660;
1871 -> 1835;
1872 -> 1871;
1872 -> 1835;
1873 -> 1835;
1874 -> 1835;
1875 -> 1835;
1876 -> 1835;
1877 -> 1835;
1878 -> 1835;
1879 -> 1878;
1880 -> 1879;
1881 -> 1835;
1881 -> 1878;
1882 -> 1880;
1882 -> 1881;
1882 -> 1878;
1883 -> 1882;
1884 -> 1882;
1885 -> 1882;
1886 -> 1882;
1887 -> 1882;
1888 -> 1882;
1889 -> 1882;
1890 -> 1882;
1891 -> 1882;
1892 -> 1882;
1893 -> 1882;
1894 -> 1872;
1894 -> 1835;
1895 -> 1835;
1896 -> 1882;
1896 -> 1895;
1896 -> 1835;
1897 -> 1835;
1898 -> 1882;
1898 -> 1897;
1899 -> 1897;
1900 -> 1898;
1900 -> 1882;
1900 -> 1899;
1900 -> 1897;
1901 -> 1835;
1902 -> 1835;
1903 -> 1660;
1903 -> 1882;
1904 -> 1903;
1904 -> 1882;
1905 -> 1882;
1906 -> 1882;
1907 -> 1882;
1908 -> 1882;
1909 -> 1882;
1910 -> 1904;
1910 -> 1882;
1911 -> 1882;
1912 -> 1882;
1913 -> 1882;
1913 -> 1912;
1914 -> 1912;
1915 -> 1913;
1915 -> 1882;
1915 -> 1914;
1915 -> 1912;
1916 -> 1882;
1917 -> 1882;
1918 -> 1658;
1919 -> 1658;
1920 -> 1660;
1920 -> 1919;
1921 -> 1920;
1921 -> 1882;
1921 -> 1919;
1922 -> 1921;
1922 -> 1658;
1923 -> 1658;
1924 -> 1658;
1925 -> 1922;
1925 -> 1924;
1926 -> 1924;
1927 -> 1925;
1927 -> 1926;
1928 -> 1926;
1929 -> 1927;
1929 -> 1922;
1929 -> 1928;
1929 -> 1926;
1930 -> 1924;
1931 -> 1925;
1931 -> 1922;
1931 -> 1924;
1932 -> 1659;
1932 -> 1658;
1933 -> 1662;
1933 -> 1922;
1933 -> 1932;
1934 -> 1933;
1934 -> 1922;
1934 -> 1932;
1935 -> 1933;
1935 -> 1922;
1935 -> 1932;
1936 -> 1661;
1936 -> 1932;
1936 -> 1922;
1937 -> 1932;
1938 -> 1936;
1938 -> 1937;
1939 -> 1918;
1939 -> 1932;
1940 -> 1661;
1940 -> 1932;
1940 -> 1938;
1941 -> 1932;
1942 -> 1940;
1942 -> 1941;
1943 -> 1933;
1943 -> 1922;
1943 -> 1932;
1944 -> 1943;
1944 -> 1940;
1944 -> 1932;
1945 -> 1932;
1946 -> 1918;
1946 -> 1939;
1946 -> 1945;
1946 -> 1932;
1947 -> 1669;
1947 -> 1932;
1948 -> 1932;
1949 -> 1947;
1949 -> 1948;
1950 -> 1933;
1950 -> 1922;
1950 -> 1948;
1951 -> 1948;
1952 -> 1950;
1952 -> 1940;
1952 -> 1951;
1952 -> 1948;
1953 -> 1949;
1953 -> 1950;
1953 -> 1948;
1954 -> 1932;
1955 -> 1662;
1955 -> 1940;
1955 -> 1953;
1955 -> 1932;
1956 -> 1955;
1956 -> 1940;
1956 -> 1932;
1957 -> 1955;
1957 -> 1940;
1957 -> 1932;
1958 -> 1661;
1958 -> 1932;
1958 -> 1940;
1958 -> 1953;
1959 -> 1958;
1959 -> 1941;
1960 -> 1955;
1960 -> 1940;
1960 -> 1932;
1961 -> 1661;
1961 -> 1960;
1961 -> 1958;
1962 -> 1960;
1963 -> 1961;
1963 -> 1962;
1964 -> 1955;
1964 -> 1961;
1964 -> 1951;
1964 -> 1948;
1965 -> 1961;
1965 -> 1932;
1966 -> 1961;
1966 -> 1932;
1967 -> 1961;
1967 -> 1941;
1968 -> 1961;
1969 -> 1961;
1969 -> 1951;
1969 -> 1948;
1970 -> 1918;
1970 -> 1939;
1970 -> 1658;
1971 -> 1658;
1972 -> 1882;
1972 -> 1971;
1972 -> 1658;
1973 -> 1882;
1973 -> 1961;
1973 -> 1972;
1974 -> 1669;
1974 -> 1973;
1975 -> 1973;
1976 -> 1974;
1976 -> 1975;
1977 -> 1975;
1978 -> 1973;
1979 -> 1976;
1980 -> 1652;
1981 -> 964;
1981 -> 1961;
1981 -> 963;
1982 -> 964;
1982 -> 1961;
1982 -> 1981;
1983 -> 965;
1983 -> 1961;
1983 -> 1982;
1984 -> 1199;
1984 -> 1982;
1985 -> 1175;
1985 -> 1982;
1986 -> 1982;
1987 -> 1984;
1987 -> 1986;
1988 -> 1985;
1988 -> 1986;
1989 -> 1985;
1989 -> 1986;
1990 -> 1987;
1990 -> 1986;
1991 -> 1989;
1991 -> 1961;
1991 -> 1976;
1991 -> 1990;
1992 -> 1991;
1992 -> 1961;
1992 -> 1990;
1993 -> 1988;
1993 -> 1990;
1993 -> 1961;
1993 -> 1976;
1994 -> 1990;
1995 -> 1993;
1995 -> 1994;
1995 -> 1990;
1996 -> 1988;
1996 -> 1990;
1996 -> 1993;
1996 -> 1995;
1997 -> 1991;
1997 -> 1961;
1997 -> 1995;
1998 -> 1996;
1998 -> 1997;
1998 -> 1995;
1999 -> 1998;
1999 -> 1990;
2000 -> 1982;
2001 -> 1198;
2001 -> 1982;
2002 -> 1095;
2002 -> 1982;
2003 -> 1175;
2003 -> 1982;
2004 -> 966;
2004 -> 1998;
2004 -> 1982;
2005 -> 1535;
2005 -> 1982;
2006 -> 1429;
2006 -> 1982;
2007 -> 2005;
2007 -> 1982;
2008 -> 1649;
2008 -> 1982;
2009 -> 1982;
2010 -> 1429;
2010 -> 2009;
2011 -> 2009;
2012 -> 2010;
2012 -> 2011;
2013 -> 2012;
2013 -> 2004;
2013 -> 2011;
2014 -> 2013;
2014 -> 2009;
2015 -> 2009;
2016 -> 1982;
2017 -> 2014;
2017 -> 2016;
2018 -> 2016;
2019 -> 2017;
2019 -> 2018;
2020 -> 2018;
2021 -> 2019;
2021 -> 2014;
2021 -> 2020;
2021 -> 2018;
2022 -> 2016;
2023 -> 2017;
2023 -> 2014;
2023 -> 2016;
2024 -> 1982;
2025 -> 1429;
2025 -> 2024;
2026 -> 2024;
2027 -> 2025;
2027 -> 2026;
2028 -> 2027;
2028 -> 2014;
2028 -> 2026;
2029 -> 2024;
2030 -> 1982;
2031 -> 2028;
2031 -> 2030;
2032 -> 2030;
2033 -> 2031;
2033 -> 2032;
2034 -> 2032;
2035 -> 2033;
2035 -> 2028;
2035 -> 2034;
2035 -> 2032;
2036 -> 2030;
2037 -> 2031;
2037 -> 2028;
2037 -> 2030;
2038 -> 965;
2038 -> 2001;
2038 -> 2002;
2038 -> 2003;
2038 -> 2004;
2038 -> 2007;
2038 -> 2008;
2038 -> 2023;
2038 -> 2037;
2038 -> 2028;
2038 -> 2014;
2038 -> 1095;
2038 -> 1998;
2038 -> 1649;
2038 -> 1198;
2038 -> 1982;
2039 -> 964;
2039 -> 2038;
2039 -> 1982;
2040 -> 965;
2040 -> 1982;
2041 -> 965;
2041 -> 964;
2041 -> 1982;
2042 -> 1429;
2042 -> 964;
2042 -> 1982;
2043 -> 963;
2044 -> 966;
2044 -> 2038;
2044 -> 2041;
2044 -> 2042;
2044 -> 963;
2045 -> 967;
2045 -> 2044;
2045 -> 963;
2046 -> 2043;
2046 -> 959;
2047 -> 961;
2047 -> 2045;
2047 -> 2046;
2047 -> 959;
2048 -> 961;
2048 -> 2045;
2048 -> 959;
2049 -> 960;
2049 -> 2048;
2049 -> 959;
2050 -> 957;
2051 -> 956;
2051 -> 2048;
2051 -> 957;
2052 -> 956;
2052 -> 2048;
2052 -> 955;
2053 -> 2052;
2053 -> 953;
2054 -> 954;
2054 -> 2048;
2054 -> 953;
2055 -> 954;
2055 -> 2054;
2055 -> 953;
2056 -> 2055;
2056 -> 951;
2057 -> 2056;
2057 -> 1;
2058 -> 1;
2059 -> 2057;
2059 -> 2058;
2060 -> 2058;
2061 -> 2059;
2061 -> 2054;
2061 -> 2060;
2061 -> 2058;
2062 -> 2059;
2062 -> 2054;
2062 -> 2061;
2063 -> 2061;
2064 -> 2059;
2064 -> 2061;
2065 -> 2061;
2066 -> 2061;
2067 -> 2064;
2067 -> 2066;
2068 -> 2065;
2068 -> 2066;
2069 -> 0;
2069 -> 2068;
2069 -> 2066;
2070 -> 2067;
2070 -> 2068;
2070 -> 2066;
2071 -> 2062;
2071 -> 2061;
2072 -> 2071;
2072 -> 2065;
2073 -> 2065;
2074 -> 2072;
2074 -> 2071;
2074 -> 2073;
2074 -> 2065;
2075 -> 2074;
2076 -> 2072;
2076 -> 2074;
2077 -> 2074;
2078 -> 2072;
2078 -> 2077;
2079 -> 2077;
2080 -> 2078;
2080 -> 2071;
2080 -> 2079;
2081 -> 2080;
2081 -> 2071;
2081 -> 2079;
2082 -> 2081;
2082 -> 2077;
2083 -> 2082;
2083 -> 2074;
2084 -> 2074;
2085 -> 2083;
2085 -> 2084;
2086 -> 2084;
2087 -> 2085;
2087 -> 2086;
2088 -> 2087;
2088 -> 2084;
2089 -> 2085;
2089 -> 2084;
2090 -> 2084;
2092 -> 2091;
2094 -> 2093;
2095 -> 2075;
2095 -> 2074;
2096 -> 2074;
2097 -> 2074;
2098 -> 2076;
2098 -> 2097;
2099 -> 2076;
2099 -> 2097;
2100 -> 2088;
2100 -> 2097;
2101 -> 2095;
2101 -> 2097;
2102 -> 2096;
2102 -> 2097;
2103 -> 2097;
2104 -> 2102;
2104 -> 2097;
2105 -> 2102;
2105 -> 2097;
2106 -> 2102;
2106 -> 2097;
2107 -> 2102;
2107 -> 2097;
2108 -> 2102;
2108 -> 2097;
2109 -> 2102;
2109 -> 2097;
2112 -> 2111;
2112 -> 2110;
2114 -> 2113;
2114 -> 2110;
2115 -> 2110;
2118 -> 2117;
2118 -> 2116;
2120 -> 2119;
2120 -> 2116;
2121 -> 2116;
2123 -> 0;
2123 -> 2122;
2125 -> 0;
2125 -> 2124;
2126 -> 2125;
2126 -> 2122;
2127 -> 2122;
2129 -> 0;
2129 -> 2128;
2130 -> 0;
2130 -> 2128;
2131 -> 2128;
2132 -> 2121;
2132 -> 2102;
2132 -> 2097;
2133 -> 2097;
2134 -> 2100;
2134 -> 2133;
2134 -> 2097;
2135 -> 2098;
2135 -> 2102;
2135 -> 2097;
2136 -> 2099;
2136 -> 2102;
2136 -> 2097;
2137 -> 2100;
2137 -> 2102;
2137 -> 2097;
2138 -> 2100;
2138 -> 2088;
2138 -> 2097;
2139 -> 2138;
2139 -> 2088;
2140 -> 2101;
2140 -> 2139;
2140 -> 2075;
2140 -> 2088;
2140 -> 2138;
2141 -> 2075;
2141 -> 2140;
2141 -> 2074;
2142 -> 2075;
2142 -> 2140;
2142 -> 2074;
2143 -> 2072;
2143 -> 2142;
2143 -> 2074;
2144 -> 2096;
2144 -> 2074;
2145 -> 2074;
2146 -> 2143;
2146 -> 2144;
2146 -> 2145;
2146 -> 2102;
2146 -> 2135;
2146 -> 2136;
2146 -> 2137;
2146 -> 2107;
2146 -> 2108;
2146 -> 2109;
2146 -> 2132;
2146 -> 2142;
2146 -> 2118;
2146 -> 2120;
2146 -> 2116;
2146 -> 2074;
2147 -> 2072;
2147 -> 2146;
2147 -> 2065;
2148 -> 2061;
2149 -> 2065;
2149 -> 2148;
2150 -> 2065;
2150 -> 2148;
2151 -> 2147;
2151 -> 2148;
2152 -> 2065;
2152 -> 2148;
2153 -> 2148;
2154 -> 2151;
2154 -> 2147;
2154 -> 2153;
2154 -> 2148;
2155 -> 2148;
2156 -> 2151;
2156 -> 2147;
2156 -> 2155;
2156 -> 2148;
2157 -> 2152;
2157 -> 2155;
2157 -> 2148;
2158 -> 2156;
2158 -> 2157;
2158 -> 2148;
2159 -> 2158;
2159 -> 2148;
2160 -> 2059;
2160 -> 2159;
2160 -> 2061;
2161 -> 2159;
2161 -> 2061;
2162 -> 2061;
2163 -> 2059;
2163 -> 2160;
2163 -> 2058;
2164 -> 1;
2165 -> 1;
2166 -> 2164;
2166 -> 2165;
2167 -> 2163;
2167 -> 2165;
2168 -> 2165;
2169 -> 2168;
2169 -> 2165;
2170 -> 2165;
2171 -> 2167;
2171 -> 2170;
2172 -> 2170;
2173 -> 2171;
2173 -> 2160;
2173 -> 2172;
2173 -> 2170;
2174 -> 2171;
2174 -> 2160;
2174 -> 2173;
2175 -> 2173;
2176 -> 2171;
2176 -> 2175;
2177 -> 2175;
2178 -> 2176;
2178 -> 2160;
2178 -> 2177;
2178 -> 2175;
2179 -> 2178;
2180 -> 2176;
2180 -> 2160;
2180 -> 2178;
2181 -> 2179;
2181 -> 2178;
2182 -> 2178;
2183 -> 2181;
2183 -> 2182;
2184 -> 2176;
2184 -> 2182;
2185 -> 2184;
2185 -> 2160;
2185 -> 2182;
2186 -> 2182;
2187 -> 2185;
2187 -> 2186;
2188 -> 2185;
2188 -> 2186;
2189 -> 2187;
2189 -> 2186;
2190 -> 0;
2190 -> 2186;
2191 -> 2189;
2191 -> 2188;
2191 -> 2186;
2192 -> 2184;
2192 -> 2191;
2192 -> 2182;
2193 -> 2192;
2194 -> 2183;
2194 -> 2192;
2195 -> 2192;
2196 -> 2193;
2196 -> 2195;
2197 -> 2194;
2197 -> 2195;
2198 -> 2184;
2198 -> 2195;
2199 -> 2196;
2199 -> 2191;
2199 -> 2195;
2200 -> 2198;
2200 -> 2199;
2201 -> 2196;
2201 -> 2199;
2202 -> 2197;
2202 -> 2199;
2203 -> 2199;
2204 -> 2199;
2205 -> 2200;
2205 -> 2204;
2206 -> 2201;
2206 -> 2204;
2207 -> 2202;
2207 -> 2204;
2208 -> 2203;
2208 -> 2204;
2209 -> 2203;
2209 -> 2204;
2211 -> 2210;
2213 -> 2212;
2215 -> 2214;
2217 -> 2216;
2219 -> 2218;
2221 -> 2220;
2222 -> 0;
2224 -> 2211;
2224 -> 2223;
2225 -> 2213;
2225 -> 2223;
2226 -> 2215;
2226 -> 2223;
2227 -> 2217;
2227 -> 2223;
2228 -> 2219;
2228 -> 2223;
2229 -> 2221;
2229 -> 2223;
2230 -> 2222;
2230 -> 2223;
2231 -> 2223;
2232 -> 2231;
2232 -> 2223;
2233 -> 2231;
2233 -> 2223;
2234 -> 2231;
2234 -> 2223;
2235 -> 2231;
2235 -> 2223;
2236 -> 2231;
2236 -> 2223;
2237 -> 2231;
2237 -> 2223;
2238 -> 2231;
2238 -> 2223;
2239 -> 2225;
2239 -> 2223;
2240 -> 2223;
2241 -> 2224;
2241 -> 2231;
2241 -> 2223;
2242 -> 2225;
2242 -> 2231;
2242 -> 2223;
2243 -> 2226;
2243 -> 2231;
2243 -> 2223;
2244 -> 2227;
2244 -> 2231;
2244 -> 2223;
2245 -> 2228;
2245 -> 2231;
2245 -> 2223;
2246 -> 2229;
2246 -> 2231;
2246 -> 2223;
2247 -> 2230;
2247 -> 2231;
2247 -> 2223;
2248 -> 2231;
2248 -> 2247;
2248 -> 0;
2248 -> 2223;
2249 -> 2223;
2250 -> 2229;
2250 -> 2223;
2251 -> 2223;
2253 -> 2252;
2255 -> 2254;
2257 -> 2256;
2259 -> 2258;
2261 -> 2260;
2263 -> 2262;
2264 -> 0;
2266 -> 2253;
2266 -> 2265;
2267 -> 2255;
2267 -> 2265;
2268 -> 2257;
2268 -> 2265;
2269 -> 2259;
2269 -> 2265;
2270 -> 2261;
2270 -> 2265;
2271 -> 2263;
2271 -> 2265;
2272 -> 2264;
2272 -> 2265;
2273 -> 2265;
2274 -> 2273;
2274 -> 2265;
2275 -> 2273;
2275 -> 2265;
2276 -> 2273;
2276 -> 2265;
2277 -> 2273;
2277 -> 2265;
2278 -> 2273;
2278 -> 2265;
2279 -> 2273;
2279 -> 2265;
2280 -> 2273;
2280 -> 2265;
2281 -> 2267;
2281 -> 2266;
2281 -> 2265;
2282 -> 2265;
2283 -> 2266;
2283 -> 2273;
2283 -> 2265;
2284 -> 2267;
2284 -> 2273;
2284 -> 2265;
2285 -> 2268;
2285 -> 2273;
2285 -> 2265;
2286 -> 2269;
2286 -> 2273;
2286 -> 2265;
2287 -> 2270;
2287 -> 2273;
2287 -> 2265;
2288 -> 2271;
2288 -> 2273;
2288 -> 2265;
2289 -> 2272;
2289 -> 2273;
2289 -> 2265;
2290 -> 2273;
2290 -> 2289;
2290 -> 0;
2290 -> 2265;
2291 -> 2265;
2292 -> 2271;
2292 -> 2265;
2293 -> 2265;
2295 -> 2294;
2297 -> 2296;
2299 -> 2298;
2301 -> 2300;
2303 -> 2302;
2305 -> 2304;
2306 -> 0;
2308 -> 2295;
2308 -> 2307;
2309 -> 2297;
2309 -> 2307;
2310 -> 2299;
2310 -> 2307;
2311 -> 2301;
2311 -> 2307;
2312 -> 2303;
2312 -> 2307;
2313 -> 2305;
2313 -> 2307;
2314 -> 2306;
2314 -> 2307;
2315 -> 2307;
2316 -> 2315;
2316 -> 2307;
2317 -> 2315;
2317 -> 2307;
2318 -> 2315;
2318 -> 2307;
2319 -> 2315;
2319 -> 2307;
2320 -> 2315;
2320 -> 2307;
2321 -> 2315;
2321 -> 2307;
2322 -> 2315;
2322 -> 2307;
2323 -> 2309;
2323 -> 2308;
2323 -> 2307;
2324 -> 2307;
2325 -> 2308;
2325 -> 2315;
2325 -> 2307;
2326 -> 2309;
2326 -> 2315;
2326 -> 2307;
2327 -> 2310;
2327 -> 2315;
2327 -> 2307;
2328 -> 2311;
2328 -> 2315;
2328 -> 2307;
2329 -> 2312;
2329 -> 2315;
2329 -> 2307;
2330 -> 2313;
2330 -> 2315;
2330 -> 2307;
2331 -> 2314;
2331 -> 2315;
2331 -> 2307;
2332 -> 2315;
2332 -> 2331;
2332 -> 0;
2332 -> 2307;
2333 -> 2307;
2334 -> 2313;
2334 -> 2307;
2335 -> 2307;
2337 -> 2336;
2339 -> 2338;
2341 -> 2340;
2343 -> 2342;
2345 -> 2344;
2347 -> 2346;
2348 -> 0;
2350 -> 2337;
2350 -> 2349;
2351 -> 2339;
2351 -> 2349;
2352 -> 2341;
2352 -> 2349;
2353 -> 2343;
2353 -> 2349;
2354 -> 2345;
2354 -> 2349;
2355 -> 2347;
2355 -> 2349;
2356 -> 2348;
2356 -> 2349;
2357 -> 2349;
2358 -> 2357;
2358 -> 2349;
2359 -> 2357;
2359 -> 2349;
2360 -> 2357;
2360 -> 2349;
2361 -> 2357;
2361 -> 2349;
2362 -> 2357;
2362 -> 2349;
2363 -> 2357;
2363 -> 2349;
2364 -> 2357;
2364 -> 2349;
2365 -> 2351;
2365 -> 2350;
2365 -> 2349;
2366 -> 2349;
2367 -> 2350;
2367 -> 2357;
2367 -> 2349;
2368 -> 2351;
2368 -> 2357;
2368 -> 2349;
2369 -> 2352;
2369 -> 2357;
2369 -> 2349;
2370 -> 2353;
2370 -> 2357;
2370 -> 2349;
2371 -> 2354;
2371 -> 2357;
2371 -> 2349;
2372 -> 2355;
2372 -> 2357;
2372 -> 2349;
2373 -> 2356;
2373 -> 2357;
2373 -> 2349;
2374 -> 2357;
2374 -> 2373;
2374 -> 0;
2374 -> 2349;
2375 -> 2349;
2376 -> 2355;
2376 -> 2349;
2377 -> 2357;
2377 -> 2373;
2377 -> 0;
2377 -> 2376;
2378 -> 2377;
2378 -> 2357;
2378 -> 2376;
2379 -> 2349;
2381 -> 2380;
2383 -> 2382;
2385 -> 2384;
2387 -> 2386;
2389 -> 2388;
2391 -> 2390;
2392 -> 0;
2394 -> 2381;
2394 -> 2393;
2395 -> 2383;
2395 -> 2393;
2396 -> 2385;
2396 -> 2393;
2397 -> 2387;
2397 -> 2393;
2398 -> 2389;
2398 -> 2393;
2399 -> 2391;
2399 -> 2393;
2400 -> 2392;
2400 -> 2393;
2401 -> 2393;
2402 -> 2401;
2402 -> 2393;
2403 -> 2401;
2403 -> 2393;
2404 -> 2401;
2404 -> 2393;
2405 -> 2401;
2405 -> 2393;
2406 -> 2401;
2406 -> 2393;
2407 -> 2401;
2407 -> 2393;
2408 -> 2401;
2408 -> 2393;
2409 -> 2395;
2409 -> 2394;
2409 -> 2393;
2410 -> 2393;
2411 -> 2394;
2411 -> 2401;
2411 -> 2393;
2412 -> 2395;
2412 -> 2401;
2412 -> 2393;
2413 -> 2396;
2413 -> 2401;
2413 -> 2393;
2414 -> 2397;
2414 -> 2401;
2414 -> 2393;
2415 -> 2398;
2415 -> 2401;
2415 -> 2393;
2416 -> 2399;
2416 -> 2401;
2416 -> 2393;
2417 -> 2400;
2417 -> 2401;
2417 -> 2393;
2418 -> 2401;
2418 -> 2417;
2418 -> 0;
2418 -> 2393;
2419 -> 2393;
2420 -> 2399;
2420 -> 2393;
2421 -> 2393;
2423 -> 2422;
2425 -> 2424;
2427 -> 2426;
2429 -> 2428;
2431 -> 2430;
2433 -> 2432;
2434 -> 0;
2436 -> 2423;
2436 -> 2435;
2437 -> 2425;
2437 -> 2435;
2438 -> 2427;
2438 -> 2435;
2439 -> 2429;
2439 -> 2435;
2440 -> 2431;
2440 -> 2435;
2441 -> 2433;
2441 -> 2435;
2442 -> 2434;
2442 -> 2435;
2443 -> 2435;
2444 -> 2443;
2444 -> 2435;
2445 -> 2443;
2445 -> 2435;
2446 -> 2443;
2446 -> 2435;
2447 -> 2443;
2447 -> 2435;
2448 -> 2443;
2448 -> 2435;
2449 -> 2443;
2449 -> 2435;
2450 -> 2443;
2450 -> 2435;
2451 -> 2437;
2451 -> 2436;
2451 -> 2435;
2452 -> 2435;
2453 -> 2436;
2453 -> 2443;
2453 -> 2435;
2454 -> 2437;
2454 -> 2443;
2454 -> 2435;
2455 -> 2438;
2455 -> 2443;
2455 -> 2435;
2456 -> 2439;
2456 -> 2443;
2456 -> 2435;
2457 -> 2440;
2457 -> 2443;
2457 -> 2435;
2458 -> 2441;
2458 -> 2443;
2458 -> 2435;
2459 -> 2442;
2459 -> 2443;
2459 -> 2435;
2460 -> 2443;
2460 -> 2459;
2460 -> 0;
2460 -> 2435;
2461 -> 2435;
2462 -> 2441;
2462 -> 2435;
2463 -> 2435;
2465 -> 2464;
2467 -> 2466;
2469 -> 2468;
2471 -> 2470;
2473 -> 2472;
2475 -> 2474;
2476 -> 0;
2478 -> 2465;
2478 -> 2477;
2479 -> 2467;
2479 -> 2477;
2480 -> 2469;
2480 -> 2477;
2481 -> 2471;
2481 -> 2477;
2482 -> 2473;
2482 -> 2477;
2483 -> 2475;
2483 -> 2477;
2484 -> 2476;
2484 -> 2477;
2485 -> 2477;
2486 -> 2485;
2486 -> 2477;
2487 -> 2485;
2487 -> 2477;
2488 -> 2485;
2488 -> 2477;
2489 -> 2485;
2489 -> 2477;
2490 -> 2485;
2490 -> 2477;
2491 -> 2485;
2491 -> 2477;
2492 -> 2485;
2492 -> 2477;
2493 -> 2479;
2493 -> 2477;
2494 -> 2477;
2495 -> 2478;
2495 -> 2485;
2495 -> 2477;
2496 -> 2479;
2496 -> 2485;
2496 -> 2477;
2497 -> 2480;
2497 -> 2485;
2497 -> 2477;
2498 -> 2481;
2498 -> 2485;
2498 -> 2477;
2499 -> 2482;
2499 -> 2485;
2499 -> 2477;
2500 -> 2483;
2500 -> 2485;
2500 -> 2477;
2501 -> 2484;
2501 -> 2485;
2501 -> 2477;
2502 -> 2485;
2502 -> 2501;
2502 -> 0;
2502 -> 2477;
2503 -> 2477;
2504 -> 2483;
2504 -> 2477;
2505 -> 2477;
2507 -> 2506;
2509 -> 2508;
2511 -> 2510;
2513 -> 2512;
2515 -> 2514;
2517 -> 2516;
2518 -> 0;
2519 -> 2518;
2521 -> 2507;
2521 -> 2520;
2522 -> 2509;
2522 -> 2520;
2523 -> 2511;
2523 -> 2520;
2524 -> 2513;
2524 -> 2520;
2525 -> 2515;
2525 -> 2520;
2526 -> 2517;
2526 -> 2520;
2527 -> 2519;
2527 -> 2520;
2528 -> 2520;
2529 -> 2528;
2529 -> 2520;
2530 -> 2528;
2530 -> 2520;
2531 -> 2528;
2531 -> 2520;
2532 -> 2528;
2532 -> 2520;
2533 -> 2528;
2533 -> 2520;
2534 -> 2528;
2534 -> 2520;
2535 -> 2528;
2535 -> 2520;
2536 -> 2522;
2536 -> 2520;
2537 -> 2520;
2538 -> 2521;
2538 -> 2528;
2538 -> 2520;
2539 -> 2522;
2539 -> 2528;
2539 -> 2520;
2540 -> 2523;
2540 -> 2528;
2540 -> 2520;
2541 -> 2524;
2541 -> 2528;
2541 -> 2520;
2542 -> 2525;
2542 -> 2528;
2542 -> 2520;
2543 -> 2526;
2543 -> 2528;
2543 -> 2520;
2544 -> 2527;
2544 -> 2528;
2544 -> 2520;
2545 -> 2528;
2545 -> 2544;
2545 -> 0;
2545 -> 2520;
2546 -> 2520;
2547 -> 2526;
2547 -> 2520;
2548 -> 2528;
2548 -> 2544;
2548 -> 0;
2548 -> 2547;
2549 -> 2548;
2549 -> 2528;
2549 -> 2547;
2550 -> 2520;
2552 -> 2551;
2554 -> 2553;
2556 -> 2555;
2558 -> 2557;
2560 -> 2559;
2562 -> 2561;
2563 -> 0;
2565 -> 2552;
2565 -> 2564;
2566 -> 2554;
2566 -> 2564;
2567 -> 2556;
2567 -> 2564;
2568 -> 2558;
2568 -> 2564;
2569 -> 2560;
2569 -> 2564;
2570 -> 2562;
2570 -> 2564;
2571 -> 2563;
2571 -> 2564;
2572 -> 2564;
2573 -> 2572;
2573 -> 2564;
2574 -> 2572;
2574 -> 2564;
2575 -> 2572;
2575 -> 2564;
2576 -> 2572;
2576 -> 2564;
2577 -> 2572;
2577 -> 2564;
2578 -> 2572;
2578 -> 2564;
2579 -> 2572;
2579 -> 2564;
2580 -> 2566;
2580 -> 2564;
2581 -> 2564;
2582 -> 2565;
2582 -> 2572;
2582 -> 2564;
2583 -> 2566;
2583 -> 2572;
2583 -> 2564;
2584 -> 2567;
2584 -> 2572;
2584 -> 2564;
2585 -> 2568;
2585 -> 2572;
2585 -> 2564;
2586 -> 2569;
2586 -> 2572;
2586 -> 2564;
2587 -> 2570;
2587 -> 2572;
2587 -> 2564;
2588 -> 2571;
2588 -> 2572;
2588 -> 2564;
2589 -> 2572;
2589 -> 2588;
2589 -> 0;
2589 -> 2564;
2590 -> 2564;
2591 -> 2570;
2591 -> 2564;
2592 -> 2572;
2592 -> 2588;
2592 -> 0;
2592 -> 2591;
2593 -> 2592;
2593 -> 2572;
2593 -> 2591;
2594 -> 2564;
2596 -> 2595;
2598 -> 2597;
2600 -> 2599;
2602 -> 2601;
2604 -> 2603;
2606 -> 2605;
2607 -> 0;
2609 -> 2596;
2609 -> 2608;
2610 -> 2598;
2610 -> 2608;
2611 -> 2600;
2611 -> 2608;
2612 -> 2602;
2612 -> 2608;
2613 -> 2604;
2613 -> 2608;
2614 -> 2606;
2614 -> 2608;
2615 -> 2607;
2615 -> 2608;
2616 -> 2608;
2617 -> 2616;
2617 -> 2608;
2618 -> 2616;
2618 -> 2608;
2619 -> 2616;
2619 -> 2608;
2620 -> 2616;
2620 -> 2608;
2621 -> 2616;
2621 -> 2608;
2622 -> 2616;
2622 -> 2608;
2623 -> 2616;
2623 -> 2608;
2624 -> 2610;
2624 -> 2608;
2625 -> 2608;
2626 -> 2609;
2626 -> 2616;
2626 -> 2608;
2627 -> 2610;
2627 -> 2616;
2627 -> 2608;
2628 -> 2611;
2628 -> 2616;
2628 -> 2608;
2629 -> 2612;
2629 -> 2616;
2629 -> 2608;
2630 -> 2613;
2630 -> 2616;
2630 -> 2608;
2631 -> 2614;
2631 -> 2616;
2631 -> 2608;
2632 -> 2615;
2632 -> 2616;
2632 -> 2608;
2633 -> 2616;
2633 -> 2632;
2633 -> 0;
2633 -> 2608;
2634 -> 2608;
2635 -> 2614;
2635 -> 2608;
2636 -> 2608;
2638 -> 2637;
2640 -> 2639;
2642 -> 2641;
2644 -> 2643;
2646 -> 2645;
2648 -> 2647;
2649 -> 0;
2650 -> 2649;
2650 -> 0;
2651 -> 2650;
2653 -> 2638;
2653 -> 2652;
2654 -> 2640;
2654 -> 2652;
2655 -> 2642;
2655 -> 2652;
2656 -> 2644;
2656 -> 2652;
2657 -> 2646;
2657 -> 2652;
2658 -> 2648;
2658 -> 2652;
2659 -> 2651;
2659 -> 2652;
2660 -> 2652;
2661 -> 2660;
2661 -> 2652;
2662 -> 2660;
2662 -> 2652;
2663 -> 2660;
2663 -> 2652;
2664 -> 2660;
2664 -> 2652;
2665 -> 2660;
2665 -> 2652;
2666 -> 2660;
2666 -> 2652;
2667 -> 2660;
2667 -> 2652;
2668 -> 2654;
2668 -> 2652;
2669 -> 2652;
2670 -> 2653;
2670 -> 2660;
2670 -> 2652;
2671 -> 2654;
2671 -> 2660;
2671 -> 2652;
2672 -> 2655;
2672 -> 2660;
2672 -> 2652;
2673 -> 2656;
2673 -> 2660;
2673 -> 2652;
2674 -> 2657;
2674 -> 2660;
2674 -> 2652;
2675 -> 2658;
2675 -> 2660;
2675 -> 2652;
2676 -> 2659;
2676 -> 2660;
2676 -> 2652;
2677 -> 2660;
2677 -> 2676;
2677 -> 0;
2677 -> 2652;
2678 -> 2652;
2679 -> 2658;
2679 -> 2652;
2680 -> 2652;
2682 -> 2681;
2684 -> 2683;
2686 -> 2685;
2688 -> 2687;
2690 -> 2689;
2692 -> 2691;
2693 -> 0;
2694 -> 2693;
2694 -> 0;
2695 -> 2694;
2697 -> 2682;
2697 -> 2696;
2698 -> 2684;
2698 -> 2696;
2699 -> 2686;
2699 -> 2696;
2700 -> 2688;
2700 -> 2696;
2701 -> 2690;
2701 -> 2696;
2702 -> 2692;
2702 -> 2696;
2703 -> 2695;
2703 -> 2696;
2704 -> 2696;
2705 -> 2704;
2705 -> 2696;
2706 -> 2704;
2706 -> 2696;
2707 -> 2704;
2707 -> 2696;
2708 -> 2704;
2708 -> 2696;
2709 -> 2704;
2709 -> 2696;
2710 -> 2704;
2710 -> 2696;
2711 -> 2704;
2711 -> 2696;
2712 -> 2698;
2712 -> 2696;
2713 -> 2696;
2714 -> 2697;
2714 -> 2704;
2714 -> 2696;
2715 -> 2698;
2715 -> 2704;
2715 -> 2696;
2716 -> 2699;
2716 -> 2704;
2716 -> 2696;
2717 -> 2700;
2717 -> 2704;
2717 -> 2696;
2718 -> 2701;
2718 -> 2704;
2718 -> 2696;
2719 -> 2702;
2719 -> 2704;
2719 -> 2696;
2720 -> 2703;
2720 -> 2704;
2720 -> 2696;
2721 -> 2704;
2721 -> 2720;
2721 -> 0;
2721 -> 2696;
2722 -> 2696;
2723 -> 2702;
2723 -> 2696;
2724 -> 2704;
2724 -> 2720;
2724 -> 0;
2724 -> 2723;
2725 -> 2724;
2725 -> 2704;
2725 -> 2723;
2726 -> 2696;
2728 -> 2727;
2730 -> 2729;
2732 -> 2731;
2734 -> 2733;
2736 -> 2735;
2738 -> 2737;
2739 -> 0;
2740 -> 2739;
2740 -> 0;
2741 -> 2740;
2743 -> 2728;
2743 -> 2742;
2744 -> 2730;
2744 -> 2742;
2745 -> 2732;
2745 -> 2742;
2746 -> 2734;
2746 -> 2742;
2747 -> 2736;
2747 -> 2742;
2748 -> 2738;
2748 -> 2742;
2749 -> 2741;
2749 -> 2742;
2750 -> 2742;
2751 -> 2750;
2751 -> 2742;
2752 -> 2750;
2752 -> 2742;
2753 -> 2750;
2753 -> 2742;
2754 -> 2750;
2754 -> 2742;
2755 -> 2750;
2755 -> 2742;
2756 -> 2750;
2756 -> 2742;
2757 -> 2750;
2757 -> 2742;
2758 -> 2744;
2758 -> 2742;
2759 -> 2742;
2760 -> 2743;
2760 -> 2750;
2760 -> 2742;
2761 -> 2744;
2761 -> 2750;
2761 -> 2742;
2762 -> 2745;
2762 -> 2750;
2762 -> 2742;
2763 -> 2746;
2763 -> 2750;
2763 -> 2742;
2764 -> 2747;
2764 -> 2750;
2764 -> 2742;
2765 -> 2748;
2765 -> 2750;
2765 -> 2742;
2766 -> 2749;
2766 -> 2750;
2766 -> 2742;
2767 -> 2750;
2767 -> 2766;
2767 -> 0;
2767 -> 2742;
2768 -> 2742;
2769 -> 2748;
2769 -> 2742;
2770 -> 2750;
2770 -> 2766;
2770 -> 0;
2770 -> 2769;
2771 -> 2770;
2771 -> 2750;
2771 -> 2769;
2772 -> 2742;
2774 -> 2773;
2776 -> 2775;
2778 -> 2777;
2780 -> 2779;
2782 -> 2781;
2784 -> 2783;
2785 -> 0;
2786 -> 2785;
2786 -> 0;
2787 -> 2786;
2789 -> 2774;
2789 -> 2788;
2790 -> 2776;
2790 -> 2788;
2791 -> 2778;
2791 -> 2788;
2792 -> 2780;
2792 -> 2788;
2793 -> 2782;
2793 -> 2788;
2794 -> 2784;
2794 -> 2788;
2795 -> 2787;
2795 -> 2788;
2796 -> 2788;
2797 -> 2796;
2797 -> 2788;
2798 -> 2796;
2798 -> 2788;
2799 -> 2796;
2799 -> 2788;
2800 -> 2796;
2800 -> 2788;
2801 -> 2796;
2801 -> 2788;
2802 -> 2796;
2802 -> 2788;
2803 -> 2796;
2803 -> 2788;
2804 -> 2790;
2804 -> 2788;
2805 -> 2788;
2806 -> 2789;
2806 -> 2796;
2806 -> 2788;
2807 -> 2790;
2807 -> 2796;
2807 -> 2788;
2808 -> 2791;
2808 -> 2796;
2808 -> 2788;
2809 -> 2792;
2809 -> 2796;
2809 -> 2788;
2810 -> 2793;
2810 -> 2796;
2810 -> 2788;
2811 -> 2794;
2811 -> 2796;
2811 -> 2788;
2812 -> 2795;
2812 -> 2796;
2812 -> 2788;
2813 -> 2796;
2813 -> 2812;
2813 -> 0;
2813 -> 2788;
2814 -> 2788;
2815 -> 2794;
2815 -> 2788;
2816 -> 2788;
2818 -> 2817;
2820 -> 2819;
2822 -> 2821;
2824 -> 2823;
2826 -> 2825;
2828 -> 2827;
2829 -> 0;
2830 -> 2829;
2830 -> 0;
2831 -> 2830;
2833 -> 2818;
2833 -> 2832;
2834 -> 2820;
2834 -> 2832;
2835 -> 2822;
2835 -> 2832;
2836 -> 2824;
2836 -> 2832;
2837 -> 2826;
2837 -> 2832;
2838 -> 2828;
2838 -> 2832;
2839 -> 2831;
2839 -> 2832;
2840 -> 2832;
2841 -> 2840;
2841 -> 2832;
2842 -> 2840;
2842 -> 2832;
2843 -> 2840;
2843 -> 2832;
2844 -> 2840;
2844 -> 2832;
2845 -> 2840;
2845 -> 2832;
2846 -> 2840;
2846 -> 2832;
2847 -> 2840;
2847 -> 2832;
2848 -> 2834;
2848 -> 2833;
2848 -> 2832;
2849 -> 2832;
2850 -> 2833;
2850 -> 2840;
2850 -> 2832;
2851 -> 2834;
2851 -> 2840;
2851 -> 2832;
2852 -> 2835;
2852 -> 2840;
2852 -> 2832;
2853 -> 2836;
2853 -> 2840;
2853 -> 2832;
2854 -> 2837;
2854 -> 2840;
2854 -> 2832;
2855 -> 2838;
2855 -> 2840;
2855 -> 2832;
2856 -> 2839;
2856 -> 2840;
2856 -> 2832;
2857 -> 2840;
2857 -> 2856;
2857 -> 0;
2857 -> 2832;
2858 -> 2832;
2859 -> 2838;
2859 -> 2832;
2860 -> 2840;
2860 -> 2856;
2860 -> 0;
2860 -> 2859;
2861 -> 2860;
2861 -> 2840;
2861 -> 2859;
2862 -> 2832;
2864 -> 2863;
2866 -> 2865;
2868 -> 2867;
2870 -> 2869;
2872 -> 2871;
2874 -> 2873;
2875 -> 0;
2876 -> 2875;
2876 -> 0;
2877 -> 2876;
2879 -> 2864;
2879 -> 2878;
2880 -> 2866;
2880 -> 2878;
2881 -> 2868;
2881 -> 2878;
2882 -> 2870;
2882 -> 2878;
2883 -> 2872;
2883 -> 2878;
2884 -> 2874;
2884 -> 2878;
2885 -> 2877;
2885 -> 2878;
2886 -> 2878;
2887 -> 2886;
2887 -> 2878;
2888 -> 2886;
2888 -> 2878;
2889 -> 2886;
2889 -> 2878;
2890 -> 2886;
2890 -> 2878;
2891 -> 2886;
2891 -> 2878;
2892 -> 2886;
2892 -> 2878;
2893 -> 2886;
2893 -> 2878;
2894 -> 2880;
2894 -> 2879;
2894 -> 2878;
2895 -> 2878;
2896 -> 2879;
2896 -> 2886;
2896 -> 2878;
2897 -> 2880;
2897 -> 2886;
2897 -> 2878;
2898 -> 2881;
2898 -> 2886;
2898 -> 2878;
2899 -> 2882;
2899 -> 2886;
2899 -> 2878;
2900 -> 2883;
2900 -> 2886;
2900 -> 2878;
2901 -> 2884;
2901 -> 2886;
2901 -> 2878;
2902 -> 2885;
2902 -> 2886;
2902 -> 2878;
2903 -> 2886;
2903 -> 2902;
2903 -> 0;
2903 -> 2878;
2904 -> 2878;
2905 -> 2884;
2905 -> 2878;
2906 -> 2878;
2908 -> 2907;
2910 -> 2909;
2912 -> 2911;
2914 -> 2913;
2916 -> 2915;
2918 -> 2917;
2919 -> 0;
2920 -> 2919;
2920 -> 0;
2921 -> 2920;
2923 -> 2908;
2923 -> 2922;
2924 -> 2910;
2924 -> 2922;
2925 -> 2912;
2925 -> 2922;
2926 -> 2914;
2926 -> 2922;
2927 -> 2916;
2927 -> 2922;
2928 -> 2918;
2928 -> 2922;
2929 -> 2921;
2929 -> 2922;
2930 -> 2922;
2931 -> 2930;
2931 -> 2922;
2932 -> 2930;
2932 -> 2922;
2933 -> 2930;
2933 -> 2922;
2934 -> 2930;
2934 -> 2922;
2935 -> 2930;
2935 -> 2922;
2936 -> 2930;
2936 -> 2922;
2937 -> 2930;
2937 -> 2922;
2938 -> 2924;
2938 -> 2922;
2939 -> 2922;
2940 -> 2923;
2940 -> 2930;
2940 -> 2922;
2941 -> 2924;
2941 -> 2930;
2941 -> 2922;
2942 -> 2925;
2942 -> 2930;
2942 -> 2922;
2943 -> 2926;
2943 -> 2930;
2943 -> 2922;
2944 -> 2927;
2944 -> 2930;
2944 -> 2922;
2945 -> 2928;
2945 -> 2930;
2945 -> 2922;
2946 -> 2929;
2946 -> 2930;
2946 -> 2922;
2947 -> 2930;
2947 -> 2946;
2947 -> 0;
2947 -> 2922;
2948 -> 2922;
2949 -> 2928;
2949 -> 2922;
2950 -> 2922;
2952 -> 2951;
2954 -> 2953;
2956 -> 2955;
2958 -> 2957;
2960 -> 2959;
2962 -> 2961;
2963 -> 0;
2964 -> 2963;
2964 -> 0;
2965 -> 2964;
2967 -> 2952;
2967 -> 2966;
2968 -> 2954;
2968 -> 2966;
2969 -> 2956;
2969 -> 2966;
2970 -> 2958;
2970 -> 2966;
2971 -> 2960;
2971 -> 2966;
2972 -> 2962;
2972 -> 2966;
2973 -> 2965;
2973 -> 2966;
2974 -> 2966;
2975 -> 2974;
2975 -> 2966;
2976 -> 2974;
2976 -> 2966;
2977 -> 2974;
2977 -> 2966;
2978 -> 2974;
2978 -> 2966;
2979 -> 2974;
2979 -> 2966;
2980 -> 2974;
2980 -> 2966;
2981 -> 2974;
2981 -> 2966;
2982 -> 2968;
2982 -> 2966;
2983 -> 2966;
2984 -> 2967;
2984 -> 2974;
2984 -> 2966;
2985 -> 2968;
2985 -> 2974;
2985 -> 2966;
2986 -> 2969;
2986 -> 2974;
2986 -> 2966;
2987 -> 2970;
2987 -> 2974;
2987 -> 2966;
2988 -> 2971;
2988 -> 2974;
2988 -> 2966;
2989 -> 2972;
2989 -> 2974;
2989 -> 2966;
2990 -> 2973;
2990 -> 2974;
2990 -> 2966;
2991 -> 2974;
2991 -> 2990;
2991 -> 0;
2991 -> 2966;
2992 -> 2966;
2993 -> 2972;
2993 -> 2966;
2994 -> 2966;
2995 -> 2421;
2996 -> 2995;
2996 -> 2411;
2996 -> 2412;
2996 -> 2413;
2996 -> 2414;
2996 -> 2415;
2996 -> 2416;
2996 -> 2417;
2997 -> 2996;
2998 -> 0;
2999 -> 2998;
3000 -> 2999;
3001 -> 0;
3002 -> 3001;
3003 -> 0;
3004 -> 3003;
3005 -> 2205;
3005 -> 2204;
3006 -> 2206;
3006 -> 2204;
3007 -> 2207;
3007 -> 2204;
3008 -> 2208;
3008 -> 2204;
3009 -> 2204;
3010 -> 3005;
3010 -> 3009;
3011 -> 3006;
3011 -> 3009;
3012 -> 3007;
3012 -> 3009;
3013 -> 3008;
3013 -> 3009;
3014 -> 2209;
3014 -> 3009;
3016 -> 3015;
3018 -> 3017;
3020 -> 3019;
3022 -> 3021;
3024 -> 3022;
3024 -> 3023;
3025 -> 3024;
3027 -> 3026;
3029 -> 3028;
3031 -> 3030;
3033 -> 3032;
3043 -> 3035;
3043 -> 3034;
3044 -> 3036;
3044 -> 3034;
3045 -> 3037;
3045 -> 3034;
3046 -> 3038;
3046 -> 3034;
3047 -> 3039;
3047 -> 3034;
3048 -> 3040;
3048 -> 3034;
3049 -> 3041;
3049 -> 3034;
3050 -> 3042;
3050 -> 3034;
3051 -> 3034;
3052 -> 3013;
3052 -> 3009;
3053 -> 3009;
3054 -> 3052;
3054 -> 3053;
3055 -> 3014;
3055 -> 3053;
3057 -> 3056;
3059 -> 0;
3061 -> 3059;
3061 -> 3060;
3062 -> 3060;
3063 -> 3062;
3063 -> 3060;
3064 -> 3061;
3064 -> 3062;
3064 -> 3060;
3065 -> 3060;
3066 -> 0;
3068 -> 3066;
3068 -> 3067;
3069 -> 3067;
3070 -> 3069;
3070 -> 3067;
3071 -> 3068;
3071 -> 3069;
3071 -> 3067;
3072 -> 3067;
3073 -> 0;
3075 -> 3073;
3075 -> 3074;
3076 -> 3074;
3077 -> 3076;
3077 -> 3074;
3078 -> 3075;
3078 -> 3076;
3078 -> 3074;
3079 -> 3074;
3080 -> 0;
3082 -> 3080;
3082 -> 3081;
3083 -> 3081;
3084 -> 3083;
3084 -> 3081;
3085 -> 3082;
3085 -> 3083;
3085 -> 3081;
3086 -> 3081;
3087 -> 0;
3089 -> 3087;
3089 -> 3088;
3090 -> 3088;
3091 -> 3090;
3091 -> 3088;
3092 -> 3089;
3092 -> 3090;
3092 -> 3088;
3093 -> 3088;
3094 -> 0;
3096 -> 3094;
3096 -> 3095;
3097 -> 3095;
3098 -> 3097;
3098 -> 3095;
3099 -> 3096;
3099 -> 3097;
3099 -> 3095;
3100 -> 3095;
3101 -> 0;
3103 -> 3101;
3103 -> 3102;
3104 -> 3102;
3105 -> 3104;
3105 -> 3102;
3106 -> 3103;
3106 -> 3104;
3106 -> 3102;
3107 -> 3102;
3108 -> 0;
3110 -> 3108;
3110 -> 3109;
3111 -> 3109;
3112 -> 3111;
3112 -> 3109;
3113 -> 3110;
3113 -> 3111;
3113 -> 3109;
3114 -> 3109;
3115 -> 3114;
3117 -> 3058;
3117 -> 3115;
3117 -> 3116;
3117 -> 3111;
3117 -> 3112;
3117 -> 3113;
3118 -> 3117;
3120 -> 3119;
3121 -> 3120;
3121 -> 3119;
3122 -> 3120;
3122 -> 3119;
3123 -> 3120;
3123 -> 3119;
3124 -> 3119;
3126 -> 3125;
3127 -> 3053;
3128 -> 3055;
3128 -> 3127;
3129 -> 3127;
3130 -> 3128;
3130 -> 3127;
3131 -> 3128;
3131 -> 3127;
3132 -> 3055;
3132 -> 3053;
3133 -> 3055;
3133 -> 3053;
3134 -> 3055;
3134 -> 3053;
3135 -> 3054;
3135 -> 3055;
3135 -> 3053;
3136 -> 3014;
3136 -> 3009;
3137 -> 3014;
3137 -> 3009;
3138 -> 3014;
3138 -> 3009;
3140 -> 3139;
3141 -> 3140;
3141 -> 3139;
3142 -> 3140;
3142 -> 3139;
3143 -> 3140;
3143 -> 3139;
3144 -> 3140;
3144 -> 3139;
3145 -> 3140;
3145 -> 3139;
3146 -> 3140;
3146 -> 3139;
3147 -> 3139;
3148 -> 3147;
3148 -> 3014;
3148 -> 3009;
3149 -> 3014;
3149 -> 3009;
3150 -> 3014;
3150 -> 3009;
3151 -> 3014;
3151 -> 3009;
3152 -> 3014;
3152 -> 3009;
3153 -> 3014;
3153 -> 3009;
3154 -> 2121;
3154 -> 3014;
3154 -> 3009;
3155 -> 3014;
3155 -> 3009;
3156 -> 3014;
3156 -> 3009;
3157 -> 3010;
3157 -> 3014;
3157 -> 3009;
3158 -> 3011;
3158 -> 3014;
3158 -> 3009;
3159 -> 3011;
3159 -> 2191;
3159 -> 3009;
3160 -> 3009;
3161 -> 3159;
3161 -> 3160;
3162 -> 3161;
3162 -> 3160;
3163 -> 0;
3163 -> 3162;
3164 -> 3163;
3164 -> 3009;
3165 -> 3012;
3165 -> 3009;
3166 -> 3009;
3167 -> 3164;
3167 -> 3166;
3168 -> 3165;
3168 -> 3166;
3169 -> 3014;
3169 -> 3166;
3170 -> 3166;
3171 -> 3169;
3171 -> 3170;
3172 -> 3171;
3172 -> 3157;
3172 -> 3170;
3173 -> 3172;
3173 -> 3166;
3174 -> 3166;
3175 -> 0;
3175 -> 3166;
3176 -> 3166;
3177 -> 3173;
3177 -> 3176;
3178 -> 0;
3178 -> 3176;
3179 -> 3178;
3179 -> 3166;
3180 -> 0;
3180 -> 3179;
3181 -> 3167;
3181 -> 3166;
3182 -> 0;
3182 -> 3181;
3183 -> 3175;
3183 -> 3182;
3183 -> 3181;
3184 -> 3181;
3185 -> 3169;
3185 -> 3184;
3186 -> 3184;
3187 -> 3185;
3187 -> 3158;
3187 -> 2191;
3187 -> 3186;
3187 -> 3184;
3188 -> 3187;
3188 -> 3181;
3189 -> 3183;
3189 -> 0;
3189 -> 3188;
3190 -> 3166;
3191 -> 3180;
3191 -> 3166;
3192 -> 3189;
3192 -> 3166;
3193 -> 3168;
3193 -> 3166;
3194 -> 3190;
3194 -> 3166;
3195 -> 3166;
3196 -> 3191;
3196 -> 3195;
3197 -> 3192;
3197 -> 3195;
3198 -> 3193;
3198 -> 3195;
3199 -> 3194;
3199 -> 3195;
3200 -> 3169;
3200 -> 3195;
3201 -> 3195;
3202 -> 0;
3202 -> 3195;
3203 -> 3200;
3203 -> 3158;
3203 -> 3187;
3203 -> 3195;
3204 -> 3195;
3205 -> 3195;
3206 -> 3205;
3206 -> 3203;
3206 -> 3195;
3207 -> 3200;
3207 -> 3158;
3207 -> 3187;
3207 -> 3205;
3207 -> 3206;
3208 -> 3207;
3208 -> 3206;
3209 -> 3206;
3210 -> 3201;
3210 -> 3206;
3211 -> 3208;
3211 -> 3210;
3212 -> 3197;
3212 -> 3210;
3213 -> 3200;
3213 -> 3158;
3213 -> 3207;
3213 -> 3205;
3213 -> 3210;
3214 -> 3198;
3214 -> 3210;
3215 -> 3210;
3216 -> 3201;
3216 -> 3210;
3217 -> 3210;
3218 -> 3211;
3218 -> 3217;
3219 -> 3212;
3219 -> 3217;
3220 -> 3213;
3220 -> 3217;
3221 -> 3214;
3221 -> 3217;
3222 -> 3215;
3222 -> 3217;
3223 -> 3216;
3223 -> 3217;
3224 -> 3217;
3225 -> 3218;
3225 -> 3219;
3225 -> 3217;
3226 -> 3218;
3226 -> 3219;
3226 -> 3217;
3227 -> 3225;
3227 -> 0;
3227 -> 3217;
3228 -> 3226;
3228 -> 0;
3228 -> 3217;
3229 -> 3217;
3230 -> 3226;
3230 -> 3217;
3231 -> 3224;
3231 -> 3210;
3232 -> 3230;
3232 -> 3231;
3233 -> 3200;
3233 -> 3231;
3234 -> 3231;
3235 -> 3231;
3236 -> 3232;
3236 -> 3235;
3237 -> 3233;
3237 -> 3235;
3238 -> 3234;
3238 -> 3235;
3239 -> 3236;
3239 -> 3235;
3240 -> 3235;
3241 -> 3239;
3241 -> 3240;
3242 -> 3241;
3242 -> 0;
3242 -> 3240;
3243 -> 3242;
3244 -> 3235;
3245 -> 3237;
3245 -> 3244;
3246 -> 0;
3246 -> 3244;
3247 -> 3246;
3247 -> 3235;
3248 -> 3238;
3248 -> 3247;
3248 -> 3235;
3249 -> 3236;
3249 -> 0;
3249 -> 3235;
3250 -> 3235;
3251 -> 3248;
3251 -> 3249;
3251 -> 3235;
3252 -> 3236;
3252 -> 0;
3252 -> 3251;
3253 -> 3235;
3254 -> 3253;
3254 -> 3231;
3255 -> 3231;
3256 -> 3254;
3256 -> 3255;
3256 -> 3231;
3257 -> 3202;
3257 -> 0;
3257 -> 3206;
3258 -> 3230;
3258 -> 3257;
3259 -> 3258;
3259 -> 0;
3259 -> 3195;
3260 -> 3195;
3261 -> 3204;
3261 -> 3195;
3262 -> 3195;
3263 -> 3200;
3263 -> 3262;
3264 -> 3263;
3264 -> 3158;
3264 -> 3213;
3264 -> 3262;
3265 -> 3264;
3265 -> 3195;
3266 -> 0;
3266 -> 3195;
3267 -> 3258;
3267 -> 3195;
3269 -> 3268;
3270 -> 3169;
3270 -> 3166;
3271 -> 3267;
3271 -> 3166;
3272 -> 3168;
3272 -> 3166;
3273 -> 3166;
3274 -> 3270;
3274 -> 3273;
3275 -> 3271;
3275 -> 3273;
3276 -> 3272;
3276 -> 3273;
3277 -> 3274;
3277 -> 3273;
3278 -> 3275;
3278 -> 3273;
3279 -> 3273;
3280 -> 3274;
3280 -> 3279;
3281 -> 3280;
3281 -> 3158;
3281 -> 3213;
3281 -> 3279;
3282 -> 3281;
3282 -> 3273;
3283 -> 3273;
3284 -> 3276;
3284 -> 3273;
3285 -> 3273;
3286 -> 3277;
3286 -> 3285;
3287 -> 3278;
3287 -> 3285;
3288 -> 3282;
3288 -> 3285;
3289 -> 3284;
3289 -> 3285;
3290 -> 3287;
3290 -> 0;
3290 -> 3285;
3291 -> 3166;
3292 -> 3267;
3292 -> 0;
3292 -> 3166;
3293 -> 3166;
3294 -> 3224;
3294 -> 3292;
3294 -> 3166;
3295 -> 0;
3295 -> 3166;
3296 -> 3267;
3296 -> 3295;
3296 -> 3166;
3297 -> 3224;
3297 -> 3296;
3297 -> 3166;
3298 -> 3167;
3298 -> 3166;
3299 -> 3267;
3299 -> 3166;
3300 -> 3011;
3300 -> 3282;
3300 -> 3009;
3301 -> 3300;
3301 -> 3282;
3302 -> 3012;
3302 -> 3301;
3302 -> 2179;
3302 -> 3282;
3302 -> 3300;
3303 -> 3299;
3303 -> 0;
3303 -> 3009;
3304 -> 3009;
3305 -> 3303;
3305 -> 3304;
3305 -> 3009;
3306 -> 3299;
3306 -> 3014;
3306 -> 3009;
3307 -> 3303;
3307 -> 0;
3307 -> 3009;
3308 -> 3307;
3308 -> 3009;
3309 -> 3308;
3310 -> 3014;
3310 -> 3309;
3311 -> 3309;
3312 -> 3310;
3312 -> 3311;
3313 -> 3312;
3313 -> 3157;
3313 -> 3311;
3314 -> 3313;
3314 -> 3309;
3315 -> 3309;
3316 -> 3314;
3316 -> 3315;
3317 -> 0;
3317 -> 3315;
3318 -> 3317;
3318 -> 3309;
3319 -> 3309;
3320 -> 3310;
3320 -> 3319;
3321 -> 3320;
3321 -> 3157;
3321 -> 3319;
3322 -> 3321;
3322 -> 3309;
3323 -> 3309;
3324 -> 3322;
3324 -> 3323;
3325 -> 3323;
3326 -> 3324;
3326 -> 3302;
3326 -> 3325;
3327 -> 3326;
3327 -> 3302;
3327 -> 3325;
3328 -> 3309;
3329 -> 3327;
3329 -> 3328;
3330 -> 3328;
3331 -> 3329;
3331 -> 3330;
3332 -> 3331;
3332 -> 3328;
3333 -> 3329;
3333 -> 3328;
3334 -> 3318;
3334 -> 3332;
3334 -> 3309;
3335 -> 0;
3335 -> 3334;
3337 -> 3336;
3339 -> 3338;
3340 -> 3337;
3340 -> 3339;
3341 -> 3340;
3343 -> 3342;
3344 -> 3341;
3344 -> 3343;
3345 -> 3344;
3347 -> 3346;
3348 -> 3345;
3348 -> 3347;
3349 -> 3348;
3351 -> 3350;
3352 -> 3349;
3352 -> 3351;
3353 -> 3352;
3355 -> 3354;
3356 -> 3353;
3356 -> 3355;
3357 -> 3356;
3359 -> 3358;
3361 -> 3360;
3361 -> 3339;
3363 -> 3361;
3363 -> 3362;
3364 -> 3363;
3366 -> 3365;
3366 -> 3343;
3368 -> 3366;
3368 -> 3367;
3369 -> 3368;
3371 -> 3370;
3371 -> 3355;
3373 -> 3371;
3373 -> 3372;
3374 -> 3373;
3376 -> 3375;
3376 -> 3359;
3378 -> 3376;
3378 -> 3377;
3379 -> 3378;
3381 -> 3380;
3381 -> 3345;
3382 -> 3381;
3384 -> 3383;
3384 -> 3349;
3385 -> 3384;
3386 -> 3364;
3387 -> 3379;
3388 -> 3335;
3388 -> 3009;
3389 -> 3163;
3389 -> 3009;
3390 -> 3009;
3391 -> 3009;
3392 -> 3388;
3392 -> 3391;
3393 -> 3389;
3393 -> 3391;
3394 -> 3390;
3394 -> 3391;
3395 -> 3392;
3395 -> 3364;
3395 -> 3391;
3396 -> 3395;
3396 -> 3337;
3396 -> 3391;
3397 -> 3393;
3397 -> 3374;
3397 -> 3391;
3398 -> 3397;
3398 -> 3353;
3398 -> 3391;
3399 -> 3396;
3399 -> 3398;
3399 -> 3391;
3400 -> 3399;
3400 -> 3394;
3400 -> 3391;
3401 -> 3390;
3401 -> 3014;
3401 -> 3009;
3402 -> 3009;
3403 -> 3014;
3403 -> 3402;
3404 -> 3403;
3404 -> 3157;
3404 -> 3402;
3405 -> 3404;
3405 -> 3009;
3406 -> 3405;
3406 -> 3009;
3407 -> 3009;
3408 -> 0;
3408 -> 3009;
3409 -> 3009;
3410 -> 3408;
3410 -> 3409;
3411 -> 3014;
3411 -> 3409;
3412 -> 3411;
3412 -> 3409;
3413 -> 3410;
3413 -> 3409;
3414 -> 3412;
3414 -> 3413;
3414 -> 3409;
3415 -> 2209;
3415 -> 2204;
3416 -> 2209;
3416 -> 2204;
3417 -> 2209;
3417 -> 2204;
3418 -> 0;
3418 -> 2209;
3418 -> 2204;
3419 -> 2209;
3419 -> 2204;
3421 -> 3420;
3422 -> 3420;
3423 -> 3422;
3424 -> 3422;
3425 -> 3424;
3425 -> 3422;
3426 -> 3425;
3426 -> 3423;
3427 -> 3423;
3428 -> 3427;
3429 -> 3428;
3430 -> 3429;
3431 -> 3430;
3431 -> 3429;
3432 -> 3428;
3432 -> 3427;
3433 -> 3428;
3433 -> 3427;
3434 -> 3427;
3434 -> 3423;
3435 -> 3427;
3435 -> 3423;
3436 -> 3427;
3436 -> 3423;
3437 -> 3426;
3437 -> 3427;
3437 -> 3423;
3438 -> 3422;
3438 -> 3420;
3439 -> 3421;
3439 -> 3422;
3439 -> 3420;
3440 -> 3420;
3441 -> 3440;
3441 -> 2209;
3441 -> 2204;
3442 -> 2209;
3442 -> 2204;
3443 -> 3440;
3443 -> 2209;
3443 -> 2204;
3444 -> 2206;
3444 -> 3302;
3444 -> 2204;
3445 -> 2204;
3446 -> 2205;
3446 -> 3445;
3447 -> 0;
3447 -> 3445;
3448 -> 3447;
3448 -> 2204;
3449 -> 2192;
3450 -> 2203;
3450 -> 3449;
3451 -> 2191;
3451 -> 3449;
3452 -> 3449;
3453 -> 3450;
3453 -> 3452;
3454 -> 3453;
3454 -> 3158;
3454 -> 3302;
3454 -> 3452;
3455 -> 3454;
3455 -> 3449;
3456 -> 3449;
3457 -> 3455;
3457 -> 3449;
3458 -> 3456;
3458 -> 3449;
3459 -> 3451;
3459 -> 2191;
3459 -> 3457;
3459 -> 3458;
3459 -> 3449;
3460 -> 3450;
3460 -> 3455;
3460 -> 3451;
3460 -> 3459;
3461 -> 2182;
3462 -> 2191;
3462 -> 3461;
3463 -> 3462;
3463 -> 2191;
3463 -> 3460;
3463 -> 3459;
3463 -> 3461;
3464 -> 0;
3464 -> 3461;
3465 -> 3462;
3465 -> 2191;
3465 -> 3460;
3465 -> 3461;
3466 -> 3465;
3466 -> 3459;
3467 -> 3465;
3468 -> 3467;
3468 -> 3465;
3469 -> 3466;
3469 -> 3465;
3470 -> 3465;
3471 -> 3469;
3471 -> 3470;
3471 -> 3465;
3472 -> 3466;
3472 -> 3471;
3473 -> 3471;
3474 -> 3472;
3474 -> 3473;
3475 -> 0;
3475 -> 3473;
3476 -> 3475;
3476 -> 3471;
3477 -> 3476;
3477 -> 3471;
3478 -> 3472;
3478 -> 3477;
3479 -> 3465;
3479 -> 3459;
3480 -> 3478;
3480 -> 3465;
3481 -> 3463;
3481 -> 3479;
3481 -> 3480;
3481 -> 3465;
3482 -> 3463;
3482 -> 3461;
3483 -> 3482;
3483 -> 2182;
3484 -> 2184;
3484 -> 2182;
3485 -> 3483;
3485 -> 2182;
3486 -> 2183;
3486 -> 2182;
3487 -> 2182;
3488 -> 3484;
3488 -> 3487;
3489 -> 3485;
3489 -> 3487;
3490 -> 3486;
3490 -> 3487;
3491 -> 3487;
3492 -> 3487;
3493 -> 3487;
3494 -> 3488;
3494 -> 3493;
3495 -> 3493;
3496 -> 3494;
3496 -> 3302;
3496 -> 3495;
3497 -> 3496;
3497 -> 3302;
3497 -> 3495;
3498 -> 3497;
3498 -> 3487;
3499 -> 3487;
3500 -> 3498;
3500 -> 3499;
3501 -> 3487;
3502 -> 3489;
3502 -> 3463;
3502 -> 3487;
3503 -> 3502;
3503 -> 3463;
3503 -> 3481;
3503 -> 3487;
3504 -> 3491;
3504 -> 3503;
3505 -> 3503;
3506 -> 3489;
3506 -> 3503;
3506 -> 3463;
3506 -> 3481;
3506 -> 3302;
3506 -> 3478;
3507 -> 3506;
3508 -> 3506;
3509 -> 3507;
3509 -> 3508;
3509 -> 3506;
3510 -> 3509;
3510 -> 3506;
3511 -> 3510;
3512 -> 3507;
3512 -> 3511;
3513 -> 3512;
3513 -> 3506;
3513 -> 3511;
3514 -> 3513;
3514 -> 3491;
3514 -> 3504;
3514 -> 3506;
3515 -> 3491;
3515 -> 3504;
3515 -> 3513;
3515 -> 3506;
3516 -> 3506;
3517 -> 3515;
3517 -> 3516;
3517 -> 3506;
3518 -> 3492;
3518 -> 3516;
3518 -> 3506;
3519 -> 3517;
3519 -> 3518;
3519 -> 3506;
3520 -> 3506;
3521 -> 3515;
3521 -> 3520;
3521 -> 3506;
3522 -> 3506;
3522 -> 3513;
3522 -> 3491;
3523 -> 3506;
3524 -> 3507;
3524 -> 3523;
3524 -> 3506;
3525 -> 3524;
3526 -> 3507;
3526 -> 3525;
3527 -> 3526;
3527 -> 3506;
3527 -> 3525;
3528 -> 3525;
3529 -> 3527;
3529 -> 3528;
3530 -> 3529;
3530 -> 0;
3530 -> 3528;
3531 -> 0;
3531 -> 3530;
3532 -> 3531;
3532 -> 3524;
3533 -> 3532;
3533 -> 0;
3533 -> 3524;
3534 -> 2182;
3535 -> 3483;
3535 -> 2182;
3536 -> 2178;
3537 -> 2180;
3537 -> 3535;
3537 -> 3536;
3537 -> 3506;
3537 -> 2178;
3538 -> 3537;
3539 -> 2176;
3539 -> 3538;
3540 -> 3538;
3541 -> 3539;
3541 -> 3540;
3542 -> 0;
3542 -> 3540;
3543 -> 3542;
3543 -> 3538;
3544 -> 3538;
3545 -> 3539;
3545 -> 3544;
3546 -> 3545;
3546 -> 3537;
3546 -> 3544;
3547 -> 3546;
3547 -> 3538;
3548 -> 3538;
3549 -> 3547;
3549 -> 3548;
3549 -> 3538;
3550 -> 3549;
3550 -> 3538;
3551 -> 3550;
3552 -> 3551;
3552 -> 3537;
3553 -> 3537;
3554 -> 3552;
3554 -> 3553;
3555 -> 3554;
3555 -> 3537;
3555 -> 3553;
3556 -> 3553;
3557 -> 3554;
3557 -> 3537;
3557 -> 3556;
3557 -> 3553;
3558 -> 3557;
3559 -> 3554;
3559 -> 3537;
3559 -> 3557;
3560 -> 3558;
3560 -> 3557;
3561 -> 3557;
3562 -> 3554;
3562 -> 3560;
3562 -> 3553;
3563 -> 2179;
3563 -> 3537;
3564 -> 3537;
3565 -> 2176;
3565 -> 3564;
3566 -> 3564;
3567 -> 3565;
3567 -> 3566;
3568 -> 3566;
3569 -> 3567;
3569 -> 3562;
3569 -> 3568;
3570 -> 3569;
3570 -> 3562;
3570 -> 3568;
3571 -> 3570;
3571 -> 3564;
3572 -> 3564;
3573 -> 3571;
3573 -> 3572;
3574 -> 3572;
3575 -> 3573;
3575 -> 3574;
3576 -> 3575;
3576 -> 3572;
3577 -> 3573;
3577 -> 3572;
3578 -> 3576;
3578 -> 3564;
3579 -> 3537;
3580 -> 3537;
3581 -> 2176;
3581 -> 3580;
3582 -> 3580;
3583 -> 3581;
3583 -> 3582;
3584 -> 0;
3584 -> 3582;
3585 -> 3584;
3585 -> 3580;
3586 -> 3580;
3587 -> 3581;
3587 -> 3586;
3588 -> 3587;
3588 -> 3562;
3588 -> 3586;
3589 -> 3580;
3590 -> 3588;
3590 -> 3537;
3591 -> 2176;
3591 -> 3537;
3592 -> 3537;
3593 -> 3591;
3593 -> 3592;
3594 -> 3590;
3594 -> 3592;
3595 -> 3594;
3595 -> 3592;
3596 -> 3593;
3596 -> 3592;
3597 -> 3596;
3597 -> 3562;
3597 -> 3592;
3598 -> 3592;
3599 -> 3595;
3599 -> 3597;
3599 -> 3598;
3599 -> 3592;
3600 -> 3537;
3601 -> 0;
3601 -> 3537;
3602 -> 3537;
3603 -> 3601;
3603 -> 3602;
3604 -> 2176;
3604 -> 3599;
3604 -> 3602;
3605 -> 3604;
3605 -> 3599;
3605 -> 3602;
3606 -> 3603;
3606 -> 3602;
3607 -> 3605;
3607 -> 3606;
3607 -> 3602;
3608 -> 3607;
3608 -> 3537;
3609 -> 2179;
3609 -> 3599;
3609 -> 3607;
3609 -> 2178;
3610 -> 2176;
3610 -> 3609;
3610 -> 2175;
3611 -> 3610;
3611 -> 2173;
3612 -> 2173;
3613 -> 3611;
3613 -> 3612;
3614 -> 0;
3614 -> 3612;
3615 -> 3613;
3615 -> 3612;
3616 -> 3615;
3616 -> 3609;
3617 -> 3615;
3618 -> 3615;
3619 -> 3616;
3619 -> 3615;
3620 -> 3619;
3621 -> 3619;
3621 -> 3620;
3622 -> 3620;
3622 -> 3619;
3623 -> 3622;
3624 -> 3618;
3624 -> 3622;
3625 -> 3623;
3625 -> 3615;
3626 -> 3618;
3626 -> 3625;
3627 -> 3615;
3627 -> 3609;
3627 -> 3626;
3628 -> 3616;
3628 -> 3609;
3628 -> 3626;
3629 -> 3614;
3629 -> 3627;
3629 -> 3628;
3629 -> 3626;
3630 -> 3614;
3630 -> 3612;
3631 -> 3630;
3631 -> 2173;
3632 -> 2173;
3633 -> 2174;
3633 -> 3631;
3633 -> 3632;
3633 -> 3614;
3633 -> 3628;
3633 -> 3629;
3633 -> 2173;
3634 -> 2171;
3634 -> 3633;
3634 -> 2170;
3635 -> 3634;
3635 -> 2165;
3636 -> 2166;
3636 -> 2165;
3637 -> 2168;
3637 -> 2165;
3638 -> 3635;
3638 -> 3636;
3638 -> 3637;
3638 -> 3633;
3638 -> 2169;
3638 -> 2165;
3639 -> 3638;
3639 -> 2165;
3640 -> 1;
3641 -> 1;
3642 -> 3639;
3642 -> 3641;
3643 -> 3641;
3644 -> 3642;
3644 -> 3639;
3644 -> 3643;
3645 -> 3644;
3645 -> 3639;
3645 -> 3385;
3645 -> 3643;
3646 -> 3643;
3647 -> 3645;
3647 -> 3641;
3648 -> 3647;
3649 -> 3642;
3649 -> 3648;
3650 -> 3649;
3650 -> 3639;
3650 -> 3648;
3651 -> 3650;
3651 -> 3639;
3651 -> 3648;
3652 -> 3651;
3653 -> 3649;
3653 -> 3652;
3654 -> 0;
3654 -> 3652;
3655 -> 3652;
3656 -> 3654;
3656 -> 3655;
3657 -> 3653;
3657 -> 3639;
3657 -> 3655;
3658 -> 3657;
3658 -> 3639;
3658 -> 3656;
3658 -> 3655;
3659 -> 3652;
3660 -> 3653;
3660 -> 3659;
3661 -> 3659;
3662 -> 3660;
3662 -> 3639;
3662 -> 3661;
3662 -> 3659;
3663 -> 3662;
3664 -> 3663;
3664 -> 3662;
3665 -> 3662;
3666 -> 3664;
3666 -> 3665;
3667 -> 3660;
3667 -> 3665;
3668 -> 3665;
3669 -> 3665;
3670 -> 3667;
3670 -> 3669;
3671 -> 3670;
3671 -> 3639;
3671 -> 3669;
3672 -> 3669;
3673 -> 3671;
3673 -> 3672;
3673 -> 3669;
3674 -> 3669;
3675 -> 3674;
3675 -> 3669;
3676 -> 3669;
3677 -> 3675;
3677 -> 3676;
3678 -> 3670;
3678 -> 3676;
3679 -> 3676;
3680 -> 3678;
3680 -> 3679;
3681 -> 3680;
3681 -> 3639;
3681 -> 3679;
3682 -> 3681;
3682 -> 3147;
3682 -> 3679;
3683 -> 3680;
3683 -> 3639;
3683 -> 3679;
3684 -> 3679;
3685 -> 3684;
3685 -> 3679;
3686 -> 3679;
3687 -> 3685;
3687 -> 3686;
3688 -> 3680;
3688 -> 3686;
3689 -> 3686;
3690 -> 3686;
3691 -> 3689;
3691 -> 3690;
3692 -> 3690;
3693 -> 3692;
3693 -> 3691;
3693 -> 3690;
3694 -> 3690;
3695 -> 3694;
3695 -> 3691;
3695 -> 3690;
3696 -> 3690;
3697 -> 3696;
3697 -> 3691;
3697 -> 3690;
3698 -> 3691;
3698 -> 3690;
3699 -> 3691;
3699 -> 3690;
3700 -> 3691;
3700 -> 3690;
3701 -> 3690;
3702 -> 3701;
3702 -> 3691;
3702 -> 3690;
3703 -> 3691;
3703 -> 3690;
3704 -> 3691;
3704 -> 3690;
3705 -> 3689;
3705 -> 3686;
3706 -> 3687;
3706 -> 3686;
3707 -> 3686;
3708 -> 3705;
3708 -> 3707;
3709 -> 3706;
3709 -> 3707;
3710 -> 3688;
3710 -> 3707;
3711 -> 3710;
3711 -> 3683;
3711 -> 3707;
3712 -> 3711;
3712 -> 3683;
3713 -> 3711;
3714 -> 3711;
3715 -> 3714;
3715 -> 3711;
3716 -> 3714;
3716 -> 3715;
3717 -> 3708;
3717 -> 3715;
3718 -> 3715;
3719 -> 3716;
3719 -> 3715;
3720 -> 3709;
3720 -> 3715;
3721 -> 3715;
3722 -> 3717;
3722 -> 3721;
3723 -> 3718;
3723 -> 3721;
3724 -> 3719;
3724 -> 3721;
3725 -> 3720;
3725 -> 3721;
3726 -> 3710;
3726 -> 3721;
3727 -> 3721;
3728 -> 3724;
3728 -> 3715;
3728 -> 3727;
3728 -> 3721;
3729 -> 3721;
3730 -> 3724;
3730 -> 3729;
3730 -> 3715;
3730 -> 3721;
3731 -> 3730;
3731 -> 3721;
3732 -> 3721;
3733 -> 3731;
3733 -> 3732;
3734 -> 3726;
3734 -> 3732;
3735 -> 3732;
3736 -> 3734;
3736 -> 3735;
3737 -> 3735;
3738 -> 3736;
3738 -> 3737;
3739 -> 3737;
3739 -> 3735;
3740 -> 3736;
3740 -> 3735;
3741 -> 3735;
3742 -> 3740;
3742 -> 3741;
3743 -> 3742;
3743 -> 3730;
3743 -> 3741;
3744 -> 3743;
3744 -> 3735;
3745 -> 3735;
3746 -> 3744;
3746 -> 3745;
3746 -> 3735;
3747 -> 3746;
3747 -> 3735;
3748 -> 3747;
3749 -> 3748;
3749 -> 3732;
3750 -> 3733;
3750 -> 3732;
3751 -> 3732;
3752 -> 3750;
3752 -> 3751;
3753 -> 3749;
3753 -> 3751;
3754 -> 3752;
3754 -> 3730;
3754 -> 3751;
3755 -> 3751;
3756 -> 3751;
3757 -> 3754;
3757 -> 3756;
3758 -> 3755;
3758 -> 3756;
3759 -> 3753;
3759 -> 3756;
3760 -> 3758;
3760 -> 3756;
3761 -> 3757;
3761 -> 3756;
3762 -> 3756;
3763 -> 3759;
3763 -> 3730;
3763 -> 3756;
3764 -> 3756;
3765 -> 3761;
3765 -> 3764;
3766 -> 3762;
3766 -> 3764;
3767 -> 3763;
3767 -> 3764;
3768 -> 3759;
3768 -> 3764;
3769 -> 3767;
3769 -> 3764;
3770 -> 3766;
3770 -> 3764;
3771 -> 3768;
3771 -> 3730;
3771 -> 3770;
3772 -> 3768;
3772 -> 3730;
3772 -> 3771;
3772 -> 3764;
3773 -> 3769;
3773 -> 3772;
3773 -> 3730;
3773 -> 3771;
3773 -> 3764;
3774 -> 3765;
3774 -> 3764;
3775 -> 3764;
3776 -> 3774;
3776 -> 3775;
3777 -> 3768;
3777 -> 3775;
3778 -> 3776;
3778 -> 3775;
3779 -> 3775;
3780 -> 3778;
3780 -> 3779;
3781 -> 3777;
3781 -> 3779;
3782 -> 3779;
3783 -> 3780;
3783 -> 3782;
3783 -> 3779;
3784 -> 3781;
3784 -> 3773;
3784 -> 3779;
3785 -> 3780;
3785 -> 3779;
3786 -> 3784;
3786 -> 3785;
3786 -> 3779;
3787 -> 3777;
3787 -> 3786;
3787 -> 3775;
3788 -> 3773;
3788 -> 3764;
3789 -> 3764;
3790 -> 3788;
3790 -> 3789;
3790 -> 3764;
3791 -> 3790;
3792 -> 3791;
3792 -> 3787;
3793 -> 3792;
3793 -> 3790;
3794 -> 3773;
3794 -> 3790;
3795 -> 3793;
3795 -> 3790;
3796 -> 3790;
3797 -> 3764;
3798 -> 3795;
3798 -> 3787;
3798 -> 3764;
3799 -> 3764;
3800 -> 3798;
3800 -> 3799;
3800 -> 3764;
3801 -> 3765;
3801 -> 3764;
3802 -> 3766;
3802 -> 3764;
3803 -> 3795;
3803 -> 3787;
3803 -> 3764;
3804 -> 3764;
3805 -> 3801;
3805 -> 3804;
3806 -> 3802;
3806 -> 3804;
3807 -> 3803;
3807 -> 3804;
3808 -> 3768;
3808 -> 3804;
3809 -> 3808;
3809 -> 3804;
3810 -> 3805;
3810 -> 3804;
3811 -> 3806;
3811 -> 3804;
3812 -> 3804;
3813 -> 3804;
3814 -> 3809;
3814 -> 3813;
3815 -> 3810;
3815 -> 3813;
3816 -> 3811;
3816 -> 3813;
3817 -> 3812;
3817 -> 3813;
3818 -> 3817;
3818 -> 3813;
3819 -> 3817;
3819 -> 3813;
3820 -> 3817;
3820 -> 3813;
3821 -> 3817;
3821 -> 3813;
3822 -> 3817;
3822 -> 3813;
3823 -> 3817;
3823 -> 3813;
3824 -> 3814;
3824 -> 3817;
3824 -> 3813;
3825 -> 3815;
3825 -> 3817;
3825 -> 3813;
3826 -> 3816;
3826 -> 3817;
3826 -> 3813;
3827 -> 3817;
3827 -> 3813;
3828 -> 3813;
3829 -> 3827;
3829 -> 3828;
3829 -> 3818;
3829 -> 3824;
3829 -> 3825;
3829 -> 3821;
3829 -> 3826;
3829 -> 3823;
3829 -> 3795;
3829 -> 3813;
3830 -> 3829;
3830 -> 3817;
3830 -> 3813;
3831 -> 3813;
3832 -> 3831;
3832 -> 3817;
3832 -> 3813;
3833 -> 3814;
3833 -> 3813;
3834 -> 3813;
3835 -> 3813;
3836 -> 3833;
3836 -> 3835;
3837 -> 3834;
3837 -> 3835;
3839 -> 3838;
3841 -> 3840;
3843 -> 3842;
3846 -> 3845;
3847 -> 0;
3848 -> 0;
3849 -> 0;
3850 -> 3849;
3852 -> 3847;
3852 -> 3848;
3852 -> 3850;
3852 -> 3851;
3853 -> 3852;
3855 -> 3854;
3857 -> 3856;
3859 -> 3858;
3861 -> 3860;
3862 -> 3836;
3862 -> 3835;
3863 -> 3835;
3864 -> 3862;
3864 -> 3863;
3865 -> 3837;
3865 -> 3863;
3866 -> 3865;
3866 -> 3863;
3867 -> 3865;
3867 -> 3863;
3868 -> 3865;
3868 -> 3863;
3869 -> 3865;
3869 -> 3863;
3870 -> 3865;
3870 -> 3863;
3871 -> 3863;
3872 -> 3864;
3872 -> 3871;
3872 -> 3863;
3873 -> 3865;
3873 -> 3863;
3874 -> 3873;
3874 -> 3866;
3874 -> 3867;
3874 -> 3868;
3874 -> 3869;
3874 -> 3870;
3874 -> 3863;
3875 -> 3863;
3876 -> 3864;
3876 -> 3875;
3877 -> 3876;
3877 -> 3829;
3877 -> 3875;
3878 -> 3877;
3878 -> 3863;
3879 -> 3878;
3879 -> 3829;
3879 -> 3865;
3879 -> 3863;
3880 -> 3864;
3880 -> 3865;
3880 -> 3863;
3881 -> 3834;
3881 -> 3817;
3881 -> 3813;
3882 -> 3812;
3882 -> 3804;
3883 -> 3882;
3883 -> 3829;
3883 -> 3830;
3883 -> 3832;
3883 -> 3881;
3883 -> 3831;
3883 -> 3874;
3883 -> 3879;
3883 -> 3880;
3883 -> 3804;
3884 -> 3804;
3885 -> 3884;
3886 -> 3807;
3886 -> 3884;
3887 -> 3884;
3888 -> 3886;
3888 -> 3887;
3888 -> 3884;
3889 -> 3807;
3889 -> 3884;
3890 -> 3883;
3890 -> 3884;
3891 -> 3886;
3891 -> 3884;
3892 -> 3889;
3892 -> 3890;
3892 -> 3891;
3892 -> 3883;
3892 -> 3884;
3893 -> 3812;
3893 -> 3892;
3894 -> 3752;
3894 -> 3751;
3895 -> 3751;
3896 -> 3894;
3896 -> 3895;
3897 -> 3755;
3897 -> 3895;
3898 -> 3755;
3898 -> 3895;
3899 -> 3893;
3899 -> 3895;
3900 -> 3896;
3900 -> 3892;
3900 -> 3895;
3901 -> 3895;
3902 -> 3899;
3902 -> 3901;
3903 -> 3902;
3903 -> 3892;
3903 -> 3795;
3903 -> 0;
3903 -> 3901;
3904 -> 3903;
3904 -> 3895;
3905 -> 3895;
3906 -> 3896;
3906 -> 3892;
3906 -> 3905;
3906 -> 3895;
3907 -> 3904;
3907 -> 3906;
3907 -> 3895;
3908 -> 3896;
3908 -> 3892;
3908 -> 3907;
3909 -> 3908;
3909 -> 3895;
3910 -> 3900;
3910 -> 3895;
3911 -> 3897;
3911 -> 3895;
3912 -> 3898;
3912 -> 3895;
3913 -> 3895;
3914 -> 3909;
3914 -> 3913;
3915 -> 3910;
3915 -> 3913;
3916 -> 3911;
3916 -> 3913;
3917 -> 3912;
3917 -> 3913;
3918 -> 3899;
3918 -> 3913;
3919 -> 3913;
3920 -> 3914;
3920 -> 3919;
3920 -> 3913;
3921 -> 3917;
3921 -> 3913;
3922 -> 3918;
3922 -> 3892;
3922 -> 3913;
3923 -> 3918;
3923 -> 3892;
3923 -> 3795;
3923 -> 3913;
3924 -> 3913;
3925 -> 3923;
3925 -> 3924;
3926 -> 3922;
3926 -> 3924;
3927 -> 3924;
3928 -> 3927;
3928 -> 3924;
3929 -> 3927;
3929 -> 3924;
3930 -> 3927;
3930 -> 3924;
3931 -> 3927;
3931 -> 3924;
3932 -> 3925;
3932 -> 3927;
3932 -> 3924;
3933 -> 3923;
3933 -> 3922;
3933 -> 3927;
3933 -> 3928;
3933 -> 3929;
3933 -> 3930;
3933 -> 3931;
3933 -> 3932;
3933 -> 3913;
3934 -> 3915;
3934 -> 3913;
3935 -> 3916;
3935 -> 3913;
3936 -> 3917;
3936 -> 3913;
3937 -> 3913;
3938 -> 3934;
3938 -> 3937;
3939 -> 3935;
3939 -> 3937;
3940 -> 3936;
3940 -> 3937;
3941 -> 3933;
3941 -> 3937;
3942 -> 3937;
3943 -> 3937;
3944 -> 3939;
3944 -> 3943;
3945 -> 3942;
3945 -> 3943;
3946 -> 3945;
3946 -> 3943;
3947 -> 3944;
3947 -> 3946;
3948 -> 3939;
3948 -> 3942;
3948 -> 3937;
3949 -> 3940;
3949 -> 3942;
3949 -> 3937;
3950 -> 3948;
3950 -> 3949;
3950 -> 3937;
3951 -> 3938;
3951 -> 3941;
3951 -> 3937;
3952 -> 3939;
3952 -> 3941;
3952 -> 3937;
3953 -> 3940;
3953 -> 3941;
3953 -> 3937;
3954 -> 3913;
3955 -> 3914;
3955 -> 3913;
3956 -> 3913;
3957 -> 3955;
3957 -> 3956;
3958 -> 3933;
3958 -> 3956;
3959 -> 3957;
3959 -> 3956;
3960 -> 3956;
3961 -> 3959;
3961 -> 3960;
3962 -> 3958;
3962 -> 3960;
3963 -> 3962;
3963 -> 3960;
3964 -> 3963;
3964 -> 3961;
3964 -> 3933;
3964 -> 3951;
3964 -> 3952;
3964 -> 3953;
3964 -> 3960;
3965 -> 3960;
3966 -> 3964;
3966 -> 3965;
3967 -> 3964;
3967 -> 3965;
3968 -> 3966;
3968 -> 3965;
3969 -> 3965;
3970 -> 3968;
3970 -> 3969;
3971 -> 3967;
3971 -> 3969;
3972 -> 3971;
3972 -> 3964;
3972 -> 3969;
3973 -> 3970;
3973 -> 3969;
3974 -> 3972;
3974 -> 3973;
3974 -> 3964;
3974 -> 3969;
3975 -> 0;
3975 -> 3969;
3976 -> 3969;
3977 -> 3970;
3977 -> 3974;
3977 -> 3976;
3977 -> 3969;
3978 -> 3971;
3978 -> 3974;
3978 -> 3969;
3979 -> 3970;
3979 -> 3974;
3979 -> 3969;
3980 -> 0;
3980 -> 3977;
3981 -> 3970;
3981 -> 3969;
3982 -> 3980;
3982 -> 3969;
3983 -> 3969;
3984 -> 3981;
3984 -> 3983;
3985 -> 3982;
3985 -> 3983;
3986 -> 3971;
3986 -> 3983;
3987 -> 3984;
3987 -> 3983;
3988 -> 3985;
3988 -> 3983;
3989 -> 3983;
3990 -> 3987;
3990 -> 3989;
3991 -> 3988;
3991 -> 3989;
3992 -> 3991;
3992 -> 3989;
3993 -> 3989;
3994 -> 3990;
3994 -> 3989;
3995 -> 3991;
3995 -> 3989;
3996 -> 3989;
3997 -> 3989;
3998 -> 3994;
3998 -> 3997;
3999 -> 3995;
3999 -> 3997;
4000 -> 3996;
4000 -> 3997;
4001 -> 3998;
4001 -> 4000;
4001 -> 3997;
4002 -> 3999;
4002 -> 4000;
4002 -> 3997;
4003 -> 3996;
4003 -> 3983;
4004 -> 3983;
4005 -> 3983;
4006 -> 3986;
4006 -> 4005;
4007 -> 4006;
4007 -> 3978;
4007 -> 4005;
4008 -> 4007;
4008 -> 3983;
4009 -> 4003;
4009 -> 3983;
4010 -> 4004;
4010 -> 3983;
4011 -> 4009;
4011 -> 4010;
4011 -> 4008;
4011 -> 4001;
4011 -> 4002;
4011 -> 3978;
4011 -> 3983;
4012 -> 3983;
4013 -> 4011;
4013 -> 4012;
4014 -> 4013;
4014 -> 4011;
4014 -> 4012;
4015 -> 3984;
4015 -> 4014;
4016 -> 4014;
4017 -> 4015;
4017 -> 4016;
4018 -> 4017;
4018 -> 4016;
4019 -> 4017;
4019 -> 4016;
4020 -> 4018;
4020 -> 4016;
4021 -> 4016;
4022 -> 4020;
4022 -> 4021;
4023 -> 4019;
4023 -> 4021;
4024 -> 4022;
4024 -> 4017;
4024 -> 4021;
4025 -> 4021;
4026 -> 4025;
4026 -> 4021;
4027 -> 4022;
4027 -> 4017;
4027 -> 4021;
4028 -> 4023;
4028 -> 4027;
4028 -> 4024;
4028 -> 4017;
4029 -> 4023;
4029 -> 4027;
4029 -> 4028;
4030 -> 4028;
4031 -> 4029;
4031 -> 4021;
4032 -> 4021;
4033 -> 4031;
4033 -> 4032;
4033 -> 4021;
4034 -> 4031;
4034 -> 4022;
4034 -> 4021;
4035 -> 4031;
4035 -> 4033;
4036 -> 0;
4036 -> 4033;
4037 -> 4031;
4037 -> 4035;
4037 -> 4033;
4038 -> 4021;
4039 -> 4038;
4039 -> 4016;
4040 -> 4016;
4041 -> 4019;
4041 -> 4040;
4042 -> 4040;
4043 -> 4041;
4043 -> 4037;
4043 -> 4042;
4044 -> 4043;
4044 -> 4040;
4045 -> 4016;
4046 -> 4020;
4046 -> 4045;
4047 -> 4039;
4047 -> 4045;
4048 -> 4044;
4048 -> 4045;
4049 -> 4019;
4049 -> 4045;
4050 -> 4045;
4051 -> 4049;
4051 -> 4050;
4052 -> 4051;
4052 -> 4037;
4052 -> 4050;
4053 -> 4052;
4053 -> 4045;
4054 -> 4045;
4055 -> 4046;
4055 -> 4053;
4055 -> 4045;
4056 -> 4047;
4056 -> 4045;
4057 -> 4048;
4057 -> 4056;
4058 -> 0;
4058 -> 4057;
4059 -> 4046;
4059 -> 4045;
4060 -> 4058;
4060 -> 4045;
4061 -> 4045;
4062 -> 4059;
4062 -> 4061;
4063 -> 4060;
4063 -> 4061;
4064 -> 4063;
4064 -> 4061;
4065 -> 4061;
4066 -> 4061;
4066 -> 4045;
4067 -> 4045;
4068 -> 4045;
4069 -> 4049;
4069 -> 4068;
4070 -> 4069;
4070 -> 4037;
4070 -> 4068;
4071 -> 4070;
4071 -> 4045;
4072 -> 4066;
4072 -> 4045;
4073 -> 4067;
4073 -> 4045;
4074 -> 4072;
4074 -> 4073;
4074 -> 4071;
4074 -> 4062;
4074 -> 4063;
4074 -> 4037;
4074 -> 4045;
4075 -> 4045;
4076 -> 4074;
4077 -> 4049;
4077 -> 4076;
4078 -> 4077;
4078 -> 4074;
4078 -> 4076;
4079 -> 4078;
4079 -> 4074;
4080 -> 4048;
4080 -> 4074;
4081 -> 4080;
4082 -> 4049;
4082 -> 4081;
4083 -> 4082;
4083 -> 4074;
4083 -> 4081;
4084 -> 4083;
4084 -> 4080;
4085 -> 4080;
4086 -> 4084;
4086 -> 4085;
4087 -> 4086;
4087 -> 4074;
4087 -> 4085;
4088 -> 4087;
4089 -> 4088;
4089 -> 4087;
4090 -> 4087;
4091 -> 4089;
4091 -> 4090;
4092 -> 4086;
4092 -> 4090;
4093 -> 4090;
4094 -> 4092;
4094 -> 4093;
4095 -> 4094;
4095 -> 4074;
4095 -> 4093;
4096 -> 4095;
4096 -> 4093;
4097 -> 4094;
4097 -> 4090;
4098 -> 4090;
4099 -> 4097;
4099 -> 4098;
4100 -> 4091;
4100 -> 4099;
4100 -> 4088;
4100 -> 4094;
4100 -> 4090;
4101 -> 4090;
4102 -> 4092;
4102 -> 4101;
4103 -> 4102;
4103 -> 4100;
4103 -> 4101;
4104 -> 4102;
4104 -> 4100;
4104 -> 4101;
4105 -> 4104;
4105 -> 4090;
4106 -> 4090;
4107 -> 4106;
4107 -> 4105;
4107 -> 4100;
4107 -> 4090;
4108 -> 4106;
4108 -> 4107;
4109 -> 4105;
4109 -> 4108;
4109 -> 4106;
4110 -> 4108;
4111 -> 4109;
4111 -> 4110;
4112 -> 4087;
4113 -> 4086;
4113 -> 4087;
4114 -> 4087;
4115 -> 4087;
4116 -> 4113;
4116 -> 4115;
4117 -> 4114;
4117 -> 4115;
4118 -> 0;
4118 -> 4117;
4118 -> 4115;
4119 -> 4116;
4119 -> 4117;
4119 -> 4115;
4120 -> 4114;
4120 -> 4088;
4120 -> 4111;
4120 -> 4087;
4121 -> 4120;
4121 -> 4114;
4122 -> 4121;
4122 -> 4114;
4123 -> 4120;
4123 -> 4114;
4124 -> 4123;
4124 -> 4122;
4124 -> 4114;
4125 -> 4087;
4126 -> 4114;
4126 -> 4125;
4127 -> 4114;
4127 -> 4125;
4128 -> 4124;
4128 -> 4125;
4129 -> 4114;
4129 -> 4125;
4130 -> 4125;
4131 -> 4128;
4131 -> 4124;
4131 -> 4130;
4131 -> 4125;
4132 -> 4126;
4132 -> 4128;
4133 -> 4127;
4133 -> 4128;
4134 -> 4128;
4135 -> 4132;
4135 -> 4134;
4136 -> 4133;
4136 -> 4134;
4137 -> 4128;
4137 -> 4134;
4138 -> 4128;
4138 -> 4134;
4139 -> 4128;
4139 -> 4134;
4140 -> 4134;
4141 -> 4139;
4141 -> 4134;
4142 -> 4139;
4142 -> 4134;
4143 -> 4139;
4143 -> 4134;
4144 -> 4135;
4144 -> 4139;
4144 -> 4134;
4145 -> 4137;
4145 -> 4139;
4145 -> 4134;
4146 -> 4136;
4146 -> 4139;
4146 -> 4134;
4147 -> 4139;
4147 -> 4134;
4148 -> 0;
4148 -> 4134;
4149 -> 4147;
4149 -> 4139;
4149 -> 4134;
4150 -> 4138;
4150 -> 4139;
4150 -> 4134;
4151 -> 4137;
4151 -> 4134;
4152 -> 4151;
4153 -> 4151;
4153 -> 4152;
4154 -> 4153;
4154 -> 4152;
4155 -> 4154;
4155 -> 4151;
4156 -> 4151;
4157 -> 4088;
4157 -> 4124;
4157 -> 4087;
4158 -> 4086;
4158 -> 4157;
4158 -> 4087;
4159 -> 4128;
4159 -> 4087;
4160 -> 4087;
4161 -> 4158;
4161 -> 4159;
4161 -> 4160;
4161 -> 4139;
4161 -> 4146;
4161 -> 4150;
4161 -> 4149;
4161 -> 4144;
4161 -> 4145;
4161 -> 4157;
4161 -> 4118;
4161 -> 4119;
4161 -> 4124;
4161 -> 4147;
4161 -> 4087;
4162 -> 4086;
4162 -> 4161;
4162 -> 4085;
4163 -> 4079;
4163 -> 4080;
4164 -> 4046;
4164 -> 4080;
4165 -> 4047;
4165 -> 4080;
4166 -> 4080;
4167 -> 4080;
4168 -> 4162;
4168 -> 4167;
4169 -> 4163;
4169 -> 4167;
4170 -> 4164;
4170 -> 4167;
4171 -> 4165;
4171 -> 4167;
4172 -> 4166;
4172 -> 4167;
4173 -> 4169;
4173 -> 4167;
4174 -> 4167;
4175 -> 4173;
4175 -> 4174;
4176 -> 4172;
4176 -> 4174;
4177 -> 4174;
4178 -> 4174;
4179 -> 4175;
4179 -> 4178;
4179 -> 4174;
4180 -> 4175;
4180 -> 4176;
4180 -> 4174;
4181 -> 4175;
4181 -> 4161;
4181 -> 4176;
4181 -> 4174;
4182 -> 4175;
4182 -> 4161;
4182 -> 4176;
4182 -> 4174;
4183 -> 4177;
4183 -> 4176;
4183 -> 4174;
4184 -> 4172;
4184 -> 4167;
4185 -> 4172;
4185 -> 4167;
4186 -> 4172;
4186 -> 4167;
4187 -> 4172;
4187 -> 4167;
4188 -> 4172;
4188 -> 4167;
4189 -> 4167;
4190 -> 4168;
4190 -> 4189;
4190 -> 4167;
4191 -> 4167;
4192 -> 4170;
4192 -> 4191;
4192 -> 4167;
4193 -> 4168;
4193 -> 4172;
4193 -> 4167;
4194 -> 4170;
4194 -> 4172;
4194 -> 4171;
4194 -> 4167;
4195 -> 4194;
4195 -> 4172;
4195 -> 4167;
4196 -> 4171;
4196 -> 4167;
4197 -> 4170;
4197 -> 4161;
4197 -> 4196;
4198 -> 4170;
4198 -> 4197;
4199 -> 4198;
4199 -> 4197;
4199 -> 4172;
4200 -> 4080;
4201 -> 4049;
4201 -> 4200;
4202 -> 4201;
4202 -> 4197;
4202 -> 4200;
4203 -> 4202;
4203 -> 4080;
4204 -> 4046;
4204 -> 4080;
4205 -> 4080;
4206 -> 4080;
4207 -> 4203;
4207 -> 4206;
4208 -> 4204;
4208 -> 4206;
4209 -> 4205;
4209 -> 4206;
4210 -> 4207;
4210 -> 4206;
4211 -> 4206;
4212 -> 4210;
4212 -> 4211;
4213 -> 4211;
4214 -> 4212;
4214 -> 4213;
4215 -> 4213;
4216 -> 4214;
4216 -> 4215;
4217 -> 4216;
4217 -> 4215;
4218 -> 4216;
4218 -> 4213;
4219 -> 4213;
4220 -> 4218;
4220 -> 4219;
4221 -> 4213;
4222 -> 4220;
4222 -> 4211;
4223 -> 4211;
4224 -> 4222;
4224 -> 4223;
4225 -> 0;
4225 -> 4211;
4226 -> 4211;
4227 -> 4225;
4227 -> 4226;
4228 -> 4224;
4228 -> 4226;
4229 -> 4228;
4229 -> 4206;
4230 -> 4229;
4231 -> 4074;
4232 -> 4231;
4232 -> 4228;
4233 -> 4232;
4233 -> 4074;
4234 -> 4066;
4234 -> 4074;
4235 -> 4166;
4235 -> 4074;
4236 -> 4234;
4236 -> 4235;
4236 -> 4233;
4236 -> 4062;
4236 -> 4063;
4236 -> 4182;
4236 -> 4181;
4236 -> 4180;
4236 -> 4183;
4236 -> 4176;
4236 -> 4193;
4236 -> 4195;
4236 -> 4186;
4236 -> 4187;
4236 -> 4188;
4236 -> 4199;
4236 -> 4228;
4236 -> 4194;
4236 -> 4197;
4236 -> 4074;
4237 -> 4074;
4238 -> 4166;
4238 -> 4045;
4239 -> 4017;
4239 -> 4238;
4239 -> 4236;
4239 -> 4016;
4240 -> 3985;
4240 -> 4058;
4240 -> 4014;
4241 -> 4240;
4242 -> 4239;
4242 -> 4241;
4243 -> 4242;
4243 -> 4239;
4243 -> 4241;
4244 -> 4241;
4245 -> 4243;
4245 -> 4244;
4245 -> 4241;
4246 -> 4245;
4246 -> 4241;
4247 -> 4246;
4248 -> 4246;
4248 -> 4247;
4249 -> 4243;
4249 -> 4247;
4250 -> 4249;
4250 -> 4239;
4250 -> 4247;
4251 -> 4248;
4251 -> 4250;
4252 -> 4250;
4253 -> 4251;
4253 -> 4252;
4254 -> 4250;
4254 -> 4252;
4255 -> 4252;
4256 -> 4253;
4256 -> 4255;
4256 -> 4252;
4257 -> 4252;
4258 -> 4254;
4258 -> 4257;
4259 -> 4257;
4260 -> 4258;
4260 -> 4259;
4261 -> 0;
4261 -> 4259;
4262 -> 4261;
4262 -> 4257;
4263 -> 4258;
4263 -> 4252;
4264 -> 4253;
4264 -> 4263;
4264 -> 4252;
4265 -> 4250;
4265 -> 4264;
4266 -> 4265;
4266 -> 4240;
4267 -> 3984;
4267 -> 4240;
4268 -> 4240;
4269 -> 4267;
4269 -> 4268;
4270 -> 4266;
4270 -> 4268;
4271 -> 4269;
4271 -> 4239;
4271 -> 4268;
4272 -> 4269;
4272 -> 4268;
4273 -> 4268;
4274 -> 4271;
4274 -> 4273;
4275 -> 4271;
4275 -> 4273;
4276 -> 4271;
4276 -> 4273;
4277 -> 4272;
4277 -> 4273;
4278 -> 4270;
4278 -> 4273;
4279 -> 4276;
4279 -> 4273;
4280 -> 4273;
4281 -> 4279;
4281 -> 4280;
4282 -> 4274;
4282 -> 4273;
4283 -> 4275;
4283 -> 4273;
4284 -> 4273;
4285 -> 4282;
4285 -> 4284;
4286 -> 4283;
4286 -> 4284;
4287 -> 4278;
4287 -> 4284;
4288 -> 4285;
4288 -> 4284;
4289 -> 4284;
4290 -> 4288;
4290 -> 4289;
4291 -> 4287;
4291 -> 4289;
4292 -> 4291;
4292 -> 4271;
4292 -> 4289;
4293 -> 4291;
4293 -> 4271;
4293 -> 4289;
4294 -> 4293;
4294 -> 4290;
4294 -> 4289;
4294 -> 4271;
4295 -> 4284;
4296 -> 4286;
4296 -> 4284;
4297 -> 4294;
4297 -> 4295;
4297 -> 4296;
4297 -> 4284;
4298 -> 4297;
4298 -> 4295;
4299 -> 4298;
4299 -> 4297;
4299 -> 4295;
4300 -> 4299;
4301 -> 4299;
4302 -> 4300;
4302 -> 4301;
4302 -> 4299;
4303 -> 4299;
4304 -> 4300;
4304 -> 4303;
4305 -> 4303;
4306 -> 4304;
4306 -> 4299;
4306 -> 4305;
4307 -> 4306;
4307 -> 4299;
4307 -> 3353;
4307 -> 4305;
4308 -> 4307;
4308 -> 3374;
4308 -> 4305;
4309 -> 4308;
4309 -> 4303;
4310 -> 4309;
4310 -> 4299;
4311 -> 4310;
4311 -> 4281;
4311 -> 4299;
4312 -> 4311;
4313 -> 4277;
4313 -> 4312;
4313 -> 4311;
4314 -> 4313;
4315 -> 4314;
4315 -> 4313;
4316 -> 4315;
4316 -> 4314;
4316 -> 4277;
4317 -> 4315;
4317 -> 4314;
4318 -> 4300;
4318 -> 4316;
4319 -> 3985;
4319 -> 0;
4319 -> 4240;
4320 -> 4318;
4320 -> 4319;
4321 -> 4239;
4321 -> 4319;
4322 -> 4319;
4323 -> 4319;
4324 -> 4320;
4324 -> 4323;
4325 -> 4321;
4325 -> 4323;
4326 -> 4322;
4326 -> 4323;
4327 -> 4322;
4327 -> 4323;
4328 -> 4325;
4328 -> 4323;
4329 -> 4323;
4330 -> 4328;
4330 -> 4329;
4331 -> 4327;
4331 -> 4329;
4332 -> 4329;
4333 -> 4329;
4334 -> 4330;
4334 -> 4333;
4334 -> 4329;
4335 -> 4330;
4335 -> 4317;
4335 -> 4331;
4335 -> 4329;
4336 -> 4330;
4336 -> 4317;
4336 -> 4331;
4336 -> 4329;
4337 -> 4332;
4337 -> 4331;
4337 -> 4329;
4338 -> 4327;
4338 -> 4323;
4339 -> 4327;
4339 -> 4323;
4340 -> 4327;
4340 -> 4323;
4341 -> 4327;
4341 -> 4323;
4342 -> 4327;
4342 -> 4323;
4343 -> 4323;
4344 -> 4324;
4344 -> 4343;
4344 -> 4323;
4345 -> 4324;
4345 -> 4327;
4345 -> 4323;
4347 -> 0;
4348 -> 0;
4349 -> 0;
4352 -> 4346;
4352 -> 4351;
4353 -> 4347;
4353 -> 4351;
4354 -> 4348;
4354 -> 4351;
4355 -> 4349;
4355 -> 4351;
4356 -> 4350;
4356 -> 4351;
4357 -> 4351;
4358 -> 4357;
4358 -> 4351;
4359 -> 4357;
4359 -> 4351;
4360 -> 4357;
4360 -> 4351;
4361 -> 4351;
4362 -> 4353;
4362 -> 4361;
4362 -> 4351;
4363 -> 4354;
4363 -> 0;
4363 -> 4351;
4364 -> 4355;
4364 -> 0;
4364 -> 4351;
4365 -> 4352;
4365 -> 4357;
4365 -> 4351;
4366 -> 4353;
4366 -> 4357;
4366 -> 4351;
4367 -> 4354;
4367 -> 4357;
4367 -> 4351;
4368 -> 4356;
4368 -> 4357;
4368 -> 4351;
4369 -> 4355;
4369 -> 4357;
4369 -> 4351;
4370 -> 4351;
4371 -> 4370;
4371 -> 4323;
4372 -> 4371;
4372 -> 4326;
4372 -> 4323;
4373 -> 4372;
4373 -> 4327;
4373 -> 4323;
4374 -> 4319;
4375 -> 3984;
4375 -> 4317;
4375 -> 4374;
4375 -> 4319;
4376 -> 3984;
4376 -> 4317;
4376 -> 4014;
4377 -> 4014;
4378 -> 4376;
4378 -> 4377;
4379 -> 4322;
4379 -> 4377;
4380 -> 4379;
4380 -> 4335;
4380 -> 4377;
4381 -> 0;
4381 -> 4377;
4382 -> 4377;
4383 -> 4380;
4383 -> 4382;
4384 -> 4381;
4384 -> 4382;
4385 -> 4383;
4385 -> 4384;
4385 -> 4382;
4386 -> 4378;
4386 -> 4377;
4387 -> 4385;
4387 -> 4386;
4387 -> 4377;
4388 -> 4387;
4388 -> 4377;
4389 -> 4014;
4390 -> 4389;
4390 -> 4386;
4391 -> 4390;
4391 -> 4014;
4392 -> 4003;
4392 -> 4014;
4393 -> 4388;
4393 -> 4014;
4394 -> 4392;
4394 -> 4393;
4394 -> 4391;
4394 -> 4001;
4394 -> 4002;
4394 -> 4336;
4394 -> 4335;
4394 -> 4330;
4394 -> 4337;
4394 -> 4331;
4394 -> 4345;
4394 -> 4339;
4394 -> 4373;
4394 -> 4341;
4394 -> 4342;
4394 -> 4386;
4394 -> 4299;
4394 -> 4365;
4394 -> 4368;
4394 -> 4366;
4394 -> 4367;
4394 -> 4369;
4394 -> 0;
4394 -> 4014;
4395 -> 4014;
4396 -> 4388;
4396 -> 3983;
4397 -> 3964;
4397 -> 4396;
4397 -> 4394;
4397 -> 3960;
4398 -> 3933;
4398 -> 3913;
4399 -> 3918;
4399 -> 4397;
4399 -> 4398;
4399 -> 3913;
4400 -> 4397;
4400 -> 3913;
4401 -> 3721;
4402 -> 3721;
4403 -> 3726;
4403 -> 4402;
4404 -> 4402;
4405 -> 4403;
4405 -> 4404;
4406 -> 4404;
4406 -> 4402;
4407 -> 4403;
4407 -> 4402;
4408 -> 4402;
4409 -> 4407;
4409 -> 4408;
4410 -> 4409;
4410 -> 4399;
4410 -> 4408;
4411 -> 4402;
4412 -> 4410;
4412 -> 3721;
4413 -> 3724;
4413 -> 3721;
4414 -> 4413;
4414 -> 4399;
4414 -> 3721;
4415 -> 4414;
4416 -> 4414;
4416 -> 4399;
4417 -> 4414;
4417 -> 4399;
4418 -> 4414;
4418 -> 4417;
4419 -> 4417;
4420 -> 3726;
4420 -> 4419;
4421 -> 4419;
4422 -> 4420;
4422 -> 4417;
4422 -> 4421;
4422 -> 4419;
4423 -> 4422;
4423 -> 4417;
4424 -> 4418;
4424 -> 4417;
4425 -> 4417;
4426 -> 4424;
4426 -> 4425;
4427 -> 4412;
4427 -> 4425;
4428 -> 4426;
4428 -> 4422;
4428 -> 4425;
4429 -> 4425;
4430 -> 4428;
4430 -> 4429;
4431 -> 4428;
4431 -> 4429;
4432 -> 4427;
4432 -> 4429;
4433 -> 4429;
4434 -> 4432;
4434 -> 4433;
4435 -> 4433;
4436 -> 4434;
4436 -> 4435;
4436 -> 4422;
4436 -> 4433;
4437 -> 4436;
4437 -> 4433;
4438 -> 4437;
4438 -> 4429;
4439 -> 4431;
4439 -> 4429;
4440 -> 4430;
4440 -> 4439;
4440 -> 4436;
4440 -> 4422;
4440 -> 4429;
4441 -> 4429;
4442 -> 4432;
4442 -> 4441;
4443 -> 4442;
4443 -> 4440;
4443 -> 4441;
4444 -> 4429;
4445 -> 4443;
4445 -> 4438;
4445 -> 4429;
4446 -> 3726;
4446 -> 4417;
4447 -> 4418;
4447 -> 4417;
4448 -> 4445;
4448 -> 4417;
4449 -> 3725;
4449 -> 4417;
4450 -> 4417;
4451 -> 4446;
4451 -> 4450;
4452 -> 4447;
4452 -> 4450;
4453 -> 4448;
4453 -> 4450;
4454 -> 4449;
4454 -> 4450;
4455 -> 4452;
4455 -> 4440;
4455 -> 4450;
4456 -> 0;
4456 -> 4450;
4457 -> 4455;
4457 -> 4450;
4458 -> 4451;
4458 -> 4450;
4459 -> 4452;
4459 -> 4455;
4459 -> 4450;
4460 -> 4450;
4461 -> 4459;
4461 -> 4460;
4462 -> 4459;
4462 -> 4460;
4463 -> 4459;
4463 -> 4460;
4464 -> 4459;
4464 -> 4460;
4465 -> 4459;
4465 -> 4460;
4466 -> 4459;
4466 -> 4460;
4467 -> 4459;
4467 -> 4460;
4468 -> 4461;
4468 -> 4460;
4469 -> 4462;
4469 -> 4460;
4470 -> 4463;
4470 -> 4460;
4471 -> 4463;
4471 -> 4460;
4472 -> 4471;
4472 -> 4459;
4472 -> 4460;
4473 -> 4460;
4474 -> 4468;
4474 -> 4473;
4475 -> 4469;
4475 -> 4473;
4476 -> 4470;
4476 -> 4473;
4477 -> 4472;
4477 -> 4473;
4478 -> 4467;
4478 -> 4473;
4479 -> 4474;
4479 -> 4473;
4480 -> 4476;
4480 -> 4472;
4480 -> 4473;
4481 -> 4475;
4481 -> 4473;
4482 -> 4481;
4482 -> 4480;
4482 -> 4473;
4483 -> 4477;
4483 -> 4473;
4484 -> 4473;
4485 -> 4479;
4485 -> 4484;
4486 -> 4480;
4486 -> 4484;
4487 -> 4482;
4487 -> 4484;
4488 -> 4483;
4488 -> 4484;
4489 -> 4478;
4489 -> 4484;
4490 -> 4486;
4490 -> 4484;
4491 -> 4484;
4492 -> 4490;
4492 -> 4491;
4493 -> 4489;
4493 -> 4491;
4494 -> 4491;
4495 -> 4493;
4495 -> 4494;
4497 -> 4496;
4498 -> 4494;
4499 -> 4495;
4499 -> 4498;
4500 -> 4498;
4501 -> 4499;
4501 -> 4498;
4502 -> 4499;
4502 -> 4498;
4503 -> 4493;
4503 -> 4491;
4504 -> 4493;
4504 -> 4491;
4505 -> 4493;
4505 -> 4491;
4506 -> 4492;
4506 -> 4493;
4506 -> 4491;
4507 -> 4489;
4507 -> 4484;
4508 -> 4489;
4508 -> 4484;
4509 -> 4489;
4509 -> 4484;
4510 -> 4489;
4510 -> 4484;
4511 -> 4489;
4511 -> 4484;
4512 -> 4489;
4512 -> 4484;
4513 -> 4489;
4513 -> 4484;
4514 -> 4484;
4515 -> 4485;
4515 -> 4514;
4515 -> 4484;
4516 -> 4487;
4516 -> 4480;
4516 -> 4482;
4516 -> 4484;
4517 -> 4485;
4517 -> 4489;
4517 -> 4484;
4518 -> 4487;
4518 -> 4489;
4518 -> 4484;
4519 -> 4488;
4519 -> 4484;
4520 -> 4478;
4520 -> 4473;
4521 -> 4476;
4521 -> 4473;
4522 -> 0;
4522 -> 4473;
4523 -> 4521;
4523 -> 4522;
4523 -> 4480;
4523 -> 4473;
4524 -> 4467;
4524 -> 4460;
4525 -> 4467;
4525 -> 4460;
4526 -> 4460;
4527 -> 4463;
4527 -> 4523;
4527 -> 4526;
4527 -> 4460;
4528 -> 4527;
4528 -> 4460;
4529 -> 4528;
4529 -> 4467;
4529 -> 4460;
4530 -> 4527;
4530 -> 4460;
4531 -> 4463;
4531 -> 4523;
4531 -> 4460;
4532 -> 4531;
4532 -> 4467;
4532 -> 4460;
4533 -> 4460;
4534 -> 4463;
4534 -> 4523;
4534 -> 4460;
4535 -> 4464;
4535 -> 4460;
4536 -> 4530;
4536 -> 4460;
4537 -> 4462;
4537 -> 4460;
4538 -> 4466;
4538 -> 4460;
4539 -> 4533;
4539 -> 4460;
4540 -> 4460;
4541 -> 4534;
4541 -> 4540;
4542 -> 4535;
4542 -> 4540;
4543 -> 4536;
4543 -> 4540;
4544 -> 4537;
4544 -> 4540;
4545 -> 4538;
4545 -> 4540;
4546 -> 4539;
4546 -> 4540;
4547 -> 4467;
4547 -> 4540;
4548 -> 4542;
4548 -> 0;
4548 -> 4540;
4549 -> 4548;
4549 -> 4540;
4550 -> 0;
4550 -> 4540;
4551 -> 4541;
4551 -> 4540;
4552 -> 4549;
4552 -> 4540;
4553 -> 4550;
4553 -> 4540;
4554 -> 4544;
4554 -> 4540;
4555 -> 4545;
4555 -> 4540;
4556 -> 4546;
4556 -> 4540;
4557 -> 4540;
4558 -> 4551;
4558 -> 4557;
4559 -> 4552;
4559 -> 4557;
4560 -> 4553;
4560 -> 4557;
4561 -> 4554;
4561 -> 4557;
4562 -> 4555;
4562 -> 4557;
4563 -> 4556;
4563 -> 4557;
4564 -> 4558;
4564 -> 4557;
4565 -> 4562;
4565 -> 4557;
4566 -> 4557;
4567 -> 4564;
4567 -> 4566;
4568 -> 4565;
4568 -> 4566;
4569 -> 4566;
4570 -> 4566;
4571 -> 4567;
4572 -> 4566;
4572 -> 4567;
4573 -> 4569;
4573 -> 4567;
4574 -> 4570;
4574 -> 4567;
4575 -> 4568;
4575 -> 4567;
4576 -> 4567;
4577 -> 4571;
4577 -> 4576;
4578 -> 4571;
4578 -> 4576;
4579 -> 4572;
4579 -> 4576;
4580 -> 4573;
4580 -> 4576;
4581 -> 4574;
4581 -> 4576;
4582 -> 4575;
4582 -> 4576;
4583 -> 4579;
4583 -> 4578;
4583 -> 4576;
4584 -> 4576;
4585 -> 4567;
4585 -> 0;
4585 -> 4566;
4586 -> 4567;
4586 -> 4557;
4587 -> 4560;
4587 -> 4557;
4588 -> 4561;
4588 -> 4557;
4589 -> 4562;
4589 -> 4557;
4590 -> 4558;
4590 -> 4557;
4591 -> 4563;
4591 -> 4557;
4592 -> 4557;
4593 -> 4586;
4593 -> 4592;
4594 -> 4587;
4594 -> 4592;
4595 -> 4588;
4595 -> 4592;
4596 -> 4589;
4596 -> 4592;
4597 -> 4590;
4597 -> 4592;
4598 -> 4591;
4598 -> 4592;
4599 -> 4592;
4600 -> 4593;
4600 -> 4594;
4600 -> 4592;
4601 -> 4593;
4601 -> 4594;
4601 -> 4592;
4602 -> 4600;
4602 -> 0;
4602 -> 4592;
4603 -> 4601;
4603 -> 0;
4603 -> 4592;
4604 -> 4592;
4605 -> 4601;
4605 -> 4592;
4606 -> 4605;
4606 -> 0;
4606 -> 4557;
4607 -> 4557;
4608 -> 4605;
4608 -> 4557;
4609 -> 4547;
4609 -> 4540;
4610 -> 4608;
4610 -> 4540;
4611 -> 4545;
4611 -> 4540;
4612 -> 4540;
4613 -> 4609;
4613 -> 4612;
4614 -> 4610;
4614 -> 4612;
4615 -> 4611;
4615 -> 4612;
4616 -> 4613;
4616 -> 4612;
4617 -> 4616;
4617 -> 4518;
4617 -> 4612;
4618 -> 4617;
4618 -> 4612;
4618 -> 4480;
4618 -> 4482;
4618 -> 4567;
4619 -> 4612;
4620 -> 4613;
4620 -> 4619;
4621 -> 4614;
4621 -> 4619;
4622 -> 4618;
4622 -> 4619;
4623 -> 4615;
4623 -> 4619;
4624 -> 4621;
4624 -> 0;
4624 -> 4619;
4625 -> 4540;
4626 -> 4542;
4626 -> 0;
4626 -> 4540;
4627 -> 4608;
4627 -> 4540;
4628 -> 4464;
4628 -> 4460;
4629 -> 4627;
4629 -> 4460;
4630 -> 4460;
4631 -> 4465;
4631 -> 4460;
4632 -> 4460;
4633 -> 4628;
4633 -> 4632;
4634 -> 4629;
4634 -> 4632;
4635 -> 4630;
4635 -> 4632;
4636 -> 4630;
4636 -> 4632;
4637 -> 4631;
4637 -> 4632;
4638 -> 4630;
4638 -> 4632;
4639 -> 4467;
4639 -> 4632;
4640 -> 4634;
4640 -> 4639;
4640 -> 4632;
4642 -> 4641;
4644 -> 4643;
4645 -> 4642;
4645 -> 4644;
4646 -> 4645;
4648 -> 4647;
4649 -> 4646;
4649 -> 4648;
4650 -> 4649;
4652 -> 4651;
4653 -> 4650;
4653 -> 4652;
4654 -> 4653;
4656 -> 4655;
4657 -> 4654;
4657 -> 4656;
4658 -> 4657;
4660 -> 4659;
4661 -> 4658;
4661 -> 4660;
4662 -> 4661;
4664 -> 4663;
4665 -> 4662;
4665 -> 4664;
4666 -> 4665;
4668 -> 4667;
4669 -> 4666;
4669 -> 4668;
4670 -> 4669;
4672 -> 4671;
4674 -> 4673;
4674 -> 4644;
4676 -> 4674;
4676 -> 4675;
4677 -> 4676;
4679 -> 4678;
4679 -> 4646;
4680 -> 4679;
4682 -> 4681;
4682 -> 4650;
4683 -> 4682;
4685 -> 4684;
4685 -> 4650;
4686 -> 4685;
4688 -> 4687;
4688 -> 4658;
4689 -> 4688;
4691 -> 4690;
4691 -> 4662;
4692 -> 4691;
4695 -> 4662;
4695 -> 4694;
4696 -> 4693;
4696 -> 4695;
4697 -> 4696;
4699 -> 4698;
4699 -> 4668;
4701 -> 4699;
4701 -> 4700;
4702 -> 4701;
4704 -> 4703;
4704 -> 4670;
4705 -> 4704;
4706 -> 4677;
4707 -> 4702;
4708 -> 4633;
4708 -> 4632;
4709 -> 4634;
4709 -> 4632;
4710 -> 4635;
4710 -> 4632;
4711 -> 4636;
4711 -> 4632;
4712 -> 4637;
4712 -> 4632;
4713 -> 4638;
4713 -> 4632;
4714 -> 4632;
4715 -> 4632;
4716 -> 4708;
4716 -> 4715;
4717 -> 4709;
4717 -> 4715;
4718 -> 4710;
4718 -> 4715;
4719 -> 4711;
4719 -> 4715;
4720 -> 4712;
4720 -> 4715;
4721 -> 4713;
4721 -> 4715;
4722 -> 4714;
4722 -> 4715;
4723 -> 4717;
4723 -> 4715;
4724 -> 4715;
4725 -> 4723;
4725 -> 4724;
4726 -> 0;
4726 -> 4724;
4727 -> 4725;
4727 -> 4726;
4727 -> 4724;
4728 -> 4724;
4729 -> 4721;
4729 -> 4727;
4729 -> 4715;
4730 -> 4716;
4730 -> 4677;
4730 -> 4715;
4731 -> 4730;
4731 -> 4642;
4731 -> 4715;
4732 -> 4719;
4732 -> 4715;
4733 -> 4732;
4734 -> 4720;
4734 -> 4715;
4735 -> 4734;
4736 -> 4729;
4736 -> 4715;
4737 -> 4736;
4738 -> 4729;
4738 -> 4715;
4739 -> 4738;
4740 -> 4731;
4740 -> 4733;
4740 -> 4715;
4741 -> 4740;
4741 -> 4735;
4741 -> 4715;
4742 -> 4741;
4742 -> 4737;
4742 -> 4715;
4743 -> 4742;
4743 -> 4739;
4743 -> 4715;
4744 -> 4718;
4744 -> 4715;
4745 -> 4692;
4745 -> 4744;
4746 -> 4743;
4746 -> 4745;
4746 -> 4715;
4747 -> 4746;
4747 -> 4697;
4747 -> 4715;
4748 -> 4747;
4748 -> 4722;
4748 -> 4715;
4749 -> 4714;
4749 -> 4639;
4749 -> 4632;
4750 -> 4463;
4750 -> 4618;
4750 -> 4460;
4751 -> 4460;
4752 -> 4750;
4752 -> 4751;
4753 -> 4463;
4753 -> 4752;
4753 -> 4461;
4753 -> 4460;
4754 -> 4460;
4755 -> 4467;
4755 -> 4754;
4756 -> 4754;
4757 -> 4755;
4757 -> 4756;
4758 -> 4757;
4758 -> 4640;
4758 -> 0;
4758 -> 4756;
4759 -> 4756;
4760 -> 4758;
4760 -> 4754;
4761 -> 4760;
4761 -> 4460;
4762 -> 4464;
4762 -> 0;
4762 -> 4460;
4763 -> 4467;
4763 -> 4640;
4763 -> 4460;
4764 -> 4467;
4764 -> 4460;
4765 -> 4460;
4766 -> 4460;
4767 -> 4763;
4767 -> 4766;
4768 -> 4764;
4768 -> 4766;
4769 -> 4765;
4769 -> 4766;
4770 -> 4767;
4770 -> 4766;
4771 -> 4766;
4772 -> 4770;
4772 -> 4771;
4773 -> 4772;
4773 -> 0;
4773 -> 4771;
4774 -> 4773;
4775 -> 4766;
4776 -> 4768;
4776 -> 4775;
4777 -> 0;
4777 -> 4775;
4778 -> 4777;
4778 -> 4766;
4779 -> 4767;
4779 -> 0;
4779 -> 4766;
4780 -> 4766;
4781 -> 4778;
4781 -> 4779;
4781 -> 4766;
4782 -> 4769;
4782 -> 4781;
4782 -> 4766;
4783 -> 4767;
4783 -> 0;
4783 -> 4782;
4784 -> 4766;
4785 -> 4784;
4785 -> 4460;
4786 -> 4460;
4787 -> 4785;
4787 -> 4786;
4787 -> 4460;
4788 -> 4599;
4788 -> 4460;
4789 -> 4464;
4789 -> 4788;
4790 -> 4530;
4790 -> 4788;
4791 -> 4462;
4791 -> 4788;
4792 -> 4466;
4792 -> 4788;
4793 -> 4788;
4794 -> 4789;
4794 -> 4793;
4795 -> 4790;
4795 -> 4793;
4796 -> 4791;
4796 -> 4793;
4797 -> 4792;
4797 -> 4793;
4798 -> 4467;
4798 -> 4793;
4799 -> 4795;
4799 -> 4793;
4800 -> 4799;
4801 -> 4798;
4801 -> 4800;
4802 -> 4801;
4802 -> 4517;
4802 -> 4800;
4803 -> 4802;
4803 -> 4799;
4804 -> 4799;
4805 -> 4803;
4805 -> 4804;
4806 -> 0;
4806 -> 4804;
4807 -> 4804;
4808 -> 4806;
4808 -> 4807;
4809 -> 4805;
4809 -> 4807;
4810 -> 4809;
4810 -> 4752;
4810 -> 4808;
4810 -> 4807;
4811 -> 4807;
4812 -> 4810;
4812 -> 4811;
4812 -> 4807;
4813 -> 4812;
4814 -> 4813;
4814 -> 4812;
4815 -> 4812;
4816 -> 4814;
4816 -> 4815;
4817 -> 0;
4817 -> 4815;
4818 -> 4815;
4819 -> 4817;
4819 -> 4818;
4820 -> 4816;
4820 -> 4818;
4821 -> 4820;
4821 -> 4752;
4821 -> 4819;
4821 -> 4818;
4822 -> 4788;
4823 -> 4463;
4823 -> 4752;
4823 -> 4460;
4824 -> 4463;
4824 -> 4460;
4825 -> 4466;
4825 -> 4460;
4826 -> 4460;
4827 -> 4823;
4827 -> 4826;
4828 -> 4823;
4828 -> 4826;
4829 -> 4824;
4829 -> 4826;
4830 -> 4825;
4830 -> 4826;
4831 -> 4826;
4832 -> 4827;
4832 -> 4831;
4832 -> 4826;
4833 -> 4828;
4833 -> 4831;
4833 -> 4826;
4834 -> 4832;
4834 -> 4833;
4834 -> 4826;
4835 -> 4460;
4836 -> 4459;
4836 -> 4752;
4836 -> 4499;
4836 -> 4501;
4836 -> 4502;
4836 -> 4503;
4836 -> 4504;
4836 -> 4506;
4836 -> 4640;
4836 -> 4517;
4836 -> 4509;
4836 -> 4510;
4836 -> 4511;
4836 -> 4512;
4836 -> 4513;
4836 -> 4518;
4836 -> 4520;
4836 -> 4529;
4836 -> 4532;
4836 -> 4749;
4836 -> 4480;
4836 -> 4482;
4836 -> 4748;
4836 -> 4450;
4837 -> 4452;
4837 -> 4450;
4838 -> 4457;
4838 -> 4450;
4839 -> 4453;
4839 -> 4450;
4840 -> 4454;
4840 -> 4450;
4841 -> 4458;
4841 -> 4836;
4841 -> 4837;
4841 -> 4838;
4841 -> 4839;
4841 -> 4840;
4841 -> 3684;
4841 -> 4450;
4842 -> 4841;
4842 -> 4417;
4843 -> 3722;
4843 -> 3693;
4843 -> 4842;
4843 -> 3692;
4843 -> 4841;
4843 -> 4417;
4844 -> 4418;
4844 -> 4843;
4844 -> 4417;
4845 -> 4844;
4846 -> 4841;
4846 -> 4845;
4847 -> 4846;
4847 -> 4843;
4847 -> 0;
4847 -> 4845;
4848 -> 4845;
4849 -> 4847;
4849 -> 4844;
4850 -> 4445;
4850 -> 4844;
4851 -> 4844;
4852 -> 4849;
4852 -> 4851;
4853 -> 4850;
4853 -> 4851;
4854 -> 3722;
4854 -> 4851;
4855 -> 4852;
4855 -> 4851;
4856 -> 4851;
4857 -> 4855;
4857 -> 4856;
4858 -> 4854;
4858 -> 4856;
4859 -> 4857;
4859 -> 4856;
4860 -> 4858;
4860 -> 3703;
4860 -> 4859;
4861 -> 4858;
4861 -> 4860;
4861 -> 4856;
4862 -> 4861;
4862 -> 4853;
4862 -> 4851;
4863 -> 4844;
4864 -> 4843;
4865 -> 4843;
4866 -> 4843;
4867 -> 4843;
4868 -> 4843;
4869 -> 4868;
4869 -> 4843;
4870 -> 4869;
4870 -> 4843;
4871 -> 4843;
4872 -> 4843;
4873 -> 4843;
4874 -> 4843;
4875 -> 4843;
4876 -> 4870;
4876 -> 4843;
4877 -> 4843;
4878 -> 4843;
4879 -> 4843;
4880 -> 4843;
4881 -> 4843;
4882 -> 4879;
4882 -> 4843;
4883 -> 4879;
4883 -> 4843;
4884 -> 4867;
4884 -> 4843;
4885 -> 4880;
4885 -> 4843;
4886 -> 4881;
4886 -> 0;
4886 -> 4843;
4887 -> 4886;
4887 -> 4843;
4888 -> 4887;
4888 -> 4843;
4889 -> 4883;
4889 -> 4843;
4890 -> 4884;
4890 -> 4843;
4891 -> 4885;
4891 -> 4843;
4892 -> 4890;
4892 -> 4843;
4893 -> 4843;
4894 -> 4843;
4895 -> 4843;
4896 -> 4893;
4896 -> 4843;
4897 -> 4894;
4897 -> 4843;
4898 -> 4892;
4898 -> 4843;
4899 -> 4843;
4900 -> 4895;
4900 -> 4899;
4901 -> 4895;
4901 -> 4899;
4902 -> 4895;
4902 -> 4899;
4903 -> 4896;
4903 -> 4899;
4904 -> 4897;
4904 -> 4899;
4905 -> 4898;
4905 -> 4899;
4906 -> 4902;
4906 -> 4901;
4906 -> 4899;
4907 -> 4899;
4908 -> 4843;
4908 -> 0;
4909 -> 4889;
4909 -> 4843;
4910 -> 4890;
4910 -> 4843;
4911 -> 4843;
4912 -> 4891;
4912 -> 4843;
4913 -> 4843;
4914 -> 4843;
4915 -> 4914;
4915 -> 0;
4915 -> 4843;
4916 -> 4843;
4916 -> 0;
4917 -> 4843;
4918 -> 4843;
4918 -> 0;
4919 -> 4843;
4920 -> 4843;
4921 -> 4884;
4921 -> 4843;
4922 -> 4843;
4923 -> 4843;
4923 -> 4922;
4924 -> 4920;
4924 -> 4922;
4925 -> 4920;
4925 -> 4922;
4926 -> 4921;
4926 -> 4922;
4927 -> 4924;
4927 -> 0;
4927 -> 4922;
4928 -> 4881;
4928 -> 0;
4928 -> 4843;
4929 -> 4843;
4930 -> 4843;
4930 -> 4929;
4931 -> 4929;
4932 -> 4930;
4932 -> 4931;
4933 -> 4932;
4933 -> 4879;
4933 -> 0;
4933 -> 4931;
4934 -> 4931;
4935 -> 4933;
4935 -> 4929;
4936 -> 4935;
4936 -> 4843;
4937 -> 4843;
4937 -> 0;
4938 -> 4843;
4938 -> 4879;
4939 -> 4843;
4940 -> 4843;
4941 -> 4938;
4941 -> 4940;
4942 -> 4939;
4942 -> 4940;
4943 -> 4939;
4943 -> 4940;
4944 -> 4941;
4944 -> 4940;
4945 -> 4940;
4946 -> 4944;
4946 -> 4945;
4947 -> 4946;
4947 -> 0;
4947 -> 4945;
4948 -> 4947;
4949 -> 4940;
4950 -> 4942;
4950 -> 4949;
4951 -> 0;
4951 -> 4949;
4952 -> 4951;
4952 -> 4940;
4953 -> 4941;
4953 -> 0;
4953 -> 4940;
4954 -> 4940;
4955 -> 4952;
4955 -> 4953;
4955 -> 4940;
4956 -> 4943;
4956 -> 4955;
4956 -> 4940;
4957 -> 4941;
4957 -> 0;
4957 -> 4956;
4958 -> 4940;
4959 -> 4958;
4959 -> 4843;
4960 -> 4843;
4961 -> 4959;
4961 -> 4960;
4961 -> 4843;
4962 -> 4913;
4962 -> 4843;
4963 -> 4843;
4963 -> 4962;
4964 -> 4879;
4964 -> 4962;
4965 -> 4867;
4965 -> 4962;
4966 -> 4962;
4967 -> 4963;
4967 -> 4966;
4968 -> 4964;
4968 -> 4966;
4969 -> 4963;
4969 -> 4966;
4970 -> 4965;
4970 -> 4966;
4971 -> 4843;
4971 -> 4966;
4972 -> 4968;
4972 -> 4966;
4973 -> 4972;
4974 -> 4971;
4974 -> 4973;
4975 -> 4974;
4975 -> 4843;
4975 -> 4973;
4976 -> 4975;
4976 -> 4972;
4977 -> 4972;
4978 -> 4976;
4978 -> 4977;
4979 -> 0;
4979 -> 4977;
4980 -> 4977;
4981 -> 4979;
4981 -> 4980;
4982 -> 4978;
4982 -> 4980;
4983 -> 4982;
4983 -> 4920;
4983 -> 4981;
4983 -> 4980;
4984 -> 4980;
4985 -> 4983;
4985 -> 4984;
4985 -> 4980;
4986 -> 4985;
4987 -> 4986;
4987 -> 4985;
4988 -> 4985;
4989 -> 4987;
4989 -> 4988;
4990 -> 0;
4990 -> 4988;
4991 -> 4988;
4992 -> 4990;
4992 -> 4991;
4993 -> 4989;
4993 -> 4991;
4994 -> 4993;
4994 -> 4920;
4994 -> 4992;
4994 -> 4991;
4995 -> 4962;
4996 -> 4843;
4996 -> 4920;
4997 -> 4843;
4998 -> 4867;
4998 -> 4843;
4999 -> 4843;
5000 -> 4996;
5000 -> 4999;
5001 -> 4996;
5001 -> 4999;
5002 -> 4997;
5002 -> 4999;
5003 -> 4998;
5003 -> 4999;
5004 -> 4999;
5005 -> 5000;
5005 -> 5004;
5005 -> 4999;
5006 -> 5001;
5006 -> 5004;
5006 -> 4999;
5007 -> 5005;
5007 -> 5006;
5007 -> 4999;
5008 -> 4843;
5008 -> 4920;
5008 -> 4879;
5009 -> 4843;
5009 -> 5008;
5010 -> 5009;
5011 -> 5008;
5011 -> 5010;
5012 -> 5011;
5012 -> 5008;
5012 -> 0;
5012 -> 5010;
5013 -> 5010;
5014 -> 5012;
5014 -> 5009;
5015 -> 4843;
5015 -> 5009;
5016 -> 5009;
5017 -> 5014;
5017 -> 5016;
5018 -> 5015;
5018 -> 5016;
5019 -> 3722;
5019 -> 5016;
5020 -> 5017;
5020 -> 5016;
5021 -> 5016;
5022 -> 5020;
5022 -> 5021;
5023 -> 5019;
5023 -> 5021;
5024 -> 5022;
5024 -> 5021;
5025 -> 5023;
5025 -> 4860;
5025 -> 5024;
5026 -> 5023;
5026 -> 5025;
5026 -> 5021;
5027 -> 5026;
5027 -> 5018;
5027 -> 5016;
5028 -> 5009;
5029 -> 3722;
5029 -> 3697;
5029 -> 3721;
5030 -> 3723;
5030 -> 3721;
5031 -> 3721;
5032 -> 5029;
5032 -> 5031;
5033 -> 5030;
5033 -> 5031;
5034 -> 5031;
5035 -> 5033;
5035 -> 5034;
5035 -> 5031;
5036 -> 3721;
5037 -> 3722;
5037 -> 3695;
5037 -> 3721;
5038 -> 4401;
5038 -> 3721;
5039 -> 3721;
5040 -> 5037;
5040 -> 5039;
5041 -> 5038;
5041 -> 5039;
5042 -> 5039;
5043 -> 5041;
5043 -> 5042;
5043 -> 5039;
5044 -> 3721;
5045 -> 3686;
5046 -> 3686;
5047 -> 3688;
5047 -> 5046;
5048 -> 5046;
5049 -> 5047;
5049 -> 5008;
5049 -> 5048;
5050 -> 5049;
5050 -> 3686;
5051 -> 3686;
5052 -> 3688;
5052 -> 5051;
5053 -> 5051;
5054 -> 5053;
5054 -> 5051;
5055 -> 5051;
5056 -> 5054;
5056 -> 5055;
5057 -> 5052;
5057 -> 5055;
5058 -> 5055;
5059 -> 5057;
5059 -> 5058;
5060 -> 5058;
5061 -> 5060;
5061 -> 5055;
5062 -> 5055;
5063 -> 5057;
5063 -> 5062;
5064 -> 5063;
5064 -> 5008;
5064 -> 5062;
5065 -> 5064;
5065 -> 5055;
5066 -> 5055;
5067 -> 5065;
5067 -> 5066;
5068 -> 0;
5068 -> 5066;
5069 -> 5068;
5069 -> 5055;
5070 -> 5061;
5070 -> 5069;
5070 -> 5055;
5071 -> 5055;
5072 -> 5057;
5072 -> 5071;
5073 -> 5071;
5074 -> 5072;
5074 -> 5073;
5075 -> 5074;
5075 -> 5008;
5075 -> 5073;
5076 -> 5075;
5076 -> 5071;
5077 -> 5071;
5078 -> 5076;
5079 -> 5076;
5080 -> 5078;
5080 -> 5079;
5080 -> 5076;
5081 -> 5078;
5081 -> 5080;
5082 -> 5081;
5082 -> 5055;
5083 -> 5055;
5084 -> 5082;
5084 -> 5083;
5085 -> 5083;
5086 -> 5084;
5086 -> 5085;
5087 -> 5086;
5087 -> 5008;
5087 -> 5085;
5088 -> 5083;
5089 -> 5087;
5090 -> 5087;
5090 -> 5089;
5091 -> 5090;
5091 -> 5008;
5091 -> 5089;
5092 -> 5091;
5093 -> 5091;
5094 -> 5083;
5095 -> 5094;
5095 -> 5055;
5096 -> 5055;
5097 -> 5070;
5097 -> 5095;
5097 -> 5055;
5098 -> 5055;
5099 -> 5055;
5100 -> 5099;
5100 -> 3686;
5101 -> 3688;
5101 -> 5008;
5101 -> 3686;
5102 -> 5101;
5102 -> 3147;
5102 -> 3686;
5103 -> 3686;
5104 -> 3689;
5104 -> 5103;
5105 -> 5104;
5105 -> 3693;
5105 -> 5101;
5105 -> 5103;
5106 -> 5104;
5106 -> 3695;
5106 -> 5103;
5107 -> 5103;
5108 -> 5106;
5108 -> 5107;
5109 -> 5107;
5110 -> 5108;
5110 -> 3694;
5110 -> 5109;
5110 -> 5107;
5111 -> 5108;
5111 -> 3694;
5111 -> 5110;
5112 -> 0;
5112 -> 5110;
5113 -> 5104;
5113 -> 3697;
5113 -> 5103;
5114 -> 5103;
5115 -> 5113;
5115 -> 5114;
5116 -> 5114;
5117 -> 5115;
5117 -> 3696;
5117 -> 5116;
5117 -> 5114;
5118 -> 5115;
5118 -> 3696;
5118 -> 5117;
5119 -> 0;
5119 -> 5117;
5120 -> 5104;
5120 -> 3698;
5120 -> 5103;
5121 -> 5104;
5121 -> 3699;
5121 -> 5103;
5122 -> 5104;
5122 -> 3700;
5122 -> 5103;
5123 -> 5104;
5123 -> 3702;
5123 -> 5103;
5124 -> 5104;
5124 -> 5025;
5124 -> 5103;
5125 -> 5104;
5125 -> 3704;
5125 -> 5103;
5126 -> 5103;
5127 -> 5103;
5128 -> 5105;
5128 -> 5127;
5129 -> 5112;
5129 -> 5127;
5130 -> 5119;
5130 -> 5127;
5131 -> 5120;
5131 -> 5127;
5132 -> 5121;
5132 -> 5127;
5133 -> 5122;
5133 -> 5127;
5134 -> 5123;
5134 -> 5127;
5135 -> 5124;
5135 -> 5127;
5136 -> 5125;
5136 -> 5127;
5137 -> 5126;
5137 -> 5127;
5138 -> 5137;
5138 -> 5127;
5139 -> 5137;
5139 -> 5127;
5140 -> 5137;
5140 -> 5127;
5141 -> 5137;
5141 -> 5127;
5142 -> 5137;
5142 -> 5127;
5143 -> 5137;
5143 -> 5127;
5144 -> 5128;
5144 -> 5105;
5144 -> 5127;
5145 -> 5129;
5145 -> 0;
5145 -> 5127;
5146 -> 5130;
5146 -> 0;
5146 -> 5127;
5147 -> 5128;
5147 -> 5127;
5148 -> 5127;
5149 -> 5132;
5149 -> 5133;
5149 -> 5127;
5150 -> 5128;
5150 -> 5137;
5150 -> 5127;
5151 -> 5129;
5151 -> 5137;
5151 -> 5127;
5152 -> 5130;
5152 -> 5137;
5152 -> 5127;
5153 -> 5131;
5153 -> 5137;
5153 -> 5127;
5154 -> 5132;
5154 -> 5137;
5154 -> 5127;
5155 -> 5133;
5155 -> 5137;
5155 -> 5127;
5156 -> 5134;
5156 -> 5137;
5156 -> 5127;
5157 -> 5135;
5157 -> 5137;
5157 -> 5127;
5158 -> 5136;
5158 -> 5137;
5158 -> 5127;
5159 -> 5126;
5159 -> 3686;
5160 -> 5159;
5160 -> 3679;
5161 -> 3680;
5161 -> 5147;
5161 -> 3679;
5162 -> 5160;
5162 -> 3679;
5163 -> 3147;
5163 -> 3679;
5164 -> 5161;
5164 -> 5162;
5164 -> 5163;
5164 -> 5153;
5164 -> 5154;
5164 -> 5155;
5164 -> 5156;
5164 -> 5157;
5164 -> 5158;
5164 -> 5150;
5164 -> 5151;
5164 -> 5152;
5164 -> 3141;
5164 -> 3142;
5164 -> 3143;
5164 -> 3144;
5164 -> 3145;
5164 -> 3146;
5164 -> 5147;
5164 -> 5105;
5164 -> 0;
5164 -> 3679;
5165 -> 5164;
5165 -> 3147;
5165 -> 3679;
5166 -> 3684;
5166 -> 3679;
5167 -> 3679;
5168 -> 5166;
5168 -> 5167;
5169 -> 3680;
5169 -> 5167;
5170 -> 5167;
5171 -> 5169;
5171 -> 5170;
5172 -> 5171;
5172 -> 5164;
5172 -> 5170;
5173 -> 5172;
5173 -> 5167;
5174 -> 5168;
5174 -> 5164;
5174 -> 5167;
5175 -> 3679;
5176 -> 3684;
5176 -> 5164;
5176 -> 3679;
5177 -> 5160;
5177 -> 3679;
5178 -> 5177;
5178 -> 3676;
5179 -> 5178;
5179 -> 3676;
5180 -> 5178;
5180 -> 3676;
5181 -> 3676;
5182 -> 3676;
5183 -> 5180;
5183 -> 5182;
5184 -> 5181;
5184 -> 5182;
5185 -> 5184;
5185 -> 5182;
5186 -> 5184;
5186 -> 5182;
5187 -> 5184;
5187 -> 5182;
5188 -> 5184;
5188 -> 5182;
5189 -> 5183;
5189 -> 3147;
5189 -> 5182;
5190 -> 5183;
5190 -> 5176;
5190 -> 5184;
5190 -> 5182;
5191 -> 5183;
5191 -> 5176;
5191 -> 5184;
5191 -> 5182;
5192 -> 5181;
5192 -> 3676;
5193 -> 5178;
5193 -> 3676;
5194 -> 3677;
5194 -> 3676;
5195 -> 3676;
5196 -> 5192;
5196 -> 5195;
5197 -> 5193;
5197 -> 5195;
5198 -> 5194;
5198 -> 5195;
5199 -> 3678;
5199 -> 5195;
5200 -> 5195;
5201 -> 5199;
5201 -> 5200;
5202 -> 5200;
5203 -> 5201;
5203 -> 5176;
5203 -> 5202;
5204 -> 5203;
5204 -> 5195;
5205 -> 5196;
5205 -> 5204;
5206 -> 5197;
5206 -> 5204;
5207 -> 5198;
5207 -> 5204;
5208 -> 5204;
5209 -> 5205;
5209 -> 5208;
5210 -> 5206;
5210 -> 5208;
5211 -> 5207;
5211 -> 5208;
5212 -> 5199;
5212 -> 5208;
5213 -> 5212;
5213 -> 5176;
5213 -> 0;
5213 -> 5208;
5214 -> 5213;
5215 -> 5204;
5216 -> 5196;
5216 -> 5204;
5217 -> 5197;
5217 -> 5204;
5218 -> 5198;
5218 -> 5204;
5219 -> 5204;
5220 -> 5216;
5220 -> 5219;
5221 -> 5217;
5221 -> 5219;
5222 -> 5218;
5222 -> 5219;
5223 -> 5199;
5223 -> 5219;
5224 -> 5219;
5225 -> 5219;
5226 -> 5219;
5227 -> 5221;
5227 -> 5219;
5228 -> 5219;
5229 -> 5227;
5229 -> 5228;
5230 -> 5220;
5230 -> 5228;
5231 -> 5229;
5231 -> 5176;
5231 -> 5228;
5232 -> 5231;
5232 -> 5230;
5232 -> 5185;
5232 -> 5228;
5233 -> 5232;
5233 -> 5219;
5234 -> 5233;
5235 -> 5233;
5235 -> 5234;
5236 -> 0;
5236 -> 5234;
5237 -> 5236;
5237 -> 5233;
5238 -> 5233;
5238 -> 5237;
5239 -> 5237;
5240 -> 5238;
5240 -> 5239;
5241 -> 5239;
5242 -> 5240;
5242 -> 5176;
5242 -> 5241;
5243 -> 5242;
5243 -> 5176;
5243 -> 4642;
5243 -> 5241;
5244 -> 5243;
5244 -> 5239;
5245 -> 5244;
5245 -> 5237;
5246 -> 5245;
5247 -> 5223;
5247 -> 5246;
5248 -> 5247;
5248 -> 5245;
5249 -> 5248;
5250 -> 5248;
5251 -> 5238;
5251 -> 5250;
5252 -> 5251;
5252 -> 5176;
5252 -> 5247;
5252 -> 5250;
5253 -> 5250;
5254 -> 5251;
5254 -> 5253;
5255 -> 5253;
5256 -> 5254;
5256 -> 5255;
5257 -> 5255;
5258 -> 5256;
5258 -> 5176;
5258 -> 5247;
5258 -> 5257;
5258 -> 5255;
5259 -> 5255;
5260 -> 5256;
5260 -> 5176;
5260 -> 5247;
5260 -> 5259;
5260 -> 5255;
5261 -> 5260;
5261 -> 5253;
5262 -> 5261;
5262 -> 5250;
5263 -> 5262;
5263 -> 5248;
5264 -> 5248;
5265 -> 5225;
5265 -> 5263;
5265 -> 5248;
5266 -> 5249;
5266 -> 5226;
5266 -> 5233;
5267 -> 5260;
5268 -> 5260;
5269 -> 5268;
5269 -> 5226;
5269 -> 5260;
5270 -> 5265;
5270 -> 5219;
5271 -> 5268;
5271 -> 5219;
5272 -> 5270;
5272 -> 5271;
5272 -> 5219;
5273 -> 5221;
5273 -> 5260;
5273 -> 5219;
5274 -> 5219;
5275 -> 5273;
5275 -> 5274;
5276 -> 5275;
5276 -> 5274;
5277 -> 5274;
5278 -> 5226;
5278 -> 5276;
5278 -> 5219;
5279 -> 5219;
5280 -> 5223;
5280 -> 5279;
5281 -> 5279;
5282 -> 5280;
5282 -> 5276;
5282 -> 5281;
5282 -> 5279;
5283 -> 5282;
5283 -> 0;
5283 -> 5279;
5284 -> 5283;
5284 -> 5219;
5285 -> 5204;
5286 -> 3676;
5287 -> 3678;
5287 -> 5282;
5287 -> 3676;
5288 -> 3676;
5289 -> 5178;
5289 -> 3676;
5290 -> 3676;
5291 -> 5289;
5291 -> 5290;
5292 -> 5181;
5292 -> 5290;
5293 -> 5292;
5293 -> 5185;
5293 -> 5290;
5294 -> 5291;
5294 -> 5287;
5294 -> 5290;
5295 -> 5294;
5295 -> 5293;
5295 -> 5290;
5296 -> 5292;
5296 -> 5186;
5296 -> 5290;
5297 -> 5296;
5297 -> 5290;
5298 -> 5291;
5298 -> 5287;
5298 -> 5297;
5299 -> 5295;
5299 -> 5290;
5300 -> 5291;
5300 -> 5287;
5300 -> 5290;
5301 -> 5298;
5301 -> 5290;
5302 -> 5292;
5302 -> 5190;
5302 -> 5290;
5303 -> 5292;
5303 -> 5191;
5303 -> 5290;
5304 -> 5290;
5305 -> 5290;
5306 -> 5299;
5306 -> 5305;
5307 -> 5300;
5307 -> 5305;
5308 -> 5301;
5308 -> 5305;
5309 -> 5300;
5309 -> 5305;
5310 -> 5302;
5310 -> 5305;
5311 -> 5303;
5311 -> 5305;
5312 -> 5304;
5312 -> 5305;
5313 -> 5312;
5313 -> 5305;
5314 -> 5312;
5314 -> 5305;
5315 -> 5312;
5315 -> 5305;
5316 -> 5306;
5316 -> 5287;
5316 -> 5305;
5317 -> 5307;
5317 -> 5287;
5317 -> 5305;
5318 -> 5307;
5318 -> 5305;
5319 -> 5305;
5320 -> 5318;
5320 -> 5319;
5320 -> 5287;
5320 -> 5298;
5320 -> 5305;
5321 -> 5308;
5321 -> 5287;
5321 -> 5305;
5322 -> 5308;
5322 -> 5305;
5323 -> 5305;
5324 -> 5322;
5324 -> 5323;
5324 -> 5287;
5324 -> 5298;
5324 -> 5320;
5324 -> 5305;
5325 -> 5306;
5325 -> 5305;
5326 -> 5305;
5327 -> 5325;
5327 -> 5326;
5327 -> 5287;
5327 -> 5324;
5327 -> 5305;
5328 -> 5306;
5328 -> 5305;
5329 -> 5305;
5330 -> 5328;
5330 -> 5329;
5330 -> 5287;
5330 -> 5327;
5330 -> 5305;
5331 -> 5309;
5331 -> 5330;
5331 -> 5305;
5332 -> 5331;
5332 -> 5329;
5333 -> 5329;
5334 -> 5332;
5334 -> 5333;
5335 -> 0;
5335 -> 5333;
5336 -> 5335;
5336 -> 5329;
5337 -> 5331;
5337 -> 5336;
5337 -> 5305;
5338 -> 5306;
5338 -> 5312;
5338 -> 5305;
5339 -> 5307;
5339 -> 5312;
5339 -> 5305;
5340 -> 5308;
5340 -> 5312;
5340 -> 5305;
5341 -> 5309;
5341 -> 5312;
5341 -> 5305;
5342 -> 5310;
5342 -> 5312;
5342 -> 5305;
5343 -> 5311;
5343 -> 5312;
5343 -> 5305;
5344 -> 5304;
5344 -> 3676;
5345 -> 5344;
5345 -> 3669;
5346 -> 3670;
5346 -> 5330;
5346 -> 3669;
5347 -> 5345;
5347 -> 3669;
5348 -> 3669;
5349 -> 5346;
5349 -> 5347;
5349 -> 5348;
5349 -> 5341;
5349 -> 5342;
5349 -> 5343;
5349 -> 5338;
5349 -> 5339;
5349 -> 5340;
5349 -> 5330;
5349 -> 5287;
5349 -> 5298;
5349 -> 3669;
5350 -> 3669;
5351 -> 5349;
5351 -> 5350;
5351 -> 3669;
5352 -> 3674;
5352 -> 3669;
5353 -> 3669;
5354 -> 5352;
5354 -> 5353;
5355 -> 3670;
5355 -> 5353;
5356 -> 5353;
5357 -> 5355;
5357 -> 5356;
5358 -> 5357;
5358 -> 5349;
5358 -> 5356;
5359 -> 5358;
5359 -> 5353;
5360 -> 5354;
5360 -> 3674;
5360 -> 5353;
5361 -> 3669;
5362 -> 3674;
5362 -> 3669;
5363 -> 3669;
5364 -> 5363;
5364 -> 3670;
5364 -> 3669;
5365 -> 5345;
5365 -> 3669;
5366 -> 5365;
5366 -> 3665;
5367 -> 3665;
5368 -> 3667;
5368 -> 5367;
5369 -> 5367;
5370 -> 5369;
5370 -> 5367;
5371 -> 5367;
5372 -> 5370;
5372 -> 5371;
5373 -> 5368;
5373 -> 5371;
5374 -> 5371;
5375 -> 5373;
5375 -> 5374;
5376 -> 5374;
5377 -> 5376;
5377 -> 5371;
5378 -> 5371;
5379 -> 5373;
5379 -> 5378;
5380 -> 5379;
5380 -> 5349;
5380 -> 5378;
5381 -> 5380;
5381 -> 5371;
5382 -> 5371;
5383 -> 5381;
5383 -> 5382;
5384 -> 0;
5384 -> 5382;
5385 -> 5384;
5385 -> 5371;
5386 -> 5377;
5386 -> 5385;
5386 -> 5371;
5387 -> 5371;
5388 -> 5373;
5388 -> 5387;
5389 -> 5387;
5390 -> 5388;
5390 -> 5389;
5391 -> 5390;
5391 -> 5349;
5391 -> 5389;
5392 -> 5391;
5392 -> 5387;
5393 -> 5387;
5394 -> 5392;
5395 -> 5392;
5396 -> 5394;
5396 -> 5395;
5396 -> 5392;
5397 -> 5394;
5397 -> 5396;
5398 -> 5397;
5398 -> 5371;
5399 -> 5371;
5400 -> 5398;
5400 -> 5399;
5401 -> 5399;
5402 -> 5400;
5402 -> 5401;
5403 -> 5402;
5403 -> 5349;
5403 -> 5401;
5404 -> 5399;
5405 -> 5403;
5406 -> 5403;
5406 -> 5405;
5407 -> 5406;
5407 -> 5349;
5407 -> 5405;
5408 -> 5407;
5409 -> 5407;
5410 -> 5399;
5411 -> 5410;
5411 -> 5371;
5412 -> 5371;
5413 -> 5386;
5413 -> 5411;
5413 -> 5371;
5414 -> 5371;
5415 -> 5371;
5416 -> 5415;
5416 -> 3665;
5417 -> 5366;
5417 -> 5349;
5417 -> 5416;
5417 -> 3665;
5418 -> 5366;
5418 -> 5349;
5418 -> 5417;
5419 -> 5417;
5420 -> 0;
5420 -> 5417;
5421 -> 5418;
5421 -> 5419;
5421 -> 5420;
5421 -> 5349;
5421 -> 5364;
5421 -> 5417;
5422 -> 5421;
5422 -> 5419;
5423 -> 5419;
5424 -> 5422;
5424 -> 5423;
5425 -> 5424;
5425 -> 5419;
5426 -> 5425;
5426 -> 5417;
5427 -> 5417;
5428 -> 3667;
5428 -> 5427;
5429 -> 5427;
5430 -> 5428;
5430 -> 5425;
5430 -> 5429;
5430 -> 5427;
5431 -> 5430;
5432 -> 5428;
5432 -> 5425;
5432 -> 5430;
5433 -> 5431;
5433 -> 5430;
5434 -> 5430;
5435 -> 5433;
5435 -> 5434;
5436 -> 5428;
5436 -> 5434;
5437 -> 5434;
5438 -> 5434;
5439 -> 5436;
5439 -> 5425;
5439 -> 5434;
5440 -> 5434;
5441 -> 5436;
5441 -> 5440;
5442 -> 5440;
5443 -> 5441;
5443 -> 5442;
5444 -> 5443;
5444 -> 5440;
5445 -> 5444;
5445 -> 5434;
5446 -> 5434;
5447 -> 3000;
5447 -> 2999;
5447 -> 5446;
5447 -> 5434;
5448 -> 5434;
5449 -> 5437;
5449 -> 5448;
5449 -> 5434;
5450 -> 5449;
5450 -> 5434;
5451 -> 3000;
5451 -> 5450;
5452 -> 5437;
5452 -> 5434;
5453 -> 5451;
5453 -> 5430;
5454 -> 5430;
5455 -> 5431;
5455 -> 5453;
5456 -> 5453;
5457 -> 5455;
5457 -> 5456;
5458 -> 5428;
5458 -> 5456;
5459 -> 5456;
5460 -> 5458;
5460 -> 5459;
5461 -> 5460;
5461 -> 5456;
5462 -> 5457;
5462 -> 5431;
5462 -> 5456;
5463 -> 5453;
5464 -> 0;
5464 -> 5453;
5465 -> 5453;
5466 -> 5464;
5466 -> 5465;
5467 -> 5431;
5467 -> 5430;
5468 -> 5428;
5468 -> 5453;
5468 -> 5427;
5469 -> 5468;
5469 -> 5417;
5470 -> 5417;
5471 -> 5426;
5471 -> 5470;
5472 -> 5469;
5472 -> 5470;
5473 -> 5472;
5473 -> 5470;
5474 -> 5473;
5474 -> 5453;
5474 -> 5466;
5474 -> 5470;
5475 -> 5417;
5476 -> 5425;
5476 -> 3665;
5477 -> 3666;
5477 -> 3665;
5478 -> 3665;
5479 -> 5476;
5479 -> 5478;
5480 -> 5477;
5480 -> 5478;
5481 -> 3667;
5481 -> 5478;
5482 -> 5479;
5482 -> 5453;
5482 -> 5478;
5483 -> 5479;
5483 -> 5453;
5483 -> 5478;
5484 -> 5482;
5484 -> 5483;
5484 -> 5453;
5484 -> 5466;
5484 -> 5478;
5485 -> 2463;
5485 -> 5478;
5486 -> 5482;
5486 -> 5478;
5487 -> 5486;
5487 -> 5484;
5487 -> 5478;
5488 -> 5485;
5488 -> 2453;
5488 -> 2454;
5488 -> 2455;
5488 -> 2456;
5488 -> 2457;
5488 -> 2458;
5488 -> 2459;
5488 -> 5487;
5489 -> 5479;
5489 -> 5487;
5489 -> 5484;
5490 -> 5489;
5491 -> 5490;
5491 -> 5489;
5492 -> 5489;
5493 -> 5490;
5493 -> 5492;
5494 -> 5493;
5494 -> 5489;
5494 -> 0;
5494 -> 5492;
5495 -> 5492;
5496 -> 5494;
5496 -> 5489;
5497 -> 5485;
5497 -> 5488;
5497 -> 5489;
5498 -> 5482;
5498 -> 5489;
5499 -> 3665;
5500 -> 5479;
5500 -> 3665;
5501 -> 5500;
5501 -> 3662;
5502 -> 3660;
5502 -> 5498;
5502 -> 3662;
5503 -> 5501;
5503 -> 3662;
5504 -> 3662;
5505 -> 5502;
5505 -> 5503;
5505 -> 5504;
5505 -> 5498;
5505 -> 3662;
5506 -> 3663;
5506 -> 5505;
5507 -> 5505;
5508 -> 5506;
5508 -> 5507;
5509 -> 3660;
5509 -> 5507;
5510 -> 5507;
5511 -> 5509;
5511 -> 5510;
5512 -> 5511;
5512 -> 5507;
5513 -> 5508;
5513 -> 3663;
5513 -> 5507;
5514 -> 5505;
5515 -> 0;
5515 -> 5505;
5516 -> 5505;
5517 -> 5515;
5517 -> 5516;
5518 -> 3663;
5518 -> 3662;
5519 -> 0;
5519 -> 3659;
5520 -> 3659;
5521 -> 3659;
5522 -> 5519;
5522 -> 5521;
5523 -> 5520;
5523 -> 5521;
5524 -> 3660;
5524 -> 5505;
5524 -> 5521;
5525 -> 5522;
5525 -> 5521;
5526 -> 5521;
5527 -> 5525;
5527 -> 5526;
5528 -> 5524;
5528 -> 5526;
5529 -> 5528;
5529 -> 5505;
5529 -> 5517;
5529 -> 5527;
5529 -> 5526;
5530 -> 5529;
5531 -> 3660;
5531 -> 5505;
5531 -> 3659;
5532 -> 5531;
5532 -> 3652;
5533 -> 5532;
5533 -> 3651;
5534 -> 3651;
5535 -> 5533;
5535 -> 5534;
5535 -> 5505;
5535 -> 5517;
5535 -> 3651;
5536 -> 3649;
5536 -> 5535;
5536 -> 3651;
5537 -> 5535;
5537 -> 3651;
5538 -> 3649;
5538 -> 5536;
5538 -> 3651;
5539 -> 5538;
5539 -> 3648;
5540 -> 5539;
5540 -> 3647;
5541 -> 3647;
5542 -> 5540;
5542 -> 5539;
5542 -> 5541;
5542 -> 3647;
5543 -> 0;
5543 -> 5542;
5544 -> 5542;
5545 -> 5543;
5545 -> 5544;
5546 -> 5543;
5546 -> 5544;
5547 -> 5546;
5547 -> 5544;
5548 -> 5545;
5548 -> 5546;
5548 -> 5544;
5549 -> 5545;
5549 -> 5544;
5550 -> 5544;
5551 -> 5549;
5551 -> 5550;
5552 -> 5546;
5552 -> 5550;
5553 -> 5551;
5553 -> 5550;
5554 -> 5550;
5555 -> 5550;
5556 -> 5553;
5556 -> 5555;
5557 -> 5554;
5557 -> 5555;
5558 -> 5552;
5558 -> 5555;
5559 -> 5556;
5559 -> 5555;
5560 -> 5556;
5560 -> 5555;
5561 -> 5556;
5561 -> 5555;
5562 -> 5557;
5562 -> 5555;
5563 -> 5555;
5564 -> 5561;
5564 -> 5563;
5565 -> 5562;
5565 -> 5563;
5566 -> 5558;
5566 -> 5563;
5567 -> 5566;
5567 -> 5564;
5567 -> 5563;
5568 -> 5543;
5568 -> 5544;
5569 -> 5544;
5570 -> 5568;
5570 -> 5569;
5571 -> 5570;
5571 -> 5567;
5571 -> 5569;
5572 -> 5571;
5572 -> 5544;
5573 -> 5544;
5574 -> 5568;
5574 -> 5573;
5575 -> 5573;
5576 -> 5574;
5576 -> 5575;
5577 -> 5575;
5577 -> 5573;
5578 -> 5574;
5578 -> 5573;
5579 -> 5578;
5579 -> 5567;
5579 -> 5573;
5580 -> 5579;
5580 -> 5544;
5581 -> 5544;
5582 -> 5580;
5582 -> 5581;
5582 -> 5544;
5583 -> 5544;
5584 -> 5572;
5584 -> 5567;
5584 -> 5583;
5584 -> 5544;
5585 -> 5584;
5585 -> 5544;
5586 -> 5580;
5586 -> 5585;
5587 -> 5585;
5588 -> 5585;
5588 -> 5587;
5589 -> 5586;
5589 -> 5587;
5590 -> 5585;
5590 -> 5587;
5591 -> 5588;
5591 -> 5585;
5591 -> 5587;
5592 -> 5588;
5592 -> 5585;
5592 -> 5587;
5593 -> 5589;
5593 -> 5587;
5594 -> 5587;
5595 -> 5591;
5595 -> 5594;
5596 -> 5592;
5596 -> 5594;
5597 -> 5593;
5597 -> 5594;
5598 -> 5590;
5598 -> 5594;
5599 -> 5594;
5600 -> 5595;
5600 -> 5599;
5600 -> 5594;
5601 -> 5595;
5601 -> 5600;
5602 -> 5600;
5603 -> 5601;
5603 -> 5602;
5604 -> 5597;
5604 -> 5602;
5605 -> 5604;
5605 -> 5603;
5605 -> 5602;
5606 -> 5596;
5606 -> 5594;
5607 -> 5605;
5607 -> 5594;
5608 -> 5606;
5608 -> 5594;
5609 -> 5598;
5609 -> 5594;
5610 -> 5594;
5611 -> 5608;
5611 -> 5610;
5611 -> 5594;
5612 -> 5594;
5613 -> 5607;
5613 -> 5612;
5613 -> 5594;
5614 -> 5607;
5614 -> 5609;
5614 -> 5594;
5615 -> 5608;
5615 -> 5609;
5615 -> 5594;
5616 -> 5543;
5616 -> 5585;
5616 -> 5605;
5616 -> 5614;
5616 -> 5615;
5616 -> 5542;
5617 -> 5616;
5617 -> 5581;
5617 -> 5544;
5618 -> 5616;
5619 -> 5616;
5620 -> 5544;
5621 -> 5543;
5621 -> 5620;
5622 -> 5620;
5622 -> 5544;
5623 -> 5573;
5624 -> 5543;
5624 -> 5544;
5625 -> 5543;
5625 -> 5544;
5626 -> 5544;
5627 -> 5544;
5628 -> 5624;
5628 -> 5627;
5629 -> 5628;
5629 -> 5616;
5629 -> 5627;
5630 -> 5629;
5630 -> 5544;
5631 -> 5544;
5632 -> 5625;
5632 -> 5631;
5633 -> 5632;
5633 -> 5616;
5633 -> 5631;
5634 -> 5633;
5634 -> 5544;
5635 -> 5630;
5635 -> 5634;
5635 -> 5544;
5636 -> 5544;
5637 -> 5624;
5637 -> 5636;
5638 -> 5637;
5638 -> 5616;
5638 -> 5636;
5639 -> 5638;
5639 -> 5544;
5640 -> 5544;
5641 -> 5625;
5641 -> 5640;
5642 -> 5641;
5642 -> 5616;
5642 -> 5640;
5643 -> 5642;
5643 -> 5544;
5644 -> 5639;
5644 -> 5643;
5644 -> 5544;
5645 -> 5644;
5645 -> 5581;
5645 -> 5544;
5646 -> 5644;
5647 -> 5644;
5648 -> 5628;
5648 -> 5644;
5648 -> 5627;
5649 -> 5648;
5649 -> 5544;
5650 -> 5632;
5650 -> 5644;
5650 -> 5631;
5651 -> 5650;
5651 -> 5544;
5652 -> 5649;
5652 -> 5651;
5652 -> 5544;
5653 -> 3642;
5653 -> 5644;
5653 -> 5542;
5654 -> 5644;
5654 -> 5542;
5655 -> 3647;
5656 -> 3642;
5656 -> 5653;
5656 -> 5655;
5657 -> 5656;
5657 -> 5653;
5657 -> 5655;
5658 -> 3385;
5658 -> 5655;
5659 -> 3647;
5660 -> 5644;
5660 -> 3647;
5661 -> 5660;
5661 -> 1;
5662 -> 5661;
5662 -> 3640;
5662 -> 5644;
5662 -> 5653;
5662 -> 5657;
5662 -> 1;
5663 -> 5662;
5663 -> 3640;
5664 -> 0;
5664 -> 3640;
5665 -> 3640;
5666 -> 5664;
5666 -> 5665;
5667 -> 5663;
5667 -> 5665;
5668 -> 5665;
5669 -> 5667;
5669 -> 5668;
5670 -> 5669;
5670 -> 5662;
5670 -> 5668;
5671 -> 5669;
5671 -> 5662;
5671 -> 5670;
5672 -> 5670;
5673 -> 5669;
5673 -> 5672;
5674 -> 5673;
5674 -> 5672;
5675 -> 5672;
5676 -> 5672;
5677 -> 5674;
5677 -> 5676;
5678 -> 5675;
5678 -> 5676;
5679 -> 5676;
5680 -> 5678;
5680 -> 5679;
5681 -> 5678;
5681 -> 5676;
5682 -> 5678;
5682 -> 5676;
5683 -> 5678;
5683 -> 5676;
5684 -> 5677;
5684 -> 5676;
5685 -> 5677;
5685 -> 5678;
5685 -> 5676;
5686 -> 5675;
5686 -> 5670;
5687 -> 5670;
5688 -> 5671;
5688 -> 5686;
5688 -> 5687;
5688 -> 5685;
5688 -> 5682;
5688 -> 5683;
5688 -> 5662;
5688 -> 5670;
5689 -> 5669;
5689 -> 5688;
5689 -> 5668;
5690 -> 5689;
5690 -> 5665;
5691 -> 5666;
5691 -> 5665;
5692 -> 5665;
5693 -> 5690;
5693 -> 5692;
5694 -> 5691;
5694 -> 5692;
5695 -> 5693;
5695 -> 5692;
5696 -> 5694;
5696 -> 5692;
5697 -> 5692;
5698 -> 5695;
5698 -> 5697;
5699 -> 5696;
5699 -> 5697;
5700 -> 5699;
5700 -> 5697;
5701 -> 5698;
5701 -> 5697;
5702 -> 5697;
5703 -> 5700;
5703 -> 5697;
5704 -> 5697;
5705 -> 5701;
5705 -> 5704;
5706 -> 5702;
5706 -> 5704;
5707 -> 5702;
5707 -> 5704;
5708 -> 5703;
5708 -> 5704;
5709 -> 5702;
5709 -> 5704;
5710 -> 5704;
5711 -> 5705;
5711 -> 5710;
5711 -> 5704;
5712 -> 5709;
5712 -> 5704;
5713 -> 5712;
5714 -> 5706;
5714 -> 5713;
5714 -> 5712;
5715 -> 5712;
5716 -> 5707;
5716 -> 5715;
5716 -> 5712;
5717 -> 5704;
5718 -> 5705;
5718 -> 5717;
5719 -> 5718;
5719 -> 5688;
5719 -> 5717;
5720 -> 5719;
5720 -> 5704;
5721 -> 5704;
5723 -> 5722;
5725 -> 5724;
5726 -> 5721;
5726 -> 5704;
5727 -> 5708;
5727 -> 5704;
5728 -> 5706;
5728 -> 5704;
5729 -> 5707;
5729 -> 5704;
5730 -> 5704;
5731 -> 5704;
5732 -> 5726;
5732 -> 5731;
5733 -> 5727;
5733 -> 5731;
5734 -> 5728;
5734 -> 5731;
5735 -> 5729;
5735 -> 5731;
5736 -> 5730;
5736 -> 5731;
5737 -> 5732;
5737 -> 5731;
5738 -> 5733;
5738 -> 5731;
5739 -> 5731;
5740 -> 5734;
5740 -> 5731;
5741 -> 5735;
5741 -> 5731;
5742 -> 5731;
5743 -> 5742;
5743 -> 5737;
5743 -> 5738;
5743 -> 5739;
5743 -> 5740;
5743 -> 5741;
5743 -> 5721;
5743 -> 0;
5743 -> 5731;
5744 -> 5742;
5744 -> 5731;
5745 -> 5742;
5745 -> 5731;
5746 -> 5733;
5746 -> 5743;
5746 -> 5731;
5747 -> 0;
5747 -> 5731;
5748 -> 5746;
5748 -> 5742;
5748 -> 5731;
5749 -> 5730;
5749 -> 5704;
5750 -> 5704;
5751 -> 5749;
5751 -> 5750;
5752 -> 5705;
5752 -> 5750;
5753 -> 5751;
5753 -> 5750;
5754 -> 5750;
5755 -> 5753;
5755 -> 5754;
5756 -> 5752;
5756 -> 5754;
5757 -> 5756;
5757 -> 5754;
5758 -> 5757;
5758 -> 5755;
5758 -> 5688;
5758 -> 5743;
5758 -> 5744;
5758 -> 5748;
5758 -> 5745;
5758 -> 5754;
5759 -> 5754;
5760 -> 5758;
5760 -> 5759;
5761 -> 5759;
5762 -> 5760;
5762 -> 5758;
5762 -> 5761;
5763 -> 5761;
5764 -> 5762;
5764 -> 5759;
5765 -> 4843;
5765 -> 5764;
5766 -> 5758;
5766 -> 5759;
5767 -> 5766;
5767 -> 5765;
5767 -> 5759;
5768 -> 5758;
5768 -> 5759;
5769 -> 5759;
5770 -> 5768;
5770 -> 5767;
5770 -> 5769;
5771 -> 5769;
5772 -> 5770;
5772 -> 5767;
5772 -> 5771;
5773 -> 5772;
5773 -> 5767;
5773 -> 4680;
5773 -> 5771;
5774 -> 5771;
5775 -> 5773;
5775 -> 5769;
5776 -> 5758;
5776 -> 5759;
5777 -> 5759;
5778 -> 5776;
5778 -> 5777;
5779 -> 5778;
5779 -> 5775;
5779 -> 5777;
5780 -> 5779;
5780 -> 5759;
5781 -> 5759;
5782 -> 5780;
5782 -> 5781;
5783 -> 5782;
5783 -> 5775;
5783 -> 5781;
5784 -> 5759;
5785 -> 5783;
5785 -> 5784;
5786 -> 5785;
5786 -> 5784;
5787 -> 5784;
5788 -> 5786;
5788 -> 5787;
5789 -> 5787;
5790 -> 5788;
5790 -> 5789;
5791 -> 5790;
5792 -> 5791;
5792 -> 5790;
5793 -> 5790;
5794 -> 5791;
5794 -> 5793;
5796 -> 5795;
5798 -> 5797;
5800 -> 5799;
5801 -> 5794;
5801 -> 5793;
5802 -> 0;
5802 -> 5793;
5803 -> 5793;
5804 -> 5801;
5804 -> 5803;
5805 -> 5802;
5805 -> 5803;
5806 -> 5805;
5806 -> 0;
5806 -> 5803;
5807 -> 5805;
5807 -> 5803;
5808 -> 5803;
5809 -> 5804;
5809 -> 5808;
5810 -> 5808;
5811 -> 5809;
5811 -> 5810;
5812 -> 5811;
5812 -> 5808;
5813 -> 5812;
5813 -> 0;
5813 -> 5808;
5814 -> 5813;
5814 -> 5803;
5815 -> 5803;
5816 -> 0;
5816 -> 5803;
5817 -> 5816;
5817 -> 5790;
5818 -> 5790;
5819 -> 5790;
5820 -> 5792;
5820 -> 5819;
5821 -> 5817;
5821 -> 5819;
5822 -> 5818;
5822 -> 5819;
5823 -> 5821;
5823 -> 5819;
5824 -> 5819;
5825 -> 5823;
5825 -> 5824;
5826 -> 5822;
5826 -> 5824;
5827 -> 5825;
5827 -> 5824;
5828 -> 5824;
5829 -> 5827;
5829 -> 5828;
5830 -> 5826;
5830 -> 5828;
5831 -> 5828;
5832 -> 5830;
5832 -> 5831;
5833 -> 5831;
5834 -> 5832;
5834 -> 5833;
5835 -> 5830;
5835 -> 5828;
5836 -> 5829;
5836 -> 5830;
5836 -> 5828;
5837 -> 5822;
5837 -> 5819;
5838 -> 5820;
5838 -> 5819;
5843 -> 5839;
5843 -> 5842;
5844 -> 5840;
5844 -> 5842;
5845 -> 5841;
5845 -> 5842;
5846 -> 5842;
5847 -> 0;
5848 -> 5847;
5849 -> 0;
5850 -> 5849;
5851 -> 0;
5852 -> 5851;
5853 -> 0;
5854 -> 5853;
5855 -> 5820;
5855 -> 5819;
5856 -> 5819;
5857 -> 5855;
5857 -> 5856;
5858 -> 5856;
5859 -> 5857;
5859 -> 5858;
5859 -> 5856;
5860 -> 5856;
5861 -> 5857;
5861 -> 5860;
5862 -> 5860;
5862 -> 5856;
5863 -> 5862;
5863 -> 5819;
5864 -> 5820;
5864 -> 5822;
5864 -> 5819;
5865 -> 5790;
5865 -> 5818;
5865 -> 5836;
5865 -> 5864;
5865 -> 5775;
5866 -> 5865;
5866 -> 5787;
5867 -> 5758;
5867 -> 5759;
5868 -> 5758;
5868 -> 5759;
5869 -> 5759;
5870 -> 5867;
5870 -> 5869;
5871 -> 5869;
5872 -> 5870;
5872 -> 5871;
5873 -> 5872;
5873 -> 5866;
5873 -> 5871;
5874 -> 5869;
5875 -> 5869;
5876 -> 5875;
5877 -> 5876;
5878 -> 5873;
5878 -> 5759;
5879 -> 5759;
5880 -> 5878;
5880 -> 5879;
5880 -> 5759;
5881 -> 5868;
5881 -> 5866;
5881 -> 5759;
5882 -> 0;
5882 -> 5759;
5883 -> 5758;
5883 -> 5759;
5884 -> 5758;
5884 -> 5759;
5885 -> 5759;
5886 -> 5883;
5886 -> 5885;
5887 -> 5885;
5888 -> 5886;
5888 -> 5887;
5889 -> 5888;
5889 -> 5866;
5889 -> 5887;
5890 -> 5885;
5891 -> 5885;
5892 -> 5891;
5893 -> 5892;
5894 -> 5889;
5894 -> 5759;
5895 -> 5759;
5896 -> 5894;
5896 -> 5895;
5896 -> 5759;
5897 -> 5884;
5897 -> 5866;
5897 -> 5759;
5898 -> 0;
5898 -> 5759;
5899 -> 5758;
5899 -> 5759;
5900 -> 5758;
5900 -> 5759;
5901 -> 5759;
5902 -> 5899;
5902 -> 5901;
5903 -> 5901;
5904 -> 5902;
5904 -> 5903;
5905 -> 5904;
5905 -> 5866;
5905 -> 5903;
5906 -> 5901;
5907 -> 5901;
5908 -> 5907;
5909 -> 5908;
5910 -> 5905;
5910 -> 5759;
5911 -> 5759;
5912 -> 5910;
5912 -> 5911;
5913 -> 5911;
5914 -> 5912;
5914 -> 5913;
5915 -> 5914;
5915 -> 5866;
5915 -> 5913;
5916 -> 5911;
5917 -> 5915;
5917 -> 5916;
5918 -> 0;
5918 -> 5916;
5919 -> 5916;
5920 -> 5918;
5920 -> 5919;
5921 -> 5917;
5921 -> 5919;
5922 -> 5921;
5922 -> 5866;
5922 -> 5920;
5922 -> 5919;
5923 -> 5919;
5924 -> 5922;
5924 -> 5923;
5924 -> 5919;
5925 -> 5759;
5926 -> 5899;
5926 -> 5759;
5927 -> 5759;
5928 -> 5926;
5928 -> 5927;
5928 -> 5759;
5929 -> 5928;
5929 -> 5759;
5930 -> 5929;
5931 -> 5926;
5931 -> 5930;
5932 -> 5931;
5932 -> 5866;
5932 -> 5930;
5933 -> 5900;
5933 -> 5759;
5934 -> 5759;
5935 -> 5933;
5935 -> 5934;
5935 -> 5759;
5936 -> 5935;
5936 -> 5759;
5937 -> 5932;
5937 -> 5759;
5938 -> 5899;
5938 -> 5937;
5939 -> 5938;
5940 -> 5939;
5940 -> 5938;
5941 -> 5938;
5942 -> 5940;
5942 -> 5941;
5943 -> 5942;
5943 -> 5866;
5943 -> 0;
5943 -> 5941;
5944 -> 5941;
5945 -> 5758;
5945 -> 5759;
5946 -> 5758;
5946 -> 5759;
5947 -> 5945;
5947 -> 5759;
5948 -> 5759;
5949 -> 5945;
5949 -> 5948;
5950 -> 5948;
5951 -> 5949;
5951 -> 5950;
5952 -> 5951;
5952 -> 5943;
5952 -> 5950;
5953 -> 5948;
5954 -> 5952;
5954 -> 5953;
5955 -> 5953;
5956 -> 5954;
5956 -> 0;
5956 -> 5953;
5957 -> 5956;
5957 -> 5759;
5958 -> 5946;
5958 -> 5954;
5958 -> 5759;
5959 -> 5759;
5960 -> 5758;
5960 -> 5959;
5960 -> 5954;
5960 -> 5754;
5961 -> 5758;
5961 -> 5759;
5962 -> 5758;
5962 -> 5759;
5963 -> 5962;
5963 -> 5960;
5963 -> 5759;
5964 -> 5759;
5965 -> 5961;
5965 -> 5759;
5966 -> 5759;
5967 -> 5963;
5967 -> 5966;
5968 -> 5963;
5968 -> 5966;
5969 -> 5963;
5969 -> 5966;
5970 -> 5963;
5970 -> 5966;
5971 -> 5963;
5971 -> 5966;
5972 -> 5963;
5972 -> 5966;
5973 -> 5964;
5973 -> 5966;
5974 -> 5965;
5974 -> 5966;
5975 -> 5964;
5975 -> 5966;
5976 -> 5967;
5976 -> 5966;
5977 -> 5968;
5977 -> 5966;
5978 -> 5973;
5978 -> 5966;
5979 -> 5969;
5979 -> 5966;
5980 -> 5970;
5980 -> 5966;
5981 -> 5974;
5981 -> 5966;
5982 -> 5966;
5983 -> 5982;
5983 -> 5976;
5983 -> 5977;
5983 -> 5978;
5983 -> 5979;
5983 -> 5980;
5983 -> 5981;
5983 -> 5960;
5983 -> 5966;
5984 -> 5982;
5984 -> 5966;
5985 -> 5982;
5985 -> 5966;
5986 -> 5971;
5986 -> 5982;
5986 -> 5966;
5987 -> 5972;
5987 -> 5982;
5987 -> 5966;
5988 -> 5758;
5988 -> 5964;
5988 -> 5983;
5988 -> 5984;
5988 -> 5986;
5988 -> 5985;
5988 -> 5987;
5988 -> 5754;
5989 -> 5758;
5989 -> 5759;
5990 -> 5758;
5990 -> 5759;
5991 -> 5990;
5991 -> 5759;
5992 -> 5759;
5993 -> 5991;
5993 -> 5992;
5994 -> 5989;
5994 -> 5992;
5995 -> 5993;
5995 -> 5992;
5996 -> 5992;
5997 -> 5995;
5997 -> 5996;
5998 -> 5994;
5998 -> 5996;
5999 -> 5998;
5999 -> 5988;
5999 -> 5996;
6000 -> 5998;
6000 -> 5988;
6000 -> 5996;
6001 -> 0;
6001 -> 5996;
6002 -> 5996;
6003 -> 5997;
6003 -> 6002;
6004 -> 6002;
6005 -> 6003;
6005 -> 6004;
6006 -> 6005;
6006 -> 5988;
6006 -> 6004;
6007 -> 6002;
6008 -> 6006;
6008 -> 6007;
6009 -> 6007;
6010 -> 6009;
6010 -> 5996;
6011 -> 6000;
6011 -> 6010;
6011 -> 5996;
6012 -> 5998;
6012 -> 5988;
6012 -> 5996;
6013 -> 0;
6013 -> 5996;
6014 -> 5997;
6014 -> 6012;
6015 -> 6012;
6016 -> 6014;
6016 -> 6015;
6017 -> 6015;
6018 -> 6016;
6018 -> 6017;
6019 -> 6018;
6019 -> 6014;
6019 -> 6017;
6020 -> 6019;
6020 -> 6015;
6021 -> 6015;
6022 -> 6020;
6022 -> 6021;
6023 -> 6021;
6024 -> 6022;
6024 -> 6023;
6025 -> 6023;
6026 -> 6024;
6026 -> 6025;
6027 -> 6026;
6027 -> 6025;
6028 -> 6027;
6028 -> 6023;
6029 -> 6028;
6029 -> 6021;
6030 -> 6015;
6031 -> 6029;
6031 -> 6030;
6032 -> 6031;
6032 -> 6030;
6033 -> 6030;
6034 -> 6032;
6034 -> 6033;
6035 -> 6014;
6035 -> 6015;
6036 -> 6015;
6037 -> 6035;
6037 -> 6036;
6038 -> 6037;
6038 -> 6034;
6038 -> 6036;
6039 -> 6015;
6040 -> 6038;
6040 -> 6039;
6041 -> 6039;
6042 -> 6040;
6042 -> 6034;
6042 -> 6041;
6043 -> 6042;
6043 -> 6034;
6043 -> 3337;
6043 -> 6041;
6044 -> 6043;
6044 -> 3364;
6044 -> 6041;
6045 -> 6044;
6045 -> 6039;
6046 -> 5996;
6047 -> 5997;
6047 -> 6046;
6048 -> 6046;
6049 -> 6047;
6049 -> 6048;
6050 -> 6049;
6050 -> 6045;
6050 -> 6048;
6051 -> 6046;
6052 -> 6050;
6052 -> 6051;
6053 -> 6051;
6054 -> 6053;
6054 -> 6051;
6055 -> 6051;
6056 -> 6054;
6056 -> 6055;
6057 -> 6052;
6057 -> 6055;
6058 -> 6055;
6059 -> 6057;
6059 -> 6058;
6060 -> 6058;
6061 -> 6060;
6061 -> 6055;
6062 -> 6055;
6063 -> 6057;
6063 -> 6062;
6064 -> 6063;
6064 -> 6055;
6065 -> 6055;
6066 -> 6064;
6066 -> 6065;
6067 -> 0;
6067 -> 6065;
6068 -> 6067;
6068 -> 6055;
6069 -> 6061;
6069 -> 6068;
6069 -> 6055;
6070 -> 6055;
6071 -> 6057;
6071 -> 6070;
6072 -> 6070;
6073 -> 6071;
6073 -> 6072;
6074 -> 6073;
6074 -> 6070;
6075 -> 6070;
6076 -> 6074;
6077 -> 6074;
6078 -> 6076;
6078 -> 6077;
6078 -> 6074;
6079 -> 6076;
6079 -> 6078;
6080 -> 6079;
6080 -> 6055;
6081 -> 6055;
6082 -> 6080;
6082 -> 6081;
6083 -> 6081;
6084 -> 6082;
6084 -> 6083;
6085 -> 6084;
6085 -> 6045;
6085 -> 6083;
6086 -> 6081;
6087 -> 6085;
6088 -> 6085;
6088 -> 6087;
6089 -> 6088;
6089 -> 6045;
6089 -> 6087;
6090 -> 6089;
6091 -> 6089;
6092 -> 6081;
6093 -> 6092;
6093 -> 6055;
6094 -> 6055;
6095 -> 6069;
6095 -> 6093;
6095 -> 6055;
6096 -> 6055;
6097 -> 6055;
6098 -> 6097;
6098 -> 5996;
6099 -> 5998;
6099 -> 6045;
6099 -> 6098;
6099 -> 5996;
6100 -> 5997;
6100 -> 5996;
6101 -> 5996;
6102 -> 6100;
6102 -> 6101;
6103 -> 5998;
6103 -> 6101;
6104 -> 6103;
6104 -> 6045;
6104 -> 6101;
6105 -> 5996;
6106 -> 5997;
6106 -> 5996;
6107 -> 5996;
6108 -> 6106;
6108 -> 6107;
6109 -> 5998;
6109 -> 6107;
6110 -> 6109;
6110 -> 6045;
6110 -> 6107;
6111 -> 6110;
6111 -> 5996;
6112 -> 5996;
6113 -> 5997;
6113 -> 6112;
6114 -> 6112;
6115 -> 6113;
6115 -> 6114;
6116 -> 6115;
6116 -> 6045;
6116 -> 6114;
6117 -> 6116;
6117 -> 6112;
6118 -> 6112;
6119 -> 6117;
6119 -> 6118;
6120 -> 6112;
6121 -> 6119;
6121 -> 6120;
6122 -> 6121;
6122 -> 6120;
6123 -> 6120;
6124 -> 6122;
6124 -> 6123;
6125 -> 6123;
6126 -> 6124;
6127 -> 6126;
6127 -> 6124;
6128 -> 6124;
6129 -> 6124;
6130 -> 6127;
6130 -> 6129;
6131 -> 6128;
6131 -> 6129;
6132 -> 6129;
6133 -> 6131;
6133 -> 6132;
6134 -> 6132;
6135 -> 6133;
6135 -> 6134;
6136 -> 6131;
6136 -> 6129;
6137 -> 6130;
6137 -> 6129;
6138 -> 6130;
6138 -> 6131;
6138 -> 6129;
6139 -> 6138;
6139 -> 5996;
6140 -> 6139;
6140 -> 5996;
6141 -> 5996;
6142 -> 6140;
6142 -> 6141;
6143 -> 5998;
6143 -> 6141;
6144 -> 6142;
6144 -> 6141;
6145 -> 6141;
6146 -> 6144;
6146 -> 6145;
6146 -> 6141;
6147 -> 6143;
6147 -> 6138;
6147 -> 0;
6147 -> 6141;
6148 -> 6141;
6149 -> 6144;
6149 -> 6148;
6150 -> 6148;
6151 -> 6149;
6151 -> 6138;
6151 -> 6150;
6152 -> 6150;
6153 -> 6151;
6153 -> 6152;
6154 -> 6152;
6155 -> 6153;
6155 -> 6154;
6156 -> 6155;
6156 -> 6138;
6156 -> 6154;
6157 -> 6156;
6157 -> 6152;
6158 -> 6152;
6159 -> 6157;
6160 -> 6157;
6161 -> 6159;
6161 -> 6160;
6161 -> 6157;
6162 -> 6157;
6163 -> 6157;
6163 -> 6162;
6164 -> 6163;
6164 -> 6138;
6164 -> 6162;
6165 -> 6164;
6166 -> 6164;
6167 -> 6165;
6167 -> 6166;
6167 -> 6164;
6168 -> 6164;
6169 -> 6164;
6170 -> 6152;
6171 -> 6170;
6171 -> 6150;
6172 -> 6150;
6173 -> 6171;
6173 -> 6141;
6174 -> 6143;
6174 -> 6138;
6174 -> 0;
6174 -> 6141;
6175 -> 6173;
6175 -> 6174;
6175 -> 6141;
6176 -> 6175;
6176 -> 5996;
6177 -> 5998;
6177 -> 6138;
6177 -> 0;
6177 -> 5996;
6178 -> 6177;
6179 -> 6178;
6180 -> 6179;
6180 -> 6138;
6180 -> 6178;
6181 -> 6180;
6181 -> 6177;
6182 -> 6177;
6183 -> 6181;
6183 -> 6182;
6184 -> 5998;
6184 -> 6182;
6185 -> 6183;
6185 -> 6182;
6186 -> 6185;
6187 -> 5997;
6187 -> 5996;
6188 -> 5996;
6189 -> 6187;
6189 -> 6188;
6190 -> 5998;
6190 -> 6188;
6191 -> 6188;
6192 -> 6189;
6192 -> 6191;
6193 -> 6191;
6194 -> 6192;
6194 -> 6193;
6195 -> 6194;
6195 -> 6138;
6195 -> 6193;
6196 -> 6191;
6197 -> 6195;
6197 -> 6196;
6198 -> 6196;
6199 -> 6198;
6199 -> 6188;
6200 -> 6199;
6201 -> 6189;
6201 -> 6200;
6202 -> 6200;
6203 -> 6201;
6203 -> 6202;
6204 -> 6203;
6204 -> 6138;
6204 -> 6202;
6205 -> 6200;
6206 -> 6204;
6206 -> 6205;
6207 -> 6205;
6208 -> 6207;
6208 -> 6205;
6209 -> 6205;
6210 -> 6208;
6210 -> 6209;
6211 -> 6206;
6211 -> 6209;
6212 -> 6209;
6213 -> 6211;
6213 -> 6212;
6214 -> 6212;
6215 -> 6214;
6215 -> 6209;
6216 -> 6209;
6217 -> 6211;
6217 -> 6216;
6218 -> 6217;
6218 -> 6209;
6219 -> 6209;
6220 -> 6218;
6220 -> 6219;
6221 -> 0;
6221 -> 6219;
6222 -> 6221;
6222 -> 6209;
6223 -> 6215;
6223 -> 6222;
6223 -> 6209;
6224 -> 6209;
6225 -> 6211;
6225 -> 6224;
6226 -> 6224;
6227 -> 6225;
6227 -> 6226;
6228 -> 6227;
6228 -> 6224;
6229 -> 6224;
6230 -> 6228;
6231 -> 6228;
6232 -> 6230;
6232 -> 6231;
6232 -> 6228;
6233 -> 6230;
6233 -> 6232;
6234 -> 6233;
6234 -> 6209;
6235 -> 6209;
6236 -> 6234;
6236 -> 6235;
6237 -> 6235;
6238 -> 6236;
6238 -> 6237;
6239 -> 6238;
6239 -> 6138;
6239 -> 6237;
6240 -> 6235;
6241 -> 6239;
6242 -> 6239;
6242 -> 6241;
6243 -> 6242;
6243 -> 6138;
6243 -> 6241;
6244 -> 6243;
6245 -> 6243;
6246 -> 6235;
6247 -> 6246;
6247 -> 6209;
6248 -> 6209;
6249 -> 6223;
6249 -> 6247;
6249 -> 6209;
6250 -> 6209;
6251 -> 6209;
6252 -> 6251;
6252 -> 6199;
6253 -> 6188;
6254 -> 6189;
6254 -> 6188;
6255 -> 6254;
6256 -> 6189;
6256 -> 6255;
6257 -> 6256;
6257 -> 6138;
6257 -> 6255;
6258 -> 6257;
6258 -> 6254;
6259 -> 6258;
6259 -> 6188;
6260 -> 6188;
6261 -> 6259;
6261 -> 6260;
6261 -> 6188;
6262 -> 6258;
6262 -> 6261;
6263 -> 6261;
6264 -> 6262;
6264 -> 6263;
6264 -> 6261;
6265 -> 6258;
6265 -> 6264;
6266 -> 6264;
6267 -> 6265;
6267 -> 6266;
6267 -> 6264;
6268 -> 6189;
6268 -> 6188;
6269 -> 6188;
6270 -> 6268;
6270 -> 6269;
6271 -> 6269;
6272 -> 6270;
6272 -> 6271;
6273 -> 6271;
6274 -> 6272;
6274 -> 6273;
6275 -> 6274;
6275 -> 6138;
6275 -> 6273;
6276 -> 6275;
6276 -> 6271;
6277 -> 6271;
6278 -> 6276;
6278 -> 6277;
6279 -> 6277;
6280 -> 6278;
6280 -> 6269;
6281 -> 6269;
6282 -> 6270;
6282 -> 6281;
6283 -> 6281;
6284 -> 6282;
6284 -> 6283;
6285 -> 6284;
6285 -> 6138;
6285 -> 6283;
6286 -> 6281;
6287 -> 6285;
6287 -> 6286;
6288 -> 6286;
6289 -> 6287;
6289 -> 6269;
6290 -> 0;
6290 -> 6289;
6291 -> 6188;
6292 -> 6253;
6292 -> 6291;
6292 -> 6188;
6293 -> 6292;
6294 -> 6189;
6294 -> 6293;
6295 -> 6293;
6296 -> 6294;
6296 -> 6295;
6297 -> 6296;
6297 -> 6287;
6297 -> 6295;
6298 -> 6293;
6299 -> 6297;
6299 -> 6298;
6300 -> 6299;
6300 -> 6292;
6301 -> 6190;
6301 -> 6287;
6301 -> 6188;
6302 -> 0;
6302 -> 6188;
6303 -> 6290;
6303 -> 0;
6303 -> 6188;
6304 -> 6301;
6304 -> 6303;
6304 -> 6188;
6305 -> 6189;
6305 -> 6304;
6306 -> 6300;
6306 -> 6304;
6307 -> 6304;
6308 -> 6305;
6308 -> 6307;
6309 -> 6306;
6309 -> 6307;
6310 -> 6190;
6310 -> 6307;
6311 -> 6310;
6311 -> 6287;
6311 -> 6307;
6312 -> 6309;
6312 -> 6307;
6313 -> 6290;
6313 -> 6304;
6314 -> 6189;
6314 -> 6304;
6315 -> 6312;
6315 -> 6304;
6316 -> 6304;
6317 -> 6313;
6317 -> 6316;
6318 -> 6314;
6318 -> 6316;
6319 -> 6315;
6319 -> 6316;
6320 -> 6190;
6320 -> 6316;
6321 -> 6316;
6322 -> 6319;
6322 -> 6321;
6322 -> 6316;
6323 -> 6322;
6323 -> 6316;
6324 -> 6317;
6324 -> 6323;
6325 -> 6323;
6326 -> 6324;
6326 -> 6325;
6327 -> 6326;
6327 -> 6325;
6328 -> 6327;
6329 -> 6320;
6329 -> 6287;
6329 -> 6328;
6329 -> 6323;
6330 -> 6329;
6330 -> 6323;
6331 -> 6330;
6332 -> 6330;
6332 -> 6331;
6333 -> 6332;
6333 -> 6331;
6334 -> 6333;
6334 -> 0;
6334 -> 6331;
6335 -> 6334;
6335 -> 6331;
6336 -> 6317;
6336 -> 6316;
6337 -> 6318;
6337 -> 6316;
6338 -> 6335;
6338 -> 6316;
6339 -> 6336;
6339 -> 6337;
6339 -> 6338;
6339 -> 6287;
6339 -> 6316;
6340 -> 6190;
6340 -> 6339;
6340 -> 6188;
6341 -> 0;
6341 -> 6188;
6342 -> 6340;
6343 -> 6189;
6343 -> 6342;
6344 -> 6342;
6345 -> 6343;
6345 -> 6344;
6346 -> 6345;
6346 -> 6342;
6347 -> 6342;
6348 -> 6346;
6348 -> 6347;
6349 -> 6348;
6349 -> 6340;
6350 -> 6340;
6351 -> 6189;
6351 -> 6349;
6352 -> 6349;
6353 -> 6351;
6353 -> 6352;
6354 -> 6190;
6354 -> 6352;
6355 -> 6353;
6355 -> 6352;
6356 -> 6352;
6357 -> 6355;
6357 -> 6356;
6358 -> 6354;
6358 -> 6356;
6359 -> 6358;
6359 -> 6339;
6359 -> 6356;
6360 -> 6359;
6360 -> 6352;
6361 -> 6349;
6362 -> 6188;
6363 -> 6258;
6363 -> 6362;
6364 -> 6363;
6364 -> 6188;
6365 -> 5996;
6366 -> 5992;
6367 -> 5993;
6367 -> 5992;
6368 -> 5992;
6369 -> 6367;
6369 -> 6368;
6370 -> 5994;
6370 -> 6368;
6371 -> 6369;
6371 -> 6368;
6372 -> 6368;
6373 -> 6371;
6373 -> 6372;
6374 -> 6370;
6374 -> 6372;
6375 -> 6372;
6376 -> 6373;
6376 -> 6375;
6377 -> 6376;
6377 -> 6339;
6377 -> 6375;
6378 -> 6377;
6378 -> 6372;
6379 -> 6372;
6380 -> 6379;
6380 -> 6368;
6381 -> 5992;
6382 -> 5759;
6383 -> 5759;
6384 -> 5758;
6384 -> 5759;
6385 -> 5758;
6385 -> 5759;
6386 -> 0;
6386 -> 5759;
6387 -> 5759;
6388 -> 6384;
6388 -> 5759;
6389 -> 5759;
6390 -> 6386;
6390 -> 6389;
6391 -> 6387;
6391 -> 6389;
6392 -> 6388;
6392 -> 6389;
6393 -> 6385;
6393 -> 6389;
6394 -> 6389;
6395 -> 6392;
6395 -> 6394;
6395 -> 6389;
6396 -> 6395;
6396 -> 6389;
6397 -> 6390;
6397 -> 6396;
6398 -> 6396;
6399 -> 6397;
6399 -> 6398;
6400 -> 6399;
6400 -> 6398;
6401 -> 6400;
6402 -> 6393;
6402 -> 6339;
6402 -> 6401;
6402 -> 6396;
6403 -> 6390;
6403 -> 6389;
6404 -> 6391;
6404 -> 6389;
6405 -> 5758;
6405 -> 5759;
6406 -> 5759;
6407 -> 6405;
6407 -> 6406;
6408 -> 5759;
6409 -> 6408;
6410 -> 6409;
6411 -> 5758;
6411 -> 5759;
6412 -> 5759;
6413 -> 6411;
6413 -> 6412;
6414 -> 6412;
6415 -> 6413;
6415 -> 6414;
6416 -> 6415;
6416 -> 6402;
6416 -> 6414;
6417 -> 6412;
6418 -> 6412;
6419 -> 6418;
6420 -> 6419;
6421 -> 6416;
6421 -> 5759;
6422 -> 5759;
6423 -> 6411;
6423 -> 6422;
6424 -> 6422;
6425 -> 6423;
6425 -> 6424;
6426 -> 6425;
6426 -> 6402;
6426 -> 6424;
6427 -> 6422;
6428 -> 6422;
6429 -> 6428;
6430 -> 6429;
6431 -> 6426;
6431 -> 5759;
6432 -> 5759;
6433 -> 6431;
6433 -> 6432;
6434 -> 6432;
6435 -> 6433;
6435 -> 6434;
6436 -> 6434;
6437 -> 6435;
6437 -> 6436;
6438 -> 6437;
6438 -> 6434;
6439 -> 6434;
6440 -> 6438;
6440 -> 6439;
6441 -> 6439;
6442 -> 6432;
6443 -> 6442;
6444 -> 6442;
6445 -> 6444;
6446 -> 5758;
6446 -> 5759;
6447 -> 5758;
6447 -> 5759;
6448 -> 5758;
6448 -> 5759;
6449 -> 5758;
6449 -> 5759;
6450 -> 5759;
6451 -> 6448;
6451 -> 6450;
6451 -> 5759;
6452 -> 6451;
6452 -> 5759;
6453 -> 6446;
6453 -> 6452;
6454 -> 6452;
6455 -> 6453;
6455 -> 6454;
6456 -> 6455;
6456 -> 6454;
6457 -> 6456;
6458 -> 6446;
6458 -> 5759;
6459 -> 6447;
6459 -> 5759;
6460 -> 5758;
6460 -> 5759;
6461 -> 5758;
6461 -> 5759;
6462 -> 5758;
6462 -> 5759;
6463 -> 5759;
6464 -> 6463;
6464 -> 5759;
6465 -> 5759;
6466 -> 6460;
6466 -> 6465;
6467 -> 6465;
6468 -> 6466;
6468 -> 6467;
6469 -> 6468;
6469 -> 6433;
6469 -> 6467;
6470 -> 6465;
6471 -> 6469;
6471 -> 6470;
6472 -> 0;
6472 -> 6470;
6473 -> 6472;
6473 -> 5759;
6474 -> 6473;
6475 -> 6460;
6475 -> 6474;
6476 -> 6475;
6476 -> 6433;
6476 -> 6474;
6477 -> 6475;
6477 -> 6433;
6477 -> 6476;
6478 -> 6476;
6479 -> 6475;
6479 -> 6433;
6479 -> 6478;
6480 -> 6478;
6481 -> 6479;
6481 -> 6480;
6482 -> 6480;
6483 -> 6481;
6483 -> 6482;
6484 -> 0;
6484 -> 6482;
6485 -> 6484;
6485 -> 6480;
6487 -> 6486;
6488 -> 0;
6489 -> 6488;
6489 -> 0;
6490 -> 6489;
6492 -> 6491;
6493 -> 6490;
6493 -> 6491;
6494 -> 6493;
6494 -> 6492;
6495 -> 6492;
6496 -> 6495;
6497 -> 6495;
6497 -> 6492;
6498 -> 6494;
6498 -> 6495;
6498 -> 6492;
6499 -> 6490;
6499 -> 6491;
6500 -> 6491;
6501 -> 6480;
6502 -> 6485;
6502 -> 6501;
6503 -> 6502;
6503 -> 6501;
6504 -> 6501;
6505 -> 6503;
6505 -> 6478;
6506 -> 6505;
6506 -> 6476;
6507 -> 6476;
6508 -> 6506;
6508 -> 6507;
6509 -> 6508;
6509 -> 6507;
6510 -> 6507;
6511 -> 6476;
6512 -> 6475;
6512 -> 6509;
6512 -> 6474;
6513 -> 6512;
6513 -> 6473;
6514 -> 5759;
6515 -> 6513;
6515 -> 6509;
6515 -> 6514;
6515 -> 5759;
6516 -> 5758;
6516 -> 5759;
6517 -> 5758;
6517 -> 5759;
6518 -> 6517;
6518 -> 6509;
6518 -> 5759;
6519 -> 0;
6519 -> 5759;
6520 -> 0;
6520 -> 6518;
6521 -> 6518;
6522 -> 6520;
6522 -> 6521;
6523 -> 6518;
6524 -> 6518;
6525 -> 6516;
6525 -> 6524;
6526 -> 6525;
6526 -> 6522;
6526 -> 6524;
6527 -> 6526;
6527 -> 6518;
6528 -> 6518;
6529 -> 6516;
6529 -> 6528;
6530 -> 6528;
6531 -> 6529;
6531 -> 6522;
6531 -> 6530;
6532 -> 6530;
6533 -> 6531;
6533 -> 6532;
6534 -> 0;
6534 -> 6532;
6535 -> 6532;
6536 -> 6534;
6536 -> 6535;
6537 -> 6533;
6537 -> 6522;
6537 -> 6535;
6538 -> 6537;
6538 -> 6522;
6538 -> 6536;
6538 -> 6535;
6539 -> 6538;
6540 -> 6533;
6540 -> 6539;
6541 -> 6540;
6541 -> 6522;
6541 -> 6539;
6542 -> 6541;
6542 -> 6538;
6543 -> 6538;
6544 -> 6542;
6544 -> 6543;
6544 -> 6538;
6545 -> 0;
6545 -> 6538;
6546 -> 6538;
6547 -> 6545;
6547 -> 6546;
6548 -> 6547;
6549 -> 6548;
6549 -> 6547;
6550 -> 6547;
6551 -> 6549;
6551 -> 6550;
6552 -> 6533;
6552 -> 6550;
6553 -> 6550;
6554 -> 6552;
6554 -> 6522;
6554 -> 6553;
6554 -> 6547;
6554 -> 6550;
6555 -> 6550;
6556 -> 6552;
6556 -> 6555;
6557 -> 6555;
6558 -> 6556;
6558 -> 6557;
6559 -> 6557;
6559 -> 6555;
6560 -> 6556;
6560 -> 6554;
6560 -> 6555;
6561 -> 6560;
6561 -> 6550;
6562 -> 6554;
6562 -> 6550;
6563 -> 6550;
6564 -> 6550;
6565 -> 6562;
6565 -> 6564;
6566 -> 6563;
6566 -> 6564;
6567 -> 6561;
6567 -> 6564;
6568 -> 6566;
6568 -> 6564;
6569 -> 6564;
6570 -> 6567;
6570 -> 6564;
6571 -> 6564;
6572 -> 6570;
6572 -> 6571;
6572 -> 6564;
6573 -> 6569;
6573 -> 6564;
6574 -> 6570;
6574 -> 6573;
6574 -> 6567;
6574 -> 6564;
6575 -> 6574;
6576 -> 6550;
6577 -> 6552;
6577 -> 6576;
6578 -> 6576;
6579 -> 6577;
6579 -> 6574;
6579 -> 6578;
6579 -> 6576;
6580 -> 6577;
6580 -> 6574;
6580 -> 6576;
6580 -> 6567;
6581 -> 6580;
6581 -> 6576;
6582 -> 6581;
6582 -> 6550;
6583 -> 6582;
6583 -> 6550;
6584 -> 6554;
6584 -> 6550;
6585 -> 6552;
6585 -> 6550;
6586 -> 6550;
6587 -> 6583;
6587 -> 6586;
6588 -> 6584;
6588 -> 6586;
6589 -> 6585;
6589 -> 6586;
6590 -> 6575;
6590 -> 6586;
6591 -> 6590;
6591 -> 6580;
6591 -> 0;
6591 -> 6586;
6592 -> 6591;
6592 -> 6587;
6592 -> 6586;
6593 -> 6586;
6594 -> 6592;
6594 -> 6593;
6594 -> 6586;
6595 -> 6589;
6595 -> 6586;
6596 -> 6586;
6597 -> 6589;
6597 -> 6596;
6598 -> 6597;
6598 -> 6580;
6598 -> 6596;
6599 -> 6598;
6599 -> 6586;
6600 -> 6589;
6600 -> 6599;
6601 -> 6599;
6602 -> 6599;
6603 -> 6600;
6603 -> 6602;
6604 -> 6601;
6604 -> 6602;
6605 -> 6599;
6605 -> 6602;
6606 -> 6603;
6606 -> 6602;
6607 -> 6603;
6607 -> 6606;
6608 -> 6603;
6608 -> 6607;
6609 -> 6605;
6609 -> 6580;
6609 -> 6602;
6610 -> 6605;
6610 -> 6609;
6610 -> 6602;
6611 -> 6609;
6611 -> 3147;
6611 -> 6602;
6612 -> 6609;
6612 -> 6602;
6613 -> 6602;
6614 -> 6610;
6614 -> 6613;
6614 -> 6602;
6615 -> 6614;
6615 -> 6602;
6616 -> 6603;
6616 -> 6615;
6617 -> 6616;
6618 -> 6590;
6618 -> 6616;
6618 -> 6586;
6619 -> 6586;
6620 -> 6586;
6621 -> 6588;
6621 -> 6620;
6622 -> 6619;
6622 -> 6620;
6623 -> 6622;
6623 -> 6620;
6624 -> 6621;
6624 -> 6623;
6625 -> 6588;
6625 -> 6619;
6625 -> 6586;
6626 -> 6589;
6626 -> 6619;
6626 -> 6586;
6627 -> 6587;
6627 -> 6618;
6627 -> 6586;
6628 -> 6627;
6628 -> 6586;
6629 -> 6627;
6629 -> 6586;
6630 -> 6629;
6630 -> 6627;
6630 -> 6586;
6631 -> 6628;
6631 -> 6586;
6632 -> 6630;
6632 -> 6631;
6632 -> 6627;
6632 -> 6586;
6633 -> 6629;
6633 -> 6632;
6633 -> 6586;
6634 -> 6628;
6634 -> 6586;
6635 -> 6633;
6635 -> 6586;
6636 -> 4058;
6636 -> 6635;
6637 -> 6628;
6637 -> 6586;
6638 -> 6636;
6638 -> 6586;
6639 -> 6586;
6640 -> 6637;
6640 -> 6639;
6641 -> 6638;
6641 -> 6639;
6642 -> 6641;
6642 -> 6639;
6643 -> 6639;
6644 -> 6639;
6644 -> 6586;
6645 -> 6586;
6646 -> 6586;
6647 -> 6629;
6647 -> 6646;
6648 -> 6647;
6648 -> 6633;
6648 -> 6646;
6649 -> 6648;
6649 -> 6586;
6650 -> 6644;
6650 -> 6586;
6651 -> 6645;
6651 -> 6586;
6652 -> 6650;
6652 -> 6651;
6652 -> 6649;
6652 -> 6640;
6652 -> 6641;
6652 -> 6633;
6652 -> 6586;
6653 -> 6586;
6654 -> 6628;
6654 -> 6652;
6655 -> 6652;
6656 -> 6654;
6656 -> 6655;
6657 -> 6636;
6657 -> 6655;
6658 -> 6656;
6658 -> 6655;
6659 -> 6655;
6660 -> 6656;
6660 -> 6655;
6661 -> 6656;
6661 -> 6655;
6662 -> 6661;
6662 -> 6656;
6662 -> 6660;
6662 -> 6655;
6663 -> 6633;
6663 -> 6652;
6664 -> 6628;
6664 -> 6662;
6664 -> 6652;
6665 -> 6652;
6666 -> 6664;
6666 -> 6665;
6667 -> 6662;
6667 -> 6665;
6668 -> 6652;
6669 -> 6668;
6669 -> 6666;
6670 -> 6669;
6670 -> 6652;
6671 -> 6644;
6671 -> 6652;
6672 -> 6666;
6672 -> 6652;
6673 -> 6652;
6674 -> 6666;
6674 -> 6586;
6675 -> 6627;
6675 -> 6674;
6675 -> 6670;
6675 -> 6586;
6676 -> 6675;
6676 -> 6586;
6677 -> 6550;
6678 -> 6585;
6678 -> 6677;
6679 -> 6676;
6679 -> 6677;
6680 -> 6677;
6681 -> 6678;
6681 -> 6680;
6681 -> 6677;
6682 -> 6679;
6682 -> 6677;
6683 -> 6678;
6683 -> 6677;
6684 -> 6677;
6685 -> 6677;
6686 -> 6682;
6686 -> 6685;
6687 -> 6683;
6687 -> 6685;
6688 -> 6684;
6688 -> 6685;
6689 -> 6686;
6689 -> 6685;
6690 -> 6685;
6691 -> 6689;
6691 -> 6690;
6692 -> 6690;
6693 -> 6691;
6693 -> 6692;
6693 -> 6690;
6694 -> 6688;
6694 -> 6685;
6695 -> 6685;
6696 -> 6685;
6697 -> 6687;
6697 -> 6696;
6698 -> 6695;
6698 -> 6696;
6699 -> 6698;
6699 -> 6696;
6700 -> 6697;
6700 -> 6699;
6701 -> 6687;
6701 -> 6695;
6701 -> 6685;
6702 -> 6687;
6702 -> 6688;
6702 -> 6685;
6703 -> 6684;
6703 -> 6550;
6704 -> 0;
6704 -> 6550;
6705 -> 6552;
6705 -> 6550;
6706 -> 6550;
6707 -> 6704;
6707 -> 6706;
6708 -> 6705;
6708 -> 6706;
6709 -> 6703;
6709 -> 6706;
6710 -> 6706;
6711 -> 6708;
6711 -> 6710;
6711 -> 6706;
6712 -> 6709;
6712 -> 6706;
6713 -> 6709;
6713 -> 6691;
6713 -> 6707;
6713 -> 6706;
6714 -> 6708;
6714 -> 6706;
6715 -> 6706;
6716 -> 6706;
6717 -> 6712;
6717 -> 6716;
6718 -> 6713;
6718 -> 6716;
6719 -> 6714;
6719 -> 6716;
6720 -> 6715;
6720 -> 6716;
6721 -> 6717;
6721 -> 6716;
6722 -> 6718;
6722 -> 6716;
6723 -> 6716;
6724 -> 6721;
6724 -> 6723;
6725 -> 6722;
6725 -> 6723;
6726 -> 6720;
6726 -> 6723;
6727 -> 6723;
6728 -> 6724;
6728 -> 6727;
6728 -> 6723;
6729 -> 6725;
6729 -> 6723;
6730 -> 0;
6730 -> 6723;
6731 -> 6723;
6732 -> 6729;
6732 -> 6731;
6733 -> 6730;
6733 -> 6731;
6734 -> 6725;
6734 -> 6723;
6735 -> 0;
6735 -> 6723;
6736 -> 6723;
6737 -> 6734;
6737 -> 6736;
6738 -> 6735;
6738 -> 6736;
6739 -> 6724;
6739 -> 6726;
6739 -> 6723;
6740 -> 6725;
6740 -> 6726;
6740 -> 6723;
6741 -> 6724;
6741 -> 6691;
6741 -> 6726;
6741 -> 6723;
6742 -> 6720;
6742 -> 6716;
6743 -> 6716;
6744 -> 6716;
6745 -> 6719;
6745 -> 6744;
6746 -> 6743;
6746 -> 6744;
6747 -> 6746;
6747 -> 6744;
6748 -> 6745;
6748 -> 6747;
6749 -> 6719;
6749 -> 6743;
6749 -> 6716;
6750 -> 6719;
6750 -> 6720;
6750 -> 6716;
6751 -> 6715;
6751 -> 6550;
6752 -> 6550;
6753 -> 6752;
6753 -> 6550;
6754 -> 6751;
6754 -> 6550;
6755 -> 6552;
6755 -> 6550;
6756 -> 6582;
6756 -> 6550;
6757 -> 6752;
6757 -> 6550;
6758 -> 6550;
6759 -> 6552;
6759 -> 6758;
6760 -> 6758;
6761 -> 6760;
6761 -> 6550;
6762 -> 6550;
6763 -> 6551;
6763 -> 6550;
6764 -> 6550;
6765 -> 6754;
6765 -> 6764;
6766 -> 6755;
6766 -> 6764;
6767 -> 6756;
6767 -> 6764;
6768 -> 6757;
6768 -> 6764;
6769 -> 6763;
6769 -> 6764;
6770 -> 6761;
6770 -> 6764;
6771 -> 6762;
6771 -> 6764;
6772 -> 6762;
6772 -> 6764;
6773 -> 6765;
6773 -> 6764;
6774 -> 6766;
6774 -> 6764;
6775 -> 6767;
6775 -> 6675;
6775 -> 6764;
6776 -> 6768;
6776 -> 6764;
6777 -> 6769;
6777 -> 6764;
6778 -> 6770;
6778 -> 6764;
6779 -> 6771;
6779 -> 6764;
6780 -> 6772;
6780 -> 6764;
6781 -> 6764;
6782 -> 6764;
6783 -> 6775;
6783 -> 6782;
6784 -> 6775;
6784 -> 6782;
6785 -> 6775;
6785 -> 6782;
6786 -> 6775;
6786 -> 6782;
6787 -> 6775;
6787 -> 6782;
6788 -> 6775;
6788 -> 6782;
6789 -> 6775;
6789 -> 6782;
6790 -> 6775;
6790 -> 6782;
6791 -> 6775;
6791 -> 6782;
6792 -> 6775;
6792 -> 6782;
6793 -> 6775;
6793 -> 6782;
6794 -> 6775;
6794 -> 6782;
6795 -> 6794;
6795 -> 6782;
6796 -> 6782;
6797 -> 6782;
6798 -> 6782;
6799 -> 6782;
6800 -> 6782;
6801 -> 6785;
6801 -> 6782;
6802 -> 6782;
6803 -> 6800;
6803 -> 6802;
6803 -> 6782;
6804 -> 6799;
6804 -> 6782;
6805 -> 6794;
6805 -> 6782;
6806 -> 6784;
6806 -> 6805;
6807 -> 6805;
6808 -> 6806;
6808 -> 6807;
6808 -> 6805;
6809 -> 6808;
6809 -> 6805;
6810 -> 6809;
6811 -> 6806;
6811 -> 6810;
6812 -> 6805;
6813 -> 6806;
6813 -> 6812;
6814 -> 6813;
6814 -> 6805;
6815 -> 6783;
6815 -> 6775;
6815 -> 6805;
6816 -> 0;
6816 -> 6805;
6817 -> 6805;
6818 -> 6805;
6819 -> 6806;
6819 -> 6818;
6820 -> 6819;
6820 -> 6815;
6820 -> 6818;
6821 -> 6810;
6821 -> 6805;
6822 -> 6804;
6822 -> 6805;
6823 -> 6820;
6823 -> 6805;
6824 -> 6787;
6824 -> 6805;
6825 -> 6805;
6826 -> 6821;
6826 -> 6825;
6827 -> 6822;
6827 -> 6825;
6828 -> 6823;
6828 -> 6825;
6829 -> 6824;
6829 -> 6825;
6830 -> 6783;
6830 -> 6825;
6831 -> 6825;
6832 -> 6826;
6832 -> 0;
6832 -> 6825;
6833 -> 6825;
6834 -> 6827;
6834 -> 6822;
6834 -> 6825;
6835 -> 6831;
6835 -> 6825;
6836 -> 6833;
6836 -> 6825;
6837 -> 6805;
6838 -> 6804;
6838 -> 6782;
6839 -> 6838;
6839 -> 6764;
6840 -> 6796;
6840 -> 6839;
6840 -> 6804;
6840 -> 6822;
6840 -> 6764;
6841 -> 6767;
6841 -> 6839;
6841 -> 6815;
6841 -> 6840;
6841 -> 6764;
6842 -> 0;
6842 -> 6764;
6843 -> 6773;
6843 -> 6774;
6843 -> 6775;
6843 -> 6776;
6843 -> 6777;
6843 -> 6778;
6843 -> 6779;
6843 -> 6780;
6843 -> 6781;
6843 -> 6841;
6843 -> 6842;
6843 -> 6741;
6843 -> 6740;
6843 -> 6739;
6843 -> 6726;
6843 -> 6750;
6843 -> 6675;
6843 -> 6548;
6843 -> 6691;
6843 -> 6688;
6843 -> 6702;
6843 -> 6753;
6843 -> 6764;
6844 -> 6843;
6844 -> 6552;
6844 -> 6550;
6845 -> 6843;
6845 -> 6550;
6846 -> 6845;
6846 -> 6843;
6846 -> 6844;
6846 -> 6550;
6847 -> 6846;
6847 -> 6552;
6847 -> 6550;
6848 -> 0;
6848 -> 6550;
6849 -> 6551;
6849 -> 6550;
6850 -> 6554;
6850 -> 6550;
6851 -> 6550;
6852 -> 6848;
6852 -> 6851;
6853 -> 6849;
6853 -> 6851;
6854 -> 6850;
6854 -> 6851;
6855 -> 6703;
6855 -> 6851;
6856 -> 6855;
6856 -> 6846;
6856 -> 6851;
6857 -> 6852;
6857 -> 6851;
6858 -> 6854;
6858 -> 6851;
6859 -> 6853;
6859 -> 6851;
6860 -> 6851;
6861 -> 6856;
6861 -> 6860;
6862 -> 6857;
6862 -> 6860;
6863 -> 6858;
6863 -> 6860;
6864 -> 6859;
6864 -> 6860;
6865 -> 6862;
6865 -> 6860;
6866 -> 6860;
6867 -> 6865;
6867 -> 6866;
6868 -> 6861;
6868 -> 6866;
6869 -> 6867;
6869 -> 0;
6869 -> 6866;
6870 -> 6866;
6871 -> 6867;
6871 -> 6866;
6872 -> 6868;
6872 -> 6871;
6872 -> 6846;
6872 -> 6847;
6872 -> 6866;
6873 -> 6872;
6874 -> 6873;
6875 -> 6873;
6875 -> 6872;
6876 -> 6867;
6876 -> 6872;
6877 -> 6872;
6878 -> 6876;
6878 -> 6877;
6879 -> 6875;
6879 -> 6877;
6880 -> 6877;
6881 -> 6879;
6881 -> 6880;
6882 -> 6881;
6882 -> 6877;
6883 -> 6878;
6883 -> 6877;
6884 -> 6877;
6885 -> 6883;
6885 -> 6884;
6886 -> 6882;
6886 -> 6884;
6887 -> 6884;
6888 -> 6886;
6888 -> 6887;
6889 -> 6888;
6889 -> 6884;
6890 -> 6889;
6891 -> 6889;
6891 -> 6890;
6892 -> 6890;
6893 -> 6891;
6893 -> 6892;
6894 -> 6892;
6895 -> 6893;
6895 -> 6873;
6895 -> 6894;
6895 -> 6892;
6896 -> 6890;
6897 -> 6891;
6897 -> 6873;
6897 -> 6890;
6898 -> 6897;
6898 -> 6889;
6899 -> 6889;
6900 -> 6884;
6901 -> 6886;
6901 -> 6873;
6901 -> 6900;
6901 -> 6884;
6902 -> 6885;
6902 -> 6901;
6903 -> 6901;
6904 -> 6901;
6905 -> 6904;
6905 -> 6901;
6906 -> 6901;
6907 -> 6902;
6907 -> 6901;
6908 -> 6901;
6909 -> 6907;
6909 -> 6908;
6910 -> 6905;
6910 -> 6908;
6911 -> 6908;
6912 -> 6908;
6913 -> 6910;
6913 -> 6912;
6914 -> 6913;
6914 -> 6908;
6915 -> 6909;
6915 -> 6902;
6915 -> 6908;
6916 -> 6908;
6917 -> 6915;
6917 -> 6916;
6918 -> 6914;
6918 -> 6916;
6919 -> 6918;
6919 -> 6916;
6920 -> 6917;
6920 -> 6916;
6921 -> 6920;
6922 -> 6920;
6923 -> 6920;
6924 -> 6922;
6924 -> 6923;
6925 -> 6919;
6925 -> 6923;
6926 -> 6923;
6927 -> 6925;
6927 -> 6926;
6928 -> 6926;
6929 -> 6927;
6929 -> 6905;
6929 -> 6928;
6929 -> 6926;
6930 -> 6929;
6931 -> 6929;
6932 -> 6927;
6932 -> 6905;
6932 -> 6931;
6933 -> 6932;
6933 -> 6905;
6933 -> 6931;
6934 -> 6933;
6934 -> 6929;
6935 -> 0;
6935 -> 6929;
6936 -> 6934;
6936 -> 6929;
6937 -> 6929;
6938 -> 6936;
6938 -> 6937;
6939 -> 6927;
6939 -> 6937;
6940 -> 6937;
6941 -> 6938;
6941 -> 6940;
6941 -> 6937;
6942 -> 6937;
6943 -> 6937;
6944 -> 6937;
6945 -> 6939;
6945 -> 6944;
6946 -> 6944;
6947 -> 6946;
6947 -> 6937;
6948 -> 6947;
6948 -> 6937;
6949 -> 6947;
6949 -> 6937;
6950 -> 6949;
6951 -> 6938;
6951 -> 6937;
6952 -> 0;
6952 -> 6937;
6953 -> 6942;
6953 -> 6937;
6954 -> 6943;
6954 -> 6937;
6955 -> 6948;
6955 -> 6950;
6955 -> 6951;
6955 -> 6952;
6955 -> 6953;
6955 -> 6954;
6955 -> 6934;
6955 -> 6937;
6956 -> 6955;
6956 -> 6937;
6957 -> 6937;
6958 -> 6956;
6958 -> 6957;
6959 -> 6939;
6959 -> 6957;
6960 -> 6957;
6961 -> 6959;
6961 -> 6955;
6961 -> 6960;
6961 -> 6957;
6962 -> 0;
6962 -> 6961;
6963 -> 6958;
6963 -> 6961;
6964 -> 6963;
6964 -> 6955;
6965 -> 6959;
6965 -> 6963;
6966 -> 6963;
6967 -> 6963;
6968 -> 6964;
6968 -> 6967;
6969 -> 6965;
6969 -> 6967;
6970 -> 6964;
6970 -> 6967;
6971 -> 6966;
6971 -> 6967;
6972 -> 6967;
6973 -> 6971;
6973 -> 6967;
6974 -> 6971;
6974 -> 6967;
6975 -> 6971;
6975 -> 6967;
6976 -> 6967;
6977 -> 6968;
6977 -> 6976;
6977 -> 6967;
6978 -> 6967;
6979 -> 6969;
6979 -> 6978;
6979 -> 6967;
6980 -> 6967;
6981 -> 6970;
6981 -> 6980;
6981 -> 6967;
6982 -> 6969;
6982 -> 6971;
6982 -> 6967;
6983 -> 6968;
6983 -> 6971;
6983 -> 6967;
6984 -> 6970;
6984 -> 6971;
6984 -> 6967;
6985 -> 6963;
6986 -> 6966;
6986 -> 6985;
6987 -> 6986;
6987 -> 6983;
6987 -> 6985;
6988 -> 6987;
6988 -> 6963;
6989 -> 6966;
6989 -> 6963;
6990 -> 6962;
6990 -> 6988;
6990 -> 6989;
6990 -> 6963;
6991 -> 6959;
6991 -> 6955;
6991 -> 6961;
6992 -> 6962;
6992 -> 6961;
6993 -> 6961;
6994 -> 6991;
6994 -> 6992;
6994 -> 6993;
6994 -> 6962;
6994 -> 6955;
6994 -> 6990;
6994 -> 6971;
6994 -> 6982;
6994 -> 6983;
6994 -> 6984;
6994 -> 6961;
6995 -> 6937;
6996 -> 6955;
6996 -> 6937;
6997 -> 6937;
6998 -> 6996;
6998 -> 6997;
6999 -> 6939;
6999 -> 6997;
7000 -> 6997;
7001 -> 6999;
7001 -> 6994;
7001 -> 7000;
7001 -> 6997;
7002 -> 7001;
7003 -> 6999;
7003 -> 7002;
7004 -> 7003;
7004 -> 6994;
7004 -> 7002;
7005 -> 7004;
7005 -> 7001;
7006 -> 7001;
7007 -> 7001;
7008 -> 7005;
7008 -> 7007;
7009 -> 7008;
7009 -> 7001;
7010 -> 7001;
7011 -> 6998;
7011 -> 7001;
7012 -> 7011;
7012 -> 7009;
7012 -> 7001;
7013 -> 7012;
7014 -> 7009;
7014 -> 7013;
7015 -> 7005;
7015 -> 7014;
7016 -> 6999;
7016 -> 7014;
7017 -> 7013;
7017 -> 7014;
7018 -> 0;
7019 -> 7018;
7020 -> 7019;
7022 -> 7021;
7023 -> 7022;
7023 -> 7021;
7024 -> 0;
7024 -> 7022;
7024 -> 7021;
7025 -> 0;
7025 -> 7022;
7025 -> 7021;
7026 -> 7022;
7026 -> 7021;
7027 -> 7022;
7027 -> 7021;
7028 -> 7022;
7028 -> 7021;
7029 -> 7022;
7029 -> 7021;
7030 -> 3440;
7030 -> 7022;
7030 -> 7021;
7031 -> 0;
7031 -> 7022;
7031 -> 7021;
7032 -> 7021;
7033 -> 7012;
7033 -> 7009;
7033 -> 7014;
7034 -> 7014;
7035 -> 7015;
7035 -> 7034;
7036 -> 7016;
7036 -> 7034;
7037 -> 7017;
7037 -> 7034;
7038 -> 7033;
7038 -> 7034;
7039 -> 7034;
7040 -> 7039;
7040 -> 7034;
7041 -> 7034;
7042 -> 7034;
7043 -> 7035;
7043 -> 7034;
7044 -> 7037;
7044 -> 7034;
7045 -> 7039;
7045 -> 7034;
7046 -> 7041;
7046 -> 7034;
7047 -> 7042;
7047 -> 7034;
7048 -> 7034;
7049 -> 7043;
7049 -> 7048;
7050 -> 7044;
7050 -> 7048;
7051 -> 7045;
7051 -> 7048;
7052 -> 7046;
7052 -> 7048;
7053 -> 7047;
7053 -> 7048;
7054 -> 7048;
7055 -> 7049;
7055 -> 7054;
7056 -> 7055;
7056 -> 7048;
7057 -> 7050;
7057 -> 7048;
7058 -> 7056;
7058 -> 7057;
7058 -> 7009;
7058 -> 7048;
7059 -> 7058;
7059 -> 7048;
7060 -> 7048;
7061 -> 7034;
7062 -> 7034;
7063 -> 7034;
7064 -> 7034;
7065 -> 7059;
7065 -> 7064;
7065 -> 7034;
7066 -> 7035;
7066 -> 7065;
7067 -> 7036;
7067 -> 7065;
7068 -> 7037;
7068 -> 7065;
7069 -> 7038;
7069 -> 7065;
7070 -> 7062;
7070 -> 7065;
7071 -> 7065;
7072 -> 7065;
7073 -> 7066;
7073 -> 7072;
7074 -> 7067;
7074 -> 7072;
7075 -> 7068;
7075 -> 7072;
7076 -> 7069;
7076 -> 7072;
7077 -> 7070;
7077 -> 7072;
7078 -> 7071;
7078 -> 7072;
7079 -> 7073;
7079 -> 7072;
7080 -> 7074;
7080 -> 7072;
7081 -> 7075;
7081 -> 7072;
7082 -> 7076;
7082 -> 7072;
7083 -> 7072;
7084 -> 7077;
7084 -> 7072;
7085 -> 7072;
7086 -> 7079;
7086 -> 7085;
7087 -> 7080;
7087 -> 7085;
7088 -> 7081;
7088 -> 7085;
7089 -> 7082;
7089 -> 7085;
7090 -> 7083;
7090 -> 7085;
7091 -> 7084;
7091 -> 7085;
7092 -> 7078;
7092 -> 7085;
7093 -> 7085;
7094 -> 7092;
7094 -> 7093;
7095 -> 7093;
7096 -> 7093;
7097 -> 7094;
7097 -> 7096;
7098 -> 7096;
7099 -> 7097;
7099 -> 7096;
7100 -> 7097;
7100 -> 7096;
7101 -> 7094;
7101 -> 7093;
7102 -> 7094;
7102 -> 7093;
7103 -> 7094;
7103 -> 7093;
7104 -> 7095;
7104 -> 7094;
7104 -> 7093;
7105 -> 7092;
7105 -> 7085;
7106 -> 7092;
7106 -> 7085;
7107 -> 7092;
7107 -> 7085;
7108 -> 7092;
7108 -> 7085;
7109 -> 7092;
7109 -> 7085;
7110 -> 7092;
7110 -> 7085;
7111 -> 7092;
7111 -> 7085;
7112 -> 7092;
7112 -> 7085;
7113 -> 7092;
7113 -> 7085;
7114 -> 3440;
7114 -> 7092;
7114 -> 7085;
7115 -> 7085;
7116 -> 7115;
7116 -> 7092;
7116 -> 7085;
7117 -> 3440;
7117 -> 7092;
7117 -> 7085;
7118 -> 7085;
7119 -> 7118;
7119 -> 7092;
7119 -> 7085;
7120 -> 7092;
7120 -> 7085;
7121 -> 0;
7121 -> 7092;
7121 -> 7085;
7122 -> 7092;
7122 -> 7085;
7123 -> 7092;
7123 -> 7085;
7124 -> 7088;
7124 -> 7009;
7124 -> 7085;
7125 -> 7085;
7126 -> 7087;
7126 -> 7125;
7126 -> 7085;
7127 -> 7085;
7128 -> 7090;
7128 -> 7127;
7128 -> 7085;
7129 -> 7085;
7130 -> 7085;
7131 -> 7085;
7132 -> 7086;
7132 -> 7131;
7133 -> 7132;
7133 -> 7085;
7134 -> 7088;
7134 -> 7085;
7135 -> 7133;
7135 -> 7134;
7135 -> 7058;
7135 -> 7009;
7135 -> 7085;
7136 -> 7088;
7136 -> 7092;
7136 -> 7085;
7137 -> 7087;
7137 -> 7092;
7137 -> 7085;
7138 -> 7085;
7139 -> 7086;
7139 -> 7138;
7140 -> 7139;
7140 -> 7135;
7140 -> 7138;
7141 -> 7140;
7141 -> 7085;
7142 -> 7088;
7142 -> 7085;
7143 -> 7141;
7143 -> 7092;
7143 -> 7085;
7144 -> 7085;
7145 -> 7090;
7145 -> 7144;
7145 -> 7085;
7146 -> 7135;
7146 -> 7092;
7146 -> 7145;
7147 -> 7145;
7148 -> 7085;
7149 -> 7089;
7149 -> 7148;
7149 -> 7085;
7150 -> 7085;
7151 -> 7086;
7151 -> 7150;
7152 -> 7151;
7152 -> 7141;
7152 -> 7150;
7153 -> 7152;
7153 -> 7085;
7154 -> 7085;
7155 -> 7153;
7155 -> 7154;
7156 -> 7154;
7157 -> 7155;
7157 -> 7156;
7158 -> 7157;
7158 -> 7154;
7159 -> 7155;
7159 -> 7154;
7160 -> 7155;
7160 -> 7141;
7160 -> 0;
7160 -> 7154;
7161 -> 7149;
7161 -> 7158;
7161 -> 7085;
7162 -> 7085;
7163 -> 7092;
7163 -> 7162;
7164 -> 0;
7164 -> 7162;
7165 -> 7163;
7165 -> 7143;
7165 -> 0;
7165 -> 7162;
7166 -> 0;
7166 -> 7165;
7167 -> 7166;
7167 -> 7162;
7168 -> 7167;
7168 -> 7085;
7169 -> 7161;
7169 -> 7168;
7169 -> 7085;
7170 -> 0;
7170 -> 7092;
7170 -> 7169;
7171 -> 7130;
7171 -> 7085;
7172 -> 7034;
7173 -> 7060;
7173 -> 7172;
7173 -> 7034;
7174 -> 7071;
7174 -> 7034;
7175 -> 7006;
7175 -> 7174;
7175 -> 7097;
7175 -> 7099;
7175 -> 7100;
7175 -> 7101;
7175 -> 7102;
7175 -> 7104;
7175 -> 7137;
7175 -> 7146;
7175 -> 7143;
7175 -> 7170;
7175 -> 7109;
7175 -> 7110;
7175 -> 7111;
7175 -> 7112;
7175 -> 7113;
7175 -> 7114;
7175 -> 7116;
7175 -> 7117;
7175 -> 7119;
7175 -> 7120;
7175 -> 7121;
7175 -> 7122;
7175 -> 7123;
7175 -> 7136;
7175 -> 3431;
7175 -> 3432;
7175 -> 3433;
7175 -> 3434;
7175 -> 3435;
7175 -> 3437;
7175 -> 3439;
7175 -> 7115;
7175 -> 7118;
7175 -> 0;
7175 -> 7009;
7175 -> 7141;
7175 -> 7014;
7176 -> 7175;
7177 -> 7176;
7177 -> 7175;
7178 -> 7175;
7179 -> 7175;
7180 -> 7176;
7180 -> 7175;
7181 -> 7178;
7181 -> 7175;
7182 -> 7179;
7182 -> 7175;
7183 -> 7175;
7184 -> 7175;
7185 -> 7175;
7186 -> 7175;
7187 -> 7184;
7187 -> 7175;
7188 -> 7175;
7189 -> 7186;
7189 -> 7188;
7190 -> 7186;
7190 -> 7188;
7191 -> 7186;
7191 -> 7188;
7192 -> 7186;
7192 -> 7188;
7193 -> 7186;
7193 -> 7188;
7194 -> 7186;
7194 -> 7188;
7195 -> 7187;
7195 -> 7188;
7196 -> 7186;
7196 -> 7188;
7197 -> 7189;
7197 -> 7188;
7198 -> 7190;
7198 -> 7188;
7199 -> 7191;
7199 -> 7188;
7200 -> 7192;
7200 -> 7188;
7201 -> 7194;
7201 -> 7188;
7202 -> 7195;
7202 -> 7188;
7203 -> 7188;
7204 -> 7197;
7204 -> 7203;
7205 -> 7198;
7205 -> 7203;
7206 -> 7199;
7206 -> 7203;
7207 -> 7200;
7207 -> 7203;
7208 -> 7201;
7208 -> 7203;
7209 -> 7202;
7209 -> 7203;
7210 -> 7196;
7210 -> 7203;
7211 -> 7196;
7211 -> 7203;
7212 -> 7196;
7212 -> 7203;
7213 -> 7196;
7213 -> 7203;
7214 -> 7196;
7214 -> 7203;
7215 -> 7206;
7215 -> 7175;
7215 -> 7203;
7216 -> 7203;
7217 -> 7205;
7217 -> 7216;
7217 -> 7203;
7218 -> 7203;
7219 -> 7208;
7219 -> 7218;
7219 -> 7203;
7220 -> 7203;
7221 -> 7203;
7222 -> 7204;
7222 -> 7206;
7222 -> 7175;
7222 -> 7203;
7223 -> 7222;
7223 -> 7208;
7224 -> 7208;
7225 -> 7223;
7225 -> 7196;
7225 -> 7208;
7226 -> 7196;
7226 -> 7225;
7226 -> 7208;
7227 -> 7222;
7227 -> 7208;
7228 -> 7196;
7228 -> 7225;
7228 -> 7222;
7228 -> 7208;
7229 -> 7196;
7229 -> 7225;
7229 -> 7208;
7230 -> 7222;
7230 -> 7208;
7231 -> 7207;
7231 -> 7222;
7231 -> 7203;
7232 -> 0;
7232 -> 7203;
7233 -> 7221;
7233 -> 7203;
7234 -> 7196;
7234 -> 7188;
7235 -> 7196;
7235 -> 7188;
7236 -> 7188;
7237 -> 7193;
7237 -> 7175;
7237 -> 7236;
7237 -> 7188;
7238 -> 7194;
7238 -> 7196;
7238 -> 7188;
7239 -> 7193;
7239 -> 7196;
7239 -> 7188;
7240 -> 7229;
7240 -> 7196;
7240 -> 7188;
7241 -> 7175;
7242 -> 7183;
7242 -> 7241;
7242 -> 7175;
7243 -> 7006;
7243 -> 7186;
7243 -> 7222;
7243 -> 7196;
7243 -> 7205;
7243 -> 7225;
7243 -> 7231;
7243 -> 7206;
7243 -> 7238;
7243 -> 7240;
7243 -> 7239;
7243 -> 7203;
7243 -> 7175;
7244 -> 7243;
7245 -> 7244;
7245 -> 7243;
7246 -> 7243;
7247 -> 7243;
7248 -> 7244;
7248 -> 7243;
7249 -> 7246;
7249 -> 7243;
7250 -> 7247;
7250 -> 7243;
7251 -> 7243;
7252 -> 7243;
7253 -> 7243;
7254 -> 7252;
7254 -> 7243;
7255 -> 7254;
7255 -> 7243;
7256 -> 7255;
7256 -> 7252;
7257 -> 7252;
7258 -> 7252;
7259 -> 7252;
7260 -> 7252;
7261 -> 7252;
7262 -> 7252;
7262 -> 7243;
7263 -> 7252;
7264 -> 7252;
7265 -> 7252;
7266 -> 7252;
7267 -> 7252;
7268 -> 0;
7268 -> 7252;
7269 -> 7266;
7269 -> 7252;
7270 -> 7252;
7270 -> 7243;
7271 -> 7252;
7271 -> 7243;
7272 -> 7243;
7273 -> 7243;
7274 -> 7251;
7274 -> 7273;
7274 -> 7243;
7275 -> 7252;
7276 -> 7275;
7276 -> 7252;
7277 -> 7252;
7278 -> 7252;
7279 -> 7275;
7279 -> 7252;
7280 -> 7277;
7280 -> 7252;
7281 -> 7278;
7281 -> 7252;
7282 -> 7252;
7283 -> 7252;
7284 -> 7252;
7285 -> 7284;
7285 -> 7252;
7286 -> 7285;
7286 -> 7252;
7287 -> 7252;
7288 -> 7252;
7289 -> 7252;
7290 -> 7282;
7290 -> 7289;
7290 -> 7252;
7291 -> 7275;
7292 -> 7291;
7292 -> 7275;
7293 -> 7292;
7293 -> 7275;
7294 -> 7275;
7295 -> 7275;
7296 -> 7275;
7297 -> 7275;
7298 -> 7275;
7299 -> 7275;
7299 -> 7252;
7300 -> 7275;
7301 -> 7275;
7302 -> 7275;
7303 -> 7275;
7304 -> 7275;
7305 -> 0;
7305 -> 7275;
7306 -> 7303;
7306 -> 7275;
7307 -> 7275;
7308 -> 7275;
7309 -> 7275;
7310 -> 7275;
7311 -> 7308;
7311 -> 7275;
7312 -> 7309;
7312 -> 7275;
7313 -> 7275;
7314 -> 7275;
7315 -> 7275;
7316 -> 7275;
7317 -> 7313;
7317 -> 7316;
7317 -> 7275;
7318 -> 7308;
7318 -> 7275;
7319 -> 7308;
7320 -> 7319;
7320 -> 7308;
7321 -> 7320;
7321 -> 7308;
7322 -> 7308;
7323 -> 7308;
7324 -> 7308;
7325 -> 7308;
7326 -> 7308;
7327 -> 7308;
7327 -> 7275;
7328 -> 7308;
7329 -> 7308;
7330 -> 7308;
7331 -> 7308;
7332 -> 7308;
7333 -> 0;
7333 -> 7308;
7334 -> 7331;
7334 -> 7308;
7335 -> 7001;
7336 -> 0;
7336 -> 7001;
7337 -> 7335;
7337 -> 7336;
7337 -> 7006;
7337 -> 7308;
7337 -> 7001;
7338 -> 7337;
7338 -> 7335;
7339 -> 7338;
7339 -> 7337;
7339 -> 7335;
7340 -> 7006;
7340 -> 7339;
7340 -> 7001;
7341 -> 7001;
7342 -> 7010;
7342 -> 7341;
7342 -> 7001;
7343 -> 6999;
7343 -> 7340;
7343 -> 7001;
7344 -> 7339;
7344 -> 7001;
7345 -> 7001;
7346 -> 7001;
7347 -> 7343;
7347 -> 7346;
7347 -> 7001;
7348 -> 7339;
7348 -> 7347;
7349 -> 7347;
7350 -> 7348;
7350 -> 7349;
7351 -> 7005;
7351 -> 7349;
7352 -> 7349;
7353 -> 7351;
7353 -> 7343;
7353 -> 7352;
7353 -> 7349;
7354 -> 7349;
7355 -> 7351;
7355 -> 7343;
7355 -> 7354;
7356 -> 7355;
7356 -> 7349;
7357 -> 7350;
7357 -> 7343;
7357 -> 7349;
7358 -> 7357;
7359 -> 7358;
7360 -> 7358;
7361 -> 7358;
7361 -> 7360;
7362 -> 7361;
7362 -> 7343;
7362 -> 7360;
7363 -> 7362;
7363 -> 7358;
7364 -> 7358;
7365 -> 7351;
7365 -> 7343;
7365 -> 7363;
7365 -> 7364;
7365 -> 7358;
7366 -> 7365;
7366 -> 7358;
7367 -> 7358;
7368 -> 7358;
7368 -> 7367;
7369 -> 7368;
7369 -> 7365;
7369 -> 7367;
7370 -> 7369;
7370 -> 7358;
7371 -> 7356;
7371 -> 7370;
7371 -> 7358;
7372 -> 7365;
7373 -> 7365;
7374 -> 7365;
7375 -> 7365;
7375 -> 7374;
7376 -> 7375;
7376 -> 7365;
7376 -> 7374;
7377 -> 7376;
7377 -> 7365;
7378 -> 7356;
7378 -> 7377;
7378 -> 7365;
7379 -> 7347;
7380 -> 6937;
7381 -> 6929;
7382 -> 6923;
7383 -> 6923;
7384 -> 6923;
7385 -> 7384;
7385 -> 6923;
7386 -> 6924;
7386 -> 6923;
7387 -> 7383;
7387 -> 6923;
7388 -> 6925;
7388 -> 7365;
7388 -> 7386;
7388 -> 7387;
7388 -> 6923;
7389 -> 6924;
7389 -> 7388;
7390 -> 7384;
7390 -> 7388;
7391 -> 6925;
7391 -> 7388;
7391 -> 7389;
7391 -> 7390;
7391 -> 7385;
7392 -> 7388;
7392 -> 7391;
7393 -> 7392;
7394 -> 7392;
7395 -> 7393;
7395 -> 7394;
7395 -> 7392;
7396 -> 7395;
7397 -> 6921;
7397 -> 7396;
7397 -> 7395;
7398 -> 7393;
7398 -> 7395;
7399 -> 7398;
7399 -> 6920;
7400 -> 6920;
7401 -> 7399;
7401 -> 7400;
7401 -> 6920;
7402 -> 7399;
7402 -> 6916;
7403 -> 6908;
7404 -> 7402;
7404 -> 7403;
7404 -> 6908;
7405 -> 6909;
7405 -> 7404;
7406 -> 7404;
7407 -> 7405;
7407 -> 7406;
7408 -> 7402;
7408 -> 7406;
7409 -> 7407;
7409 -> 6902;
7409 -> 7406;
7410 -> 7408;
7410 -> 7406;
7411 -> 7406;
7412 -> 7410;
7412 -> 7411;
7413 -> 0;
7413 -> 7411;
7414 -> 7413;
7414 -> 7406;
7415 -> 7406;
7416 -> 7406;
7417 -> 7416;
7417 -> 7406;
7418 -> 7406;
7419 -> 7410;
7419 -> 7418;
7420 -> 7418;
7421 -> 7419;
7421 -> 7420;
7422 -> 0;
7422 -> 7420;
7423 -> 7422;
7423 -> 7418;
7424 -> 7423;
7424 -> 7406;
7425 -> 0;
7425 -> 7406;
7426 -> 7406;
7427 -> 7425;
7427 -> 7426;
7428 -> 7410;
7428 -> 7426;
7429 -> 7428;
7430 -> 7429;
7431 -> 7428;
7432 -> 7428;
7433 -> 7426;
7434 -> 7426;
7435 -> 7428;
7435 -> 7434;
7435 -> 7426;
7436 -> 7433;
7436 -> 7426;
7437 -> 7436;
7438 -> 7436;
7439 -> 7428;
7439 -> 7426;
7440 -> 7426;
7441 -> 7428;
7441 -> 7426;
7442 -> 7441;
7442 -> 7426;
7443 -> 7426;
7444 -> 7442;
7444 -> 7443;
7445 -> 7440;
7445 -> 7443;
7446 -> 7445;
7446 -> 7427;
7446 -> 7443;
7447 -> 7445;
7447 -> 7427;
7447 -> 7426;
7447 -> 7443;
7448 -> 0;
7448 -> 7443;
7449 -> 7445;
7449 -> 7427;
7449 -> 7426;
7449 -> 0;
7449 -> 7443;
7450 -> 7449;
7451 -> 7444;
7451 -> 7450;
7452 -> 7450;
7453 -> 7451;
7453 -> 7452;
7454 -> 7453;
7454 -> 7428;
7454 -> 7452;
7455 -> 7450;
7456 -> 7454;
7456 -> 7455;
7457 -> 7455;
7458 -> 7456;
7458 -> 7457;
7459 -> 7458;
7459 -> 7428;
7459 -> 7457;
7460 -> 7459;
7460 -> 7455;
7461 -> 7455;
7462 -> 7460;
7463 -> 7460;
7464 -> 7462;
7464 -> 7463;
7464 -> 7460;
7465 -> 7462;
7465 -> 7464;
7466 -> 7450;
7467 -> 7465;
7467 -> 7466;
7468 -> 7467;
7468 -> 7466;
7469 -> 7466;
7470 -> 7468;
7470 -> 7469;
7471 -> 7470;
7472 -> 7471;
7473 -> 7470;
7474 -> 7470;
7475 -> 7470;
7475 -> 7449;
7476 -> 7475;
7476 -> 7449;
7477 -> 7449;
7478 -> 7476;
7478 -> 7477;
7479 -> 7445;
7479 -> 7477;
7480 -> 7478;
7480 -> 7477;
7481 -> 7477;
7482 -> 7480;
7482 -> 7481;
7482 -> 7477;
7483 -> 7479;
7483 -> 7427;
7483 -> 7426;
7483 -> 0;
7483 -> 7477;
7484 -> 7477;
7485 -> 7480;
7485 -> 7484;
7486 -> 7484;
7487 -> 7485;
7487 -> 7470;
7487 -> 7486;
7488 -> 7486;
7488 -> 7477;
7489 -> 7479;
7489 -> 7427;
7489 -> 7426;
7489 -> 0;
7489 -> 7477;
7490 -> 7488;
7490 -> 7489;
7490 -> 7477;
7491 -> 7490;
7491 -> 7449;
7492 -> 7443;
7493 -> 7444;
7493 -> 7492;
7494 -> 7492;
7495 -> 7493;
7495 -> 7470;
7495 -> 7494;
7496 -> 7494;
7497 -> 7496;
7497 -> 7443;
7498 -> 0;
7498 -> 7497;
7499 -> 7444;
7499 -> 7497;
7500 -> 7497;
7501 -> 7444;
7501 -> 7500;
7502 -> 7501;
7502 -> 7500;
7503 -> 7502;
7503 -> 7470;
7503 -> 7500;
7504 -> 7503;
7504 -> 7497;
7505 -> 7497;
7506 -> 7498;
7506 -> 7505;
7507 -> 7499;
7507 -> 7505;
7508 -> 7504;
7508 -> 7505;
7509 -> 7445;
7509 -> 7505;
7510 -> 7426;
7511 -> 7426;
7511 -> 7508;
7512 -> 7511;
7512 -> 7407;
7512 -> 6902;
7512 -> 7406;
7513 -> 7424;
7513 -> 7512;
7513 -> 7406;
7514 -> 7407;
7514 -> 6902;
7514 -> 7406;
7515 -> 7407;
7515 -> 6902;
7515 -> 7514;
7516 -> 7514;
7517 -> 7407;
7517 -> 6902;
7517 -> 7406;
7518 -> 7407;
7518 -> 6902;
7518 -> 7406;
7519 -> 7518;
7520 -> 7519;
7521 -> 7517;
7521 -> 7520;
7521 -> 7519;
7522 -> 7521;
7523 -> 7407;
7523 -> 6902;
7523 -> 7406;
7524 -> 7406;
7525 -> 7523;
7525 -> 7524;
7526 -> 7410;
7526 -> 7524;
7527 -> 7524;
7528 -> 7526;
7528 -> 7527;
7529 -> 7528;
7529 -> 7511;
7529 -> 7527;
7530 -> 7527;
7531 -> 7528;
7531 -> 7511;
7531 -> 7530;
7531 -> 7527;
7532 -> 7531;
7533 -> 7529;
7533 -> 7532;
7533 -> 7531;
7534 -> 7529;
7534 -> 7531;
7535 -> 7531;
7536 -> 7534;
7536 -> 7535;
7537 -> 7535;
7538 -> 7536;
7538 -> 7537;
7538 -> 7535;
7539 -> 7535;
7540 -> 7535;
7541 -> 7535;
7541 -> 7540;
7542 -> 7540;
7543 -> 7541;
7543 -> 7542;
7544 -> 7543;
7544 -> 7540;
7545 -> 7540;
7546 -> 7541;
7546 -> 7545;
7547 -> 7546;
7547 -> 7540;
7548 -> 7540;
7549 -> 7547;
7549 -> 7548;
7550 -> 7548;
7550 -> 7540;
7551 -> 7540;
7552 -> 7544;
7552 -> 7540;
7553 -> 7535;
7553 -> 7552;
7553 -> 7536;
7553 -> 7511;
7554 -> 7553;
7555 -> 7553;
7556 -> 7553;
7557 -> 7553;
7558 -> 7553;
7559 -> 7553;
7560 -> 7535;
7560 -> 7553;
7561 -> 7553;
7562 -> 7560;
7562 -> 7553;
7562 -> 7561;
7563 -> 7562;
7563 -> 7553;
7564 -> 7553;
7565 -> 7563;
7566 -> 7563;
7567 -> 7563;
7568 -> 7563;
7569 -> 7566;
7569 -> 7563;
7570 -> 7563;
7571 -> 7563;
7572 -> 7563;
7573 -> 7572;
7573 -> 7563;
7574 -> 7573;
7574 -> 7563;
7575 -> 7563;
7576 -> 7563;
7577 -> 7563;
7578 -> 7563;
7579 -> 7563;
7580 -> 7563;
7581 -> 7563;
7582 -> 7563;
7583 -> 7563;
7584 -> 7563;
7585 -> 7563;
7586 -> 0;
7586 -> 7563;
7587 -> 0;
7587 -> 7563;
7588 -> 7563;
7588 -> 7587;
7589 -> 7588;
7589 -> 7563;
7589 -> 7587;
7590 -> 7584;
7590 -> 7563;
7591 -> 7563;
7592 -> 7570;
7592 -> 7591;
7592 -> 7563;
7593 -> 7589;
7594 -> 7589;
7595 -> 7589;
7596 -> 7589;
7597 -> 7594;
7597 -> 7589;
7598 -> 7589;
7599 -> 7589;
7600 -> 7589;
7601 -> 7600;
7601 -> 7589;
7602 -> 7601;
7602 -> 7589;
7603 -> 7589;
7604 -> 7589;
7605 -> 7589;
7606 -> 7589;
7607 -> 7589;
7608 -> 7589;
7609 -> 7589;
7610 -> 7589;
7611 -> 7589;
7612 -> 7589;
7613 -> 7589;
7614 -> 0;
7614 -> 7589;
7615 -> 7612;
7615 -> 7589;
7616 -> 7589;
7617 -> 7598;
7617 -> 7616;
7617 -> 7589;
7618 -> 7594;
7618 -> 7589;
7619 -> 7594;
7619 -> 7589;
7620 -> 7594;
7621 -> 7620;
7621 -> 7594;
7622 -> 7621;
7622 -> 7594;
7623 -> 7594;
7624 -> 7594;
7625 -> 7594;
7626 -> 7594;
7627 -> 7594;
7628 -> 7594;
7628 -> 7589;
7629 -> 7594;
7630 -> 7594;
7631 -> 7594;
7632 -> 7594;
7633 -> 7594;
7634 -> 0;
7634 -> 7594;
7635 -> 7632;
7635 -> 7594;
7636 -> 7594;
7637 -> 7594;
7638 -> 7594;
7639 -> 7594;
7640 -> 7594;
7641 -> 7594;
7642 -> 7594;
7643 -> 7594;
7644 -> 7640;
7644 -> 7643;
7644 -> 7594;
7645 -> 7594;
7646 -> 7645;
7646 -> 7594;
7647 -> 7646;
7647 -> 7594;
7648 -> 7594;
7649 -> 7594;
7650 -> 7594;
7651 -> 7594;
7652 -> 7553;
7653 -> 7564;
7653 -> 7652;
7653 -> 7553;
7654 -> 7594;
7655 -> 7594;
7656 -> 7655;
7656 -> 7594;
7657 -> 7594;
7658 -> 7594;
7659 -> 7594;
7660 -> 7594;
7660 -> 7659;
7661 -> 7660;
7661 -> 7594;
7661 -> 7659;
7662 -> 7661;
7662 -> 7594;
7663 -> 7656;
7663 -> 7662;
7663 -> 7594;
7664 -> 7594;
7664 -> 7663;
7665 -> 7663;
7666 -> 7664;
7666 -> 7665;
7667 -> 7594;
7667 -> 7665;
7668 -> 7665;
7669 -> 7666;
7669 -> 7668;
7670 -> 7669;
7670 -> 7665;
7671 -> 7670;
7671 -> 0;
7671 -> 7665;
7672 -> 7665;
7673 -> 7666;
7673 -> 7672;
7674 -> 7672;
7675 -> 7673;
7675 -> 7674;
7676 -> 7675;
7676 -> 7594;
7676 -> 7674;
7677 -> 7676;
7677 -> 7672;
7678 -> 7672;
7679 -> 7677;
7679 -> 7678;
7679 -> 7672;
7680 -> 7679;
7680 -> 7672;
7681 -> 7680;
7682 -> 7677;
7682 -> 7681;
7683 -> 7681;
7684 -> 7682;
7684 -> 7683;
7685 -> 7684;
7685 -> 7681;
7686 -> 7681;
7687 -> 7685;
7687 -> 7686;
7688 -> 7687;
7688 -> 7665;
7689 -> 7667;
7689 -> 7665;
7690 -> 7688;
7690 -> 7689;
7690 -> 7665;
7691 -> 7665;
7692 -> 7666;
7692 -> 7691;
7693 -> 7691;
7694 -> 7692;
7694 -> 7693;
7695 -> 7694;
7695 -> 7594;
7695 -> 7693;
7696 -> 7693;
7697 -> 7695;
7697 -> 7696;
7698 -> 0;
7698 -> 7696;
7699 -> 7698;
7699 -> 7693;
7700 -> 7693;
7701 -> 7695;
7701 -> 7700;
7702 -> 7701;
7702 -> 7693;
7703 -> 7702;
7703 -> 7691;
7704 -> 7703;
7704 -> 7665;
7705 -> 7665;
7706 -> 7704;
7706 -> 7705;
7707 -> 7706;
7707 -> 7594;
7707 -> 7705;
7708 -> 7665;
7709 -> 7665;
7710 -> 7667;
7710 -> 7709;
7711 -> 7710;
7711 -> 7665;
7712 -> 7667;
7712 -> 7665;
7713 -> 7665;
7714 -> 7667;
7714 -> 7594;
7714 -> 7713;
7714 -> 7665;
7715 -> 7667;
7715 -> 7594;
7715 -> 7714;
7716 -> 7714;
7717 -> 7667;
7717 -> 7715;
7717 -> 7670;
7717 -> 7665;
7718 -> 7666;
7718 -> 7665;
7719 -> 7665;
7720 -> 7667;
7720 -> 7717;
7721 -> 7717;
7722 -> 7667;
7722 -> 7717;
7722 -> 7720;
7722 -> 7721;
7723 -> 7667;
7723 -> 7717;
7723 -> 7720;
7723 -> 0;
7724 -> 7663;
7725 -> 7663;
7726 -> 7594;
7726 -> 7717;
7726 -> 7725;
7727 -> 7726;
7727 -> 7717;
7727 -> 7720;
7727 -> 0;
7727 -> 7725;
7728 -> 7727;
7728 -> 7663;
7729 -> 7720;
7730 -> 7720;
7731 -> 7728;
7731 -> 0;
7732 -> 7728;
7733 -> 7728;
7733 -> 7732;
7734 -> 7732;
7735 -> 7733;
7735 -> 7734;
7736 -> 7735;
7736 -> 7720;
7736 -> 7734;
7737 -> 7736;
7737 -> 7732;
7738 -> 7732;
7739 -> 7737;
7739 -> 7738;
7739 -> 7732;
7740 -> 7739;
7740 -> 7732;
7741 -> 7740;
7742 -> 7737;
7742 -> 7741;
7743 -> 7741;
7744 -> 7742;
7744 -> 7743;
7745 -> 7744;
7745 -> 7741;
7746 -> 7741;
7747 -> 7745;
7747 -> 7746;
7748 -> 7747;
7748 -> 7728;
7749 -> 7728;
7750 -> 7728;
7751 -> 7728;
7751 -> 7750;
7752 -> 7750;
7753 -> 7751;
7753 -> 7752;
7754 -> 7753;
7754 -> 7720;
7754 -> 7752;
7755 -> 7752;
7756 -> 7754;
7756 -> 7755;
7757 -> 0;
7757 -> 7755;
7758 -> 7757;
7758 -> 7752;
7759 -> 7752;
7760 -> 7754;
7760 -> 7759;
7761 -> 7760;
7761 -> 7752;
7762 -> 7761;
7762 -> 7750;
7763 -> 7762;
7763 -> 7728;
7764 -> 7728;
7765 -> 7763;
7765 -> 7764;
7766 -> 7765;
7766 -> 7720;
7766 -> 7764;
7767 -> 7728;
7768 -> 7728;
7769 -> 7768;
7769 -> 7728;
7770 -> 7728;
7771 -> 7728;
7772 -> 7728;
7772 -> 0;
7773 -> 7728;
7774 -> 7728;
7775 -> 7768;
7775 -> 0;
7776 -> 7768;
7777 -> 7768;
7777 -> 7776;
7778 -> 7776;
7779 -> 7777;
7779 -> 7778;
7780 -> 7779;
7780 -> 7728;
7780 -> 7778;
7781 -> 7780;
7781 -> 7776;
7782 -> 7776;
7783 -> 7781;
7783 -> 7782;
7783 -> 7776;
7784 -> 7783;
7784 -> 7776;
7785 -> 7784;
7786 -> 7781;
7786 -> 7785;
7787 -> 7785;
7788 -> 7786;
7788 -> 7787;
7789 -> 7788;
7789 -> 7785;
7790 -> 7785;
7791 -> 7789;
7791 -> 7790;
7792 -> 7791;
7792 -> 7768;
7793 -> 7768;
7794 -> 7768;
7795 -> 7768;
7795 -> 7794;
7796 -> 7794;
7797 -> 7795;
7797 -> 7796;
7798 -> 7797;
7798 -> 7728;
7798 -> 7796;
7799 -> 7796;
7800 -> 7798;
7800 -> 7799;
7801 -> 0;
7801 -> 7799;
7802 -> 7801;
7802 -> 7796;
7803 -> 7796;
7804 -> 7798;
7804 -> 7803;
7805 -> 7804;
7805 -> 7796;
7806 -> 7805;
7806 -> 7794;
7807 -> 7806;
7807 -> 7768;
7808 -> 7768;
7809 -> 7807;
7809 -> 7808;
7810 -> 7809;
7810 -> 7728;
7810 -> 7808;
7811 -> 7768;
7812 -> 7768;
7813 -> 7768;
7814 -> 7768;
7814 -> 0;
7815 -> 7768;
7816 -> 7768;
7817 -> 7779;
7817 -> 7768;
7817 -> 7778;
7818 -> 7817;
7818 -> 7776;
7819 -> 7818;
7819 -> 7782;
7819 -> 7776;
7820 -> 7819;
7820 -> 7776;
7821 -> 7820;
7822 -> 7818;
7822 -> 7821;
7823 -> 7821;
7824 -> 7822;
7824 -> 7823;
7825 -> 7824;
7825 -> 7821;
7826 -> 7821;
7827 -> 7825;
7827 -> 7826;
7828 -> 7827;
7828 -> 7768;
7829 -> 7797;
7829 -> 7768;
7829 -> 7796;
7830 -> 7829;
7830 -> 7799;
7831 -> 7829;
7831 -> 7803;
7832 -> 7831;
7832 -> 7796;
7833 -> 7832;
7833 -> 7794;
7834 -> 7833;
7834 -> 7768;
7835 -> 7834;
7835 -> 7808;
7836 -> 7835;
7836 -> 7768;
7836 -> 7808;
7837 -> 7531;
7838 -> 7528;
7838 -> 7768;
7838 -> 7531;
7839 -> 7531;
7840 -> 7524;
7841 -> 7524;
7842 -> 7841;
7842 -> 7524;
7843 -> 7525;
7843 -> 7524;
7844 -> 7841;
7844 -> 7524;
7845 -> 7526;
7845 -> 7838;
7845 -> 7843;
7845 -> 7844;
7845 -> 7842;
7845 -> 7524;
7846 -> 7845;
7846 -> 7524;
7847 -> 7846;
7847 -> 7406;
7848 -> 7847;
7849 -> 7847;
7849 -> 7848;
7850 -> 7848;
7851 -> 7850;
7851 -> 7847;
7852 -> 7847;
7853 -> 7522;
7853 -> 7852;
7853 -> 7847;
7854 -> 7847;
7855 -> 7847;
7855 -> 7854;
7856 -> 7854;
7857 -> 7856;
7857 -> 7847;
7858 -> 7522;
7858 -> 7857;
7858 -> 7847;
7859 -> 7851;
7859 -> 7858;
7859 -> 7847;
7860 -> 7859;
7861 -> 7415;
7861 -> 7860;
7861 -> 7859;
7862 -> 7847;
7862 -> 7859;
7863 -> 7406;
7864 -> 7862;
7864 -> 7863;
7864 -> 7406;
7865 -> 7862;
7865 -> 7406;
7866 -> 6908;
7867 -> 7865;
7867 -> 7866;
7867 -> 6908;
7868 -> 7865;
7868 -> 6908;
7869 -> 6901;
7870 -> 7868;
7870 -> 7869;
7871 -> 7869;
7871 -> 6901;
7872 -> 6901;
7873 -> 7868;
7873 -> 7872;
7874 -> 0;
7874 -> 7872;
7875 -> 7873;
7875 -> 6901;
7876 -> 7871;
7876 -> 7875;
7876 -> 6901;
7877 -> 7868;
7877 -> 6901;
7878 -> 6901;
7879 -> 7877;
7879 -> 7878;
7880 -> 6886;
7880 -> 7878;
7881 -> 7878;
7882 -> 7879;
7882 -> 0;
7882 -> 7878;
7883 -> 7878;
7884 -> 7879;
7884 -> 7883;
7885 -> 7883;
7886 -> 7884;
7886 -> 7885;
7887 -> 7886;
7887 -> 7846;
7887 -> 7885;
7888 -> 7887;
7888 -> 7883;
7889 -> 7883;
7890 -> 7888;
7890 -> 7889;
7890 -> 7883;
7891 -> 7890;
7891 -> 7883;
7892 -> 7891;
7893 -> 7888;
7893 -> 7892;
7894 -> 7892;
7895 -> 7893;
7895 -> 7894;
7896 -> 7895;
7896 -> 7892;
7897 -> 7892;
7898 -> 7896;
7898 -> 7897;
7899 -> 7898;
7899 -> 7878;
7900 -> 7880;
7900 -> 7878;
7901 -> 7878;
7902 -> 7879;
7902 -> 7901;
7903 -> 7901;
7904 -> 7902;
7904 -> 7903;
7905 -> 7904;
7905 -> 7846;
7905 -> 7903;
7906 -> 7903;
7907 -> 7905;
7907 -> 7906;
7908 -> 0;
7908 -> 7906;
7909 -> 7908;
7909 -> 7903;
7910 -> 7903;
7911 -> 7905;
7911 -> 7910;
7912 -> 7910;
7913 -> 7911;
7913 -> 7903;
7914 -> 7913;
7914 -> 7901;
7915 -> 7914;
7915 -> 7878;
7916 -> 7878;
7917 -> 7915;
7917 -> 7916;
7918 -> 7917;
7918 -> 7846;
7918 -> 7916;
7919 -> 7878;
7920 -> 7878;
7921 -> 7880;
7921 -> 7920;
7922 -> 7921;
7922 -> 7846;
7922 -> 7920;
7923 -> 7922;
7923 -> 7878;
7924 -> 7880;
7924 -> 7878;
7925 -> 7878;
7926 -> 7880;
7926 -> 7846;
7926 -> 7925;
7926 -> 7878;
7927 -> 7878;
7928 -> 7879;
7929 -> 7880;
7929 -> 7879;
7930 -> 6901;
7931 -> 6886;
7931 -> 7879;
7931 -> 6885;
7931 -> 6884;
7932 -> 6866;
7933 -> 7931;
7933 -> 7932;
7934 -> 7933;
7934 -> 6866;
7935 -> 7931;
7935 -> 6866;
7936 -> 6860;
7937 -> 7935;
7937 -> 7936;
7937 -> 6860;
7938 -> 7935;
7938 -> 6860;
7939 -> 6864;
7939 -> 6860;
7940 -> 6863;
7940 -> 6860;
7941 -> 6860;
7942 -> 7938;
7942 -> 7941;
7943 -> 7939;
7943 -> 7941;
7944 -> 7940;
7944 -> 7941;
7945 -> 7941;
7946 -> 7942;
7946 -> 7945;
7947 -> 7946;
7947 -> 7879;
7947 -> 7945;
7948 -> 0;
7948 -> 7945;
7949 -> 7947;
7950 -> 7946;
7950 -> 7949;
7951 -> 7949;
7952 -> 7951;
7952 -> 7949;
7953 -> 7949;
7954 -> 7950;
7954 -> 7953;
7955 -> 7953;
7956 -> 7955;
7956 -> 7953;
7957 -> 7953;
7958 -> 7954;
7958 -> 7957;
7959 -> 7957;
7960 -> 7958;
7960 -> 7959;
7961 -> 7960;
7961 -> 7879;
7961 -> 7959;
7962 -> 3440;
7962 -> 7959;
7963 -> 7960;
7963 -> 7879;
7963 -> 7961;
7964 -> 7961;
7965 -> 7960;
7965 -> 7964;
7966 -> 7964;
7967 -> 7964;
7968 -> 7966;
7968 -> 7967;
7969 -> 7965;
7969 -> 7967;
7970 -> 7967;
7971 -> 7967;
7972 -> 7970;
7972 -> 7971;
7973 -> 7969;
7973 -> 7971;
7974 -> 7973;
7974 -> 7879;
7974 -> 7971;
7975 -> 3440;
7975 -> 7971;
7976 -> 7974;
7977 -> 7973;
7977 -> 7976;
7978 -> 7977;
7978 -> 7879;
7978 -> 7976;
7979 -> 7978;
7980 -> 7977;
7980 -> 7979;
7981 -> 7980;
7981 -> 7879;
7981 -> 7979;
7982 -> 7979;
7983 -> 7981;
7983 -> 7982;
7984 -> 0;
7984 -> 7982;
7985 -> 7984;
7985 -> 7979;
7986 -> 7979;
7987 -> 7981;
7987 -> 7986;
7988 -> 7987;
7988 -> 7979;
7989 -> 7988;
7989 -> 7978;
7990 -> 7978;
7991 -> 7989;
7991 -> 7990;
7992 -> 7991;
7992 -> 7978;
7993 -> 7977;
7993 -> 7879;
7993 -> 7978;
7994 -> 7992;
7994 -> 7978;
7995 -> 7989;
7995 -> 7994;
7996 -> 7977;
7996 -> 7994;
7997 -> 7994;
7998 -> 7994;
7999 -> 7995;
7999 -> 7998;
8000 -> 7996;
8000 -> 7998;
8001 -> 7997;
8001 -> 7998;
8002 -> 7999;
8002 -> 7998;
8003 -> 8000;
8003 -> 7998;
8004 -> 7998;
8005 -> 7998;
8006 -> 8002;
8006 -> 8005;
8007 -> 8003;
8007 -> 8005;
8008 -> 8004;
8008 -> 8005;
8009 -> 8001;
8009 -> 8005;
8010 -> 8005;
8011 -> 8006;
8011 -> 8010;
8012 -> 8005;
8013 -> 8006;
8013 -> 8012;
8014 -> 8013;
8014 -> 8005;
8015 -> 8014;
8016 -> 8014;
8017 -> 8015;
8017 -> 8016;
8018 -> 8017;
8018 -> 7992;
8018 -> 8016;
8020 -> 8019;
8021 -> 8019;
8022 -> 8021;
8022 -> 8005;
8023 -> 8006;
8023 -> 8005;
8024 -> 8005;
8025 -> 8024;
8025 -> 8011;
8025 -> 8018;
8025 -> 8022;
8025 -> 8023;
8025 -> 7992;
8025 -> 8020;
8025 -> 8005;
8026 -> 8024;
8026 -> 8005;
8027 -> 8024;
8027 -> 8005;
8028 -> 8005;
8029 -> 8006;
8029 -> 8028;
8029 -> 8005;
8030 -> 8007;
8030 -> 8024;
8030 -> 8005;
8031 -> 8008;
8031 -> 8024;
8031 -> 8005;
8032 -> 7992;
8032 -> 7994;
8033 -> 8032;
8033 -> 7997;
8033 -> 7992;
8033 -> 8025;
8033 -> 8026;
8033 -> 8030;
8033 -> 8027;
8033 -> 8031;
8033 -> 7994;
8034 -> 8033;
8034 -> 7997;
8035 -> 8034;
8035 -> 8033;
8035 -> 7997;
8036 -> 8035;
8036 -> 7974;
8037 -> 8036;
8037 -> 7974;
8038 -> 7972;
8038 -> 8037;
8039 -> 8037;
8040 -> 8039;
8041 -> 8039;
8041 -> 8040;
8042 -> 0;
8042 -> 8040;
8043 -> 8042;
8043 -> 8039;
8044 -> 8039;
8044 -> 8037;
8045 -> 8036;
8045 -> 8037;
8046 -> 8037;
8047 -> 7973;
8047 -> 8035;
8047 -> 8037;
8048 -> 8044;
8048 -> 8037;
8049 -> 8037;
8050 -> 8045;
8050 -> 8049;
8051 -> 8046;
8051 -> 8049;
8052 -> 8047;
8052 -> 8049;
8053 -> 8048;
8053 -> 8049;
8054 -> 8046;
8054 -> 8049;
8055 -> 8049;
8056 -> 8050;
8056 -> 8055;
8056 -> 8049;
8057 -> 8049;
8058 -> 8057;
8058 -> 8049;
8059 -> 8049;
8060 -> 8053;
8060 -> 8059;
8061 -> 8060;
8061 -> 8049;
8062 -> 8052;
8062 -> 8049;
8063 -> 8057;
8063 -> 8049;
8064 -> 8061;
8064 -> 8062;
8064 -> 8063;
8064 -> 8035;
8064 -> 8058;
8064 -> 8049;
8065 -> 8050;
8065 -> 8049;
8066 -> 8065;
8066 -> 8037;
8067 -> 7973;
8067 -> 8064;
8067 -> 8037;
8068 -> 8044;
8068 -> 8037;
8069 -> 8037;
8070 -> 8066;
8070 -> 8069;
8071 -> 8067;
8071 -> 8069;
8072 -> 8068;
8072 -> 8069;
8073 -> 8069;
8074 -> 8072;
8074 -> 8073;
8075 -> 8074;
8075 -> 8064;
8075 -> 8073;
8076 -> 8075;
8076 -> 8069;
8077 -> 8071;
8077 -> 8069;
8078 -> 8069;
8079 -> 8076;
8079 -> 8077;
8079 -> 8078;
8079 -> 8064;
8079 -> 8069;
8080 -> 8079;
8080 -> 8069;
8081 -> 8070;
8081 -> 8080;
8082 -> 8081;
8082 -> 8037;
8083 -> 7973;
8083 -> 8079;
8083 -> 8037;
8084 -> 8044;
8084 -> 8037;
8085 -> 8037;
8086 -> 8082;
8086 -> 8085;
8087 -> 8083;
8087 -> 8085;
8088 -> 8084;
8088 -> 8085;
8089 -> 8085;
8090 -> 8089;
8090 -> 8085;
8091 -> 8085;
8092 -> 8088;
8092 -> 8091;
8093 -> 8092;
8093 -> 8079;
8093 -> 8091;
8094 -> 8093;
8094 -> 8085;
8095 -> 8087;
8095 -> 8085;
8096 -> 8089;
8096 -> 8085;
8097 -> 8094;
8097 -> 8095;
8097 -> 8096;
8097 -> 8079;
8097 -> 8090;
8097 -> 8085;
8098 -> 8097;
8098 -> 8085;
8099 -> 8086;
8099 -> 8085;
8100 -> 8097;
8100 -> 8085;
8101 -> 8085;
8102 -> 8099;
8102 -> 8101;
8103 -> 8100;
8103 -> 8101;
8104 -> 8100;
8104 -> 8101;
8105 -> 8102;
8105 -> 8101;
8106 -> 8105;
8106 -> 8097;
8106 -> 8101;
8107 -> 8103;
8107 -> 8101;
8108 -> 8101;
8109 -> 8101;
8110 -> 8107;
8110 -> 8109;
8111 -> 8108;
8111 -> 8109;
8112 -> 8110;
8112 -> 8111;
8112 -> 8109;
8113 -> 8110;
8113 -> 8097;
8113 -> 8109;
8114 -> 8113;
8115 -> 8114;
8115 -> 8111;
8115 -> 8109;
8116 -> 8109;
8117 -> 8116;
8117 -> 8111;
8117 -> 8109;
8118 -> 8109;
8119 -> 8118;
8119 -> 8111;
8119 -> 8109;
8120 -> 8102;
8120 -> 8101;
8121 -> 8101;
8122 -> 8120;
8122 -> 8121;
8123 -> 8108;
8123 -> 8121;
8124 -> 8121;
8125 -> 8122;
8125 -> 8124;
8126 -> 8124;
8126 -> 8121;
8127 -> 8122;
8127 -> 8126;
8128 -> 8126;
8129 -> 8127;
8129 -> 8128;
8130 -> 8123;
8130 -> 8128;
8131 -> 8128;
8132 -> 8129;
8132 -> 8131;
8133 -> 0;
8133 -> 8131;
8134 -> 8133;
8134 -> 8128;
8135 -> 8134;
8135 -> 8128;
8136 -> 8128;
8137 -> 8135;
8137 -> 8136;
8138 -> 8130;
8138 -> 8136;
8139 -> 8137;
8139 -> 0;
8139 -> 8136;
8140 -> 8137;
8140 -> 8139;
8141 -> 8129;
8141 -> 8128;
8142 -> 8128;
8143 -> 8129;
8143 -> 8142;
8144 -> 8143;
8144 -> 8106;
8144 -> 8142;
8145 -> 8144;
8145 -> 8128;
8146 -> 8128;
8147 -> 8145;
8147 -> 8128;
8148 -> 8145;
8148 -> 8147;
8149 -> 8148;
8149 -> 8128;
8150 -> 8145;
8150 -> 8128;
8151 -> 8134;
8151 -> 8140;
8151 -> 8128;
8152 -> 8151;
8152 -> 8149;
8152 -> 8128;
8153 -> 8128;
8154 -> 8141;
8154 -> 8153;
8155 -> 8153;
8156 -> 8155;
8156 -> 8153;
8157 -> 8156;
8157 -> 8153;
8158 -> 8154;
8158 -> 8153;
8159 -> 8153;
8160 -> 8158;
8160 -> 8159;
8161 -> 8159;
8162 -> 8161;
8162 -> 8153;
8163 -> 8153;
8164 -> 8158;
8164 -> 8163;
8165 -> 8164;
8165 -> 8106;
8165 -> 8163;
8166 -> 8165;
8166 -> 8153;
8167 -> 8153;
8168 -> 8166;
8168 -> 8167;
8169 -> 0;
8169 -> 8167;
8170 -> 8169;
8170 -> 8153;
8171 -> 8162;
8171 -> 8170;
8171 -> 8153;
8172 -> 8153;
8173 -> 8158;
8173 -> 8172;
8174 -> 8173;
8174 -> 8172;
8175 -> 8174;
8175 -> 8106;
8175 -> 8172;
8176 -> 8175;
8176 -> 8153;
8177 -> 8153;
8178 -> 8176;
8178 -> 8177;
8179 -> 8153;
8180 -> 8178;
8180 -> 8179;
8181 -> 8179;
8181 -> 8153;
8182 -> 8153;
8183 -> 8171;
8183 -> 8181;
8183 -> 8153;
8184 -> 8153;
8185 -> 8158;
8185 -> 8184;
8186 -> 8185;
8186 -> 8106;
8186 -> 8184;
8187 -> 8186;
8187 -> 8153;
8188 -> 8187;
8188 -> 3027;
8188 -> 8153;
8189 -> 8183;
8189 -> 8188;
8189 -> 8153;
8190 -> 8153;
8191 -> 8153;
8191 -> 8128;
8192 -> 8141;
8192 -> 8128;
8193 -> 8108;
8193 -> 8117;
8193 -> 8101;
8194 -> 8104;
8194 -> 8193;
8195 -> 8192;
8195 -> 8194;
8196 -> 0;
8197 -> 0;
8198 -> 0;
8199 -> 8198;
8201 -> 8196;
8201 -> 8197;
8201 -> 8199;
8201 -> 8200;
8202 -> 8201;
8203 -> 0;
8204 -> 0;
8205 -> 0;
8206 -> 8205;
8206 -> 0;
8207 -> 8206;
8209 -> 8203;
8209 -> 8204;
8209 -> 8207;
8209 -> 8208;
8210 -> 8209;
8211 -> 8195;
8211 -> 8037;
8212 -> 8037;
8213 -> 8037;
8214 -> 8211;
8214 -> 8213;
8215 -> 8212;
8215 -> 8213;
8216 -> 8212;
8216 -> 8213;
8217 -> 8214;
8217 -> 8213;
8218 -> 8215;
8218 -> 0;
8218 -> 8213;
8219 -> 8215;
8219 -> 8213;
8220 -> 8214;
8220 -> 8219;
8221 -> 8219;
8222 -> 8220;
8222 -> 8221;
8223 -> 8221;
8224 -> 8222;
8224 -> 8223;
8225 -> 8224;
8225 -> 8221;
8226 -> 8221;
8227 -> 8225;
8227 -> 8226;
8228 -> 8227;
8228 -> 8106;
8228 -> 8226;
8229 -> 8214;
8229 -> 8213;
8230 -> 8215;
8230 -> 8213;
8231 -> 8216;
8231 -> 8213;
8232 -> 8213;
8233 -> 8229;
8233 -> 8232;
8234 -> 8230;
8234 -> 8232;
8235 -> 8231;
8235 -> 8232;
8236 -> 0;
8238 -> 8236;
8238 -> 8237;
8239 -> 8237;
8240 -> 8239;
8241 -> 8238;
8241 -> 0;
8241 -> 8237;
8242 -> 8238;
8242 -> 8239;
8242 -> 8237;
8243 -> 8237;
8244 -> 8233;
8244 -> 8232;
8245 -> 8234;
8245 -> 8232;
8246 -> 8235;
8246 -> 8232;
8247 -> 8232;
8248 -> 8246;
8248 -> 8247;
8249 -> 8248;
8249 -> 8231;
8249 -> 8247;
8250 -> 8243;
8250 -> 8249;
8251 -> 8232;
8252 -> 8232;
8253 -> 8244;
8253 -> 8252;
8254 -> 8245;
8254 -> 8252;
8255 -> 8250;
8255 -> 8252;
8256 -> 8251;
8256 -> 8252;
8257 -> 8253;
8257 -> 8252;
8258 -> 8257;
8258 -> 8252;
8259 -> 8253;
8259 -> 8258;
8260 -> 8258;
8261 -> 8259;
8261 -> 8260;
8262 -> 8260;
8263 -> 8261;
8263 -> 8262;
8264 -> 8263;
8264 -> 8260;
8265 -> 8260;
8266 -> 8264;
8266 -> 8265;
8267 -> 8266;
8267 -> 8106;
8267 -> 8265;
8268 -> 8254;
8268 -> 0;
8268 -> 8252;
8269 -> 8252;
8270 -> 8267;
8270 -> 8269;
8270 -> 8252;
8271 -> 8252;
8272 -> 8255;
8272 -> 8271;
8272 -> 8252;
8273 -> 8253;
8273 -> 8256;
8273 -> 8252;
8274 -> 8254;
8274 -> 8256;
8274 -> 8252;
8275 -> 8255;
8275 -> 8256;
8275 -> 8252;
8276 -> 8251;
8276 -> 8213;
8277 -> 8276;
8277 -> 8037;
8278 -> 7973;
8278 -> 8106;
8278 -> 8037;
8279 -> 8044;
8279 -> 8037;
8280 -> 7973;
8280 -> 8037;
8281 -> 8037;
8282 -> 8277;
8282 -> 8281;
8283 -> 8278;
8283 -> 8281;
8284 -> 8279;
8284 -> 8281;
8285 -> 8280;
8285 -> 8281;
8286 -> 8280;
8286 -> 8281;
8287 -> 8281;
8288 -> 8282;
8288 -> 8287;
8289 -> 8288;
8289 -> 8273;
8289 -> 8287;
8290 -> 8289;
8290 -> 8287;
8291 -> 8290;
8291 -> 8281;
8292 -> 8281;
8293 -> 8285;
8293 -> 8292;
8294 -> 8292;
8295 -> 8293;
8295 -> 8294;
8296 -> 8294;
8297 -> 8295;
8297 -> 8296;
8298 -> 8296;
8299 -> 8297;
8299 -> 8298;
8300 -> 8299;
8300 -> 8296;
8301 -> 8300;
8301 -> 8294;
8302 -> 8301;
8302 -> 8292;
8303 -> 8302;
8303 -> 8281;
8304 -> 8281;
8305 -> 8285;
8305 -> 8304;
8306 -> 8304;
8307 -> 8305;
8307 -> 8306;
8308 -> 8307;
8308 -> 8106;
8308 -> 8306;
8309 -> 8306;
8310 -> 8308;
8310 -> 8309;
8311 -> 0;
8311 -> 8309;
8312 -> 8311;
8312 -> 8306;
8313 -> 8308;
8313 -> 8304;
8314 -> 8313;
8314 -> 8281;
8315 -> 8314;
8315 -> 8284;
8315 -> 8281;
8316 -> 8281;
8317 -> 8285;
8317 -> 8281;
8318 -> 8281;
8319 -> 8317;
8319 -> 8318;
8320 -> 8316;
8320 -> 8318;
8321 -> 8319;
8321 -> 8318;
8322 -> 8318;
8323 -> 8319;
8323 -> 8322;
8324 -> 8322;
8324 -> 8318;
8325 -> 8318;
8326 -> 8318;
8327 -> 8319;
8327 -> 8326;
8328 -> 0;
8328 -> 8326;
8329 -> 8327;
8329 -> 8106;
8329 -> 0;
8329 -> 8326;
8330 -> 8329;
8330 -> 8318;
8331 -> 8318;
8332 -> 8319;
8332 -> 8331;
8333 -> 8332;
8333 -> 8106;
8333 -> 8331;
8334 -> 8333;
8334 -> 8318;
8335 -> 8334;
8335 -> 8318;
8336 -> 8318;
8337 -> 8336;
8337 -> 8281;
8338 -> 8281;
8339 -> 8281;
8340 -> 8339;
8340 -> 8281;
8341 -> 8281;
8342 -> 8284;
8342 -> 8341;
8343 -> 8342;
8343 -> 8106;
8343 -> 8341;
8344 -> 8343;
8344 -> 8281;
8345 -> 8283;
8345 -> 8281;
8346 -> 8338;
8346 -> 8281;
8347 -> 8339;
8347 -> 8281;
8348 -> 8344;
8348 -> 8345;
8348 -> 8346;
8348 -> 8347;
8348 -> 8106;
8348 -> 8340;
8348 -> 8281;
8349 -> 8348;
8350 -> 8286;
8350 -> 8349;
8351 -> 8349;
8352 -> 8350;
8352 -> 8348;
8352 -> 8349;
8353 -> 8351;
8353 -> 8349;
8354 -> 8349;
8355 -> 8352;
8355 -> 8354;
8356 -> 8353;
8356 -> 8354;
8357 -> 8355;
8357 -> 8354;
8358 -> 8357;
8359 -> 8357;
8360 -> 8359;
8361 -> 8360;
8362 -> 8360;
8362 -> 8361;
8363 -> 0;
8363 -> 8361;
8364 -> 8363;
8364 -> 8360;
8365 -> 8360;
8365 -> 8359;
8366 -> 8359;
8367 -> 8365;
8367 -> 8366;
8368 -> 8350;
8368 -> 8348;
8368 -> 8359;
8369 -> 8359;
8370 -> 8367;
8370 -> 8359;
8371 -> 8370;
8372 -> 8350;
8372 -> 8367;
8372 -> 8371;
8373 -> 8371;
8374 -> 8372;
8374 -> 8373;
8375 -> 8373;
8376 -> 8375;
8376 -> 8371;
8377 -> 8371;
8378 -> 8372;
8378 -> 8377;
8379 -> 8378;
8379 -> 8371;
8380 -> 8371;
8381 -> 8379;
8381 -> 8380;
8382 -> 8380;
8383 -> 8381;
8383 -> 8382;
8384 -> 8382;
8385 -> 8384;
8385 -> 8380;
8386 -> 8380;
8387 -> 8381;
8387 -> 8386;
8388 -> 8387;
8388 -> 8367;
8388 -> 8386;
8389 -> 8388;
8389 -> 8382;
8390 -> 8388;
8390 -> 8386;
8391 -> 8390;
8391 -> 8367;
8391 -> 8386;
8392 -> 8391;
8392 -> 8382;
8393 -> 8391;
8393 -> 8386;
8394 -> 8386;
8395 -> 8394;
8395 -> 8380;
8396 -> 8395;
8396 -> 8385;
8396 -> 8380;
8397 -> 8396;
8397 -> 8359;
8398 -> 8359;
8399 -> 8397;
8399 -> 8398;
8400 -> 8399;
8400 -> 8398;
8401 -> 0;
8401 -> 8400;
8402 -> 8401;
8402 -> 8350;
8402 -> 8359;
8403 -> 8396;
8403 -> 8349;
8404 -> 8403;
8404 -> 8348;
8405 -> 8348;
8406 -> 8404;
8406 -> 8405;
8406 -> 8348;
8407 -> 8282;
8407 -> 8406;
8408 -> 8037;
8409 -> 8407;
8409 -> 8408;
8410 -> 8409;
8410 -> 8273;
8410 -> 8408;
8411 -> 8408;
8412 -> 8410;
8412 -> 8411;
8413 -> 8409;
8413 -> 8275;
8413 -> 8411;
8414 -> 8412;
8414 -> 8411;
8415 -> 8414;
8415 -> 8408;
8416 -> 7973;
8416 -> 8367;
8416 -> 7974;
8417 -> 8415;
8417 -> 7974;
8418 -> 3440;
8418 -> 7974;
8419 -> 8416;
8419 -> 8417;
8419 -> 8418;
8419 -> 8367;
8419 -> 8402;
8419 -> 7974;
8420 -> 7973;
8420 -> 8419;
8420 -> 7971;
8421 -> 8420;
8421 -> 7967;
8422 -> 8421;
8422 -> 7964;
8423 -> 7964;
8424 -> 8422;
8424 -> 8423;
8424 -> 7964;
8425 -> 8422;
8425 -> 7964;
8426 -> 7965;
8426 -> 7964;
8427 -> 7964;
8428 -> 8425;
8428 -> 8427;
8429 -> 8426;
8429 -> 8427;
8430 -> 8427;
8431 -> 8428;
8431 -> 8430;
8431 -> 8427;
8432 -> 8427;
8433 -> 8429;
8433 -> 8432;
8433 -> 8427;
8434 -> 8427;
8435 -> 8429;
8435 -> 8434;
8436 -> 8434;
8437 -> 8435;
8437 -> 8436;
8438 -> 8436;
8439 -> 8437;
8439 -> 8438;
8440 -> 8438;
8441 -> 8439;
8441 -> 8440;
8442 -> 8441;
8442 -> 8438;
8443 -> 8442;
8443 -> 8436;
8444 -> 8443;
8444 -> 8434;
8445 -> 8444;
8445 -> 8427;
8446 -> 8427;
8447 -> 8428;
8447 -> 8427;
8448 -> 8427;
8449 -> 8428;
8449 -> 8448;
8450 -> 8448;
8451 -> 8450;
8451 -> 8427;
8452 -> 8446;
8452 -> 8427;
8453 -> 8427;
8454 -> 8447;
8454 -> 8453;
8455 -> 8451;
8455 -> 8453;
8456 -> 8452;
8456 -> 8453;
8457 -> 8453;
8458 -> 8454;
8458 -> 8457;
8458 -> 8453;
8459 -> 8453;
8460 -> 8454;
8460 -> 8459;
8461 -> 8460;
8461 -> 8453;
8462 -> 8461;
8462 -> 8453;
8463 -> 8462;
8463 -> 8456;
8463 -> 8419;
8463 -> 8446;
8463 -> 8453;
8464 -> 8453;
8465 -> 8463;
8465 -> 8464;
8466 -> 8464;
8467 -> 8465;
8467 -> 8466;
8468 -> 8467;
8468 -> 8464;
8469 -> 8464;
8470 -> 8465;
8470 -> 8469;
8471 -> 8470;
8471 -> 8464;
8472 -> 8471;
8473 -> 8461;
8473 -> 8472;
8474 -> 8473;
8474 -> 8471;
8474 -> 8472;
8475 -> 8474;
8475 -> 8471;
8476 -> 8475;
8477 -> 8475;
8478 -> 8476;
8478 -> 8477;
8479 -> 8477;
8480 -> 8477;
8481 -> 8477;
8481 -> 8480;
8482 -> 0;
8482 -> 8480;
8483 -> 8482;
8483 -> 8477;
8484 -> 8477;
8485 -> 8479;
8485 -> 8477;
8486 -> 8477;
8487 -> 8477;
8488 -> 8477;
8489 -> 8477;
8490 -> 8477;
8491 -> 8490;
8491 -> 8477;
8492 -> 8491;
8492 -> 8490;
8492 -> 8477;
8493 -> 8491;
8493 -> 8477;
8494 -> 8493;
8495 -> 8494;
8495 -> 8490;
8495 -> 8477;
8496 -> 8477;
8497 -> 8496;
8497 -> 8490;
8497 -> 8477;
8498 -> 8490;
8498 -> 8477;
8499 -> 8477;
8500 -> 8498;
8500 -> 8477;
8501 -> 8477;
8502 -> 8477;
8502 -> 8501;
8503 -> 0;
8503 -> 8501;
8504 -> 8503;
8504 -> 8477;
8505 -> 8504;
8505 -> 8477;
8506 -> 8477;
8507 -> 8505;
8507 -> 8506;
8508 -> 8500;
8508 -> 8506;
8509 -> 8507;
8509 -> 0;
8509 -> 8506;
8510 -> 8507;
8510 -> 8509;
8511 -> 8477;
8512 -> 8477;
8512 -> 8511;
8513 -> 8512;
8513 -> 8477;
8513 -> 8511;
8514 -> 8513;
8514 -> 8477;
8515 -> 8477;
8516 -> 8514;
8516 -> 8477;
8517 -> 8514;
8517 -> 8516;
8518 -> 8517;
8518 -> 8477;
8519 -> 8514;
8519 -> 8477;
8520 -> 8504;
8520 -> 8510;
8520 -> 8477;
8521 -> 8520;
8521 -> 8518;
8521 -> 8477;
8522 -> 8477;
8523 -> 8477;
8523 -> 8522;
8524 -> 8522;
8525 -> 8524;
8525 -> 8522;
8526 -> 8525;
8526 -> 8522;
8527 -> 8523;
8527 -> 8522;
8528 -> 8522;
8529 -> 8527;
8529 -> 8528;
8530 -> 8528;
8531 -> 8530;
8531 -> 8522;
8532 -> 8522;
8533 -> 8527;
8533 -> 8532;
8534 -> 8533;
8534 -> 8477;
8534 -> 8532;
8535 -> 8534;
8535 -> 8522;
8536 -> 8522;
8537 -> 8535;
8537 -> 8536;
8538 -> 0;
8538 -> 8536;
8539 -> 8538;
8539 -> 8522;
8540 -> 8531;
8540 -> 8539;
8540 -> 8522;
8541 -> 8522;
8542 -> 8527;
8542 -> 8541;
8543 -> 8542;
8543 -> 8541;
8544 -> 8543;
8544 -> 8477;
8544 -> 8541;
8545 -> 8544;
8545 -> 8522;
8546 -> 8522;
8547 -> 8545;
8547 -> 8546;
8548 -> 8522;
8549 -> 8547;
8549 -> 8548;
8550 -> 8548;
8550 -> 8522;
8551 -> 8522;
8552 -> 8540;
8552 -> 8550;
8552 -> 8522;
8553 -> 8522;
8554 -> 8527;
8554 -> 8553;
8555 -> 8554;
8555 -> 8522;
8556 -> 8555;
8556 -> 3027;
8556 -> 8522;
8557 -> 8552;
8557 -> 8556;
8557 -> 8522;
8558 -> 8522;
8559 -> 8522;
8559 -> 8477;
8560 -> 8490;
8560 -> 8477;
8561 -> 8490;
8561 -> 8477;
8562 -> 8490;
8562 -> 8477;
8563 -> 8560;
8563 -> 0;
8563 -> 8477;
8564 -> 8560;
8564 -> 8477;
8565 -> 8490;
8565 -> 8564;
8566 -> 8564;
8567 -> 8565;
8567 -> 8566;
8568 -> 8566;
8569 -> 8567;
8569 -> 8568;
8570 -> 8569;
8570 -> 8566;
8571 -> 8566;
8572 -> 8570;
8572 -> 8571;
8573 -> 8560;
8573 -> 8477;
8574 -> 8561;
8574 -> 8477;
8575 -> 8477;
8576 -> 8574;
8576 -> 8575;
8577 -> 8576;
8577 -> 8561;
8577 -> 8575;
8578 -> 8243;
8578 -> 8577;
8579 -> 8573;
8579 -> 8477;
8580 -> 8578;
8580 -> 8477;
8581 -> 8490;
8581 -> 8477;
8582 -> 8581;
8582 -> 8477;
8583 -> 8490;
8583 -> 8582;
8584 -> 8582;
8585 -> 8583;
8585 -> 8584;
8586 -> 8584;
8587 -> 8585;
8587 -> 8586;
8588 -> 8587;
8588 -> 8584;
8589 -> 8584;
8590 -> 8588;
8590 -> 8589;
8591 -> 8579;
8591 -> 0;
8591 -> 8477;
8592 -> 8477;
8593 -> 8590;
8593 -> 8592;
8593 -> 8477;
8594 -> 8477;
8595 -> 8580;
8595 -> 8594;
8595 -> 8477;
8596 -> 8579;
8596 -> 8490;
8596 -> 8477;
8597 -> 8580;
8597 -> 8490;
8597 -> 8477;
8598 -> 8490;
8598 -> 8477;
8599 -> 8477;
8600 -> 8490;
8600 -> 8599;
8601 -> 8600;
8601 -> 8490;
8601 -> 8599;
8602 -> 8601;
8602 -> 8599;
8603 -> 8602;
8603 -> 8477;
8604 -> 8477;
8605 -> 8598;
8605 -> 8604;
8606 -> 8604;
8607 -> 8605;
8607 -> 8606;
8608 -> 8606;
8609 -> 8607;
8609 -> 8608;
8610 -> 8608;
8611 -> 8609;
8611 -> 8610;
8612 -> 8611;
8612 -> 8608;
8613 -> 8612;
8613 -> 8606;
8614 -> 8613;
8614 -> 8604;
8615 -> 8614;
8615 -> 8477;
8616 -> 8477;
8617 -> 8598;
8617 -> 8616;
8618 -> 8616;
8619 -> 8617;
8619 -> 8618;
8620 -> 8618;
8621 -> 8619;
8621 -> 8620;
8622 -> 0;
8622 -> 8620;
8623 -> 8622;
8623 -> 8618;
8624 -> 8619;
8624 -> 8616;
8625 -> 8624;
8625 -> 8477;
8626 -> 8477;
8627 -> 8598;
8627 -> 8477;
8628 -> 8477;
8629 -> 8627;
8629 -> 8628;
8630 -> 8626;
8630 -> 8628;
8631 -> 8629;
8631 -> 8628;
8632 -> 8628;
8633 -> 8629;
8633 -> 8632;
8634 -> 8632;
8634 -> 8628;
8635 -> 8628;
8636 -> 8628;
8637 -> 8629;
8637 -> 8636;
8638 -> 0;
8638 -> 8636;
8639 -> 8637;
8639 -> 8628;
8640 -> 8628;
8641 -> 8629;
8641 -> 8640;
8642 -> 8641;
8642 -> 8477;
8642 -> 8640;
8643 -> 8642;
8643 -> 8628;
8644 -> 8643;
8644 -> 8628;
8645 -> 8628;
8646 -> 8645;
8646 -> 8477;
8647 -> 8490;
8648 -> 8647;
8648 -> 8490;
8649 -> 8490;
8650 -> 8647;
8651 -> 8647;
8651 -> 8650;
8652 -> 0;
8652 -> 8650;
8653 -> 8652;
8653 -> 8647;
8654 -> 8490;
8654 -> 8647;
8655 -> 8654;
8655 -> 8647;
8656 -> 8654;
8656 -> 8647;
8657 -> 8656;
8657 -> 8647;
8658 -> 8657;
8658 -> 8647;
8659 -> 8657;
8659 -> 8647;
8660 -> 8659;
8660 -> 8647;
8661 -> 8660;
8661 -> 8647;
8662 -> 8660;
8662 -> 8647;
8663 -> 8647;
8663 -> 8597;
8663 -> 8477;
8664 -> 8647;
8664 -> 8475;
8665 -> 8455;
8665 -> 8475;
8666 -> 8456;
8666 -> 8475;
8667 -> 8475;
8668 -> 8664;
8668 -> 8667;
8669 -> 8665;
8669 -> 8667;
8670 -> 8666;
8670 -> 8667;
8671 -> 8667;
8672 -> 8668;
8672 -> 8671;
8672 -> 8667;
8673 -> 8667;
8674 -> 8668;
8674 -> 8673;
8675 -> 8674;
8675 -> 8667;
8676 -> 0;
8676 -> 8675;
8677 -> 8676;
8678 -> 8676;
8679 -> 8676;
8680 -> 8676;
8680 -> 8679;
8681 -> 0;
8681 -> 8679;
8682 -> 8681;
8682 -> 8676;
8683 -> 8676;
8684 -> 8669;
8684 -> 8676;
8685 -> 8676;
8686 -> 8683;
8686 -> 8685;
8686 -> 8676;
8687 -> 8686;
8688 -> 8676;
8689 -> 8669;
8689 -> 8688;
8689 -> 8676;
8690 -> 8471;
8691 -> 8455;
8691 -> 8690;
8691 -> 8471;
8692 -> 8427;
8693 -> 8429;
8693 -> 8427;
8694 -> 8693;
8694 -> 8446;
8694 -> 8683;
8694 -> 8427;
8695 -> 8427;
8696 -> 8695;
8697 -> 8695;
8698 -> 8446;
8698 -> 8694;
8698 -> 8427;
8699 -> 8694;
8699 -> 8427;
8700 -> 7964;
8701 -> 7965;
8701 -> 8700;
8702 -> 8700;
8703 -> 8702;
8703 -> 8701;
8703 -> 8700;
8704 -> 7964;
8705 -> 8422;
8705 -> 7964;
8706 -> 8705;
8706 -> 7961;
8707 -> 3440;
8707 -> 7961;
8708 -> 7963;
8708 -> 8706;
8708 -> 8707;
8708 -> 8698;
8708 -> 8703;
8708 -> 7961;
8709 -> 7960;
8709 -> 8708;
8709 -> 7959;
8710 -> 8709;
8710 -> 7957;
8711 -> 7957;
8712 -> 8710;
8712 -> 8711;
8712 -> 7957;
8713 -> 8710;
8713 -> 8712;
8714 -> 8712;
8715 -> 8713;
8715 -> 8714;
8716 -> 8714;
8717 -> 8715;
8717 -> 8716;
8717 -> 8714;
8718 -> 8714;
8719 -> 8715;
8719 -> 8718;
8720 -> 8718;
8720 -> 8714;
8721 -> 8720;
8721 -> 8712;
8722 -> 8712;
8723 -> 8722;
8724 -> 8722;
8725 -> 8722;
8726 -> 8722;
8727 -> 8722;
8728 -> 8722;
8729 -> 8722;
8729 -> 8728;
8730 -> 8728;
8731 -> 8729;
8731 -> 8730;
8732 -> 8730;
8733 -> 8731;
8733 -> 8732;
8734 -> 8732;
8735 -> 8733;
8735 -> 8734;
8736 -> 8735;
8736 -> 8732;
8737 -> 8736;
8737 -> 8730;
8738 -> 8737;
8738 -> 8728;
8739 -> 8738;
8739 -> 8722;
8740 -> 8722;
8741 -> 8722;
8741 -> 8740;
8742 -> 8740;
8743 -> 8742;
8743 -> 8722;
8744 -> 8722;
8745 -> 8744;
8746 -> 8722;
8747 -> 8743;
8747 -> 8746;
8747 -> 8722;
8748 -> 8722;
8749 -> 8722;
8750 -> 8722;
8750 -> 8712;
8751 -> 8750;
8752 -> 8750;
8753 -> 8751;
8753 -> 8752;
8754 -> 8752;
8755 -> 8753;
8755 -> 8754;
8755 -> 8752;
8756 -> 8752;
8757 -> 8753;
8757 -> 8756;
8758 -> 8756;
8758 -> 8752;
8759 -> 8758;
8759 -> 8750;
8760 -> 8750;
8761 -> 8750;
8762 -> 8750;
8763 -> 8762;
8764 -> 7957;
8765 -> 8764;
8765 -> 7953;
8766 -> 7953;
8767 -> 7956;
8767 -> 8766;
8768 -> 8765;
8768 -> 8766;
8769 -> 7954;
8769 -> 8766;
8770 -> 8766;
8771 -> 8768;
8771 -> 8770;
8771 -> 8766;
8772 -> 8771;
8773 -> 7953;
8774 -> 7954;
8774 -> 8773;
8775 -> 8773;
8776 -> 8774;
8776 -> 8775;
8777 -> 8776;
8777 -> 8763;
8777 -> 8775;
8778 -> 8775;
8779 -> 8777;
8779 -> 8778;
8780 -> 0;
8780 -> 8778;
8781 -> 8780;
8781 -> 8775;
8782 -> 8775;
8783 -> 8777;
8783 -> 8773;
8784 -> 8783;
8784 -> 7953;
8785 -> 7953;
8786 -> 8784;
8786 -> 8785;
8787 -> 8785;
8788 -> 8786;
8788 -> 8787;
8789 -> 8787;
8790 -> 8788;
8790 -> 8789;
8791 -> 8789;
8792 -> 8790;
8792 -> 8763;
8792 -> 8791;
8792 -> 8789;
8793 -> 8787;
8794 -> 8788;
8794 -> 8785;
8795 -> 8785;
8796 -> 8767;
8796 -> 7953;
8797 -> 8796;
8797 -> 7949;
8798 -> 7949;
8799 -> 7952;
8799 -> 8798;
8800 -> 8797;
8800 -> 8798;
8801 -> 7950;
8801 -> 8798;
8802 -> 8798;
8803 -> 8800;
8803 -> 8802;
8803 -> 8798;
8804 -> 8803;
8805 -> 8804;
8806 -> 7950;
8806 -> 8805;
8807 -> 8806;
8807 -> 8763;
8807 -> 8805;
8808 -> 8805;
8809 -> 8807;
8809 -> 8808;
8810 -> 0;
8810 -> 8808;
8811 -> 8810;
8811 -> 8805;
8812 -> 8805;
8813 -> 8807;
8813 -> 8804;
8814 -> 8804;
8815 -> 8813;
8815 -> 8814;
8816 -> 7950;
8816 -> 8763;
8816 -> 8804;
8817 -> 8815;
8818 -> 7950;
8818 -> 8817;
8819 -> 8818;
8819 -> 8815;
8819 -> 8817;
8820 -> 8819;
8820 -> 0;
8820 -> 8817;
8821 -> 8818;
8821 -> 8815;
8821 -> 8820;
8822 -> 8821;
8823 -> 8821;
8824 -> 8822;
8824 -> 8823;
8825 -> 8823;
8825 -> 8821;
8826 -> 0;
8826 -> 8821;
8827 -> 8821;
8828 -> 8825;
8828 -> 8827;
8828 -> 8821;
8829 -> 8828;
8830 -> 8829;
8830 -> 8828;
8831 -> 8830;
8831 -> 8828;
8832 -> 8831;
8833 -> 8832;
8833 -> 8831;
8834 -> 0;
8834 -> 8833;
8835 -> 8834;
8835 -> 8818;
8835 -> 8820;
8836 -> 8834;
8836 -> 8817;
8837 -> 8836;
8837 -> 8815;
8838 -> 8799;
8838 -> 7949;
8839 -> 8838;
8839 -> 7947;
8840 -> 8839;
8840 -> 7946;
8840 -> 7947;
8841 -> 7946;
8841 -> 8815;
8841 -> 8840;
8841 -> 7945;
8842 -> 8841;
8842 -> 7941;
8843 -> 7941;
8844 -> 8842;
8844 -> 8843;
8844 -> 7941;
8845 -> 7935;
8845 -> 6860;
8846 -> 6550;
8847 -> 6550;
8848 -> 8845;
8848 -> 8847;
8849 -> 8846;
8849 -> 8847;
8850 -> 8846;
8850 -> 8847;
8851 -> 8848;
8851 -> 8847;
8852 -> 8849;
8852 -> 0;
8852 -> 8847;
8853 -> 8849;
8853 -> 8847;
8854 -> 8848;
8854 -> 8853;
8855 -> 8853;
8856 -> 8854;
8856 -> 8855;
8857 -> 8855;
8858 -> 8856;
8858 -> 8857;
8859 -> 8858;
8859 -> 8855;
8860 -> 8855;
8861 -> 8859;
8861 -> 8860;
8862 -> 8861;
8862 -> 8815;
8862 -> 8860;
8863 -> 8848;
8863 -> 8847;
8864 -> 8849;
8864 -> 8847;
8865 -> 8850;
8865 -> 8847;
8866 -> 8847;
8867 -> 8863;
8867 -> 8866;
8868 -> 8864;
8868 -> 8866;
8869 -> 8865;
8869 -> 8866;
8870 -> 8867;
8870 -> 8866;
8871 -> 8868;
8871 -> 8866;
8872 -> 8869;
8872 -> 8866;
8873 -> 8866;
8874 -> 8872;
8874 -> 8873;
8875 -> 8874;
8875 -> 8865;
8875 -> 8873;
8876 -> 8243;
8876 -> 8875;
8877 -> 8866;
8878 -> 8866;
8879 -> 8870;
8879 -> 8878;
8880 -> 8871;
8880 -> 8878;
8881 -> 8876;
8881 -> 8878;
8882 -> 8877;
8882 -> 8878;
8883 -> 8879;
8883 -> 8878;
8884 -> 8883;
8884 -> 8878;
8885 -> 8879;
8885 -> 8884;
8886 -> 8884;
8887 -> 8885;
8887 -> 8886;
8888 -> 8886;
8889 -> 8887;
8889 -> 8888;
8890 -> 8889;
8890 -> 8886;
8891 -> 8886;
8892 -> 8890;
8892 -> 8891;
8893 -> 8892;
8893 -> 8815;
8893 -> 8891;
8894 -> 8880;
8894 -> 0;
8894 -> 8878;
8895 -> 8878;
8896 -> 8893;
8896 -> 8895;
8896 -> 8878;
8897 -> 8878;
8898 -> 8881;
8898 -> 8897;
8898 -> 8878;
8899 -> 8879;
8899 -> 8882;
8899 -> 8878;
8900 -> 8880;
8900 -> 8882;
8900 -> 8878;
8901 -> 8881;
8901 -> 8882;
8901 -> 8878;
8902 -> 8877;
8902 -> 8847;
8903 -> 8902;
8903 -> 6550;
8904 -> 8903;
8904 -> 6552;
8904 -> 6550;
8905 -> 6550;
8906 -> 6552;
8906 -> 8905;
8907 -> 8906;
8907 -> 8815;
8907 -> 8905;
8908 -> 8907;
8908 -> 6550;
8909 -> 6550;
8910 -> 8908;
8910 -> 8909;
8910 -> 8815;
8910 -> 8835;
8910 -> 8840;
8910 -> 8904;
8910 -> 8899;
8910 -> 8900;
8910 -> 8901;
8910 -> 8242;
8910 -> 0;
8910 -> 6550;
8911 -> 6550;
8912 -> 6552;
8912 -> 8911;
8913 -> 8912;
8913 -> 8910;
8913 -> 8911;
8914 -> 8913;
8914 -> 6550;
8915 -> 6552;
8915 -> 8910;
8915 -> 6550;
8916 -> 6551;
8916 -> 6550;
8917 -> 6550;
8918 -> 8915;
8918 -> 8917;
8919 -> 8915;
8919 -> 8917;
8920 -> 8916;
8920 -> 8917;
8921 -> 6552;
8921 -> 8917;
8922 -> 8917;
8923 -> 8921;
8923 -> 8922;
8924 -> 8923;
8924 -> 8910;
8924 -> 8922;
8925 -> 8922;
8926 -> 8924;
8926 -> 8925;
8927 -> 8926;
8927 -> 0;
8927 -> 8925;
8928 -> 0;
8928 -> 8927;
8929 -> 8928;
8929 -> 8917;
8930 -> 8917;
8931 -> 8921;
8931 -> 8930;
8932 -> 8931;
8932 -> 8910;
8932 -> 8930;
8933 -> 8932;
8933 -> 8917;
8934 -> 8929;
8934 -> 8933;
8934 -> 8917;
8935 -> 8917;
8936 -> 8921;
8936 -> 8935;
8937 -> 8936;
8937 -> 8910;
8937 -> 8935;
8938 -> 8937;
8938 -> 8917;
8939 -> 8917;
8940 -> 8921;
8940 -> 8939;
8941 -> 8940;
8941 -> 8910;
8941 -> 8939;
8942 -> 8941;
8942 -> 8917;
8943 -> 8938;
8943 -> 8942;
8943 -> 8917;
8944 -> 8943;
8944 -> 8917;
8945 -> 8917;
8946 -> 8921;
8946 -> 8917;
8947 -> 8918;
8947 -> 8917;
8948 -> 8945;
8948 -> 8917;
8949 -> 8917;
8950 -> 8946;
8950 -> 8949;
8951 -> 8947;
8951 -> 8949;
8952 -> 8948;
8952 -> 8949;
8953 -> 8950;
8953 -> 8949;
8954 -> 8952;
8954 -> 8949;
8955 -> 8949;
8956 -> 8953;
8956 -> 8955;
8957 -> 8954;
8957 -> 8955;
8958 -> 8951;
8958 -> 8955;
8959 -> 8955;
8960 -> 8958;
8960 -> 8959;
8961 -> 8960;
8961 -> 8910;
8961 -> 8959;
8962 -> 8959;
8963 -> 8961;
8963 -> 8962;
8964 -> 8960;
8964 -> 8910;
8964 -> 8962;
8965 -> 8963;
8965 -> 8962;
8966 -> 8962;
8967 -> 8965;
8967 -> 8966;
8968 -> 8967;
8968 -> 8966;
8969 -> 8966;
8970 -> 8968;
8970 -> 8969;
8971 -> 8969;
8972 -> 8970;
8972 -> 8971;
8973 -> 8972;
8973 -> 8969;
8974 -> 8969;
8975 -> 8973;
8975 -> 8974;
8976 -> 8975;
8976 -> 8955;
8977 -> 8956;
8977 -> 8955;
8978 -> 8957;
8978 -> 8955;
8979 -> 8955;
8980 -> 8976;
8980 -> 8979;
8981 -> 8977;
8981 -> 8979;
8982 -> 8978;
8982 -> 8979;
8983 -> 8982;
8983 -> 8979;
8984 -> 8980;
8984 -> 8979;
8985 -> 8983;
8985 -> 8979;
8986 -> 8981;
8986 -> 8979;
8987 -> 8979;
8988 -> 8979;
8989 -> 8984;
8989 -> 8988;
8990 -> 8985;
8990 -> 8988;
8991 -> 8986;
8991 -> 8988;
8992 -> 8987;
8992 -> 8988;
8993 -> 8988;
8994 -> 8989;
8994 -> 8988;
8995 -> 8990;
8995 -> 8988;
8996 -> 8991;
8996 -> 8988;
8997 -> 8992;
8997 -> 8988;
8998 -> 8988;
8999 -> 8993;
8999 -> 8998;
9000 -> 8994;
9000 -> 8998;
9001 -> 8993;
9001 -> 8998;
9002 -> 8995;
9002 -> 8998;
9003 -> 8996;
9003 -> 8998;
9004 -> 8997;
9004 -> 8998;
9005 -> 8993;
9005 -> 8998;
9006 -> 8998;
9007 -> 8999;
9007 -> 9006;
9008 -> 9007;
9008 -> 8993;
9008 -> 9006;
9009 -> 9008;
9009 -> 9006;
9010 -> 9009;
9010 -> 8998;
9011 -> 9000;
9011 -> 8998;
9012 -> 9010;
9012 -> 9011;
9012 -> 8998;
9013 -> 8998;
9014 -> 9004;
9014 -> 9013;
9014 -> 8998;
9015 -> 9005;
9015 -> 9013;
9015 -> 8998;
9016 -> 9014;
9016 -> 9015;
9016 -> 8998;
9017 -> 8998;
9018 -> 9000;
9018 -> 9017;
9019 -> 9017;
9020 -> 9017;
9021 -> 9018;
9021 -> 9020;
9022 -> 9021;
9022 -> 9020;
9023 -> 9022;
9023 -> 9017;
9024 -> 9023;
9025 -> 9018;
9025 -> 9024;
9026 -> 9025;
9026 -> 8910;
9026 -> 9024;
9027 -> 9026;
9027 -> 9023;
9028 -> 9023;
9029 -> 9027;
9029 -> 9028;
9029 -> 9023;
9030 -> 9017;
9031 -> 8999;
9031 -> 9030;
9032 -> 9031;
9032 -> 8993;
9032 -> 9030;
9033 -> 9032;
9033 -> 9030;
9034 -> 9033;
9034 -> 9017;
9035 -> 9034;
9036 -> 9002;
9036 -> 9035;
9036 -> 9034;
9037 -> 9018;
9037 -> 9036;
9038 -> 9003;
9038 -> 9036;
9039 -> 9019;
9039 -> 9036;
9040 -> 9037;
9040 -> 9038;
9040 -> 9039;
9040 -> 9002;
9040 -> 8910;
9040 -> 8985;
9040 -> 9036;
9041 -> 9036;
9042 -> 9040;
9042 -> 9041;
9043 -> 9040;
9043 -> 9041;
9044 -> 9040;
9044 -> 9041;
9045 -> 9041;
9046 -> 9042;
9046 -> 9045;
9047 -> 9046;
9047 -> 9045;
9048 -> 9047;
9048 -> 9041;
9049 -> 9042;
9049 -> 9048;
9050 -> 9043;
9050 -> 9048;
9051 -> 9044;
9051 -> 9048;
9052 -> 9048;
9053 -> 9049;
9053 -> 9052;
9054 -> 9050;
9054 -> 9052;
9055 -> 9051;
9055 -> 9052;
9056 -> 9052;
9057 -> 9053;
9057 -> 9056;
9058 -> 0;
9058 -> 9056;
9059 -> 9057;
9059 -> 9052;
9060 -> 9059;
9060 -> 0;
9060 -> 9052;
9061 -> 9060;
9062 -> 9055;
9062 -> 9061;
9062 -> 9040;
9062 -> 9036;
9063 -> 9017;
9064 -> 9063;
9064 -> 9017;
9065 -> 9017;
9066 -> 9018;
9066 -> 9065;
9067 -> 9066;
9067 -> 9062;
9067 -> 9065;
9068 -> 9067;
9068 -> 9017;
9069 -> 9068;
9070 -> 9018;
9070 -> 9069;
9071 -> 0;
9071 -> 9069;
9072 -> 9071;
9072 -> 9068;
9073 -> 9072;
9073 -> 0;
9073 -> 9068;
9074 -> 9073;
9075 -> 8983;
9075 -> 8979;
9076 -> 9074;
9076 -> 8979;
9077 -> 8917;
9078 -> 8921;
9078 -> 9077;
9079 -> 9078;
9079 -> 9062;
9079 -> 9077;
9080 -> 9079;
9080 -> 8917;
9081 -> 8917;
9082 -> 8921;
9082 -> 9081;
9083 -> 9082;
9083 -> 9062;
9083 -> 9081;
9084 -> 9083;
9084 -> 8917;
9085 -> 9080;
9085 -> 9084;
9085 -> 8917;
9086 -> 9085;
9086 -> 8917;
9087 -> 8919;
9087 -> 8917;
9088 -> 8920;
9088 -> 8917;
9089 -> 8917;
9090 -> 8921;
9090 -> 9089;
9091 -> 9090;
9091 -> 9062;
9091 -> 9089;
9092 -> 9091;
9092 -> 8917;
9093 -> 8917;
9094 -> 9075;
9094 -> 8917;
9095 -> 9088;
9095 -> 9092;
9095 -> 9094;
9095 -> 8917;
9096 -> 6550;
9097 -> 6552;
9097 -> 9095;
9097 -> 6550;
9098 -> 6547;
9099 -> 6548;
9099 -> 6547;
9100 -> 6547;
9101 -> 9099;
9101 -> 9100;
9102 -> 6533;
9102 -> 9100;
9103 -> 9100;
9104 -> 9102;
9104 -> 9103;
9105 -> 9104;
9105 -> 9095;
9105 -> 9103;
9106 -> 9105;
9106 -> 9100;
9107 -> 9102;
9107 -> 9106;
9108 -> 9106;
9109 -> 9106;
9110 -> 9107;
9110 -> 9109;
9111 -> 9108;
9111 -> 9109;
9112 -> 9110;
9112 -> 9109;
9113 -> 9110;
9113 -> 9112;
9114 -> 9110;
9114 -> 9113;
9115 -> 9109;
9115 -> 3147;
9116 -> 9110;
9117 -> 9101;
9117 -> 9110;
9117 -> 9100;
9118 -> 6547;
9119 -> 0;
9119 -> 6547;
9120 -> 6547;
9121 -> 9119;
9121 -> 9120;
9122 -> 6533;
9122 -> 9110;
9122 -> 9120;
9123 -> 9122;
9123 -> 9121;
9123 -> 9120;
9124 -> 6548;
9124 -> 9110;
9124 -> 9123;
9124 -> 6547;
9125 -> 6530;
9126 -> 6531;
9126 -> 9124;
9126 -> 6530;
9127 -> 9126;
9127 -> 6518;
9128 -> 6518;
9129 -> 6516;
9129 -> 9128;
9130 -> 9128;
9131 -> 9129;
9131 -> 9124;
9131 -> 9130;
9132 -> 9130;
9133 -> 9131;
9133 -> 9132;
9134 -> 0;
9134 -> 9132;
9135 -> 9132;
9136 -> 9134;
9136 -> 9135;
9137 -> 9130;
9138 -> 9131;
9138 -> 9124;
9138 -> 9130;
9139 -> 9138;
9139 -> 9128;
9140 -> 9128;
9141 -> 9139;
9141 -> 9140;
9142 -> 9141;
9142 -> 9140;
9143 -> 9140;
9144 -> 9142;
9144 -> 9143;
9145 -> 9144;
9145 -> 9142;
9145 -> 9143;
9146 -> 9144;
9146 -> 9143;
9147 -> 9143;
9148 -> 9146;
9148 -> 6518;
9149 -> 6518;
9150 -> 6527;
9150 -> 9149;
9151 -> 9127;
9151 -> 9149;
9152 -> 9148;
9152 -> 9149;
9153 -> 6517;
9153 -> 9149;
9154 -> 9153;
9154 -> 9146;
9154 -> 0;
9154 -> 9149;
9155 -> 9149;
9156 -> 9152;
9156 -> 9146;
9156 -> 9149;
9157 -> 9152;
9157 -> 9156;
9158 -> 9151;
9158 -> 9149;
9159 -> 6518;
9160 -> 0;
9160 -> 6518;
9161 -> 6518;
9162 -> 9160;
9162 -> 9161;
9163 -> 9161;
9163 -> 9146;
9163 -> 9162;
9164 -> 6518;
9165 -> 5758;
9165 -> 5759;
9166 -> 5758;
9166 -> 5759;
9167 -> 9166;
9167 -> 9163;
9167 -> 5759;
9168 -> 0;
9168 -> 5759;
9169 -> 5750;
9170 -> 5704;
9171 -> 9163;
9172 -> 9163;
9173 -> 9163;
9174 -> 9163;
9174 -> 5710;
9174 -> 5704;
9175 -> 9163;
9175 -> 5717;
9176 -> 9175;
9176 -> 5704;
9177 -> 9163;
9177 -> 5759;
9178 -> 9163;
9178 -> 5759;
9179 -> 9177;
9179 -> 5869;
9180 -> 9179;
9180 -> 5759;
9181 -> 9180;
9181 -> 5879;
9181 -> 5759;
9182 -> 9178;
9182 -> 9163;
9182 -> 5759;
9183 -> 9163;
9183 -> 5759;
9184 -> 9163;
9184 -> 5759;
9185 -> 9183;
9185 -> 5885;
9186 -> 9185;
9186 -> 5759;
9187 -> 9186;
9187 -> 5895;
9187 -> 5759;
9188 -> 9184;
9188 -> 9163;
9188 -> 5759;
9189 -> 9163;
9189 -> 5759;
9190 -> 9163;
9190 -> 5901;
9191 -> 9190;
9191 -> 5759;
9192 -> 9191;
9192 -> 5911;
9193 -> 9192;
9193 -> 5913;
9194 -> 9193;
9194 -> 5916;
9195 -> 9194;
9195 -> 5919;
9196 -> 9195;
9196 -> 9163;
9196 -> 5920;
9196 -> 5919;
9197 -> 9196;
9197 -> 5923;
9197 -> 5919;
9198 -> 9189;
9198 -> 5759;
9199 -> 9198;
9199 -> 5934;
9199 -> 5759;
9200 -> 9199;
9200 -> 5759;
9201 -> 9163;
9201 -> 5759;
9202 -> 9163;
9202 -> 5759;
9203 -> 9163;
9203 -> 0;
9203 -> 5953;
9204 -> 9203;
9204 -> 5759;
9205 -> 9201;
9205 -> 9163;
9205 -> 5759;
9206 -> 9163;
9206 -> 5996;
9207 -> 9163;
9207 -> 5996;
9208 -> 9163;
9208 -> 6002;
9209 -> 9208;
9209 -> 6004;
9210 -> 9209;
9210 -> 6007;
9211 -> 9207;
9211 -> 6010;
9211 -> 5996;
9212 -> 9163;
9212 -> 6046;
9213 -> 9212;
9213 -> 6048;
9214 -> 9213;
9214 -> 6051;
9215 -> 9214;
9215 -> 6055;
9216 -> 9215;
9216 -> 6058;
9217 -> 9215;
9217 -> 6062;
9218 -> 9217;
9218 -> 6055;
9219 -> 9218;
9219 -> 6065;
9220 -> 9215;
9220 -> 6070;
9221 -> 9220;
9221 -> 6055;
9222 -> 9221;
9222 -> 6081;
9223 -> 9222;
9223 -> 6083;
9224 -> 9223;
9224 -> 9163;
9224 -> 6083;
9225 -> 9224;
9226 -> 9224;
9226 -> 9225;
9227 -> 9226;
9227 -> 9163;
9227 -> 9225;
9228 -> 9227;
9229 -> 9163;
9229 -> 6098;
9229 -> 5996;
9230 -> 9163;
9230 -> 5996;
9231 -> 9230;
9231 -> 6101;
9232 -> 9163;
9232 -> 6101;
9233 -> 9232;
9233 -> 9163;
9233 -> 6101;
9234 -> 9163;
9234 -> 5996;
9235 -> 9234;
9235 -> 6107;
9236 -> 9163;
9236 -> 6107;
9237 -> 9236;
9237 -> 9163;
9237 -> 6107;
9238 -> 9237;
9238 -> 5996;
9239 -> 9163;
9239 -> 5996;
9240 -> 9239;
9240 -> 5996;
9241 -> 9240;
9241 -> 6141;
9242 -> 9163;
9242 -> 6141;
9243 -> 9241;
9243 -> 6141;
9244 -> 9243;
9244 -> 6145;
9244 -> 6141;
9245 -> 9242;
9245 -> 9163;
9245 -> 0;
9245 -> 6141;
9246 -> 9243;
9246 -> 6148;
9247 -> 9246;
9247 -> 9163;
9247 -> 6150;
9248 -> 9247;
9248 -> 6152;
9249 -> 9248;
9249 -> 6154;
9250 -> 9249;
9250 -> 9163;
9250 -> 6154;
9251 -> 9250;
9252 -> 9250;
9252 -> 9251;
9253 -> 9252;
9253 -> 9163;
9253 -> 9251;
9254 -> 9253;
9255 -> 9242;
9255 -> 9163;
9255 -> 0;
9255 -> 6141;
9256 -> 6173;
9256 -> 9255;
9256 -> 6141;
9257 -> 9256;
9257 -> 5996;
9258 -> 9163;
9258 -> 0;
9258 -> 5996;
9259 -> 9258;
9260 -> 9259;
9261 -> 9260;
9261 -> 9163;
9261 -> 9259;
9262 -> 9261;
9262 -> 9258;
9263 -> 9258;
9264 -> 9262;
9264 -> 9263;
9265 -> 9163;
9265 -> 9263;
9266 -> 9264;
9266 -> 9263;
9267 -> 9266;
9268 -> 9163;
9268 -> 6191;
9269 -> 9268;
9269 -> 6193;
9270 -> 9269;
9270 -> 6196;
9271 -> 9163;
9271 -> 6200;
9272 -> 9271;
9272 -> 6202;
9273 -> 9272;
9273 -> 6205;
9274 -> 9273;
9274 -> 6209;
9275 -> 9274;
9275 -> 6212;
9276 -> 9274;
9276 -> 6216;
9277 -> 9276;
9277 -> 6209;
9278 -> 9277;
9278 -> 6219;
9279 -> 9274;
9279 -> 6224;
9280 -> 9279;
9280 -> 6209;
9281 -> 9280;
9281 -> 6235;
9282 -> 9281;
9282 -> 6237;
9283 -> 9282;
9283 -> 9163;
9283 -> 6237;
9284 -> 9283;
9285 -> 9283;
9285 -> 9284;
9286 -> 9285;
9286 -> 9163;
9286 -> 9284;
9287 -> 9286;
9288 -> 9163;
9288 -> 6188;
9289 -> 9288;
9290 -> 9289;
9290 -> 9288;
9291 -> 9290;
9291 -> 6188;
9292 -> 9291;
9292 -> 6260;
9292 -> 6188;
9293 -> 9290;
9293 -> 9292;
9294 -> 9292;
9295 -> 9293;
9295 -> 9294;
9295 -> 9292;
9296 -> 9290;
9296 -> 9295;
9297 -> 9295;
9298 -> 9296;
9298 -> 9297;
9298 -> 9295;
9299 -> 9163;
9299 -> 6271;
9300 -> 9299;
9300 -> 6273;
9301 -> 9300;
9301 -> 6271;
9302 -> 9301;
9302 -> 6277;
9303 -> 9163;
9304 -> 9163;
9305 -> 9304;
9305 -> 9163;
9306 -> 9163;
9306 -> 6188;
9307 -> 9306;
9308 -> 9163;
9308 -> 9307;
9309 -> 9307;
9310 -> 9308;
9310 -> 9309;
9311 -> 9310;
9311 -> 9307;
9312 -> 9307;
9313 -> 9311;
9313 -> 9312;
9314 -> 9313;
9314 -> 9306;
9315 -> 9306;
9316 -> 9163;
9316 -> 9314;
9317 -> 9314;
9318 -> 9316;
9318 -> 9317;
9319 -> 9163;
9319 -> 9317;
9320 -> 9318;
9320 -> 9317;
9321 -> 9317;
9322 -> 9320;
9322 -> 9321;
9323 -> 9319;
9323 -> 9321;
9324 -> 9323;
9324 -> 9163;
9324 -> 9321;
9325 -> 9324;
9325 -> 9317;
9326 -> 9314;
9327 -> 9290;
9327 -> 6362;
9328 -> 9327;
9328 -> 6188;
9329 -> 9163;
9329 -> 5992;
9330 -> 9329;
9330 -> 6368;
9331 -> 9163;
9331 -> 6368;
9332 -> 9330;
9332 -> 6368;
9333 -> 9332;
9333 -> 6372;
9334 -> 9331;
9334 -> 6372;
9335 -> 9333;
9335 -> 6375;
9336 -> 9335;
9336 -> 9163;
9336 -> 6375;
9337 -> 9336;
9337 -> 6372;
9338 -> 9163;
9338 -> 6412;
9339 -> 9338;
9339 -> 5759;
9340 -> 9163;
9340 -> 6434;
9341 -> 9340;
9341 -> 6436;
9342 -> 9341;
9342 -> 6434;
9343 -> 9342;
9343 -> 6439;
9344 -> 9163;
9344 -> 5759;
9345 -> 9163;
9345 -> 5759;
9346 -> 9163;
9346 -> 6465;
9347 -> 9346;
9347 -> 6467;
9348 -> 9347;
9348 -> 6470;
9349 -> 9163;
9350 -> 9349;
9350 -> 9163;
9351 -> 9350;
9351 -> 9163;
9352 -> 9163;
9352 -> 6474;
9353 -> 9352;
9353 -> 6473;
9354 -> 9353;
9354 -> 9163;
9354 -> 6514;
9354 -> 5759;
9355 -> 9163;
9356 -> 9355;
9356 -> 9163;
9357 -> 9163;
9358 -> 9163;
9358 -> 9357;
9359 -> 9358;
9359 -> 9163;
9359 -> 9357;
9360 -> 9359;
9360 -> 9163;
9361 -> 9163;
9362 -> 9360;
9362 -> 9361;
9362 -> 9163;
9363 -> 9163;
9364 -> 9163;
9364 -> 9363;
9365 -> 9363;
9365 -> 9163;
9366 -> 9163;
9367 -> 9366;
9367 -> 9163;
9368 -> 9163;
9369 -> 9163;
9370 -> 9163;
9371 -> 9163;
9372 -> 9163;
9372 -> 9371;
9373 -> 9163;
9373 -> 9372;
9374 -> 9163;
9374 -> 3147;
9375 -> 9163;
9376 -> 9163;
9377 -> 9163;
9378 -> 9376;
9378 -> 9377;
9379 -> 9378;
9379 -> 9377;
9380 -> 9377;
9380 -> 9379;
9381 -> 9163;
9382 -> 9163;
9383 -> 9163;
9384 -> 9163;
9385 -> 9163;
9386 -> 9163;
9387 -> 9163;
9388 -> 9163;
9389 -> 9163;
9389 -> 9388;
9390 -> 9387;
9390 -> 9388;
9391 -> 9390;
9391 -> 9388;
9392 -> 9389;
9392 -> 9391;
9393 -> 9163;
9394 -> 9163;
9395 -> 9163;
9396 -> 0;
9396 -> 9163;
9397 -> 9163;
9398 -> 9395;
9398 -> 9397;
9399 -> 9396;
9399 -> 9397;
9400 -> 9163;
9401 -> 0;
9401 -> 9163;
9402 -> 9163;
9403 -> 9400;
9403 -> 9402;
9404 -> 9401;
9404 -> 9402;
9405 -> 9163;
9406 -> 9163;
9407 -> 9163;
9407 -> 9406;
9408 -> 9405;
9408 -> 9406;
9409 -> 9408;
9409 -> 9406;
9410 -> 9407;
9410 -> 9409;
9411 -> 9163;
9412 -> 9163;
9413 -> 9163;
9414 -> 9163;
9415 -> 9163;
9416 -> 9163;
9417 -> 9163;
9418 -> 9163;
9419 -> 9163;
9420 -> 9163;
9421 -> 9163;
9422 -> 9163;
9423 -> 9163;
9424 -> 9163;
9425 -> 9163;
9426 -> 9413;
9426 -> 9163;
9427 -> 9423;
9427 -> 9420;
9427 -> 9426;
9428 -> 9426;
9429 -> 9415;
9429 -> 9426;
9430 -> 9163;
9430 -> 9426;
9431 -> 9426;
9432 -> 9428;
9432 -> 9431;
9433 -> 9429;
9433 -> 9431;
9434 -> 9430;
9434 -> 9431;
9435 -> 9431;
9436 -> 9431;
9437 -> 9431;
9438 -> 9431;
9439 -> 9431;
9440 -> 9432;
9440 -> 9163;
9440 -> 9431;
9441 -> 9426;
9441 -> 9163;
9442 -> 9426;
9443 -> 9426;
9444 -> 9441;
9444 -> 9443;
9445 -> 9442;
9445 -> 9443;
9446 -> 9442;
9446 -> 9443;
9447 -> 9442;
9447 -> 9443;
9448 -> 0;
9448 -> 9443;
9449 -> 9443;
9450 -> 9443;
9451 -> 9443;
9452 -> 9444;
9452 -> 9443;
9453 -> 9448;
9453 -> 9443;
9454 -> 9453;
9454 -> 9426;
9455 -> 9451;
9455 -> 9426;
9456 -> 9426;
9457 -> 9456;
9458 -> 9425;
9458 -> 9457;
9458 -> 9456;
9459 -> 9456;
9459 -> 9163;
9460 -> 0;
9460 -> 9456;
9461 -> 9456;
9461 -> 9163;
9461 -> 9459;
9462 -> 9456;
9463 -> 9456;
9463 -> 9163;
9463 -> 9459;
9463 -> 9462;
9464 -> 9426;
9465 -> 9426;
9465 -> 9163;
9465 -> 9459;
9465 -> 9464;
9466 -> 9426;
9466 -> 9163;
9466 -> 9459;
9467 -> 9415;
9467 -> 9426;
9468 -> 9419;
9468 -> 9426;
9469 -> 9426;
9470 -> 9426;
9471 -> 9466;
9471 -> 9470;
9472 -> 9467;
9472 -> 9470;
9473 -> 9469;
9473 -> 9470;
9474 -> 9468;
9474 -> 9470;
9475 -> 9163;
9475 -> 9470;
9476 -> 9471;
9476 -> 9470;
9477 -> 9472;
9477 -> 9470;
9478 -> 9473;
9478 -> 9470;
9479 -> 9474;
9479 -> 9470;
9480 -> 9470;
9481 -> 9476;
9481 -> 9480;
9482 -> 9477;
9482 -> 9480;
9483 -> 9478;
9483 -> 9480;
9484 -> 9479;
9484 -> 9480;
9485 -> 9475;
9485 -> 9480;
9486 -> 9480;
9487 -> 9482;
9487 -> 9486;
9487 -> 9480;
9488 -> 9481;
9488 -> 9480;
9489 -> 9482;
9489 -> 9480;
9490 -> 9483;
9490 -> 9480;
9491 -> 9480;
9492 -> 9483;
9492 -> 9491;
9492 -> 9480;
9493 -> 9492;
9493 -> 9484;
9493 -> 9480;
9494 -> 9480;
9495 -> 9488;
9495 -> 9494;
9496 -> 9489;
9496 -> 9494;
9497 -> 9490;
9497 -> 9494;
9498 -> 9493;
9498 -> 9494;
9499 -> 9485;
9499 -> 9494;
9500 -> 9495;
9500 -> 9459;
9500 -> 9494;
9501 -> 9495;
9501 -> 9500;
9502 -> 9496;
9502 -> 9500;
9503 -> 9500;
9504 -> 9501;
9504 -> 9503;
9505 -> 9502;
9505 -> 9503;
9506 -> 9499;
9506 -> 9503;
9507 -> 9504;
9507 -> 9503;
9508 -> 9507;
9508 -> 9503;
9509 -> 9505;
9509 -> 9503;
9510 -> 9503;
9511 -> 9508;
9511 -> 9510;
9512 -> 9509;
9512 -> 9510;
9513 -> 9506;
9513 -> 9510;
9514 -> 9511;
9514 -> 9500;
9514 -> 9510;
9515 -> 9512;
9515 -> 9510;
9516 -> 9511;
9516 -> 9510;
9517 -> 9510;
9518 -> 9514;
9518 -> 9517;
9519 -> 9515;
9519 -> 9517;
9520 -> 9516;
9520 -> 9517;
9521 -> 9513;
9521 -> 9517;
9522 -> 9521;
9522 -> 9514;
9522 -> 9517;
9523 -> 9520;
9523 -> 9517;
9524 -> 9519;
9524 -> 9517;
9525 -> 9518;
9525 -> 0;
9525 -> 9517;
9526 -> 9517;
9527 -> 9522;
9528 -> 9522;
9529 -> 9528;
9529 -> 9522;
9530 -> 9529;
9531 -> 9529;
9531 -> 9530;
9532 -> 9530;
9533 -> 9531;
9533 -> 9532;
9534 -> 9532;
9535 -> 9533;
9535 -> 9522;
9535 -> 9534;
9535 -> 9532;
9536 -> 9530;
9537 -> 9531;
9537 -> 9522;
9537 -> 9530;
9538 -> 9537;
9538 -> 9529;
9539 -> 9529;
9540 -> 9517;
9541 -> 9522;
9541 -> 9540;
9542 -> 9541;
9542 -> 9517;
9543 -> 9517;
9544 -> 9522;
9544 -> 9543;
9544 -> 9517;
9545 -> 9524;
9545 -> 9517;
9546 -> 9523;
9546 -> 9517;
9547 -> 9522;
9548 -> 9522;
9549 -> 9522;
9550 -> 9522;
9550 -> 9549;
9551 -> 0;
9551 -> 9549;
9552 -> 9551;
9552 -> 9522;
9553 -> 9522;
9554 -> 9548;
9554 -> 9522;
9555 -> 9522;
9556 -> 9522;
9557 -> 9522;
9558 -> 9522;
9559 -> 9522;
9560 -> 9559;
9560 -> 9522;
9561 -> 9559;
9561 -> 9522;
9562 -> 9561;
9563 -> 9562;
9563 -> 9522;
9564 -> 9522;
9565 -> 9564;
9565 -> 9522;
9566 -> 9522;
9567 -> 9522;
9568 -> 9566;
9568 -> 9522;
9569 -> 9522;
9570 -> 9522;
9570 -> 9569;
9571 -> 0;
9571 -> 9569;
9572 -> 9571;
9572 -> 9522;
9573 -> 9572;
9573 -> 9522;
9574 -> 9522;
9575 -> 9573;
9575 -> 9574;
9576 -> 9568;
9576 -> 9574;
9577 -> 9575;
9577 -> 0;
9577 -> 9574;
9578 -> 9575;
9578 -> 9577;
9579 -> 9522;
9580 -> 9522;
9580 -> 9579;
9581 -> 9580;
9581 -> 9522;
9581 -> 9579;
9582 -> 9581;
9582 -> 9522;
9583 -> 9522;
9584 -> 9582;
9584 -> 9522;
9585 -> 9582;
9585 -> 9584;
9586 -> 9585;
9586 -> 9522;
9587 -> 9582;
9587 -> 9522;
9588 -> 9572;
9588 -> 9578;
9588 -> 9522;
9589 -> 9588;
9589 -> 9586;
9589 -> 9522;
9590 -> 9522;
9591 -> 9522;
9591 -> 9590;
9592 -> 9590;
9593 -> 9592;
9593 -> 9590;
9594 -> 9593;
9594 -> 9590;
9595 -> 9591;
9595 -> 9590;
9596 -> 9590;
9597 -> 9595;
9597 -> 9596;
9598 -> 9596;
9599 -> 9598;
9599 -> 9590;
9600 -> 9590;
9601 -> 9595;
9601 -> 9600;
9602 -> 9601;
9602 -> 9522;
9602 -> 9600;
9603 -> 9602;
9603 -> 9590;
9604 -> 9590;
9605 -> 9603;
9605 -> 9604;
9606 -> 0;
9606 -> 9604;
9607 -> 9606;
9607 -> 9590;
9608 -> 9599;
9608 -> 9607;
9608 -> 9590;
9609 -> 9590;
9610 -> 9595;
9610 -> 9609;
9611 -> 9610;
9611 -> 9609;
9612 -> 9611;
9612 -> 9522;
9612 -> 9609;
9613 -> 9612;
9613 -> 9590;
9614 -> 9590;
9615 -> 9613;
9615 -> 9614;
9616 -> 9590;
9617 -> 9615;
9617 -> 9616;
9618 -> 9616;
9618 -> 9590;
9619 -> 9590;
9620 -> 9608;
9620 -> 9618;
9620 -> 9590;
9621 -> 9590;
9622 -> 9595;
9622 -> 9621;
9623 -> 9622;
9623 -> 9590;
9624 -> 9623;
9624 -> 3027;
9624 -> 9590;
9625 -> 9620;
9625 -> 9624;
9625 -> 9590;
9626 -> 9590;
9627 -> 9590;
9627 -> 9522;
9628 -> 9522;
9629 -> 9522;
9629 -> 0;
9630 -> 9522;
9631 -> 9522;
9631 -> 9630;
9632 -> 9630;
9633 -> 9631;
9633 -> 9632;
9634 -> 9522;
9635 -> 9634;
9635 -> 9522;
9636 -> 9522;
9636 -> 9635;
9637 -> 9635;
9638 -> 9636;
9638 -> 9637;
9639 -> 9522;
9639 -> 0;
9640 -> 9522;
9641 -> 9638;
9641 -> 9640;
9641 -> 9522;
9642 -> 9522;
9643 -> 9522;
9644 -> 9522;
9645 -> 9644;
9645 -> 9522;
9646 -> 9522;
9647 -> 9643;
9647 -> 9646;
9648 -> 9646;
9649 -> 9647;
9649 -> 9648;
9650 -> 9648;
9651 -> 9649;
9651 -> 9650;
9652 -> 9650;
9653 -> 9651;
9653 -> 9652;
9654 -> 9653;
9654 -> 9650;
9655 -> 9654;
9655 -> 9648;
9656 -> 9655;
9656 -> 9646;
9657 -> 9656;
9657 -> 9522;
9658 -> 9522;
9659 -> 9643;
9659 -> 9658;
9660 -> 9658;
9661 -> 9659;
9661 -> 9660;
9662 -> 9660;
9663 -> 9661;
9663 -> 9662;
9664 -> 0;
9664 -> 9662;
9665 -> 9664;
9665 -> 9660;
9666 -> 9661;
9666 -> 9658;
9667 -> 9666;
9667 -> 9522;
9668 -> 9522;
9669 -> 9643;
9669 -> 9522;
9670 -> 9522;
9671 -> 9669;
9671 -> 9670;
9672 -> 9668;
9672 -> 9670;
9673 -> 9671;
9673 -> 9670;
9674 -> 9670;
9675 -> 9671;
9675 -> 9674;
9676 -> 9674;
9676 -> 9670;
9677 -> 9670;
9678 -> 9670;
9679 -> 9671;
9679 -> 9678;
9680 -> 0;
9680 -> 9678;
9681 -> 9679;
9681 -> 9670;
9682 -> 9670;
9683 -> 9671;
9683 -> 9682;
9684 -> 9683;
9684 -> 9522;
9684 -> 9682;
9685 -> 9684;
9685 -> 9670;
9686 -> 9685;
9686 -> 9670;
9687 -> 9670;
9688 -> 9687;
9688 -> 9522;
9689 -> 9522;
9690 -> 9522;
9691 -> 9522;
9692 -> 9691;
9692 -> 9522;
9693 -> 9691;
9693 -> 9522;
9694 -> 9693;
9694 -> 9522;
9695 -> 9694;
9695 -> 9522;
9696 -> 9694;
9696 -> 9522;
9697 -> 9696;
9697 -> 9522;
9698 -> 9697;
9698 -> 9522;
9699 -> 9697;
9699 -> 9522;
9700 -> 9691;
9700 -> 9522;
9701 -> 9522;
9702 -> 9691;
9702 -> 9701;
9702 -> 9522;
9703 -> 9522;
9704 -> 9691;
9704 -> 9703;
9704 -> 9522;
9705 -> 9522;
9706 -> 9691;
9706 -> 9705;
9707 -> 9705;
9708 -> 9706;
9708 -> 9707;
9709 -> 9707;
9710 -> 9708;
9710 -> 9709;
9711 -> 9709;
9712 -> 9710;
9712 -> 9711;
9713 -> 9712;
9713 -> 9709;
9714 -> 9713;
9714 -> 9707;
9715 -> 9714;
9715 -> 9705;
9716 -> 9715;
9716 -> 9522;
9717 -> 9522;
9718 -> 9691;
9718 -> 9717;
9719 -> 9717;
9720 -> 9719;
9720 -> 9522;
9721 -> 9522;
9722 -> 9691;
9722 -> 9721;
9722 -> 9522;
9723 -> 9691;
9724 -> 9691;
9725 -> 9720;
9725 -> 9691;
9726 -> 9691;
9727 -> 9726;
9728 -> 9691;
9729 -> 9725;
9729 -> 9728;
9729 -> 9691;
9730 -> 9720;
9730 -> 9728;
9730 -> 9691;
9731 -> 9691;
9731 -> 9522;
9732 -> 9522;
9733 -> 9691;
9734 -> 9691;
9735 -> 9733;
9735 -> 9734;
9736 -> 9734;
9737 -> 9735;
9737 -> 9736;
9737 -> 9734;
9738 -> 9734;
9739 -> 9735;
9739 -> 9738;
9740 -> 9738;
9740 -> 9734;
9741 -> 9740;
9741 -> 9691;
9742 -> 9522;
9743 -> 9522;
9744 -> 9522;
9745 -> 9522;
9745 -> 9744;
9746 -> 9744;
9747 -> 9745;
9747 -> 9746;
9748 -> 9747;
9748 -> 9691;
9748 -> 9746;
9749 -> 9746;
9750 -> 9748;
9750 -> 9749;
9751 -> 0;
9751 -> 9749;
9752 -> 9751;
9752 -> 9746;
9753 -> 9748;
9753 -> 9744;
9754 -> 9753;
9754 -> 9522;
9755 -> 9522;
9756 -> 9754;
9756 -> 9755;
9757 -> 9755;
9758 -> 9756;
9758 -> 9757;
9759 -> 9757;
9760 -> 9758;
9760 -> 9759;
9761 -> 9759;
9762 -> 9760;
9762 -> 9691;
9762 -> 9761;
9762 -> 9759;
9763 -> 9757;
9764 -> 9758;
9764 -> 9755;
9765 -> 9755;
9766 -> 9742;
9766 -> 9691;
9767 -> 9742;
9768 -> 9766;
9768 -> 9767;
9769 -> 0;
9769 -> 9767;
9770 -> 9769;
9770 -> 9742;
9771 -> 9522;
9771 -> 9691;
9771 -> 9742;
9772 -> 9766;
9773 -> 0;
9773 -> 9766;
9774 -> 9766;
9775 -> 9522;
9775 -> 9766;
9775 -> 9517;
9776 -> 9775;
9776 -> 9517;
9777 -> 9517;
9778 -> 9776;
9778 -> 9777;
9778 -> 9517;
9779 -> 9507;
9779 -> 9766;
9779 -> 9503;
9780 -> 9503;
9781 -> 9779;
9781 -> 9780;
9782 -> 9506;
9782 -> 9780;
9783 -> 9781;
9783 -> 9766;
9783 -> 9780;
9784 -> 9781;
9784 -> 9766;
9784 -> 9780;
9785 -> 9780;
9786 -> 9784;
9786 -> 9785;
9787 -> 9784;
9787 -> 9785;
9788 -> 9782;
9788 -> 9785;
9789 -> 9786;
9789 -> 9785;
9790 -> 9787;
9790 -> 9785;
9791 -> 9789;
9791 -> 9790;
9791 -> 9783;
9791 -> 9785;
9792 -> 9791;
9792 -> 9785;
9793 -> 9792;
9794 -> 9788;
9794 -> 9791;
9794 -> 9793;
9795 -> 9794;
9795 -> 9792;
9796 -> 0;
9796 -> 9792;
9797 -> 9792;
9798 -> 9788;
9798 -> 9797;
9799 -> 9798;
9799 -> 9795;
9799 -> 9797;
9800 -> 9797;
9801 -> 9798;
9801 -> 9799;
9801 -> 9800;
9802 -> 9801;
9802 -> 9800;
9803 -> 9800;
9804 -> 9802;
9804 -> 9803;
9805 -> 9803;
9806 -> 9804;
9806 -> 9801;
9806 -> 9805;
9807 -> 9806;
9807 -> 9803;
9808 -> 9807;
9809 -> 9808;
9809 -> 9800;
9810 -> 9809;
9810 -> 9800;
9811 -> 9522;
9811 -> 9503;
9812 -> 9503;
9813 -> 9503;
9814 -> 9810;
9814 -> 9813;
9815 -> 9811;
9815 -> 9813;
9816 -> 9812;
9816 -> 9813;
9817 -> 9815;
9817 -> 9813;
9818 -> 9815;
9818 -> 9813;
9819 -> 9816;
9819 -> 9813;
9820 -> 9814;
9820 -> 9819;
9821 -> 0;
9821 -> 9820;
9822 -> 9813;
9823 -> 9813;
9824 -> 9818;
9824 -> 9823;
9825 -> 9821;
9825 -> 9823;
9826 -> 9822;
9826 -> 9823;
9827 -> 9824;
9827 -> 9823;
9828 -> 9825;
9828 -> 0;
9828 -> 9823;
9829 -> 9825;
9829 -> 9823;
9830 -> 9824;
9830 -> 9829;
9831 -> 9829;
9832 -> 9830;
9832 -> 9831;
9833 -> 9824;
9833 -> 9823;
9834 -> 9833;
9834 -> 9823;
9835 -> 9824;
9835 -> 9834;
9836 -> 9834;
9837 -> 9835;
9837 -> 9836;
9838 -> 9837;
9838 -> 9801;
9838 -> 9836;
9839 -> 9825;
9839 -> 0;
9839 -> 9823;
9840 -> 9823;
9841 -> 9838;
9841 -> 9840;
9841 -> 9823;
9842 -> 9823;
9843 -> 9826;
9843 -> 9842;
9843 -> 9823;
9844 -> 9823;
9844 -> 9813;
9845 -> 9844;
9845 -> 9503;
9846 -> 9845;
9846 -> 9813;
9847 -> 9846;
9847 -> 9813;
9848 -> 9813;
9849 -> 9813;
9850 -> 9847;
9850 -> 9849;
9851 -> 9848;
9851 -> 9849;
9852 -> 9849;
9853 -> 9850;
9853 -> 9852;
9854 -> 9853;
9854 -> 9824;
9854 -> 9852;
9855 -> 9854;
9855 -> 9849;
9856 -> 9850;
9856 -> 9851;
9856 -> 9849;
9857 -> 9849;
9858 -> 9857;
9858 -> 9851;
9858 -> 9849;
9859 -> 9849;
9860 -> 9859;
9860 -> 9851;
9860 -> 9849;
9861 -> 9848;
9861 -> 9503;
9862 -> 9861;
9862 -> 9500;
9863 -> 9480;
9864 -> 9862;
9864 -> 9863;
9865 -> 9863;
9866 -> 9864;
9866 -> 9856;
9866 -> 9865;
9867 -> 9866;
9867 -> 9824;
9867 -> 9865;
9868 -> 9867;
9868 -> 9865;
9869 -> 9868;
9869 -> 9865;
9870 -> 9869;
9870 -> 9863;
9871 -> 9870;
9871 -> 9480;
9872 -> 9871;
9873 -> 9872;
9873 -> 9871;
9874 -> 9873;
9875 -> 9862;
9875 -> 9874;
9876 -> 9875;
9876 -> 9856;
9876 -> 9874;
9877 -> 9876;
9877 -> 9873;
9878 -> 9485;
9878 -> 9873;
9879 -> 9481;
9879 -> 9873;
9880 -> 9482;
9880 -> 9873;
9881 -> 9873;
9882 -> 9878;
9882 -> 9881;
9883 -> 9879;
9883 -> 9881;
9884 -> 9880;
9884 -> 9881;
9885 -> 9877;
9885 -> 9881;
9886 -> 9885;
9886 -> 9881;
9887 -> 9882;
9887 -> 9881;
9888 -> 9883;
9888 -> 9881;
9889 -> 9884;
9889 -> 9881;
9890 -> 9881;
9891 -> 9886;
9891 -> 9890;
9892 -> 9887;
9892 -> 9890;
9893 -> 9888;
9893 -> 9890;
9894 -> 9889;
9894 -> 9890;
9895 -> 9885;
9895 -> 9826;
9895 -> 9890;
9896 -> 9892;
9896 -> 9890;
9897 -> 9893;
9897 -> 9890;
9898 -> 9894;
9898 -> 9890;
9899 -> 9890;
9900 -> 9896;
9900 -> 9899;
9901 -> 9897;
9901 -> 9899;
9902 -> 9898;
9902 -> 9899;
9903 -> 9891;
9903 -> 9899;
9904 -> 9902;
9904 -> 9899;
9905 -> 9899;
9906 -> 9903;
9906 -> 9905;
9907 -> 9906;
9907 -> 9826;
9907 -> 9905;
9908 -> 9906;
9908 -> 9899;
9909 -> 9901;
9909 -> 9899;
9910 -> 9899;
9911 -> 9899;
9912 -> 9904;
9912 -> 9911;
9913 -> 9908;
9913 -> 9911;
9914 -> 9909;
9914 -> 9911;
9915 -> 9910;
9915 -> 9911;
9916 -> 9900;
9916 -> 9911;
9917 -> 9912;
9917 -> 9911;
9918 -> 9913;
9918 -> 9911;
9919 -> 9914;
9919 -> 9911;
9920 -> 9915;
9920 -> 9911;
9921 -> 9911;
9922 -> 9917;
9922 -> 9921;
9923 -> 9918;
9923 -> 9921;
9924 -> 9919;
9924 -> 9921;
9925 -> 9920;
9925 -> 9921;
9926 -> 9916;
9926 -> 9921;
9927 -> 9921;
9928 -> 9923;
9928 -> 9927;
9929 -> 9927;
9929 -> 9921;
9930 -> 9922;
9930 -> 9929;
9931 -> 9923;
9931 -> 9929;
9932 -> 9924;
9932 -> 9929;
9933 -> 9925;
9933 -> 9929;
9934 -> 9929;
9935 -> 9926;
9935 -> 9934;
9936 -> 9935;
9936 -> 9801;
9936 -> 9934;
9937 -> 9936;
9937 -> 9929;
9938 -> 9929;
9939 -> 9926;
9939 -> 9938;
9940 -> 9938;
9941 -> 9939;
9941 -> 9940;
9942 -> 9941;
9942 -> 9801;
9942 -> 9940;
9943 -> 9942;
9943 -> 9938;
9944 -> 9943;
9944 -> 9938;
9945 -> 9938;
9946 -> 9943;
9946 -> 9945;
9947 -> 9945;
9947 -> 9938;
9948 -> 9944;
9948 -> 9947;
9948 -> 9938;
9949 -> 9943;
9949 -> 9938;
9950 -> 9949;
9951 -> 9950;
9951 -> 9949;
9952 -> 9951;
9952 -> 9929;
9953 -> 9926;
9953 -> 9801;
9953 -> 9929;
9954 -> 9929;
9955 -> 9930;
9955 -> 9954;
9956 -> 9931;
9956 -> 9954;
9957 -> 9932;
9957 -> 9954;
9958 -> 9933;
9958 -> 9954;
9959 -> 9937;
9959 -> 9954;
9960 -> 9952;
9960 -> 9954;
9961 -> 9953;
9961 -> 9954;
9962 -> 9956;
9962 -> 9954;
9963 -> 9962;
9963 -> 9801;
9963 -> 9954;
9964 -> 9954;
9965 -> 9956;
9965 -> 9964;
9966 -> 9964;
9966 -> 9954;
9967 -> 9954;
9968 -> 9956;
9968 -> 9967;
9969 -> 9967;
9969 -> 9954;
9970 -> 9956;
9970 -> 9954;
9971 -> 9960;
9971 -> 9954;
9972 -> 9954;
9973 -> 9970;
9973 -> 9972;
9974 -> 9971;
9974 -> 9972;
9975 -> 9972;
9976 -> 9973;
9976 -> 9975;
9977 -> 9975;
9977 -> 9972;
9978 -> 9973;
9978 -> 9977;
9979 -> 9958;
9979 -> 9954;
9980 -> 9979;
9980 -> 9954;
9981 -> 9955;
9981 -> 9954;
9982 -> 9978;
9982 -> 9954;
9983 -> 9957;
9983 -> 9954;
9984 -> 9959;
9984 -> 9954;
9985 -> 9961;
9985 -> 9954;
9986 -> 9954;
9987 -> 9981;
9987 -> 9986;
9988 -> 9982;
9988 -> 9986;
9989 -> 9983;
9989 -> 9986;
9990 -> 9984;
9990 -> 9986;
9991 -> 9985;
9991 -> 9986;
9992 -> 9986;
9993 -> 9987;
9993 -> 9992;
9993 -> 9986;
9994 -> 9988;
9994 -> 9986;
9995 -> 9990;
9995 -> 9986;
9996 -> 9986;
9997 -> 9986;
9998 -> 9994;
9998 -> 9997;
9999 -> 9995;
9999 -> 9997;
10000 -> 9996;
10000 -> 9997;
10001 -> 9997;
10002 -> 9998;
10002 -> 10001;
10003 -> 10001;
10004 -> 10002;
10004 -> 10003;
10005 -> 10003;
10006 -> 10004;
10006 -> 10005;
10007 -> 10006;
10007 -> 9963;
10007 -> 10005;
10008 -> 10005;
10009 -> 10007;
10009 -> 10008;
10009 -> 10005;
10010 -> 10005;
10011 -> 10006;
10011 -> 10010;
10012 -> 10010;
10013 -> 10011;
10013 -> 10012;
10014 -> 10013;
10014 -> 9963;
10014 -> 10012;
10015 -> 10012;
10016 -> 10014;
10016 -> 10015;
10017 -> 0;
10017 -> 10015;
10018 -> 10017;
10018 -> 10012;
10019 -> 10014;
10019 -> 10010;
10020 -> 10011;
10020 -> 9963;
10020 -> 10010;
10021 -> 10010;
10022 -> 10020;
10022 -> 10021;
10023 -> 10019;
10023 -> 10021;
10024 -> 10022;
10024 -> 10021;
10025 -> 10023;
10025 -> 9963;
10025 -> 10024;
10025 -> 10021;
10026 -> 10025;
10027 -> 10026;
10028 -> 10027;
10028 -> 10005;
10029 -> 10028;
10030 -> 10028;
10031 -> 10029;
10031 -> 10030;
10032 -> 10031;
10032 -> 10030;
10033 -> 0;
10033 -> 10031;
10033 -> 10030;
10034 -> 0;
10034 -> 10031;
10034 -> 10030;
10035 -> 10031;
10035 -> 10030;
10036 -> 10031;
10036 -> 10030;
10037 -> 10031;
10037 -> 10030;
10038 -> 10031;
10038 -> 10030;
10039 -> 3440;
10039 -> 10031;
10039 -> 10030;
10040 -> 0;
10040 -> 10031;
10040 -> 10030;
10041 -> 10006;
10041 -> 10025;
10041 -> 10028;
10042 -> 10029;
10042 -> 10028;
10043 -> 10028;
10044 -> 10041;
10044 -> 10042;
10044 -> 10043;
10044 -> 10032;
10044 -> 10033;
10044 -> 10034;
10044 -> 10035;
10044 -> 10036;
10044 -> 10037;
10044 -> 10038;
10044 -> 10039;
10044 -> 10040;
10044 -> 10025;
10044 -> 0;
10044 -> 10028;
10045 -> 10044;
10045 -> 10003;
10046 -> 10045;
10046 -> 7032;
10046 -> 10003;
10047 -> 10003;
10048 -> 10004;
10048 -> 10047;
10049 -> 10047;
10050 -> 10048;
10050 -> 10049;
10051 -> 10050;
10051 -> 10044;
10051 -> 10049;
10052 -> 10049;
10053 -> 10051;
10053 -> 10052;
10053 -> 10049;
10054 -> 10051;
10054 -> 7032;
10054 -> 10053;
10055 -> 10053;
10056 -> 10051;
10056 -> 10053;
10057 -> 10056;
10057 -> 10047;
10058 -> 10057;
10058 -> 7032;
10058 -> 10047;
10059 -> 10057;
10059 -> 10044;
10059 -> 10047;
10060 -> 0;
10060 -> 10059;
10061 -> 10059;
10062 -> 10061;
10062 -> 10059;
10063 -> 10062;
10064 -> 10063;
10065 -> 10063;
10065 -> 10064;
10066 -> 0;
10066 -> 10064;
10067 -> 10066;
10067 -> 10063;
10068 -> 10063;
10068 -> 10062;
10069 -> 10062;
10070 -> 10068;
10070 -> 10069;
10071 -> 10070;
10071 -> 10062;
10072 -> 10048;
10072 -> 10044;
10072 -> 10062;
10073 -> 10071;
10073 -> 10072;
10073 -> 10044;
10073 -> 10062;
10074 -> 10073;
10074 -> 10057;
10074 -> 10059;
10075 -> 10057;
10075 -> 10073;
10075 -> 10074;
10075 -> 10047;
10076 -> 10075;
10076 -> 10003;
10077 -> 10045;
10077 -> 10073;
10077 -> 10003;
10078 -> 10004;
10078 -> 10073;
10078 -> 10003;
10079 -> 10003;
10080 -> 10004;
10080 -> 10079;
10081 -> 10080;
10081 -> 10073;
10081 -> 10079;
10082 -> 10079;
10083 -> 10081;
10083 -> 10082;
10084 -> 0;
10084 -> 10082;
10085 -> 10084;
10085 -> 10079;
10086 -> 10081;
10086 -> 10003;
10087 -> 10076;
10087 -> 10003;
10088 -> 10003;
10089 -> 10077;
10089 -> 10088;
10090 -> 10078;
10090 -> 10088;
10091 -> 10086;
10091 -> 10088;
10092 -> 10087;
10092 -> 10088;
10093 -> 10089;
10093 -> 10088;
10094 -> 0;
10094 -> 10088;
10095 -> 10090;
10095 -> 10093;
10096 -> 10091;
10096 -> 10093;
10097 -> 10092;
10097 -> 10093;
10098 -> 10093;
10099 -> 10095;
10099 -> 10098;
10100 -> 10096;
10100 -> 10098;
10101 -> 10097;
10101 -> 10098;
10102 -> 10098;
10103 -> 10100;
10103 -> 10102;
10104 -> 10103;
10104 -> 10098;
10105 -> 10099;
10105 -> 10098;
10106 -> 10100;
10106 -> 10098;
10107 -> 10098;
10108 -> 10098;
10109 -> 10106;
10109 -> 10108;
10110 -> 10107;
10110 -> 10108;
10111 -> 10109;
10111 -> 10108;
10112 -> 10108;
10113 -> 10108;
10114 -> 10108;
10115 -> 10111;
10115 -> 10114;
10116 -> 10112;
10116 -> 10114;
10117 -> 10113;
10117 -> 10114;
10118 -> 10115;
10118 -> 10073;
10118 -> 10074;
10119 -> 10114;
10120 -> 10115;
10120 -> 10119;
10120 -> 10114;
10121 -> 10101;
10121 -> 10098;
10122 -> 10104;
10122 -> 10105;
10122 -> 10107;
10122 -> 10121;
10122 -> 10118;
10122 -> 10114;
10122 -> 10116;
10122 -> 10117;
10122 -> 10073;
10122 -> 10074;
10122 -> 10098;
10123 -> 10098;
10124 -> 10122;
10124 -> 10123;
10124 -> 10098;
10125 -> 10122;
10125 -> 10098;
10126 -> 10089;
10126 -> 10093;
10127 -> 10125;
10127 -> 10093;
10128 -> 0;
10128 -> 10093;
10129 -> 10003;
10130 -> 10045;
10130 -> 10127;
10130 -> 10003;
10131 -> 10130;
10131 -> 10001;
10132 -> 10001;
10133 -> 10131;
10133 -> 10132;
10133 -> 10001;
10134 -> 10133;
10134 -> 10001;
10135 -> 10134;
10135 -> 9997;
10136 -> 0;
10136 -> 10135;
10137 -> 9986;
10138 -> 10136;
10138 -> 9986;
10139 -> 9986;
10140 -> 10137;
10140 -> 10139;
10140 -> 9986;
10141 -> 10136;
10141 -> 9986;
10142 -> 10141;
10142 -> 9954;
10143 -> 9979;
10143 -> 10142;
10144 -> 9929;
10145 -> 9911;
10146 -> 9890;
10147 -> 9873;
10148 -> 9862;
10148 -> 9871;
10149 -> 10148;
10149 -> 9470;
10150 -> 9472;
10150 -> 9470;
10151 -> 9471;
10151 -> 9470;
10152 -> 9473;
10152 -> 9470;
10153 -> 9470;
10154 -> 10149;
10154 -> 10153;
10155 -> 10150;
10155 -> 10153;
10156 -> 10151;
10156 -> 10153;
10157 -> 10152;
10157 -> 10153;
10158 -> 9475;
10158 -> 10153;
10159 -> 10153;
10160 -> 10154;
10160 -> 10159;
10161 -> 10160;
10161 -> 9858;
10161 -> 10159;
10162 -> 10161;
10162 -> 0;
10162 -> 10159;
10163 -> 10162;
10163 -> 10153;
10164 -> 10154;
10164 -> 10153;
10165 -> 9470;
10166 -> 10164;
10166 -> 10165;
10167 -> 10166;
10167 -> 9856;
10167 -> 10165;
10168 -> 9416;
10168 -> 9426;
10169 -> 9163;
10169 -> 9426;
10170 -> 9412;
10170 -> 9426;
10171 -> 10167;
10171 -> 9426;
10172 -> 9426;
10173 -> 9454;
10173 -> 9426;
10174 -> 9423;
10174 -> 9426;
10175 -> 9450;
10175 -> 9426;
10176 -> 9451;
10176 -> 9426;
10177 -> 9418;
10177 -> 9426;
10178 -> 9415;
10178 -> 9426;
10179 -> 10169;
10179 -> 10170;
10179 -> 10171;
10179 -> 10172;
10179 -> 10173;
10179 -> 10174;
10179 -> 10175;
10179 -> 10176;
10179 -> 10177;
10179 -> 10178;
10179 -> 9421;
10179 -> 10127;
10179 -> 9824;
10179 -> 9825;
10179 -> 9826;
10179 -> 9163;
10179 -> 9450;
10179 -> 9451;
10179 -> 9455;
10179 -> 9426;
10180 -> 10179;
10180 -> 10172;
10181 -> 10179;
10181 -> 10172;
10182 -> 10179;
10182 -> 10172;
10183 -> 10179;
10183 -> 10172;
10184 -> 10179;
10184 -> 10172;
10185 -> 10179;
10185 -> 10172;
10186 -> 10179;
10186 -> 10172;
10187 -> 10179;
10187 -> 10172;
10188 -> 10179;
10188 -> 10172;
10189 -> 10179;
10189 -> 10172;
10190 -> 10179;
10190 -> 10172;
10191 -> 10181;
10191 -> 10172;
10192 -> 10185;
10192 -> 10179;
10192 -> 10172;
10193 -> 10185;
10193 -> 10172;
10194 -> 10187;
10194 -> 10172;
10195 -> 10184;
10195 -> 10172;
10196 -> 10189;
10196 -> 10172;
10197 -> 10180;
10197 -> 10172;
10198 -> 10190;
10198 -> 10172;
10199 -> 10183;
10199 -> 10172;
10200 -> 10172;
10201 -> 10195;
10201 -> 10200;
10202 -> 10196;
10202 -> 10200;
10203 -> 10197;
10203 -> 10200;
10204 -> 10198;
10204 -> 10200;
10205 -> 10199;
10205 -> 10200;
10206 -> 10202;
10206 -> 10200;
10207 -> 0;
10207 -> 10206;
10208 -> 10207;
10208 -> 0;
10208 -> 10172;
10209 -> 10187;
10209 -> 10188;
10209 -> 10172;
10210 -> 10172;
10211 -> 10183;
10211 -> 10193;
10211 -> 10210;
10211 -> 10172;
10212 -> 10209;
10212 -> 10211;
10212 -> 10172;
10213 -> 10181;
10213 -> 10172;
10214 -> 10172;
10215 -> 10213;
10215 -> 10214;
10216 -> 10215;
10216 -> 10214;
10217 -> 10214;
10218 -> 10216;
10218 -> 10217;
10219 -> 10218;
10219 -> 10193;
10219 -> 0;
10219 -> 10217;
10220 -> 10217;
10221 -> 10219;
10221 -> 10214;
10222 -> 10214;
10223 -> 10212;
10223 -> 10221;
10223 -> 10172;
10224 -> 10181;
10224 -> 10223;
10225 -> 10182;
10225 -> 10223;
10226 -> 10186;
10226 -> 10223;
10227 -> 10184;
10227 -> 10223;
10228 -> 10192;
10228 -> 10223;
10229 -> 10223;
10230 -> 10193;
10230 -> 10223;
10231 -> 10223;
10232 -> 10224;
10232 -> 10231;
10233 -> 10225;
10233 -> 10231;
10234 -> 10226;
10234 -> 10231;
10235 -> 10227;
10235 -> 10231;
10236 -> 10228;
10236 -> 10231;
10237 -> 10229;
10237 -> 10231;
10238 -> 10230;
10238 -> 10231;
10239 -> 10229;
10239 -> 10231;
10240 -> 10232;
10240 -> 10231;
10241 -> 10233;
10241 -> 10231;
10242 -> 10234;
10242 -> 10231;
10243 -> 10235;
10243 -> 10231;
10244 -> 10236;
10244 -> 10231;
10245 -> 10238;
10245 -> 10231;
10246 -> 10231;
10247 -> 10240;
10247 -> 10246;
10248 -> 10241;
10248 -> 10246;
10249 -> 10242;
10249 -> 10246;
10250 -> 10243;
10250 -> 10246;
10251 -> 10244;
10251 -> 10246;
10252 -> 10245;
10252 -> 10246;
10253 -> 10239;
10253 -> 10246;
10254 -> 10247;
10254 -> 10246;
10255 -> 10249;
10255 -> 10246;
10256 -> 10246;
10257 -> 10254;
10257 -> 10256;
10258 -> 10255;
10258 -> 10256;
10259 -> 10253;
10259 -> 10256;
10261 -> 10260;
10262 -> 10256;
10263 -> 10259;
10263 -> 10262;
10264 -> 10262;
10265 -> 10263;
10265 -> 10262;
10266 -> 10259;
10266 -> 10256;
10267 -> 10259;
10267 -> 10256;
10268 -> 10256;
10269 -> 10257;
10269 -> 10268;
10269 -> 10256;
10270 -> 10258;
10270 -> 10259;
10270 -> 10256;
10271 -> 10257;
10271 -> 10259;
10271 -> 10256;
10272 -> 10253;
10272 -> 10246;
10273 -> 10253;
10273 -> 10246;
10274 -> 10252;
10274 -> 10246;
10275 -> 10274;
10276 -> 10246;
10277 -> 10247;
10277 -> 10276;
10278 -> 10276;
10278 -> 10246;
10279 -> 10248;
10279 -> 10253;
10279 -> 10246;
10280 -> 10250;
10280 -> 10253;
10280 -> 10246;
10281 -> 10251;
10281 -> 10253;
10281 -> 10246;
10282 -> 10252;
10282 -> 10253;
10282 -> 10246;
10283 -> 10239;
10283 -> 10231;
10284 -> 10237;
10284 -> 10239;
10284 -> 10231;
10285 -> 10179;
10285 -> 10229;
10285 -> 10193;
10285 -> 10263;
10285 -> 10265;
10285 -> 10271;
10285 -> 10270;
10285 -> 10281;
10285 -> 10280;
10285 -> 10279;
10285 -> 10282;
10285 -> 10284;
10285 -> 9426;
10286 -> 9412;
10286 -> 9426;
10287 -> 9426;
10288 -> 10285;
10288 -> 9426;
10289 -> 9451;
10289 -> 9426;
10290 -> 9450;
10290 -> 9426;
10291 -> 9424;
10291 -> 9426;
10292 -> 9415;
10292 -> 9426;
10293 -> 9426;
10294 -> 10286;
10294 -> 10293;
10295 -> 10287;
10295 -> 10293;
10296 -> 10288;
10296 -> 10293;
10297 -> 10289;
10297 -> 10293;
10298 -> 10290;
10298 -> 10293;
10299 -> 10291;
10299 -> 10293;
10300 -> 10292;
10300 -> 10293;
10301 -> 10293;
10302 -> 10296;
10302 -> 10301;
10303 -> 10302;
10303 -> 10285;
10303 -> 10301;
10304 -> 10303;
10304 -> 10293;
10305 -> 10295;
10305 -> 10293;
10306 -> 10295;
10306 -> 10285;
10306 -> 10293;
10307 -> 10297;
10307 -> 10293;
10308 -> 10307;
10308 -> 9451;
10308 -> 10285;
10308 -> 10293;
10309 -> 10308;
10310 -> 10296;
10310 -> 10309;
10311 -> 10309;
10312 -> 10311;
10312 -> 10308;
10313 -> 10312;
10314 -> 10296;
10314 -> 10313;
10315 -> 10313;
10315 -> 10312;
10316 -> 10315;
10317 -> 10296;
10317 -> 10316;
10318 -> 10317;
10318 -> 10308;
10318 -> 10316;
10319 -> 10318;
10319 -> 10315;
10320 -> 10315;
10321 -> 10319;
10321 -> 10320;
10322 -> 10321;
10322 -> 10308;
10322 -> 10320;
10323 -> 10320;
10324 -> 10322;
10324 -> 10323;
10325 -> 10321;
10325 -> 10308;
10325 -> 10323;
10326 -> 10323;
10327 -> 10324;
10327 -> 10326;
10328 -> 10327;
10328 -> 10308;
10328 -> 0;
10328 -> 10326;
10329 -> 10326;
10330 -> 10328;
10331 -> 10299;
10331 -> 10330;
10331 -> 10328;
10332 -> 10331;
10333 -> 10296;
10333 -> 10332;
10334 -> 10333;
10334 -> 10308;
10334 -> 10332;
10335 -> 10334;
10335 -> 10331;
10336 -> 10285;
10336 -> 9426;
10337 -> 9163;
10337 -> 10336;
10337 -> 10308;
10337 -> 9426;
10338 -> 9423;
10338 -> 9426;
10339 -> 9163;
10340 -> 9425;
10340 -> 10339;
10340 -> 9163;
10341 -> 9412;
10341 -> 9163;
10342 -> 9163;
10343 -> 10341;
10343 -> 10342;
10343 -> 9163;
10344 -> 10343;
10344 -> 9163;
10345 -> 10344;
10346 -> 10341;
10346 -> 10345;
10347 -> 9163;
10348 -> 10341;
10348 -> 10347;
10349 -> 10348;
10349 -> 10337;
10349 -> 10347;
10350 -> 10349;
10350 -> 9163;
10351 -> 9163;
10352 -> 10341;
10352 -> 10351;
10353 -> 10352;
10353 -> 10337;
10353 -> 10351;
10354 -> 9163;
10355 -> 10345;
10355 -> 10354;
10356 -> 10337;
10356 -> 10354;
10357 -> 10353;
10357 -> 10354;
10358 -> 9415;
10358 -> 10354;
10359 -> 9163;
10359 -> 10354;
10360 -> 10354;
10361 -> 10355;
10361 -> 0;
10361 -> 10354;
10362 -> 10354;
10363 -> 10356;
10363 -> 10337;
10363 -> 10354;
10364 -> 10363;
10365 -> 10356;
10365 -> 10363;
10366 -> 10365;
10367 -> 10365;
10367 -> 10366;
10368 -> 10367;
10368 -> 10337;
10368 -> 10366;
10369 -> 10368;
10369 -> 10365;
10370 -> 10369;
10370 -> 10365;
10371 -> 10365;
10372 -> 10360;
10372 -> 10371;
10372 -> 10365;
10373 -> 10369;
10373 -> 10365;
10374 -> 10364;
10374 -> 10373;
10374 -> 10365;
10375 -> 10357;
10375 -> 10374;
10376 -> 10365;
10376 -> 10375;
10377 -> 10358;
10377 -> 10375;
10378 -> 10375;
10379 -> 10376;
10379 -> 10378;
10380 -> 10377;
10380 -> 10378;
10381 -> 10359;
10381 -> 10378;
10382 -> 10379;
10382 -> 10378;
10383 -> 10378;
10384 -> 10382;
10384 -> 10383;
10385 -> 10383;
10386 -> 10384;
10386 -> 10385;
10387 -> 10386;
10387 -> 10337;
10387 -> 10385;
10388 -> 10387;
10388 -> 10383;
10389 -> 10383;
10390 -> 10388;
10390 -> 10337;
10390 -> 10389;
10390 -> 10383;
10391 -> 10390;
10391 -> 10383;
10392 -> 10379;
10392 -> 10378;
10393 -> 10391;
10393 -> 10378;
10394 -> 10378;
10395 -> 10379;
10395 -> 10394;
10396 -> 10395;
10396 -> 10337;
10396 -> 10391;
10396 -> 10394;
10397 -> 10396;
10397 -> 10378;
10398 -> 10380;
10398 -> 10378;
10399 -> 10378;
10400 -> 10392;
10400 -> 10399;
10401 -> 10393;
10401 -> 10399;
10402 -> 10397;
10402 -> 10399;
10403 -> 10398;
10403 -> 10399;
10404 -> 10381;
10404 -> 10399;
10405 -> 10402;
10405 -> 10399;
10406 -> 10404;
10406 -> 10391;
10406 -> 10399;
10407 -> 0;
10407 -> 10399;
10408 -> 10399;
10409 -> 10404;
10409 -> 10399;
10410 -> 10399;
10411 -> 10409;
10412 -> 10409;
10413 -> 10412;
10413 -> 10409;
10414 -> 10409;
10415 -> 10409;
10416 -> 10409;
10416 -> 10415;
10417 -> 10415;
10418 -> 10417;
10418 -> 10409;
10419 -> 10406;
10419 -> 10418;
10419 -> 10409;
10420 -> 10409;
10421 -> 10409;
10421 -> 10420;
10422 -> 10420;
10423 -> 10421;
10423 -> 10422;
10424 -> 10423;
10424 -> 10406;
10424 -> 10422;
10425 -> 10424;
10425 -> 10420;
10426 -> 10420;
10427 -> 10425;
10427 -> 10426;
10428 -> 10426;
10428 -> 10420;
10429 -> 10428;
10430 -> 10425;
10430 -> 10429;
10431 -> 10430;
10431 -> 10428;
10432 -> 10428;
10433 -> 10431;
10433 -> 10432;
10434 -> 10432;
10434 -> 10428;
10435 -> 10428;
10436 -> 10421;
10436 -> 10406;
10436 -> 10435;
10437 -> 10436;
10437 -> 10406;
10437 -> 10435;
10438 -> 10437;
10438 -> 10428;
10439 -> 10428;
10440 -> 10438;
10440 -> 10439;
10441 -> 10425;
10441 -> 10439;
10442 -> 10441;
10442 -> 10439;
10443 -> 10440;
10443 -> 10441;
10443 -> 10439;
10444 -> 10438;
10444 -> 10425;
10444 -> 10428;
10445 -> 10434;
10445 -> 10444;
10445 -> 10428;
10446 -> 10445;
10446 -> 10409;
10447 -> 10409;
10447 -> 10406;
10448 -> 10447;
10449 -> 10447;
10450 -> 10449;
10450 -> 10447;
10451 -> 10447;
10452 -> 10447;
10453 -> 10447;
10453 -> 10452;
10454 -> 10452;
10455 -> 10454;
10455 -> 10447;
10456 -> 10447;
10457 -> 10447;
10457 -> 10456;
10458 -> 10456;
10459 -> 10457;
10459 -> 10458;
10460 -> 10459;
10460 -> 10406;
10460 -> 10458;
10461 -> 10460;
10461 -> 10456;
10462 -> 10456;
10463 -> 10461;
10463 -> 10462;
10464 -> 10462;
10464 -> 10456;
10465 -> 10464;
10466 -> 10461;
10466 -> 10465;
10467 -> 10466;
10467 -> 10464;
10468 -> 10464;
10469 -> 10467;
10469 -> 10468;
10470 -> 10468;
10470 -> 10464;
10471 -> 10464;
10472 -> 10457;
10472 -> 10406;
10472 -> 10471;
10473 -> 10472;
10473 -> 10406;
10474 -> 10473;
10474 -> 10464;
10475 -> 10464;
10476 -> 10474;
10476 -> 10475;
10477 -> 10461;
10477 -> 10475;
10478 -> 10477;
10478 -> 10475;
10479 -> 10476;
10479 -> 10477;
10479 -> 10475;
10480 -> 10476;
10480 -> 10475;
10481 -> 10475;
10482 -> 10480;
10482 -> 10481;
10483 -> 10477;
10483 -> 10481;
10484 -> 10481;
10485 -> 10482;
10485 -> 10481;
10486 -> 10482;
10486 -> 10481;
10487 -> 10484;
10487 -> 10481;
10488 -> 10483;
10488 -> 10482;
10488 -> 10481;
10489 -> 10474;
10489 -> 10461;
10489 -> 10464;
10490 -> 10470;
10490 -> 10489;
10490 -> 10464;
10491 -> 10490;
10491 -> 10447;
10492 -> 10491;
10493 -> 10492;
10493 -> 10378;
10494 -> 10360;
10494 -> 10354;
10495 -> 10364;
10495 -> 10374;
10495 -> 10354;
10496 -> 9163;
10497 -> 9163;
10498 -> 10497;
10498 -> 9163;
10499 -> 10496;
10499 -> 9163;
10500 -> 9163;
10500 -> 0;
10501 -> 9163;
10502 -> 10473;
10503 -> 10473;
10504 -> 10503;
10504 -> 10473;
10505 -> 10504;
10506 -> 10504;
10506 -> 10505;
10507 -> 10505;
10508 -> 10506;
10508 -> 10507;
10509 -> 10507;
10510 -> 10508;
10510 -> 10473;
10510 -> 10509;
10510 -> 10507;
10511 -> 10505;
10512 -> 10506;
10512 -> 10473;
10512 -> 10505;
10513 -> 10512;
10513 -> 10504;
10514 -> 10504;
10515 -> 9163;
10516 -> 10473;
10516 -> 10515;
10517 -> 10516;
10517 -> 9163;
10518 -> 9163;
10519 -> 10473;
10519 -> 10518;
10519 -> 9163;
10520 -> 10499;
10520 -> 9163;
10521 -> 10498;
10521 -> 9163;
10522 -> 10473;
10522 -> 9163;
10523 -> 10522;
10523 -> 9163;
10524 -> 9163;
10525 -> 10523;
10525 -> 10524;
10525 -> 9163;
10526 -> 10473;
10526 -> 9163;
10527 -> 9163;
10527 -> 0;
10528 -> 9163;
10529 -> 10473;
10529 -> 10528;
10530 -> 10528;
10531 -> 10529;
10531 -> 10530;
10532 -> 10473;
10532 -> 9163;
10533 -> 10532;
10533 -> 9163;
10534 -> 10473;
10534 -> 10533;
10535 -> 10533;
10536 -> 10534;
10536 -> 10535;
10537 -> 9163;
10537 -> 0;
10538 -> 9163;
10539 -> 10536;
10539 -> 10538;
10539 -> 9163;
10540 -> 9163;
10541 -> 9163;
10542 -> 10541;
10542 -> 10473;
10543 -> 10542;
10543 -> 9163;
10544 -> 10473;
10544 -> 9163;
10545 -> 9163;
10546 -> 9163;
10546 -> 10545;
10547 -> 10546;
10547 -> 10473;
10547 -> 10545;
10548 -> 10545;
10549 -> 10547;
10549 -> 10548;
10550 -> 10549;
10550 -> 0;
10550 -> 10548;
10551 -> 0;
10551 -> 10550;
10552 -> 10551;
10552 -> 9163;
10553 -> 9163;
10554 -> 10553;
10554 -> 10473;
10555 -> 10554;
10555 -> 9163;
10556 -> 10552;
10556 -> 10555;
10556 -> 9163;
10557 -> 9163;
10558 -> 10557;
10558 -> 10473;
10559 -> 10558;
10559 -> 9163;
10560 -> 9163;
10561 -> 10560;
10561 -> 10473;
10562 -> 10561;
10562 -> 9163;
10563 -> 10559;
10563 -> 10562;
10563 -> 9163;
10564 -> 10563;
10564 -> 9163;
10565 -> 10473;
10565 -> 9163;
10566 -> 9163;
10567 -> 9163;
10568 -> 10566;
10568 -> 9163;
10569 -> 10566;
10569 -> 9163;
10570 -> 9163;
10571 -> 10570;
10571 -> 9163;
10572 -> 10473;
10572 -> 9163;
10573 -> 10571;
10573 -> 10572;
10573 -> 9163;
10574 -> 9163;
10575 -> 10568;
10575 -> 10574;
10575 -> 9163;
10576 -> 10569;
10576 -> 10574;
10576 -> 9163;
10577 -> 10575;
10577 -> 10576;
10577 -> 9163;
10578 -> 9163;
10579 -> 10473;
10579 -> 10578;
10580 -> 10579;
10580 -> 9163;
10581 -> 10580;
10582 -> 10473;
10582 -> 10581;
10583 -> 10582;
10583 -> 10473;
10583 -> 10581;
10584 -> 10583;
10584 -> 10580;
10585 -> 10580;
10586 -> 10584;
10586 -> 10585;
10586 -> 10580;
10587 -> 10473;
10587 -> 10570;
10588 -> 10587;
10588 -> 10570;
10589 -> 10588;
10589 -> 10587;
10590 -> 0;
10590 -> 10587;
10591 -> 9163;
10592 -> 10591;
10592 -> 9163;
10593 -> 9163;
10594 -> 10473;
10594 -> 10593;
10595 -> 10594;
10595 -> 10587;
10595 -> 10593;
10596 -> 10595;
10596 -> 9163;
10597 -> 10596;
10598 -> 10473;
10598 -> 10597;
10599 -> 0;
10599 -> 10597;
10600 -> 10599;
10600 -> 10596;
10601 -> 10600;
10601 -> 0;
10601 -> 10596;
10602 -> 10601;
10603 -> 10602;
10603 -> 9163;
10604 -> 9163;
10605 -> 10604;
10605 -> 10587;
10606 -> 10605;
10606 -> 9163;
10607 -> 9163;
10608 -> 10607;
10608 -> 10587;
10609 -> 10608;
10609 -> 9163;
10610 -> 10606;
10610 -> 10609;
10610 -> 9163;
10611 -> 10610;
10611 -> 9163;
10612 -> 10544;
10612 -> 9163;
10613 -> 10612;
10614 -> 10612;
10614 -> 10613;
10615 -> 10614;
10615 -> 10473;
10615 -> 10587;
10615 -> 10613;
10616 -> 10615;
10616 -> 10612;
10617 -> 9163;
10617 -> 10612;
10618 -> 10612;
10619 -> 10617;
10619 -> 10618;
10620 -> 10617;
10620 -> 10618;
10621 -> 10616;
10621 -> 10618;
10622 -> 10621;
10622 -> 10587;
10622 -> 10473;
10622 -> 10618;
10623 -> 10618;
10624 -> 10618;
10625 -> 10623;
10625 -> 10618;
10626 -> 10623;
10626 -> 10618;
10627 -> 10618;
10628 -> 10627;
10628 -> 10618;
10629 -> 10621;
10629 -> 10618;
10630 -> 10618;
10631 -> 10625;
10631 -> 10630;
10631 -> 10618;
10632 -> 10626;
10632 -> 10630;
10632 -> 10618;
10633 -> 10631;
10633 -> 10632;
10633 -> 10618;
10634 -> 10618;
10635 -> 10621;
10635 -> 10634;
10636 -> 10635;
10636 -> 10618;
10637 -> 10636;
10638 -> 10621;
10638 -> 10637;
10639 -> 10638;
10639 -> 10587;
10639 -> 10637;
10640 -> 10639;
10640 -> 10636;
10641 -> 10636;
10642 -> 10640;
10642 -> 10641;
10642 -> 10636;
10643 -> 10620;
10643 -> 10627;
10644 -> 10621;
10644 -> 10643;
10645 -> 10644;
10645 -> 10621;
10646 -> 0;
10646 -> 10621;
10647 -> 10618;
10648 -> 10647;
10648 -> 10618;
10649 -> 10618;
10650 -> 10621;
10650 -> 10649;
10651 -> 10650;
10651 -> 10618;
10652 -> 10651;
10653 -> 10621;
10653 -> 10652;
10654 -> 0;
10654 -> 10652;
10655 -> 10654;
10655 -> 10651;
10656 -> 10655;
10656 -> 0;
10656 -> 10651;
10657 -> 10656;
10658 -> 10657;
10658 -> 10618;
10659 -> 9163;
10659 -> 10621;
10660 -> 9163;
10661 -> 10660;
10661 -> 9163;
10662 -> 10621;
10663 -> 10621;
10664 -> 10621;
10664 -> 10663;
10665 -> 10621;
10665 -> 10664;
10666 -> 10621;
10666 -> 3147;
10667 -> 10621;
10668 -> 10661;
10668 -> 10621;
10668 -> 9163;
10669 -> 9163;
10670 -> 9163;
10670 -> 10621;
10671 -> 10670;
10671 -> 9163;
10672 -> 9163;
10673 -> 10621;
10673 -> 10672;
10674 -> 9163;
10675 -> 10621;
10675 -> 9163;
10676 -> 10621;
10677 -> 10676;
10677 -> 10621;
10678 -> 10621;
10679 -> 10621;
10680 -> 10677;
10680 -> 10679;
10681 -> 10678;
10681 -> 10679;
10682 -> 10679;
10683 -> 10681;
10683 -> 10682;
10684 -> 10681;
10684 -> 10679;
10685 -> 10681;
10685 -> 10679;
10686 -> 10680;
10686 -> 10679;
10687 -> 10680;
10687 -> 10681;
10687 -> 10679;
10688 -> 10621;
10688 -> 10678;
10688 -> 10687;
10688 -> 10685;
10689 -> 10688;
10689 -> 9163;
10690 -> 9163;
10691 -> 9356;
10691 -> 10690;
10692 -> 10671;
10692 -> 10690;
10693 -> 10689;
10693 -> 10690;
10694 -> 9163;
10694 -> 10690;
10695 -> 10694;
10695 -> 10688;
10695 -> 0;
10695 -> 10690;
10696 -> 10690;
10697 -> 10693;
10697 -> 10688;
10697 -> 10690;
10698 -> 10693;
10698 -> 10697;
10699 -> 10696;
10699 -> 10698;
10700 -> 10691;
10700 -> 10699;
10701 -> 10698;
10702 -> 10694;
10702 -> 10688;
10702 -> 10698;
10703 -> 10698;
10704 -> 10702;
10704 -> 10703;
10705 -> 10704;
10705 -> 10703;
10706 -> 10703;
10707 -> 10706;
10707 -> 10703;
10708 -> 10703;
10709 -> 10707;
10709 -> 10708;
10710 -> 10705;
10710 -> 10708;
10711 -> 10710;
10711 -> 10688;
10711 -> 10708;
10712 -> 0;
10712 -> 10708;
10713 -> 10710;
10713 -> 10688;
10713 -> 10708;
10714 -> 0;
10714 -> 10708;
10715 -> 10708;
10716 -> 10709;
10716 -> 10715;
10717 -> 10716;
10717 -> 10715;
10718 -> 10717;
10718 -> 10688;
10718 -> 10715;
10719 -> 10718;
10719 -> 10715;
10720 -> 10719;
10720 -> 10688;
10720 -> 10715;
10721 -> 10720;
10721 -> 10708;
10722 -> 10708;
10723 -> 10721;
10723 -> 10722;
10724 -> 10713;
10724 -> 10723;
10724 -> 10708;
10725 -> 10710;
10725 -> 10688;
10725 -> 10708;
10726 -> 0;
10726 -> 10708;
10727 -> 10708;
10728 -> 10709;
10728 -> 10727;
10729 -> 10727;
10730 -> 10728;
10730 -> 10688;
10730 -> 10729;
10731 -> 10729;
10732 -> 10729;
10733 -> 10730;
10733 -> 10732;
10734 -> 10732;
10735 -> 10734;
10735 -> 10729;
10736 -> 10729;
10737 -> 10730;
10737 -> 10736;
10738 -> 10736;
10739 -> 10738;
10739 -> 10729;
10740 -> 10735;
10740 -> 10739;
10740 -> 10729;
10741 -> 10740;
10741 -> 10708;
10742 -> 10725;
10742 -> 10741;
10742 -> 10708;
10743 -> 10711;
10743 -> 10708;
10744 -> 10743;
10745 -> 10709;
10745 -> 10744;
10746 -> 10744;
10747 -> 10745;
10747 -> 10688;
10747 -> 10746;
10748 -> 10747;
10748 -> 10688;
10748 -> 10746;
10749 -> 10748;
10749 -> 10743;
10750 -> 10743;
10751 -> 10749;
10751 -> 10750;
10752 -> 10710;
10752 -> 10750;
10753 -> 10752;
10753 -> 10688;
10753 -> 10750;
10754 -> 0;
10754 -> 10750;
10755 -> 10751;
10755 -> 10753;
10756 -> 10743;
10757 -> 10743;
10758 -> 10709;
10758 -> 10757;
10759 -> 10757;
10760 -> 10758;
10760 -> 10688;
10760 -> 10759;
10761 -> 0;
10761 -> 10759;
10762 -> 10761;
10762 -> 10757;
10763 -> 10762;
10763 -> 10743;
10764 -> 10743;
10765 -> 10743;
10766 -> 10763;
10766 -> 10765;
10767 -> 10764;
10767 -> 10765;
10768 -> 10764;
10768 -> 10765;
10769 -> 10710;
10769 -> 10765;
10770 -> 10769;
10770 -> 10688;
10770 -> 10765;
10771 -> 0;
10771 -> 10765;
10772 -> 10770;
10772 -> 10766;
10772 -> 0;
10772 -> 10765;
10773 -> 10743;
10774 -> 10709;
10774 -> 10773;
10775 -> 10773;
10776 -> 10774;
10776 -> 10688;
10776 -> 10775;
10777 -> 10775;
10778 -> 10777;
10778 -> 10743;
10779 -> 10743;
10780 -> 10709;
10780 -> 10779;
10781 -> 10780;
10781 -> 10688;
10781 -> 10779;
10782 -> 10780;
10782 -> 10688;
10782 -> 10781;
10783 -> 10781;
10784 -> 10783;
10784 -> 10781;
10785 -> 10781;
10786 -> 10784;
10786 -> 10785;
10787 -> 10785;
10788 -> 10786;
10788 -> 10787;
10789 -> 10788;
10789 -> 10688;
10789 -> 10787;
10790 -> 10788;
10790 -> 10785;
10791 -> 10786;
10791 -> 10785;
10792 -> 10785;
10793 -> 10791;
10793 -> 10792;
10794 -> 10792;
10795 -> 10793;
10795 -> 10794;
10796 -> 10795;
10796 -> 10688;
10796 -> 10794;
10797 -> 10793;
10797 -> 10688;
10797 -> 10792;
10798 -> 10792;
10799 -> 10795;
10799 -> 10798;
10800 -> 10797;
10800 -> 10798;
10801 -> 10800;
10801 -> 0;
10801 -> 10798;
10802 -> 10800;
10802 -> 10798;
10803 -> 10798;
10804 -> 10799;
10804 -> 10803;
10805 -> 10803;
10806 -> 10804;
10806 -> 10805;
10807 -> 10806;
10807 -> 10803;
10808 -> 10807;
10808 -> 0;
10808 -> 10803;
10809 -> 10808;
10809 -> 10798;
10810 -> 10798;
10810 -> 10785;
10811 -> 10785;
10812 -> 10810;
10812 -> 10811;
10813 -> 10790;
10813 -> 10811;
10814 -> 10811;
10815 -> 10813;
10815 -> 10814;
10816 -> 10815;
10816 -> 10814;
10817 -> 9821;
10817 -> 10814;
10818 -> 10816;
10818 -> 10814;
10819 -> 10817;
10819 -> 10814;
10820 -> 10819;
10820 -> 0;
10820 -> 10814;
10821 -> 10819;
10821 -> 10814;
10822 -> 10814;
10823 -> 10818;
10823 -> 10822;
10824 -> 10822;
10825 -> 10823;
10825 -> 10824;
10826 -> 10825;
10826 -> 10822;
10827 -> 10826;
10827 -> 0;
10827 -> 10822;
10828 -> 10827;
10828 -> 10814;
10829 -> 10814;
10829 -> 10811;
10830 -> 10812;
10830 -> 10829;
10830 -> 10811;
10831 -> 10830;
10832 -> 10813;
10832 -> 10831;
10833 -> 10832;
10834 -> 10833;
10834 -> 10832;
10835 -> 9821;
10835 -> 10832;
10836 -> 10834;
10836 -> 10832;
10837 -> 10835;
10837 -> 10832;
10838 -> 10837;
10838 -> 0;
10838 -> 10832;
10839 -> 10837;
10839 -> 10832;
10840 -> 10832;
10841 -> 10836;
10841 -> 10840;
10842 -> 10840;
10843 -> 10841;
10843 -> 10842;
10844 -> 10843;
10844 -> 10840;
10845 -> 10844;
10845 -> 0;
10845 -> 10840;
10846 -> 10845;
10846 -> 10832;
10847 -> 10832;
10848 -> 10847;
10849 -> 10832;
10850 -> 10832;
10851 -> 10832;
10852 -> 10832;
10853 -> 10832;
10854 -> 10852;
10854 -> 10853;
10855 -> 10853;
10856 -> 10854;
10856 -> 10855;
10856 -> 10853;
10857 -> 10853;
10858 -> 10854;
10858 -> 10857;
10859 -> 10857;
10859 -> 10853;
10860 -> 10859;
10860 -> 10832;
10861 -> 10832;
10861 -> 10830;
10862 -> 10781;
10863 -> 10780;
10863 -> 10688;
10863 -> 10861;
10863 -> 10779;
10864 -> 10863;
10864 -> 10743;
10865 -> 10710;
10865 -> 10861;
10865 -> 10743;
10866 -> 10743;
10867 -> 10865;
10867 -> 10866;
10868 -> 10864;
10868 -> 10866;
10869 -> 10867;
10869 -> 10861;
10869 -> 10866;
10870 -> 10867;
10870 -> 10861;
10870 -> 10866;
10871 -> 0;
10871 -> 10866;
10872 -> 10866;
10873 -> 10868;
10873 -> 10872;
10874 -> 10872;
10875 -> 10873;
10875 -> 10874;
10876 -> 10872;
10877 -> 10875;
10877 -> 10876;
10878 -> 10876;
10879 -> 10878;
10879 -> 10866;
10880 -> 10870;
10880 -> 10879;
10880 -> 10866;
10881 -> 10866;
10882 -> 10868;
10882 -> 10881;
10883 -> 10881;
10884 -> 10882;
10884 -> 10883;
10885 -> 10881;
10886 -> 10884;
10886 -> 10885;
10887 -> 10885;
10888 -> 10887;
10888 -> 10885;
10889 -> 10888;
10889 -> 10885;
10890 -> 10886;
10890 -> 10885;
10891 -> 10885;
10892 -> 10890;
10892 -> 10891;
10893 -> 10891;
10894 -> 10893;
10894 -> 10885;
10895 -> 10885;
10896 -> 10890;
10896 -> 10895;
10897 -> 10896;
10897 -> 10868;
10897 -> 10895;
10898 -> 10897;
10898 -> 10885;
10899 -> 10885;
10900 -> 10898;
10900 -> 10899;
10901 -> 0;
10901 -> 10899;
10902 -> 10901;
10902 -> 10885;
10903 -> 10894;
10903 -> 10902;
10903 -> 10885;
10904 -> 10885;
10905 -> 10890;
10905 -> 10904;
10906 -> 10905;
10906 -> 10904;
10907 -> 10906;
10907 -> 10868;
10907 -> 10904;
10908 -> 10907;
10908 -> 10885;
10909 -> 10885;
10910 -> 10908;
10910 -> 10909;
10911 -> 10885;
10912 -> 10910;
10912 -> 10911;
10913 -> 10911;
10913 -> 10885;
10914 -> 10885;
10915 -> 10903;
10915 -> 10913;
10915 -> 10885;
10916 -> 10885;
10917 -> 10890;
10917 -> 10916;
10918 -> 10917;
10918 -> 10885;
10919 -> 10918;
10919 -> 3027;
10919 -> 10885;
10920 -> 10915;
10920 -> 10919;
10920 -> 10885;
10921 -> 10885;
10922 -> 10885;
10922 -> 10866;
10923 -> 10867;
10923 -> 10868;
10923 -> 10922;
10923 -> 10866;
10924 -> 10868;
10924 -> 10866;
10925 -> 10866;
10926 -> 10924;
10926 -> 10925;
10927 -> 10867;
10927 -> 10925;
10928 -> 10927;
10928 -> 10868;
10928 -> 10925;
10929 -> 10866;
10930 -> 10868;
10930 -> 10866;
10931 -> 10866;
10932 -> 10930;
10932 -> 10931;
10933 -> 10867;
10933 -> 10931;
10934 -> 10933;
10934 -> 10868;
10934 -> 10931;
10935 -> 10934;
10935 -> 10866;
10936 -> 10868;
10936 -> 10866;
10937 -> 10936;
10937 -> 10868;
10937 -> 10866;
10938 -> 10937;
10938 -> 10866;
10939 -> 10938;
10939 -> 10866;
10940 -> 10866;
10941 -> 10939;
10941 -> 10940;
10942 -> 10867;
10942 -> 10940;
10943 -> 10941;
10943 -> 10940;
10944 -> 10940;
10945 -> 10943;
10945 -> 10944;
10945 -> 10940;
10946 -> 10942;
10946 -> 10868;
10946 -> 0;
10946 -> 10940;
10947 -> 10940;
10948 -> 10943;
10948 -> 10947;
10949 -> 10948;
10949 -> 10868;
10949 -> 10947;
10950 -> 10947;
10950 -> 10940;
10951 -> 10950;
10951 -> 10866;
10952 -> 10938;
10952 -> 10951;
10953 -> 10951;
10954 -> 10952;
10954 -> 10953;
10955 -> 10954;
10955 -> 10868;
10955 -> 10953;
10956 -> 10953;
10956 -> 10951;
10957 -> 10956;
10957 -> 10951;
10958 -> 10867;
10958 -> 10868;
10958 -> 10957;
10959 -> 10957;
10960 -> 10958;
10960 -> 10959;
10961 -> 10952;
10961 -> 10959;
10962 -> 10960;
10962 -> 10868;
10962 -> 10959;
10963 -> 10960;
10963 -> 10868;
10963 -> 10959;
10964 -> 10961;
10964 -> 10960;
10965 -> 10964;
10965 -> 10960;
10966 -> 10965;
10966 -> 10960;
10967 -> 10960;
10968 -> 10966;
10968 -> 10967;
10969 -> 10960;
10969 -> 10967;
10970 -> 10968;
10970 -> 10967;
10971 -> 10967;
10972 -> 10970;
10972 -> 10971;
10972 -> 10967;
10973 -> 10969;
10973 -> 10868;
10973 -> 0;
10973 -> 10967;
10974 -> 10970;
10974 -> 10967;
10975 -> 10974;
10975 -> 10868;
10975 -> 10967;
10976 -> 10969;
10976 -> 10960;
10977 -> 10961;
10977 -> 10959;
10978 -> 10977;
10978 -> 10868;
10978 -> 10959;
10979 -> 10960;
10979 -> 10868;
10979 -> 10961;
10980 -> 10957;
10981 -> 10957;
10982 -> 10952;
10982 -> 10981;
10983 -> 10982;
10983 -> 10979;
10983 -> 10981;
10984 -> 10981;
10984 -> 10957;
10985 -> 10957;
10986 -> 10984;
10986 -> 10985;
10987 -> 10867;
10987 -> 10985;
10988 -> 10987;
10988 -> 10979;
10988 -> 10986;
10989 -> 10957;
10990 -> 10867;
10990 -> 10988;
10990 -> 0;
10990 -> 10866;
10991 -> 10990;
10992 -> 10991;
10993 -> 10992;
10993 -> 10988;
10993 -> 10991;
10994 -> 10993;
10994 -> 10990;
10995 -> 10990;
10996 -> 10994;
10996 -> 10995;
10997 -> 10867;
10997 -> 10995;
10998 -> 10996;
10998 -> 10995;
10999 -> 10998;
11000 -> 10866;
11001 -> 10868;
11001 -> 11000;
11002 -> 11000;
11003 -> 11001;
11003 -> 11002;
11004 -> 11003;
11004 -> 10988;
11004 -> 11002;
11005 -> 11000;
11006 -> 11004;
11006 -> 11005;
11007 -> 11005;
11008 -> 11007;
11008 -> 10866;
11009 -> 11008;
11010 -> 10868;
11010 -> 11009;
11011 -> 11009;
11012 -> 11010;
11012 -> 11011;
11013 -> 11012;
11013 -> 10988;
11013 -> 11011;
11014 -> 11009;
11015 -> 11013;
11015 -> 11014;
11016 -> 11014;
11017 -> 11016;
11017 -> 11014;
11018 -> 11017;
11018 -> 11014;
11019 -> 11015;
11019 -> 11014;
11020 -> 11014;
11021 -> 11019;
11021 -> 11020;
11022 -> 11020;
11023 -> 11022;
11023 -> 11014;
11024 -> 11014;
11025 -> 11019;
11025 -> 11024;
11026 -> 11025;
11026 -> 11014;
11027 -> 11014;
11028 -> 11026;
11028 -> 11027;
11029 -> 0;
11029 -> 11027;
11030 -> 11029;
11030 -> 11014;
11031 -> 11023;
11031 -> 11030;
11031 -> 11014;
11032 -> 11014;
11033 -> 11019;
11033 -> 11032;
11034 -> 11033;
11034 -> 11014;
11035 -> 11014;
11036 -> 11034;
11036 -> 11035;
11037 -> 11014;
11038 -> 11036;
11038 -> 11037;
11039 -> 11037;
11039 -> 11014;
11040 -> 11014;
11041 -> 11031;
11041 -> 11039;
11041 -> 11014;
11042 -> 11014;
11043 -> 11019;
11043 -> 11042;
11044 -> 11043;
11044 -> 11014;
11045 -> 11044;
11045 -> 3027;
11045 -> 11014;
11046 -> 11041;
11046 -> 11045;
11046 -> 11014;
11047 -> 11014;
11048 -> 11014;
11048 -> 11008;
11049 -> 10868;
11049 -> 10866;
11050 -> 11049;
11051 -> 11050;
11051 -> 10988;
11052 -> 11051;
11052 -> 11049;
11053 -> 11052;
11053 -> 10866;
11054 -> 10866;
11055 -> 11053;
11055 -> 11054;
11055 -> 10866;
11056 -> 11052;
11056 -> 11055;
11057 -> 11055;
11058 -> 11056;
11058 -> 11057;
11058 -> 11055;
11059 -> 11052;
11059 -> 11058;
11060 -> 11058;
11061 -> 11059;
11061 -> 11060;
11061 -> 11058;
11062 -> 10866;
11063 -> 10868;
11063 -> 11062;
11064 -> 11062;
11065 -> 11063;
11065 -> 11064;
11066 -> 11065;
11066 -> 10988;
11066 -> 11064;
11067 -> 11066;
11067 -> 11062;
11068 -> 11062;
11069 -> 11067;
11069 -> 11068;
11070 -> 0;
11070 -> 11069;
11071 -> 11070;
11072 -> 10867;
11072 -> 11070;
11073 -> 11072;
11073 -> 10988;
11073 -> 11070;
11074 -> 10867;
11074 -> 11070;
11074 -> 10866;
11075 -> 0;
11075 -> 10866;
11076 -> 11074;
11077 -> 10868;
11077 -> 11076;
11078 -> 11076;
11079 -> 11077;
11079 -> 11078;
11080 -> 11079;
11080 -> 11076;
11081 -> 11076;
11082 -> 11080;
11082 -> 11081;
11083 -> 11081;
11083 -> 11076;
11084 -> 11083;
11084 -> 11074;
11085 -> 11074;
11086 -> 10868;
11086 -> 11084;
11087 -> 11084;
11088 -> 11086;
11088 -> 11087;
11089 -> 10867;
11089 -> 11087;
11090 -> 11088;
11090 -> 11087;
11091 -> 11087;
11092 -> 11090;
11092 -> 11091;
11093 -> 11089;
11093 -> 11091;
11094 -> 11093;
11094 -> 11070;
11094 -> 11091;
11095 -> 11094;
11095 -> 11087;
11096 -> 11084;
11097 -> 10866;
11098 -> 11052;
11098 -> 11097;
11099 -> 11098;
11099 -> 10866;
11100 -> 10868;
11100 -> 10866;
11101 -> 10866;
11102 -> 11100;
11102 -> 11101;
11103 -> 10867;
11103 -> 11101;
11104 -> 11102;
11104 -> 11101;
11105 -> 11101;
11106 -> 11104;
11106 -> 11105;
11107 -> 11103;
11107 -> 11105;
11108 -> 11105;
11109 -> 11106;
11109 -> 11108;
11110 -> 11109;
11110 -> 11070;
11110 -> 11108;
11111 -> 11110;
11111 -> 11105;
11112 -> 11107;
11112 -> 11070;
11112 -> 11111;
11113 -> 0;
11113 -> 11111;
11114 -> 11105;
11115 -> 11114;
11115 -> 11101;
11116 -> 10866;
11117 -> 10743;
11118 -> 10743;
11119 -> 10709;
11119 -> 11118;
11120 -> 11118;
11121 -> 11119;
11121 -> 10688;
11121 -> 11070;
11121 -> 11120;
11122 -> 11121;
11122 -> 11118;
11123 -> 11118;
11124 -> 11122;
11124 -> 11123;
11125 -> 11123;
11126 -> 11124;
11126 -> 11070;
11126 -> 11125;
11127 -> 11126;
11127 -> 11070;
11127 -> 11125;
11128 -> 11127;
11128 -> 10743;
11129 -> 10743;
11130 -> 10743;
11131 -> 11128;
11131 -> 11130;
11132 -> 11129;
11132 -> 11130;
11133 -> 11129;
11133 -> 11130;
11134 -> 10710;
11134 -> 11130;
11135 -> 11134;
11135 -> 11070;
11135 -> 11130;
11136 -> 0;
11136 -> 11130;
11137 -> 11135;
11137 -> 11131;
11137 -> 11070;
11137 -> 11130;
11138 -> 10724;
11138 -> 10711;
11138 -> 10708;
11139 -> 11138;
11140 -> 10710;
11140 -> 11139;
11141 -> 0;
11141 -> 11139;
11142 -> 11139;
11143 -> 11139;
11144 -> 11141;
11144 -> 11143;
11145 -> 11142;
11145 -> 11143;
11146 -> 11142;
11146 -> 11143;
11147 -> 11140;
11147 -> 11143;
11148 -> 11147;
11148 -> 11070;
11148 -> 11144;
11148 -> 11146;
11149 -> 11138;
11150 -> 10724;
11150 -> 10708;
11151 -> 11150;
11152 -> 10709;
11152 -> 11151;
11153 -> 11151;
11154 -> 11152;
11154 -> 10688;
11154 -> 11148;
11154 -> 11153;
11155 -> 11153;
11156 -> 11155;
11156 -> 11150;
11157 -> 11156;
11157 -> 11150;
11158 -> 10709;
11158 -> 11150;
11159 -> 11150;
11160 -> 11159;
11160 -> 10688;
11160 -> 11148;
11161 -> 11160;
11161 -> 11150;
11162 -> 11150;
11163 -> 11157;
11163 -> 11162;
11164 -> 11158;
11164 -> 11162;
11165 -> 11161;
11165 -> 11162;
11166 -> 11163;
11166 -> 11165;
11167 -> 10710;
11167 -> 11166;
11167 -> 11150;
11168 -> 0;
11168 -> 11150;
11169 -> 11150;
11170 -> 10709;
11170 -> 11169;
11171 -> 11169;
11172 -> 11170;
11172 -> 11166;
11172 -> 11171;
11173 -> 11171;
11174 -> 11172;
11174 -> 11173;
11175 -> 11173;
11176 -> 11173;
11177 -> 11174;
11177 -> 11176;
11178 -> 11176;
11179 -> 11178;
11179 -> 11173;
11180 -> 11173;
11181 -> 11174;
11181 -> 11180;
11182 -> 11180;
11183 -> 11182;
11183 -> 11173;
11184 -> 11179;
11184 -> 11183;
11184 -> 11173;
11185 -> 11184;
11185 -> 11171;
11186 -> 11185;
11186 -> 11150;
11187 -> 11167;
11187 -> 11186;
11187 -> 11150;
11188 -> 10708;
11189 -> 10709;
11189 -> 11188;
11190 -> 11188;
11191 -> 11189;
11191 -> 11166;
11191 -> 11190;
11192 -> 11190;
11193 -> 11190;
11194 -> 11191;
11194 -> 11193;
11195 -> 11193;
11196 -> 11195;
11196 -> 11190;
11197 -> 11190;
11198 -> 11191;
11198 -> 11197;
11199 -> 11197;
11200 -> 11199;
11200 -> 11190;
11201 -> 11196;
11201 -> 11200;
11201 -> 11190;
11202 -> 11201;
11202 -> 10708;
11203 -> 10725;
11203 -> 11202;
11203 -> 10708;
11204 -> 10703;
11205 -> 10698;
11206 -> 10692;
11206 -> 10690;
11207 -> 9163;
11208 -> 9163;
11208 -> 5759;
11209 -> 9163;
11209 -> 5759;
11210 -> 11209;
11210 -> 11166;
11210 -> 5759;
11211 -> 1;
11212 -> 11166;
11212 -> 1;
}